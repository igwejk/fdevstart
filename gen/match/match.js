/**
 * @file match
 * @module jfseb.fdevstart.match
 * @copyright (c) Gerd Forstmann
 *
 *
 * Judging function for a match
 */
"use strict";

function rankToolMatch(a) {
    var missing = Object.keys(a.missing || {}).length;
    var required = Object.keys(a.required || {}).length;
    var optional = Object.keys(a.optional || {}).length;
    var spurious = Object.keys(a.spurious || {}).length;
    var matching = required + optional;
    return matching * 100 - 3 * missing;
}
exports.rankToolMatch = rankToolMatch;
;
exports.ToolMatch = {
    rankResult: function rankResult(a) {
        return rankToolMatch(a);
    },
    isAnyMatch: function isAnyMatch(toolmatch) {
        return Object.keys(toolmatch.toolmatchresult.required).length + Object.keys(toolmatch.toolmatchresult.optional).length > 0;
    },
    compBetterMatch: function compBetterMatch(a, b) {
        return rankToolMatch(b.toolmatchresult) - rankToolMatch(a.toolmatchresult);
    },

    isComplete: function isComplete(toolmatch) {
        return Object.keys(toolmatch.toolmatchresult.missing).length === 0;
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tYXRjaC9tYXRjaC50cyIsIm1hdGNoL21hdGNoLmpzIl0sIm5hbWVzIjpbInJhbmtUb29sTWF0Y2giLCJhIiwibWlzc2luZyIsIk9iamVjdCIsImtleXMiLCJsZW5ndGgiLCJyZXF1aXJlZCIsIm9wdGlvbmFsIiwic3B1cmlvdXMiLCJtYXRjaGluZyIsImV4cG9ydHMiLCJUb29sTWF0Y2giLCJyYW5rUmVzdWx0IiwiaXNBbnlNYXRjaCIsInRvb2xtYXRjaCIsInRvb2xtYXRjaHJlc3VsdCIsImNvbXBCZXR0ZXJNYXRjaCIsImIiLCJpc0NvbXBsZXRlIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7QUNRQTs7QURJQSxTQUFBQSxhQUFBLENBQThCQyxDQUE5QixFQUF3RDtBQUN0RCxRQUFJQyxVQUFVQyxPQUFPQyxJQUFQLENBQVlILEVBQUVDLE9BQUYsSUFBYSxFQUF6QixFQUE2QkcsTUFBM0M7QUFDQSxRQUFJQyxXQUFXSCxPQUFPQyxJQUFQLENBQVlILEVBQUVLLFFBQUYsSUFBYyxFQUExQixFQUE4QkQsTUFBN0M7QUFDQSxRQUFJRSxXQUFXSixPQUFPQyxJQUFQLENBQVlILEVBQUVNLFFBQUYsSUFBYyxFQUExQixFQUErQkYsTUFBOUM7QUFDQSxRQUFJRyxXQUFXTCxPQUFPQyxJQUFQLENBQVlILEVBQUVPLFFBQUYsSUFBYyxFQUExQixFQUE4QkgsTUFBN0M7QUFDQSxRQUFJSSxXQUFXSCxXQUFXQyxRQUExQjtBQUNBLFdBQU9FLFdBQVcsR0FBWCxHQUFpQixJQUFJUCxPQUE1QjtBQUNEO0FBUGVRLFFBQUFWLGFBQUEsR0FBYUEsYUFBYjtBQU9mO0FBRVlVLFFBQUFDLFNBQUEsR0FBWTtBQUN2QkMsZ0JBQVksb0JBQVNYLENBQVQsRUFBbUM7QUFDN0MsZUFBT0QsY0FBY0MsQ0FBZCxDQUFQO0FBQ0QsS0FIc0I7QUFJdkJZLGdCQUFZLG9CQUFTQyxTQUFULEVBQXNDO0FBQ2hELGVBQVFYLE9BQU9DLElBQVAsQ0FBWVUsVUFBVUMsZUFBVixDQUEwQlQsUUFBdEMsRUFBZ0RELE1BQWhELEdBQ1BGLE9BQU9DLElBQVAsQ0FBWVUsVUFBVUMsZUFBVixDQUEwQlIsUUFBdEMsRUFBZ0RGLE1BRDFDLEdBQ29ELENBRDNEO0FBRUQsS0FQc0I7QUFRdkJXLG1CQVJ1QiwyQkFRUGYsQ0FSTyxFQVFnQmdCLENBUmhCLEVBUXFDO0FBQzFELGVBQU9qQixjQUFjaUIsRUFBRUYsZUFBaEIsSUFBb0NmLGNBQWNDLEVBQUVjLGVBQWhCLENBQTNDO0FBQ0QsS0FWc0I7O0FBV3ZCRyxnQkFBWSxvQkFBU0osU0FBVCxFQUFxQztBQUMvQyxlQUFPWCxPQUFPQyxJQUFQLENBQVlVLFVBQVVDLGVBQVYsQ0FBMEJiLE9BQXRDLEVBQStDRyxNQUEvQyxLQUEwRCxDQUFqRTtBQUNEO0FBYnNCLENBQVoiLCJmaWxlIjoibWF0Y2gvbWF0Y2guanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlIG1hdGNoXG4gKiBAbW9kdWxlIGpmc2ViLmZkZXZzdGFydC5tYXRjaFxuICogQGNvcHlyaWdodCAoYykgR2VyZCBGb3JzdG1hbm5cbiAqXG4gKlxuICogSnVkZ2luZyBmdW5jdGlvbiBmb3IgYSBtYXRjaFxuICovXG5cbmltcG9ydCAqIGFzIElNYXRjaCBmcm9tICcuL2lmbWF0Y2gnO1xuXG5cbmV4cG9ydCBmdW5jdGlvbiByYW5rVG9vbE1hdGNoKGE6IElNYXRjaC5JVG9vbE1hdGNoUmVzdWx0KSA6IG51bWJlciB7XG4gIHZhciBtaXNzaW5nID0gT2JqZWN0LmtleXMoYS5taXNzaW5nIHx8IHt9KS5sZW5ndGg7XG4gIHZhciByZXF1aXJlZCA9IE9iamVjdC5rZXlzKGEucmVxdWlyZWQgfHwge30pLmxlbmd0aDtcbiAgdmFyIG9wdGlvbmFsID0gT2JqZWN0LmtleXMoYS5vcHRpb25hbCB8fCB7fSkgLmxlbmd0aDtcbiAgdmFyIHNwdXJpb3VzID0gT2JqZWN0LmtleXMoYS5zcHVyaW91cyB8fCB7fSkubGVuZ3RoO1xuICB2YXIgbWF0Y2hpbmcgPSByZXF1aXJlZCArIG9wdGlvbmFsO1xuICByZXR1cm4gbWF0Y2hpbmcgKiAxMDAgLSAzICogbWlzc2luZztcbn07XG5cbmV4cG9ydCBjb25zdCBUb29sTWF0Y2ggPSB7XG4gIHJhbmtSZXN1bHQ6IGZ1bmN0aW9uKGE6IElNYXRjaC5JVG9vbE1hdGNoUmVzdWx0KSA6IG51bWJlciB7XG4gICAgcmV0dXJuIHJhbmtUb29sTWF0Y2goYSk7XG4gIH0sXG4gIGlzQW55TWF0Y2g6IGZ1bmN0aW9uKHRvb2xtYXRjaCA6IElNYXRjaC5JVG9vbE1hdGNoKSA6IGJvb2xlYW4gIHtcbiAgICByZXR1cm4gKE9iamVjdC5rZXlzKHRvb2xtYXRjaC50b29sbWF0Y2hyZXN1bHQucmVxdWlyZWQpLmxlbmd0aCArXG4gICAgIE9iamVjdC5rZXlzKHRvb2xtYXRjaC50b29sbWF0Y2hyZXN1bHQub3B0aW9uYWwpLmxlbmd0aCkgPiAwO1xuICB9LFxuICBjb21wQmV0dGVyTWF0Y2goYSA6IElNYXRjaC5JVG9vbE1hdGNoLCBiIDogSU1hdGNoLklUb29sTWF0Y2gpIHtcbiAgICByZXR1cm4gcmFua1Rvb2xNYXRjaChiLnRvb2xtYXRjaHJlc3VsdCApIC0gcmFua1Rvb2xNYXRjaChhLnRvb2xtYXRjaHJlc3VsdCk7XG4gIH0sXG4gIGlzQ29tcGxldGU6IGZ1bmN0aW9uKHRvb2xtYXRjaDogSU1hdGNoLklUb29sTWF0Y2gpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXModG9vbG1hdGNoLnRvb2xtYXRjaHJlc3VsdC5taXNzaW5nKS5sZW5ndGggPT09IDA7XG4gIH1cbn0iLCIvKipcbiAqIEBmaWxlIG1hdGNoXG4gKiBAbW9kdWxlIGpmc2ViLmZkZXZzdGFydC5tYXRjaFxuICogQGNvcHlyaWdodCAoYykgR2VyZCBGb3JzdG1hbm5cbiAqXG4gKlxuICogSnVkZ2luZyBmdW5jdGlvbiBmb3IgYSBtYXRjaFxuICovXG5cInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIHJhbmtUb29sTWF0Y2goYSkge1xuICAgIHZhciBtaXNzaW5nID0gT2JqZWN0LmtleXMoYS5taXNzaW5nIHx8IHt9KS5sZW5ndGg7XG4gICAgdmFyIHJlcXVpcmVkID0gT2JqZWN0LmtleXMoYS5yZXF1aXJlZCB8fCB7fSkubGVuZ3RoO1xuICAgIHZhciBvcHRpb25hbCA9IE9iamVjdC5rZXlzKGEub3B0aW9uYWwgfHwge30pLmxlbmd0aDtcbiAgICB2YXIgc3B1cmlvdXMgPSBPYmplY3Qua2V5cyhhLnNwdXJpb3VzIHx8IHt9KS5sZW5ndGg7XG4gICAgdmFyIG1hdGNoaW5nID0gcmVxdWlyZWQgKyBvcHRpb25hbDtcbiAgICByZXR1cm4gbWF0Y2hpbmcgKiAxMDAgLSAzICogbWlzc2luZztcbn1cbmV4cG9ydHMucmFua1Rvb2xNYXRjaCA9IHJhbmtUb29sTWF0Y2g7XG47XG5leHBvcnRzLlRvb2xNYXRjaCA9IHtcbiAgICByYW5rUmVzdWx0OiBmdW5jdGlvbiAoYSkge1xuICAgICAgICByZXR1cm4gcmFua1Rvb2xNYXRjaChhKTtcbiAgICB9LFxuICAgIGlzQW55TWF0Y2g6IGZ1bmN0aW9uICh0b29sbWF0Y2gpIHtcbiAgICAgICAgcmV0dXJuIChPYmplY3Qua2V5cyh0b29sbWF0Y2gudG9vbG1hdGNocmVzdWx0LnJlcXVpcmVkKS5sZW5ndGggK1xuICAgICAgICAgICAgT2JqZWN0LmtleXModG9vbG1hdGNoLnRvb2xtYXRjaHJlc3VsdC5vcHRpb25hbCkubGVuZ3RoKSA+IDA7XG4gICAgfSxcbiAgICBjb21wQmV0dGVyTWF0Y2goYSwgYikge1xuICAgICAgICByZXR1cm4gcmFua1Rvb2xNYXRjaChiLnRvb2xtYXRjaHJlc3VsdCkgLSByYW5rVG9vbE1hdGNoKGEudG9vbG1hdGNocmVzdWx0KTtcbiAgICB9LFxuICAgIGlzQ29tcGxldGU6IGZ1bmN0aW9uICh0b29sbWF0Y2gpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHRvb2xtYXRjaC50b29sbWF0Y2hyZXN1bHQubWlzc2luZykubGVuZ3RoID09PSAwO1xuICAgIH1cbn07XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
