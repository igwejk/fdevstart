/**
 * @file toolmatcher
 * @module jfseb.fdevstart.toolmatcher
 * @copyright (c) Gerd Forstmann
 *
 * Match a tool record on a sentence,
 *
 * This will unify matching required and optional category words
 * with the requirements of the tool.
 *
 */
"use strict";
// / <reference path="../../lib/node-4.d.ts" />

var debug = require('debug');
var Sentence = require('./sentence');
var utils = require('../utils/utils');
var debuglog = debug('toolmatcher');
function matchTool(oSentence, oTool) {
    var used = {};
    var required = {};
    var matched = {};
    Object.keys(oTool.requires).forEach(function (sCategory) {
        var _Sentence$findWordByC = Sentence.findWordByCategory(oSentence, sCategory),
            word = _Sentence$findWordByC.word,
            index = _Sentence$findWordByC.index;

        matched[word] = "required";
        used[index] = 1;
        required[sCategory] = 1;
    });
    Object.keys(oTool.optional).forEach(function (sCategory) {
        var _Sentence$findWordByC2 = Sentence.findWordByCategory(oSentence, sCategory),
            word = _Sentence$findWordByC2.word,
            index = _Sentence$findWordByC2.index;

        matched[word] = "optional";
        used[index] = 1;
        required[sCategory] = 1;
    });
    var missing = utils.ArrayUtils.setMinus(Object.keys(oTool.requires), Object.keys(required)).reduce(function (map, sKey) {
        map[sKey] = 1;
        return map;
    }, {});
    return {
        required: required,
        missing: {},
        optional: {}
    };
}
exports.matchTool = matchTool;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tYXRjaC90b29sbWF0Y2hlci50cyIsIm1hdGNoL3Rvb2xtYXRjaGVyLmpzIl0sIm5hbWVzIjpbImRlYnVnIiwicmVxdWlyZSIsIlNlbnRlbmNlIiwidXRpbHMiLCJkZWJ1Z2xvZyIsIm1hdGNoVG9vbCIsIm9TZW50ZW5jZSIsIm9Ub29sIiwidXNlZCIsInJlcXVpcmVkIiwibWF0Y2hlZCIsIk9iamVjdCIsImtleXMiLCJyZXF1aXJlcyIsImZvckVhY2giLCJzQ2F0ZWdvcnkiLCJmaW5kV29yZEJ5Q2F0ZWdvcnkiLCJ3b3JkIiwiaW5kZXgiLCJvcHRpb25hbCIsIm1pc3NpbmciLCJBcnJheVV0aWxzIiwic2V0TWludXMiLCJyZWR1Y2UiLCJtYXAiLCJzS2V5IiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0FDV0E7QURDQTs7QUFFQSxJQUFZQSxRQUFLQyxRQUFNLE9BQU4sQ0FBakI7QUFFQSxJQUFZQyxXQUFRRCxRQUFNLFlBQU4sQ0FBcEI7QUFFQSxJQUFZRSxRQUFLRixRQUFNLGdCQUFOLENBQWpCO0FBSUEsSUFBTUcsV0FBV0osTUFBTSxhQUFOLENBQWpCO0FBRUEsU0FBQUssU0FBQSxDQUEwQkMsU0FBMUIsRUFBd0RDLEtBQXhELEVBQTRFO0FBQzFFLFFBQUlDLE9BQU8sRUFBWDtBQUNBLFFBQUlDLFdBQVcsRUFBZjtBQUNBLFFBQUlDLFVBQVUsRUFBZDtBQUNBQyxXQUFPQyxJQUFQLENBQVlMLE1BQU1NLFFBQWxCLEVBQTRCQyxPQUE1QixDQUFvQyxVQUFTQyxTQUFULEVBQTJCO0FBQUEsb0NBQ3RDYixTQUFTYyxrQkFBVCxDQUE0QlYsU0FBNUIsRUFBdUNTLFNBQXZDLENBRHNDO0FBQUEsWUFDdkRFLElBRHVELHlCQUN2REEsSUFEdUQ7QUFBQSxZQUNoREMsS0FEZ0QseUJBQ2hEQSxLQURnRDs7QUFFN0RSLGdCQUFRTyxJQUFSLElBQXVCLFVBQXZCO0FBQ0FULGFBQUtVLEtBQUwsSUFBYyxDQUFkO0FBQ0FULGlCQUFTTSxTQUFULElBQXNCLENBQXRCO0FBQ0QsS0FMRDtBQU1BSixXQUFPQyxJQUFQLENBQVlMLE1BQU1ZLFFBQWxCLEVBQTRCTCxPQUE1QixDQUFvQyxVQUFTQyxTQUFULEVBQTJCO0FBQUEscUNBQ3JDYixTQUFTYyxrQkFBVCxDQUE0QlYsU0FBNUIsRUFBdUNTLFNBQXZDLENBRHFDO0FBQUEsWUFDdERFLElBRHNELDBCQUN0REEsSUFEc0Q7QUFBQSxZQUMvQ0MsS0FEK0MsMEJBQy9DQSxLQUQrQzs7QUFFN0RSLGdCQUFRTyxJQUFSLElBQXVCLFVBQXZCO0FBQ0FULGFBQUtVLEtBQUwsSUFBYyxDQUFkO0FBQ0FULGlCQUFTTSxTQUFULElBQXNCLENBQXRCO0FBQ0QsS0FMRDtBQU1BLFFBQUlLLFVBQVVqQixNQUFNa0IsVUFBTixDQUFpQkMsUUFBakIsQ0FBMEJYLE9BQU9DLElBQVAsQ0FBWUwsTUFBTU0sUUFBbEIsQ0FBMUIsRUFBc0RGLE9BQU9DLElBQVAsQ0FBWUgsUUFBWixDQUF0RCxFQUE2RWMsTUFBN0UsQ0FDWixVQUFTQyxHQUFULEVBQWNDLElBQWQsRUFBa0I7QUFDbEJELFlBQUlDLElBQUosSUFBWSxDQUFaO0FBQ0EsZUFBT0QsR0FBUDtBQUNELEtBSmEsRUFJWixFQUpZLENBQWQ7QUFNQSxXQUFPO0FBQ0xmLGtCQUFXQSxRQUROO0FBRUxXLGlCQUFVLEVBRkw7QUFHTEQsa0JBQVc7QUFITixLQUFQO0FBS0Q7QUEzQmVPLFFBQUFyQixTQUFBLEdBQVNBLFNBQVQiLCJmaWxlIjoibWF0Y2gvdG9vbG1hdGNoZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQGZpbGUgdG9vbG1hdGNoZXJcclxuICogQG1vZHVsZSBqZnNlYi5mZGV2c3RhcnQudG9vbG1hdGNoZXJcclxuICogQGNvcHlyaWdodCAoYykgR2VyZCBGb3JzdG1hbm5cclxuICpcclxuICogTWF0Y2ggYSB0b29sIHJlY29yZCBvbiBhIHNlbnRlbmNlLFxyXG4gKlxyXG4gKiBUaGlzIHdpbGwgdW5pZnkgbWF0Y2hpbmcgcmVxdWlyZWQgYW5kIG9wdGlvbmFsIGNhdGVnb3J5IHdvcmRzXHJcbiAqIHdpdGggdGhlIHJlcXVpcmVtZW50cyBvZiB0aGUgdG9vbC5cclxuICpcclxuICovXHJcblxyXG4vLyAvIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL2xpYi9ub2RlLTQuZC50c1wiIC8+XHJcblxyXG5pbXBvcnQgKiBhcyBkZWJ1ZyBmcm9tICdkZWJ1Zyc7XHJcblxyXG5pbXBvcnQgKiBhcyBTZW50ZW5jZSBmcm9tICcuL3NlbnRlbmNlJztcclxuXHJcbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gJy4uL3V0aWxzL3V0aWxzJztcclxuXHJcbmltcG9ydCAqIGFzIElNYXRjaCBmcm9tICcuL2lmbWF0Y2gnO1xyXG5cclxuY29uc3QgZGVidWdsb2cgPSBkZWJ1ZygndG9vbG1hdGNoZXInKTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBtYXRjaFRvb2wob1NlbnRlbmNlIDogSU1hdGNoLklTZW50ZW5jZSwgb1Rvb2wgOiBJTWF0Y2guSVRvb2wpIDogSU1hdGNoLklUb29sTWF0Y2hSZXN1bHQge1xyXG4gIHZhciB1c2VkID0ge30gYXMgYW55O1xyXG4gIHZhciByZXF1aXJlZCA9IHt9IGFzIGFueTtcclxuICB2YXIgbWF0Y2hlZCA9IHt9IGFzIGFueTtcclxuICBPYmplY3Qua2V5cyhvVG9vbC5yZXF1aXJlcykuZm9yRWFjaChmdW5jdGlvbihzQ2F0ZWdvcnkgOiBzdHJpbmcpIHtcclxuICAgIGxldCB7IHdvcmQgLCBpbmRleCB9ID0gU2VudGVuY2UuZmluZFdvcmRCeUNhdGVnb3J5KG9TZW50ZW5jZSwgc0NhdGVnb3J5KTtcclxuICAgIG1hdGNoZWRbd29yZCBhcyBhbnldID0gXCJyZXF1aXJlZFwiO1xyXG4gICAgdXNlZFtpbmRleF0gPSAxO1xyXG4gICAgcmVxdWlyZWRbc0NhdGVnb3J5XSA9IDE7XHJcbiAgfSk7XHJcbiAgT2JqZWN0LmtleXMob1Rvb2wub3B0aW9uYWwpLmZvckVhY2goZnVuY3Rpb24oc0NhdGVnb3J5IDogc3RyaW5nKSB7XHJcbiAgICB2YXIgIHsgd29yZCAsIGluZGV4IH0gPSBTZW50ZW5jZS5maW5kV29yZEJ5Q2F0ZWdvcnkob1NlbnRlbmNlLCBzQ2F0ZWdvcnkpO1xyXG4gICAgbWF0Y2hlZFt3b3JkIGFzIGFueV0gPSBcIm9wdGlvbmFsXCI7XHJcbiAgICB1c2VkW2luZGV4XSA9IDE7XHJcbiAgICByZXF1aXJlZFtzQ2F0ZWdvcnldID0gMTtcclxuICB9KTtcclxuICB2YXIgbWlzc2luZyA9IHV0aWxzLkFycmF5VXRpbHMuc2V0TWludXMoT2JqZWN0LmtleXMob1Rvb2wucmVxdWlyZXMpLE9iamVjdC5rZXlzKHJlcXVpcmVkKSkucmVkdWNlKFxyXG4gICAgZnVuY3Rpb24obWFwLCBzS2V5KSB7XHJcbiAgICBtYXBbc0tleV0gPSAxO1xyXG4gICAgcmV0dXJuIG1hcDtcclxuICB9LHt9KVxyXG5cclxuICByZXR1cm4ge1xyXG4gICAgcmVxdWlyZWQgOiByZXF1aXJlZCxcclxuICAgIG1pc3NpbmcgOiB7fSxcclxuICAgIG9wdGlvbmFsIDoge31cclxuICB9XHJcbn1cclxuIiwiLyoqXG4gKiBAZmlsZSB0b29sbWF0Y2hlclxuICogQG1vZHVsZSBqZnNlYi5mZGV2c3RhcnQudG9vbG1hdGNoZXJcbiAqIEBjb3B5cmlnaHQgKGMpIEdlcmQgRm9yc3RtYW5uXG4gKlxuICogTWF0Y2ggYSB0b29sIHJlY29yZCBvbiBhIHNlbnRlbmNlLFxuICpcbiAqIFRoaXMgd2lsbCB1bmlmeSBtYXRjaGluZyByZXF1aXJlZCBhbmQgb3B0aW9uYWwgY2F0ZWdvcnkgd29yZHNcbiAqIHdpdGggdGhlIHJlcXVpcmVtZW50cyBvZiB0aGUgdG9vbC5cbiAqXG4gKi9cblwidXNlIHN0cmljdFwiO1xuLy8gLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9saWIvbm9kZS00LmQudHNcIiAvPlxuY29uc3QgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpO1xuY29uc3QgU2VudGVuY2UgPSByZXF1aXJlKCcuL3NlbnRlbmNlJyk7XG5jb25zdCB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzL3V0aWxzJyk7XG5jb25zdCBkZWJ1Z2xvZyA9IGRlYnVnKCd0b29sbWF0Y2hlcicpO1xuZnVuY3Rpb24gbWF0Y2hUb29sKG9TZW50ZW5jZSwgb1Rvb2wpIHtcbiAgICB2YXIgdXNlZCA9IHt9O1xuICAgIHZhciByZXF1aXJlZCA9IHt9O1xuICAgIHZhciBtYXRjaGVkID0ge307XG4gICAgT2JqZWN0LmtleXMob1Rvb2wucmVxdWlyZXMpLmZvckVhY2goZnVuY3Rpb24gKHNDYXRlZ29yeSkge1xuICAgICAgICBsZXQgeyB3b3JkLCBpbmRleCB9ID0gU2VudGVuY2UuZmluZFdvcmRCeUNhdGVnb3J5KG9TZW50ZW5jZSwgc0NhdGVnb3J5KTtcbiAgICAgICAgbWF0Y2hlZFt3b3JkXSA9IFwicmVxdWlyZWRcIjtcbiAgICAgICAgdXNlZFtpbmRleF0gPSAxO1xuICAgICAgICByZXF1aXJlZFtzQ2F0ZWdvcnldID0gMTtcbiAgICB9KTtcbiAgICBPYmplY3Qua2V5cyhvVG9vbC5vcHRpb25hbCkuZm9yRWFjaChmdW5jdGlvbiAoc0NhdGVnb3J5KSB7XG4gICAgICAgIHZhciB7IHdvcmQsIGluZGV4IH0gPSBTZW50ZW5jZS5maW5kV29yZEJ5Q2F0ZWdvcnkob1NlbnRlbmNlLCBzQ2F0ZWdvcnkpO1xuICAgICAgICBtYXRjaGVkW3dvcmRdID0gXCJvcHRpb25hbFwiO1xuICAgICAgICB1c2VkW2luZGV4XSA9IDE7XG4gICAgICAgIHJlcXVpcmVkW3NDYXRlZ29yeV0gPSAxO1xuICAgIH0pO1xuICAgIHZhciBtaXNzaW5nID0gdXRpbHMuQXJyYXlVdGlscy5zZXRNaW51cyhPYmplY3Qua2V5cyhvVG9vbC5yZXF1aXJlcyksIE9iamVjdC5rZXlzKHJlcXVpcmVkKSkucmVkdWNlKGZ1bmN0aW9uIChtYXAsIHNLZXkpIHtcbiAgICAgICAgbWFwW3NLZXldID0gMTtcbiAgICAgICAgcmV0dXJuIG1hcDtcbiAgICB9LCB7fSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcmVxdWlyZWQ6IHJlcXVpcmVkLFxuICAgICAgICBtaXNzaW5nOiB7fSxcbiAgICAgICAgb3B0aW9uYWw6IHt9XG4gICAgfTtcbn1cbmV4cG9ydHMubWF0Y2hUb29sID0gbWF0Y2hUb29sO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
