"use strict";

var debug = require('debug');
var debuglog = debug('dispatcher');
function cleanseString(sString) {
    sString = sString.replace(/^\s+/, '');
    sString = sString.replace(/\s+$/, '');
    sString = sString.replace(/\s\s+/g, ' ');
    return sString;
}
exports.cleanseString = cleanseString;
/**
 *
 */
function breakdownString(sString) {
    var u = sString.split(" ");
    var k = 0;
    if (u.length === 0) {
        return [[]];
    }
    var w = [[u[0]]];
    while (k < u.length - 1) {
        k = k + 1;
        var r1 = w.map(function (entry) {
            debuglog(JSON.stringify(entry));
            var entry = entry.slice(0);
            debuglog(JSON.stringify(entry));
            entry[entry.length - 1] = entry[entry.length - 1] + " " + u[k];
            return entry;
        });
        var r2 = w.map(function (entry) {
            debuglog("2 >" + JSON.stringify(entry));
            var entry = entry.slice(0);
            entry.push(u[k]);
            return entry;
        });
        debuglog(JSON.stringify(r1));
        debuglog(JSON.stringify(r2));
        w = r1.concat(r2);
    }
    return w;
}
exports.breakdownString = breakdownString;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1hdGNoL2JyZWFrZG93bi5qcyIsIi4uL3NyYy9tYXRjaC9icmVha2Rvd24udHMiXSwibmFtZXMiOlsiZGVidWciLCJyZXF1aXJlIiwiZGVidWdsb2ciLCJjbGVhbnNlU3RyaW5nIiwic1N0cmluZyIsInJlcGxhY2UiLCJleHBvcnRzIiwiYnJlYWtkb3duU3RyaW5nIiwidSIsInNwbGl0IiwiayIsImxlbmd0aCIsInciLCJyMSIsIm1hcCIsImVudHJ5IiwiSlNPTiIsInN0cmluZ2lmeSIsInNsaWNlIiwicjIiLCJwdXNoIiwiY29uY2F0Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUNDQSxJQUFZQSxRQUFLQyxRQUFNLE9BQU4sQ0FBakI7QUFDQSxJQUFNQyxXQUFXRixNQUFNLFlBQU4sQ0FBakI7QUFHQSxTQUFBRyxhQUFBLENBQThCQyxPQUE5QixFQUE4QztBQUMxQ0EsY0FBVUEsUUFBUUMsT0FBUixDQUFnQixNQUFoQixFQUF1QixFQUF2QixDQUFWO0FBQ0FELGNBQVVBLFFBQVFDLE9BQVIsQ0FBZ0IsTUFBaEIsRUFBdUIsRUFBdkIsQ0FBVjtBQUNBRCxjQUFVQSxRQUFRQyxPQUFSLENBQWdCLFFBQWhCLEVBQTBCLEdBQTFCLENBQVY7QUFDQSxXQUFPRCxPQUFQO0FBQ0g7QUFMZUUsUUFBQUgsYUFBQSxHQUFhQSxhQUFiO0FBTWhCOzs7QUFHQSxTQUFBSSxlQUFBLENBQWdDSCxPQUFoQyxFQUErQztBQUMzQyxRQUFJSSxJQUFJSixRQUFRSyxLQUFSLENBQWMsR0FBZCxDQUFSO0FBQ0EsUUFBSUMsSUFBSSxDQUFSO0FBQ0EsUUFBR0YsRUFBRUcsTUFBRixLQUFhLENBQWhCLEVBQW1CO0FBQ2YsZUFBTyxDQUFDLEVBQUQsQ0FBUDtBQUNIO0FBQ0QsUUFBSUMsSUFBSSxDQUFDLENBQUNKLEVBQUUsQ0FBRixDQUFELENBQUQsQ0FBUjtBQUNBLFdBQU1FLElBQUlGLEVBQUVHLE1BQUYsR0FBVyxDQUFyQixFQUF3QjtBQUNwQkQsWUFBSUEsSUFBSSxDQUFSO0FBQ0EsWUFBSUcsS0FBS0QsRUFBRUUsR0FBRixDQUFNLFVBQVVDLEtBQVYsRUFBZTtBQUMxQmIscUJBQVNjLEtBQUtDLFNBQUwsQ0FBZUYsS0FBZixDQUFUO0FBQ0EsZ0JBQUlBLFFBQVFBLE1BQU1HLEtBQU4sQ0FBWSxDQUFaLENBQVo7QUFDQWhCLHFCQUFTYyxLQUFLQyxTQUFMLENBQWVGLEtBQWYsQ0FBVDtBQUNBQSxrQkFBTUEsTUFBTUosTUFBTixHQUFjLENBQXBCLElBQTBCSSxNQUFNQSxNQUFNSixNQUFOLEdBQWEsQ0FBbkIsSUFBeUIsR0FBekIsR0FBK0JILEVBQUVFLENBQUYsQ0FBekQ7QUFDQSxtQkFBT0ssS0FBUDtBQUNILFNBTlEsQ0FBVDtBQU9BLFlBQUlJLEtBQU1QLEVBQUVFLEdBQUYsQ0FBTSxVQUFVQyxLQUFWLEVBQWU7QUFDM0JiLHFCQUFTLFFBQVFjLEtBQUtDLFNBQUwsQ0FBZUYsS0FBZixDQUFqQjtBQUNBLGdCQUFJQSxRQUFRQSxNQUFNRyxLQUFOLENBQVksQ0FBWixDQUFaO0FBQ0FILGtCQUFNSyxJQUFOLENBQVdaLEVBQUVFLENBQUYsQ0FBWDtBQUNBLG1CQUFPSyxLQUFQO0FBQ0gsU0FMUyxDQUFWO0FBTUFiLGlCQUFTYyxLQUFLQyxTQUFMLENBQWVKLEVBQWYsQ0FBVDtBQUNBWCxpQkFBU2MsS0FBS0MsU0FBTCxDQUFlRSxFQUFmLENBQVQ7QUFDQVAsWUFBSUMsR0FBR1EsTUFBSCxDQUFVRixFQUFWLENBQUo7QUFDSDtBQUNELFdBQU9QLENBQVA7QUFDSDtBQTNCZU4sUUFBQUMsZUFBQSxHQUFlQSxlQUFmIiwiZmlsZSI6Im1hdGNoL2JyZWFrZG93bi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpO1xuY29uc3QgZGVidWdsb2cgPSBkZWJ1ZygnZGlzcGF0Y2hlcicpO1xuZnVuY3Rpb24gY2xlYW5zZVN0cmluZyhzU3RyaW5nKSB7XG4gICAgc1N0cmluZyA9IHNTdHJpbmcucmVwbGFjZSgvXlxccysvLCAnJyk7XG4gICAgc1N0cmluZyA9IHNTdHJpbmcucmVwbGFjZSgvXFxzKyQvLCAnJyk7XG4gICAgc1N0cmluZyA9IHNTdHJpbmcucmVwbGFjZSgvXFxzXFxzKy9nLCAnICcpO1xuICAgIHJldHVybiBzU3RyaW5nO1xufVxuZXhwb3J0cy5jbGVhbnNlU3RyaW5nID0gY2xlYW5zZVN0cmluZztcbi8qKlxuICpcbiAqL1xuZnVuY3Rpb24gYnJlYWtkb3duU3RyaW5nKHNTdHJpbmcpIHtcbiAgICB2YXIgdSA9IHNTdHJpbmcuc3BsaXQoXCIgXCIpO1xuICAgIHZhciBrID0gMDtcbiAgICBpZiAodS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIFtbXV07XG4gICAgfVxuICAgIHZhciB3ID0gW1t1WzBdXV07XG4gICAgd2hpbGUgKGsgPCB1Lmxlbmd0aCAtIDEpIHtcbiAgICAgICAgayA9IGsgKyAxO1xuICAgICAgICB2YXIgcjEgPSB3Lm1hcChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICAgICAgICAgIGRlYnVnbG9nKEpTT04uc3RyaW5naWZ5KGVudHJ5KSk7XG4gICAgICAgICAgICB2YXIgZW50cnkgPSBlbnRyeS5zbGljZSgwKTtcbiAgICAgICAgICAgIGRlYnVnbG9nKEpTT04uc3RyaW5naWZ5KGVudHJ5KSk7XG4gICAgICAgICAgICBlbnRyeVtlbnRyeS5sZW5ndGggLSAxXSA9IGVudHJ5W2VudHJ5Lmxlbmd0aCAtIDFdICsgXCIgXCIgKyB1W2tdO1xuICAgICAgICAgICAgcmV0dXJuIGVudHJ5O1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIHIyID0gdy5tYXAoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgICAgICAgICBkZWJ1Z2xvZyhcIjIgPlwiICsgSlNPTi5zdHJpbmdpZnkoZW50cnkpKTtcbiAgICAgICAgICAgIHZhciBlbnRyeSA9IGVudHJ5LnNsaWNlKDApO1xuICAgICAgICAgICAgZW50cnkucHVzaCh1W2tdKTtcbiAgICAgICAgICAgIHJldHVybiBlbnRyeTtcbiAgICAgICAgfSk7XG4gICAgICAgIGRlYnVnbG9nKEpTT04uc3RyaW5naWZ5KHIxKSk7XG4gICAgICAgIGRlYnVnbG9nKEpTT04uc3RyaW5naWZ5KHIyKSk7XG4gICAgICAgIHcgPSByMS5jb25jYXQocjIpO1xuICAgIH1cbiAgICByZXR1cm4gdztcbn1cbmV4cG9ydHMuYnJlYWtkb3duU3RyaW5nID0gYnJlYWtkb3duU3RyaW5nO1xuIiwiXHJcbmltcG9ydCAqIGFzIGRlYnVnIGZyb20gJ2RlYnVnJztcclxuY29uc3QgZGVidWdsb2cgPSBkZWJ1ZygnZGlzcGF0Y2hlcicpXHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNsZWFuc2VTdHJpbmcoc1N0cmluZyA6IHN0cmluZykgOiBzdHJpbmcge1xyXG4gICAgc1N0cmluZyA9IHNTdHJpbmcucmVwbGFjZSgvXlxccysvLCcnKTtcclxuICAgIHNTdHJpbmcgPSBzU3RyaW5nLnJlcGxhY2UoL1xccyskLywnJyk7XHJcbiAgICBzU3RyaW5nID0gc1N0cmluZy5yZXBsYWNlKC9cXHNcXHMrL2csICcgJyk7XHJcbiAgICByZXR1cm4gc1N0cmluZ1xyXG59XHJcbi8qKlxyXG4gKlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGJyZWFrZG93blN0cmluZyhzU3RyaW5nOiBzdHJpbmcpIDogQXJyYXk8QXJyYXk8U3RyaW5nPj4ge1xyXG4gICAgdmFyIHUgPSBzU3RyaW5nLnNwbGl0KFwiIFwiKTtcclxuICAgIHZhciBrID0gMDtcclxuICAgIGlmKHUubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuIFtbXV07XHJcbiAgICB9XHJcbiAgICB2YXIgdyA9IFtbdVswXV1dO1xyXG4gICAgd2hpbGUoayA8IHUubGVuZ3RoIC0gMSkge1xyXG4gICAgICAgIGsgPSBrICsgMTtcclxuICAgICAgICB2YXIgcjEgPSB3Lm1hcChmdW5jdGlvbiAoZW50cnkpIHtcclxuICAgICAgICAgICAgZGVidWdsb2coSlNPTi5zdHJpbmdpZnkoZW50cnkpKTtcclxuICAgICAgICAgICAgdmFyIGVudHJ5ID0gZW50cnkuc2xpY2UoMCk7XHJcbiAgICAgICAgICAgIGRlYnVnbG9nKEpTT04uc3RyaW5naWZ5KGVudHJ5KSk7XHJcbiAgICAgICAgICAgIGVudHJ5W2VudHJ5Lmxlbmd0aCAtMSBdID0gZW50cnlbZW50cnkubGVuZ3RoLTEgXSArIFwiIFwiICsgdVtrXTtcclxuICAgICAgICAgICAgcmV0dXJuIGVudHJ5O1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHZhciByMiA9ICB3Lm1hcChmdW5jdGlvbiAoZW50cnkpIHtcclxuICAgICAgICAgICAgZGVidWdsb2coXCIyID5cIiArIEpTT04uc3RyaW5naWZ5KGVudHJ5KSk7XHJcbiAgICAgICAgICAgIHZhciBlbnRyeSA9IGVudHJ5LnNsaWNlKDApO1xyXG4gICAgICAgICAgICBlbnRyeS5wdXNoKHVba10pO1xyXG4gICAgICAgICAgICByZXR1cm4gZW50cnlcclxuICAgICAgICB9KTtcclxuICAgICAgICBkZWJ1Z2xvZyhKU09OLnN0cmluZ2lmeShyMSkpO1xyXG4gICAgICAgIGRlYnVnbG9nKEpTT04uc3RyaW5naWZ5KHIyKSk7XHJcbiAgICAgICAgdyA9IHIxLmNvbmNhdChyMik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdztcclxufVxyXG5cclxuaW1wb3J0ICogYXMgSU1hdGNoIGZyb20gJy4vaWZtYXRjaCdcclxuXHJcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
