{"version":3,"sources":["/projects/nodejs/botbuilder/fdevstart/src/../src/match/analyze.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;;AAGH,IAAY,WAAW,WAAM,eAAe,CAAC,CAAA;AAE7C,IAAY,KAAK,WAAM,OAAO,CAAC,CAAA;AAE/B,IAAM,QAAQ,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC;AAMlC,IAAY,WAAW,WAAM,eAAe,CAAC,CAAA;AAE7C,IAAY,QAAQ,WAAM,YAAY,CAAC,CAAA;AAEvC,oBAA2B,OAAe,EAAE,MAA2B,EAAE,MAA2B;IAClG,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;QACzB,MAAM,CAAC,EAAE,CAAC;IACZ,CAAC;IAAC,IAAI,CAAC,CAAC;QACN,IAAI,OAAO,GAAG,WAAW,CAAC,aAAa,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QACzD,QAAQ,CAAC,gBAAgB,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;QACrD,IAAI,UAAU,GAAG,WAAW,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;QACrD,QAAQ,CAAC,cAAc,GAAG,UAAU,CAAC,GAAG,CAAC,UAAU,SAAS;YAC1D,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,SAAS,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;QAC9E,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QACf,IAAI,oBAAoB,GAAG,WAAW,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;QAC7D,mFAAmF;QACnF,QAAQ,CAAC,iBAAiB,GAAG,oBAAoB,CAAC,GAAG,CAAC,UAAU,SAAS;YACvE,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,SAAS,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;QAC9E,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAEf,IAAI,YAAY,GAAG,WAAW,CAAC,UAAU,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC,CAAC,sDAAsD;QACrH,QAAQ,CAAC,eAAe,GAAG,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC;QACvE,MAAM,CAAC,YAAY,CAAC;IACtB,CAAC;AACH,CAAC;AApBe,kBAAU,aAoBzB,CAAA","file":"match/analyze.js","sourcesContent":["/**\n *\n * @module jfseb.fdevstart.analyze\n * @file analyze.ts\n * @copyright (c) 2016 Gerd Forstmann\n */\n\n\nimport * as InputFilter from './InputFilter';\n\nimport * as debug from 'debug';\n\nconst debuglog = debug('analyze');\n\nimport * as utils from '../utils/utils';\n\nimport * as IMatch from './ifmatch';\n\nimport * as Toolmatcher from './toolmatcher';\n\nimport * as Sentence from './Sentence';\n\nexport function analyzeAll(sString: string, aRules: Array<IMatch.mRule>, aTools: Array<IMatch.ITool>) {\n  if (sString.length === 0) {\n    return [];\n  } else {\n    var matched = InputFilter.analyzeString(sString, aRules);\n    debuglog(\"After matched \" + JSON.stringify(matched));\n    var aSentences = InputFilter.expandMatchArr(matched);\n    debuglog(\"after expand\" + aSentences.map(function (oSentence) {\n      return Sentence.rankingProduct(oSentence) + \":\" + JSON.stringify(oSentence);\n    }).join(\"\\n\"));\n    var aSentencesReinforced = InputFilter.reinForce(aSentences);\n    //aSentences.map(function(oSentence) { return InputFilter.reinForce(oSentence); });\n    debuglog(\"after reinforce\" + aSentencesReinforced.map(function (oSentence) {\n      return Sentence.rankingProduct(oSentence) + \":\" + JSON.stringify(oSentence);\n    }).join(\"\\n\"));\n\n    var matchedTools = Toolmatcher.matchTools(aSentences, aTools); //aTool: Array<IMatch.ITool>): any /* objectstream*/ {\n    debuglog(\" matchedTools\" + JSON.stringify(matchedTools, undefined, 2));\n    return matchedTools;\n  }\n}"],"sourceRoot":"ABC"}