/**
 *
 * @module jfseb.fdevstart.analyze
 * @file analyze.ts
 * @copyright (c) 2016 Gerd Forstmann
 */
"use strict";

var InputFilter = require('./InputFilter');
var debug = require('debug');
var debuglog = debug('analyze');
var Toolmatcher = require('./toolmatcher');
function analyzeAll(sString, aRules, aTools) {
    var matched = InputFilter.analyzeString(sString, aRules);
    debuglog("After matched " + JSON.stringify(matched));
    var aSentences = InputFilter.expandMatchArr(matched);
    debuglog("After expand " + JSON.stringify(aSentences));
    var aSentencesReinforced = InputFilter.reinForce(aSentences);
    //aSentences.map(function(oSentence) { return InputFilter.reinForce(oSentence); });
    var matchedTools = Toolmatcher.matchTools(aSentences, aTools); //aTool: Array<IMatch.ITool>): any /* objectstream*/ {
    debuglog(" matchedTools" + JSON.stringify(matchedTools, undefined, 2));
    return matchedTools;
}
exports.analyzeAll = analyzeAll;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tYXRjaC9hbmFseXplLnRzIiwibWF0Y2gvYW5hbHl6ZS5qcyJdLCJuYW1lcyI6WyJJbnB1dEZpbHRlciIsInJlcXVpcmUiLCJkZWJ1ZyIsImRlYnVnbG9nIiwiVG9vbG1hdGNoZXIiLCJhbmFseXplQWxsIiwic1N0cmluZyIsImFSdWxlcyIsImFUb29scyIsIm1hdGNoZWQiLCJhbmFseXplU3RyaW5nIiwiSlNPTiIsInN0cmluZ2lmeSIsImFTZW50ZW5jZXMiLCJleHBhbmRNYXRjaEFyciIsImFTZW50ZW5jZXNSZWluZm9yY2VkIiwicmVpbkZvcmNlIiwibWF0Y2hlZFRvb2xzIiwibWF0Y2hUb29scyIsInVuZGVmaW5lZCIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7QUNNQTs7QURFQSxJQUFZQSxjQUFXQyxRQUFNLGVBQU4sQ0FBdkI7QUFFQSxJQUFZQyxRQUFLRCxRQUFNLE9BQU4sQ0FBakI7QUFFQSxJQUFNRSxXQUFXRCxNQUFNLFNBQU4sQ0FBakI7QUFNQSxJQUFZRSxjQUFXSCxRQUFNLGVBQU4sQ0FBdkI7QUFFQSxTQUFBSSxVQUFBLENBQTJCQyxPQUEzQixFQUE2Q0MsTUFBN0MsRUFBMkVDLE1BQTNFLEVBQXVHO0FBRXJHLFFBQUlDLFVBQVVULFlBQVlVLGFBQVosQ0FBMEJKLE9BQTFCLEVBQWtDQyxNQUFsQyxDQUFkO0FBQ0FKLGFBQVMsbUJBQW1CUSxLQUFLQyxTQUFMLENBQWVILE9BQWYsQ0FBNUI7QUFDQSxRQUFJSSxhQUFhYixZQUFZYyxjQUFaLENBQTJCTCxPQUEzQixDQUFqQjtBQUNBTixhQUFTLGtCQUFrQlEsS0FBS0MsU0FBTCxDQUFlQyxVQUFmLENBQTNCO0FBQ0EsUUFBSUUsdUJBQXVCZixZQUFZZ0IsU0FBWixDQUFzQkgsVUFBdEIsQ0FBM0I7QUFDQTtBQUVBLFFBQUlJLGVBQWViLFlBQVljLFVBQVosQ0FBdUJMLFVBQXZCLEVBQW1DTCxNQUFuQyxDQUFuQixDQVRxRyxDQVN0QztBQUM3REwsYUFBUyxrQkFBa0JRLEtBQUtDLFNBQUwsQ0FBZUssWUFBZixFQUE2QkUsU0FBN0IsRUFBd0MsQ0FBeEMsQ0FBM0I7QUFDQSxXQUFPRixZQUFQO0FBQ0g7QUFaZUcsUUFBQWYsVUFBQSxHQUFVQSxVQUFWIiwiZmlsZSI6Im1hdGNoL2FuYWx5emUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqXG4gKiBAbW9kdWxlIGpmc2ViLmZkZXZzdGFydC5hbmFseXplXG4gKiBAZmlsZSBhbmFseXplLnRzXG4gKiBAY29weXJpZ2h0IChjKSAyMDE2IEdlcmQgRm9yc3RtYW5uXG4gKi9cblxuXG5pbXBvcnQgKiBhcyBJbnB1dEZpbHRlciBmcm9tICcuL0lucHV0RmlsdGVyJztcblxuaW1wb3J0ICogYXMgZGVidWcgZnJvbSAnZGVidWcnO1xuXG5jb25zdCBkZWJ1Z2xvZyA9IGRlYnVnKCdhbmFseXplJyk7XG5cbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gJy4uL3V0aWxzL3V0aWxzJztcblxuaW1wb3J0ICogYXMgSU1hdGNoIGZyb20gJy4vaWZtYXRjaCc7XG5cbmltcG9ydCAqIGFzIFRvb2xtYXRjaGVyIGZyb20gJy4vdG9vbG1hdGNoZXInO1xuXG5leHBvcnQgZnVuY3Rpb24gYW5hbHl6ZUFsbChzU3RyaW5nIDogc3RyaW5nLCBhUnVsZXMgOiBBcnJheTxJTWF0Y2gubVJ1bGU+LCBhVG9vbHMgOiBBcnJheTxJTWF0Y2guSVRvb2w+KSB7XG5cbiAgdmFyIG1hdGNoZWQgPSBJbnB1dEZpbHRlci5hbmFseXplU3RyaW5nKHNTdHJpbmcsYVJ1bGVzKTtcbiAgZGVidWdsb2coXCJBZnRlciBtYXRjaGVkIFwiICsgSlNPTi5zdHJpbmdpZnkobWF0Y2hlZCkpO1xuICB2YXIgYVNlbnRlbmNlcyA9IElucHV0RmlsdGVyLmV4cGFuZE1hdGNoQXJyKG1hdGNoZWQpO1xuICBkZWJ1Z2xvZyhcIkFmdGVyIGV4cGFuZCBcIiArIEpTT04uc3RyaW5naWZ5KGFTZW50ZW5jZXMpKTtcbiAgdmFyIGFTZW50ZW5jZXNSZWluZm9yY2VkID0gSW5wdXRGaWx0ZXIucmVpbkZvcmNlKGFTZW50ZW5jZXMpO1xuICAvL2FTZW50ZW5jZXMubWFwKGZ1bmN0aW9uKG9TZW50ZW5jZSkgeyByZXR1cm4gSW5wdXRGaWx0ZXIucmVpbkZvcmNlKG9TZW50ZW5jZSk7IH0pO1xuXG4gIHZhciBtYXRjaGVkVG9vbHMgPSBUb29sbWF0Y2hlci5tYXRjaFRvb2xzKGFTZW50ZW5jZXMsIGFUb29scyk7IC8vYVRvb2w6IEFycmF5PElNYXRjaC5JVG9vbD4pOiBhbnkgLyogb2JqZWN0c3RyZWFtKi8ge1xuICAgIGRlYnVnbG9nKFwiIG1hdGNoZWRUb29sc1wiICsgSlNPTi5zdHJpbmdpZnkobWF0Y2hlZFRvb2xzLCB1bmRlZmluZWQsIDIpKTtcbiAgICByZXR1cm4gbWF0Y2hlZFRvb2xzO1xufSIsIi8qKlxuICpcbiAqIEBtb2R1bGUgamZzZWIuZmRldnN0YXJ0LmFuYWx5emVcbiAqIEBmaWxlIGFuYWx5emUudHNcbiAqIEBjb3B5cmlnaHQgKGMpIDIwMTYgR2VyZCBGb3JzdG1hbm5cbiAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBJbnB1dEZpbHRlciA9IHJlcXVpcmUoJy4vSW5wdXRGaWx0ZXInKTtcbmNvbnN0IGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKTtcbmNvbnN0IGRlYnVnbG9nID0gZGVidWcoJ2FuYWx5emUnKTtcbmNvbnN0IFRvb2xtYXRjaGVyID0gcmVxdWlyZSgnLi90b29sbWF0Y2hlcicpO1xuZnVuY3Rpb24gYW5hbHl6ZUFsbChzU3RyaW5nLCBhUnVsZXMsIGFUb29scykge1xuICAgIHZhciBtYXRjaGVkID0gSW5wdXRGaWx0ZXIuYW5hbHl6ZVN0cmluZyhzU3RyaW5nLCBhUnVsZXMpO1xuICAgIGRlYnVnbG9nKFwiQWZ0ZXIgbWF0Y2hlZCBcIiArIEpTT04uc3RyaW5naWZ5KG1hdGNoZWQpKTtcbiAgICB2YXIgYVNlbnRlbmNlcyA9IElucHV0RmlsdGVyLmV4cGFuZE1hdGNoQXJyKG1hdGNoZWQpO1xuICAgIGRlYnVnbG9nKFwiQWZ0ZXIgZXhwYW5kIFwiICsgSlNPTi5zdHJpbmdpZnkoYVNlbnRlbmNlcykpO1xuICAgIHZhciBhU2VudGVuY2VzUmVpbmZvcmNlZCA9IElucHV0RmlsdGVyLnJlaW5Gb3JjZShhU2VudGVuY2VzKTtcbiAgICAvL2FTZW50ZW5jZXMubWFwKGZ1bmN0aW9uKG9TZW50ZW5jZSkgeyByZXR1cm4gSW5wdXRGaWx0ZXIucmVpbkZvcmNlKG9TZW50ZW5jZSk7IH0pO1xuICAgIHZhciBtYXRjaGVkVG9vbHMgPSBUb29sbWF0Y2hlci5tYXRjaFRvb2xzKGFTZW50ZW5jZXMsIGFUb29scyk7IC8vYVRvb2w6IEFycmF5PElNYXRjaC5JVG9vbD4pOiBhbnkgLyogb2JqZWN0c3RyZWFtKi8ge1xuICAgIGRlYnVnbG9nKFwiIG1hdGNoZWRUb29sc1wiICsgSlNPTi5zdHJpbmdpZnkobWF0Y2hlZFRvb2xzLCB1bmRlZmluZWQsIDIpKTtcbiAgICByZXR1cm4gbWF0Y2hlZFRvb2xzO1xufVxuZXhwb3J0cy5hbmFseXplQWxsID0gYW5hbHl6ZUFsbDtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
