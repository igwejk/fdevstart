/// <reference path="../../lib/node-4.d.ts" />
"use strict";

var distance = require('../utils/damerauLevenshtein');
var debug = require('debug');
var debuglog = debug('dispatcher');
var child_process_1 = require('child_process');
//  var exec = require('child_process').exec
//  var leven = require('../utils/damerauLevenshtein.js').levenshtein
//var leven = require('../utils/damerauLevenshtein.js')
var oUnitTests = [{
    key: 'ClientSideTargetResolution',
    context: {
        systemObjectId: 'ClientSideTargetResolution',
        path: 'sap/bc/ui5_ui5/ui2/ushell/test-resources/sap/ushell/qunit/adapters/cdm/ClientSideTargetResolutionAdapter.qunit.html'
    }
}, {
    key: 'CommonDataModelAdapter',
    context: {
        systemObjectId: 'CommonDataModelAdapter',
        path: 'sap/bc/ui5_ui5/ui2/ushell/test-resources/sap/ushell/qunit/adapters/cdm/CommonDataModelAdapter.qunit.html'
    }
}, {
    key: 'ushell lib',
    context: {
        systemObjectId: 'ushell lib',
        path: 'sap/bc/ui5_ui5/ui2/ushell/test-resources/sap/ushell/qunit/testsuite.qunit.html'
    }
}, {
    key: 'ushell_abap',
    context: {
        systemObjectId: 'ushell_abap',
        path: 'sap/bc/ui5_ui5/ui2/ushell/test-resources/sap/ushell_abap/testsuite.qunit.html'
    }
}, {
    key: 'ui2 shell api',
    context: {
        systemObjectId: 'ui2 shell api',
        path: 'sap/public/bc/ui2/services/test/testsuite.qunit.html'
    }
}, {
    key: 'NavTargetResolution',
    context: {
        systemObjectId: 'NavTargetResolution',
        path: '/sap/bc/test/NavTargetResolution.js'
    }
}, {
    key: 'CSTR',
    context: {
        systemObjectId: 'ClientSideTargetResolution',
        path: '/sap/bc/test/CleintSideTargetResolution.js'
    }
}, {
    key: 'Shell.controller.js',
    context: {
        systemObjectId: 'Shell.controller.js',
        path: '/sap/bc/test/Shell.controller.js'
    }
}].concat([
// alphabetic order please
'test-resources/sap/ushell/qunit/adapters/cdm/ClientSideTargetResolutionAdapter.qunit.html', 'test-resources/sap/ushell/qunit/adapters/cdm/CommonDataModelAdapter.qunit.html', 'test-resources/sap/ushell/qunit/adapters/cdm/LaunchPageAdapter.qunit.html', 'test-resources/sap/ushell/qunit/adapters/local/AppStateAdapter.qunit.html', 'test-resources/sap/ushell/qunit/adapters/local/ClientSideTargetResolutionAdapter.qunit.html', 'test-resources/sap/ushell/qunit/adapters/local/ContainerAdapter.qunit.html', 'test-resources/sap/ushell/qunit/adapters/local/EndUserFeedbackAdapter.qunit.html', 'test-resources/sap/ushell/qunit/adapters/local/NavTargetResolutionAdapter.qunit.html', 'test-resources/sap/ushell/qunit/adapters/local/PersonalizationAdapter.qunit.html', 'test-resources/sap/ushell/qunit/adapters/local/SupportTicketAdapterTest.qunit.html', 'test-resources/sap/ushell/qunit/adapters/local/UserDefaultParameterPersistenceAdapter.qunit.html', 'test-resources/sap/ushell/qunit/adapters/local/UserInfoAdapter.qunit.html', 'test-resources/sap/ushell/qunit/bootstrap/sandbox.qunit.html', 'test-resources/sap/ushell/qunit/CanvasShapesManager.qunit.html', 'test-resources/sap/ushell/qunit/components/container/ApplicationContainer.qunit.html', 'test-resources/sap/ushell/qunit/components/factsheet/annotation/ODataURLTemplating.qunit.html', 'test-resources/sap/ushell/qunit/components/flp/ComponentKeysHandler.qunit.html', 'test-resources/sap/ushell/qunit/components/flp/FlpApp.qunit.html', 'test-resources/sap/ushell/qunit/components/flp/launchpad/appfinder/EasyAccess.qunit.html', 'test-resources/sap/ushell/qunit/components/flp/launchpad/DashboardManager.qunit.html', 'test-resources/sap/ushell/qunit/components/flp/launchpad/PagingManager.qunit.html', 'test-resources/sap/ushell/qunit/components/flp/launchpad/appfinder/AppFinder.qunit.html', 'test-resources/sap/ushell/qunit/components/flp/launchpad/appfinder/GroupListPopover.qunit.html', 'test-resources/sap/ushell/qunit/components/flp/launchpad/appfinder/HierarchyApps.qunit.html', 'test-resources/sap/ushell/qunit/components/flp/launchpad/appfinder/HierarchyFolders.qunit.html', 'test-resources/sap/ushell/qunit/renderers/fiori2/userPreferences/LanguageRegionSelector.qunit.html', 'test-resources/sap/ushell/qunit/components/flp/launchpad/dashboard/DashboardContent.qunit.html', 'test-resources/sap/ushell/qunit/components/flp/launchpad/dashboard/DashboardUIActions.qunit.html', 'test-resources/sap/ushell/qunit/components/flp/settings/FlpSettings.qunit.html', 'test-resources/sap/ushell/qunit/components/tiles/applauncher/StaticTile.qunit.html', 'test-resources/sap/ushell/qunit/components/tiles/applauncherdynamic/DynamicTile.qunit.html', 'test-resources/sap/ushell/qunit/components/tiles/cdm/applauncher/StaticTile.qunit.html', 'test-resources/sap/ushell/qunit/components/tiles/cdm/applauncherdynamic/DynamicTile.qunit.html', 'test-resources/sap/ushell/qunit/components/tiles/utils.qunit.html', 'test-resources/sap/ushell/qunit/components/tiles/utilsRT.qunit.html', 'test-resources/sap/ushell/qunit/components/userActivity/userActivityLog.qunit.html',
// "test-resources/sap/ushell/qunit/demoapps/UserDefaultPluginSample/UserDefaultPluginSample.qunit.html", // Currently not run inside the QUnit Test Loader for ushell-lib
'test-resources/sap/ushell/qunit/FLPAnalytics.qunit.html', 'test-resources/sap/ushell/qunit/Layout.qunit.html', 'test-resources/sap/ushell/qunit/renderers/fiori2/AccessKeysHandler.qunit.html', 'test-resources/sap/ushell/qunit/renderers/fiori2/DefaultParameters/DefaultParameters.qunit.html', 'test-resources/sap/ushell/qunit/renderers/fiori2/Lifecycle.qunit.html', 'test-resources/sap/ushell/qunit/renderers/fiori2/meArea/MeArea.qunit.html', 'test-resources/sap/ushell/qunit/renderers/fiori2/meArea/UserSettings.qunit.html', 'test-resources/sap/ushell/qunit/renderers/fiori2/notifications/Notifications.qunit.html', 'test-resources/sap/ushell/qunit/renderers/fiori2/notifications/Settings.qunit.html', 'test-resources/sap/ushell/qunit/renderers/fiori2/Renderer.qunit.html', 'test-resources/sap/ushell/qunit/renderers/fiori2/RendererExtensions.qunit.html', 'test-resources/sap/ushell/qunit/renderers/fiori2/Shell.qunit.html', 'test-resources/sap/ushell/qunit/renderers/fiori2/UIActions.qunit.html', 'test-resources/sap/ushell/qunit/services/AppConfiguration.qunit.html', 'test-resources/sap/ushell/qunit/services/AppContext.qunit.html', 'test-resources/sap/ushell/qunit/services/AppLifeCycle.qunit.html', 'test-resources/sap/ushell/qunit/services/AppState.qunit.html', 'test-resources/sap/ushell/qunit/services/Bookmark.qunit.html', 'test-resources/sap/ushell/qunit/services/ClientSideTargetResolution.qunit.html', 'test-resources/sap/ushell/qunit/services/CommonDataModel.qunit.html', 'test-resources/sap/ushell/qunit/services/CommonDataModel/PersonalizationProcessor.qunit.html', 'test-resources/sap/ushell/qunit/services/CommonDataModel/PersonalizationProcessorCDMBlackbox.qunit.html', 'test-resources/sap/ushell/qunit/services/Container.qunit.html', 'test-resources/sap/ushell/qunit/services/CrossApplicationNavigation.qunit.html', 'test-resources/sap/ushell/qunit/services/EndUserFeedback.qunit.html', 'test-resources/sap/ushell/qunit/services/LaunchPage.qunit.html', 'test-resources/sap/ushell/qunit/services/Message.qunit.html', 'test-resources/sap/ushell/qunit/services/NavTargetResolution.qunit.html', 'test-resources/sap/ushell/qunit/services/NavTargetResolutionCDMBlackbox.qunit.html', 'test-resources/sap/ushell/qunit/services/Notifications.qunit.html', 'test-resources/sap/ushell/qunit/services/Personalization.qunit.html', 'test-resources/sap/ushell/qunit/services/PluginManager.qunit.html', 'test-resources/sap/ushell/qunit/services/ReferenceResolver.qunit.html', 'test-resources/sap/ushell/qunit/services/ShellNavigation.History.qunit.html', 'test-resources/sap/ushell/qunit/services/ShellNavigation.qunit.html', 'test-resources/sap/ushell/qunit/services/SupportTicket.qunit.html', 'test-resources/sap/ushell/qunit/services/URLParsing.qunit.html', 'test-resources/sap/ushell/qunit/services/URLShortening.qunit.html', 'test-resources/sap/ushell/qunit/services/Ui5ComponentLoader.qunit.html', 'test-resources/sap/ushell/qunit/services/UsageAnalytics.qunit.html', 'test-resources/sap/ushell/qunit/services/UserDefaultParameterPersistence.qunit.html', 'test-resources/sap/ushell/qunit/services/UserDefaultParameters.qunit.html', 'test-resources/sap/ushell/qunit/services/UserInfo.qunit.html', 'test-resources/sap/ushell/qunit/services/UserRecents.qunit.html', 'test-resources/sap/ushell/qunit/services/SmartNavigation.qunit.html', 'test-resources/sap/ushell/qunit/System.qunit.html', 'test-resources/sap/ushell/qunit/ui/footerbar/AboutButton.qunit.html', 'test-resources/sap/ushell/qunit/ui/footerbar/AddBookmarkButton.qunit.html', 'test-resources/sap/ushell/qunit/ui/footerbar/ContactSupportButton.qunit.html', 'test-resources/sap/ushell/qunit/ui/footerbar/EndUserFeedback.qunit.html', 'test-resources/sap/ushell/qunit/ui/footerbar/JamDiscussButton.qunit.html', 'test-resources/sap/ushell/qunit/ui/footerbar/JamShareButton.qunit.html', 'test-resources/sap/ushell/qunit/ui/footerbar/LogoutButton.qunit.html', 'test-resources/sap/ushell/qunit/ui/footerbar/SettingsButton.qunit.html', 'test-resources/sap/ushell/qunit/ui/footerbar/UserPreferencesButton.qunit.html', 'test-resources/sap/ushell/qunit/ui/launchpad/AccessibilityCustomData.qunit.html', 'test-resources/sap/ushell/qunit/ui/launchpad/ActionItem.qunit.html', 'test-resources/sap/ushell/qunit/ui/launchpad/AnchorItem.qunit.html', 'test-resources/sap/ushell/qunit/ui/launchpad/AnchorNavigationBar.qunit.html', 'test-resources/sap/ushell/qunit/ui/launchpad/EmbeddedSupportErrorMessage.qunit.html', 'test-resources/sap/ushell/qunit/ui/launchpad/Fiori2LoadingDialog.qunit.html', 'test-resources/sap/ushell/qunit/ui/launchpad/GroupListItem.qunit.html', 'test-resources/sap/ushell/qunit/ui/launchpad/LinkTileWrapper.qunit.html', 'test-resources/sap/ushell/qunit/ui/launchpad/LoadingDialog.qunit.html', 'test-resources/sap/ushell/qunit/ui/launchpad/TileContainer.qunit.html', 'test-resources/sap/ushell/qunit/ui/launchpad/ViewPortContainer.qunit.html', 'test-resources/sap/ushell/qunit/ui/shell/FloatingContainer.qunit.html', 'test-resources/sap/ushell/qunit/ui/shell/RightFloatingContainer.qunit.html', 'test-resources/sap/ushell/qunit/ui/shell/ShellAppTitle.qunit.html', 'test-resources/sap/ushell/qunit/ui/shell/ShellLayout.qunit.html', 'test-resources/sap/ushell/qunit/ui/shell/ShellTitle.qunit.html', 'test-resources/sap/ushell/qunit/ui/shell/SplitContainer.qunit.html', 'test-resources/sap/ushell/qunit/ui/tile/DynamicTile.qunit.html', 'test-resources/sap/ushell/qunit/ui/tile/ImageTile.qunit.html', 'test-resources/sap/ushell/qunit/ui/tile/StaticTile.qunit.html', 'test-resources/sap/ushell/qunit/ui/tile/TileBase.qunit.html', 'test-resources/sap/ushell/qunit/ui5service/ShellUIService.qunit.html'].map(function (sEntry) {
    var sString = sEntry.match('/([^/]*).qunit.html')[1];
    return {
        key: sString,
        context: {
            systemObjectId: sString,
            path: 'sap/bc/ui5_ui5/ui2/ushell/' + sEntry
        }
    };
}));
var oWikis = [{
    key: 'FCC ABAP Alignment',
    context: {
        systemObjectId: 'UI2 Support page',
        path: '/unifiedshell/display/FCC+ABAP+Alignment'
    }
}, {
    key: 'UI2 test links',
    context: {
        systemObjectId: 'UI2 test links',
        path: 'wiki/display/unifiedshell/Adaption+to+UI5+QUnit+Test+Runner'
    }
}, {
    key: 'Support schedule',
    context: {
        systemObjectId: 'TIP Core UI Integration support',
        path: 'wiki/display/TIPCoreUII/Support'
    }
}, {
    key: 'UII Support schedule',
    context: {
        systemObjectId: 'TIP Core UI Integration support',
        path: 'wiki/display/TIPCoreUII/Support'
    }
}, {
    key: 'Support page',
    context: {
        systemObjectId: 'CA-UI2-INT-FE support',
        path: 'wiki/display/UICEI/CSS+Message+Dispatching+-+component+CA-UI2-INT-FE'
    }
}, {
    key: 'UI2 Support page',
    context: {
        systemObjectId: 'CA-UI2-INT-FE support',
        path: 'wiki/display/UICEI/CSS+Message+Dispatching+-+component+CA-UI2-INT-FE'
    }
}, {
    key: 'Backend Sprint Reviews',
    context: {
        systemObjectId: 'Backend Sprint Review',
        path: 'wiki/display/UICEI/Tact+Overviews'
    }
}, {
    key: 'UI5 patch schedule',
    context: {
        systemObjectId: 'UI5 UI2 Pach plan',
        path: 'wiki/pages/viewpage.action?pageId=1679623157'
    }
}];
function calcDistance(sText1, sText2) {
    // console.log("length2" + sText1 + " - " + sText2)
    var a0 = distance.levenshtein(sText1.substring(0, sText2.length), sText2);
    var a = distance.levenshtein(sText1.toLowerCase(), sText2);
    return a0 * 500 / sText2.length + a;
}
function fnFindMatch(sKeyword, oContext, oMap) {
    // return a better context if there is a match
    oMap.sort(function (oEntry1, oEntry2) {
        var u1 = calcDistance(oEntry1.key.toLowerCase(), sKeyword);
        var u2 = calcDistance(oEntry2.key.toLowerCase(), sKeyword);
        return u1 - u2;
    });
    // later: in case of conflicts, ask,
    // now:
    var dist = calcDistance(oMap[0].key.toLowerCase(), sKeyword);
    debuglog('best dist' + dist + ' /  ' + dist * sKeyword.length + ' ' + sKeyword);
    if (dist < 150) {
        var o1 = Object.assign({}, oContext);
        var o2;
        o1.context = Object.assign({}, o1.context);
        o2 = o1;
        o2.context = Object.assign(o1.context, oMap[0].context);
        return o2;
    }
    return null;
}
/**
 * a function to match a unit test using levenshtein distances
 * @public
 */
function fnFindUnitTest(ssystemObjectId, oContext) {
    return fnFindMatch(ssystemObjectId, oContext, oUnitTests);
}
function fnFindWiki(sKeyword, oContext) {
    return fnFindMatch(sKeyword, oContext, oWikis);
}
var aShowEntityActions = [{
    context: {
        systemId: 'uv2',
        client: /^\d{3,3}$/,
        systemtype: 'ABAPFES',
        systemObjectId: 'flp'
    },
    result: {
        type: 'URL',
        pattern: 'https://ldciuv2.wdf.sap.corp:44355/sap/bc/ui5_ui5/ui2/ushell/shells/abap/FioriLaunchpad.html?sap-client={client}'
    }
}, {
    context: {
        systemId: 'uv2',
        client: /^\d{3,3}$/,
        systemtype: 'ABAPFES',
        systemObjectId: 'flpd'
    },
    result: {
        type: 'URL',
        pattern: 'https://ldciuv2.wdf.sap.corp:44355/sap/bc/ui5_ui5/sap/arsrvc_upb_admn/main.html?sap-client={client}'
    }
}, {
    context: {
        systemId: 'u1y',
        client: /^\d{3,3}$/,
        systemtype: 'ABAPFES',
        systemObjectId: 'flp'
    },
    result: {
        type: 'URL',
        pattern: 'https://ldciu1y.wdf.sap.corp:44355/sap/bc/ui5_ui5/ui2/ushell/shells/abap/FioriLaunchpad.html?sap-client={client}'
    }
}, {
    context: {
        systemId: 'u1y',
        client: /^\d{3,3}$/,
        systemtype: 'ABAPFES',
        systemObjectId: 'flpd'
    },
    result: {
        type: 'URL',
        pattern: 'https://ldciu1y.wdf.sap.corp:44355/sap/bc/ui5_ui5/sap/arsrvc_upb_admn/main.html?sap-client={client}'
    }
}, {
    context: {
        systemId: 'uv2',
        client: '120',
        systemObjectCategory: 'catalog',
        systemObjectId: /.*/,
        systemtype: 'ABAPFES',
        tool: 'FLPD'
    },
    result: {
        type: 'URL',
        pattern: 'https://ldciuv2.wdf.sap.corp:44355/sap/bc/ui5_ui5/sap/arsrvc_upb_admn/main.html?sap-client={client}#CATALOG:{systemObjectId}'
    }
}, {
    context: {
        systemObjectCategory: 'unit',
        systemObjectId: fnFindUnitTest
    },
    result: {
        type: 'URL',
        pattern: 'http://localhost:8080/{path}'
    }
}, {
    context: {
        systemObjectCategory: 'wiki',
        systemObjectId: fnFindWiki
    },
    result: {
        type: 'URL',
        pattern: 'https://wiki.wdf.sap.corp/{path}'
    }
}, {
    context: {
        systemId: 'JIRA'
    },
    result: {
        type: 'URL',
        pattern: 'https://jira.wdf.sap.corp:8080/TIPCOREUIII'
    }
}];
// if TOOL = JIRA || SystemId = JIRA -> SystemId = JIRA
//
//
function startBrowser(url) {
    var cmd = '"%ProgramFiles(x86)%\\Google\\Chrome\\Application\\chrome.exe" --incognito -url "' + url + '"';
    child_process_1.exec(cmd, function (error, stdout, stderr) {
        if (error) {
            console.error('exec error: ' + error);
            return;
        }
        debuglog('stdout: ' + stdout);
        debuglog('stderr: ' + stderr);
    });
}
// startSAPGUI
//   N:\>"c:\Program Files (x86)\SAP\FrontEnd\SAPgui"\sapshcut.exe  -system=UV2 -client=120 -command=SE38 -type=Transaction -user=AUSER
function expandParametersInURL(oMergedContextResult) {
    var ptn = oMergedContextResult.result.pattern;
    Object.keys(oMergedContextResult.context).forEach(function (sKey) {
        var regex = new RegExp('{' + sKey + '}', 'g');
        ptn = ptn.replace(regex, oMergedContextResult.context[sKey]);
        ptn = ptn.replace(regex, oMergedContextResult.context[sKey]);
    });
    return ptn;
}
function executeStartup(oMergedContextResult) {
    if (oMergedContextResult.result.type === 'URL') {
        var ptn = expandParametersInURL(oMergedContextResult);
        startBrowser(ptn);
        return ptn;
    } else {
        var s = "Don't know how to start " + oMergedContextResult.result.type + '\n for "' + oMergedContextResult.query + '"';
        debuglog(s);
        return s;
    }
}
function nrMatches(aObject, oContext) {
    return Object.keys(aObject).reduce(function (prev, key) {
        if (Object.prototype.hasOwnProperty.call(oContext, key)) {
            prev = prev + 1;
        }
        return prev;
    }, 0);
}
function nrNoMatches(aObject, oContext) {
    var noMatchA = Object.keys(aObject).reduce(function (prev, key) {
        if (!Object.prototype.hasOwnProperty.call(oContext, key)) {
            prev = prev + 1;
        }
        return prev;
    }, 0);
    var noMatchB = Object.keys(oContext).reduce(function (prev, key) {
        if (!Object.prototype.hasOwnProperty.call(aObject, key)) {
            prev = prev + 1;
        }
        return prev;
    }, 0);
    return noMatchA + noMatchB;
}
function sameOrStar(s1, s2, oEntity) {
    return s1 === s2 || s1 === undefined && s2 === null || s2 instanceof RegExp && s2.exec(s1) !== null || typeof s2 === 'function' && s1 && s2(s1, oEntity);
}
function sameOrStarEmpty(s1, s2, oEntity) {
    if (s1 === undefined && s2 === undefined) {
        return true;
    }
    if (s2 === undefined) {
        return true;
    }
    return s1 === s2 || s2 instanceof RegExp && s2.exec(s1) !== null || typeof s2 === 'function' && s1 && s2(s1, oEntity);
}
function filterShowEntity(oContext, aShowEntity) {
    var aFiltered;
    Object.keys(oContext).forEach(function (sKey) {
        if (oContext[sKey] === null) {
            oContext[sKey] = undefined;
        }
    });
    aFiltered = aShowEntity.filter(function (oShowEntity) {
        //       console.log("...")
        //      console.log(oShowEntity.context.tool + " " + oContext.tool + "\n")
        //      console.log(oShowEntity.context.client + " " + oContext.client +":" + sameOrStar(oContext.client,oShowEntity.context.client) + "\n")
        //  console.log(JSON.stringify(oShowEntity.context) + "\n" + JSON.stringify(oContext.client) + "\n")
        return sameOrStar(oShowEntity.context.systemId, oContext.systemId, oContext) && sameOrStar(oContext.tool, oShowEntity.context.tool, oContext) && sameOrStar(oContext.client, oShowEntity.context.client, oContext) && sameOrStarEmpty(oContext.systemObjectCategory, oShowEntity.context.systemObjectCategory, oContext) && sameOrStarEmpty(oContext.systemObjectId, oShowEntity.context.systemObjectId, oContext);
        //      && oShowEntity.context.tool === oContext.tool
    });
    //  console.log(aFiltered.length)
    // match other context parameters
    aFiltered.sort(function (a, b) {
        var nrMatchesA = nrMatches(a.context, oContext);
        var nrMatchesB = nrMatches(b.context, oContext);
        var nrNoMatchesA = nrNoMatches(a.context, oContext);
        var nrNoMatchesB = nrNoMatches(b.context, oContext);
        //   console.log(JSON.stringify(a.context))
        //   console.log(JSON.stringify(b.context))
        //   console.log(JSON.stringify(oContext))
        var res = -(nrMatchesA - nrMatchesB) * 100 + (nrNoMatchesA - nrNoMatchesB);
        //     console.log("diff " + res)
        return res;
    });
    if (aFiltered.length === 0) {
        debuglog('no target for showEntity ' + JSON.stringify(oContext));
    }
    // console.log(JSON.stringify(aFiltered,undefined,2))
    if (aFiltered[0]) {
        // execute all functions
        var oMatch = aFiltered[0];
        var oMerged = {
            context: {}
        };
        oMerged.context = Object.assign({}, oMerged.context, aFiltered[0].context, oContext);
        oMerged = Object.assign(oMerged, {
            result: aFiltered[0].result
        });
        Object.keys(oMatch.context).forEach(function (sKey) {
            if (typeof oMatch.context[sKey] === 'function') {
                debuglog('Now retrofitting :' + sKey + ' - ' + oContext[sKey]);
                oMerged = oMatch.context[sKey](oContext[sKey], oMerged);
            }
        });
        return oMerged;
    }
    return null;
}
function execShowEntity(oEntity) {
    var merged = filterShowEntity(oEntity, aShowEntityActions);
    if (merged) {
        return executeStartup(merged);
    }
    return null;
}
// E:\projects\nodejs\botbuilder\samplebot>"%ProgramFiles(x86)%\Google\Chrome\Application\chrome.exe" --incognito -url www.spiegel.de
exports.dispatcher = {
    execShowEntity: execShowEntity,
    _test: {
        sameOrStar: sameOrStar,
        nrMatches: nrMatches,
        nrNoMatches: nrNoMatches,
        expandParametersInURL: expandParametersInURL,
        filterShowEntity: filterShowEntity,
        fnFindUnitTest: fnFindUnitTest,
        calcDistance: calcDistance,
        _aShowEntityActions: aShowEntityActions
    }
};
//exports dispatcher;
//module.exports = dispatcher
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tYXRjaC9kaXNwYXRjaGVyLnRzIiwibWF0Y2gvZGlzcGF0Y2hlci5qcyJdLCJuYW1lcyI6WyJkaXN0YW5jZSIsInJlcXVpcmUiLCJkZWJ1ZyIsImRlYnVnbG9nIiwiY2hpbGRfcHJvY2Vzc18xIiwib1VuaXRUZXN0cyIsImtleSIsImNvbnRleHQiLCJzeXN0ZW1PYmplY3RJZCIsInBhdGgiLCJjb25jYXQiLCJtYXAiLCJzRW50cnkiLCJzU3RyaW5nIiwibWF0Y2giLCJvV2lraXMiLCJjYWxjRGlzdGFuY2UiLCJzVGV4dDEiLCJzVGV4dDIiLCJhMCIsImxldmVuc2h0ZWluIiwic3Vic3RyaW5nIiwibGVuZ3RoIiwiYSIsInRvTG93ZXJDYXNlIiwiZm5GaW5kTWF0Y2giLCJzS2V5d29yZCIsIm9Db250ZXh0Iiwib01hcCIsInNvcnQiLCJvRW50cnkxIiwib0VudHJ5MiIsInUxIiwidTIiLCJkaXN0IiwibzEiLCJPYmplY3QiLCJhc3NpZ24iLCJvMiIsImZuRmluZFVuaXRUZXN0Iiwic3N5c3RlbU9iamVjdElkIiwiZm5GaW5kV2lraSIsImFTaG93RW50aXR5QWN0aW9ucyIsInN5c3RlbUlkIiwiY2xpZW50Iiwic3lzdGVtdHlwZSIsInJlc3VsdCIsInR5cGUiLCJwYXR0ZXJuIiwic3lzdGVtT2JqZWN0Q2F0ZWdvcnkiLCJ0b29sIiwic3RhcnRCcm93c2VyIiwidXJsIiwiY21kIiwiZXhlYyIsImVycm9yIiwic3Rkb3V0Iiwic3RkZXJyIiwiY29uc29sZSIsImV4cGFuZFBhcmFtZXRlcnNJblVSTCIsIm9NZXJnZWRDb250ZXh0UmVzdWx0IiwicHRuIiwia2V5cyIsImZvckVhY2giLCJzS2V5IiwicmVnZXgiLCJSZWdFeHAiLCJyZXBsYWNlIiwiZXhlY3V0ZVN0YXJ0dXAiLCJzIiwicXVlcnkiLCJuck1hdGNoZXMiLCJhT2JqZWN0IiwicmVkdWNlIiwicHJldiIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIm5yTm9NYXRjaGVzIiwibm9NYXRjaEEiLCJub01hdGNoQiIsInNhbWVPclN0YXIiLCJzMSIsInMyIiwib0VudGl0eSIsInVuZGVmaW5lZCIsInNhbWVPclN0YXJFbXB0eSIsImZpbHRlclNob3dFbnRpdHkiLCJhU2hvd0VudGl0eSIsImFGaWx0ZXJlZCIsImZpbHRlciIsIm9TaG93RW50aXR5IiwiYiIsIm5yTWF0Y2hlc0EiLCJuck1hdGNoZXNCIiwibnJOb01hdGNoZXNBIiwibnJOb01hdGNoZXNCIiwicmVzIiwiSlNPTiIsInN0cmluZ2lmeSIsIm9NYXRjaCIsIm9NZXJnZWQiLCJleGVjU2hvd0VudGl0eSIsIm1lcmdlZCIsImV4cG9ydHMiLCJkaXNwYXRjaGVyIiwiX3Rlc3QiLCJfYVNob3dFbnRpdHlBY3Rpb25zIl0sIm1hcHBpbmdzIjoiQUFBQTtBQ0NBOztBREVBLElBQVlBLFdBQVFDLFFBQU0sNkJBQU4sQ0FBcEI7QUFFQSxJQUFZQyxRQUFLRCxRQUFNLE9BQU4sQ0FBakI7QUFFQSxJQUFNRSxXQUFXRCxNQUFNLFlBQU4sQ0FBakI7QUFFQSxJQUFBRSxrQkFBQUgsUUFBcUIsZUFBckIsQ0FBQTtBQUNBO0FBQ0E7QUFHRTtBQUVBLElBQUlJLGFBQWEsQ0FDZjtBQUNFQyxTQUFLLDRCQURQO0FBRUVDLGFBQVM7QUFDUEMsd0JBQWdCLDRCQURUO0FBRVBDLGNBQU07QUFGQztBQUZYLENBRGUsRUFRZjtBQUNFSCxTQUFLLHdCQURQO0FBRUVDLGFBQVM7QUFDUEMsd0JBQWdCLHdCQURUO0FBRVBDLGNBQU07QUFGQztBQUZYLENBUmUsRUFlZjtBQUNFSCxTQUFLLFlBRFA7QUFFRUMsYUFBUztBQUNQQyx3QkFBZ0IsWUFEVDtBQUVQQyxjQUFNO0FBRkM7QUFGWCxDQWZlLEVBc0JmO0FBQ0VILFNBQUssYUFEUDtBQUVFQyxhQUFTO0FBQ1BDLHdCQUFnQixhQURUO0FBRVBDLGNBQU07QUFGQztBQUZYLENBdEJlLEVBNkJmO0FBQ0VILFNBQUssZUFEUDtBQUVFQyxhQUFTO0FBQ1BDLHdCQUFnQixlQURUO0FBRVBDLGNBQU07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QSIsImZpbGUiOiJtYXRjaC9kaXNwYXRjaGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL2xpYi9ub2RlLTQuZC50c1wiIC8+XHJcblxyXG5cclxuaW1wb3J0ICogYXMgZGlzdGFuY2UgZnJvbSAnLi4vdXRpbHMvZGFtZXJhdUxldmVuc2h0ZWluJztcclxuXHJcbmltcG9ydCAqIGFzIGRlYnVnIGZyb20gJ2RlYnVnJztcclxuXHJcbmNvbnN0IGRlYnVnbG9nID0gZGVidWcoJ2Rpc3BhdGNoZXInKVxyXG5cclxuaW1wb3J0IHsgZXhlYyB9IGZyb20gJ2NoaWxkX3Byb2Nlc3MnO1xyXG4vLyAgdmFyIGV4ZWMgPSByZXF1aXJlKCdjaGlsZF9wcm9jZXNzJykuZXhlY1xyXG4vLyAgdmFyIGxldmVuID0gcmVxdWlyZSgnLi4vdXRpbHMvZGFtZXJhdUxldmVuc2h0ZWluLmpzJykubGV2ZW5zaHRlaW5cclxuXHJcblxyXG4gIC8vdmFyIGxldmVuID0gcmVxdWlyZSgnLi4vdXRpbHMvZGFtZXJhdUxldmVuc2h0ZWluLmpzJylcclxuXHJcbiAgdmFyIG9Vbml0VGVzdHMgPSBbXHJcbiAgICB7XHJcbiAgICAgIGtleTogJ0NsaWVudFNpZGVUYXJnZXRSZXNvbHV0aW9uJyxcclxuICAgICAgY29udGV4dDoge1xyXG4gICAgICAgIHN5c3RlbU9iamVjdElkOiAnQ2xpZW50U2lkZVRhcmdldFJlc29sdXRpb24nLFxyXG4gICAgICAgIHBhdGg6ICdzYXAvYmMvdWk1X3VpNS91aTIvdXNoZWxsL3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvYWRhcHRlcnMvY2RtL0NsaWVudFNpZGVUYXJnZXRSZXNvbHV0aW9uQWRhcHRlci5xdW5pdC5odG1sJ1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBrZXk6ICdDb21tb25EYXRhTW9kZWxBZGFwdGVyJyxcclxuICAgICAgY29udGV4dDoge1xyXG4gICAgICAgIHN5c3RlbU9iamVjdElkOiAnQ29tbW9uRGF0YU1vZGVsQWRhcHRlcicsXHJcbiAgICAgICAgcGF0aDogJ3NhcC9iYy91aTVfdWk1L3VpMi91c2hlbGwvdGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9hZGFwdGVycy9jZG0vQ29tbW9uRGF0YU1vZGVsQWRhcHRlci5xdW5pdC5odG1sJ1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBrZXk6ICd1c2hlbGwgbGliJyxcclxuICAgICAgY29udGV4dDoge1xyXG4gICAgICAgIHN5c3RlbU9iamVjdElkOiAndXNoZWxsIGxpYicsXHJcbiAgICAgICAgcGF0aDogJ3NhcC9iYy91aTVfdWk1L3VpMi91c2hlbGwvdGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC90ZXN0c3VpdGUucXVuaXQuaHRtbCdcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAga2V5OiAndXNoZWxsX2FiYXAnLFxyXG4gICAgICBjb250ZXh0OiB7XHJcbiAgICAgICAgc3lzdGVtT2JqZWN0SWQ6ICd1c2hlbGxfYWJhcCcsXHJcbiAgICAgICAgcGF0aDogJ3NhcC9iYy91aTVfdWk1L3VpMi91c2hlbGwvdGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbF9hYmFwL3Rlc3RzdWl0ZS5xdW5pdC5odG1sJ1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBrZXk6ICd1aTIgc2hlbGwgYXBpJyxcclxuICAgICAgY29udGV4dDoge1xyXG4gICAgICAgIHN5c3RlbU9iamVjdElkOiAndWkyIHNoZWxsIGFwaScsXHJcbiAgICAgICAgcGF0aDogJ3NhcC9wdWJsaWMvYmMvdWkyL3NlcnZpY2VzL3Rlc3QvdGVzdHN1aXRlLnF1bml0Lmh0bWwnXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGtleTogJ05hdlRhcmdldFJlc29sdXRpb24nLFxyXG4gICAgICBjb250ZXh0OiB7XHJcbiAgICAgICAgc3lzdGVtT2JqZWN0SWQ6ICdOYXZUYXJnZXRSZXNvbHV0aW9uJyxcclxuICAgICAgICBwYXRoOiAnL3NhcC9iYy90ZXN0L05hdlRhcmdldFJlc29sdXRpb24uanMnXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGtleTogJ0NTVFInLFxyXG4gICAgICBjb250ZXh0OiB7XHJcbiAgICAgICAgc3lzdGVtT2JqZWN0SWQ6ICdDbGllbnRTaWRlVGFyZ2V0UmVzb2x1dGlvbicsXHJcbiAgICAgICAgcGF0aDogJy9zYXAvYmMvdGVzdC9DbGVpbnRTaWRlVGFyZ2V0UmVzb2x1dGlvbi5qcydcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAga2V5OiAnU2hlbGwuY29udHJvbGxlci5qcycsXHJcbiAgICAgIGNvbnRleHQ6IHtcclxuICAgICAgICBzeXN0ZW1PYmplY3RJZDogJ1NoZWxsLmNvbnRyb2xsZXIuanMnLFxyXG4gICAgICAgIHBhdGg6ICcvc2FwL2JjL3Rlc3QvU2hlbGwuY29udHJvbGxlci5qcydcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIF0uY29uY2F0KFtcclxuICAgIC8vIGFscGhhYmV0aWMgb3JkZXIgcGxlYXNlXHJcbiAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9hZGFwdGVycy9jZG0vQ2xpZW50U2lkZVRhcmdldFJlc29sdXRpb25BZGFwdGVyLnF1bml0Lmh0bWwnLFxyXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvYWRhcHRlcnMvY2RtL0NvbW1vbkRhdGFNb2RlbEFkYXB0ZXIucXVuaXQuaHRtbCcsXHJcbiAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9hZGFwdGVycy9jZG0vTGF1bmNoUGFnZUFkYXB0ZXIucXVuaXQuaHRtbCcsXHJcblxyXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvYWRhcHRlcnMvbG9jYWwvQXBwU3RhdGVBZGFwdGVyLnF1bml0Lmh0bWwnLFxyXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvYWRhcHRlcnMvbG9jYWwvQ2xpZW50U2lkZVRhcmdldFJlc29sdXRpb25BZGFwdGVyLnF1bml0Lmh0bWwnLFxyXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvYWRhcHRlcnMvbG9jYWwvQ29udGFpbmVyQWRhcHRlci5xdW5pdC5odG1sJyxcclxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L2FkYXB0ZXJzL2xvY2FsL0VuZFVzZXJGZWVkYmFja0FkYXB0ZXIucXVuaXQuaHRtbCcsXHJcbiAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9hZGFwdGVycy9sb2NhbC9OYXZUYXJnZXRSZXNvbHV0aW9uQWRhcHRlci5xdW5pdC5odG1sJyxcclxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L2FkYXB0ZXJzL2xvY2FsL1BlcnNvbmFsaXphdGlvbkFkYXB0ZXIucXVuaXQuaHRtbCcsXHJcbiAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9hZGFwdGVycy9sb2NhbC9TdXBwb3J0VGlja2V0QWRhcHRlclRlc3QucXVuaXQuaHRtbCcsXHJcbiAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9hZGFwdGVycy9sb2NhbC9Vc2VyRGVmYXVsdFBhcmFtZXRlclBlcnNpc3RlbmNlQWRhcHRlci5xdW5pdC5odG1sJyxcclxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L2FkYXB0ZXJzL2xvY2FsL1VzZXJJbmZvQWRhcHRlci5xdW5pdC5odG1sJyxcclxuXHJcbiAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9ib290c3RyYXAvc2FuZGJveC5xdW5pdC5odG1sJyxcclxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L0NhbnZhc1NoYXBlc01hbmFnZXIucXVuaXQuaHRtbCcsXHJcblxyXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvY29tcG9uZW50cy9jb250YWluZXIvQXBwbGljYXRpb25Db250YWluZXIucXVuaXQuaHRtbCcsXHJcbiAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9jb21wb25lbnRzL2ZhY3RzaGVldC9hbm5vdGF0aW9uL09EYXRhVVJMVGVtcGxhdGluZy5xdW5pdC5odG1sJyxcclxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L2NvbXBvbmVudHMvZmxwL0NvbXBvbmVudEtleXNIYW5kbGVyLnF1bml0Lmh0bWwnLFxyXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvY29tcG9uZW50cy9mbHAvRmxwQXBwLnF1bml0Lmh0bWwnLFxyXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvY29tcG9uZW50cy9mbHAvbGF1bmNocGFkL2FwcGZpbmRlci9FYXN5QWNjZXNzLnF1bml0Lmh0bWwnLFxyXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvY29tcG9uZW50cy9mbHAvbGF1bmNocGFkL0Rhc2hib2FyZE1hbmFnZXIucXVuaXQuaHRtbCcsXHJcbiAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9jb21wb25lbnRzL2ZscC9sYXVuY2hwYWQvUGFnaW5nTWFuYWdlci5xdW5pdC5odG1sJyxcclxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L2NvbXBvbmVudHMvZmxwL2xhdW5jaHBhZC9hcHBmaW5kZXIvQXBwRmluZGVyLnF1bml0Lmh0bWwnLFxyXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvY29tcG9uZW50cy9mbHAvbGF1bmNocGFkL2FwcGZpbmRlci9Hcm91cExpc3RQb3BvdmVyLnF1bml0Lmh0bWwnLFxyXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvY29tcG9uZW50cy9mbHAvbGF1bmNocGFkL2FwcGZpbmRlci9IaWVyYXJjaHlBcHBzLnF1bml0Lmh0bWwnLFxyXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvY29tcG9uZW50cy9mbHAvbGF1bmNocGFkL2FwcGZpbmRlci9IaWVyYXJjaHlGb2xkZXJzLnF1bml0Lmh0bWwnLFxyXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvcmVuZGVyZXJzL2Zpb3JpMi91c2VyUHJlZmVyZW5jZXMvTGFuZ3VhZ2VSZWdpb25TZWxlY3Rvci5xdW5pdC5odG1sJyxcclxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L2NvbXBvbmVudHMvZmxwL2xhdW5jaHBhZC9kYXNoYm9hcmQvRGFzaGJvYXJkQ29udGVudC5xdW5pdC5odG1sJyxcclxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L2NvbXBvbmVudHMvZmxwL2xhdW5jaHBhZC9kYXNoYm9hcmQvRGFzaGJvYXJkVUlBY3Rpb25zLnF1bml0Lmh0bWwnLFxyXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvY29tcG9uZW50cy9mbHAvc2V0dGluZ3MvRmxwU2V0dGluZ3MucXVuaXQuaHRtbCcsXHJcblxyXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvY29tcG9uZW50cy90aWxlcy9hcHBsYXVuY2hlci9TdGF0aWNUaWxlLnF1bml0Lmh0bWwnLFxyXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvY29tcG9uZW50cy90aWxlcy9hcHBsYXVuY2hlcmR5bmFtaWMvRHluYW1pY1RpbGUucXVuaXQuaHRtbCcsXHJcbiAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9jb21wb25lbnRzL3RpbGVzL2NkbS9hcHBsYXVuY2hlci9TdGF0aWNUaWxlLnF1bml0Lmh0bWwnLFxyXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvY29tcG9uZW50cy90aWxlcy9jZG0vYXBwbGF1bmNoZXJkeW5hbWljL0R5bmFtaWNUaWxlLnF1bml0Lmh0bWwnLFxyXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvY29tcG9uZW50cy90aWxlcy91dGlscy5xdW5pdC5odG1sJyxcclxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L2NvbXBvbmVudHMvdGlsZXMvdXRpbHNSVC5xdW5pdC5odG1sJyxcclxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L2NvbXBvbmVudHMvdXNlckFjdGl2aXR5L3VzZXJBY3Rpdml0eUxvZy5xdW5pdC5odG1sJyxcclxuXHJcbiAgICAvLyBcInRlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvZGVtb2FwcHMvVXNlckRlZmF1bHRQbHVnaW5TYW1wbGUvVXNlckRlZmF1bHRQbHVnaW5TYW1wbGUucXVuaXQuaHRtbFwiLCAvLyBDdXJyZW50bHkgbm90IHJ1biBpbnNpZGUgdGhlIFFVbml0IFRlc3QgTG9hZGVyIGZvciB1c2hlbGwtbGliXHJcbiAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9GTFBBbmFseXRpY3MucXVuaXQuaHRtbCcsXHJcbiAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9MYXlvdXQucXVuaXQuaHRtbCcsXHJcblxyXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvcmVuZGVyZXJzL2Zpb3JpMi9BY2Nlc3NLZXlzSGFuZGxlci5xdW5pdC5odG1sJyxcclxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3JlbmRlcmVycy9maW9yaTIvRGVmYXVsdFBhcmFtZXRlcnMvRGVmYXVsdFBhcmFtZXRlcnMucXVuaXQuaHRtbCcsXHJcbiAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9yZW5kZXJlcnMvZmlvcmkyL0xpZmVjeWNsZS5xdW5pdC5odG1sJyxcclxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3JlbmRlcmVycy9maW9yaTIvbWVBcmVhL01lQXJlYS5xdW5pdC5odG1sJyxcclxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3JlbmRlcmVycy9maW9yaTIvbWVBcmVhL1VzZXJTZXR0aW5ncy5xdW5pdC5odG1sJyxcclxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3JlbmRlcmVycy9maW9yaTIvbm90aWZpY2F0aW9ucy9Ob3RpZmljYXRpb25zLnF1bml0Lmh0bWwnLFxyXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvcmVuZGVyZXJzL2Zpb3JpMi9ub3RpZmljYXRpb25zL1NldHRpbmdzLnF1bml0Lmh0bWwnLFxyXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvcmVuZGVyZXJzL2Zpb3JpMi9SZW5kZXJlci5xdW5pdC5odG1sJyxcclxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3JlbmRlcmVycy9maW9yaTIvUmVuZGVyZXJFeHRlbnNpb25zLnF1bml0Lmh0bWwnLFxyXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvcmVuZGVyZXJzL2Zpb3JpMi9TaGVsbC5xdW5pdC5odG1sJyxcclxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3JlbmRlcmVycy9maW9yaTIvVUlBY3Rpb25zLnF1bml0Lmh0bWwnLFxyXG5cclxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3NlcnZpY2VzL0FwcENvbmZpZ3VyYXRpb24ucXVuaXQuaHRtbCcsXHJcbiAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9zZXJ2aWNlcy9BcHBDb250ZXh0LnF1bml0Lmh0bWwnLFxyXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvc2VydmljZXMvQXBwTGlmZUN5Y2xlLnF1bml0Lmh0bWwnLFxyXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvc2VydmljZXMvQXBwU3RhdGUucXVuaXQuaHRtbCcsXHJcbiAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9zZXJ2aWNlcy9Cb29rbWFyay5xdW5pdC5odG1sJyxcclxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3NlcnZpY2VzL0NsaWVudFNpZGVUYXJnZXRSZXNvbHV0aW9uLnF1bml0Lmh0bWwnLFxyXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvc2VydmljZXMvQ29tbW9uRGF0YU1vZGVsLnF1bml0Lmh0bWwnLFxyXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvc2VydmljZXMvQ29tbW9uRGF0YU1vZGVsL1BlcnNvbmFsaXphdGlvblByb2Nlc3Nvci5xdW5pdC5odG1sJyxcclxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3NlcnZpY2VzL0NvbW1vbkRhdGFNb2RlbC9QZXJzb25hbGl6YXRpb25Qcm9jZXNzb3JDRE1CbGFja2JveC5xdW5pdC5odG1sJyxcclxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3NlcnZpY2VzL0NvbnRhaW5lci5xdW5pdC5odG1sJyxcclxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3NlcnZpY2VzL0Nyb3NzQXBwbGljYXRpb25OYXZpZ2F0aW9uLnF1bml0Lmh0bWwnLFxyXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvc2VydmljZXMvRW5kVXNlckZlZWRiYWNrLnF1bml0Lmh0bWwnLFxyXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvc2VydmljZXMvTGF1bmNoUGFnZS5xdW5pdC5odG1sJyxcclxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3NlcnZpY2VzL01lc3NhZ2UucXVuaXQuaHRtbCcsXHJcbiAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9zZXJ2aWNlcy9OYXZUYXJnZXRSZXNvbHV0aW9uLnF1bml0Lmh0bWwnLFxyXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvc2VydmljZXMvTmF2VGFyZ2V0UmVzb2x1dGlvbkNETUJsYWNrYm94LnF1bml0Lmh0bWwnLFxyXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvc2VydmljZXMvTm90aWZpY2F0aW9ucy5xdW5pdC5odG1sJyxcclxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3NlcnZpY2VzL1BlcnNvbmFsaXphdGlvbi5xdW5pdC5odG1sJyxcclxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3NlcnZpY2VzL1BsdWdpbk1hbmFnZXIucXVuaXQuaHRtbCcsXHJcbiAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9zZXJ2aWNlcy9SZWZlcmVuY2VSZXNvbHZlci5xdW5pdC5odG1sJyxcclxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3NlcnZpY2VzL1NoZWxsTmF2aWdhdGlvbi5IaXN0b3J5LnF1bml0Lmh0bWwnLFxyXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvc2VydmljZXMvU2hlbGxOYXZpZ2F0aW9uLnF1bml0Lmh0bWwnLFxyXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvc2VydmljZXMvU3VwcG9ydFRpY2tldC5xdW5pdC5odG1sJyxcclxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3NlcnZpY2VzL1VSTFBhcnNpbmcucXVuaXQuaHRtbCcsXHJcbiAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9zZXJ2aWNlcy9VUkxTaG9ydGVuaW5nLnF1bml0Lmh0bWwnLFxyXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvc2VydmljZXMvVWk1Q29tcG9uZW50TG9hZGVyLnF1bml0Lmh0bWwnLFxyXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvc2VydmljZXMvVXNhZ2VBbmFseXRpY3MucXVuaXQuaHRtbCcsXHJcbiAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9zZXJ2aWNlcy9Vc2VyRGVmYXVsdFBhcmFtZXRlclBlcnNpc3RlbmNlLnF1bml0Lmh0bWwnLFxyXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvc2VydmljZXMvVXNlckRlZmF1bHRQYXJhbWV0ZXJzLnF1bml0Lmh0bWwnLFxyXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvc2VydmljZXMvVXNlckluZm8ucXVuaXQuaHRtbCcsXHJcbiAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9zZXJ2aWNlcy9Vc2VyUmVjZW50cy5xdW5pdC5odG1sJyxcclxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3NlcnZpY2VzL1NtYXJ0TmF2aWdhdGlvbi5xdW5pdC5odG1sJyxcclxuXHJcbiAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9TeXN0ZW0ucXVuaXQuaHRtbCcsXHJcblxyXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvdWkvZm9vdGVyYmFyL0Fib3V0QnV0dG9uLnF1bml0Lmh0bWwnLFxyXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvdWkvZm9vdGVyYmFyL0FkZEJvb2ttYXJrQnV0dG9uLnF1bml0Lmh0bWwnLFxyXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvdWkvZm9vdGVyYmFyL0NvbnRhY3RTdXBwb3J0QnV0dG9uLnF1bml0Lmh0bWwnLFxyXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvdWkvZm9vdGVyYmFyL0VuZFVzZXJGZWVkYmFjay5xdW5pdC5odG1sJyxcclxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3VpL2Zvb3RlcmJhci9KYW1EaXNjdXNzQnV0dG9uLnF1bml0Lmh0bWwnLFxyXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvdWkvZm9vdGVyYmFyL0phbVNoYXJlQnV0dG9uLnF1bml0Lmh0bWwnLFxyXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvdWkvZm9vdGVyYmFyL0xvZ291dEJ1dHRvbi5xdW5pdC5odG1sJyxcclxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3VpL2Zvb3RlcmJhci9TZXR0aW5nc0J1dHRvbi5xdW5pdC5odG1sJyxcclxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3VpL2Zvb3RlcmJhci9Vc2VyUHJlZmVyZW5jZXNCdXR0b24ucXVuaXQuaHRtbCcsXHJcblxyXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvdWkvbGF1bmNocGFkL0FjY2Vzc2liaWxpdHlDdXN0b21EYXRhLnF1bml0Lmh0bWwnLFxyXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvdWkvbGF1bmNocGFkL0FjdGlvbkl0ZW0ucXVuaXQuaHRtbCcsXHJcbiAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC91aS9sYXVuY2hwYWQvQW5jaG9ySXRlbS5xdW5pdC5odG1sJyxcclxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3VpL2xhdW5jaHBhZC9BbmNob3JOYXZpZ2F0aW9uQmFyLnF1bml0Lmh0bWwnLFxyXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvdWkvbGF1bmNocGFkL0VtYmVkZGVkU3VwcG9ydEVycm9yTWVzc2FnZS5xdW5pdC5odG1sJyxcclxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3VpL2xhdW5jaHBhZC9GaW9yaTJMb2FkaW5nRGlhbG9nLnF1bml0Lmh0bWwnLFxyXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvdWkvbGF1bmNocGFkL0dyb3VwTGlzdEl0ZW0ucXVuaXQuaHRtbCcsXHJcbiAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC91aS9sYXVuY2hwYWQvTGlua1RpbGVXcmFwcGVyLnF1bml0Lmh0bWwnLFxyXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvdWkvbGF1bmNocGFkL0xvYWRpbmdEaWFsb2cucXVuaXQuaHRtbCcsXHJcbiAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC91aS9sYXVuY2hwYWQvVGlsZUNvbnRhaW5lci5xdW5pdC5odG1sJyxcclxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3VpL2xhdW5jaHBhZC9WaWV3UG9ydENvbnRhaW5lci5xdW5pdC5odG1sJyxcclxuXHJcbiAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC91aS9zaGVsbC9GbG9hdGluZ0NvbnRhaW5lci5xdW5pdC5odG1sJyxcclxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3VpL3NoZWxsL1JpZ2h0RmxvYXRpbmdDb250YWluZXIucXVuaXQuaHRtbCcsXHJcbiAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC91aS9zaGVsbC9TaGVsbEFwcFRpdGxlLnF1bml0Lmh0bWwnLFxyXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvdWkvc2hlbGwvU2hlbGxMYXlvdXQucXVuaXQuaHRtbCcsXHJcbiAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC91aS9zaGVsbC9TaGVsbFRpdGxlLnF1bml0Lmh0bWwnLFxyXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvdWkvc2hlbGwvU3BsaXRDb250YWluZXIucXVuaXQuaHRtbCcsXHJcblxyXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvdWkvdGlsZS9EeW5hbWljVGlsZS5xdW5pdC5odG1sJyxcclxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3VpL3RpbGUvSW1hZ2VUaWxlLnF1bml0Lmh0bWwnLFxyXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvdWkvdGlsZS9TdGF0aWNUaWxlLnF1bml0Lmh0bWwnLFxyXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvdWkvdGlsZS9UaWxlQmFzZS5xdW5pdC5odG1sJyxcclxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3VpNXNlcnZpY2UvU2hlbGxVSVNlcnZpY2UucXVuaXQuaHRtbCdcclxuICBdLm1hcChmdW5jdGlvbiAoc0VudHJ5KSB7XHJcbiAgICB2YXIgc1N0cmluZyA9IHNFbnRyeS5tYXRjaCgnLyhbXi9dKikucXVuaXQuaHRtbCcpWzFdXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBrZXk6IHNTdHJpbmcsXHJcbiAgICAgIGNvbnRleHQ6IHtcclxuICAgICAgICBzeXN0ZW1PYmplY3RJZDogc1N0cmluZyxcclxuICAgICAgICBwYXRoOiAnc2FwL2JjL3VpNV91aTUvdWkyL3VzaGVsbC8nICsgc0VudHJ5XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9KSlcclxuXHJcbiAgdmFyIG9XaWtpcyA9IFtcclxuICAgIHtcclxuICAgICAga2V5OiAnRkNDIEFCQVAgQWxpZ25tZW50JyxcclxuICAgICAgY29udGV4dDoge1xyXG4gICAgICAgIHN5c3RlbU9iamVjdElkOiAnVUkyIFN1cHBvcnQgcGFnZScsXHJcbiAgICAgICAgcGF0aDogJy91bmlmaWVkc2hlbGwvZGlzcGxheS9GQ0MrQUJBUCtBbGlnbm1lbnQnXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGtleTogJ1VJMiB0ZXN0IGxpbmtzJyxcclxuICAgICAgY29udGV4dDoge1xyXG4gICAgICAgIHN5c3RlbU9iamVjdElkOiAnVUkyIHRlc3QgbGlua3MnLFxyXG4gICAgICAgIHBhdGg6ICd3aWtpL2Rpc3BsYXkvdW5pZmllZHNoZWxsL0FkYXB0aW9uK3RvK1VJNStRVW5pdCtUZXN0K1J1bm5lcidcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAga2V5OiAnU3VwcG9ydCBzY2hlZHVsZScsXHJcbiAgICAgIGNvbnRleHQ6IHtcclxuICAgICAgICBzeXN0ZW1PYmplY3RJZDogJ1RJUCBDb3JlIFVJIEludGVncmF0aW9uIHN1cHBvcnQnLFxyXG4gICAgICAgIHBhdGg6ICd3aWtpL2Rpc3BsYXkvVElQQ29yZVVJSS9TdXBwb3J0J1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBrZXk6ICdVSUkgU3VwcG9ydCBzY2hlZHVsZScsXHJcbiAgICAgIGNvbnRleHQ6IHtcclxuICAgICAgICBzeXN0ZW1PYmplY3RJZDogJ1RJUCBDb3JlIFVJIEludGVncmF0aW9uIHN1cHBvcnQnLFxyXG4gICAgICAgIHBhdGg6ICd3aWtpL2Rpc3BsYXkvVElQQ29yZVVJSS9TdXBwb3J0J1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBrZXk6ICdTdXBwb3J0IHBhZ2UnLFxyXG4gICAgICBjb250ZXh0OiB7XHJcbiAgICAgICAgc3lzdGVtT2JqZWN0SWQ6ICdDQS1VSTItSU5ULUZFIHN1cHBvcnQnLFxyXG4gICAgICAgIHBhdGg6ICd3aWtpL2Rpc3BsYXkvVUlDRUkvQ1NTK01lc3NhZ2UrRGlzcGF0Y2hpbmcrLStjb21wb25lbnQrQ0EtVUkyLUlOVC1GRSdcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAga2V5OiAnVUkyIFN1cHBvcnQgcGFnZScsXHJcbiAgICAgIGNvbnRleHQ6IHtcclxuICAgICAgICBzeXN0ZW1PYmplY3RJZDogJ0NBLVVJMi1JTlQtRkUgc3VwcG9ydCcsXHJcbiAgICAgICAgcGF0aDogJ3dpa2kvZGlzcGxheS9VSUNFSS9DU1MrTWVzc2FnZStEaXNwYXRjaGluZystK2NvbXBvbmVudCtDQS1VSTItSU5ULUZFJ1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBrZXk6ICdCYWNrZW5kIFNwcmludCBSZXZpZXdzJyxcclxuICAgICAgY29udGV4dDoge1xyXG4gICAgICAgIHN5c3RlbU9iamVjdElkOiAnQmFja2VuZCBTcHJpbnQgUmV2aWV3JyxcclxuICAgICAgICBwYXRoOiAnd2lraS9kaXNwbGF5L1VJQ0VJL1RhY3QrT3ZlcnZpZXdzJ1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBrZXk6ICdVSTUgcGF0Y2ggc2NoZWR1bGUnLFxyXG4gICAgICBjb250ZXh0OiB7XHJcbiAgICAgICAgc3lzdGVtT2JqZWN0SWQ6ICdVSTUgVUkyIFBhY2ggcGxhbicsXHJcbiAgICAgICAgcGF0aDogJ3dpa2kvcGFnZXMvdmlld3BhZ2UuYWN0aW9uP3BhZ2VJZD0xNjc5NjIzMTU3J1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgXVxyXG5cclxuICBmdW5jdGlvbiBjYWxjRGlzdGFuY2UgKHNUZXh0MSwgc1RleHQyKSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhcImxlbmd0aDJcIiArIHNUZXh0MSArIFwiIC0gXCIgKyBzVGV4dDIpXHJcbiAgICB2YXIgYTAgPSBkaXN0YW5jZS5sZXZlbnNodGVpbihzVGV4dDEuc3Vic3RyaW5nKDAsIHNUZXh0Mi5sZW5ndGgpLCBzVGV4dDIpXHJcbiAgICB2YXIgYSA9IGRpc3RhbmNlLmxldmVuc2h0ZWluKHNUZXh0MS50b0xvd2VyQ2FzZSgpLCBzVGV4dDIpXHJcbiAgICByZXR1cm4gYTAgKiA1MDAgLyBzVGV4dDIubGVuZ3RoICsgYVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZm5GaW5kTWF0Y2ggKHNLZXl3b3JkLCBvQ29udGV4dCwgb01hcCkge1xyXG4gICAgLy8gcmV0dXJuIGEgYmV0dGVyIGNvbnRleHQgaWYgdGhlcmUgaXMgYSBtYXRjaFxyXG4gICAgb01hcC5zb3J0KGZ1bmN0aW9uIChvRW50cnkxLCBvRW50cnkyKSB7XHJcbiAgICAgIHZhciB1MSA9IGNhbGNEaXN0YW5jZShvRW50cnkxLmtleS50b0xvd2VyQ2FzZSgpLCBzS2V5d29yZClcclxuICAgICAgdmFyIHUyID0gY2FsY0Rpc3RhbmNlKG9FbnRyeTIua2V5LnRvTG93ZXJDYXNlKCksIHNLZXl3b3JkKVxyXG4gICAgICByZXR1cm4gdTEgLSB1MlxyXG4gICAgfSlcclxuICAgIC8vIGxhdGVyOiBpbiBjYXNlIG9mIGNvbmZsaWN0cywgYXNrLFxyXG4gICAgLy8gbm93OlxyXG4gICAgdmFyIGRpc3QgPSBjYWxjRGlzdGFuY2Uob01hcFswXS5rZXkudG9Mb3dlckNhc2UoKSwgc0tleXdvcmQpXHJcbiAgICBkZWJ1Z2xvZygnYmVzdCBkaXN0JyArIGRpc3QgKyAnIC8gICcgKyBkaXN0ICogc0tleXdvcmQubGVuZ3RoICsgJyAnICsgc0tleXdvcmQpXHJcbiAgICBpZiAoZGlzdCA8IDE1MCkge1xyXG4gICAgICB2YXIgbzEgPSBPYmplY3QuYXNzaWduKHt9LCBvQ29udGV4dClcclxuICAgICAgdmFyIG8yXHJcbiAgICAgIG8xLmNvbnRleHQgPSBPYmplY3QuYXNzaWduKHt9LCBvMS5jb250ZXh0KVxyXG4gICAgICBvMiA9IG8xXHJcbiAgICAgIG8yLmNvbnRleHQgPSBPYmplY3QuYXNzaWduKG8xLmNvbnRleHQsIG9NYXBbMF0uY29udGV4dClcclxuICAgICAgcmV0dXJuIG8yXHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbFxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYSBmdW5jdGlvbiB0byBtYXRjaCBhIHVuaXQgdGVzdCB1c2luZyBsZXZlbnNodGVpbiBkaXN0YW5jZXNcclxuICAgKiBAcHVibGljXHJcbiAgICovXHJcbiAgZnVuY3Rpb24gZm5GaW5kVW5pdFRlc3QgKHNzeXN0ZW1PYmplY3RJZCwgb0NvbnRleHQpIHtcclxuICAgIHJldHVybiBmbkZpbmRNYXRjaChzc3lzdGVtT2JqZWN0SWQsIG9Db250ZXh0LCBvVW5pdFRlc3RzKVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZm5GaW5kV2lraSAoc0tleXdvcmQsIG9Db250ZXh0KSB7XHJcbiAgICByZXR1cm4gZm5GaW5kTWF0Y2goc0tleXdvcmQsIG9Db250ZXh0LCBvV2lraXMpXHJcbiAgfVxyXG5cclxuICB2YXIgYVNob3dFbnRpdHlBY3Rpb25zID0gW1xyXG4gICAge1xyXG4gICAgICBjb250ZXh0OiB7XHJcbiAgICAgICAgc3lzdGVtSWQ6ICd1djInLFxyXG4gICAgICAgIGNsaWVudDogL15cXGR7MywzfSQvLFxyXG4gICAgICAgIHN5c3RlbXR5cGU6ICdBQkFQRkVTJyxcclxuICAgICAgICBzeXN0ZW1PYmplY3RJZDogJ2ZscCdcclxuICAgICAgfSxcclxuICAgICAgcmVzdWx0OiB7XHJcbiAgICAgICAgdHlwZTogJ1VSTCcsXHJcbiAgICAgICAgcGF0dGVybjogJ2h0dHBzOi8vbGRjaXV2Mi53ZGYuc2FwLmNvcnA6NDQzNTUvc2FwL2JjL3VpNV91aTUvdWkyL3VzaGVsbC9zaGVsbHMvYWJhcC9GaW9yaUxhdW5jaHBhZC5odG1sP3NhcC1jbGllbnQ9e2NsaWVudH0nXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGNvbnRleHQ6IHtcclxuICAgICAgICBzeXN0ZW1JZDogJ3V2MicsXHJcbiAgICAgICAgY2xpZW50OiAvXlxcZHszLDN9JC8sXHJcbiAgICAgICAgc3lzdGVtdHlwZTogJ0FCQVBGRVMnLFxyXG4gICAgICAgIHN5c3RlbU9iamVjdElkOiAnZmxwZCdcclxuICAgICAgfSxcclxuICAgICAgcmVzdWx0OiB7XHJcbiAgICAgICAgdHlwZTogJ1VSTCcsXHJcbiAgICAgICAgcGF0dGVybjogJ2h0dHBzOi8vbGRjaXV2Mi53ZGYuc2FwLmNvcnA6NDQzNTUvc2FwL2JjL3VpNV91aTUvc2FwL2Fyc3J2Y191cGJfYWRtbi9tYWluLmh0bWw/c2FwLWNsaWVudD17Y2xpZW50fSdcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgY29udGV4dDoge1xyXG4gICAgICAgIHN5c3RlbUlkOiAndTF5JyxcclxuICAgICAgICBjbGllbnQ6IC9eXFxkezMsM30kLyxcclxuICAgICAgICBzeXN0ZW10eXBlOiAnQUJBUEZFUycsXHJcbiAgICAgICAgc3lzdGVtT2JqZWN0SWQ6ICdmbHAnXHJcbiAgICAgIH0sXHJcbiAgICAgIHJlc3VsdDoge1xyXG4gICAgICAgIHR5cGU6ICdVUkwnLFxyXG4gICAgICAgIHBhdHRlcm46ICdodHRwczovL2xkY2l1MXkud2RmLnNhcC5jb3JwOjQ0MzU1L3NhcC9iYy91aTVfdWk1L3VpMi91c2hlbGwvc2hlbGxzL2FiYXAvRmlvcmlMYXVuY2hwYWQuaHRtbD9zYXAtY2xpZW50PXtjbGllbnR9J1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBjb250ZXh0OiB7XHJcbiAgICAgICAgc3lzdGVtSWQ6ICd1MXknLFxyXG4gICAgICAgIGNsaWVudDogL15cXGR7MywzfSQvLFxyXG4gICAgICAgIHN5c3RlbXR5cGU6ICdBQkFQRkVTJyxcclxuICAgICAgICBzeXN0ZW1PYmplY3RJZDogJ2ZscGQnXHJcbiAgICAgIH0sXHJcbiAgICAgIHJlc3VsdDoge1xyXG4gICAgICAgIHR5cGU6ICdVUkwnLFxyXG4gICAgICAgIHBhdHRlcm46ICdodHRwczovL2xkY2l1MXkud2RmLnNhcC5jb3JwOjQ0MzU1L3NhcC9iYy91aTVfdWk1L3NhcC9hcnNydmNfdXBiX2FkbW4vbWFpbi5odG1sP3NhcC1jbGllbnQ9e2NsaWVudH0nXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGNvbnRleHQ6IHtcclxuICAgICAgICBzeXN0ZW1JZDogJ3V2MicsXHJcbiAgICAgICAgY2xpZW50OiAnMTIwJyxcclxuICAgICAgICBzeXN0ZW1PYmplY3RDYXRlZ29yeTogJ2NhdGFsb2cnLFxyXG4gICAgICAgIHN5c3RlbU9iamVjdElkOiAvLiovLFxyXG4gICAgICAgIHN5c3RlbXR5cGU6ICdBQkFQRkVTJyxcclxuICAgICAgICB0b29sOiAnRkxQRCdcclxuICAgICAgfSxcclxuICAgICAgcmVzdWx0OiB7XHJcbiAgICAgICAgdHlwZTogJ1VSTCcsXHJcbiAgICAgICAgcGF0dGVybjogJ2h0dHBzOi8vbGRjaXV2Mi53ZGYuc2FwLmNvcnA6NDQzNTUvc2FwL2JjL3VpNV91aTUvc2FwL2Fyc3J2Y191cGJfYWRtbi9tYWluLmh0bWw/c2FwLWNsaWVudD17Y2xpZW50fSNDQVRBTE9HOntzeXN0ZW1PYmplY3RJZH0nXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGNvbnRleHQ6IHtcclxuICAgICAgICBzeXN0ZW1PYmplY3RDYXRlZ29yeTogJ3VuaXQnLFxyXG4gICAgICAgIHN5c3RlbU9iamVjdElkOiBmbkZpbmRVbml0VGVzdFxyXG4gICAgICB9LFxyXG4gICAgICByZXN1bHQ6IHtcclxuICAgICAgICB0eXBlOiAnVVJMJyxcclxuICAgICAgICBwYXR0ZXJuOiAnaHR0cDovL2xvY2FsaG9zdDo4MDgwL3twYXRofSdcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgY29udGV4dDoge1xyXG4gICAgICAgIHN5c3RlbU9iamVjdENhdGVnb3J5OiAnd2lraScsXHJcbiAgICAgICAgc3lzdGVtT2JqZWN0SWQ6IGZuRmluZFdpa2lcclxuICAgICAgfSxcclxuICAgICAgcmVzdWx0OiB7XHJcbiAgICAgICAgdHlwZTogJ1VSTCcsXHJcbiAgICAgICAgcGF0dGVybjogJ2h0dHBzOi8vd2lraS53ZGYuc2FwLmNvcnAve3BhdGh9J1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBjb250ZXh0OiB7XHJcbiAgICAgICAgc3lzdGVtSWQ6ICdKSVJBJ1xyXG4gICAgICB9LFxyXG4gICAgICByZXN1bHQ6IHtcclxuICAgICAgICB0eXBlOiAnVVJMJyxcclxuICAgICAgICBwYXR0ZXJuOiAnaHR0cHM6Ly9qaXJhLndkZi5zYXAuY29ycDo4MDgwL1RJUENPUkVVSUlJJ1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgXVxyXG5cclxuICAvLyBpZiBUT09MID0gSklSQSB8fCBTeXN0ZW1JZCA9IEpJUkEgLT4gU3lzdGVtSWQgPSBKSVJBXHJcbiAgLy9cclxuICAvL1xyXG5cclxuICBmdW5jdGlvbiBzdGFydEJyb3dzZXIgKHVybCkge1xyXG4gICAgdmFyIGNtZCA9XHJcbiAgICAnXCIlUHJvZ3JhbUZpbGVzKHg4NiklXFxcXEdvb2dsZVxcXFxDaHJvbWVcXFxcQXBwbGljYXRpb25cXFxcY2hyb21lLmV4ZVwiIC0taW5jb2duaXRvIC11cmwgXCInICsgdXJsICsgJ1wiJ1xyXG4gICAgZXhlYyhjbWQsIGZ1bmN0aW9uIChlcnJvciwgc3Rkb3V0LCBzdGRlcnIpIHtcclxuICAgICAgaWYgKGVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihgZXhlYyBlcnJvcjogJHtlcnJvcn1gKVxyXG4gICAgICAgIHJldHVyblxyXG4gICAgICB9XHJcbiAgICAgIGRlYnVnbG9nKGBzdGRvdXQ6ICR7c3Rkb3V0fWApXHJcbiAgICAgIGRlYnVnbG9nKGBzdGRlcnI6ICR7c3RkZXJyfWApXHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgLy8gc3RhcnRTQVBHVUlcclxuXHJcbiAgLy8gICBOOlxcPlwiYzpcXFByb2dyYW0gRmlsZXMgKHg4NilcXFNBUFxcRnJvbnRFbmRcXFNBUGd1aVwiXFxzYXBzaGN1dC5leGUgIC1zeXN0ZW09VVYyIC1jbGllbnQ9MTIwIC1jb21tYW5kPVNFMzggLXR5cGU9VHJhbnNhY3Rpb24gLXVzZXI9QVVTRVJcclxuXHJcbiAgZnVuY3Rpb24gZXhwYW5kUGFyYW1ldGVyc0luVVJMIChvTWVyZ2VkQ29udGV4dFJlc3VsdCkge1xyXG4gICAgdmFyIHB0biA9IG9NZXJnZWRDb250ZXh0UmVzdWx0LnJlc3VsdC5wYXR0ZXJuXHJcbiAgICBPYmplY3Qua2V5cyhvTWVyZ2VkQ29udGV4dFJlc3VsdC5jb250ZXh0KS5mb3JFYWNoKGZ1bmN0aW9uIChzS2V5KSB7XHJcbiAgICAgIHZhciByZWdleCA9IG5ldyBSZWdFeHAoJ3snICsgc0tleSArICd9JywgJ2cnKVxyXG4gICAgICBwdG4gPSBwdG4ucmVwbGFjZShyZWdleCwgb01lcmdlZENvbnRleHRSZXN1bHQuY29udGV4dFtzS2V5XSlcclxuICAgICAgcHRuID0gcHRuLnJlcGxhY2UocmVnZXgsIG9NZXJnZWRDb250ZXh0UmVzdWx0LmNvbnRleHRbc0tleV0pXHJcbiAgICB9KVxyXG4gICAgcmV0dXJuIHB0blxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZXhlY3V0ZVN0YXJ0dXAgKG9NZXJnZWRDb250ZXh0UmVzdWx0KSB7XHJcbiAgICBpZiAob01lcmdlZENvbnRleHRSZXN1bHQucmVzdWx0LnR5cGUgPT09ICdVUkwnKSB7XHJcbiAgICAgIHZhciBwdG4gPSBleHBhbmRQYXJhbWV0ZXJzSW5VUkwob01lcmdlZENvbnRleHRSZXN1bHQpXHJcbiAgICAgIHN0YXJ0QnJvd3NlcihwdG4pXHJcbiAgICAgIHJldHVybiBwdG5cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHZhciBzID0gKFwiRG9uJ3Qga25vdyBob3cgdG8gc3RhcnQgXCIgKyBvTWVyZ2VkQ29udGV4dFJlc3VsdC5yZXN1bHQudHlwZSArICdcXG4gZm9yIFwiJyArIG9NZXJnZWRDb250ZXh0UmVzdWx0LnF1ZXJ5ICsgJ1wiJylcclxuICAgICAgZGVidWdsb2cocylcclxuICAgICAgcmV0dXJuIHNcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIG5yTWF0Y2hlcyAoYU9iamVjdCwgb0NvbnRleHQpIHtcclxuICAgIHJldHVybiBPYmplY3Qua2V5cyhhT2JqZWN0KS5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIGtleSkge1xyXG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9Db250ZXh0LCBrZXkpKSB7XHJcbiAgICAgICAgcHJldiA9IHByZXYgKyAxXHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHByZXZcclxuICAgIH0sIDApXHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBuck5vTWF0Y2hlcyAoYU9iamVjdCwgb0NvbnRleHQpIHtcclxuICAgIHZhciBub01hdGNoQSA9IE9iamVjdC5rZXlzKGFPYmplY3QpLnJlZHVjZShmdW5jdGlvbiAocHJldiwga2V5KSB7XHJcbiAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9Db250ZXh0LCBrZXkpKSB7XHJcbiAgICAgICAgcHJldiA9IHByZXYgKyAxXHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHByZXZcclxuICAgIH0sIDApXHJcbiAgICB2YXIgbm9NYXRjaEIgPSBPYmplY3Qua2V5cyhvQ29udGV4dCkucmVkdWNlKGZ1bmN0aW9uIChwcmV2LCBrZXkpIHtcclxuICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYU9iamVjdCwga2V5KSkge1xyXG4gICAgICAgIHByZXYgPSBwcmV2ICsgMVxyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBwcmV2XHJcbiAgICB9LCAwKVxyXG4gICAgcmV0dXJuIG5vTWF0Y2hBICsgbm9NYXRjaEJcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHNhbWVPclN0YXIgKHMxIDogc3RyaW5nLCBzMiA6IHN0cmluZyB8IFJlZ0V4cCB8IEZ1bmN0aW9uICwgb0VudGl0eSkge1xyXG4gICAgcmV0dXJuIHMxID09PSBzMiB8fFxyXG4gICAgICAoczEgPT09IHVuZGVmaW5lZCAmJiBzMiA9PT0gbnVsbCkgfHxcclxuICAgICAgKChzMiBpbnN0YW5jZW9mIFJlZ0V4cCkgJiYgczIuZXhlYyhzMSkgIT09IG51bGwpIHx8XHJcbiAgICAgICgodHlwZW9mIHMyID09PSAnZnVuY3Rpb24nICYmIHMxKSAmJiBzMihzMSwgb0VudGl0eSkpXHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBzYW1lT3JTdGFyRW1wdHkgKHMxIDogc3RyaW5nLCBzMiA6IHN0cmluZyB8IFJlZ0V4cCB8IEZ1bmN0aW9uLCBvRW50aXR5KSB7XHJcbiAgICBpZiAoczEgPT09IHVuZGVmaW5lZCAmJiBzMiA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIHJldHVybiB0cnVlXHJcbiAgICB9XHJcbiAgICBpZiAoczIgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBzMSA9PT0gczIgfHxcclxuICAgICAgKChzMiBpbnN0YW5jZW9mIFJlZ0V4cCkgJiYgczIuZXhlYyhzMSkgIT09IG51bGwpIHx8XHJcbiAgICAgICgodHlwZW9mIHMyID09PSAnZnVuY3Rpb24nICYmIHMxKSAmJiBzMihzMSwgb0VudGl0eSkpXHJcbiAgfVxyXG4gIGZ1bmN0aW9uIGZpbHRlclNob3dFbnRpdHkgKG9Db250ZXh0LCBhU2hvd0VudGl0eSkge1xyXG4gICAgdmFyIGFGaWx0ZXJlZFxyXG4gICAgT2JqZWN0LmtleXMob0NvbnRleHQpLmZvckVhY2goZnVuY3Rpb24gKHNLZXkpIHtcclxuICAgICAgaWYgKG9Db250ZXh0W3NLZXldID09PSBudWxsKSB7XHJcbiAgICAgICAgb0NvbnRleHRbc0tleV0gPSB1bmRlZmluZWRcclxuICAgICAgfVxyXG4gICAgfSlcclxuICAgIGFGaWx0ZXJlZCA9IGFTaG93RW50aXR5LmZpbHRlcihmdW5jdGlvbiAob1Nob3dFbnRpdHkpIHtcclxuICAgICAgLy8gICAgICAgY29uc29sZS5sb2coXCIuLi5cIilcclxuICAgICAgLy8gICAgICBjb25zb2xlLmxvZyhvU2hvd0VudGl0eS5jb250ZXh0LnRvb2wgKyBcIiBcIiArIG9Db250ZXh0LnRvb2wgKyBcIlxcblwiKVxyXG4gICAgICAvLyAgICAgIGNvbnNvbGUubG9nKG9TaG93RW50aXR5LmNvbnRleHQuY2xpZW50ICsgXCIgXCIgKyBvQ29udGV4dC5jbGllbnQgK1wiOlwiICsgc2FtZU9yU3RhcihvQ29udGV4dC5jbGllbnQsb1Nob3dFbnRpdHkuY29udGV4dC5jbGllbnQpICsgXCJcXG5cIilcclxuICAgICAgLy8gIGNvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KG9TaG93RW50aXR5LmNvbnRleHQpICsgXCJcXG5cIiArIEpTT04uc3RyaW5naWZ5KG9Db250ZXh0LmNsaWVudCkgKyBcIlxcblwiKVxyXG5cclxuICAgICAgcmV0dXJuIHNhbWVPclN0YXIob1Nob3dFbnRpdHkuY29udGV4dC5zeXN0ZW1JZCwgb0NvbnRleHQuc3lzdGVtSWQsIG9Db250ZXh0KSAmJlxyXG4gICAgICAgIHNhbWVPclN0YXIob0NvbnRleHQudG9vbCwgb1Nob3dFbnRpdHkuY29udGV4dC50b29sLCBvQ29udGV4dCkgJiZcclxuICAgICAgICBzYW1lT3JTdGFyKG9Db250ZXh0LmNsaWVudCwgb1Nob3dFbnRpdHkuY29udGV4dC5jbGllbnQsIG9Db250ZXh0KSAmJlxyXG4gICAgICAgIHNhbWVPclN0YXJFbXB0eShvQ29udGV4dC5zeXN0ZW1PYmplY3RDYXRlZ29yeSwgb1Nob3dFbnRpdHkuY29udGV4dC5zeXN0ZW1PYmplY3RDYXRlZ29yeSwgb0NvbnRleHQpICYmXHJcbiAgICAgICAgc2FtZU9yU3RhckVtcHR5KG9Db250ZXh0LnN5c3RlbU9iamVjdElkLCBvU2hvd0VudGl0eS5jb250ZXh0LnN5c3RlbU9iamVjdElkLCBvQ29udGV4dClcclxuICAgIC8vICAgICAgJiYgb1Nob3dFbnRpdHkuY29udGV4dC50b29sID09PSBvQ29udGV4dC50b29sXHJcbiAgICB9KVxyXG4gICAgLy8gIGNvbnNvbGUubG9nKGFGaWx0ZXJlZC5sZW5ndGgpXHJcbiAgICAvLyBtYXRjaCBvdGhlciBjb250ZXh0IHBhcmFtZXRlcnNcclxuICAgIGFGaWx0ZXJlZC5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XHJcbiAgICAgIHZhciBuck1hdGNoZXNBID0gbnJNYXRjaGVzKGEuY29udGV4dCwgb0NvbnRleHQpXHJcbiAgICAgIHZhciBuck1hdGNoZXNCID0gbnJNYXRjaGVzKGIuY29udGV4dCwgb0NvbnRleHQpXHJcbiAgICAgIHZhciBuck5vTWF0Y2hlc0EgPSBuck5vTWF0Y2hlcyhhLmNvbnRleHQsIG9Db250ZXh0KVxyXG4gICAgICB2YXIgbnJOb01hdGNoZXNCID0gbnJOb01hdGNoZXMoYi5jb250ZXh0LCBvQ29udGV4dClcclxuICAgICAgLy8gICBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShhLmNvbnRleHQpKVxyXG4gICAgICAvLyAgIGNvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KGIuY29udGV4dCkpXHJcbiAgICAgIC8vICAgY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkob0NvbnRleHQpKVxyXG4gICAgICB2YXIgcmVzID0gLShuck1hdGNoZXNBIC0gbnJNYXRjaGVzQikgKiAxMDAgKyAobnJOb01hdGNoZXNBIC0gbnJOb01hdGNoZXNCKVxyXG4gICAgICAvLyAgICAgY29uc29sZS5sb2coXCJkaWZmIFwiICsgcmVzKVxyXG4gICAgICByZXR1cm4gcmVzXHJcbiAgICB9KVxyXG4gICAgaWYgKGFGaWx0ZXJlZC5sZW5ndGggPT09IDApIHtcclxuICAgICAgZGVidWdsb2coJ25vIHRhcmdldCBmb3Igc2hvd0VudGl0eSAnICsgSlNPTi5zdHJpbmdpZnkob0NvbnRleHQpKVxyXG4gICAgfVxyXG4gICAgLy8gY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkoYUZpbHRlcmVkLHVuZGVmaW5lZCwyKSlcclxuICAgIGlmIChhRmlsdGVyZWRbMF0pIHtcclxuICAgICAgLy8gZXhlY3V0ZSBhbGwgZnVuY3Rpb25zXHJcblxyXG4gICAgICB2YXIgb01hdGNoID0gYUZpbHRlcmVkWzBdXHJcblxyXG4gICAgICB2YXIgb01lcmdlZCA9IHtcclxuICAgICAgICBjb250ZXh0OiB7XHJcblxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBvTWVyZ2VkLmNvbnRleHQgPSBPYmplY3QuYXNzaWduKHt9LCBvTWVyZ2VkLmNvbnRleHQsIGFGaWx0ZXJlZFswXS5jb250ZXh0LCBvQ29udGV4dClcclxuICAgICAgb01lcmdlZCA9IE9iamVjdC5hc3NpZ24ob01lcmdlZCwge1xyXG4gICAgICAgIHJlc3VsdDogYUZpbHRlcmVkWzBdLnJlc3VsdFxyXG4gICAgICB9KVxyXG5cclxuICAgICAgT2JqZWN0LmtleXMob01hdGNoLmNvbnRleHQpLmZvckVhY2goZnVuY3Rpb24gKHNLZXkpIHtcclxuICAgICAgICBpZiAodHlwZW9mIG9NYXRjaC5jb250ZXh0W3NLZXldID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICBkZWJ1Z2xvZygnTm93IHJldHJvZml0dGluZyA6JyArIHNLZXkgKyAnIC0gJyArIG9Db250ZXh0W3NLZXldKVxyXG4gICAgICAgICAgb01lcmdlZCA9IG9NYXRjaC5jb250ZXh0W3NLZXldKG9Db250ZXh0W3NLZXldLCBvTWVyZ2VkKVxyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuXHJcbiAgICAgIHJldHVybiBvTWVyZ2VkXHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbFxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZXhlY1Nob3dFbnRpdHkgKG9FbnRpdHkpIHtcclxuICAgIHZhciBtZXJnZWQgPSBmaWx0ZXJTaG93RW50aXR5KG9FbnRpdHksIGFTaG93RW50aXR5QWN0aW9ucylcclxuICAgIGlmIChtZXJnZWQpIHtcclxuICAgICAgcmV0dXJuIGV4ZWN1dGVTdGFydHVwKG1lcmdlZClcclxuICAgIH1cclxuICAgIHJldHVybiBudWxsXHJcbiAgfVxyXG5cclxuICAvLyBFOlxccHJvamVjdHNcXG5vZGVqc1xcYm90YnVpbGRlclxcc2FtcGxlYm90PlwiJVByb2dyYW1GaWxlcyh4ODYpJVxcR29vZ2xlXFxDaHJvbWVcXEFwcGxpY2F0aW9uXFxjaHJvbWUuZXhlXCIgLS1pbmNvZ25pdG8gLXVybCB3d3cuc3BpZWdlbC5kZVxyXG5cclxuICBleHBvcnQgY29uc3QgZGlzcGF0Y2hlciA9IHtcclxuICAgIGV4ZWNTaG93RW50aXR5OiBleGVjU2hvd0VudGl0eSxcclxuICAgIF90ZXN0OiB7XHJcbiAgICAgIHNhbWVPclN0YXI6IHNhbWVPclN0YXIsXHJcbiAgICAgIG5yTWF0Y2hlczogbnJNYXRjaGVzLFxyXG4gICAgICBuck5vTWF0Y2hlczogbnJOb01hdGNoZXMsXHJcbiAgICAgIGV4cGFuZFBhcmFtZXRlcnNJblVSTDogZXhwYW5kUGFyYW1ldGVyc0luVVJMLFxyXG4gICAgICBmaWx0ZXJTaG93RW50aXR5OiBmaWx0ZXJTaG93RW50aXR5LFxyXG4gICAgICBmbkZpbmRVbml0VGVzdDogZm5GaW5kVW5pdFRlc3QsXHJcbiAgICAgIGNhbGNEaXN0YW5jZTogY2FsY0Rpc3RhbmNlLFxyXG4gICAgICBfYVNob3dFbnRpdHlBY3Rpb25zOiBhU2hvd0VudGl0eUFjdGlvbnNcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vZXhwb3J0cyBkaXNwYXRjaGVyO1xyXG5cclxuICAvL21vZHVsZS5leHBvcnRzID0gZGlzcGF0Y2hlclxyXG5cclxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL2xpYi9ub2RlLTQuZC50c1wiIC8+XG5cInVzZSBzdHJpY3RcIjtcbmNvbnN0IGRpc3RhbmNlID0gcmVxdWlyZSgnLi4vdXRpbHMvZGFtZXJhdUxldmVuc2h0ZWluJyk7XG5jb25zdCBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJyk7XG5jb25zdCBkZWJ1Z2xvZyA9IGRlYnVnKCdkaXNwYXRjaGVyJyk7XG5jb25zdCBjaGlsZF9wcm9jZXNzXzEgPSByZXF1aXJlKCdjaGlsZF9wcm9jZXNzJyk7XG4vLyAgdmFyIGV4ZWMgPSByZXF1aXJlKCdjaGlsZF9wcm9jZXNzJykuZXhlY1xuLy8gIHZhciBsZXZlbiA9IHJlcXVpcmUoJy4uL3V0aWxzL2RhbWVyYXVMZXZlbnNodGVpbi5qcycpLmxldmVuc2h0ZWluXG4vL3ZhciBsZXZlbiA9IHJlcXVpcmUoJy4uL3V0aWxzL2RhbWVyYXVMZXZlbnNodGVpbi5qcycpXG52YXIgb1VuaXRUZXN0cyA9IFtcbiAgICB7XG4gICAgICAgIGtleTogJ0NsaWVudFNpZGVUYXJnZXRSZXNvbHV0aW9uJyxcbiAgICAgICAgY29udGV4dDoge1xuICAgICAgICAgICAgc3lzdGVtT2JqZWN0SWQ6ICdDbGllbnRTaWRlVGFyZ2V0UmVzb2x1dGlvbicsXG4gICAgICAgICAgICBwYXRoOiAnc2FwL2JjL3VpNV91aTUvdWkyL3VzaGVsbC90ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L2FkYXB0ZXJzL2NkbS9DbGllbnRTaWRlVGFyZ2V0UmVzb2x1dGlvbkFkYXB0ZXIucXVuaXQuaHRtbCdcbiAgICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgICBrZXk6ICdDb21tb25EYXRhTW9kZWxBZGFwdGVyJyxcbiAgICAgICAgY29udGV4dDoge1xuICAgICAgICAgICAgc3lzdGVtT2JqZWN0SWQ6ICdDb21tb25EYXRhTW9kZWxBZGFwdGVyJyxcbiAgICAgICAgICAgIHBhdGg6ICdzYXAvYmMvdWk1X3VpNS91aTIvdXNoZWxsL3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvYWRhcHRlcnMvY2RtL0NvbW1vbkRhdGFNb2RlbEFkYXB0ZXIucXVuaXQuaHRtbCdcbiAgICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgICBrZXk6ICd1c2hlbGwgbGliJyxcbiAgICAgICAgY29udGV4dDoge1xuICAgICAgICAgICAgc3lzdGVtT2JqZWN0SWQ6ICd1c2hlbGwgbGliJyxcbiAgICAgICAgICAgIHBhdGg6ICdzYXAvYmMvdWk1X3VpNS91aTIvdXNoZWxsL3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvdGVzdHN1aXRlLnF1bml0Lmh0bWwnXG4gICAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgICAga2V5OiAndXNoZWxsX2FiYXAnLFxuICAgICAgICBjb250ZXh0OiB7XG4gICAgICAgICAgICBzeXN0ZW1PYmplY3RJZDogJ3VzaGVsbF9hYmFwJyxcbiAgICAgICAgICAgIHBhdGg6ICdzYXAvYmMvdWk1X3VpNS91aTIvdXNoZWxsL3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGxfYWJhcC90ZXN0c3VpdGUucXVuaXQuaHRtbCdcbiAgICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgICBrZXk6ICd1aTIgc2hlbGwgYXBpJyxcbiAgICAgICAgY29udGV4dDoge1xuICAgICAgICAgICAgc3lzdGVtT2JqZWN0SWQ6ICd1aTIgc2hlbGwgYXBpJyxcbiAgICAgICAgICAgIHBhdGg6ICdzYXAvcHVibGljL2JjL3VpMi9zZXJ2aWNlcy90ZXN0L3Rlc3RzdWl0ZS5xdW5pdC5odG1sJ1xuICAgICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICAgIGtleTogJ05hdlRhcmdldFJlc29sdXRpb24nLFxuICAgICAgICBjb250ZXh0OiB7XG4gICAgICAgICAgICBzeXN0ZW1PYmplY3RJZDogJ05hdlRhcmdldFJlc29sdXRpb24nLFxuICAgICAgICAgICAgcGF0aDogJy9zYXAvYmMvdGVzdC9OYXZUYXJnZXRSZXNvbHV0aW9uLmpzJ1xuICAgICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICAgIGtleTogJ0NTVFInLFxuICAgICAgICBjb250ZXh0OiB7XG4gICAgICAgICAgICBzeXN0ZW1PYmplY3RJZDogJ0NsaWVudFNpZGVUYXJnZXRSZXNvbHV0aW9uJyxcbiAgICAgICAgICAgIHBhdGg6ICcvc2FwL2JjL3Rlc3QvQ2xlaW50U2lkZVRhcmdldFJlc29sdXRpb24uanMnXG4gICAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgICAga2V5OiAnU2hlbGwuY29udHJvbGxlci5qcycsXG4gICAgICAgIGNvbnRleHQ6IHtcbiAgICAgICAgICAgIHN5c3RlbU9iamVjdElkOiAnU2hlbGwuY29udHJvbGxlci5qcycsXG4gICAgICAgICAgICBwYXRoOiAnL3NhcC9iYy90ZXN0L1NoZWxsLmNvbnRyb2xsZXIuanMnXG4gICAgICAgIH1cbiAgICB9XG5dLmNvbmNhdChbXG4gICAgLy8gYWxwaGFiZXRpYyBvcmRlciBwbGVhc2VcbiAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9hZGFwdGVycy9jZG0vQ2xpZW50U2lkZVRhcmdldFJlc29sdXRpb25BZGFwdGVyLnF1bml0Lmh0bWwnLFxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L2FkYXB0ZXJzL2NkbS9Db21tb25EYXRhTW9kZWxBZGFwdGVyLnF1bml0Lmh0bWwnLFxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L2FkYXB0ZXJzL2NkbS9MYXVuY2hQYWdlQWRhcHRlci5xdW5pdC5odG1sJyxcbiAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9hZGFwdGVycy9sb2NhbC9BcHBTdGF0ZUFkYXB0ZXIucXVuaXQuaHRtbCcsXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvYWRhcHRlcnMvbG9jYWwvQ2xpZW50U2lkZVRhcmdldFJlc29sdXRpb25BZGFwdGVyLnF1bml0Lmh0bWwnLFxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L2FkYXB0ZXJzL2xvY2FsL0NvbnRhaW5lckFkYXB0ZXIucXVuaXQuaHRtbCcsXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvYWRhcHRlcnMvbG9jYWwvRW5kVXNlckZlZWRiYWNrQWRhcHRlci5xdW5pdC5odG1sJyxcbiAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9hZGFwdGVycy9sb2NhbC9OYXZUYXJnZXRSZXNvbHV0aW9uQWRhcHRlci5xdW5pdC5odG1sJyxcbiAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9hZGFwdGVycy9sb2NhbC9QZXJzb25hbGl6YXRpb25BZGFwdGVyLnF1bml0Lmh0bWwnLFxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L2FkYXB0ZXJzL2xvY2FsL1N1cHBvcnRUaWNrZXRBZGFwdGVyVGVzdC5xdW5pdC5odG1sJyxcbiAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9hZGFwdGVycy9sb2NhbC9Vc2VyRGVmYXVsdFBhcmFtZXRlclBlcnNpc3RlbmNlQWRhcHRlci5xdW5pdC5odG1sJyxcbiAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9hZGFwdGVycy9sb2NhbC9Vc2VySW5mb0FkYXB0ZXIucXVuaXQuaHRtbCcsXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvYm9vdHN0cmFwL3NhbmRib3gucXVuaXQuaHRtbCcsXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvQ2FudmFzU2hhcGVzTWFuYWdlci5xdW5pdC5odG1sJyxcbiAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9jb21wb25lbnRzL2NvbnRhaW5lci9BcHBsaWNhdGlvbkNvbnRhaW5lci5xdW5pdC5odG1sJyxcbiAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9jb21wb25lbnRzL2ZhY3RzaGVldC9hbm5vdGF0aW9uL09EYXRhVVJMVGVtcGxhdGluZy5xdW5pdC5odG1sJyxcbiAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9jb21wb25lbnRzL2ZscC9Db21wb25lbnRLZXlzSGFuZGxlci5xdW5pdC5odG1sJyxcbiAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9jb21wb25lbnRzL2ZscC9GbHBBcHAucXVuaXQuaHRtbCcsXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvY29tcG9uZW50cy9mbHAvbGF1bmNocGFkL2FwcGZpbmRlci9FYXN5QWNjZXNzLnF1bml0Lmh0bWwnLFxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L2NvbXBvbmVudHMvZmxwL2xhdW5jaHBhZC9EYXNoYm9hcmRNYW5hZ2VyLnF1bml0Lmh0bWwnLFxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L2NvbXBvbmVudHMvZmxwL2xhdW5jaHBhZC9QYWdpbmdNYW5hZ2VyLnF1bml0Lmh0bWwnLFxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L2NvbXBvbmVudHMvZmxwL2xhdW5jaHBhZC9hcHBmaW5kZXIvQXBwRmluZGVyLnF1bml0Lmh0bWwnLFxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L2NvbXBvbmVudHMvZmxwL2xhdW5jaHBhZC9hcHBmaW5kZXIvR3JvdXBMaXN0UG9wb3Zlci5xdW5pdC5odG1sJyxcbiAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9jb21wb25lbnRzL2ZscC9sYXVuY2hwYWQvYXBwZmluZGVyL0hpZXJhcmNoeUFwcHMucXVuaXQuaHRtbCcsXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvY29tcG9uZW50cy9mbHAvbGF1bmNocGFkL2FwcGZpbmRlci9IaWVyYXJjaHlGb2xkZXJzLnF1bml0Lmh0bWwnLFxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3JlbmRlcmVycy9maW9yaTIvdXNlclByZWZlcmVuY2VzL0xhbmd1YWdlUmVnaW9uU2VsZWN0b3IucXVuaXQuaHRtbCcsXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvY29tcG9uZW50cy9mbHAvbGF1bmNocGFkL2Rhc2hib2FyZC9EYXNoYm9hcmRDb250ZW50LnF1bml0Lmh0bWwnLFxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L2NvbXBvbmVudHMvZmxwL2xhdW5jaHBhZC9kYXNoYm9hcmQvRGFzaGJvYXJkVUlBY3Rpb25zLnF1bml0Lmh0bWwnLFxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L2NvbXBvbmVudHMvZmxwL3NldHRpbmdzL0ZscFNldHRpbmdzLnF1bml0Lmh0bWwnLFxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L2NvbXBvbmVudHMvdGlsZXMvYXBwbGF1bmNoZXIvU3RhdGljVGlsZS5xdW5pdC5odG1sJyxcbiAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9jb21wb25lbnRzL3RpbGVzL2FwcGxhdW5jaGVyZHluYW1pYy9EeW5hbWljVGlsZS5xdW5pdC5odG1sJyxcbiAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9jb21wb25lbnRzL3RpbGVzL2NkbS9hcHBsYXVuY2hlci9TdGF0aWNUaWxlLnF1bml0Lmh0bWwnLFxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L2NvbXBvbmVudHMvdGlsZXMvY2RtL2FwcGxhdW5jaGVyZHluYW1pYy9EeW5hbWljVGlsZS5xdW5pdC5odG1sJyxcbiAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9jb21wb25lbnRzL3RpbGVzL3V0aWxzLnF1bml0Lmh0bWwnLFxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L2NvbXBvbmVudHMvdGlsZXMvdXRpbHNSVC5xdW5pdC5odG1sJyxcbiAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9jb21wb25lbnRzL3VzZXJBY3Rpdml0eS91c2VyQWN0aXZpdHlMb2cucXVuaXQuaHRtbCcsXG4gICAgLy8gXCJ0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L2RlbW9hcHBzL1VzZXJEZWZhdWx0UGx1Z2luU2FtcGxlL1VzZXJEZWZhdWx0UGx1Z2luU2FtcGxlLnF1bml0Lmh0bWxcIiwgLy8gQ3VycmVudGx5IG5vdCBydW4gaW5zaWRlIHRoZSBRVW5pdCBUZXN0IExvYWRlciBmb3IgdXNoZWxsLWxpYlxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L0ZMUEFuYWx5dGljcy5xdW5pdC5odG1sJyxcbiAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9MYXlvdXQucXVuaXQuaHRtbCcsXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvcmVuZGVyZXJzL2Zpb3JpMi9BY2Nlc3NLZXlzSGFuZGxlci5xdW5pdC5odG1sJyxcbiAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9yZW5kZXJlcnMvZmlvcmkyL0RlZmF1bHRQYXJhbWV0ZXJzL0RlZmF1bHRQYXJhbWV0ZXJzLnF1bml0Lmh0bWwnLFxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3JlbmRlcmVycy9maW9yaTIvTGlmZWN5Y2xlLnF1bml0Lmh0bWwnLFxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3JlbmRlcmVycy9maW9yaTIvbWVBcmVhL01lQXJlYS5xdW5pdC5odG1sJyxcbiAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9yZW5kZXJlcnMvZmlvcmkyL21lQXJlYS9Vc2VyU2V0dGluZ3MucXVuaXQuaHRtbCcsXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvcmVuZGVyZXJzL2Zpb3JpMi9ub3RpZmljYXRpb25zL05vdGlmaWNhdGlvbnMucXVuaXQuaHRtbCcsXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvcmVuZGVyZXJzL2Zpb3JpMi9ub3RpZmljYXRpb25zL1NldHRpbmdzLnF1bml0Lmh0bWwnLFxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3JlbmRlcmVycy9maW9yaTIvUmVuZGVyZXIucXVuaXQuaHRtbCcsXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvcmVuZGVyZXJzL2Zpb3JpMi9SZW5kZXJlckV4dGVuc2lvbnMucXVuaXQuaHRtbCcsXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvcmVuZGVyZXJzL2Zpb3JpMi9TaGVsbC5xdW5pdC5odG1sJyxcbiAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9yZW5kZXJlcnMvZmlvcmkyL1VJQWN0aW9ucy5xdW5pdC5odG1sJyxcbiAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9zZXJ2aWNlcy9BcHBDb25maWd1cmF0aW9uLnF1bml0Lmh0bWwnLFxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3NlcnZpY2VzL0FwcENvbnRleHQucXVuaXQuaHRtbCcsXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvc2VydmljZXMvQXBwTGlmZUN5Y2xlLnF1bml0Lmh0bWwnLFxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3NlcnZpY2VzL0FwcFN0YXRlLnF1bml0Lmh0bWwnLFxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3NlcnZpY2VzL0Jvb2ttYXJrLnF1bml0Lmh0bWwnLFxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3NlcnZpY2VzL0NsaWVudFNpZGVUYXJnZXRSZXNvbHV0aW9uLnF1bml0Lmh0bWwnLFxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3NlcnZpY2VzL0NvbW1vbkRhdGFNb2RlbC5xdW5pdC5odG1sJyxcbiAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9zZXJ2aWNlcy9Db21tb25EYXRhTW9kZWwvUGVyc29uYWxpemF0aW9uUHJvY2Vzc29yLnF1bml0Lmh0bWwnLFxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3NlcnZpY2VzL0NvbW1vbkRhdGFNb2RlbC9QZXJzb25hbGl6YXRpb25Qcm9jZXNzb3JDRE1CbGFja2JveC5xdW5pdC5odG1sJyxcbiAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9zZXJ2aWNlcy9Db250YWluZXIucXVuaXQuaHRtbCcsXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvc2VydmljZXMvQ3Jvc3NBcHBsaWNhdGlvbk5hdmlnYXRpb24ucXVuaXQuaHRtbCcsXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvc2VydmljZXMvRW5kVXNlckZlZWRiYWNrLnF1bml0Lmh0bWwnLFxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3NlcnZpY2VzL0xhdW5jaFBhZ2UucXVuaXQuaHRtbCcsXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvc2VydmljZXMvTWVzc2FnZS5xdW5pdC5odG1sJyxcbiAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9zZXJ2aWNlcy9OYXZUYXJnZXRSZXNvbHV0aW9uLnF1bml0Lmh0bWwnLFxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3NlcnZpY2VzL05hdlRhcmdldFJlc29sdXRpb25DRE1CbGFja2JveC5xdW5pdC5odG1sJyxcbiAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9zZXJ2aWNlcy9Ob3RpZmljYXRpb25zLnF1bml0Lmh0bWwnLFxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3NlcnZpY2VzL1BlcnNvbmFsaXphdGlvbi5xdW5pdC5odG1sJyxcbiAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9zZXJ2aWNlcy9QbHVnaW5NYW5hZ2VyLnF1bml0Lmh0bWwnLFxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3NlcnZpY2VzL1JlZmVyZW5jZVJlc29sdmVyLnF1bml0Lmh0bWwnLFxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3NlcnZpY2VzL1NoZWxsTmF2aWdhdGlvbi5IaXN0b3J5LnF1bml0Lmh0bWwnLFxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3NlcnZpY2VzL1NoZWxsTmF2aWdhdGlvbi5xdW5pdC5odG1sJyxcbiAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9zZXJ2aWNlcy9TdXBwb3J0VGlja2V0LnF1bml0Lmh0bWwnLFxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3NlcnZpY2VzL1VSTFBhcnNpbmcucXVuaXQuaHRtbCcsXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvc2VydmljZXMvVVJMU2hvcnRlbmluZy5xdW5pdC5odG1sJyxcbiAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9zZXJ2aWNlcy9VaTVDb21wb25lbnRMb2FkZXIucXVuaXQuaHRtbCcsXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvc2VydmljZXMvVXNhZ2VBbmFseXRpY3MucXVuaXQuaHRtbCcsXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvc2VydmljZXMvVXNlckRlZmF1bHRQYXJhbWV0ZXJQZXJzaXN0ZW5jZS5xdW5pdC5odG1sJyxcbiAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9zZXJ2aWNlcy9Vc2VyRGVmYXVsdFBhcmFtZXRlcnMucXVuaXQuaHRtbCcsXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvc2VydmljZXMvVXNlckluZm8ucXVuaXQuaHRtbCcsXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvc2VydmljZXMvVXNlclJlY2VudHMucXVuaXQuaHRtbCcsXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvc2VydmljZXMvU21hcnROYXZpZ2F0aW9uLnF1bml0Lmh0bWwnLFxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L1N5c3RlbS5xdW5pdC5odG1sJyxcbiAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC91aS9mb290ZXJiYXIvQWJvdXRCdXR0b24ucXVuaXQuaHRtbCcsXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvdWkvZm9vdGVyYmFyL0FkZEJvb2ttYXJrQnV0dG9uLnF1bml0Lmh0bWwnLFxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3VpL2Zvb3RlcmJhci9Db250YWN0U3VwcG9ydEJ1dHRvbi5xdW5pdC5odG1sJyxcbiAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC91aS9mb290ZXJiYXIvRW5kVXNlckZlZWRiYWNrLnF1bml0Lmh0bWwnLFxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3VpL2Zvb3RlcmJhci9KYW1EaXNjdXNzQnV0dG9uLnF1bml0Lmh0bWwnLFxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3VpL2Zvb3RlcmJhci9KYW1TaGFyZUJ1dHRvbi5xdW5pdC5odG1sJyxcbiAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC91aS9mb290ZXJiYXIvTG9nb3V0QnV0dG9uLnF1bml0Lmh0bWwnLFxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3VpL2Zvb3RlcmJhci9TZXR0aW5nc0J1dHRvbi5xdW5pdC5odG1sJyxcbiAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC91aS9mb290ZXJiYXIvVXNlclByZWZlcmVuY2VzQnV0dG9uLnF1bml0Lmh0bWwnLFxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3VpL2xhdW5jaHBhZC9BY2Nlc3NpYmlsaXR5Q3VzdG9tRGF0YS5xdW5pdC5odG1sJyxcbiAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC91aS9sYXVuY2hwYWQvQWN0aW9uSXRlbS5xdW5pdC5odG1sJyxcbiAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC91aS9sYXVuY2hwYWQvQW5jaG9ySXRlbS5xdW5pdC5odG1sJyxcbiAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC91aS9sYXVuY2hwYWQvQW5jaG9yTmF2aWdhdGlvbkJhci5xdW5pdC5odG1sJyxcbiAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC91aS9sYXVuY2hwYWQvRW1iZWRkZWRTdXBwb3J0RXJyb3JNZXNzYWdlLnF1bml0Lmh0bWwnLFxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3VpL2xhdW5jaHBhZC9GaW9yaTJMb2FkaW5nRGlhbG9nLnF1bml0Lmh0bWwnLFxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3VpL2xhdW5jaHBhZC9Hcm91cExpc3RJdGVtLnF1bml0Lmh0bWwnLFxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3VpL2xhdW5jaHBhZC9MaW5rVGlsZVdyYXBwZXIucXVuaXQuaHRtbCcsXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvdWkvbGF1bmNocGFkL0xvYWRpbmdEaWFsb2cucXVuaXQuaHRtbCcsXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvdWkvbGF1bmNocGFkL1RpbGVDb250YWluZXIucXVuaXQuaHRtbCcsXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvdWkvbGF1bmNocGFkL1ZpZXdQb3J0Q29udGFpbmVyLnF1bml0Lmh0bWwnLFxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3VpL3NoZWxsL0Zsb2F0aW5nQ29udGFpbmVyLnF1bml0Lmh0bWwnLFxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3VpL3NoZWxsL1JpZ2h0RmxvYXRpbmdDb250YWluZXIucXVuaXQuaHRtbCcsXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvdWkvc2hlbGwvU2hlbGxBcHBUaXRsZS5xdW5pdC5odG1sJyxcbiAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC91aS9zaGVsbC9TaGVsbExheW91dC5xdW5pdC5odG1sJyxcbiAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC91aS9zaGVsbC9TaGVsbFRpdGxlLnF1bml0Lmh0bWwnLFxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3VpL3NoZWxsL1NwbGl0Q29udGFpbmVyLnF1bml0Lmh0bWwnLFxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3VpL3RpbGUvRHluYW1pY1RpbGUucXVuaXQuaHRtbCcsXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvdWkvdGlsZS9JbWFnZVRpbGUucXVuaXQuaHRtbCcsXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvdWkvdGlsZS9TdGF0aWNUaWxlLnF1bml0Lmh0bWwnLFxuICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3VpL3RpbGUvVGlsZUJhc2UucXVuaXQuaHRtbCcsXG4gICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvdWk1c2VydmljZS9TaGVsbFVJU2VydmljZS5xdW5pdC5odG1sJ1xuXS5tYXAoZnVuY3Rpb24gKHNFbnRyeSkge1xuICAgIHZhciBzU3RyaW5nID0gc0VudHJ5Lm1hdGNoKCcvKFteL10qKS5xdW5pdC5odG1sJylbMV07XG4gICAgcmV0dXJuIHtcbiAgICAgICAga2V5OiBzU3RyaW5nLFxuICAgICAgICBjb250ZXh0OiB7XG4gICAgICAgICAgICBzeXN0ZW1PYmplY3RJZDogc1N0cmluZyxcbiAgICAgICAgICAgIHBhdGg6ICdzYXAvYmMvdWk1X3VpNS91aTIvdXNoZWxsLycgKyBzRW50cnlcbiAgICAgICAgfVxuICAgIH07XG59KSk7XG52YXIgb1dpa2lzID0gW1xuICAgIHtcbiAgICAgICAga2V5OiAnRkNDIEFCQVAgQWxpZ25tZW50JyxcbiAgICAgICAgY29udGV4dDoge1xuICAgICAgICAgICAgc3lzdGVtT2JqZWN0SWQ6ICdVSTIgU3VwcG9ydCBwYWdlJyxcbiAgICAgICAgICAgIHBhdGg6ICcvdW5pZmllZHNoZWxsL2Rpc3BsYXkvRkNDK0FCQVArQWxpZ25tZW50J1xuICAgICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICAgIGtleTogJ1VJMiB0ZXN0IGxpbmtzJyxcbiAgICAgICAgY29udGV4dDoge1xuICAgICAgICAgICAgc3lzdGVtT2JqZWN0SWQ6ICdVSTIgdGVzdCBsaW5rcycsXG4gICAgICAgICAgICBwYXRoOiAnd2lraS9kaXNwbGF5L3VuaWZpZWRzaGVsbC9BZGFwdGlvbit0bytVSTUrUVVuaXQrVGVzdCtSdW5uZXInXG4gICAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgICAga2V5OiAnU3VwcG9ydCBzY2hlZHVsZScsXG4gICAgICAgIGNvbnRleHQ6IHtcbiAgICAgICAgICAgIHN5c3RlbU9iamVjdElkOiAnVElQIENvcmUgVUkgSW50ZWdyYXRpb24gc3VwcG9ydCcsXG4gICAgICAgICAgICBwYXRoOiAnd2lraS9kaXNwbGF5L1RJUENvcmVVSUkvU3VwcG9ydCdcbiAgICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgICBrZXk6ICdVSUkgU3VwcG9ydCBzY2hlZHVsZScsXG4gICAgICAgIGNvbnRleHQ6IHtcbiAgICAgICAgICAgIHN5c3RlbU9iamVjdElkOiAnVElQIENvcmUgVUkgSW50ZWdyYXRpb24gc3VwcG9ydCcsXG4gICAgICAgICAgICBwYXRoOiAnd2lraS9kaXNwbGF5L1RJUENvcmVVSUkvU3VwcG9ydCdcbiAgICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgICBrZXk6ICdTdXBwb3J0IHBhZ2UnLFxuICAgICAgICBjb250ZXh0OiB7XG4gICAgICAgICAgICBzeXN0ZW1PYmplY3RJZDogJ0NBLVVJMi1JTlQtRkUgc3VwcG9ydCcsXG4gICAgICAgICAgICBwYXRoOiAnd2lraS9kaXNwbGF5L1VJQ0VJL0NTUytNZXNzYWdlK0Rpc3BhdGNoaW5nKy0rY29tcG9uZW50K0NBLVVJMi1JTlQtRkUnXG4gICAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgICAga2V5OiAnVUkyIFN1cHBvcnQgcGFnZScsXG4gICAgICAgIGNvbnRleHQ6IHtcbiAgICAgICAgICAgIHN5c3RlbU9iamVjdElkOiAnQ0EtVUkyLUlOVC1GRSBzdXBwb3J0JyxcbiAgICAgICAgICAgIHBhdGg6ICd3aWtpL2Rpc3BsYXkvVUlDRUkvQ1NTK01lc3NhZ2UrRGlzcGF0Y2hpbmcrLStjb21wb25lbnQrQ0EtVUkyLUlOVC1GRSdcbiAgICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgICBrZXk6ICdCYWNrZW5kIFNwcmludCBSZXZpZXdzJyxcbiAgICAgICAgY29udGV4dDoge1xuICAgICAgICAgICAgc3lzdGVtT2JqZWN0SWQ6ICdCYWNrZW5kIFNwcmludCBSZXZpZXcnLFxuICAgICAgICAgICAgcGF0aDogJ3dpa2kvZGlzcGxheS9VSUNFSS9UYWN0K092ZXJ2aWV3cydcbiAgICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgICBrZXk6ICdVSTUgcGF0Y2ggc2NoZWR1bGUnLFxuICAgICAgICBjb250ZXh0OiB7XG4gICAgICAgICAgICBzeXN0ZW1PYmplY3RJZDogJ1VJNSBVSTIgUGFjaCBwbGFuJyxcbiAgICAgICAgICAgIHBhdGg6ICd3aWtpL3BhZ2VzL3ZpZXdwYWdlLmFjdGlvbj9wYWdlSWQ9MTY3OTYyMzE1NydcbiAgICAgICAgfVxuICAgIH1cbl07XG5mdW5jdGlvbiBjYWxjRGlzdGFuY2Uoc1RleHQxLCBzVGV4dDIpIHtcbiAgICAvLyBjb25zb2xlLmxvZyhcImxlbmd0aDJcIiArIHNUZXh0MSArIFwiIC0gXCIgKyBzVGV4dDIpXG4gICAgdmFyIGEwID0gZGlzdGFuY2UubGV2ZW5zaHRlaW4oc1RleHQxLnN1YnN0cmluZygwLCBzVGV4dDIubGVuZ3RoKSwgc1RleHQyKTtcbiAgICB2YXIgYSA9IGRpc3RhbmNlLmxldmVuc2h0ZWluKHNUZXh0MS50b0xvd2VyQ2FzZSgpLCBzVGV4dDIpO1xuICAgIHJldHVybiBhMCAqIDUwMCAvIHNUZXh0Mi5sZW5ndGggKyBhO1xufVxuZnVuY3Rpb24gZm5GaW5kTWF0Y2goc0tleXdvcmQsIG9Db250ZXh0LCBvTWFwKSB7XG4gICAgLy8gcmV0dXJuIGEgYmV0dGVyIGNvbnRleHQgaWYgdGhlcmUgaXMgYSBtYXRjaFxuICAgIG9NYXAuc29ydChmdW5jdGlvbiAob0VudHJ5MSwgb0VudHJ5Mikge1xuICAgICAgICB2YXIgdTEgPSBjYWxjRGlzdGFuY2Uob0VudHJ5MS5rZXkudG9Mb3dlckNhc2UoKSwgc0tleXdvcmQpO1xuICAgICAgICB2YXIgdTIgPSBjYWxjRGlzdGFuY2Uob0VudHJ5Mi5rZXkudG9Mb3dlckNhc2UoKSwgc0tleXdvcmQpO1xuICAgICAgICByZXR1cm4gdTEgLSB1MjtcbiAgICB9KTtcbiAgICAvLyBsYXRlcjogaW4gY2FzZSBvZiBjb25mbGljdHMsIGFzayxcbiAgICAvLyBub3c6XG4gICAgdmFyIGRpc3QgPSBjYWxjRGlzdGFuY2Uob01hcFswXS5rZXkudG9Mb3dlckNhc2UoKSwgc0tleXdvcmQpO1xuICAgIGRlYnVnbG9nKCdiZXN0IGRpc3QnICsgZGlzdCArICcgLyAgJyArIGRpc3QgKiBzS2V5d29yZC5sZW5ndGggKyAnICcgKyBzS2V5d29yZCk7XG4gICAgaWYgKGRpc3QgPCAxNTApIHtcbiAgICAgICAgdmFyIG8xID0gT2JqZWN0LmFzc2lnbih7fSwgb0NvbnRleHQpO1xuICAgICAgICB2YXIgbzI7XG4gICAgICAgIG8xLmNvbnRleHQgPSBPYmplY3QuYXNzaWduKHt9LCBvMS5jb250ZXh0KTtcbiAgICAgICAgbzIgPSBvMTtcbiAgICAgICAgbzIuY29udGV4dCA9IE9iamVjdC5hc3NpZ24obzEuY29udGV4dCwgb01hcFswXS5jb250ZXh0KTtcbiAgICAgICAgcmV0dXJuIG8yO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbi8qKlxuICogYSBmdW5jdGlvbiB0byBtYXRjaCBhIHVuaXQgdGVzdCB1c2luZyBsZXZlbnNodGVpbiBkaXN0YW5jZXNcbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gZm5GaW5kVW5pdFRlc3Qoc3N5c3RlbU9iamVjdElkLCBvQ29udGV4dCkge1xuICAgIHJldHVybiBmbkZpbmRNYXRjaChzc3lzdGVtT2JqZWN0SWQsIG9Db250ZXh0LCBvVW5pdFRlc3RzKTtcbn1cbmZ1bmN0aW9uIGZuRmluZFdpa2koc0tleXdvcmQsIG9Db250ZXh0KSB7XG4gICAgcmV0dXJuIGZuRmluZE1hdGNoKHNLZXl3b3JkLCBvQ29udGV4dCwgb1dpa2lzKTtcbn1cbnZhciBhU2hvd0VudGl0eUFjdGlvbnMgPSBbXG4gICAge1xuICAgICAgICBjb250ZXh0OiB7XG4gICAgICAgICAgICBzeXN0ZW1JZDogJ3V2MicsXG4gICAgICAgICAgICBjbGllbnQ6IC9eXFxkezMsM30kLyxcbiAgICAgICAgICAgIHN5c3RlbXR5cGU6ICdBQkFQRkVTJyxcbiAgICAgICAgICAgIHN5c3RlbU9iamVjdElkOiAnZmxwJ1xuICAgICAgICB9LFxuICAgICAgICByZXN1bHQ6IHtcbiAgICAgICAgICAgIHR5cGU6ICdVUkwnLFxuICAgICAgICAgICAgcGF0dGVybjogJ2h0dHBzOi8vbGRjaXV2Mi53ZGYuc2FwLmNvcnA6NDQzNTUvc2FwL2JjL3VpNV91aTUvdWkyL3VzaGVsbC9zaGVsbHMvYWJhcC9GaW9yaUxhdW5jaHBhZC5odG1sP3NhcC1jbGllbnQ9e2NsaWVudH0nXG4gICAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgY29udGV4dDoge1xuICAgICAgICAgICAgc3lzdGVtSWQ6ICd1djInLFxuICAgICAgICAgICAgY2xpZW50OiAvXlxcZHszLDN9JC8sXG4gICAgICAgICAgICBzeXN0ZW10eXBlOiAnQUJBUEZFUycsXG4gICAgICAgICAgICBzeXN0ZW1PYmplY3RJZDogJ2ZscGQnXG4gICAgICAgIH0sXG4gICAgICAgIHJlc3VsdDoge1xuICAgICAgICAgICAgdHlwZTogJ1VSTCcsXG4gICAgICAgICAgICBwYXR0ZXJuOiAnaHR0cHM6Ly9sZGNpdXYyLndkZi5zYXAuY29ycDo0NDM1NS9zYXAvYmMvdWk1X3VpNS9zYXAvYXJzcnZjX3VwYl9hZG1uL21haW4uaHRtbD9zYXAtY2xpZW50PXtjbGllbnR9J1xuICAgICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICAgIGNvbnRleHQ6IHtcbiAgICAgICAgICAgIHN5c3RlbUlkOiAndTF5JyxcbiAgICAgICAgICAgIGNsaWVudDogL15cXGR7MywzfSQvLFxuICAgICAgICAgICAgc3lzdGVtdHlwZTogJ0FCQVBGRVMnLFxuICAgICAgICAgICAgc3lzdGVtT2JqZWN0SWQ6ICdmbHAnXG4gICAgICAgIH0sXG4gICAgICAgIHJlc3VsdDoge1xuICAgICAgICAgICAgdHlwZTogJ1VSTCcsXG4gICAgICAgICAgICBwYXR0ZXJuOiAnaHR0cHM6Ly9sZGNpdTF5LndkZi5zYXAuY29ycDo0NDM1NS9zYXAvYmMvdWk1X3VpNS91aTIvdXNoZWxsL3NoZWxscy9hYmFwL0Zpb3JpTGF1bmNocGFkLmh0bWw/c2FwLWNsaWVudD17Y2xpZW50fSdcbiAgICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgICBjb250ZXh0OiB7XG4gICAgICAgICAgICBzeXN0ZW1JZDogJ3UxeScsXG4gICAgICAgICAgICBjbGllbnQ6IC9eXFxkezMsM30kLyxcbiAgICAgICAgICAgIHN5c3RlbXR5cGU6ICdBQkFQRkVTJyxcbiAgICAgICAgICAgIHN5c3RlbU9iamVjdElkOiAnZmxwZCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVzdWx0OiB7XG4gICAgICAgICAgICB0eXBlOiAnVVJMJyxcbiAgICAgICAgICAgIHBhdHRlcm46ICdodHRwczovL2xkY2l1MXkud2RmLnNhcC5jb3JwOjQ0MzU1L3NhcC9iYy91aTVfdWk1L3NhcC9hcnNydmNfdXBiX2FkbW4vbWFpbi5odG1sP3NhcC1jbGllbnQ9e2NsaWVudH0nXG4gICAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgY29udGV4dDoge1xuICAgICAgICAgICAgc3lzdGVtSWQ6ICd1djInLFxuICAgICAgICAgICAgY2xpZW50OiAnMTIwJyxcbiAgICAgICAgICAgIHN5c3RlbU9iamVjdENhdGVnb3J5OiAnY2F0YWxvZycsXG4gICAgICAgICAgICBzeXN0ZW1PYmplY3RJZDogLy4qLyxcbiAgICAgICAgICAgIHN5c3RlbXR5cGU6ICdBQkFQRkVTJyxcbiAgICAgICAgICAgIHRvb2w6ICdGTFBEJ1xuICAgICAgICB9LFxuICAgICAgICByZXN1bHQ6IHtcbiAgICAgICAgICAgIHR5cGU6ICdVUkwnLFxuICAgICAgICAgICAgcGF0dGVybjogJ2h0dHBzOi8vbGRjaXV2Mi53ZGYuc2FwLmNvcnA6NDQzNTUvc2FwL2JjL3VpNV91aTUvc2FwL2Fyc3J2Y191cGJfYWRtbi9tYWluLmh0bWw/c2FwLWNsaWVudD17Y2xpZW50fSNDQVRBTE9HOntzeXN0ZW1PYmplY3RJZH0nXG4gICAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgY29udGV4dDoge1xuICAgICAgICAgICAgc3lzdGVtT2JqZWN0Q2F0ZWdvcnk6ICd1bml0JyxcbiAgICAgICAgICAgIHN5c3RlbU9iamVjdElkOiBmbkZpbmRVbml0VGVzdFxuICAgICAgICB9LFxuICAgICAgICByZXN1bHQ6IHtcbiAgICAgICAgICAgIHR5cGU6ICdVUkwnLFxuICAgICAgICAgICAgcGF0dGVybjogJ2h0dHA6Ly9sb2NhbGhvc3Q6ODA4MC97cGF0aH0nXG4gICAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgY29udGV4dDoge1xuICAgICAgICAgICAgc3lzdGVtT2JqZWN0Q2F0ZWdvcnk6ICd3aWtpJyxcbiAgICAgICAgICAgIHN5c3RlbU9iamVjdElkOiBmbkZpbmRXaWtpXG4gICAgICAgIH0sXG4gICAgICAgIHJlc3VsdDoge1xuICAgICAgICAgICAgdHlwZTogJ1VSTCcsXG4gICAgICAgICAgICBwYXR0ZXJuOiAnaHR0cHM6Ly93aWtpLndkZi5zYXAuY29ycC97cGF0aH0nXG4gICAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgY29udGV4dDoge1xuICAgICAgICAgICAgc3lzdGVtSWQ6ICdKSVJBJ1xuICAgICAgICB9LFxuICAgICAgICByZXN1bHQ6IHtcbiAgICAgICAgICAgIHR5cGU6ICdVUkwnLFxuICAgICAgICAgICAgcGF0dGVybjogJ2h0dHBzOi8vamlyYS53ZGYuc2FwLmNvcnA6ODA4MC9USVBDT1JFVUlJSSdcbiAgICAgICAgfVxuICAgIH1cbl07XG4vLyBpZiBUT09MID0gSklSQSB8fCBTeXN0ZW1JZCA9IEpJUkEgLT4gU3lzdGVtSWQgPSBKSVJBXG4vL1xuLy9cbmZ1bmN0aW9uIHN0YXJ0QnJvd3Nlcih1cmwpIHtcbiAgICB2YXIgY21kID0gJ1wiJVByb2dyYW1GaWxlcyh4ODYpJVxcXFxHb29nbGVcXFxcQ2hyb21lXFxcXEFwcGxpY2F0aW9uXFxcXGNocm9tZS5leGVcIiAtLWluY29nbml0byAtdXJsIFwiJyArIHVybCArICdcIic7XG4gICAgY2hpbGRfcHJvY2Vzc18xLmV4ZWMoY21kLCBmdW5jdGlvbiAoZXJyb3IsIHN0ZG91dCwgc3RkZXJyKSB7XG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgZXhlYyBlcnJvcjogJHtlcnJvcn1gKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBkZWJ1Z2xvZyhgc3Rkb3V0OiAke3N0ZG91dH1gKTtcbiAgICAgICAgZGVidWdsb2coYHN0ZGVycjogJHtzdGRlcnJ9YCk7XG4gICAgfSk7XG59XG4vLyBzdGFydFNBUEdVSVxuLy8gICBOOlxcPlwiYzpcXFByb2dyYW0gRmlsZXMgKHg4NilcXFNBUFxcRnJvbnRFbmRcXFNBUGd1aVwiXFxzYXBzaGN1dC5leGUgIC1zeXN0ZW09VVYyIC1jbGllbnQ9MTIwIC1jb21tYW5kPVNFMzggLXR5cGU9VHJhbnNhY3Rpb24gLXVzZXI9QVVTRVJcbmZ1bmN0aW9uIGV4cGFuZFBhcmFtZXRlcnNJblVSTChvTWVyZ2VkQ29udGV4dFJlc3VsdCkge1xuICAgIHZhciBwdG4gPSBvTWVyZ2VkQ29udGV4dFJlc3VsdC5yZXN1bHQucGF0dGVybjtcbiAgICBPYmplY3Qua2V5cyhvTWVyZ2VkQ29udGV4dFJlc3VsdC5jb250ZXh0KS5mb3JFYWNoKGZ1bmN0aW9uIChzS2V5KSB7XG4gICAgICAgIHZhciByZWdleCA9IG5ldyBSZWdFeHAoJ3snICsgc0tleSArICd9JywgJ2cnKTtcbiAgICAgICAgcHRuID0gcHRuLnJlcGxhY2UocmVnZXgsIG9NZXJnZWRDb250ZXh0UmVzdWx0LmNvbnRleHRbc0tleV0pO1xuICAgICAgICBwdG4gPSBwdG4ucmVwbGFjZShyZWdleCwgb01lcmdlZENvbnRleHRSZXN1bHQuY29udGV4dFtzS2V5XSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHB0bjtcbn1cbmZ1bmN0aW9uIGV4ZWN1dGVTdGFydHVwKG9NZXJnZWRDb250ZXh0UmVzdWx0KSB7XG4gICAgaWYgKG9NZXJnZWRDb250ZXh0UmVzdWx0LnJlc3VsdC50eXBlID09PSAnVVJMJykge1xuICAgICAgICB2YXIgcHRuID0gZXhwYW5kUGFyYW1ldGVyc0luVVJMKG9NZXJnZWRDb250ZXh0UmVzdWx0KTtcbiAgICAgICAgc3RhcnRCcm93c2VyKHB0bik7XG4gICAgICAgIHJldHVybiBwdG47XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YXIgcyA9IChcIkRvbid0IGtub3cgaG93IHRvIHN0YXJ0IFwiICsgb01lcmdlZENvbnRleHRSZXN1bHQucmVzdWx0LnR5cGUgKyAnXFxuIGZvciBcIicgKyBvTWVyZ2VkQ29udGV4dFJlc3VsdC5xdWVyeSArICdcIicpO1xuICAgICAgICBkZWJ1Z2xvZyhzKTtcbiAgICAgICAgcmV0dXJuIHM7XG4gICAgfVxufVxuZnVuY3Rpb24gbnJNYXRjaGVzKGFPYmplY3QsIG9Db250ZXh0KSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKGFPYmplY3QpLnJlZHVjZShmdW5jdGlvbiAocHJldiwga2V5KSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob0NvbnRleHQsIGtleSkpIHtcbiAgICAgICAgICAgIHByZXYgPSBwcmV2ICsgMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcHJldjtcbiAgICB9LCAwKTtcbn1cbmZ1bmN0aW9uIG5yTm9NYXRjaGVzKGFPYmplY3QsIG9Db250ZXh0KSB7XG4gICAgdmFyIG5vTWF0Y2hBID0gT2JqZWN0LmtleXMoYU9iamVjdCkucmVkdWNlKGZ1bmN0aW9uIChwcmV2LCBrZXkpIHtcbiAgICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob0NvbnRleHQsIGtleSkpIHtcbiAgICAgICAgICAgIHByZXYgPSBwcmV2ICsgMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcHJldjtcbiAgICB9LCAwKTtcbiAgICB2YXIgbm9NYXRjaEIgPSBPYmplY3Qua2V5cyhvQ29udGV4dCkucmVkdWNlKGZ1bmN0aW9uIChwcmV2LCBrZXkpIHtcbiAgICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYU9iamVjdCwga2V5KSkge1xuICAgICAgICAgICAgcHJldiA9IHByZXYgKyAxO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwcmV2O1xuICAgIH0sIDApO1xuICAgIHJldHVybiBub01hdGNoQSArIG5vTWF0Y2hCO1xufVxuZnVuY3Rpb24gc2FtZU9yU3RhcihzMSwgczIsIG9FbnRpdHkpIHtcbiAgICByZXR1cm4gczEgPT09IHMyIHx8XG4gICAgICAgIChzMSA9PT0gdW5kZWZpbmVkICYmIHMyID09PSBudWxsKSB8fFxuICAgICAgICAoKHMyIGluc3RhbmNlb2YgUmVnRXhwKSAmJiBzMi5leGVjKHMxKSAhPT0gbnVsbCkgfHxcbiAgICAgICAgKCh0eXBlb2YgczIgPT09ICdmdW5jdGlvbicgJiYgczEpICYmIHMyKHMxLCBvRW50aXR5KSk7XG59XG5mdW5jdGlvbiBzYW1lT3JTdGFyRW1wdHkoczEsIHMyLCBvRW50aXR5KSB7XG4gICAgaWYgKHMxID09PSB1bmRlZmluZWQgJiYgczIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHMyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBzMSA9PT0gczIgfHxcbiAgICAgICAgKChzMiBpbnN0YW5jZW9mIFJlZ0V4cCkgJiYgczIuZXhlYyhzMSkgIT09IG51bGwpIHx8XG4gICAgICAgICgodHlwZW9mIHMyID09PSAnZnVuY3Rpb24nICYmIHMxKSAmJiBzMihzMSwgb0VudGl0eSkpO1xufVxuZnVuY3Rpb24gZmlsdGVyU2hvd0VudGl0eShvQ29udGV4dCwgYVNob3dFbnRpdHkpIHtcbiAgICB2YXIgYUZpbHRlcmVkO1xuICAgIE9iamVjdC5rZXlzKG9Db250ZXh0KS5mb3JFYWNoKGZ1bmN0aW9uIChzS2V5KSB7XG4gICAgICAgIGlmIChvQ29udGV4dFtzS2V5XSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgb0NvbnRleHRbc0tleV0gPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBhRmlsdGVyZWQgPSBhU2hvd0VudGl0eS5maWx0ZXIoZnVuY3Rpb24gKG9TaG93RW50aXR5KSB7XG4gICAgICAgIC8vICAgICAgIGNvbnNvbGUubG9nKFwiLi4uXCIpXG4gICAgICAgIC8vICAgICAgY29uc29sZS5sb2cob1Nob3dFbnRpdHkuY29udGV4dC50b29sICsgXCIgXCIgKyBvQ29udGV4dC50b29sICsgXCJcXG5cIilcbiAgICAgICAgLy8gICAgICBjb25zb2xlLmxvZyhvU2hvd0VudGl0eS5jb250ZXh0LmNsaWVudCArIFwiIFwiICsgb0NvbnRleHQuY2xpZW50ICtcIjpcIiArIHNhbWVPclN0YXIob0NvbnRleHQuY2xpZW50LG9TaG93RW50aXR5LmNvbnRleHQuY2xpZW50KSArIFwiXFxuXCIpXG4gICAgICAgIC8vICBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShvU2hvd0VudGl0eS5jb250ZXh0KSArIFwiXFxuXCIgKyBKU09OLnN0cmluZ2lmeShvQ29udGV4dC5jbGllbnQpICsgXCJcXG5cIilcbiAgICAgICAgcmV0dXJuIHNhbWVPclN0YXIob1Nob3dFbnRpdHkuY29udGV4dC5zeXN0ZW1JZCwgb0NvbnRleHQuc3lzdGVtSWQsIG9Db250ZXh0KSAmJlxuICAgICAgICAgICAgc2FtZU9yU3RhcihvQ29udGV4dC50b29sLCBvU2hvd0VudGl0eS5jb250ZXh0LnRvb2wsIG9Db250ZXh0KSAmJlxuICAgICAgICAgICAgc2FtZU9yU3RhcihvQ29udGV4dC5jbGllbnQsIG9TaG93RW50aXR5LmNvbnRleHQuY2xpZW50LCBvQ29udGV4dCkgJiZcbiAgICAgICAgICAgIHNhbWVPclN0YXJFbXB0eShvQ29udGV4dC5zeXN0ZW1PYmplY3RDYXRlZ29yeSwgb1Nob3dFbnRpdHkuY29udGV4dC5zeXN0ZW1PYmplY3RDYXRlZ29yeSwgb0NvbnRleHQpICYmXG4gICAgICAgICAgICBzYW1lT3JTdGFyRW1wdHkob0NvbnRleHQuc3lzdGVtT2JqZWN0SWQsIG9TaG93RW50aXR5LmNvbnRleHQuc3lzdGVtT2JqZWN0SWQsIG9Db250ZXh0KTtcbiAgICAgICAgLy8gICAgICAmJiBvU2hvd0VudGl0eS5jb250ZXh0LnRvb2wgPT09IG9Db250ZXh0LnRvb2xcbiAgICB9KTtcbiAgICAvLyAgY29uc29sZS5sb2coYUZpbHRlcmVkLmxlbmd0aClcbiAgICAvLyBtYXRjaCBvdGhlciBjb250ZXh0IHBhcmFtZXRlcnNcbiAgICBhRmlsdGVyZWQuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICB2YXIgbnJNYXRjaGVzQSA9IG5yTWF0Y2hlcyhhLmNvbnRleHQsIG9Db250ZXh0KTtcbiAgICAgICAgdmFyIG5yTWF0Y2hlc0IgPSBuck1hdGNoZXMoYi5jb250ZXh0LCBvQ29udGV4dCk7XG4gICAgICAgIHZhciBuck5vTWF0Y2hlc0EgPSBuck5vTWF0Y2hlcyhhLmNvbnRleHQsIG9Db250ZXh0KTtcbiAgICAgICAgdmFyIG5yTm9NYXRjaGVzQiA9IG5yTm9NYXRjaGVzKGIuY29udGV4dCwgb0NvbnRleHQpO1xuICAgICAgICAvLyAgIGNvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KGEuY29udGV4dCkpXG4gICAgICAgIC8vICAgY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkoYi5jb250ZXh0KSlcbiAgICAgICAgLy8gICBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShvQ29udGV4dCkpXG4gICAgICAgIHZhciByZXMgPSAtKG5yTWF0Y2hlc0EgLSBuck1hdGNoZXNCKSAqIDEwMCArIChuck5vTWF0Y2hlc0EgLSBuck5vTWF0Y2hlc0IpO1xuICAgICAgICAvLyAgICAgY29uc29sZS5sb2coXCJkaWZmIFwiICsgcmVzKVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH0pO1xuICAgIGlmIChhRmlsdGVyZWQubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGRlYnVnbG9nKCdubyB0YXJnZXQgZm9yIHNob3dFbnRpdHkgJyArIEpTT04uc3RyaW5naWZ5KG9Db250ZXh0KSk7XG4gICAgfVxuICAgIC8vIGNvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KGFGaWx0ZXJlZCx1bmRlZmluZWQsMikpXG4gICAgaWYgKGFGaWx0ZXJlZFswXSkge1xuICAgICAgICAvLyBleGVjdXRlIGFsbCBmdW5jdGlvbnNcbiAgICAgICAgdmFyIG9NYXRjaCA9IGFGaWx0ZXJlZFswXTtcbiAgICAgICAgdmFyIG9NZXJnZWQgPSB7XG4gICAgICAgICAgICBjb250ZXh0OiB7fVxuICAgICAgICB9O1xuICAgICAgICBvTWVyZ2VkLmNvbnRleHQgPSBPYmplY3QuYXNzaWduKHt9LCBvTWVyZ2VkLmNvbnRleHQsIGFGaWx0ZXJlZFswXS5jb250ZXh0LCBvQ29udGV4dCk7XG4gICAgICAgIG9NZXJnZWQgPSBPYmplY3QuYXNzaWduKG9NZXJnZWQsIHtcbiAgICAgICAgICAgIHJlc3VsdDogYUZpbHRlcmVkWzBdLnJlc3VsdFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmtleXMob01hdGNoLmNvbnRleHQpLmZvckVhY2goZnVuY3Rpb24gKHNLZXkpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb01hdGNoLmNvbnRleHRbc0tleV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBkZWJ1Z2xvZygnTm93IHJldHJvZml0dGluZyA6JyArIHNLZXkgKyAnIC0gJyArIG9Db250ZXh0W3NLZXldKTtcbiAgICAgICAgICAgICAgICBvTWVyZ2VkID0gb01hdGNoLmNvbnRleHRbc0tleV0ob0NvbnRleHRbc0tleV0sIG9NZXJnZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG9NZXJnZWQ7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gZXhlY1Nob3dFbnRpdHkob0VudGl0eSkge1xuICAgIHZhciBtZXJnZWQgPSBmaWx0ZXJTaG93RW50aXR5KG9FbnRpdHksIGFTaG93RW50aXR5QWN0aW9ucyk7XG4gICAgaWYgKG1lcmdlZCkge1xuICAgICAgICByZXR1cm4gZXhlY3V0ZVN0YXJ0dXAobWVyZ2VkKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG4vLyBFOlxccHJvamVjdHNcXG5vZGVqc1xcYm90YnVpbGRlclxcc2FtcGxlYm90PlwiJVByb2dyYW1GaWxlcyh4ODYpJVxcR29vZ2xlXFxDaHJvbWVcXEFwcGxpY2F0aW9uXFxjaHJvbWUuZXhlXCIgLS1pbmNvZ25pdG8gLXVybCB3d3cuc3BpZWdlbC5kZVxuZXhwb3J0cy5kaXNwYXRjaGVyID0ge1xuICAgIGV4ZWNTaG93RW50aXR5OiBleGVjU2hvd0VudGl0eSxcbiAgICBfdGVzdDoge1xuICAgICAgICBzYW1lT3JTdGFyOiBzYW1lT3JTdGFyLFxuICAgICAgICBuck1hdGNoZXM6IG5yTWF0Y2hlcyxcbiAgICAgICAgbnJOb01hdGNoZXM6IG5yTm9NYXRjaGVzLFxuICAgICAgICBleHBhbmRQYXJhbWV0ZXJzSW5VUkw6IGV4cGFuZFBhcmFtZXRlcnNJblVSTCxcbiAgICAgICAgZmlsdGVyU2hvd0VudGl0eTogZmlsdGVyU2hvd0VudGl0eSxcbiAgICAgICAgZm5GaW5kVW5pdFRlc3Q6IGZuRmluZFVuaXRUZXN0LFxuICAgICAgICBjYWxjRGlzdGFuY2U6IGNhbGNEaXN0YW5jZSxcbiAgICAgICAgX2FTaG93RW50aXR5QWN0aW9uczogYVNob3dFbnRpdHlBY3Rpb25zXG4gICAgfVxufTtcbi8vZXhwb3J0cyBkaXNwYXRjaGVyO1xuLy9tb2R1bGUuZXhwb3J0cyA9IGRpc3BhdGNoZXJcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
