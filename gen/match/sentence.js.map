{"version":3,"sources":["/projects/nodejs/botbuilder/fdevstart/src/../src/match/sentence.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;GAUG;;AAUH,wCAAwC;AAExC,4BAAmC,SAAS,EAAE,SAAkB;IAC7D,IAAI,GAAG,GAAG,EAA4C,CAAC;IACtD,SAAS,CAAC,KAAK,CAAC,UAAS,KAAK,EAAE,MAAM;QACpC,EAAE,CAAA,CAAC,KAAK,CAAC,QAAQ,KAAK,SAAS,CAAC,CAAC,CAAC;YAChC,GAAG,GAAG,EAAE,IAAI,EAAE,KAAK;gBACX,KAAK,EAAG,MAAM,EAAE,CAAC;YACzB,MAAM,CAAC,KAAK,CAAC;QACf,CAAC;QACD,MAAM,CAAC,IAAI,CAAC;IACd,CAAC,CAAC,CAAA;IACF,MAAM,CAAC,GAAG,CAAC;AACf,CAAC;AAXe,0BAAkB,qBAWjC,CAAA;AAED,wBAA+B,SAA2B;IACxD,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,UAAS,IAAI,EAAE,KAAK;QAC1C,MAAM,CAAC,IAAI,GAAG,CAAC,KAAK,CAAC,QAAQ,IAAI,GAAG,CAAC,CAAC;IACxC,CAAC,EAAC,GAAG,CAAC,CAAA;AACR,CAAC;AAJe,sBAAc,iBAI7B,CAAA;AAED,2BAAkC,CAAoB,EAAE,CAAoB;IAC1E,MAAM,CAAC,CAAE,CAAC,cAAc,CAAC,CAAC,CAAC,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;AACnD,CAAC;AAFe,yBAAiB,oBAEhC,CAAA","file":"match/sentence.js","sourcesContent":["/**\n * @file sentence\n * @module jfseb.fdevstart.sentence\n * @copyright (c) Gerd Forstmann\n *\n * Match a tool record on a sentence,\n *\n * This will unify matching required and optional category words\n * with the requirements of the tool.\n *\n */\n\n/// <reference path=\"../../lib/node-4.d.ts\" />\n\n// import * as debug from 'debug';\n\n// import * as utils from '../utils/utils';\n\nimport * as IMatch from './ifmatch';\n\n// const debuglog = debug('toolmatcher')\n\nexport function findWordByCategory(oSentence, sCategory : string) : { word : IMatch.IWord, index : number} {\n  \tvar res = {} as { word : IMatch.IWord, index : number};\n    oSentence.every(function(oWord, iIndex) {\n      if(oWord.category === sCategory) {\n        res = { word: oWord,\n                index : iIndex };\n        return false;\n      }\n      return true;\n    })\n    return res;\n}\n\nexport function rankingProduct(oSentence: IMatch.ISentence) : number {\n  return oSentence.reduce(function(prev, oWord) {\n    return prev * (oWord._ranking || 1.0);\n  },1.0)\n}\n\nexport function cmpRankingProduct(a : IMatch.ISentence, b : IMatch.ISentence) {\n  return - (rankingProduct(a) - rankingProduct(b));\n}"],"sourceRoot":"ABC"}