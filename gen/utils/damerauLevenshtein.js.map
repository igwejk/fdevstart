{"version":3,"sources":["/projects/nodejs/botbuilder/fdevstart/src/../src/utils/damerauLevenshtein.ts"],"names":[],"mappings":"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","file":"utils/damerauLevenshtein.js","sourcesContent":["'use strict'\r\n\r\n// based on: http://en.wikibooks.org/wiki/Algorithm_implementation/Strings/Levenshtein_distance\r\n// and:  http://en.wikipedia.org/wiki/Damerau%E2%80%93Levenshtein_distance\r\n\r\n\r\n/**\r\n * Distance of strings algorithm\r\n * @module fsdevstart.utils.damerauLevenshtein\r\n */\r\n\r\n/**\r\n * a function calculating distance between two strings\r\n * according to the damerau Levenshtein algorithm\r\n * (this algorithm, in contrast to plain levenshtein treats\r\n * swapping of characters a distance 1  \"word\"  <-> \"wrod )\r\n * @param {string} a\r\n * @param {string} b\r\n * @public\r\n */\r\nexport function levenshteinDamerau (a : string, b : string) {\r\n  var i : number\r\n  var j : number\r\n  var cost : number\r\n  var d = []\r\n  if (a.length === 0) {\r\n    return b.length\r\n  }\r\n  if (b.length === 0) {\r\n    return a.length\r\n  }\r\n  for (i = 0; i <= a.length; i++) {\r\n    d[ i ] = []\r\n    d[ i ][ 0 ] = i\r\n  }\r\n  for (j = 0; j <= b.length; j++) {\r\n    d[ 0 ][ j ] = j\r\n  }\r\n  for (i = 1; i <= a.length; i++) {\r\n    for (j = 1; j <= b.length; j++) {\r\n      if (a.charAt(i - 1) === b.charAt(j - 1)) {\r\n        cost = 0\r\n      } else {\r\n        cost = 1\r\n      }\r\n\r\n      d[ i ][ j ] = Math.min(d[ i - 1 ][ j ] + 1, d[ i ][ j - 1 ] + 1, d[ i - 1 ][ j - 1 ] + cost)\r\n\r\n      if (\r\n\r\n        i > 1 &&\r\n\r\n        j > 1 &&\r\n\r\n        a.charAt(i - 1) === b.charAt(j - 2) &&\r\n\r\n        a.charAt(i - 2) === b.charAt(j - 1)\r\n\r\n      ) {\r\n        d[i][j] = Math.min(\r\n\r\n          d[i][j],\r\n\r\n          d[i - 2][j - 2] + cost\r\n\r\n        )\r\n      }\r\n    }\r\n  }\r\n\r\n  return d[ a.length ][ b.length ]\r\n}\r\n\r\n\r\nexport function levenshtein (a : string, b : string) {\r\n  //return sift4(a,b,5,5 + b.length / 2);\r\n  return levenshteinDamerau(a,b);\r\n}\r\n//  Sift4 - common version\r\n// https://siderite.blogspot.com/2014/11/super-fast-and-accurate-string-distance.html\r\n// online algorithm to compute the distance between two strings in O(n)\r\n// maxOffset is the number of characters to search for matching letters\r\n// maxDistance is the distance at which the algorithm should stop computing the value and just exit (the strings are too different anyway)\r\nexport function sift4(s1, s2, maxOffset, maxDistance) {\r\n    if (!s1||!s1.length) {\r\n        if (!s2) {\r\n            return 0;\r\n        }\r\n        return s2.length;\r\n    }\r\n\r\n    if (!s2||!s2.length) {\r\n        return s1.length;\r\n    }\r\n\r\n    var l1=s1.length;\r\n    var l2=s2.length;\r\n    if(Math.abs(l1 - l2) > maxDistance) {\r\n      return 500;\r\n    }\r\n\r\n    var c1 = 0;  //cursor for string 1\r\n    var c2 = 0;  //cursor for string 2\r\n    var lcss = 0;  //largest common subsequence\r\n    var local_cs = 0; //local common substring\r\n    var trans = 0;  //number of transpositions ('ab' vs 'ba')\r\n    var offset_arr=[];  //offset pair array, for computing the transpositions\r\n\r\n    while ((c1 < l1) && (c2 < l2)) {\r\n        if (s1.charAt(c1) == s2.charAt(c2)) {\r\n            local_cs++;\r\n            var isTrans=false;\r\n            //see if current match is a transposition\r\n            var i=0;\r\n            while (i<offset_arr.length) {\r\n                var ofs=offset_arr[i];\r\n                if (c1<=ofs.c1 || c2 <= ofs.c2) {\r\n                    // when two matches cross, the one considered a transposition is the one with the largest difference in offsets\r\n                    isTrans=Math.abs(c2-c1)>=Math.abs(ofs.c2-ofs.c1);\r\n                    if (isTrans)\r\n                    {\r\n                        trans++;\r\n                    } else\r\n                    {\r\n                        if (!ofs.trans) {\r\n                            ofs.trans=true;\r\n                            trans++;\r\n                        }\r\n                    }\r\n                    break;\r\n                } else {\r\n                    if (c1>ofs.c2 && c2>ofs.c1) {\r\n                        offset_arr.splice(i,1);\r\n                    } else {\r\n                        i++;\r\n                    }\r\n                }\r\n            }\r\n            offset_arr.push({\r\n                c1:c1,\r\n                c2:c2,\r\n                trans:isTrans\r\n            });\r\n        } else {\r\n            lcss+=local_cs;\r\n            local_cs=0;\r\n            if (c1!=c2) {\r\n                c1=c2=Math.min(c1,c2);  //using min allows the computation of transpositions\r\n            }\r\n            //if matching characters are found, remove 1 from both cursors (they get incremented at the end of the loop)\r\n            //so that we can have only one code block handling matches\r\n            for (var i = 0; i < maxOffset && (c1+i<l1 || c2+i<l2); i++) {\r\n                if ((c1 + i < l1) && (s1.charAt(c1 + i) == s2.charAt(c2))) {\r\n                    c1+= i-1;\r\n                    c2--;\r\n                    break;\r\n                }\r\n                if ((c2 + i < l2) && (s1.charAt(c1) == s2.charAt(c2 + i))) {\r\n                    c1--;\r\n                    c2+= i-1;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        c1++;\r\n        c2++;\r\n        if (maxDistance)\r\n        {\r\n            var temporaryDistance=Math.max(c1,c2)-lcss+trans;\r\n            if (temporaryDistance>=maxDistance) return 500; // Math.round(temporaryDistance);\r\n        }\r\n        // this covers the case where the last match is on the last token in list, so that it can compute transpositions correctly\r\n        if ((c1 >= l1) || (c2 >= l2)) {\r\n            lcss+=local_cs;\r\n            local_cs=0;\r\n            c1=c2=Math.min(c1,c2);\r\n        }\r\n    }\r\n    lcss+=local_cs;\r\n    return Math.round(Math.max(l1,l2)- lcss +trans); //add the cost of transpositions to the final result\r\n}\r\n"],"sourceRoot":"ABC"}