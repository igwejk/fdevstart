/**
 * Functionality to execute a certain response on the server,
 * interpreting a general model context
 *
 *
 * via a) commandline (e.g. browser startup)
 * @file
 * @copyright (c) 2016 Gerd Forstmann
 */
"use strict";

var debug = require("debug");
var debuglog = debug('exectemplate');
function expandTemplate(context, template) {
    var pattern = template;
    Object.keys(context).forEach(function (sKey) {
        var regex = new RegExp('{' + sKey + '}', 'g');
        pattern = pattern.replace(regex, context[sKey]);
        pattern = pattern.replace(regex, context[sKey]);
    });
    return pattern;
}
exports.expandTemplate = expandTemplate;
function extractReplacementKeys(stemplate) {
    var regex = new RegExp('{([^}]+)}', "g");
    var keys = {};
    var m;
    while (m = regex.exec(stemplate)) {
        var pattern = m[1];
        keys[pattern] = 1;
    }
    return Object.keys(keys).sort();
}
exports.extractReplacementKeys = extractReplacementKeys;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9leGVjL2V4ZWN0ZW1wbGF0ZS50cyIsImV4ZWMvZXhlY3RlbXBsYXRlLmpzIl0sIm5hbWVzIjpbImRlYnVnIiwicmVxdWlyZSIsImRlYnVnbG9nIiwiZXhwYW5kVGVtcGxhdGUiLCJjb250ZXh0IiwidGVtcGxhdGUiLCJwYXR0ZXJuIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJzS2V5IiwicmVnZXgiLCJSZWdFeHAiLCJyZXBsYWNlIiwiZXhwb3J0cyIsImV4dHJhY3RSZXBsYWNlbWVudEtleXMiLCJzdGVtcGxhdGUiLCJtIiwiZXhlYyIsInNvcnQiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7QUNTQTs7QURHQSxJQUFBQSxRQUFBQyxRQUFBLE9BQUEsQ0FBQTtBQUlBLElBQU1DLFdBQVdGLE1BQU0sY0FBTixDQUFqQjtBQVFBLFNBQUFHLGNBQUEsQ0FBK0JDLE9BQS9CLEVBQXFFQyxRQUFyRSxFQUFzRjtBQUNwRixRQUFJQyxVQUFVRCxRQUFkO0FBQ0FFLFdBQU9DLElBQVAsQ0FBWUosT0FBWixFQUFxQkssT0FBckIsQ0FBNkIsVUFBVUMsSUFBVixFQUFjO0FBQ3pDLFlBQUlDLFFBQVEsSUFBSUMsTUFBSixDQUFXLE1BQU1GLElBQU4sR0FBYSxHQUF4QixFQUE2QixHQUE3QixDQUFaO0FBQ0FKLGtCQUFVQSxRQUFRTyxPQUFSLENBQWdCRixLQUFoQixFQUF1QlAsUUFBUU0sSUFBUixDQUF2QixDQUFWO0FBQ0FKLGtCQUFVQSxRQUFRTyxPQUFSLENBQWdCRixLQUFoQixFQUF1QlAsUUFBUU0sSUFBUixDQUF2QixDQUFWO0FBQ0QsS0FKRDtBQUtBLFdBQU9KLE9BQVA7QUFDRDtBQVJEUSxRQUFBWCxjQUFBLEdBQUFBLGNBQUE7QUFVQSxTQUFBWSxzQkFBQSxDQUF1Q0MsU0FBdkMsRUFBeUQ7QUFDdkQsUUFBSUwsUUFBUSxJQUFJQyxNQUFKLENBQVcsV0FBWCxFQUF3QixHQUF4QixDQUFaO0FBQ0EsUUFBSUosT0FBTyxFQUFYO0FBQ0EsUUFBSVMsQ0FBSjtBQUNBLFdBQU1BLElBQUlOLE1BQU1PLElBQU4sQ0FBV0YsU0FBWCxDQUFWLEVBQWlDO0FBQy9CLFlBQUlWLFVBQVVXLEVBQUUsQ0FBRixDQUFkO0FBQ0FULGFBQUtGLE9BQUwsSUFBZ0IsQ0FBaEI7QUFDRDtBQUNELFdBQU9DLE9BQU9DLElBQVAsQ0FBWUEsSUFBWixFQUFrQlcsSUFBbEIsRUFBUDtBQUNEO0FBVERMLFFBQUFDLHNCQUFBLEdBQUFBLHNCQUFBIiwiZmlsZSI6ImV4ZWMvZXhlY3RlbXBsYXRlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEZ1bmN0aW9uYWxpdHkgdG8gZXhlY3V0ZSBhIGNlcnRhaW4gcmVzcG9uc2Ugb24gdGhlIHNlcnZlcixcclxuICogaW50ZXJwcmV0aW5nIGEgZ2VuZXJhbCBtb2RlbCBjb250ZXh0XHJcbiAqXHJcbiAqXHJcbiAqIHZpYSBhKSBjb21tYW5kbGluZSAoZS5nLiBicm93c2VyIHN0YXJ0dXApXHJcbiAqIEBmaWxlXHJcbiAqIEBjb3B5cmlnaHQgKGMpIDIwMTYgR2VyZCBGb3JzdG1hbm5cclxuICovXHJcblxyXG5pbXBvcnQgKiBhcyBpbnRmIGZyb20gJ2NvbnN0YW50cyc7XHJcblxyXG5pbXBvcnQgKiBhcyBkZWJ1ZyBmcm9tICdkZWJ1Zyc7XHJcblxyXG5pbXBvcnQgKiAgYXMgSUZNYXRjaCBmcm9tICcuLi9tYXRjaC9pZm1hdGNoJztcclxuXHJcbmNvbnN0IGRlYnVnbG9nID0gZGVidWcoJ2V4ZWN0ZW1wbGF0ZScpXHJcblxyXG5pbXBvcnQgeyBleGVjIH0gZnJvbSAnY2hpbGRfcHJvY2Vzcyc7XHJcblxyXG5pbXBvcnQgKiBhcyBJTWF0Y2ggZnJvbSAnLi4vbWF0Y2gvaWZtYXRjaCc7XHJcbmltcG9ydCAqIGFzIE1hdGNoIGZyb20gJy4uL21hdGNoL21hdGNoJztcclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZXhwYW5kVGVtcGxhdGUoY29udGV4dCA6IHtba2V5IDogc3RyaW5nXSA6IHN0cmluZ30gLCB0ZW1wbGF0ZSA6IHN0cmluZyApIDogc3RyaW5nIHtcclxuICB2YXIgcGF0dGVybiA9IHRlbXBsYXRlO1xyXG4gIE9iamVjdC5rZXlzKGNvbnRleHQpLmZvckVhY2goZnVuY3Rpb24gKHNLZXkpIHtcclxuICAgIHZhciByZWdleCA9IG5ldyBSZWdFeHAoJ3snICsgc0tleSArICd9JywgJ2cnKVxyXG4gICAgcGF0dGVybiA9IHBhdHRlcm4ucmVwbGFjZShyZWdleCwgY29udGV4dFtzS2V5XSlcclxuICAgIHBhdHRlcm4gPSBwYXR0ZXJuLnJlcGxhY2UocmVnZXgsIGNvbnRleHRbc0tleV0pXHJcbiAgfSlcclxuICByZXR1cm4gcGF0dGVybjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGV4dHJhY3RSZXBsYWNlbWVudEtleXMoc3RlbXBsYXRlIDogc3RyaW5nKSA6IHN0cmluZ1tdIHtcclxuICB2YXIgcmVnZXggPSBuZXcgUmVnRXhwKCd7KFtefV0rKX0nLCBcImdcIik7XHJcbiAgdmFyIGtleXMgPSB7fTtcclxuICB2YXIgbTtcclxuICB3aGlsZShtID0gcmVnZXguZXhlYyhzdGVtcGxhdGUpKSB7XHJcbiAgICB2YXIgcGF0dGVybiA9IG1bMV07XHJcbiAgICBrZXlzW3BhdHRlcm5dID0gMTtcclxuICB9XHJcbiAgcmV0dXJuIE9iamVjdC5rZXlzKGtleXMpLnNvcnQoKTtcclxufVxyXG5cclxuXHJcbiIsIi8qKlxuICogRnVuY3Rpb25hbGl0eSB0byBleGVjdXRlIGEgY2VydGFpbiByZXNwb25zZSBvbiB0aGUgc2VydmVyLFxuICogaW50ZXJwcmV0aW5nIGEgZ2VuZXJhbCBtb2RlbCBjb250ZXh0XG4gKlxuICpcbiAqIHZpYSBhKSBjb21tYW5kbGluZSAoZS5nLiBicm93c2VyIHN0YXJ0dXApXG4gKiBAZmlsZVxuICogQGNvcHlyaWdodCAoYykgMjAxNiBHZXJkIEZvcnN0bWFublxuICovXG5cInVzZSBzdHJpY3RcIjtcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoXCJkZWJ1Z1wiKTtcbnZhciBkZWJ1Z2xvZyA9IGRlYnVnKCdleGVjdGVtcGxhdGUnKTtcbmZ1bmN0aW9uIGV4cGFuZFRlbXBsYXRlKGNvbnRleHQsIHRlbXBsYXRlKSB7XG4gICAgdmFyIHBhdHRlcm4gPSB0ZW1wbGF0ZTtcbiAgICBPYmplY3Qua2V5cyhjb250ZXh0KS5mb3JFYWNoKGZ1bmN0aW9uIChzS2V5KSB7XG4gICAgICAgIHZhciByZWdleCA9IG5ldyBSZWdFeHAoJ3snICsgc0tleSArICd9JywgJ2cnKTtcbiAgICAgICAgcGF0dGVybiA9IHBhdHRlcm4ucmVwbGFjZShyZWdleCwgY29udGV4dFtzS2V5XSk7XG4gICAgICAgIHBhdHRlcm4gPSBwYXR0ZXJuLnJlcGxhY2UocmVnZXgsIGNvbnRleHRbc0tleV0pO1xuICAgIH0pO1xuICAgIHJldHVybiBwYXR0ZXJuO1xufVxuZXhwb3J0cy5leHBhbmRUZW1wbGF0ZSA9IGV4cGFuZFRlbXBsYXRlO1xuZnVuY3Rpb24gZXh0cmFjdFJlcGxhY2VtZW50S2V5cyhzdGVtcGxhdGUpIHtcbiAgICB2YXIgcmVnZXggPSBuZXcgUmVnRXhwKCd7KFtefV0rKX0nLCBcImdcIik7XG4gICAgdmFyIGtleXMgPSB7fTtcbiAgICB2YXIgbTtcbiAgICB3aGlsZSAobSA9IHJlZ2V4LmV4ZWMoc3RlbXBsYXRlKSkge1xuICAgICAgICB2YXIgcGF0dGVybiA9IG1bMV07XG4gICAgICAgIGtleXNbcGF0dGVybl0gPSAxO1xuICAgIH1cbiAgICByZXR1cm4gT2JqZWN0LmtleXMoa2V5cykuc29ydCgpO1xufVxuZXhwb3J0cy5leHRyYWN0UmVwbGFjZW1lbnRLZXlzID0gZXh0cmFjdFJlcGxhY2VtZW50S2V5cztcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
