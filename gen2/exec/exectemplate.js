/**
 * Functionality to execute a certain response on the server,
 * interpreting a general model context
 *
 *
 * via a) commandline (e.g. browser startup)
 * @file
 * @copyright (c) 2016 Gerd Forstmann
 */
"use strict";

var debug = require('debug');
var debuglog = debug('exectemplate');
function expandTemplate(context, template) {
    var pattern = template;
    Object.keys(context).forEach(function (sKey) {
        var regex = new RegExp('{' + sKey + '}', 'g');
        pattern = pattern.replace(regex, context[sKey]);
        pattern = pattern.replace(regex, context[sKey]);
    });
    return pattern;
}
exports.expandTemplate = expandTemplate;
function extractReplacementKeys(stemplate) {
    var regex = new RegExp('{([^}]+)}', "g");
    var keys = {};
    var m;
    while (m = regex.exec(stemplate)) {
        var pattern = m[1];
        keys[pattern] = 1;
    }
    return Object.keys(keys).sort();
}
exports.extractReplacementKeys = extractReplacementKeys;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9leGVjL2V4ZWN0ZW1wbGF0ZS50cyIsImV4ZWMvZXhlY3RlbXBsYXRlLmpzIl0sIm5hbWVzIjpbImRlYnVnIiwicmVxdWlyZSIsImRlYnVnbG9nIiwiZXhwYW5kVGVtcGxhdGUiLCJjb250ZXh0IiwidGVtcGxhdGUiLCJwYXR0ZXJuIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJzS2V5IiwicmVnZXgiLCJSZWdFeHAiLCJyZXBsYWNlIiwiZXhwb3J0cyIsImV4dHJhY3RSZXBsYWNlbWVudEtleXMiLCJzdGVtcGxhdGUiLCJtIiwiZXhlYyIsInNvcnQiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7QUNTQTs7QURHQSxJQUFZQSxRQUFLQyxRQUFNLE9BQU4sQ0FBakI7QUFJQSxJQUFNQyxXQUFXRixNQUFNLGNBQU4sQ0FBakI7QUFRQSxTQUFBRyxjQUFBLENBQStCQyxPQUEvQixFQUFxRUMsUUFBckUsRUFBc0Y7QUFDcEYsUUFBSUMsVUFBVUQsUUFBZDtBQUNBRSxXQUFPQyxJQUFQLENBQVlKLE9BQVosRUFBcUJLLE9BQXJCLENBQTZCLFVBQVVDLElBQVYsRUFBYztBQUN6QyxZQUFJQyxRQUFRLElBQUlDLE1BQUosQ0FBVyxNQUFNRixJQUFOLEdBQWEsR0FBeEIsRUFBNkIsR0FBN0IsQ0FBWjtBQUNBSixrQkFBVUEsUUFBUU8sT0FBUixDQUFnQkYsS0FBaEIsRUFBdUJQLFFBQVFNLElBQVIsQ0FBdkIsQ0FBVjtBQUNBSixrQkFBVUEsUUFBUU8sT0FBUixDQUFnQkYsS0FBaEIsRUFBdUJQLFFBQVFNLElBQVIsQ0FBdkIsQ0FBVjtBQUNELEtBSkQ7QUFLQSxXQUFPSixPQUFQO0FBQ0Q7QUFSZVEsUUFBQVgsY0FBQSxHQUFjQSxjQUFkO0FBVWhCLFNBQUFZLHNCQUFBLENBQXVDQyxTQUF2QyxFQUF5RDtBQUN2RCxRQUFJTCxRQUFRLElBQUlDLE1BQUosQ0FBVyxXQUFYLEVBQXdCLEdBQXhCLENBQVo7QUFDQSxRQUFJSixPQUFPLEVBQVg7QUFDQSxRQUFJUyxDQUFKO0FBQ0EsV0FBTUEsSUFBSU4sTUFBTU8sSUFBTixDQUFXRixTQUFYLENBQVYsRUFBaUM7QUFDL0IsWUFBSVYsVUFBVVcsRUFBRSxDQUFGLENBQWQ7QUFDQVQsYUFBS0YsT0FBTCxJQUFnQixDQUFoQjtBQUNEO0FBQ0QsV0FBT0MsT0FBT0MsSUFBUCxDQUFZQSxJQUFaLEVBQWtCVyxJQUFsQixFQUFQO0FBQ0Q7QUFUZUwsUUFBQUMsc0JBQUEsR0FBc0JBLHNCQUF0QiIsImZpbGUiOiJleGVjL2V4ZWN0ZW1wbGF0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBGdW5jdGlvbmFsaXR5IHRvIGV4ZWN1dGUgYSBjZXJ0YWluIHJlc3BvbnNlIG9uIHRoZSBzZXJ2ZXIsXHJcbiAqIGludGVycHJldGluZyBhIGdlbmVyYWwgbW9kZWwgY29udGV4dFxyXG4gKlxyXG4gKlxyXG4gKiB2aWEgYSkgY29tbWFuZGxpbmUgKGUuZy4gYnJvd3NlciBzdGFydHVwKVxyXG4gKiBAZmlsZVxyXG4gKiBAY29weXJpZ2h0IChjKSAyMDE2IEdlcmQgRm9yc3RtYW5uXHJcbiAqL1xyXG5cclxuaW1wb3J0ICogYXMgaW50ZiBmcm9tICdjb25zdGFudHMnO1xyXG5cclxuaW1wb3J0ICogYXMgZGVidWcgZnJvbSAnZGVidWcnO1xyXG5cclxuaW1wb3J0ICogIGFzIElGTWF0Y2ggZnJvbSAnLi4vbWF0Y2gvaWZtYXRjaCc7XHJcblxyXG5jb25zdCBkZWJ1Z2xvZyA9IGRlYnVnKCdleGVjdGVtcGxhdGUnKVxyXG5cclxuaW1wb3J0IHsgZXhlYyB9IGZyb20gJ2NoaWxkX3Byb2Nlc3MnO1xyXG5cclxuaW1wb3J0ICogYXMgSU1hdGNoIGZyb20gJy4uL21hdGNoL2lmbWF0Y2gnO1xyXG5pbXBvcnQgKiBhcyBNYXRjaCBmcm9tICcuLi9tYXRjaC9tYXRjaCc7XHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGV4cGFuZFRlbXBsYXRlKGNvbnRleHQgOiB7W2tleSA6IHN0cmluZ10gOiBzdHJpbmd9ICwgdGVtcGxhdGUgOiBzdHJpbmcgKSA6IHN0cmluZyB7XHJcbiAgdmFyIHBhdHRlcm4gPSB0ZW1wbGF0ZTtcclxuICBPYmplY3Qua2V5cyhjb250ZXh0KS5mb3JFYWNoKGZ1bmN0aW9uIChzS2V5KSB7XHJcbiAgICB2YXIgcmVnZXggPSBuZXcgUmVnRXhwKCd7JyArIHNLZXkgKyAnfScsICdnJylcclxuICAgIHBhdHRlcm4gPSBwYXR0ZXJuLnJlcGxhY2UocmVnZXgsIGNvbnRleHRbc0tleV0pXHJcbiAgICBwYXR0ZXJuID0gcGF0dGVybi5yZXBsYWNlKHJlZ2V4LCBjb250ZXh0W3NLZXldKVxyXG4gIH0pXHJcbiAgcmV0dXJuIHBhdHRlcm47XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBleHRyYWN0UmVwbGFjZW1lbnRLZXlzKHN0ZW1wbGF0ZSA6IHN0cmluZykgOiBzdHJpbmdbXSB7XHJcbiAgdmFyIHJlZ2V4ID0gbmV3IFJlZ0V4cCgneyhbXn1dKyl9JywgXCJnXCIpO1xyXG4gIHZhciBrZXlzID0ge307XHJcbiAgdmFyIG07XHJcbiAgd2hpbGUobSA9IHJlZ2V4LmV4ZWMoc3RlbXBsYXRlKSkge1xyXG4gICAgdmFyIHBhdHRlcm4gPSBtWzFdO1xyXG4gICAga2V5c1twYXR0ZXJuXSA9IDE7XHJcbiAgfVxyXG4gIHJldHVybiBPYmplY3Qua2V5cyhrZXlzKS5zb3J0KCk7XHJcbn1cclxuXHJcblxyXG4iLCIvKipcbiAqIEZ1bmN0aW9uYWxpdHkgdG8gZXhlY3V0ZSBhIGNlcnRhaW4gcmVzcG9uc2Ugb24gdGhlIHNlcnZlcixcbiAqIGludGVycHJldGluZyBhIGdlbmVyYWwgbW9kZWwgY29udGV4dFxuICpcbiAqXG4gKiB2aWEgYSkgY29tbWFuZGxpbmUgKGUuZy4gYnJvd3NlciBzdGFydHVwKVxuICogQGZpbGVcbiAqIEBjb3B5cmlnaHQgKGMpIDIwMTYgR2VyZCBGb3JzdG1hbm5cbiAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpO1xudmFyIGRlYnVnbG9nID0gZGVidWcoJ2V4ZWN0ZW1wbGF0ZScpO1xuZnVuY3Rpb24gZXhwYW5kVGVtcGxhdGUoY29udGV4dCwgdGVtcGxhdGUpIHtcbiAgICB2YXIgcGF0dGVybiA9IHRlbXBsYXRlO1xuICAgIE9iamVjdC5rZXlzKGNvbnRleHQpLmZvckVhY2goZnVuY3Rpb24gKHNLZXkpIHtcbiAgICAgICAgdmFyIHJlZ2V4ID0gbmV3IFJlZ0V4cCgneycgKyBzS2V5ICsgJ30nLCAnZycpO1xuICAgICAgICBwYXR0ZXJuID0gcGF0dGVybi5yZXBsYWNlKHJlZ2V4LCBjb250ZXh0W3NLZXldKTtcbiAgICAgICAgcGF0dGVybiA9IHBhdHRlcm4ucmVwbGFjZShyZWdleCwgY29udGV4dFtzS2V5XSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHBhdHRlcm47XG59XG5leHBvcnRzLmV4cGFuZFRlbXBsYXRlID0gZXhwYW5kVGVtcGxhdGU7XG5mdW5jdGlvbiBleHRyYWN0UmVwbGFjZW1lbnRLZXlzKHN0ZW1wbGF0ZSkge1xuICAgIHZhciByZWdleCA9IG5ldyBSZWdFeHAoJ3soW159XSspfScsIFwiZ1wiKTtcbiAgICB2YXIga2V5cyA9IHt9O1xuICAgIHZhciBtO1xuICAgIHdoaWxlIChtID0gcmVnZXguZXhlYyhzdGVtcGxhdGUpKSB7XG4gICAgICAgIHZhciBwYXR0ZXJuID0gbVsxXTtcbiAgICAgICAga2V5c1twYXR0ZXJuXSA9IDE7XG4gICAgfVxuICAgIHJldHVybiBPYmplY3Qua2V5cyhrZXlzKS5zb3J0KCk7XG59XG5leHBvcnRzLmV4dHJhY3RSZXBsYWNlbWVudEtleXMgPSBleHRyYWN0UmVwbGFjZW1lbnRLZXlzO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
