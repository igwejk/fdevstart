/**
 * maketable.ts
 *
 * @file
 * @copyright (c) 2016 Gerd Forstmann
 */
"use strict";

var debug = require("debug");
var debuglog = debug('maketable');
var Model = require("../model/model");
var Utils = require("../utils/utils");
var _ = require("lodash");
function makeTable(categories, theModel) {
    //
    debuglog("makeTable for " + JSON.stringify(categories));
    //
    var aFilteredDomains = Model.getDomainsForCategory(theModel, categories[0]);
    categories.forEach(function (category) {
        var catsForDomain = Model.getDomainsForCategory(theModel, category);
        aFilteredDomains = _.intersection(aFilteredDomains, catsForDomain);
    });
    if (aFilteredDomains.length === 0) {
        return {
            text: 'No commxon domains for ' + Utils.listToQuotedCommaAnd(categories),
            action: {}
        };
    }
    var domain = aFilteredDomains[0];
    //
    var columns = Model.getTableColumns(theModel, domain);
    if (columns.length === 0) {
        return {
            text: 'Apologies, but i cannot make a table for domain ' + domain + ' ',
            action: {}
        };
    }
    var indexMap = categories.map(function (category) {
        return columns.indexOf(category);
    }).filter(function (i) {
        return i >= 0;
    });
    if (indexMap.length === 0) {
        return {
            text: 'Apologies, but ' + Utils.listToQuotedCommaAnd(categories) + ' does not represent possible table columns',
            action: {}
        };
    }
    var text = "";
    var missingMap = categories.filter(function (category) {
        return columns.indexOf(category) < 0;
    });
    var usedMap = categories.filter(function (category) {
        return columns.indexOf(category) >= 0;
    });
    if (missingMap.length) {
        text = "I had to drop " + Utils.listToQuotedCommaAnd(missingMap) + ". But here you go ...\n";
    }
    text += "Creating and starting table with " + Utils.listToQuotedCommaAnd(usedMap);
    return {
        text: text,
        action: { url: "table_" + domain.toLowerCase().replace(/[^a-z0-9_]/g, '_') + "?c" + indexMap.join(',') }
    };
}
exports.makeTable = makeTable;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9leGVjL21ha2VxYmV0YWJsZS50cyIsImV4ZWMvbWFrZXFiZXRhYmxlLmpzIl0sIm5hbWVzIjpbImRlYnVnIiwicmVxdWlyZSIsImRlYnVnbG9nIiwiTW9kZWwiLCJVdGlscyIsIl8iLCJtYWtlVGFibGUiLCJjYXRlZ29yaWVzIiwidGhlTW9kZWwiLCJKU09OIiwic3RyaW5naWZ5IiwiYUZpbHRlcmVkRG9tYWlucyIsImdldERvbWFpbnNGb3JDYXRlZ29yeSIsImZvckVhY2giLCJjYXRlZ29yeSIsImNhdHNGb3JEb21haW4iLCJpbnRlcnNlY3Rpb24iLCJsZW5ndGgiLCJ0ZXh0IiwibGlzdFRvUXVvdGVkQ29tbWFBbmQiLCJhY3Rpb24iLCJkb21haW4iLCJjb2x1bW5zIiwiZ2V0VGFibGVDb2x1bW5zIiwiaW5kZXhNYXAiLCJtYXAiLCJpbmRleE9mIiwiZmlsdGVyIiwiaSIsIm1pc3NpbmdNYXAiLCJ1c2VkTWFwIiwidXJsIiwidG9Mb3dlckNhc2UiLCJyZXBsYWNlIiwiam9pbiIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUNBOzs7Ozs7QUNLQTs7QURHQSxJQUFBQSxRQUFBQyxRQUFBLE9BQUEsQ0FBQTtBQUVBLElBQU1DLFdBQVdGLE1BQU0sV0FBTixDQUFqQjtBQUdBLElBQUFHLFFBQUFGLFFBQUEsZ0JBQUEsQ0FBQTtBQUNBLElBQUFHLFFBQUFILFFBQUEsZ0JBQUEsQ0FBQTtBQUVBLElBQUFJLElBQUFKLFFBQUEsUUFBQSxDQUFBO0FBR0EsU0FBQUssU0FBQSxDQUEwQkMsVUFBMUIsRUFBaURDLFFBQWpELEVBQXlFO0FBRXZFO0FBQ0FOLGFBQVMsbUJBQW1CTyxLQUFLQyxTQUFMLENBQWVILFVBQWYsQ0FBNUI7QUFDQTtBQUNBLFFBQUlJLG1CQUFtQlIsTUFBTVMscUJBQU4sQ0FBNEJKLFFBQTVCLEVBQXNDRCxXQUFXLENBQVgsQ0FBdEMsQ0FBdkI7QUFDQUEsZUFBV00sT0FBWCxDQUFtQixVQUFBQyxRQUFBLEVBQVE7QUFDbkIsWUFBSUMsZ0JBQWdCWixNQUFNUyxxQkFBTixDQUE0QkosUUFBNUIsRUFBcUNNLFFBQXJDLENBQXBCO0FBQ0FILDJCQUFtQk4sRUFBRVcsWUFBRixDQUFlTCxnQkFBZixFQUFnQ0ksYUFBaEMsQ0FBbkI7QUFDUCxLQUhEO0FBSUEsUUFBR0osaUJBQWlCTSxNQUFqQixLQUE0QixDQUEvQixFQUFrQztBQUNoQyxlQUFRO0FBQ05DLGtCQUFRLDRCQUE0QmQsTUFBTWUsb0JBQU4sQ0FBMkJaLFVBQTNCLENBRDlCO0FBRU5hLG9CQUFTO0FBRkgsU0FBUjtBQUlEO0FBQ0QsUUFBSUMsU0FBU1YsaUJBQWlCLENBQWpCLENBQWI7QUFDQTtBQUNBLFFBQUlXLFVBQVVuQixNQUFNb0IsZUFBTixDQUFzQmYsUUFBdEIsRUFBZ0NhLE1BQWhDLENBQWQ7QUFDQSxRQUFHQyxRQUFRTCxNQUFSLEtBQW1CLENBQXRCLEVBQXlCO0FBQ3ZCLGVBQU87QUFDTEMsa0JBQVEscURBQXFERyxNQUFyRCxHQUE4RCxHQURqRTtBQUVMRCxvQkFBUztBQUZKLFNBQVA7QUFJRDtBQUNELFFBQUlJLFdBQVdqQixXQUFXa0IsR0FBWCxDQUFnQixVQUFBWCxRQUFBLEVBQVE7QUFBTSxlQUFBUSxRQUFRSSxPQUFSLENBQWdCWixRQUFoQixDQUFBO0FBQXlCLEtBQXZELEVBQTBEYSxNQUExRCxDQUFpRSxVQUFBQyxDQUFBLEVBQUM7QUFBSSxlQUFBQSxLQUFLLENBQUw7QUFBTSxLQUE1RSxDQUFmO0FBQ0EsUUFBR0osU0FBU1AsTUFBVCxLQUFvQixDQUF2QixFQUEwQjtBQUN4QixlQUFRO0FBQ05DLGtCQUFRLG9CQUFvQmQsTUFBTWUsb0JBQU4sQ0FBMkJaLFVBQTNCLENBQXBCLEdBQTZELDRDQUQvRDtBQUVOYSxvQkFBUztBQUZILFNBQVI7QUFJRDtBQUNELFFBQUlGLE9BQU8sRUFBWDtBQUNBLFFBQUlXLGFBQWF0QixXQUFXb0IsTUFBWCxDQUFtQixVQUFBYixRQUFBLEVBQVE7QUFBSyxlQUFBUSxRQUFRSSxPQUFSLENBQWdCWixRQUFoQixJQUE0QixDQUE1QjtBQUE2QixLQUE3RCxDQUFqQjtBQUNBLFFBQUlnQixVQUFVdkIsV0FBV29CLE1BQVgsQ0FBbUIsVUFBQWIsUUFBQSxFQUFRO0FBQUssZUFBQVEsUUFBUUksT0FBUixDQUFnQlosUUFBaEIsS0FBNkIsQ0FBN0I7QUFBOEIsS0FBOUQsQ0FBZDtBQUNBLFFBQUdlLFdBQVdaLE1BQWQsRUFBc0I7QUFDcEJDLGVBQU8sbUJBQW1CZCxNQUFNZSxvQkFBTixDQUEyQlUsVUFBM0IsQ0FBbkIsR0FBNEQseUJBQW5FO0FBQ0Q7QUFDRFgsWUFBUSxzQ0FBcUNkLE1BQU1lLG9CQUFOLENBQTJCVyxPQUEzQixDQUE3QztBQUNBLFdBQU87QUFDTFosY0FBT0EsSUFERjtBQUVQRSxnQkFBUSxFQUFFVyxLQUFNLFdBQVNWLE9BQU9XLFdBQVAsR0FBcUJDLE9BQXJCLENBQTZCLGFBQTdCLEVBQTJDLEdBQTNDLENBQVQsR0FBd0QsSUFBeEQsR0FBNkRULFNBQVNVLElBQVQsQ0FBYyxHQUFkLENBQXJFO0FBRkQsS0FBUDtBQUlEO0FBM0NEQyxRQUFBN0IsU0FBQSxHQUFBQSxTQUFBIiwiZmlsZSI6ImV4ZWMvbWFrZXFiZXRhYmxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXHJcbi8qKlxyXG4gKiBtYWtldGFibGUudHNcclxuICpcclxuICogQGZpbGVcclxuICogQGNvcHlyaWdodCAoYykgMjAxNiBHZXJkIEZvcnN0bWFublxyXG4gKi9cclxuXHJcblxyXG5pbXBvcnQgKiBhcyBkZWJ1ZyBmcm9tICdkZWJ1Zyc7XHJcblxyXG5jb25zdCBkZWJ1Z2xvZyA9IGRlYnVnKCdtYWtldGFibGUnKVxyXG5cclxuaW1wb3J0ICogYXMgSU1hdGNoIGZyb20gJy4uL21hdGNoL2lmbWF0Y2gnO1xyXG5pbXBvcnQgKiBhcyBNb2RlbCBmcm9tICcuLi9tb2RlbC9tb2RlbCc7XHJcbmltcG9ydCAqIGFzIFV0aWxzIGZyb20gJy4uL3V0aWxzL3V0aWxzJztcclxuXHJcbmltcG9ydCAqIGFzIF8gZnJvbSAnbG9kYXNoJztcclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbWFrZVRhYmxlKGNhdGVnb3JpZXMgOiBzdHJpbmdbXSwgdGhlTW9kZWw6IElNYXRjaC5JTW9kZWxzICkgOiB7IHRleHQ6IHN0cmluZywgYWN0aW9uIDogeyB1cmw/IDogc3RyaW5nIH0gfVxyXG57XHJcbiAgLy9cclxuICBkZWJ1Z2xvZyhcIm1ha2VUYWJsZSBmb3IgXCIgKyBKU09OLnN0cmluZ2lmeShjYXRlZ29yaWVzKSk7XHJcbiAgLy9cclxuICB2YXIgYUZpbHRlcmVkRG9tYWlucyA9IE1vZGVsLmdldERvbWFpbnNGb3JDYXRlZ29yeSh0aGVNb2RlbCwgY2F0ZWdvcmllc1swXSk7XHJcbiAgY2F0ZWdvcmllcy5mb3JFYWNoKGNhdGVnb3J5ID0+IHtcclxuICAgICAgICAgIHZhciBjYXRzRm9yRG9tYWluID0gTW9kZWwuZ2V0RG9tYWluc0ZvckNhdGVnb3J5KHRoZU1vZGVsLGNhdGVnb3J5KTtcclxuICAgICAgICAgIGFGaWx0ZXJlZERvbWFpbnMgPSBfLmludGVyc2VjdGlvbihhRmlsdGVyZWREb21haW5zLGNhdHNGb3JEb21haW4pO1xyXG4gIH0pO1xyXG4gIGlmKGFGaWx0ZXJlZERvbWFpbnMubGVuZ3RoID09PSAwKSB7XHJcbiAgICByZXR1cm4gIHtcclxuICAgICAgdGV4dCA6ICAnTm8gY29tbXhvbiBkb21haW5zIGZvciAnICsgVXRpbHMubGlzdFRvUXVvdGVkQ29tbWFBbmQoY2F0ZWdvcmllcyksXHJcbiAgICAgIGFjdGlvbiA6IHt9XHJcbiAgICB9XHJcbiAgfVxyXG4gIHZhciBkb21haW4gPSBhRmlsdGVyZWREb21haW5zWzBdO1xyXG4gIC8vXHJcbiAgdmFyIGNvbHVtbnMgPSBNb2RlbC5nZXRUYWJsZUNvbHVtbnModGhlTW9kZWwsIGRvbWFpbik7XHJcbiAgaWYoY29sdW1ucy5sZW5ndGggPT09IDApIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHRleHQgOiAgJ0Fwb2xvZ2llcywgYnV0IGkgY2Fubm90IG1ha2UgYSB0YWJsZSBmb3IgZG9tYWluICcgKyBkb21haW4gKyAnICcsXHJcbiAgICAgIGFjdGlvbiA6IHt9XHJcbiAgICB9XHJcbiAgfVxyXG4gIHZhciBpbmRleE1hcCA9IGNhdGVnb3JpZXMubWFwKCBjYXRlZ29yeSA9PiAgIGNvbHVtbnMuaW5kZXhPZihjYXRlZ29yeSkgKS5maWx0ZXIoaSA9PiBpID49IDApO1xyXG4gIGlmKGluZGV4TWFwLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgcmV0dXJuICB7XHJcbiAgICAgIHRleHQgOiAgJ0Fwb2xvZ2llcywgYnV0ICcgKyBVdGlscy5saXN0VG9RdW90ZWRDb21tYUFuZChjYXRlZ29yaWVzKSArICcgZG9lcyBub3QgcmVwcmVzZW50IHBvc3NpYmxlIHRhYmxlIGNvbHVtbnMnLFxyXG4gICAgICBhY3Rpb24gOiB7fVxyXG4gICAgfVxyXG4gIH1cclxuICB2YXIgdGV4dCA9IFwiXCI7XHJcbiAgdmFyIG1pc3NpbmdNYXAgPSBjYXRlZ29yaWVzLmZpbHRlciggY2F0ZWdvcnkgPT4gIGNvbHVtbnMuaW5kZXhPZihjYXRlZ29yeSkgPCAwICk7XHJcbiAgdmFyIHVzZWRNYXAgPSBjYXRlZ29yaWVzLmZpbHRlciggY2F0ZWdvcnkgPT4gIGNvbHVtbnMuaW5kZXhPZihjYXRlZ29yeSkgPj0gMCk7XHJcbiAgaWYobWlzc2luZ01hcC5sZW5ndGgpIHtcclxuICAgIHRleHQgPSBcIkkgaGFkIHRvIGRyb3AgXCIgKyBVdGlscy5saXN0VG9RdW90ZWRDb21tYUFuZChtaXNzaW5nTWFwKSArIFwiLiBCdXQgaGVyZSB5b3UgZ28gLi4uXFxuXCJcclxuICB9XHJcbiAgdGV4dCArPSBcIkNyZWF0aW5nIGFuZCBzdGFydGluZyB0YWJsZSB3aXRoIFwiKyBVdGlscy5saXN0VG9RdW90ZWRDb21tYUFuZCh1c2VkTWFwKTtcclxuICByZXR1cm4ge1xyXG4gICAgdGV4dCA6IHRleHQsXHJcbiAgYWN0aW9uIDp7IHVybCA6IGB0YWJsZV8ke2RvbWFpbi50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1teYS16MC05X10vZywnXycpfT9jJHtpbmRleE1hcC5qb2luKCcsJyl9YCB9XHJcbiAgfTtcclxufVxyXG4iLCIvKipcbiAqIG1ha2V0YWJsZS50c1xuICpcbiAqIEBmaWxlXG4gKiBAY29weXJpZ2h0IChjKSAyMDE2IEdlcmQgRm9yc3RtYW5uXG4gKi9cblwidXNlIHN0cmljdFwiO1xudmFyIGRlYnVnID0gcmVxdWlyZShcImRlYnVnXCIpO1xudmFyIGRlYnVnbG9nID0gZGVidWcoJ21ha2V0YWJsZScpO1xudmFyIE1vZGVsID0gcmVxdWlyZShcIi4uL21vZGVsL21vZGVsXCIpO1xudmFyIFV0aWxzID0gcmVxdWlyZShcIi4uL3V0aWxzL3V0aWxzXCIpO1xudmFyIF8gPSByZXF1aXJlKFwibG9kYXNoXCIpO1xuZnVuY3Rpb24gbWFrZVRhYmxlKGNhdGVnb3JpZXMsIHRoZU1vZGVsKSB7XG4gICAgLy9cbiAgICBkZWJ1Z2xvZyhcIm1ha2VUYWJsZSBmb3IgXCIgKyBKU09OLnN0cmluZ2lmeShjYXRlZ29yaWVzKSk7XG4gICAgLy9cbiAgICB2YXIgYUZpbHRlcmVkRG9tYWlucyA9IE1vZGVsLmdldERvbWFpbnNGb3JDYXRlZ29yeSh0aGVNb2RlbCwgY2F0ZWdvcmllc1swXSk7XG4gICAgY2F0ZWdvcmllcy5mb3JFYWNoKGZ1bmN0aW9uIChjYXRlZ29yeSkge1xuICAgICAgICB2YXIgY2F0c0ZvckRvbWFpbiA9IE1vZGVsLmdldERvbWFpbnNGb3JDYXRlZ29yeSh0aGVNb2RlbCwgY2F0ZWdvcnkpO1xuICAgICAgICBhRmlsdGVyZWREb21haW5zID0gXy5pbnRlcnNlY3Rpb24oYUZpbHRlcmVkRG9tYWlucywgY2F0c0ZvckRvbWFpbik7XG4gICAgfSk7XG4gICAgaWYgKGFGaWx0ZXJlZERvbWFpbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0ZXh0OiAnTm8gY29tbXhvbiBkb21haW5zIGZvciAnICsgVXRpbHMubGlzdFRvUXVvdGVkQ29tbWFBbmQoY2F0ZWdvcmllcyksXG4gICAgICAgICAgICBhY3Rpb246IHt9XG4gICAgICAgIH07XG4gICAgfVxuICAgIHZhciBkb21haW4gPSBhRmlsdGVyZWREb21haW5zWzBdO1xuICAgIC8vXG4gICAgdmFyIGNvbHVtbnMgPSBNb2RlbC5nZXRUYWJsZUNvbHVtbnModGhlTW9kZWwsIGRvbWFpbik7XG4gICAgaWYgKGNvbHVtbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0ZXh0OiAnQXBvbG9naWVzLCBidXQgaSBjYW5ub3QgbWFrZSBhIHRhYmxlIGZvciBkb21haW4gJyArIGRvbWFpbiArICcgJyxcbiAgICAgICAgICAgIGFjdGlvbjoge31cbiAgICAgICAgfTtcbiAgICB9XG4gICAgdmFyIGluZGV4TWFwID0gY2F0ZWdvcmllcy5tYXAoZnVuY3Rpb24gKGNhdGVnb3J5KSB7IHJldHVybiBjb2x1bW5zLmluZGV4T2YoY2F0ZWdvcnkpOyB9KS5maWx0ZXIoZnVuY3Rpb24gKGkpIHsgcmV0dXJuIGkgPj0gMDsgfSk7XG4gICAgaWYgKGluZGV4TWFwLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdGV4dDogJ0Fwb2xvZ2llcywgYnV0ICcgKyBVdGlscy5saXN0VG9RdW90ZWRDb21tYUFuZChjYXRlZ29yaWVzKSArICcgZG9lcyBub3QgcmVwcmVzZW50IHBvc3NpYmxlIHRhYmxlIGNvbHVtbnMnLFxuICAgICAgICAgICAgYWN0aW9uOiB7fVxuICAgICAgICB9O1xuICAgIH1cbiAgICB2YXIgdGV4dCA9IFwiXCI7XG4gICAgdmFyIG1pc3NpbmdNYXAgPSBjYXRlZ29yaWVzLmZpbHRlcihmdW5jdGlvbiAoY2F0ZWdvcnkpIHsgcmV0dXJuIGNvbHVtbnMuaW5kZXhPZihjYXRlZ29yeSkgPCAwOyB9KTtcbiAgICB2YXIgdXNlZE1hcCA9IGNhdGVnb3JpZXMuZmlsdGVyKGZ1bmN0aW9uIChjYXRlZ29yeSkgeyByZXR1cm4gY29sdW1ucy5pbmRleE9mKGNhdGVnb3J5KSA+PSAwOyB9KTtcbiAgICBpZiAobWlzc2luZ01hcC5sZW5ndGgpIHtcbiAgICAgICAgdGV4dCA9IFwiSSBoYWQgdG8gZHJvcCBcIiArIFV0aWxzLmxpc3RUb1F1b3RlZENvbW1hQW5kKG1pc3NpbmdNYXApICsgXCIuIEJ1dCBoZXJlIHlvdSBnbyAuLi5cXG5cIjtcbiAgICB9XG4gICAgdGV4dCArPSBcIkNyZWF0aW5nIGFuZCBzdGFydGluZyB0YWJsZSB3aXRoIFwiICsgVXRpbHMubGlzdFRvUXVvdGVkQ29tbWFBbmQodXNlZE1hcCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdGV4dDogdGV4dCxcbiAgICAgICAgYWN0aW9uOiB7IHVybDogXCJ0YWJsZV9cIiArIGRvbWFpbi50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1teYS16MC05X10vZywgJ18nKSArIFwiP2NcIiArIGluZGV4TWFwLmpvaW4oJywnKSB9XG4gICAgfTtcbn1cbmV4cG9ydHMubWFrZVRhYmxlID0gbWFrZVRhYmxlO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
