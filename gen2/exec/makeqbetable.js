/**
 * maketable.ts
 *
 * @file
 * @copyright (c) 2016 Gerd Forstmann
 */
"use strict";

var debug = require("debug");
var debuglog = debug('maketable');
var Model = require("../model/model");
var Utils = require("../utils/utils");
var _ = require("lodash");
function makeTable(categories, theModel) {
    //
    debuglog("makeTable for " + JSON.stringify(categories));
    //
    var aFilteredDomains = Model.getDomainsForCategory(theModel, categories[0]);
    categories.forEach(function (category) {
        var catsForDomain = Model.getDomainsForCategory(theModel, category);
        aFilteredDomains = _.intersection(aFilteredDomains, catsForDomain);
    });
    if (aFilteredDomains.length === 0) {
        return {
            text: 'No commxon domains for ' + Utils.listToQuotedCommaAnd(categories),
            action: {}
        };
    }
    var domain = aFilteredDomains[0];
    //
    var columns = Model.getTableColumns(theModel, domain);
    var indexMap = categories.map(function (category) {
        return columns.indexOf(category);
    }).filter(function (i) {
        return i >= 0;
    });
    if (indexMap.length === 0) {
        return {
            text: 'Apologies, but ' + Utils.listToQuotedCommaAnd(categories) + ' does not represent possible table columns',
            action: {}
        };
    }
    var text = "";
    var missingMap = categories.filter(function (category) {
        return columns.indexOf(category) < 0;
    });
    var usedMap = categories.filter(function (category) {
        return columns.indexOf(category) >= 0;
    });
    if (missingMap.length) {
        text = "I had to drop " + Utils.listToQuotedCommaAnd(missingMap) + ". But here you go ...\n";
    }
    text += "Creating and starting table with " + Utils.listToQuotedCommaAnd(usedMap);
    return {
        text: text,
        action: { url: "table_" + domain.toLowerCase() + "?c" + indexMap.join(',') }
    };
}
exports.makeTable = makeTable;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9leGVjL21ha2VxYmV0YWJsZS50cyIsImV4ZWMvbWFrZXFiZXRhYmxlLmpzIl0sIm5hbWVzIjpbImRlYnVnIiwicmVxdWlyZSIsImRlYnVnbG9nIiwiTW9kZWwiLCJVdGlscyIsIl8iLCJtYWtlVGFibGUiLCJjYXRlZ29yaWVzIiwidGhlTW9kZWwiLCJKU09OIiwic3RyaW5naWZ5IiwiYUZpbHRlcmVkRG9tYWlucyIsImdldERvbWFpbnNGb3JDYXRlZ29yeSIsImZvckVhY2giLCJjYXRlZ29yeSIsImNhdHNGb3JEb21haW4iLCJpbnRlcnNlY3Rpb24iLCJsZW5ndGgiLCJ0ZXh0IiwibGlzdFRvUXVvdGVkQ29tbWFBbmQiLCJhY3Rpb24iLCJkb21haW4iLCJjb2x1bW5zIiwiZ2V0VGFibGVDb2x1bW5zIiwiaW5kZXhNYXAiLCJtYXAiLCJpbmRleE9mIiwiZmlsdGVyIiwiaSIsIm1pc3NpbmdNYXAiLCJ1c2VkTWFwIiwidXJsIiwidG9Mb3dlckNhc2UiLCJqb2luIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQ0E7Ozs7OztBQ0tBOztBREdBLElBQUFBLFFBQUFDLFFBQUEsT0FBQSxDQUFBO0FBRUEsSUFBTUMsV0FBV0YsTUFBTSxXQUFOLENBQWpCO0FBR0EsSUFBQUcsUUFBQUYsUUFBQSxnQkFBQSxDQUFBO0FBQ0EsSUFBQUcsUUFBQUgsUUFBQSxnQkFBQSxDQUFBO0FBRUEsSUFBQUksSUFBQUosUUFBQSxRQUFBLENBQUE7QUFHQSxTQUFBSyxTQUFBLENBQTBCQyxVQUExQixFQUFpREMsUUFBakQsRUFBeUU7QUFFdkU7QUFDQU4sYUFBUyxtQkFBbUJPLEtBQUtDLFNBQUwsQ0FBZUgsVUFBZixDQUE1QjtBQUNBO0FBQ0EsUUFBSUksbUJBQW1CUixNQUFNUyxxQkFBTixDQUE0QkosUUFBNUIsRUFBc0NELFdBQVcsQ0FBWCxDQUF0QyxDQUF2QjtBQUNBQSxlQUFXTSxPQUFYLENBQW1CLFVBQUFDLFFBQUEsRUFBUTtBQUNuQixZQUFJQyxnQkFBZ0JaLE1BQU1TLHFCQUFOLENBQTRCSixRQUE1QixFQUFxQ00sUUFBckMsQ0FBcEI7QUFDQUgsMkJBQW1CTixFQUFFVyxZQUFGLENBQWVMLGdCQUFmLEVBQWdDSSxhQUFoQyxDQUFuQjtBQUNQLEtBSEQ7QUFJQSxRQUFHSixpQkFBaUJNLE1BQWpCLEtBQTRCLENBQS9CLEVBQWtDO0FBQ2hDLGVBQVE7QUFDTkMsa0JBQVEsNEJBQTRCZCxNQUFNZSxvQkFBTixDQUEyQlosVUFBM0IsQ0FEOUI7QUFFTmEsb0JBQVM7QUFGSCxTQUFSO0FBSUQ7QUFDRCxRQUFJQyxTQUFTVixpQkFBaUIsQ0FBakIsQ0FBYjtBQUNBO0FBQ0EsUUFBSVcsVUFBVW5CLE1BQU1vQixlQUFOLENBQXNCZixRQUF0QixFQUFnQ2EsTUFBaEMsQ0FBZDtBQUNBLFFBQUlHLFdBQVdqQixXQUFXa0IsR0FBWCxDQUFnQixVQUFBWCxRQUFBLEVBQVE7QUFBTSxlQUFBUSxRQUFRSSxPQUFSLENBQWdCWixRQUFoQixDQUFBO0FBQXlCLEtBQXZELEVBQTBEYSxNQUExRCxDQUFpRSxVQUFBQyxDQUFBLEVBQUM7QUFBSSxlQUFBQSxLQUFLLENBQUw7QUFBTSxLQUE1RSxDQUFmO0FBQ0EsUUFBR0osU0FBU1AsTUFBVCxLQUFvQixDQUF2QixFQUEwQjtBQUN4QixlQUFRO0FBQ05DLGtCQUFRLG9CQUFvQmQsTUFBTWUsb0JBQU4sQ0FBMkJaLFVBQTNCLENBQXBCLEdBQTZELDRDQUQvRDtBQUVOYSxvQkFBUztBQUZILFNBQVI7QUFJRDtBQUNELFFBQUlGLE9BQU8sRUFBWDtBQUNBLFFBQUlXLGFBQWF0QixXQUFXb0IsTUFBWCxDQUFtQixVQUFBYixRQUFBLEVBQVE7QUFBSyxlQUFBUSxRQUFRSSxPQUFSLENBQWdCWixRQUFoQixJQUE0QixDQUE1QjtBQUE2QixLQUE3RCxDQUFqQjtBQUNBLFFBQUlnQixVQUFVdkIsV0FBV29CLE1BQVgsQ0FBbUIsVUFBQWIsUUFBQSxFQUFRO0FBQUssZUFBQVEsUUFBUUksT0FBUixDQUFnQlosUUFBaEIsS0FBNkIsQ0FBN0I7QUFBOEIsS0FBOUQsQ0FBZDtBQUNBLFFBQUdlLFdBQVdaLE1BQWQsRUFBc0I7QUFDcEJDLGVBQU8sbUJBQW1CZCxNQUFNZSxvQkFBTixDQUEyQlUsVUFBM0IsQ0FBbkIsR0FBNEQseUJBQW5FO0FBQ0Q7QUFDRFgsWUFBUSxzQ0FBcUNkLE1BQU1lLG9CQUFOLENBQTJCVyxPQUEzQixDQUE3QztBQUNBLFdBQU87QUFDTFosY0FBT0EsSUFERjtBQUVQRSxnQkFBUSxFQUFFVyxLQUFNLFdBQVNWLE9BQU9XLFdBQVAsRUFBVCxHQUE2QixJQUE3QixHQUFrQ1IsU0FBU1MsSUFBVCxDQUFjLEdBQWQsQ0FBMUM7QUFGRCxLQUFQO0FBSUQ7QUFyQ0RDLFFBQUE1QixTQUFBLEdBQUFBLFNBQUEiLCJmaWxlIjoiZXhlYy9tYWtlcWJldGFibGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuLyoqXHJcbiAqIG1ha2V0YWJsZS50c1xyXG4gKlxyXG4gKiBAZmlsZVxyXG4gKiBAY29weXJpZ2h0IChjKSAyMDE2IEdlcmQgRm9yc3RtYW5uXHJcbiAqL1xyXG5cclxuXHJcbmltcG9ydCAqIGFzIGRlYnVnIGZyb20gJ2RlYnVnJztcclxuXHJcbmNvbnN0IGRlYnVnbG9nID0gZGVidWcoJ21ha2V0YWJsZScpXHJcblxyXG5pbXBvcnQgKiBhcyBJTWF0Y2ggZnJvbSAnLi4vbWF0Y2gvaWZtYXRjaCc7XHJcbmltcG9ydCAqIGFzIE1vZGVsIGZyb20gJy4uL21vZGVsL21vZGVsJztcclxuaW1wb3J0ICogYXMgVXRpbHMgZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xyXG5cclxuaW1wb3J0ICogYXMgXyBmcm9tICdsb2Rhc2gnO1xyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBtYWtlVGFibGUoY2F0ZWdvcmllcyA6IHN0cmluZ1tdLCB0aGVNb2RlbDogSU1hdGNoLklNb2RlbHMgKSA6IHsgdGV4dDogc3RyaW5nLCBhY3Rpb24gOiB7IHVybD8gOiBzdHJpbmcgfSB9XHJcbntcclxuICAvL1xyXG4gIGRlYnVnbG9nKFwibWFrZVRhYmxlIGZvciBcIiArIEpTT04uc3RyaW5naWZ5KGNhdGVnb3JpZXMpKTtcclxuICAvL1xyXG4gIHZhciBhRmlsdGVyZWREb21haW5zID0gTW9kZWwuZ2V0RG9tYWluc0ZvckNhdGVnb3J5KHRoZU1vZGVsLCBjYXRlZ29yaWVzWzBdKTtcclxuICBjYXRlZ29yaWVzLmZvckVhY2goY2F0ZWdvcnkgPT4ge1xyXG4gICAgICAgICAgdmFyIGNhdHNGb3JEb21haW4gPSBNb2RlbC5nZXREb21haW5zRm9yQ2F0ZWdvcnkodGhlTW9kZWwsY2F0ZWdvcnkpO1xyXG4gICAgICAgICAgYUZpbHRlcmVkRG9tYWlucyA9IF8uaW50ZXJzZWN0aW9uKGFGaWx0ZXJlZERvbWFpbnMsY2F0c0ZvckRvbWFpbik7XHJcbiAgfSk7XHJcbiAgaWYoYUZpbHRlcmVkRG9tYWlucy5sZW5ndGggPT09IDApIHtcclxuICAgIHJldHVybiAge1xyXG4gICAgICB0ZXh0IDogICdObyBjb21teG9uIGRvbWFpbnMgZm9yICcgKyBVdGlscy5saXN0VG9RdW90ZWRDb21tYUFuZChjYXRlZ29yaWVzKSxcclxuICAgICAgYWN0aW9uIDoge31cclxuICAgIH1cclxuICB9XHJcbiAgdmFyIGRvbWFpbiA9IGFGaWx0ZXJlZERvbWFpbnNbMF07XHJcbiAgLy9cclxuICB2YXIgY29sdW1ucyA9IE1vZGVsLmdldFRhYmxlQ29sdW1ucyh0aGVNb2RlbCwgZG9tYWluKTtcclxuICB2YXIgaW5kZXhNYXAgPSBjYXRlZ29yaWVzLm1hcCggY2F0ZWdvcnkgPT4gICBjb2x1bW5zLmluZGV4T2YoY2F0ZWdvcnkpICkuZmlsdGVyKGkgPT4gaSA+PSAwKTtcclxuICBpZihpbmRleE1hcC5sZW5ndGggPT09IDApIHtcclxuICAgIHJldHVybiAge1xyXG4gICAgICB0ZXh0IDogICdBcG9sb2dpZXMsIGJ1dCAnICsgVXRpbHMubGlzdFRvUXVvdGVkQ29tbWFBbmQoY2F0ZWdvcmllcykgKyAnIGRvZXMgbm90IHJlcHJlc2VudCBwb3NzaWJsZSB0YWJsZSBjb2x1bW5zJyxcclxuICAgICAgYWN0aW9uIDoge31cclxuICAgIH1cclxuICB9XHJcbiAgdmFyIHRleHQgPSBcIlwiO1xyXG4gIHZhciBtaXNzaW5nTWFwID0gY2F0ZWdvcmllcy5maWx0ZXIoIGNhdGVnb3J5ID0+ICBjb2x1bW5zLmluZGV4T2YoY2F0ZWdvcnkpIDwgMCApO1xyXG4gIHZhciB1c2VkTWFwID0gY2F0ZWdvcmllcy5maWx0ZXIoIGNhdGVnb3J5ID0+ICBjb2x1bW5zLmluZGV4T2YoY2F0ZWdvcnkpID49IDApO1xyXG4gIGlmKG1pc3NpbmdNYXAubGVuZ3RoKSB7XHJcbiAgICB0ZXh0ID0gXCJJIGhhZCB0byBkcm9wIFwiICsgVXRpbHMubGlzdFRvUXVvdGVkQ29tbWFBbmQobWlzc2luZ01hcCkgKyBcIi4gQnV0IGhlcmUgeW91IGdvIC4uLlxcblwiXHJcbiAgfVxyXG4gIHRleHQgKz0gXCJDcmVhdGluZyBhbmQgc3RhcnRpbmcgdGFibGUgd2l0aCBcIisgVXRpbHMubGlzdFRvUXVvdGVkQ29tbWFBbmQodXNlZE1hcCk7XHJcbiAgcmV0dXJuIHtcclxuICAgIHRleHQgOiB0ZXh0LFxyXG4gIGFjdGlvbiA6eyB1cmwgOiBgdGFibGVfJHtkb21haW4udG9Mb3dlckNhc2UoKX0/YyR7aW5kZXhNYXAuam9pbignLCcpfWAgfVxyXG4gIH07XHJcbn1cclxuIiwiLyoqXG4gKiBtYWtldGFibGUudHNcbiAqXG4gKiBAZmlsZVxuICogQGNvcHlyaWdodCAoYykgMjAxNiBHZXJkIEZvcnN0bWFublxuICovXG5cInVzZSBzdHJpY3RcIjtcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoXCJkZWJ1Z1wiKTtcbnZhciBkZWJ1Z2xvZyA9IGRlYnVnKCdtYWtldGFibGUnKTtcbnZhciBNb2RlbCA9IHJlcXVpcmUoXCIuLi9tb2RlbC9tb2RlbFwiKTtcbnZhciBVdGlscyA9IHJlcXVpcmUoXCIuLi91dGlscy91dGlsc1wiKTtcbnZhciBfID0gcmVxdWlyZShcImxvZGFzaFwiKTtcbmZ1bmN0aW9uIG1ha2VUYWJsZShjYXRlZ29yaWVzLCB0aGVNb2RlbCkge1xuICAgIC8vXG4gICAgZGVidWdsb2coXCJtYWtlVGFibGUgZm9yIFwiICsgSlNPTi5zdHJpbmdpZnkoY2F0ZWdvcmllcykpO1xuICAgIC8vXG4gICAgdmFyIGFGaWx0ZXJlZERvbWFpbnMgPSBNb2RlbC5nZXREb21haW5zRm9yQ2F0ZWdvcnkodGhlTW9kZWwsIGNhdGVnb3JpZXNbMF0pO1xuICAgIGNhdGVnb3JpZXMuZm9yRWFjaChmdW5jdGlvbiAoY2F0ZWdvcnkpIHtcbiAgICAgICAgdmFyIGNhdHNGb3JEb21haW4gPSBNb2RlbC5nZXREb21haW5zRm9yQ2F0ZWdvcnkodGhlTW9kZWwsIGNhdGVnb3J5KTtcbiAgICAgICAgYUZpbHRlcmVkRG9tYWlucyA9IF8uaW50ZXJzZWN0aW9uKGFGaWx0ZXJlZERvbWFpbnMsIGNhdHNGb3JEb21haW4pO1xuICAgIH0pO1xuICAgIGlmIChhRmlsdGVyZWREb21haW5zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdGV4dDogJ05vIGNvbW14b24gZG9tYWlucyBmb3IgJyArIFV0aWxzLmxpc3RUb1F1b3RlZENvbW1hQW5kKGNhdGVnb3JpZXMpLFxuICAgICAgICAgICAgYWN0aW9uOiB7fVxuICAgICAgICB9O1xuICAgIH1cbiAgICB2YXIgZG9tYWluID0gYUZpbHRlcmVkRG9tYWluc1swXTtcbiAgICAvL1xuICAgIHZhciBjb2x1bW5zID0gTW9kZWwuZ2V0VGFibGVDb2x1bW5zKHRoZU1vZGVsLCBkb21haW4pO1xuICAgIHZhciBpbmRleE1hcCA9IGNhdGVnb3JpZXMubWFwKGZ1bmN0aW9uIChjYXRlZ29yeSkgeyByZXR1cm4gY29sdW1ucy5pbmRleE9mKGNhdGVnb3J5KTsgfSkuZmlsdGVyKGZ1bmN0aW9uIChpKSB7IHJldHVybiBpID49IDA7IH0pO1xuICAgIGlmIChpbmRleE1hcC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRleHQ6ICdBcG9sb2dpZXMsIGJ1dCAnICsgVXRpbHMubGlzdFRvUXVvdGVkQ29tbWFBbmQoY2F0ZWdvcmllcykgKyAnIGRvZXMgbm90IHJlcHJlc2VudCBwb3NzaWJsZSB0YWJsZSBjb2x1bW5zJyxcbiAgICAgICAgICAgIGFjdGlvbjoge31cbiAgICAgICAgfTtcbiAgICB9XG4gICAgdmFyIHRleHQgPSBcIlwiO1xuICAgIHZhciBtaXNzaW5nTWFwID0gY2F0ZWdvcmllcy5maWx0ZXIoZnVuY3Rpb24gKGNhdGVnb3J5KSB7IHJldHVybiBjb2x1bW5zLmluZGV4T2YoY2F0ZWdvcnkpIDwgMDsgfSk7XG4gICAgdmFyIHVzZWRNYXAgPSBjYXRlZ29yaWVzLmZpbHRlcihmdW5jdGlvbiAoY2F0ZWdvcnkpIHsgcmV0dXJuIGNvbHVtbnMuaW5kZXhPZihjYXRlZ29yeSkgPj0gMDsgfSk7XG4gICAgaWYgKG1pc3NpbmdNYXAubGVuZ3RoKSB7XG4gICAgICAgIHRleHQgPSBcIkkgaGFkIHRvIGRyb3AgXCIgKyBVdGlscy5saXN0VG9RdW90ZWRDb21tYUFuZChtaXNzaW5nTWFwKSArIFwiLiBCdXQgaGVyZSB5b3UgZ28gLi4uXFxuXCI7XG4gICAgfVxuICAgIHRleHQgKz0gXCJDcmVhdGluZyBhbmQgc3RhcnRpbmcgdGFibGUgd2l0aCBcIiArIFV0aWxzLmxpc3RUb1F1b3RlZENvbW1hQW5kKHVzZWRNYXApO1xuICAgIHJldHVybiB7XG4gICAgICAgIHRleHQ6IHRleHQsXG4gICAgICAgIGFjdGlvbjogeyB1cmw6IFwidGFibGVfXCIgKyBkb21haW4udG9Mb3dlckNhc2UoKSArIFwiP2NcIiArIGluZGV4TWFwLmpvaW4oJywnKSB9XG4gICAgfTtcbn1cbmV4cG9ydHMubWFrZVRhYmxlID0gbWFrZVRhYmxlO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
