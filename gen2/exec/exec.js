/**
 * Functionality to execute a certain response
 *
 * via a) commandline (e.g. browser startup)
 * @file
 */
"use strict";

var debug = require('debug');
var IFMatch = require('../match/ifmatch');
var debuglog = debug('dispatcher');
var child_process_1 = require('child_process');
var Match = require('../match/match');
(function (EnumResponseCode) {
    EnumResponseCode[EnumResponseCode["NOMATCH"] = 0] = "NOMATCH";
    EnumResponseCode[EnumResponseCode["EXEC"] = 1] = "EXEC";
    EnumResponseCode[EnumResponseCode["QUERY"] = 2] = "QUERY";
})(exports.EnumResponseCode || (exports.EnumResponseCode = {}));
var EnumResponseCode = exports.EnumResponseCode;
/**
 * Defines the interface for an analysis
 * reponse
 */
/*
export interface IResponse {
  rating : number,
  type : EnumResponseCode,
  query : string,
  context : { [key:string] :string},
  text : string,
  action : IAction,
  prompts : { [key :string ] : { text : string, description : any }; }


export const enum EnumActionType {
  STARTURL,
  STARTCMDLINE
}

export interface IAction {
  data : any,
  type : EnumActionType,
  pattern : string,
  concrete : string
}
}*/
//var exec = require('child_process').exec
function startBrowser(oUrlAction) {
    var cmd = '"%ProgramFiles(x86)%\\Google\\Chrome\\Application\\chrome.exe" --incognito -url "' + oUrlAction.concrete + '"';
    child_process_1.exec(cmd, function (error, stdout, stderr) {
        if (error) {
            console.error("exec error: " + error);
            return;
        }
        console.log("stdout: " + stdout);
        console.log("stderr: " + stderr);
    });
}
function startCommandLine(scmd) {
    var cmd = scmd.concrete;
    child_process_1.exec(cmd, function (error, stdout, stderr) {
        if (error) {
            console.error("exec error: " + error);
            return;
        }
        console.log("stdout: " + stdout);
        console.log("stderr: " + stderr);
    });
}
function expandContextIntoAction(oResult) {
    var pattern = oResult.action.pattern;
    Object.keys(oResult.context).forEach(function (sKey) {
        var regex = new RegExp('{' + sKey + '}', 'g');
        pattern = pattern.replace(regex, oResult.context[sKey]);
        pattern = pattern.replace(regex, oResult.context[sKey]);
    });
    oResult.action.concrete = pattern;
    return pattern;
}
exports.expandContextIntoAction = expandContextIntoAction;
/**
 * execute some starupt
 *
 */
function executeStartup(oResult, cb) {
    if (oResult.type !== 1 /* EXEC */) {
            return;
        }
    var action = oResult.action;
    if (oResult.action.type === 0 /* STARTURL */) {
            //var ptn = expandParametersInURL(oResult)
            startBrowser(action);
            return action.concrete;
        } else if (oResult.action.type === 1 /* STARTCMDLINE */) {
            startCommandLine(action);
        } else {
        var s = "Don't know how to start " + oResult.type + '\n for "' + oResult.query + '"';
        console.error(s);
        return s;
    }
}
function expandParametersInURL(oMergedContextResult) {
    var ptn = oMergedContextResult.result.pattern;
    Object.keys(oMergedContextResult.context).forEach(function (sKey) {
        var regex = new RegExp('{' + sKey + '}', 'g');
        ptn = ptn.replace(regex, oMergedContextResult.context[sKey]);
        ptn = ptn.replace(regex, oMergedContextResult.context[sKey]);
    });
    return ptn;
}
var inputFilterRules = require('../match/inputFilterRules');
var toolExecutors = {
    "xFLP": {},
    "xFLPD": {},
    "unit test": function unitTest(match) {
        var unittest = match.toolmatchresult.required["unit test"].matchedString;
        var url = inputFilterRules.getUnitTestUrl(unittest);
        return {
            text: "starting unit test \"" + unittest + "\"" + (url ? ' with url ' + url : 'no url :-('),
            action: { url: url }
        };
    },
    "wiki": function wiki(match) {
        var wiki = match.toolmatchresult.required["wiki"].matchedString;
        var url = inputFilterRules.getWikiUrl(wiki);
        return {
            text: "starting wiki " + wiki + (url ? ' with url ' + url : 'no url :-('),
            action: { url: url }
        };
    }
};
function execTool(match, bExplain) {
    //
    var exec = undefined;
    if (toolExecutors[match.tool.name]) {
        exec = toolExecutors[match.tool.name](match);
    }
    if (!exec) {
        exec = {
            text: "don't know how to execute " + match.tool.name + '\n'
        };
    }
    if (bExplain) {
        exec.text = exec.text + "\n" + Match.ToolMatch.dumpNice(match);
    }
    return exec;
    // TODO invoke tool specific starter
    /* if (oMergedContextResult.result.type === 'URL') {
      var ptn = expandParametersInURL(oMergedContextResult)
      startBrowser(ptn)
      return ptn
    } else {
      var s = ("Don't know how to start " + oMergedContextResult.result.type + '\n for "' + oMergedContextResult.query + '"')
      debuglog(s)
      return s
    }*/
}
exports.execTool = execTool;
//  executeStartup: executeStartup
//}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9leGVjL2V4ZWMudHMiLCJleGVjL2V4ZWMuanMiXSwibmFtZXMiOlsiZGVidWciLCJyZXF1aXJlIiwiSUZNYXRjaCIsImRlYnVnbG9nIiwiY2hpbGRfcHJvY2Vzc18xIiwiTWF0Y2giLCJFbnVtUmVzcG9uc2VDb2RlIiwiZXhwb3J0cyIsInN0YXJ0QnJvd3NlciIsIm9VcmxBY3Rpb24iLCJjbWQiLCJjb25jcmV0ZSIsImV4ZWMiLCJlcnJvciIsInN0ZG91dCIsInN0ZGVyciIsImNvbnNvbGUiLCJsb2ciLCJzdGFydENvbW1hbmRMaW5lIiwic2NtZCIsImV4cGFuZENvbnRleHRJbnRvQWN0aW9uIiwib1Jlc3VsdCIsInBhdHRlcm4iLCJhY3Rpb24iLCJPYmplY3QiLCJrZXlzIiwiY29udGV4dCIsImZvckVhY2giLCJzS2V5IiwicmVnZXgiLCJSZWdFeHAiLCJyZXBsYWNlIiwiZXhlY3V0ZVN0YXJ0dXAiLCJjYiIsInR5cGUiLCJzIiwicXVlcnkiLCJleHBhbmRQYXJhbWV0ZXJzSW5VUkwiLCJvTWVyZ2VkQ29udGV4dFJlc3VsdCIsInB0biIsInJlc3VsdCIsImlucHV0RmlsdGVyUnVsZXMiLCJ0b29sRXhlY3V0b3JzIiwibWF0Y2giLCJ1bml0dGVzdCIsInRvb2xtYXRjaHJlc3VsdCIsInJlcXVpcmVkIiwibWF0Y2hlZFN0cmluZyIsInVybCIsImdldFVuaXRUZXN0VXJsIiwidGV4dCIsIndpa2kiLCJnZXRXaWtpVXJsIiwiZXhlY1Rvb2wiLCJiRXhwbGFpbiIsInVuZGVmaW5lZCIsInRvb2wiLCJuYW1lIiwiVG9vbE1hdGNoIiwiZHVtcE5pY2UiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7QUNNQTs7QURHQSxJQUFZQSxRQUFLQyxRQUFNLE9BQU4sQ0FBakI7QUFFQSxJQUFhQyxVQUFPRCxRQUFNLGtCQUFOLENBQXBCO0FBRUEsSUFBTUUsV0FBV0gsTUFBTSxZQUFOLENBQWpCO0FBRUEsSUFBQUksa0JBQUFILFFBQXFCLGVBQXJCLENBQUE7QUFH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QUFGSixTQUFQO0FBSUQsS0FWaUI7QUFXbEIsWUFBUyxjQUFTTCxLQUFULEVBQW1DO0FBQzFDLFlBQUlRLE9BQU9SLE1BQU1FLGVBQU4sQ0FBc0JDLFFBQXRCLENBQStCLE1BQS9CLEVBQXVDQyxhQUFsRDtBQUNBLFlBQUlDLE1BQU1QLGlCQUFpQlcsVUFBakIsQ0FBNEJELElBQTVCLENBQVY7QUFDQSxlQUFPO0FBQ0xELGtCQUFPLG1CQUFtQkMsSUFBbkIsSUFBMkJILE1BQU8sZUFBZUEsR0FBdEIsR0FBOEIsWUFBekQsQ0FERjtBQUVMekIsb0JBQVMsRUFBRXlCLEtBQUtBLEdBQVA7QUFGSixTQUFQO0FBSUQ7QUFsQmlCLENBQXBCO0FBcUJBLFNBQUFLLFFBQUEsQ0FBeUJWLEtBQXpCLEVBQW1EVyxRQUFuRCxFQUFzRTtBQUU5RDtBQUNKLFFBQUkxQyxPQUFPMkMsU0FBWDtBQUNBLFFBQUliLGNBQWNDLE1BQU1hLElBQU4sQ0FBV0MsSUFBekIsQ0FBSixFQUFvQztBQUNsQzdDLGVBQU84QixjQUFjQyxNQUFNYSxJQUFOLENBQVdDLElBQXpCLEVBQStCZCxLQUEvQixDQUFQO0FBRUQ7QUFDRCxRQUFJLENBQUMvQixJQUFMLEVBQVc7QUFDVEEsZUFBTztBQUNMc0Msa0JBQU8sK0JBQStCUCxNQUFNYSxJQUFOLENBQVdDLElBQTFDLEdBQWlEO0FBRG5ELFNBQVA7QUFHRDtBQUNELFFBQUtILFFBQUwsRUFBZ0I7QUFDZDFDLGFBQUtzQyxJQUFMLEdBQVl0QyxLQUFLc0MsSUFBTCxHQUFZLElBQVosR0FBbUI3QyxNQUFNcUQsU0FBTixDQUFnQkMsUUFBaEIsQ0FBeUJoQixLQUF6QixDQUEvQjtBQUNEO0FBQ0QsV0FBTy9CLElBQVA7QUFFQTtBQUNBOzs7Ozs7Ozs7QUFTRDtBQTVCYUwsUUFBQThDLFFBQUEsR0FBUUEsUUFBUjtBQStCaEI7QUFDQSIsImZpbGUiOiJleGVjL2V4ZWMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogRnVuY3Rpb25hbGl0eSB0byBleGVjdXRlIGEgY2VydGFpbiByZXNwb25zZVxyXG4gKlxyXG4gKiB2aWEgYSkgY29tbWFuZGxpbmUgKGUuZy4gYnJvd3NlciBzdGFydHVwKVxyXG4gKiBAZmlsZVxyXG4gKi9cclxuXHJcbmltcG9ydCAqIGFzIGludGYgZnJvbSAnY29uc3RhbnRzJztcclxuXHJcbmltcG9ydCAqIGFzIGRlYnVnIGZyb20gJ2RlYnVnJztcclxuXHJcbmltcG9ydCAqICBhcyBJRk1hdGNoIGZyb20gJy4uL21hdGNoL2lmbWF0Y2gnO1xyXG5cclxuY29uc3QgZGVidWdsb2cgPSBkZWJ1ZygnZGlzcGF0Y2hlcicpXHJcblxyXG5pbXBvcnQgeyBleGVjIH0gZnJvbSAnY2hpbGRfcHJvY2Vzcyc7XHJcblxyXG5pbXBvcnQgKiBhcyBJTWF0Y2ggZnJvbSAnLi4vbWF0Y2gvaWZtYXRjaCc7XHJcbmltcG9ydCAqIGFzIE1hdGNoIGZyb20gJy4uL21hdGNoL21hdGNoJztcclxuXHJcblxyXG5leHBvcnQgY29uc3QgZW51bSBFbnVtUmVzcG9uc2VDb2RlIHtcclxuICBOT01BVENIID0gMCxcclxuICBFWEVDLFxyXG4gIFFVRVJZXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBEZWZpbmVzIHRoZSBpbnRlcmZhY2UgZm9yIGFuIGFuYWx5c2lzXHJcbiAqIHJlcG9uc2VcclxuICovXHJcbi8qXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVJlc3BvbnNlIHtcclxuICByYXRpbmcgOiBudW1iZXIsXHJcbiAgdHlwZSA6IEVudW1SZXNwb25zZUNvZGUsXHJcbiAgcXVlcnkgOiBzdHJpbmcsXHJcbiAgY29udGV4dCA6IHsgW2tleTpzdHJpbmddIDpzdHJpbmd9LFxyXG4gIHRleHQgOiBzdHJpbmcsXHJcbiAgYWN0aW9uIDogSUFjdGlvbixcclxuICBwcm9tcHRzIDogeyBba2V5IDpzdHJpbmcgXSA6IHsgdGV4dCA6IHN0cmluZywgZGVzY3JpcHRpb24gOiBhbnkgfTsgfVxyXG5cclxuXHJcbmV4cG9ydCBjb25zdCBlbnVtIEVudW1BY3Rpb25UeXBlIHtcclxuICBTVEFSVFVSTCxcclxuICBTVEFSVENNRExJTkVcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJQWN0aW9uIHtcclxuICBkYXRhIDogYW55LFxyXG4gIHR5cGUgOiBFbnVtQWN0aW9uVHlwZSxcclxuICBwYXR0ZXJuIDogc3RyaW5nLFxyXG4gIGNvbmNyZXRlIDogc3RyaW5nXHJcbn1cclxufSovXHJcblxyXG4vL3ZhciBleGVjID0gcmVxdWlyZSgnY2hpbGRfcHJvY2VzcycpLmV4ZWNcclxuXHJcbmZ1bmN0aW9uIHN0YXJ0QnJvd3NlciAob1VybEFjdGlvbiA6IElGTWF0Y2guSUFjdGlvbikge1xyXG4gIHZhciBjbWQgPVxyXG4gICdcIiVQcm9ncmFtRmlsZXMoeDg2KSVcXFxcR29vZ2xlXFxcXENocm9tZVxcXFxBcHBsaWNhdGlvblxcXFxjaHJvbWUuZXhlXCIgLS1pbmNvZ25pdG8gLXVybCBcIicgKyBvVXJsQWN0aW9uLmNvbmNyZXRlICsgJ1wiJ1xyXG4gIGV4ZWMoY21kLCBmdW5jdGlvbiAoZXJyb3IsIHN0ZG91dCwgc3RkZXJyKSB7XHJcbiAgICBpZiAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcihgZXhlYyBlcnJvcjogJHtlcnJvcn1gKVxyXG4gICAgICByZXR1cm5cclxuICAgIH1cclxuICAgIGNvbnNvbGUubG9nKGBzdGRvdXQ6ICR7c3Rkb3V0fWApXHJcbiAgICBjb25zb2xlLmxvZyhgc3RkZXJyOiAke3N0ZGVycn1gKVxyXG4gIH0pXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHN0YXJ0Q29tbWFuZExpbmUgKHNjbWQgOiBJRk1hdGNoLklBY3Rpb24pIHtcclxuICB2YXIgY21kID0gc2NtZC5jb25jcmV0ZTtcclxuICBleGVjKGNtZCwgZnVuY3Rpb24gKGVycm9yLCBzdGRvdXQsIHN0ZGVycikge1xyXG4gICAgaWYgKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoYGV4ZWMgZXJyb3I6ICR7ZXJyb3J9YClcclxuICAgICAgcmV0dXJuXHJcbiAgICB9XHJcbiAgICBjb25zb2xlLmxvZyhgc3Rkb3V0OiAke3N0ZG91dH1gKVxyXG4gICAgY29uc29sZS5sb2coYHN0ZGVycjogJHtzdGRlcnJ9YClcclxuICB9KVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGV4cGFuZENvbnRleHRJbnRvQWN0aW9uIChvUmVzdWx0IDogSUZNYXRjaC5JUmVzcG9uc2UpIHtcclxuICB2YXIgcGF0dGVybiA9IG9SZXN1bHQuYWN0aW9uLnBhdHRlcm5cclxuICBPYmplY3Qua2V5cyhvUmVzdWx0LmNvbnRleHQpLmZvckVhY2goZnVuY3Rpb24gKHNLZXkpIHtcclxuICAgIHZhciByZWdleCA9IG5ldyBSZWdFeHAoJ3snICsgc0tleSArICd9JywgJ2cnKVxyXG4gICAgcGF0dGVybiA9IHBhdHRlcm4ucmVwbGFjZShyZWdleCwgb1Jlc3VsdC5jb250ZXh0W3NLZXldKVxyXG4gICAgcGF0dGVybiA9IHBhdHRlcm4ucmVwbGFjZShyZWdleCwgb1Jlc3VsdC5jb250ZXh0W3NLZXldKVxyXG4gIH0pXHJcbiAgb1Jlc3VsdC5hY3Rpb24uY29uY3JldGUgPSBwYXR0ZXJuO1xyXG4gIHJldHVybiBwYXR0ZXJuXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBleGVjdXRlIHNvbWUgc3RhcnVwdFxyXG4gKlxyXG4gKi9cclxuZnVuY3Rpb24gZXhlY3V0ZVN0YXJ0dXAgKG9SZXN1bHQ6IElGTWF0Y2guSVJlc3BvbnNlLCBjYjogKGVyciA6IGFueSwgYSA6IElGTWF0Y2guSVJlc3BvbnNlKSA9PiBzdHJpbmcpIHtcclxuICBpZiAob1Jlc3VsdC50eXBlICE9PSBJRk1hdGNoLkVudW1SZXNwb25zZUNvZGUuRVhFQykge1xyXG4gICAgcmV0dXJuXHJcbiAgfVxyXG4gIHZhciBhY3Rpb24gPSBvUmVzdWx0LmFjdGlvbjtcclxuICBpZihvUmVzdWx0LmFjdGlvbi50eXBlID09PSBJRk1hdGNoLkVudW1BY3Rpb25UeXBlLlNUQVJUVVJMKSB7XHJcbiAgICAvL3ZhciBwdG4gPSBleHBhbmRQYXJhbWV0ZXJzSW5VUkwob1Jlc3VsdClcclxuICAgIHN0YXJ0QnJvd3NlcihhY3Rpb24pXHJcbiAgICByZXR1cm4gYWN0aW9uLmNvbmNyZXRlXHJcbiAgfSBlbHNlIGlmKG9SZXN1bHQuYWN0aW9uLnR5cGUgPT09IElGTWF0Y2guRW51bUFjdGlvblR5cGUuU1RBUlRDTURMSU5FKSB7XHJcbiAgICBzdGFydENvbW1hbmRMaW5lKGFjdGlvbik7XHJcbiAgfSBlbHNlIHtcclxuICAgIHZhciBzID0gKFwiRG9uJ3Qga25vdyBob3cgdG8gc3RhcnQgXCIgKyBvUmVzdWx0LnR5cGUgKyAnXFxuIGZvciBcIicgKyBvUmVzdWx0LnF1ZXJ5ICsgJ1wiJylcclxuICAgIGNvbnNvbGUuZXJyb3IocylcclxuICAgIHJldHVybiBzXHJcbiAgfVxyXG59XHJcblxyXG4gIGZ1bmN0aW9uIGV4cGFuZFBhcmFtZXRlcnNJblVSTCAob01lcmdlZENvbnRleHRSZXN1bHQpIHtcclxuICAgIHZhciBwdG4gPSBvTWVyZ2VkQ29udGV4dFJlc3VsdC5yZXN1bHQucGF0dGVyblxyXG4gICAgT2JqZWN0LmtleXMob01lcmdlZENvbnRleHRSZXN1bHQuY29udGV4dCkuZm9yRWFjaChmdW5jdGlvbiAoc0tleSkge1xyXG4gICAgICB2YXIgcmVnZXggPSBuZXcgUmVnRXhwKCd7JyArIHNLZXkgKyAnfScsICdnJylcclxuICAgICAgcHRuID0gcHRuLnJlcGxhY2UocmVnZXgsIG9NZXJnZWRDb250ZXh0UmVzdWx0LmNvbnRleHRbc0tleV0pXHJcbiAgICAgIHB0biA9IHB0bi5yZXBsYWNlKHJlZ2V4LCBvTWVyZ2VkQ29udGV4dFJlc3VsdC5jb250ZXh0W3NLZXldKVxyXG4gICAgfSlcclxuICAgIHJldHVybiBwdG5cclxuICB9XHJcblxyXG5pbXBvcnQgKiBhcyBpbnB1dEZpbHRlclJ1bGVzIGZyb20gJy4uL21hdGNoL2lucHV0RmlsdGVyUnVsZXMnO1xyXG5cclxudmFyIHRvb2xFeGVjdXRvcnMgPSB7XHJcbiAgXCJ4RkxQXCI6IHt9LFxyXG4gIFwieEZMUERcIiA6IHt9LFxyXG4gIFwidW5pdCB0ZXN0XCIgOiBmdW5jdGlvbihtYXRjaCA6IElGTWF0Y2guSVRvb2xNYXRjaCkge1xyXG4gICAgdmFyIHVuaXR0ZXN0ID0gbWF0Y2gudG9vbG1hdGNocmVzdWx0LnJlcXVpcmVkW1widW5pdCB0ZXN0XCJdLm1hdGNoZWRTdHJpbmc7XHJcbiAgICB2YXIgdXJsID0gaW5wdXRGaWx0ZXJSdWxlcy5nZXRVbml0VGVzdFVybCh1bml0dGVzdCk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB0ZXh0IDogXCJzdGFydGluZyB1bml0IHRlc3QgXFxcIlwiICsgdW5pdHRlc3QgKyBcIlxcXCJcIisgICh1cmw/ICAoJyB3aXRoIHVybCAnICsgdXJsICkgOiAnbm8gdXJsIDotKCcgKSxcclxuICAgICAgYWN0aW9uIDogeyB1cmw6IHVybCB9XHJcbiAgICB9XHJcbiAgfSxcclxuICBcIndpa2lcIiA6IGZ1bmN0aW9uKG1hdGNoIDogSUZNYXRjaC5JVG9vbE1hdGNoKSB7XHJcbiAgICB2YXIgd2lraSA9IG1hdGNoLnRvb2xtYXRjaHJlc3VsdC5yZXF1aXJlZFtcIndpa2lcIl0ubWF0Y2hlZFN0cmluZztcclxuICAgIHZhciB1cmwgPSBpbnB1dEZpbHRlclJ1bGVzLmdldFdpa2lVcmwod2lraSk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB0ZXh0IDogXCJzdGFydGluZyB3aWtpIFwiICsgd2lraSArICh1cmw/ICAoJyB3aXRoIHVybCAnICsgdXJsICkgOiAnbm8gdXJsIDotKCcgKSxcclxuICAgICAgYWN0aW9uIDogeyB1cmw6IHVybCB9XHJcbiAgICB9XHJcbiAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGV4ZWNUb29sKG1hdGNoOiBJTWF0Y2guSVRvb2xNYXRjaCwgYkV4cGxhaW4/IDogYm9vbGVhbikgOiB7IHRleHQgOiBzdHJpbmcsXHJcbiAgICAgIGFjdGlvbiA6IGFueSB9IHtcclxuICAgICAgICAvL1xyXG4gICAgdmFyIGV4ZWMgPSB1bmRlZmluZWQ7XHJcbiAgICBpZiAodG9vbEV4ZWN1dG9yc1ttYXRjaC50b29sLm5hbWVdKSB7XHJcbiAgICAgIGV4ZWMgPSB0b29sRXhlY3V0b3JzW21hdGNoLnRvb2wubmFtZV0obWF0Y2gpO1xyXG5cclxuICAgIH1cclxuICAgIGlmICghZXhlYykge1xyXG4gICAgICBleGVjID0ge1xyXG4gICAgICAgIHRleHQgOiBcImRvbid0IGtub3cgaG93IHRvIGV4ZWN1dGUgXCIgKyBtYXRjaC50b29sLm5hbWUgKyAnXFxuJ1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoIGJFeHBsYWluICkge1xyXG4gICAgICBleGVjLnRleHQgPSBleGVjLnRleHQgKyBcIlxcblwiICsgTWF0Y2guVG9vbE1hdGNoLmR1bXBOaWNlKG1hdGNoKTtcclxuICAgIH1cclxuICAgIHJldHVybiBleGVjO1xyXG5cclxuICAgIC8vIFRPRE8gaW52b2tlIHRvb2wgc3BlY2lmaWMgc3RhcnRlclxyXG4gICAgLyogaWYgKG9NZXJnZWRDb250ZXh0UmVzdWx0LnJlc3VsdC50eXBlID09PSAnVVJMJykge1xyXG4gICAgICB2YXIgcHRuID0gZXhwYW5kUGFyYW1ldGVyc0luVVJMKG9NZXJnZWRDb250ZXh0UmVzdWx0KVxyXG4gICAgICBzdGFydEJyb3dzZXIocHRuKVxyXG4gICAgICByZXR1cm4gcHRuXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB2YXIgcyA9IChcIkRvbid0IGtub3cgaG93IHRvIHN0YXJ0IFwiICsgb01lcmdlZENvbnRleHRSZXN1bHQucmVzdWx0LnR5cGUgKyAnXFxuIGZvciBcIicgKyBvTWVyZ2VkQ29udGV4dFJlc3VsdC5xdWVyeSArICdcIicpXHJcbiAgICAgIGRlYnVnbG9nKHMpXHJcbiAgICAgIHJldHVybiBzXHJcbiAgICB9Ki9cclxuICB9XHJcblxyXG5cclxuLy8gIGV4ZWN1dGVTdGFydHVwOiBleGVjdXRlU3RhcnR1cFxyXG4vL31cclxuIiwiLyoqXG4gKiBGdW5jdGlvbmFsaXR5IHRvIGV4ZWN1dGUgYSBjZXJ0YWluIHJlc3BvbnNlXG4gKlxuICogdmlhIGEpIGNvbW1hbmRsaW5lIChlLmcuIGJyb3dzZXIgc3RhcnR1cClcbiAqIEBmaWxlXG4gKi9cblwidXNlIHN0cmljdFwiO1xudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKTtcbnZhciBJRk1hdGNoID0gcmVxdWlyZSgnLi4vbWF0Y2gvaWZtYXRjaCcpO1xudmFyIGRlYnVnbG9nID0gZGVidWcoJ2Rpc3BhdGNoZXInKTtcbnZhciBjaGlsZF9wcm9jZXNzXzEgPSByZXF1aXJlKCdjaGlsZF9wcm9jZXNzJyk7XG52YXIgTWF0Y2ggPSByZXF1aXJlKCcuLi9tYXRjaC9tYXRjaCcpO1xuKGZ1bmN0aW9uIChFbnVtUmVzcG9uc2VDb2RlKSB7XG4gICAgRW51bVJlc3BvbnNlQ29kZVtFbnVtUmVzcG9uc2VDb2RlW1wiTk9NQVRDSFwiXSA9IDBdID0gXCJOT01BVENIXCI7XG4gICAgRW51bVJlc3BvbnNlQ29kZVtFbnVtUmVzcG9uc2VDb2RlW1wiRVhFQ1wiXSA9IDFdID0gXCJFWEVDXCI7XG4gICAgRW51bVJlc3BvbnNlQ29kZVtFbnVtUmVzcG9uc2VDb2RlW1wiUVVFUllcIl0gPSAyXSA9IFwiUVVFUllcIjtcbn0pKGV4cG9ydHMuRW51bVJlc3BvbnNlQ29kZSB8fCAoZXhwb3J0cy5FbnVtUmVzcG9uc2VDb2RlID0ge30pKTtcbnZhciBFbnVtUmVzcG9uc2VDb2RlID0gZXhwb3J0cy5FbnVtUmVzcG9uc2VDb2RlO1xuLyoqXG4gKiBEZWZpbmVzIHRoZSBpbnRlcmZhY2UgZm9yIGFuIGFuYWx5c2lzXG4gKiByZXBvbnNlXG4gKi9cbi8qXG5leHBvcnQgaW50ZXJmYWNlIElSZXNwb25zZSB7XG4gIHJhdGluZyA6IG51bWJlcixcbiAgdHlwZSA6IEVudW1SZXNwb25zZUNvZGUsXG4gIHF1ZXJ5IDogc3RyaW5nLFxuICBjb250ZXh0IDogeyBba2V5OnN0cmluZ10gOnN0cmluZ30sXG4gIHRleHQgOiBzdHJpbmcsXG4gIGFjdGlvbiA6IElBY3Rpb24sXG4gIHByb21wdHMgOiB7IFtrZXkgOnN0cmluZyBdIDogeyB0ZXh0IDogc3RyaW5nLCBkZXNjcmlwdGlvbiA6IGFueSB9OyB9XG5cblxuZXhwb3J0IGNvbnN0IGVudW0gRW51bUFjdGlvblR5cGUge1xuICBTVEFSVFVSTCxcbiAgU1RBUlRDTURMSU5FXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUFjdGlvbiB7XG4gIGRhdGEgOiBhbnksXG4gIHR5cGUgOiBFbnVtQWN0aW9uVHlwZSxcbiAgcGF0dGVybiA6IHN0cmluZyxcbiAgY29uY3JldGUgOiBzdHJpbmdcbn1cbn0qL1xuLy92YXIgZXhlYyA9IHJlcXVpcmUoJ2NoaWxkX3Byb2Nlc3MnKS5leGVjXG5mdW5jdGlvbiBzdGFydEJyb3dzZXIob1VybEFjdGlvbikge1xuICAgIHZhciBjbWQgPSAnXCIlUHJvZ3JhbUZpbGVzKHg4NiklXFxcXEdvb2dsZVxcXFxDaHJvbWVcXFxcQXBwbGljYXRpb25cXFxcY2hyb21lLmV4ZVwiIC0taW5jb2duaXRvIC11cmwgXCInICsgb1VybEFjdGlvbi5jb25jcmV0ZSArICdcIic7XG4gICAgY2hpbGRfcHJvY2Vzc18xLmV4ZWMoY21kLCBmdW5jdGlvbiAoZXJyb3IsIHN0ZG91dCwgc3RkZXJyKSB7XG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcImV4ZWMgZXJyb3I6IFwiICsgZXJyb3IpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnNvbGUubG9nKFwic3Rkb3V0OiBcIiArIHN0ZG91dCk7XG4gICAgICAgIGNvbnNvbGUubG9nKFwic3RkZXJyOiBcIiArIHN0ZGVycik7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBzdGFydENvbW1hbmRMaW5lKHNjbWQpIHtcbiAgICB2YXIgY21kID0gc2NtZC5jb25jcmV0ZTtcbiAgICBjaGlsZF9wcm9jZXNzXzEuZXhlYyhjbWQsIGZ1bmN0aW9uIChlcnJvciwgc3Rkb3V0LCBzdGRlcnIpIHtcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiZXhlYyBlcnJvcjogXCIgKyBlcnJvcik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc29sZS5sb2coXCJzdGRvdXQ6IFwiICsgc3Rkb3V0KTtcbiAgICAgICAgY29uc29sZS5sb2coXCJzdGRlcnI6IFwiICsgc3RkZXJyKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGV4cGFuZENvbnRleHRJbnRvQWN0aW9uKG9SZXN1bHQpIHtcbiAgICB2YXIgcGF0dGVybiA9IG9SZXN1bHQuYWN0aW9uLnBhdHRlcm47XG4gICAgT2JqZWN0LmtleXMob1Jlc3VsdC5jb250ZXh0KS5mb3JFYWNoKGZ1bmN0aW9uIChzS2V5KSB7XG4gICAgICAgIHZhciByZWdleCA9IG5ldyBSZWdFeHAoJ3snICsgc0tleSArICd9JywgJ2cnKTtcbiAgICAgICAgcGF0dGVybiA9IHBhdHRlcm4ucmVwbGFjZShyZWdleCwgb1Jlc3VsdC5jb250ZXh0W3NLZXldKTtcbiAgICAgICAgcGF0dGVybiA9IHBhdHRlcm4ucmVwbGFjZShyZWdleCwgb1Jlc3VsdC5jb250ZXh0W3NLZXldKTtcbiAgICB9KTtcbiAgICBvUmVzdWx0LmFjdGlvbi5jb25jcmV0ZSA9IHBhdHRlcm47XG4gICAgcmV0dXJuIHBhdHRlcm47XG59XG5leHBvcnRzLmV4cGFuZENvbnRleHRJbnRvQWN0aW9uID0gZXhwYW5kQ29udGV4dEludG9BY3Rpb247XG4vKipcbiAqIGV4ZWN1dGUgc29tZSBzdGFydXB0XG4gKlxuICovXG5mdW5jdGlvbiBleGVjdXRlU3RhcnR1cChvUmVzdWx0LCBjYikge1xuICAgIGlmIChvUmVzdWx0LnR5cGUgIT09IDEgLyogRVhFQyAqLykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBhY3Rpb24gPSBvUmVzdWx0LmFjdGlvbjtcbiAgICBpZiAob1Jlc3VsdC5hY3Rpb24udHlwZSA9PT0gMCAvKiBTVEFSVFVSTCAqLykge1xuICAgICAgICAvL3ZhciBwdG4gPSBleHBhbmRQYXJhbWV0ZXJzSW5VUkwob1Jlc3VsdClcbiAgICAgICAgc3RhcnRCcm93c2VyKGFjdGlvbik7XG4gICAgICAgIHJldHVybiBhY3Rpb24uY29uY3JldGU7XG4gICAgfVxuICAgIGVsc2UgaWYgKG9SZXN1bHQuYWN0aW9uLnR5cGUgPT09IDEgLyogU1RBUlRDTURMSU5FICovKSB7XG4gICAgICAgIHN0YXJ0Q29tbWFuZExpbmUoYWN0aW9uKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHZhciBzID0gKFwiRG9uJ3Qga25vdyBob3cgdG8gc3RhcnQgXCIgKyBvUmVzdWx0LnR5cGUgKyAnXFxuIGZvciBcIicgKyBvUmVzdWx0LnF1ZXJ5ICsgJ1wiJyk7XG4gICAgICAgIGNvbnNvbGUuZXJyb3Iocyk7XG4gICAgICAgIHJldHVybiBzO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGV4cGFuZFBhcmFtZXRlcnNJblVSTChvTWVyZ2VkQ29udGV4dFJlc3VsdCkge1xuICAgIHZhciBwdG4gPSBvTWVyZ2VkQ29udGV4dFJlc3VsdC5yZXN1bHQucGF0dGVybjtcbiAgICBPYmplY3Qua2V5cyhvTWVyZ2VkQ29udGV4dFJlc3VsdC5jb250ZXh0KS5mb3JFYWNoKGZ1bmN0aW9uIChzS2V5KSB7XG4gICAgICAgIHZhciByZWdleCA9IG5ldyBSZWdFeHAoJ3snICsgc0tleSArICd9JywgJ2cnKTtcbiAgICAgICAgcHRuID0gcHRuLnJlcGxhY2UocmVnZXgsIG9NZXJnZWRDb250ZXh0UmVzdWx0LmNvbnRleHRbc0tleV0pO1xuICAgICAgICBwdG4gPSBwdG4ucmVwbGFjZShyZWdleCwgb01lcmdlZENvbnRleHRSZXN1bHQuY29udGV4dFtzS2V5XSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHB0bjtcbn1cbnZhciBpbnB1dEZpbHRlclJ1bGVzID0gcmVxdWlyZSgnLi4vbWF0Y2gvaW5wdXRGaWx0ZXJSdWxlcycpO1xudmFyIHRvb2xFeGVjdXRvcnMgPSB7XG4gICAgXCJ4RkxQXCI6IHt9LFxuICAgIFwieEZMUERcIjoge30sXG4gICAgXCJ1bml0IHRlc3RcIjogZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgIHZhciB1bml0dGVzdCA9IG1hdGNoLnRvb2xtYXRjaHJlc3VsdC5yZXF1aXJlZFtcInVuaXQgdGVzdFwiXS5tYXRjaGVkU3RyaW5nO1xuICAgICAgICB2YXIgdXJsID0gaW5wdXRGaWx0ZXJSdWxlcy5nZXRVbml0VGVzdFVybCh1bml0dGVzdCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0ZXh0OiBcInN0YXJ0aW5nIHVuaXQgdGVzdCBcXFwiXCIgKyB1bml0dGVzdCArIFwiXFxcIlwiICsgKHVybCA/ICgnIHdpdGggdXJsICcgKyB1cmwpIDogJ25vIHVybCA6LSgnKSxcbiAgICAgICAgICAgIGFjdGlvbjogeyB1cmw6IHVybCB9XG4gICAgICAgIH07XG4gICAgfSxcbiAgICBcIndpa2lcIjogZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgIHZhciB3aWtpID0gbWF0Y2gudG9vbG1hdGNocmVzdWx0LnJlcXVpcmVkW1wid2lraVwiXS5tYXRjaGVkU3RyaW5nO1xuICAgICAgICB2YXIgdXJsID0gaW5wdXRGaWx0ZXJSdWxlcy5nZXRXaWtpVXJsKHdpa2kpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdGV4dDogXCJzdGFydGluZyB3aWtpIFwiICsgd2lraSArICh1cmwgPyAoJyB3aXRoIHVybCAnICsgdXJsKSA6ICdubyB1cmwgOi0oJyksXG4gICAgICAgICAgICBhY3Rpb246IHsgdXJsOiB1cmwgfVxuICAgICAgICB9O1xuICAgIH1cbn07XG5mdW5jdGlvbiBleGVjVG9vbChtYXRjaCwgYkV4cGxhaW4pIHtcbiAgICAvL1xuICAgIHZhciBleGVjID0gdW5kZWZpbmVkO1xuICAgIGlmICh0b29sRXhlY3V0b3JzW21hdGNoLnRvb2wubmFtZV0pIHtcbiAgICAgICAgZXhlYyA9IHRvb2xFeGVjdXRvcnNbbWF0Y2gudG9vbC5uYW1lXShtYXRjaCk7XG4gICAgfVxuICAgIGlmICghZXhlYykge1xuICAgICAgICBleGVjID0ge1xuICAgICAgICAgICAgdGV4dDogXCJkb24ndCBrbm93IGhvdyB0byBleGVjdXRlIFwiICsgbWF0Y2gudG9vbC5uYW1lICsgJ1xcbidcbiAgICAgICAgfTtcbiAgICB9XG4gICAgaWYgKGJFeHBsYWluKSB7XG4gICAgICAgIGV4ZWMudGV4dCA9IGV4ZWMudGV4dCArIFwiXFxuXCIgKyBNYXRjaC5Ub29sTWF0Y2guZHVtcE5pY2UobWF0Y2gpO1xuICAgIH1cbiAgICByZXR1cm4gZXhlYztcbiAgICAvLyBUT0RPIGludm9rZSB0b29sIHNwZWNpZmljIHN0YXJ0ZXJcbiAgICAvKiBpZiAob01lcmdlZENvbnRleHRSZXN1bHQucmVzdWx0LnR5cGUgPT09ICdVUkwnKSB7XG4gICAgICB2YXIgcHRuID0gZXhwYW5kUGFyYW1ldGVyc0luVVJMKG9NZXJnZWRDb250ZXh0UmVzdWx0KVxuICAgICAgc3RhcnRCcm93c2VyKHB0bilcbiAgICAgIHJldHVybiBwdG5cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHMgPSAoXCJEb24ndCBrbm93IGhvdyB0byBzdGFydCBcIiArIG9NZXJnZWRDb250ZXh0UmVzdWx0LnJlc3VsdC50eXBlICsgJ1xcbiBmb3IgXCInICsgb01lcmdlZENvbnRleHRSZXN1bHQucXVlcnkgKyAnXCInKVxuICAgICAgZGVidWdsb2cocylcbiAgICAgIHJldHVybiBzXG4gICAgfSovXG59XG5leHBvcnRzLmV4ZWNUb29sID0gZXhlY1Rvb2w7XG4vLyAgZXhlY3V0ZVN0YXJ0dXA6IGV4ZWN1dGVTdGFydHVwXG4vL31cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
