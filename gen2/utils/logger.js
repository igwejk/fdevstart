/**
 * a simple logger utility
 *
 *
 * There are two types of logs ( append and overwrite, default is append)
 */
"use strict";
// <reference path="../../lib/node-4.d.ts" />

var debug = require("debug");
var debuglog = debug('logger');
;
var perfs = {};
function logPerf(sString) {
    if (!this || !this.enabled) {
        return;
    }
    var label = 'perf' + this.name;
    console.log('Perf' + this.name);
    if (this.first === 0) {
        this.first = Date.now();
        this.last = this.first;
    } else {
        var t = Date.now();
        console.log('Perf' + this.name + ' delta: ' + String("      " + (t - this.last)).slice(-6) + ' total: ' + String("      " + (t - this.first)).slice(-6));
        this.last = t;
    }
    if (this.on[sString]) {
        console.timeEnd(sString);
        delete this.on[sString];
    } else {
        console.time(sString);
        this.on[sString] = 1;
    }
}
function perf(string) {
    perfs[string] = { name: string, last: 0, first: 0, on: {}, enabled: false };
    if (debug('perf' + string).enabled) {
        perfs[string].enabled = true;
    }
    return logPerf.bind(perfs[string]);
}
exports.perf = perf;
var fs = require("fs");
var loggers = {};
var os = require('os');
function getWritableDir() {
    // return process.env[(process.platform == 'win32') ? 'USERPROFILE' : 'HOME'];
    return os.tmpdir();
}
function setupOnce() {
    var home = getWritableDir();
    try {
        fs.mkdirSync(home + '/' + 'fdevstart');
    } catch (e) {}
    try {
        fs.mkdirSync(home + '/fdevstart/logs');
    } catch (e) {}
}
setupOnce();
function getFileName(name) {
    return os.tmpdir() + '/fdevstart/logs/' + name + ".log";
}
exports._test = {
    getFileName: getFileName
};
function logIt(logger, arg) {
    var text;
    if (typeof arg === "string") {
        text = arg;
    } else if (arg instanceof Error) {
        text = "Error:" + arg.message + " " + arg.stack;
    }
    if (!text) {
        throw new Error("Illegal argument to log");
    }
    var filename = getFileName(logger.name);
    var d = new Date();
    var n = d.toUTCString() + "\t" + text;
    debuglog('writing log entry to ' + filename + ' ' + n);
    fs.writeFileSync(filename, n, { encoding: 'utf-8', flag: 'a' });
}
function logger(name, flags) {
    if (flags !== 'a' && flags !== '' && flags !== undefined) {
        throw new Error('only a allowed as flags');
    }
    flags = flags === undefined ? 'a' : flags;
    if (typeof name !== "string" || !/^[A-Za-z][A-Za-z0-9_]+$/.exec(name)) {
        throw new Error('Logger name must be at least two alphanumeric characters');
    }
    if (!loggers[name]) {
        var alogger = {
            name: name,
            flags: flags
        };
        alogger.logIt = logIt.bind(undefined, alogger);
        // reset the file
        if (flags === '') {
            try {
                fs.unlinkSync(getFileName(name));
            } catch (e) {
                debuglog("***ERROR: unable to remove log file " + getFileName(name));
            }
        }
        loggers[name] = alogger;
    }
    if (loggers[name].flags !== flags) {
        throw new Error('FLags mismatch in logger' + name);
    }
    return loggers[name].logIt;
}
exports.logger = logger;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy91dGlscy9sb2dnZXIudHMiLCJ1dGlscy9sb2dnZXIuanMiXSwibmFtZXMiOlsiZGVidWciLCJyZXF1aXJlIiwiZGVidWdsb2ciLCJwZXJmcyIsImxvZ1BlcmYiLCJzU3RyaW5nIiwiZW5hYmxlZCIsImxhYmVsIiwibmFtZSIsImNvbnNvbGUiLCJsb2ciLCJmaXJzdCIsIkRhdGUiLCJub3ciLCJsYXN0IiwidCIsIlN0cmluZyIsInNsaWNlIiwib24iLCJ0aW1lRW5kIiwidGltZSIsInBlcmYiLCJzdHJpbmciLCJiaW5kIiwiZXhwb3J0cyIsImZzIiwibG9nZ2VycyIsIm9zIiwiZ2V0V3JpdGFibGVEaXIiLCJ0bXBkaXIiLCJzZXR1cE9uY2UiLCJob21lIiwibWtkaXJTeW5jIiwiZSIsImdldEZpbGVOYW1lIiwiX3Rlc3QiLCJsb2dJdCIsImxvZ2dlciIsImFyZyIsInRleHQiLCJFcnJvciIsIm1lc3NhZ2UiLCJzdGFjayIsImZpbGVuYW1lIiwiZCIsIm4iLCJ0b1VUQ1N0cmluZyIsIndyaXRlRmlsZVN5bmMiLCJlbmNvZGluZyIsImZsYWciLCJmbGFncyIsInVuZGVmaW5lZCIsImV4ZWMiLCJhbG9nZ2VyIiwidW5saW5rU3luYyJdLCJtYXBwaW5ncyI6IkFBRUE7Ozs7OztBQ0lBO0FER0E7O0FBRUEsSUFBQUEsUUFBQUMsUUFBQSxPQUFBLENBQUE7QUFFQSxJQUFNQyxXQUFXRixNQUFNLFFBQU4sQ0FBakI7QUFNQztBQUVELElBQUlHLFFBQVEsRUFBWjtBQUVBLFNBQUFDLE9BQUEsQ0FBaUJDLE9BQWpCLEVBQXdCO0FBQ3RCLFFBQUcsQ0FBQyxJQUFELElBQVMsQ0FBQyxLQUFLQyxPQUFsQixFQUEyQjtBQUN6QjtBQUNEO0FBQ0QsUUFBSUMsUUFBUSxTQUFTLEtBQUtDLElBQTFCO0FBQ0FDLFlBQVFDLEdBQVIsQ0FBWSxTQUFTLEtBQUtGLElBQTFCO0FBQ0EsUUFBRyxLQUFLRyxLQUFMLEtBQWUsQ0FBbEIsRUFBcUI7QUFDakIsYUFBS0EsS0FB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UUFBUWxCLElBQVIsRUFBYzBDLEtBQWQsS0FBd0JBLEtBQTVCLEVBQW1DO0FBQ2pDLGNBQU0sSUFBSVYsS0FBSixDQUFVLDZCQUE2QmhDLElBQXZDLENBQU47QUFDRDtBQUNELFdBQU9rQixRQUFRbEIsSUFBUixFQUFjNEIsS0FBckI7QUFDRDtBQTVCRFosUUFBQWEsTUFBQSxHQUFBQSxNQUFBIiwiZmlsZSI6InV0aWxzL2xvZ2dlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuXG4vKipcbiAqIGEgc2ltcGxlIGxvZ2dlciB1dGlsaXR5XG4gKlxuICpcbiAqIFRoZXJlIGFyZSB0d28gdHlwZXMgb2YgbG9ncyAoIGFwcGVuZCBhbmQgb3ZlcndyaXRlLCBkZWZhdWx0IGlzIGFwcGVuZClcbiAqL1xuXG4vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9saWIvbm9kZS00LmQudHNcIiAvPlxuXG5pbXBvcnQgKiBhcyBkZWJ1ZyBmcm9tICdkZWJ1Zyc7XG5cbmNvbnN0IGRlYnVnbG9nID0gZGVidWcoJ2xvZ2dlcicpO1xuXG5pbnRlcmZhY2UgSUxvZ2dlciB7XG4gIG5hbWU6IHN0cmluZyxcbiAgZmxhZ3M6IHN0cmluZyxcbiAgbG9nSXQ/OiAoYW55KSA9PiB2b2lkXG59O1xuXG52YXIgcGVyZnMgPSB7fSBhcyB7W2tleSA6IHN0cmluZ10gOiB7IGVuYWJsZWQgOiBib29sZWFuLCBuYW1lIDogc3RyaW5nLCBsYXN0OiBudW1iZXIsIGZpcnN0IDogbnVtYmVyLCBvbiA6IHt9fX07XG5cbmZ1bmN0aW9uIGxvZ1BlcmYoc1N0cmluZykge1xuICBpZighdGhpcyB8fCAhdGhpcy5lbmFibGVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBsYWJlbCA9ICdwZXJmJyArIHRoaXMubmFtZTtcbiAgY29uc29sZS5sb2coJ1BlcmYnICsgdGhpcy5uYW1lKTtcbiAgaWYodGhpcy5maXJzdCA9PT0gMCkge1xuICAgICAgdGhpcy5maXJzdCA9IERhdGUubm93KCk7XG4gICAgICB0aGlzLmxhc3QgPSB0aGlzLmZpcnN0O1xuICB9IGVsc2Uge1xuICAgIHZhciB0ID0gRGF0ZS5ub3coKTtcbiAgICBjb25zb2xlLmxvZygnUGVyZicgKyB0aGlzLm5hbWUgK1xuICAgICAnIGRlbHRhOiAnICArIFN0cmluZyhcIiAgICAgIFwiICsgKHQtdGhpcy5sYXN0KSkuc2xpY2UoLTYpXG4gICAgKycgdG90YWw6ICcgICsgU3RyaW5nKFwiICAgICAgXCIgKyAodC10aGlzLmZpcnN0KSkuc2xpY2UoLTYpKTtcbiAgICB0aGlzLmxhc3QgPSAgdDtcbiAgfVxuICBpZiggdGhpcy5vbltzU3RyaW5nXSkge1xuICAgICBjb25zb2xlLnRpbWVFbmQoc1N0cmluZylcbiAgICAgZGVsZXRlIHRoaXMub25bc1N0cmluZ107XG4gIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLnRpbWUoc1N0cmluZyk7XG4gICAgICB0aGlzLm9uW3NTdHJpbmddID0gMTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcGVyZihzdHJpbmcpIHtcbiAgcGVyZnNbc3RyaW5nXSA9IHsgbmFtZSA6IHN0cmluZywgbGFzdCA6IDAsIGZpcnN0OiAwLCBvbiA6IHt9LCBlbmFibGVkIDogZmFsc2UgfTtcbiAgaWYgKGRlYnVnKCdwZXJmJyArIHN0cmluZykuZW5hYmxlZCApXG4gIHsgcGVyZnNbc3RyaW5nXS5lbmFibGVkID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gbG9nUGVyZi5iaW5kKHBlcmZzW3N0cmluZ10pO1xufVxuXG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7XG5cbnZhciBsb2dnZXJzID0ge30gYXMgeyBba2V5OiBzdHJpbmddOiBJTG9nZ2VyIH07XG5cbnZhciBvcyA9IHJlcXVpcmUoJ29zJyk7XG5cbmZ1bmN0aW9uIGdldFdyaXRhYmxlRGlyKCkge1xuICAvLyByZXR1cm4gcHJvY2Vzcy5lbnZbKHByb2Nlc3MucGxhdGZvcm0gPT0gJ3dpbjMyJykgPyAnVVNFUlBST0ZJTEUnIDogJ0hPTUUnXTtcbiAgcmV0dXJuIG9zLnRtcGRpcigpO1xufVxuXG5cbmZ1bmN0aW9uIHNldHVwT25jZSgpIHtcblxuICB2YXIgaG9tZSA9IGdldFdyaXRhYmxlRGlyKCk7XG4gIHRyeSB7XG4gICAgZnMubWtkaXJTeW5jKGhvbWUgKyAnLycgKyAnZmRldnN0YXJ0JyApO1xuICB9IGNhdGNoIChlKSB7XG5cbiAgfVxuICB0cnkge1xuICAgIGZzLm1rZGlyU3luYyhob21lICsgJy9mZGV2c3RhcnQvbG9ncycgKTtcbiAgfSBjYXRjaChlKSB7XG5cbiAgfVxufVxuc2V0dXBPbmNlKCk7XG5cblxuZnVuY3Rpb24gZ2V0RmlsZU5hbWUobmFtZTogc3RyaW5nKSB7XG4gIHJldHVybiBvcy50bXBkaXIoKSAgKyAnL2ZkZXZzdGFydC9sb2dzLycgKyBuYW1lICsgXCIubG9nXCI7XG59XG5cbmV4cG9ydCBjb25zdCBfdGVzdCA9IHtcbiAgZ2V0RmlsZU5hbWU6IGdldEZpbGVOYW1lXG59O1xuXG5mdW5jdGlvbiBsb2dJdChsb2dnZXI6IElMb2dnZXIsIGFyZykge1xuICB2YXIgdGV4dDogc3RyaW5nO1xuICBpZiAodHlwZW9mIGFyZyA9PT0gXCJzdHJpbmdcIikge1xuICAgIHRleHQgPSBhcmc7XG4gIH0gZWxzZSBpZiAoYXJnIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICB0ZXh0ID0gXCJFcnJvcjpcIiArIGFyZy5tZXNzYWdlICsgXCIgXCIgKyBhcmcuc3RhY2s7XG4gIH1cbiAgaWYgKCF0ZXh0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiSWxsZWdhbCBhcmd1bWVudCB0byBsb2dcIik7XG4gIH1cbiAgdmFyIGZpbGVuYW1lID0gZ2V0RmlsZU5hbWUobG9nZ2VyLm5hbWUpO1xuICB2YXIgZCA9IG5ldyBEYXRlKCk7XG4gIHZhciBuID0gZC50b1VUQ1N0cmluZygpICsgXCJcXHRcIiArIHRleHQ7XG4gIGRlYnVnbG9nKCd3cml0aW5nIGxvZyBlbnRyeSB0byAnICsgZmlsZW5hbWUgKyAnICcgKyBuKTtcbiAgZnMud3JpdGVGaWxlU3luYyhmaWxlbmFtZSwgbiwgeyBlbmNvZGluZzogJ3V0Zi04JywgZmxhZzogJ2EnIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbG9nZ2VyKG5hbWU6IHN0cmluZywgZmxhZ3M/OiBzdHJpbmcpOiAoYW55KSA9PiB2b2lkIHtcbiAgaWYgKGZsYWdzICE9PSAnYScgJiYgZmxhZ3MgIT09ICcnICYmIGZsYWdzICE9PSB1bmRlZmluZWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ29ubHkgYSBhbGxvd2VkIGFzIGZsYWdzJyk7XG4gIH1cbiAgZmxhZ3MgPSAoZmxhZ3MgPT09IHVuZGVmaW5lZCApPyAgJ2EnIDogZmxhZ3M7XG4gIGlmICh0eXBlb2YgbmFtZSAhPT0gXCJzdHJpbmdcIiB8fCAhL15bQS1aYS16XVtBLVphLXowLTlfXSskLy5leGVjKG5hbWUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdMb2dnZXIgbmFtZSBtdXN0IGJlIGF0IGxlYXN0IHR3byBhbHBoYW51bWVyaWMgY2hhcmFjdGVycycpXG4gIH1cbiAgaWYgKCFsb2dnZXJzW25hbWVdKSB7XG4gICAgdmFyIGFsb2dnZXIgPSB7XG4gICAgICBuYW1lOiBuYW1lLFxuICAgICAgZmxhZ3M6IGZsYWdzXG4gICAgfSBhcyBJTG9nZ2VyO1xuICAgIGFsb2dnZXIubG9nSXQgPSBsb2dJdC5iaW5kKHVuZGVmaW5lZCwgYWxvZ2dlcik7XG4gICAgLy8gcmVzZXQgdGhlIGZpbGVcbiAgICBpZiAoZmxhZ3MgPT09ICcnKSB7XG4gICAgICB0cnkge1xuICAgICAgICBmcy51bmxpbmtTeW5jKGdldEZpbGVOYW1lKG5hbWUpKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgZGVidWdsb2coXCIqKipFUlJPUjogdW5hYmxlIHRvIHJlbW92ZSBsb2cgZmlsZSBcIiArIGdldEZpbGVOYW1lKG5hbWUpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbG9nZ2Vyc1tuYW1lXSA9IGFsb2dnZXI7XG4gIH1cbiAgaWYgKGxvZ2dlcnNbbmFtZV0uZmxhZ3MgIT09IGZsYWdzKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdGTGFncyBtaXNtYXRjaCBpbiBsb2dnZXInICsgbmFtZSk7XG4gIH1cbiAgcmV0dXJuIGxvZ2dlcnNbbmFtZV0ubG9nSXQ7XG59IiwiLyoqXG4gKiBhIHNpbXBsZSBsb2dnZXIgdXRpbGl0eVxuICpcbiAqXG4gKiBUaGVyZSBhcmUgdHdvIHR5cGVzIG9mIGxvZ3MgKCBhcHBlbmQgYW5kIG92ZXJ3cml0ZSwgZGVmYXVsdCBpcyBhcHBlbmQpXG4gKi9cblwidXNlIHN0cmljdFwiO1xuLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vbGliL25vZGUtNC5kLnRzXCIgLz5cbnZhciBkZWJ1ZyA9IHJlcXVpcmUoXCJkZWJ1Z1wiKTtcbnZhciBkZWJ1Z2xvZyA9IGRlYnVnKCdsb2dnZXInKTtcbjtcbnZhciBwZXJmcyA9IHt9O1xuZnVuY3Rpb24gbG9nUGVyZihzU3RyaW5nKSB7XG4gICAgaWYgKCF0aGlzIHx8ICF0aGlzLmVuYWJsZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgbGFiZWwgPSAncGVyZicgKyB0aGlzLm5hbWU7XG4gICAgY29uc29sZS5sb2coJ1BlcmYnICsgdGhpcy5uYW1lKTtcbiAgICBpZiAodGhpcy5maXJzdCA9PT0gMCkge1xuICAgICAgICB0aGlzLmZpcnN0ID0gRGF0ZS5ub3coKTtcbiAgICAgICAgdGhpcy5sYXN0ID0gdGhpcy5maXJzdDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHZhciB0ID0gRGF0ZS5ub3coKTtcbiAgICAgICAgY29uc29sZS5sb2coJ1BlcmYnICsgdGhpcy5uYW1lICtcbiAgICAgICAgICAgICcgZGVsdGE6ICcgKyBTdHJpbmcoXCIgICAgICBcIiArICh0IC0gdGhpcy5sYXN0KSkuc2xpY2UoLTYpXG4gICAgICAgICAgICArICcgdG90YWw6ICcgKyBTdHJpbmcoXCIgICAgICBcIiArICh0IC0gdGhpcy5maXJzdCkpLnNsaWNlKC02KSk7XG4gICAgICAgIHRoaXMubGFzdCA9IHQ7XG4gICAgfVxuICAgIGlmICh0aGlzLm9uW3NTdHJpbmddKSB7XG4gICAgICAgIGNvbnNvbGUudGltZUVuZChzU3RyaW5nKTtcbiAgICAgICAgZGVsZXRlIHRoaXMub25bc1N0cmluZ107XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zb2xlLnRpbWUoc1N0cmluZyk7XG4gICAgICAgIHRoaXMub25bc1N0cmluZ10gPSAxO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHBlcmYoc3RyaW5nKSB7XG4gICAgcGVyZnNbc3RyaW5nXSA9IHsgbmFtZTogc3RyaW5nLCBsYXN0OiAwLCBmaXJzdDogMCwgb246IHt9LCBlbmFibGVkOiBmYWxzZSB9O1xuICAgIGlmIChkZWJ1ZygncGVyZicgKyBzdHJpbmcpLmVuYWJsZWQpIHtcbiAgICAgICAgcGVyZnNbc3RyaW5nXS5lbmFibGVkID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGxvZ1BlcmYuYmluZChwZXJmc1tzdHJpbmddKTtcbn1cbmV4cG9ydHMucGVyZiA9IHBlcmY7XG52YXIgZnMgPSByZXF1aXJlKFwiZnNcIik7XG52YXIgbG9nZ2VycyA9IHt9O1xudmFyIG9zID0gcmVxdWlyZSgnb3MnKTtcbmZ1bmN0aW9uIGdldFdyaXRhYmxlRGlyKCkge1xuICAgIC8vIHJldHVybiBwcm9jZXNzLmVudlsocHJvY2Vzcy5wbGF0Zm9ybSA9PSAnd2luMzInKSA/ICdVU0VSUFJPRklMRScgOiAnSE9NRSddO1xuICAgIHJldHVybiBvcy50bXBkaXIoKTtcbn1cbmZ1bmN0aW9uIHNldHVwT25jZSgpIHtcbiAgICB2YXIgaG9tZSA9IGdldFdyaXRhYmxlRGlyKCk7XG4gICAgdHJ5IHtcbiAgICAgICAgZnMubWtkaXJTeW5jKGhvbWUgKyAnLycgKyAnZmRldnN0YXJ0Jyk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGZzLm1rZGlyU3luYyhob21lICsgJy9mZGV2c3RhcnQvbG9ncycpO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgIH1cbn1cbnNldHVwT25jZSgpO1xuZnVuY3Rpb24gZ2V0RmlsZU5hbWUobmFtZSkge1xuICAgIHJldHVybiBvcy50bXBkaXIoKSArICcvZmRldnN0YXJ0L2xvZ3MvJyArIG5hbWUgKyBcIi5sb2dcIjtcbn1cbmV4cG9ydHMuX3Rlc3QgPSB7XG4gICAgZ2V0RmlsZU5hbWU6IGdldEZpbGVOYW1lXG59O1xuZnVuY3Rpb24gbG9nSXQobG9nZ2VyLCBhcmcpIHtcbiAgICB2YXIgdGV4dDtcbiAgICBpZiAodHlwZW9mIGFyZyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICB0ZXh0ID0gYXJnO1xuICAgIH1cbiAgICBlbHNlIGlmIChhcmcgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICB0ZXh0ID0gXCJFcnJvcjpcIiArIGFyZy5tZXNzYWdlICsgXCIgXCIgKyBhcmcuc3RhY2s7XG4gICAgfVxuICAgIGlmICghdGV4dCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbGxlZ2FsIGFyZ3VtZW50IHRvIGxvZ1wiKTtcbiAgICB9XG4gICAgdmFyIGZpbGVuYW1lID0gZ2V0RmlsZU5hbWUobG9nZ2VyLm5hbWUpO1xuICAgIHZhciBkID0gbmV3IERhdGUoKTtcbiAgICB2YXIgbiA9IGQudG9VVENTdHJpbmcoKSArIFwiXFx0XCIgKyB0ZXh0O1xuICAgIGRlYnVnbG9nKCd3cml0aW5nIGxvZyBlbnRyeSB0byAnICsgZmlsZW5hbWUgKyAnICcgKyBuKTtcbiAgICBmcy53cml0ZUZpbGVTeW5jKGZpbGVuYW1lLCBuLCB7IGVuY29kaW5nOiAndXRmLTgnLCBmbGFnOiAnYScgfSk7XG59XG5mdW5jdGlvbiBsb2dnZXIobmFtZSwgZmxhZ3MpIHtcbiAgICBpZiAoZmxhZ3MgIT09ICdhJyAmJiBmbGFncyAhPT0gJycgJiYgZmxhZ3MgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ29ubHkgYSBhbGxvd2VkIGFzIGZsYWdzJyk7XG4gICAgfVxuICAgIGZsYWdzID0gKGZsYWdzID09PSB1bmRlZmluZWQpID8gJ2EnIDogZmxhZ3M7XG4gICAgaWYgKHR5cGVvZiBuYW1lICE9PSBcInN0cmluZ1wiIHx8ICEvXltBLVphLXpdW0EtWmEtejAtOV9dKyQvLmV4ZWMobmFtZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdMb2dnZXIgbmFtZSBtdXN0IGJlIGF0IGxlYXN0IHR3byBhbHBoYW51bWVyaWMgY2hhcmFjdGVycycpO1xuICAgIH1cbiAgICBpZiAoIWxvZ2dlcnNbbmFtZV0pIHtcbiAgICAgICAgdmFyIGFsb2dnZXIgPSB7XG4gICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgZmxhZ3M6IGZsYWdzXG4gICAgICAgIH07XG4gICAgICAgIGFsb2dnZXIubG9nSXQgPSBsb2dJdC5iaW5kKHVuZGVmaW5lZCwgYWxvZ2dlcik7XG4gICAgICAgIC8vIHJlc2V0IHRoZSBmaWxlXG4gICAgICAgIGlmIChmbGFncyA9PT0gJycpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZnMudW5saW5rU3luYyhnZXRGaWxlTmFtZShuYW1lKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGRlYnVnbG9nKFwiKioqRVJST1I6IHVuYWJsZSB0byByZW1vdmUgbG9nIGZpbGUgXCIgKyBnZXRGaWxlTmFtZShuYW1lKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbG9nZ2Vyc1tuYW1lXSA9IGFsb2dnZXI7XG4gICAgfVxuICAgIGlmIChsb2dnZXJzW25hbWVdLmZsYWdzICE9PSBmbGFncykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZMYWdzIG1pc21hdGNoIGluIGxvZ2dlcicgKyBuYW1lKTtcbiAgICB9XG4gICAgcmV0dXJuIGxvZ2dlcnNbbmFtZV0ubG9nSXQ7XG59XG5leHBvcnRzLmxvZ2dlciA9IGxvZ2dlcjtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
