/**
 * (c) gerd forstmann 2017
 */
'use strict';

var JSONx = require('circular-json');
var fs = require("fs");
var debug = require("debug");
var debuglog = debug('circularser');
/* this from http://stackoverflow.com/questions/12075927/serialization-of-regexp */
function replacer(key, value) {
    if (value instanceof RegExp) return "__REGEXP " + value.toString();else return value;
}
function reviver(key, value) {
    if (value && value.toString().indexOf("__REGEXP ") == 0) {
        var m = value.split("__REGEXP ")[1].match(/\/(.*)\/(.*)?/);
        return new RegExp(m[1], m[2] || "");
    } else return value;
}
//console.logJSON.parse(JSON.stringify(obj, replacer, 2), reviver));
function stringify(obj) {
    var s = JSONx.stringify(obj, replacer);
    return s;
}
exports.stringify = stringify;
function parse(s) {
    var obj;
    try {
        obj = JSONx.parse(s, reviver);
    } catch (e) {
        //console.log("here e" + e);
        return undefined;
    }
    return obj;
}
exports.parse = parse;
function save(fn, obj) {
    var s = stringify(obj);
    fs.writeFileSync(fn, s, { encoding: 'utf-8' });
}
exports.save = save;
function load(fn) {
    var obj;
    try {
        var s = '' + fs.readFileSync(fn, 'utf-8');
        debuglog('loaded file' + s.length);
        obj = parse(s);
    } catch (e) {
        debuglog('here e' + e);
        return undefined;
    }
    return obj;
}
exports.load = load;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy91dGlscy9jaXJjdWxhcnNlci50cyJdLCJuYW1lcyI6WyJKU09OeCIsInJlcXVpcmUiLCJmcyIsImRlYnVnIiwiZGVidWdsb2ciLCJyZXBsYWNlciIsImtleSIsInZhbHVlIiwiUmVnRXhwIiwidG9TdHJpbmciLCJyZXZpdmVyIiwiaW5kZXhPZiIsIm0iLCJzcGxpdCIsIm1hdGNoIiwic3RyaW5naWZ5Iiwib2JqIiwicyIsImV4cG9ydHMiLCJwYXJzZSIsImUiLCJ1bmRlZmluZWQiLCJzYXZlIiwiZm4iLCJ3cml0ZUZpbGVTeW5jIiwiZW5jb2RpbmciLCJsb2FkIiwicmVhZEZpbGVTeW5jIiwibGVuZ3RoIl0sIm1hcHBpbmdzIjoiQUFBQTs7O0FBR0E7O0FBRUEsSUFBSUEsUUFBUUMsUUFBUSxlQUFSLENBQVo7QUFFQSxJQUFBQyxLQUFBRCxRQUFBLElBQUEsQ0FBQTtBQUNBLElBQUFFLFFBQUFGLFFBQUEsT0FBQSxDQUFBO0FBRUEsSUFBTUcsV0FBV0QsTUFBTSxhQUFOLENBQWpCO0FBR0E7QUFDQSxTQUFBRSxRQUFBLENBQWtCQyxHQUFsQixFQUF1QkMsS0FBdkIsRUFBNEI7QUFDMUIsUUFBSUEsaUJBQWlCQyxNQUFyQixFQUNFLE9BQVEsY0FBY0QsTUFBTUUsUUFBTixFQUF0QixDQURGLEtBR0UsT0FBT0YsS0FBUDtBQUNIO0FBRUQsU0FBQUcsT0FBQSxDQUFpQkosR0FBakIsRUFBc0JDLEtBQXRCLEVBQTJCO0FBQ3pCLFFBQUlBLFNBQVNBLE1BQU1FLFFBQU4sR0FBaUJFLE9BQWpCLENBQXlCLFdBQXpCLEtBQXlDLENBQXRELEVBQXlEO0FBQ3ZELFlBQUlDLElBQUlMLE1BQU1NLEtBQU4sQ0FBWSxXQUFaLEVBQXlCLENBQXpCLEVBQTRCQyxLQUE1QixDQUFrQyxlQUFsQyxDQUFSO0FBQ0EsZUFBTyxJQUFJTixNQUFKLENBQVdJLEVBQUUsQ0FBRixDQUFYLEVBQWlCQSxFQUFFLENBQUYsS0FBUSxFQUF6QixDQUFQO0FBQ0QsS0FIRCxNQUlFLE9BQU9MLEtBQVA7QUFDSDtBQUVEO0FBRUEsU0FBQVEsU0FBQSxDQUEwQkMsR0FBMUIsRUFBa0M7QUFDOUIsUUFBSUMsSUFBSWpCLE1BQU1lLFNBQU4sQ0FBZ0JDLEdBQWhCLEVBQXFCWCxRQUFyQixDQUFSO0FBQ0EsV0FBT1ksQ0FBUDtBQUNIO0FBSERDLFFBQUFILFNBQUEsR0FBQUEsU0FBQTtBQUtBLFNBQUFJLEtBQUEsQ0FBc0JGLENBQXRCLEVBQStCO0FBQzNCLFFBQUlELEdBQUo7QUFDQSxRQUFJO0FBQ0FBLGNBQU1oQixNQUFNbUIsS0FBTixDQUFZRixDQUFaLEVBQWVQLE9BQWYsQ0FBTjtBQUNILEtBRkQsQ0FFRSxPQUFPVSxDQUFQLEVBQVU7QUFDUjtBQUNBLGVBQU9DLFNBQVA7QUFDSDtBQUNELFdBQU9MLEdBQVA7QUFDSDtBQVRERSxRQUFBQyxLQUFBLEdBQUFBLEtBQUE7QUFXQSxTQUFBRyxJQUFBLENBQXFCQyxFQUFyQixFQUFrQ1AsR0FBbEMsRUFBMEM7QUFDdEMsUUFBSUMsSUFBSUYsVUFBVUMsR0FBVixDQUFSO0FBQ0FkLE9BQUdzQixhQUFILENBQWlCRCxFQUFqQixFQUFxQk4sQ0FBckIsRUFBd0IsRUFBRVEsVUFBVyxPQUFiLEVBQXhCO0FBQ0g7QUFIRFAsUUFBQUksSUFBQSxHQUFBQSxJQUFBO0FBS0EsU0FBQUksSUFBQSxDQUFxQkgsRUFBckIsRUFBK0I7QUFDM0IsUUFBSVAsR0FBSjtBQUNBLFFBQUk7QUFDQSxZQUFJQyxJQUFJLEtBQUtmLEdBQUd5QixZQUFILENBQWdCSixFQUFoQixFQUFtQixPQUFuQixDQUFiO0FBQ0FuQixpQkFBUyxnQkFBZ0JhLEVBQUVXLE1BQTNCO0FBQ0FaLGNBQU1HLE1BQU1GLENBQU4sQ0FBTjtBQUVILEtBTEQsQ0FLRSxPQUFPRyxDQUFQLEVBQVU7QUFDUmhCLGlCQUFTLFdBQVVnQixDQUFuQjtBQUNBLGVBQU9DLFNBQVA7QUFDSDtBQUNELFdBQU9MLEdBQVA7QUFDSDtBQVpERSxRQUFBUSxJQUFBLEdBQUFBLElBQUEiLCJmaWxlIjoidXRpbHMvY2lyY3VsYXJzZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIChjKSBnZXJkIGZvcnN0bWFubiAyMDE3XG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIEpTT054ID0gcmVxdWlyZSgnY2lyY3VsYXItanNvbicpO1xuXG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7XG5pbXBvcnQgKiBhcyBkZWJ1ZyBmcm9tICdkZWJ1Zyc7XG5cbmNvbnN0IGRlYnVnbG9nID0gZGVidWcoJ2NpcmN1bGFyc2VyJyk7XG5cblxuLyogdGhpcyBmcm9tIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTIwNzU5Mjcvc2VyaWFsaXphdGlvbi1vZi1yZWdleHAgKi9cbmZ1bmN0aW9uIHJlcGxhY2VyKGtleSwgdmFsdWUpIHtcbiAgaWYgKHZhbHVlIGluc3RhbmNlb2YgUmVnRXhwKVxuICAgIHJldHVybiAoXCJfX1JFR0VYUCBcIiArIHZhbHVlLnRvU3RyaW5nKCkpO1xuICBlbHNlXG4gICAgcmV0dXJuIHZhbHVlO1xufVxuXG5mdW5jdGlvbiByZXZpdmVyKGtleSwgdmFsdWUpIHtcbiAgaWYgKHZhbHVlICYmIHZhbHVlLnRvU3RyaW5nKCkuaW5kZXhPZihcIl9fUkVHRVhQIFwiKSA9PSAwKSB7XG4gICAgdmFyIG0gPSB2YWx1ZS5zcGxpdChcIl9fUkVHRVhQIFwiKVsxXS5tYXRjaCgvXFwvKC4qKVxcLyguKik/Lyk7XG4gICAgcmV0dXJuIG5ldyBSZWdFeHAobVsxXSwgbVsyXSB8fCBcIlwiKTtcbiAgfSBlbHNlXG4gICAgcmV0dXJuIHZhbHVlO1xufVxuXG4vL2NvbnNvbGUubG9nSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShvYmosIHJlcGxhY2VyLCAyKSwgcmV2aXZlcikpO1xuXG5leHBvcnQgZnVuY3Rpb24gc3RyaW5naWZ5KG9iajogYW55KSA6IHN0cmluZyB7XG4gICAgdmFyIHMgPSBKU09OeC5zdHJpbmdpZnkob2JqLCByZXBsYWNlcik7XG4gICAgcmV0dXJuIHM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZShzOiBzdHJpbmcpIDogYW55IHtcbiAgICB2YXIgb2JqO1xuICAgIHRyeSB7XG4gICAgICAgIG9iaiA9IEpTT054LnBhcnNlKHMsIHJldml2ZXIpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy9jb25zb2xlLmxvZyhcImhlcmUgZVwiICsgZSk7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzYXZlKGZuIDogc3RyaW5nLCBvYmo6IGFueSkgOiB2b2lkIHtcbiAgICB2YXIgcyA9IHN0cmluZ2lmeShvYmopO1xuICAgIGZzLndyaXRlRmlsZVN5bmMoZm4sIHMsIHsgZW5jb2RpbmcgOiAndXRmLTgnfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsb2FkKGZuOiBzdHJpbmcpIHtcbiAgICB2YXIgb2JqO1xuICAgIHRyeSB7XG4gICAgICAgIHZhciBzID0gJycgKyBmcy5yZWFkRmlsZVN5bmMoZm4sJ3V0Zi04Jyk7XG4gICAgICAgIGRlYnVnbG9nKCdsb2FkZWQgZmlsZScgKyBzLmxlbmd0aCk7XG4gICAgICAgIG9iaiA9IHBhcnNlKHMpO1xuXG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBkZWJ1Z2xvZygnaGVyZSBlJyArZSk7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG59XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
