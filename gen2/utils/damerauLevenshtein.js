'use strict';
// based on: http://en.wikibooks.org/wiki/Algorithm_implementation/Strings/Levenshtein_distance
// and:  http://en.wikipedia.org/wiki/Damerau%E2%80%93Levenshtein_distance
/**
 * Distance of strings algorithm
 * @module fsdevstart.utils.damerauLevenshtein
 */
/**
 * a function calculating distance between two strings
 * according to the damerau Levenshtein algorithm
 * (this algorithm, in contrast to plain levenshtein treats
 * swapping of characters a distance 1  "word"  <-> "wrod )
 * @param {string} a
 * @param {string} b
 * @public
 */

function levenshtein(a, b) {
    var i;
    var j;
    var cost;
    var d = [];
    if (a.length === 0) {
        return b.length;
    }
    if (b.length === 0) {
        return a.length;
    }
    for (i = 0; i <= a.length; i++) {
        d[i] = [];
        d[i][0] = i;
    }
    for (j = 0; j <= b.length; j++) {
        d[0][j] = j;
    }
    for (i = 1; i <= a.length; i++) {
        for (j = 1; j <= b.length; j++) {
            if (a.charAt(i - 1) === b.charAt(j - 1)) {
                cost = 0;
            } else {
                cost = 1;
            }
            d[i][j] = Math.min(d[i - 1][j] + 1, d[i][j - 1] + 1, d[i - 1][j - 1] + cost);
            if (i > 1 && j > 1 && a.charAt(i - 1) === b.charAt(j - 2) && a.charAt(i - 2) === b.charAt(j - 1)) {
                d[i][j] = Math.min(d[i][j], d[i - 2][j - 2] + cost);
            }
        }
    }
    return d[a.length][b.length];
}
exports.levenshtein = levenshtein;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy91dGlscy9kYW1lcmF1TGV2ZW5zaHRlaW4udHMiXSwibmFtZXMiOlsibGV2ZW5zaHRlaW4iLCJhIiwiYiIsImkiLCJqIiwiY29zdCIsImQiLCJsZW5ndGgiLCJjaGFyQXQiLCJNYXRoIiwibWluIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFFQTtBQUNBO0FBR0E7Ozs7QUFLQTs7Ozs7Ozs7OztBQVNBLFNBQUFBLFdBQUEsQ0FBNkJDLENBQTdCLEVBQXlDQyxDQUF6QyxFQUFtRDtBQUNqRCxRQUFJQyxDQUFKO0FBQ0EsUUFBSUMsQ0FBSjtBQUNBLFFBQUlDLElBQUo7QUFDQSxRQUFJQyxJQUFJLEVBQVI7QUFDQSxRQUFJTCxFQUFFTSxNQUFGLEtBQWEsQ0FBakIsRUFBb0I7QUFDbEIsZUFBT0wsRUFBRUssTUFBVDtBQUNEO0FBQ0QsUUFBSUwsRUFBRUssTUFBRixLQUFhLENBQWpCLEVBQW9CO0FBQ2xCLGVBQU9OLEVBQUVNLE1BQVQ7QUFDRDtBQUNELFNBQUtKLElBQUksQ0FBVCxFQUFZQSxLQUFLRixFQUFFTSxNQUFuQixFQUEyQkosR0FBM0IsRUFBZ0M7QUFDOUJHLFVBQUdILENBQUgsSUFBUyxFQUFUO0FBQ0FHLFVBQUdILENBQUgsRUFBUSxDQUFSLElBQWNBLENBQWQ7QUFDRDtBQUNELFNBQUtDLElBQUksQ0FBVCxFQUFZQSxLQUFLRixFQUFFSyxNQUFuQixFQUEyQkgsR0FBM0IsRUFBZ0M7QUFDOUJFLFVBQUcsQ0FBSCxFQUFRRixDQUFSLElBQWNBLENBQWQ7QUFDRDtBQUNELFNBQUtELElBQUksQ0FBVCxFQUFZQSxLQUFLRixFQUFFTSxNQUFuQixFQUEyQkosR0FBM0IsRUFBZ0M7QUFDOUIsYUFBS0MsSUFBSSxDQUFULEVBQVlBLEtBQUtGLEVBQUVLLE1BQW5CLEVBQTJCSCxHQUEzQixFQUFnQztBQUM5QixnQkFBSUgsRUFBRU8sTUFBRixDQUFTTCxJQUFJLENBQWIsTUFBb0JELEVBQUVNLE1BQUYsQ0FBU0osSUFBSSxDQUFiLENBQXhCLEVBQXlDO0FBQ3ZDQyx1QkFBTyxDQUFQO0FBQ0QsYUFGRCxNQUVPO0FBQ0xBLHVCQUFPLENBQVA7QUFDRDtBQUVEQyxjQUFHSCxDQUFILEVBQVFDLENBQVIsSUFBY0ssS0FBS0MsR0FBTCxDQUFTSixFQUFHSCxJQUFJLENBQVAsRUFBWUMsQ0FBWixJQUFrQixDQUEzQixFQUE4QkUsRUFBR0gsQ0FBSCxFQUFRQyxJQUFJLENBQVosSUFBa0IsQ0FBaEQsRUFBbURFLEVBQUdILElBQUksQ0FBUCxFQUFZQyxJQUFJLENBQWhCLElBQXNCQyxJQUF6RSxDQUFkO0FBRUEsZ0JBRUVGLElBQUksQ0FBSixJQUVBQyxJQUFJLENBRkosSUFJQUgsRUFBRU8sTUFBRixDQUFTTCxJQUFJLENBQWIsTUFBb0JELEVBQUVNLE1BQUYsQ0FBU0osSUFBSSxDQUFiLENBSnBCLElBTUFILEVBQUVPLE1BQUYsQ0FBU0wsSUFBSSxDQUFiLE1BQW9CRCxFQUFFTSxNQUFGLENBQVNKLElBQUksQ0FBYixDQVJ0QixFQVVFO0FBQ0FFLGtCQUFFSCxDQUFGLEVBQUtDLENBQUwsSUFBVUssS0FBS0MsR0FBTCxDQUVSSixFQUFFSCxDQUFGLEVBQUtDLENBQUwsQ0FGUSxFQUlSRSxFQUFFSCxJQUFJLENBQU4sRUFBU0MsSUFBSSxDQUFiLElBQWtCQyxJQUpWLENBQVY7QUFPRDtBQUNGO0FBQ0Y7QUFFRCxXQUFPQyxFQUFHTCxFQUFFTSxNQUFMLEVBQWVMLEVBQUVLLE1BQWpCLENBQVA7QUFDRDtBQW5EZUksUUFBQVgsV0FBQSxHQUFXQSxXQUFYIiwiZmlsZSI6InV0aWxzL2RhbWVyYXVMZXZlbnNodGVpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xyXG5cclxuLy8gYmFzZWQgb246IGh0dHA6Ly9lbi53aWtpYm9va3Mub3JnL3dpa2kvQWxnb3JpdGhtX2ltcGxlbWVudGF0aW9uL1N0cmluZ3MvTGV2ZW5zaHRlaW5fZGlzdGFuY2VcclxuLy8gYW5kOiAgaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9EYW1lcmF1JUUyJTgwJTkzTGV2ZW5zaHRlaW5fZGlzdGFuY2VcclxuXHJcblxyXG4vKipcclxuICogRGlzdGFuY2Ugb2Ygc3RyaW5ncyBhbGdvcml0aG1cclxuICogQG1vZHVsZSBmc2RldnN0YXJ0LnV0aWxzLmRhbWVyYXVMZXZlbnNodGVpblxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBhIGZ1bmN0aW9uIGNhbGN1bGF0aW5nIGRpc3RhbmNlIGJldHdlZW4gdHdvIHN0cmluZ3NcclxuICogYWNjb3JkaW5nIHRvIHRoZSBkYW1lcmF1IExldmVuc2h0ZWluIGFsZ29yaXRobVxyXG4gKiAodGhpcyBhbGdvcml0aG0sIGluIGNvbnRyYXN0IHRvIHBsYWluIGxldmVuc2h0ZWluIHRyZWF0c1xyXG4gKiBzd2FwcGluZyBvZiBjaGFyYWN0ZXJzIGEgZGlzdGFuY2UgMSAgXCJ3b3JkXCIgIDwtPiBcIndyb2QgKVxyXG4gKiBAcGFyYW0ge3N0cmluZ30gYVxyXG4gKiBAcGFyYW0ge3N0cmluZ30gYlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gbGV2ZW5zaHRlaW4gKGEgOiBzdHJpbmcsIGIgOiBzdHJpbmcpIHtcclxuICB2YXIgaSA6IG51bWJlclxyXG4gIHZhciBqIDogbnVtYmVyXHJcbiAgdmFyIGNvc3QgOiBudW1iZXJcclxuICB2YXIgZCA9IFtdXHJcbiAgaWYgKGEubGVuZ3RoID09PSAwKSB7XHJcbiAgICByZXR1cm4gYi5sZW5ndGhcclxuICB9XHJcbiAgaWYgKGIubGVuZ3RoID09PSAwKSB7XHJcbiAgICByZXR1cm4gYS5sZW5ndGhcclxuICB9XHJcbiAgZm9yIChpID0gMDsgaSA8PSBhLmxlbmd0aDsgaSsrKSB7XHJcbiAgICBkWyBpIF0gPSBbXVxyXG4gICAgZFsgaSBdWyAwIF0gPSBpXHJcbiAgfVxyXG4gIGZvciAoaiA9IDA7IGogPD0gYi5sZW5ndGg7IGorKykge1xyXG4gICAgZFsgMCBdWyBqIF0gPSBqXHJcbiAgfVxyXG4gIGZvciAoaSA9IDE7IGkgPD0gYS5sZW5ndGg7IGkrKykge1xyXG4gICAgZm9yIChqID0gMTsgaiA8PSBiLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgIGlmIChhLmNoYXJBdChpIC0gMSkgPT09IGIuY2hhckF0KGogLSAxKSkge1xyXG4gICAgICAgIGNvc3QgPSAwXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29zdCA9IDFcclxuICAgICAgfVxyXG5cclxuICAgICAgZFsgaSBdWyBqIF0gPSBNYXRoLm1pbihkWyBpIC0gMSBdWyBqIF0gKyAxLCBkWyBpIF1bIGogLSAxIF0gKyAxLCBkWyBpIC0gMSBdWyBqIC0gMSBdICsgY29zdClcclxuXHJcbiAgICAgIGlmIChcclxuXHJcbiAgICAgICAgaSA+IDEgJiZcclxuXHJcbiAgICAgICAgaiA+IDEgJiZcclxuXHJcbiAgICAgICAgYS5jaGFyQXQoaSAtIDEpID09PSBiLmNoYXJBdChqIC0gMikgJiZcclxuXHJcbiAgICAgICAgYS5jaGFyQXQoaSAtIDIpID09PSBiLmNoYXJBdChqIC0gMSlcclxuXHJcbiAgICAgICkge1xyXG4gICAgICAgIGRbaV1bal0gPSBNYXRoLm1pbihcclxuXHJcbiAgICAgICAgICBkW2ldW2pdLFxyXG5cclxuICAgICAgICAgIGRbaSAtIDJdW2ogLSAyXSArIGNvc3RcclxuXHJcbiAgICAgICAgKVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gZFsgYS5sZW5ndGggXVsgYi5sZW5ndGggXVxyXG59XHJcblxyXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
