/**
 *
 * @module jfseb.fdevstart.analyze
 * @file erbase
 * @copyright (c) 2016 Gerd Forstmann
 *
 * Basic domain based entity recognition
 */
"use strict";

var InputFilter = require("./inputFilter");
var debug = require("debug");
var debuglog = debug('erbase');
var debuglogV = debug('erbase');
var perflog = debug('perf');
var breakdown = require("./breakdown");
var ERError = require("./ererror");
var AnyObject = Object;
var utils = require("../utils/utils");
var Sentence = require("./sentence");
/**
 * Given a  string, break it down into components,
 * [['A', 'B'], ['A B']]
 *
 * then categorizeWords
 * returning
 *
 * [ [[ { category: 'systemId', word : 'A'},
 *      { category: 'otherthing', word : 'A'}
 *    ],
 *    // result of B
 *    [ { category: 'systemId', word : 'B'},
 *      { category: 'otherthing', word : 'A'}
 *      { category: 'anothertryp', word : 'B'}
 *    ]
 *   ],
 * ]]]
 *
 *
 *
 */
function tokenizeString(sString, rules, words) {
    var cnt = 0;
    var fac = 1;
    var tokens = breakdown.tokenizeString(sString);
    if (debuglog.enabled) {
        debuglog("here breakdown" + JSON.stringify(tokens));
    }
    //console.log(JSON.stringify(u));
    words = words || {};
    perflog('this many known words: ' + Object.keys(words).length);
    var res = [];
    var cntRec = {};
    var categorizedSentence = [];
    var hasRecombined = false;
    tokens.tokens.forEach(function (token, index) {
        var seenIt = InputFilter.categorizeAWordWithOffsets(token, rules, sString, words, cntRec);
        /* cannot have this, or need to add all fragment words "UI2 Integration"  if(seenIt.length === 0) {
              return false;
            }
        */
        hasRecombined = hasRecombined || !seenIt.every(function (res) {
            return !res.rule.range;
        });
        debuglog(" categorized " + token + "/" + index + " to " + JSON.stringify(seenIt));
        categorizedSentence[index] = seenIt;
        cnt = cnt + seenIt.length;
        fac = fac * seenIt.length;
    });
    // have seen the plain categorization,
    debuglog(" sentences " + tokens.tokens.length + " matches " + cnt + " fac: " + fac);
    if (debuglog.enabled && tokens.tokens.length) {
        debuglog("first match " + JSON.stringify(tokens, undefined, 2));
    }
    debuglog(debuglog.enabled ? " prior RangeRule " + JSON.stringify(categorizedSentence) + " " : '-');
    if (hasRecombined) {
        evaluateRangeRulesToPosition(tokens.tokens, tokens.fusable, categorizedSentence);
    }
    debuglog(debuglog.enabled ? " after RangeRule " + JSON.stringify(categorizedSentence) + " " : '-');
    perflog(" sentences " + tokens.tokens.length + " / " + res.length + " matches " + cnt + " fac: " + fac + " rec : " + JSON.stringify(cntRec, undefined, 2));
    return {
        fusable: tokens.fusable,
        tokens: tokens.tokens,
        categorizedWords: categorizedSentence
    };
}
exports.tokenizeString = tokenizeString;
function isSameRes(present, res) {
    if (!(present.rule.matchedString === res.rule.matchedString && present.rule.category === res.rule.category && present.span === res.span && present.rule.bitindex === res.rule.bitindex)) {
        return 0;
    }
    if (present._ranking < res._ranking) {
        return -1;
    }
    return +1;
}
exports.isSameRes = isSameRes;
function mergeIgnoreOrAppend(result, res) {
    var insertindex = -1;
    var foundNothing = result.every(function (present, index) {
        var r = isSameRes(present, res);
        if (r < 0) {
            //console.log("overwriting worse \n" + JSON.stringify(res) + '\n' + JSON.stringify(present)+ '\n');
            result[index] = res;
            return false;
        } else if (r > 0) {
            //console.log('skipping present');
            return false;
        }
        return true;
    });
    if (foundNothing) {
        //debulog('pushing');
        result.push(res);
    }
}
exports.mergeIgnoreOrAppend = mergeIgnoreOrAppend;
function evaluateRangeRulesToPosition(tokens, fusable, categorizedWords) {
    debuglog(debuglog.enabled ? "evaluateRangeRulesToPosition... " + JSON.stringify(categorizedWords) : '-');
    categorizedWords.forEach(function (wordlist, index) {
        wordlist.forEach(function (word) {
            if (word.rule.range) {
                //console.log(` got targetindex for RangeRules evaluation : ${targetIndex} ${index} ${fusable.join(" ")}`);
                var targetIndex = breakdown.isCombinableRangeReturnIndex(word.rule.range, fusable, index);
                //console.log(` got targetindex for RangeRules evaluation : ${targetIndex}`);
                if (targetIndex >= 0) {
                    var combinedWord = breakdown.combineTokens(word.rule.range, index, tokens);
                    debuglog(debuglog.enabled ? " test \"" + combinedWord + "\" against \"" + word.rule.range.rule.lowercaseword + "\" " + JSON.stringify(word.rule.range.rule) : '-');
                    var res = InputFilter.categorizeWordWithOffsetWithRankCutoffSingle(combinedWord, word.rule.range.rule);
                    debuglog(debuglog.enabled ? " got res : " + JSON.stringify(res) : '-');
                    if (res) {
                        res.span = word.rule.range.high - word.rule.range.low + 1;
                        categorizedWords[targetIndex] = categorizedWords[targetIndex].slice(0); // avoid invalidation of seenit
                        debuglog("pushed sth at " + targetIndex);
                        mergeIgnoreOrAppend(categorizedWords[targetIndex], res);
                    }
                }
            }
        });
    });
    // filter all range rules !
    categorizedWords.forEach(function (wordlist, index) {
        categorizedWords[index] = wordlist.filter(function (word) {
            return !word.rule.range;
        });
    });
}
exports.evaluateRangeRulesToPosition = evaluateRangeRulesToPosition;
var clone = utils.cloneDeep;
function copyVecMembers(u) {
    var i = 0;
    for (i = 0; i < u.length; ++i) {
        u[i] = clone(u[i]);
    }
    return u;
}
// we can replicate the tail or the head,
// we replicate the tail as it is smaller.
// [a,b,c ]
function isSpanVec(vec, index) {
    var effectivelen = vec.reduce(function (prev, mem) {
        return prev += mem.span ? mem.span : 1;
    }, 0);
    return effectivelen > index;
}
exports.isSpanVec = isSpanVec;
/**
 * expand an array [[a1,a2], [b1,b2],[c]]
 * into all combinations
 *
 *  if a1 has a span of three, the variations of the lower layer are skipped
 *
 * with the special property
 */
function expandTokenMatchesToSentences(tokens, tokenMatches) {
    var a = [];
    var wordMatches = [];
    debuglogV(debuglog.enabled ? JSON.stringify(tokenMatches) : '-');
    tokenMatches.forEach(function (aWordMatches, wordIndex) {
        wordMatches[wordIndex] = [];
        aWordMatches.forEach(function (oWordVariant, wordVariantIndex) {
            wordMatches[wordIndex][wordVariantIndex] = oWordVariant;
        });
    });
    debuglog(debuglog.enabled ? JSON.stringify(tokenMatches) : '-');
    var result = {
        errors: [],
        tokens: tokens,
        sentences: []
    };
    var nvecs = [];
    var res = [[]];
    // var nvecs = [];
    var rvec = [];
    for (var tokenIndex = 0; tokenIndex < tokenMatches.length; ++tokenIndex) {
        //vecs is the vector of all so far seen variants up to k length.
        var nextBase = [];
        //independent of existence of matches on level k, we retain all vectors which are covered by a span
        // we skip extending them below
        for (var u = 0; u < res.length; ++u) {
            if (isSpanVec(res[u], tokenIndex)) {
                nextBase.push(res[u]);
            }
        }
        var lenMatches = tokenMatches[tokenIndex].length;
        if (nextBase.length === 0 && lenMatches === 0) {
            // the word at index I cannot be understood
            if (result.errors.length === 0) {
                result.errors.push(ERError.makeError_NO_KNOWN_WORD(tokenIndex, tokens));
            }
        }
        for (var l = 0; l < lenMatches; ++l) {
            //debuglog("vecs now" + JSON.stringify(vecs));
            var nvecs = []; //vecs.slice(); // copy the vec[i] base vector;
            //debuglog("vecs copied now" + JSON.stringify(nvecs));
            for (var u = 0; u < res.length; ++u) {
                if (!isSpanVec(res[u], tokenIndex)) {
                    // for each so far constructed result (of length k) in res
                    nvecs.push(res[u].slice()); // make a copy of each vector
                    nvecs[nvecs.length - 1] = copyVecMembers(nvecs[nvecs.length - 1]);
                    // debuglog("copied vecs["+ u+"]" + JSON.stringify(vecs[u]));
                    nvecs[nvecs.length - 1].push(clone(tokenMatches[tokenIndex][l])); // push the lth variant
                }
            }
            //   debuglog(" at     " + k + ":" + l + " nextbase >" + JSON.stringify(nextBase))
            //   debuglog(" append " + k + ":" + l + " nvecs    >" + JSON.stringify(nvecs))
            nextBase = nextBase.concat(nvecs);
        } //constru
        //  debuglog("now at " + k + ":" + l + " >" + JSON.stringify(nextBase))
        res = nextBase;
    }
    debuglogV(debuglogV.enabled ? "APPENDING TO RES" + 0 + ":" + l + " >" + JSON.stringify(nextBase) : '-');
    result.sentences = res;
    return result;
}
exports.expandTokenMatchesToSentences = expandTokenMatchesToSentences;
var sWords = {};
function processString(query, rules) {
    var tokenStruct = tokenizeString(query, rules, sWords);
    evaluateRangeRulesToPosition(tokenStruct.tokens, tokenStruct.fusable, tokenStruct.categorizedWords);
    if (debuglog.enabled) {
        debuglog("After matched " + JSON.stringify(tokenStruct.categorizedWords));
    }
    var aSentences = expandTokenMatchesToSentences(tokenStruct.tokens, tokenStruct.categorizedWords);
    if (debuglog.enabled) {
        debuglog("after expand" + aSentences.sentences.map(function (oSentence) {
            return Sentence.rankingProduct(oSentence) + ":" + JSON.stringify(oSentence);
        }).join("\n"));
    }
    aSentences.sentences = InputFilter.reinForce(aSentences.sentences);
    if (debuglog.enabled) {
        debuglog("after reinforce" + aSentences.sentences.map(function (oSentence) {
            return Sentence.rankingProduct(oSentence) + ":" + JSON.stringify(oSentence);
        }).join("\n"));
    }
    return aSentences;
}
exports.processString = processString;
function simplifySentence(res) {
    return res.map(function (r) {
        return r.map(function (word) {
            return word.string + '=>' + word.matchedString + '/' + word.category + (word.span ? '/' + word.span : '');
        });
    });
}
exports.simplifySentence = simplifySentence;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tYXRjaC9lcmJhc2UudHMiLCJtYXRjaC9lcmJhc2UuanMiXSwibmFtZXMiOlsiSW5wdXRGaWx0ZXIiLCJyZXF1aXJlIiwiZGVidWciLCJkZWJ1Z2xvZyIsImRlYnVnbG9nViIsInBlcmZsb2ciLCJicmVha2Rvd24iLCJFUkVycm9yIiwiQW55T2JqZWN0IiwiT2JqZWN0IiwidXRpbHMiLCJTZW50ZW5jZSIsInRva2VuaXplU3RyaW5nIiwic1N0cmluZyIsInJ1bGVzIiwid29yZHMiLCJjbnQiLCJmYWMiLCJ0b2tlbnMiLCJlbmFibGVkIiwiSlNPTiIsInN0cmluZ2lmeSIsImtleXMiLCJsZW5ndGgiLCJyZXMiLCJjbnRSZWMiLCJjYXRlZ29yaXplZFNlbnRlbmNlIiwiaGFzUmVjb21iaW5lZCIsImZvckVhY2giLCJ0b2tlbiIsImluZGV4Iiwic2Vlbkl0IiwiY2F0ZWdvcml6ZUFXb3JkV2l0aE9mZnNldHMiLCJldmVyeSIsInJ1bGUiLCJyYW5nZSIsInVuZGVmaW5lZCIsImV2YWx1YXRlUmFuZ2VSdWxlc1RvUG9zaXRpb24iLCJmdXNhYmxlIiwiY2F0ZWdvcml6ZWRXb3JkcyIsImV4cG9ydHMiLCJpc1NhbWVSZXMiLCJwcmVzZW50IiwibWF0Y2hlZFN0cmluZyIsImNhdGVnb3J5Iiwic3BhbiIsImJpdGluZGV4IiwiX3JhbmtpbmciLCJtZXJnZUlnbm9yZU9yQXBwZW5kIiwicmVzdWx0IiwiaW5zZXJ0aW5kZXgiLCJmb3VuZE5vdGhpbmciLCJyIiwicHVzaCIsIndvcmRsaXN0Iiwid29yZCIsInRhcmdldEluZGV4IiwiaXNDb21iaW5hYmxlUmFuZ2VSZXR1cm5JbmRleCIsImNvbWJpbmVkV29yZCIsImNvbWJpbmVUb2tlbnMiLCJsb3dlcmNhc2V3b3JkIiwiY2F0ZWdvcml6ZVdvcmRXaXRoT2Zmc2V0V2l0aFJhbmtDdXRvZmZTaW5nbGUiLCJoaWdoIiwibG93Iiwic2xpY2UiLCJmaWx0ZXIiLCJjbG9uZSIsImNsb25lRGVlcCIsImNvcHlWZWNNZW1iZXJzIiwidSIsImkiLCJpc1NwYW5WZWMiLCJ2ZWMiLCJlZmZlY3RpdmVsZW4iLCJyZWR1Y2UiLCJwcmV2IiwibWVtIiwiZXhwYW5kVG9rZW5NYXRjaGVzVG9TZW50ZW5jZXMiLCJ0b2tlbk1hdGNoZXMiLCJhIiwid29yZE1hdGNoZXMiLCJhV29yZE1hdGNoZXMiLCJ3b3JkSW5kZXgiLCJvV29yZFZhcmlhbnQiLCJ3b3JkVmFyaWFudEluZGV4IiwiZXJyb3JzIiwic2VudGVuY2VzIiwibnZlY3MiLCJydmVjIiwidG9rZW5JbmRleCIsIm5leHRCYXNlIiwibGVuTWF0Y2hlcyIsIm1ha2VFcnJvcl9OT19LTk9XTl9XT1JEIiwibCIsImNvbmNhdCIsInNXb3JkcyIsInByb2Nlc3NTdHJpbmciLCJxdWVyeSIsInRva2VuU3RydWN0IiwiYVNlbnRlbmNlcyIsIm1hcCIsIm9TZW50ZW5jZSIsInJhbmtpbmdQcm9kdWN0Iiwiam9pbiIsInJlaW5Gb3JjZSIsInNpbXBsaWZ5U2VudGVuY2UiLCJzdHJpbmciXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztBQ1FBOztBREVBLElBQUFBLGNBQUFDLFFBQUEsZUFBQSxDQUFBO0FBRUEsSUFBQUMsUUFBQUQsUUFBQSxPQUFBLENBQUE7QUFFQSxJQUFNRSxXQUFXRCxNQUFNLFFBQU4sQ0FBakI7QUFDQSxJQUFNRSxZQUFZRixNQUFNLFFBQU4sQ0FBbEI7QUFDQSxJQUFNRyxVQUFVSCxNQUFNLE1BQU4sQ0FBaEI7QUFFQSxJQUFBSSxZQUFBTCxRQUFBLGFBQUEsQ0FBQTtBQUNBLElBQUFNLFVBQUFOLFFBQUEsV0FBQSxDQUFBO0FBRUEsSUFBTU8sWUFBaUJDLE1BQXZCO0FBTUEsSUFBQUMsUUFBQVQsUUFBQSxnQkFBQSxDQUFBO0FBTUEsSUFBQVUsV0FBQVYsUUFBQSxZQUFBLENBQUE7QUFpQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXFCQSxTQUFBVyxjQUFBLENBQStCQyxPQUEvQixFQUFnREMsS0FBaEQsRUFDRUMsS0FERixFQUM2RDtBQUUzRCxRQUFJQyxNQUFN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QUdEO0FBQ0RKLGVBQVdiLFNBQVgsR0FBdUJ0RixZQUFZd0csU0FBWixDQUFzQkwsV0FBV2IsU0FBakMsQ0FBdkI7QUFDQSxRQUFJbkYsU0FBU2dCLE9BQWIsRUFBc0I7QUFDcEJoQixpQkFBUyxvQkFBb0JnRyxXQUFXYixTQUFYLENBQXFCYyxHQUFyQixDQUF5QixVQUFVQyxTQUFWLEVBQW1CO0FBQ3ZFLG1CQUFPMUYsU0FBUzJGLGNBQVQsQ0FBd0JELFNBQXhCLElBQXFDLEdBQXJDLEdBQTJDakYsS0FBS0MsU0FBTCxDQUFlZ0YsU0FBZixDQUFsRDtBQUNELFNBRjRCLEVBRTFCRSxJQUYwQixDQUVyQixJQUZxQixDQUE3QjtBQUdEO0FBQ0QsV0FBT0osVUFBUDtBQUNEO0FBcEJEM0QsUUFBQXdELGFBQUEsR0FBQUEsYUFBQTtBQXNCQSxTQUFBUyxnQkFBQSxDQUFpQ2pGLEdBQWpDLEVBQW9DO0FBQ2xDLFdBQU9BLElBQUk0RSxHQUFKLENBQVEsVUFBVWhELENBQVYsRUFBVztBQUN4QixlQUFPQSxFQUFFZ0QsR0FBRixDQUFNLFVBQUE3QyxJQUFBLEVBQUk7QUFBTSxtQkFBT0EsS0FBS21ELE1BQUwsR0FBYyxJQUFkLEdBQXFCbkQsS0FBS1osYUFBMUIsR0FBMEMsR0FBMUMsR0FBZ0RZLEtBQUtYLFFBQXJELElBQWlFVyxLQUFLVixJQUFMLEdBQVksTUFBTVUsS0FBS1YsSUFBdkIsR0FBOEIsRUFBL0YsQ0FBUDtBQUEyRyxTQUEzSCxDQUFQO0FBQ0QsS0FGTSxDQUFQO0FBR0Q7QUFKREwsUUFBQWlFLGdCQUFBLEdBQUFBLGdCQUFBIiwiZmlsZSI6Im1hdGNoL2VyYmFzZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICpcbiAqIEBtb2R1bGUgamZzZWIuZmRldnN0YXJ0LmFuYWx5emVcbiAqIEBmaWxlIGVyYmFzZVxuICogQGNvcHlyaWdodCAoYykgMjAxNiBHZXJkIEZvcnN0bWFublxuICpcbiAqIEJhc2ljIGRvbWFpbiBiYXNlZCBlbnRpdHkgcmVjb2duaXRpb25cbiAqL1xuXG5cbmltcG9ydCAqIGFzIElucHV0RmlsdGVyIGZyb20gJy4vaW5wdXRGaWx0ZXInO1xuXG5pbXBvcnQgKiBhcyBkZWJ1ZyBmcm9tICdkZWJ1Zyc7XG5cbmNvbnN0IGRlYnVnbG9nID0gZGVidWcoJ2VyYmFzZScpO1xuY29uc3QgZGVidWdsb2dWID0gZGVidWcoJ2VyYmFzZScpO1xuY29uc3QgcGVyZmxvZyA9IGRlYnVnKCdwZXJmJyk7XG5cbmltcG9ydCAqIGFzIGJyZWFrZG93biBmcm9tICcuL2JyZWFrZG93bic7XG5pbXBvcnQgKiBhcyBFUkVycm9yIGZyb20gJy4vZXJlcnJvcic7XG5cbmNvbnN0IEFueU9iamVjdCA9IDxhbnk+T2JqZWN0O1xuXG5cblxuXG5cbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gJy4uL3V0aWxzL3V0aWxzJztcblxuaW1wb3J0ICogYXMgSU1hdGNoIGZyb20gJy4vaWZtYXRjaCc7XG5cbmltcG9ydCAqIGFzIFRvb2xtYXRjaGVyIGZyb20gJy4vdG9vbG1hdGNoZXInO1xuXG5pbXBvcnQgKiBhcyBTZW50ZW5jZSBmcm9tICcuL3NlbnRlbmNlJztcblxuaW1wb3J0ICogYXMgV29yZCBmcm9tICcuL3dvcmQnO1xuXG5pbXBvcnQgKiBhcyBBbGdvbCBmcm9tICcuL2FsZ29sJztcblxuXG5pbXBvcnQgKiBhcyBNYXRjaCBmcm9tICcuL21hdGNoJztcblxuXG5pbnRlcmZhY2UgSVRva2VuaXplZFN0cmluZyB7XG4gIHRva2Vuczogc3RyaW5nW10sXG4gIGNhdGVnb3JpemVkV29yZHM6IElNYXRjaC5JQ2F0ZWdvcml6ZWRTdHJpbmdSYW5nZWRbXVtdXG4gIGZ1c2FibGU6IGJvb2xlYW5bXTtcbn1cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cbi8qKlxuICogR2l2ZW4gYSAgc3RyaW5nLCBicmVhayBpdCBkb3duIGludG8gY29tcG9uZW50cyxcbiAqIFtbJ0EnLCAnQiddLCBbJ0EgQiddXVxuICpcbiAqIHRoZW4gY2F0ZWdvcml6ZVdvcmRzXG4gKiByZXR1cm5pbmdcbiAqXG4gKiBbIFtbIHsgY2F0ZWdvcnk6ICdzeXN0ZW1JZCcsIHdvcmQgOiAnQSd9LFxuICogICAgICB7IGNhdGVnb3J5OiAnb3RoZXJ0aGluZycsIHdvcmQgOiAnQSd9XG4gKiAgICBdLFxuICogICAgLy8gcmVzdWx0IG9mIEJcbiAqICAgIFsgeyBjYXRlZ29yeTogJ3N5c3RlbUlkJywgd29yZCA6ICdCJ30sXG4gKiAgICAgIHsgY2F0ZWdvcnk6ICdvdGhlcnRoaW5nJywgd29yZCA6ICdBJ31cbiAqICAgICAgeyBjYXRlZ29yeTogJ2Fub3RoZXJ0cnlwJywgd29yZCA6ICdCJ31cbiAqICAgIF1cbiAqICAgXSxcbiAqIF1dXVxuICpcbiAqXG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9rZW5pemVTdHJpbmcoc1N0cmluZzogc3RyaW5nLCBydWxlczogSU1hdGNoLlNwbGl0UnVsZXMsXG4gIHdvcmRzPzogeyBba2V5OiBzdHJpbmddOiBBcnJheTxJTWF0Y2guSUNhdGVnb3JpemVkU3RyaW5nPiB9KVxuICA6IElUb2tlbml6ZWRTdHJpbmcge1xuICB2YXIgY250ID0gMDtcbiAgdmFyIGZhYyA9IDE7XG4gIHZhciB0b2tlbnMgPSBicmVha2Rvd24udG9rZW5pemVTdHJpbmcoc1N0cmluZyk7XG4gIGlmIChkZWJ1Z2xvZy5lbmFibGVkKSB7XG4gICAgZGVidWdsb2coXCJoZXJlIGJyZWFrZG93blwiICsgSlNPTi5zdHJpbmdpZnkodG9rZW5zKSk7XG4gIH1cbiAgLy9jb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeSh1KSk7XG4gIHdvcmRzID0gd29yZHMgfHwge307XG4gIHBlcmZsb2coJ3RoaXMgbWFueSBrbm93biB3b3JkczogJyArIE9iamVjdC5rZXlzKHdvcmRzKS5sZW5ndGgpO1xuICB2YXIgcmVzID0gW10gYXMgSU1hdGNoLklDYXRlZ29yaXplZFN0cmluZ1JhbmdlZFtdW107XG4gIHZhciBjbnRSZWMgPSB7fTtcbiAgdmFyIGNhdGVnb3JpemVkU2VudGVuY2UgPSBbXSBhcyBJTWF0Y2guSUNhdGVnb3JpemVkU3RyaW5nUmFuZ2VkW11bXTtcbiAgdmFyIGhhc1JlY29tYmluZWQgPSBmYWxzZTtcbiAgdG9rZW5zLnRva2Vucy5mb3JFYWNoKGZ1bmN0aW9uICh0b2tlbiwgaW5kZXgpIHtcbiAgICB2YXIgc2Vlbkl0ID0gSW5wdXRGaWx0ZXIuY2F0ZWdvcml6ZUFXb3JkV2l0aE9mZnNldHModG9rZW4sIHJ1bGVzLCBzU3RyaW5nLCB3b3JkcywgY250UmVjKTtcbiAgICAvKiBjYW5ub3QgaGF2ZSB0aGlzLCBvciBuZWVkIHRvIGFkZCBhbGwgZnJhZ21lbnQgd29yZHMgXCJVSTIgSW50ZWdyYXRpb25cIiAgaWYoc2Vlbkl0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICovXG4gICAgaGFzUmVjb21iaW5lZCA9IGhhc1JlY29tYmluZWQgfHwgIXNlZW5JdC5ldmVyeShyZXMgPT4gIXJlcy5ydWxlLnJhbmdlKTtcbiAgICBkZWJ1Z2xvZyhgIGNhdGVnb3JpemVkICR7dG9rZW59LyR7aW5kZXh9IHRvIGAgKyBKU09OLnN0cmluZ2lmeShzZWVuSXQpKTtcbiAgICBjYXRlZ29yaXplZFNlbnRlbmNlW2luZGV4XSA9IHNlZW5JdDtcbiAgICBjbnQgPSBjbnQgKyBzZWVuSXQubGVuZ3RoO1xuICAgIGZhYyA9IGZhYyAqIHNlZW5JdC5sZW5ndGg7XG4gIH0pO1xuICAvLyBoYXZlIHNlZW4gdGhlIHBsYWluIGNhdGVnb3JpemF0aW9uLFxuICBkZWJ1Z2xvZyhcIiBzZW50ZW5jZXMgXCIgKyB0b2tlbnMudG9rZW5zLmxlbmd0aCArIFwiIG1hdGNoZXMgXCIgKyBjbnQgKyBcIiBmYWM6IFwiICsgZmFjKTtcbiAgaWYgKGRlYnVnbG9nLmVuYWJsZWQgJiYgdG9rZW5zLnRva2Vucy5sZW5ndGgpIHtcbiAgICBkZWJ1Z2xvZyhcImZpcnN0IG1hdGNoIFwiICsgSlNPTi5zdHJpbmdpZnkodG9rZW5zLCB1bmRlZmluZWQsIDIpKTtcbiAgfVxuICBkZWJ1Z2xvZyhkZWJ1Z2xvZy5lbmFibGVkID8gYCBwcmlvciBSYW5nZVJ1bGUgJHtKU09OLnN0cmluZ2lmeShjYXRlZ29yaXplZFNlbnRlbmNlKX0gYCA6ICctJyk7XG4gIGlmIChoYXNSZWNvbWJpbmVkKSB7XG4gICAgZXZhbHVhdGVSYW5nZVJ1bGVzVG9Qb3NpdGlvbih0b2tlbnMudG9rZW5zLCB0b2tlbnMuZnVzYWJsZSwgY2F0ZWdvcml6ZWRTZW50ZW5jZSk7XG4gIH1cbiAgZGVidWdsb2coZGVidWdsb2cuZW5hYmxlZCA/IGAgYWZ0ZXIgUmFuZ2VSdWxlICR7SlNPTi5zdHJpbmdpZnkoY2F0ZWdvcml6ZWRTZW50ZW5jZSl9IGAgOiAnLScpO1xuICBwZXJmbG9nKFwiIHNlbnRlbmNlcyBcIiArIHRva2Vucy50b2tlbnMubGVuZ3RoICsgXCIgLyBcIiArIHJlcy5sZW5ndGggKyBcIiBtYXRjaGVzIFwiICsgY250ICsgXCIgZmFjOiBcIiArIGZhYyArIFwiIHJlYyA6IFwiICsgSlNPTi5zdHJpbmdpZnkoY250UmVjLCB1bmRlZmluZWQsIDIpKTtcbiAgcmV0dXJuIHtcbiAgICBmdXNhYmxlOiB0b2tlbnMuZnVzYWJsZSxcbiAgICB0b2tlbnM6IHRva2Vucy50b2tlbnMsXG4gICAgY2F0ZWdvcml6ZWRXb3JkczogY2F0ZWdvcml6ZWRTZW50ZW5jZVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1NhbWVSZXMocHJlc2VudDogSU1hdGNoLklDYXRlZ29yaXplZFN0cmluZ1JhbmdlZCwgcmVzIDogSU1hdGNoLklDYXRlZ29yaXplZFN0cmluZ1JhbmdlZCkgIDogbnVtYmVyIHtcbiAgaWYoISgocHJlc2VudC5ydWxlLm1hdGNoZWRTdHJpbmcgPT09IHJlcy5ydWxlLm1hdGNoZWRTdHJpbmcpXG4gICAgJiYgKHByZXNlbnQucnVsZS5jYXRlZ29yeSA9PT0gcmVzLnJ1bGUuY2F0ZWdvcnkpXG4gICAgJiYgKHByZXNlbnQuc3BhbiA9PT0gcmVzLnNwYW4pXG4gICYmIChwcmVzZW50LnJ1bGUuYml0aW5kZXggPT09IHJlcy5ydWxlLmJpdGluZGV4KSkpIHtcbiAgICAgIHJldHVybiAwO1xuICB9XG4gIGlmKHByZXNlbnQuX3JhbmtpbmcgPCByZXMuX3JhbmtpbmcpIHtcbiAgICByZXR1cm4gLTE7XG4gIH1cbiAgcmV0dXJuICsxO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VJZ25vcmVPckFwcGVuZChyZXN1bHQgOiBJTWF0Y2guSUNhdGVnb3JpemVkU3RyaW5nUmFuZ2VkW10sIHJlcyA6IElNYXRjaC5JQ2F0ZWdvcml6ZWRTdHJpbmdSYW5nZWQpIHtcbiAgdmFyIGluc2VydGluZGV4ID0gLTE7XG4gIHZhciBmb3VuZE5vdGhpbmcgPSByZXN1bHQuZXZlcnkoIChwcmVzZW50LGluZGV4KSA9PiB7XG4gICAgdmFyIHIgPSBpc1NhbWVSZXMocHJlc2VudCxyZXMpO1xuICAgIGlmIChyIDwgMCkge1xuICAgICAgLy9jb25zb2xlLmxvZyhcIm92ZXJ3cml0aW5nIHdvcnNlIFxcblwiICsgSlNPTi5zdHJpbmdpZnkocmVzKSArICdcXG4nICsgSlNPTi5zdHJpbmdpZnkocHJlc2VudCkrICdcXG4nKTtcbiAgICAgIHJlc3VsdFtpbmRleF0gPSByZXM7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIGlmKHIgPiAwKSB7XG4gICAgICAvL2NvbnNvbGUubG9nKCdza2lwcGluZyBwcmVzZW50Jyk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9KTtcbiAgaWYoZm91bmROb3RoaW5nKSB7XG4gICAgLy9kZWJ1bG9nKCdwdXNoaW5nJyk7XG4gICAgcmVzdWx0LnB1c2gocmVzKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZXZhbHVhdGVSYW5nZVJ1bGVzVG9Qb3NpdGlvbih0b2tlbnM6IHN0cmluZ1tdLCBmdXNhYmxlOiBib29sZWFuW10sIGNhdGVnb3JpemVkV29yZHM6IElNYXRjaC5JQ2F0ZWdvcml6ZWRTdHJpbmdSYW5nZWRbXVtdKSB7XG4gIGRlYnVnbG9nKGRlYnVnbG9nLmVuYWJsZWQgPyAoXCJldmFsdWF0ZVJhbmdlUnVsZXNUb1Bvc2l0aW9uLi4uIFwiICsgSlNPTi5zdHJpbmdpZnkoY2F0ZWdvcml6ZWRXb3JkcykpIDogJy0nKTtcbiAgY2F0ZWdvcml6ZWRXb3Jkcy5mb3JFYWNoKGZ1bmN0aW9uICh3b3JkbGlzdCwgaW5kZXgpIHtcbiAgICB3b3JkbGlzdC5mb3JFYWNoKGZ1bmN0aW9uICh3b3JkKSB7XG4gICAgICBpZiAod29yZC5ydWxlLnJhbmdlKSB7XG4gICAgICAgIC8vY29uc29sZS5sb2coYCBnb3QgdGFyZ2V0aW5kZXggZm9yIFJhbmdlUnVsZXMgZXZhbHVhdGlvbiA6ICR7dGFyZ2V0SW5kZXh9ICR7aW5kZXh9ICR7ZnVzYWJsZS5qb2luKFwiIFwiKX1gKTtcbiAgICAgICAgdmFyIHRhcmdldEluZGV4ID0gYnJlYWtkb3duLmlzQ29tYmluYWJsZVJhbmdlUmV0dXJuSW5kZXgod29yZC5ydWxlLnJhbmdlLCBmdXNhYmxlLCBpbmRleCk7XG4gICAgICAgIC8vY29uc29sZS5sb2coYCBnb3QgdGFyZ2V0aW5kZXggZm9yIFJhbmdlUnVsZXMgZXZhbHVhdGlvbiA6ICR7dGFyZ2V0SW5kZXh9YCk7XG4gICAgICAgIGlmICh0YXJnZXRJbmRleCA+PSAwKSB7XG4gICAgICAgICAgdmFyIGNvbWJpbmVkV29yZCA9IGJyZWFrZG93bi5jb21iaW5lVG9rZW5zKHdvcmQucnVsZS5yYW5nZSwgaW5kZXgsIHRva2Vucyk7XG4gICAgICAgICAgZGVidWdsb2coZGVidWdsb2cuZW5hYmxlZCA/IChgIHRlc3QgXCIke2NvbWJpbmVkV29yZH1cIiBhZ2FpbnN0IFwiJHt3b3JkLnJ1bGUucmFuZ2UucnVsZS5sb3dlcmNhc2V3b3JkfVwiICR7SlNPTi5zdHJpbmdpZnkod29yZC5ydWxlLnJhbmdlLnJ1bGUpfWApIDogJy0nKTtcbiAgICAgICAgICB2YXIgcmVzID0gSW5wdXRGaWx0ZXIuY2F0ZWdvcml6ZVdvcmRXaXRoT2Zmc2V0V2l0aFJhbmtDdXRvZmZTaW5nbGUoY29tYmluZWRXb3JkLCB3b3JkLnJ1bGUucmFuZ2UucnVsZSk7XG4gICAgICAgICAgZGVidWdsb2coZGVidWdsb2cuZW5hYmxlZCA/IChcIiBnb3QgcmVzIDogXCIgKyBKU09OLnN0cmluZ2lmeShyZXMpKSA6ICctJyk7XG4gICAgICAgICAgaWYgKHJlcykge1xuICAgICAgICAgICAgcmVzLnNwYW4gPSB3b3JkLnJ1bGUucmFuZ2UuaGlnaCAtIHdvcmQucnVsZS5yYW5nZS5sb3cgKyAxO1xuICAgICAgICAgICAgY2F0ZWdvcml6ZWRXb3Jkc1t0YXJnZXRJbmRleF0gPSBjYXRlZ29yaXplZFdvcmRzW3RhcmdldEluZGV4XS5zbGljZSgwKTsgLy8gYXZvaWQgaW52YWxpZGF0aW9uIG9mIHNlZW5pdFxuICAgICAgICAgICAgZGVidWdsb2coYHB1c2hlZCBzdGggYXQgJHt0YXJnZXRJbmRleH1gKTtcbiAgICAgICAgICAgIG1lcmdlSWdub3JlT3JBcHBlbmQoY2F0ZWdvcml6ZWRXb3Jkc1t0YXJnZXRJbmRleF0scmVzKTtcbiAgIC8vICAgICAgICAgY2F0ZWdvcml6ZWRXb3Jkc1t0YXJnZXRJbmRleF0ucHVzaChyZXMpOyAvLyBjaGVjayB0aGF0IHRoaXMgZG9lcyBub3QgaW52YWxpZGF0ZSBzZWVuaXQhXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuICAvLyBmaWx0ZXIgYWxsIHJhbmdlIHJ1bGVzICFcbiAgY2F0ZWdvcml6ZWRXb3Jkcy5mb3JFYWNoKGZ1bmN0aW9uICh3b3JkbGlzdCwgaW5kZXgpIHtcbiAgICBjYXRlZ29yaXplZFdvcmRzW2luZGV4XSA9IHdvcmRsaXN0LmZpbHRlcih3b3JkID0+ICF3b3JkLnJ1bGUucmFuZ2UpO1xuICB9KTtcbn1cblxuXG5cblxuY29uc3QgY2xvbmUgPSB1dGlscy5jbG9uZURlZXA7XG5cblxuXG5cbmZ1bmN0aW9uIGNvcHlWZWNNZW1iZXJzKHUpIHtcbiAgdmFyIGkgPSAwO1xuICBmb3IgKGkgPSAwOyBpIDwgdS5sZW5ndGg7ICsraSkge1xuICAgIHVbaV0gPSBjbG9uZSh1W2ldKTtcbiAgfVxuICByZXR1cm4gdTtcbn1cblxuXG4vLyB3ZSBjYW4gcmVwbGljYXRlIHRoZSB0YWlsIG9yIHRoZSBoZWFkLFxuLy8gd2UgcmVwbGljYXRlIHRoZSB0YWlsIGFzIGl0IGlzIHNtYWxsZXIuXG4vLyBbYSxiLGMgXVxuXG5leHBvcnQgZnVuY3Rpb24gaXNTcGFuVmVjKHZlYzogQXJyYXk8YW55PiwgaW5kZXg6IG51bWJlcikge1xuICB2YXIgZWZmZWN0aXZlbGVuID0gdmVjLnJlZHVjZSgocHJldiwgbWVtKSA9PiBwcmV2ICs9IG1lbS5zcGFuID8gbWVtLnNwYW4gOiAxLCAwKTtcbiAgcmV0dXJuIGVmZmVjdGl2ZWxlbiA+IGluZGV4O1xufVxuXG4vKipcbiAqIGV4cGFuZCBhbiBhcnJheSBbW2ExLGEyXSwgW2IxLGIyXSxbY11dXG4gKiBpbnRvIGFsbCBjb21iaW5hdGlvbnNcbiAqXG4gKiAgaWYgYTEgaGFzIGEgc3BhbiBvZiB0aHJlZSwgdGhlIHZhcmlhdGlvbnMgb2YgdGhlIGxvd2VyIGxheWVyIGFyZSBza2lwcGVkXG4gKlxuICogd2l0aCB0aGUgc3BlY2lhbCBwcm9wZXJ0eVxuICovXG5leHBvcnQgZnVuY3Rpb24gZXhwYW5kVG9rZW5NYXRjaGVzVG9TZW50ZW5jZXModG9rZW5zOiBzdHJpbmdbXSwgdG9rZW5NYXRjaGVzOiBBcnJheTxBcnJheTxhbnk+Pik6IElNYXRjaC5JUHJvY2Vzc2VkU2VudGVuY2VzIHtcbiAgdmFyIGEgPSBbXTtcbiAgdmFyIHdvcmRNYXRjaGVzID0gW107XG4gIGRlYnVnbG9nVihkZWJ1Z2xvZy5lbmFibGVkID8gSlNPTi5zdHJpbmdpZnkodG9rZW5NYXRjaGVzKSA6ICctJyk7XG4gIHRva2VuTWF0Y2hlcy5mb3JFYWNoKGZ1bmN0aW9uIChhV29yZE1hdGNoZXMsIHdvcmRJbmRleDogbnVtYmVyKSB7XG4gICAgd29yZE1hdGNoZXNbd29yZEluZGV4XSA9IFtdO1xuICAgIGFXb3JkTWF0Y2hlcy5mb3JFYWNoKGZ1bmN0aW9uIChvV29yZFZhcmlhbnQsIHdvcmRWYXJpYW50SW5kZXg6IG51bWJlcikge1xuICAgICAgd29yZE1hdGNoZXNbd29yZEluZGV4XVt3b3JkVmFyaWFudEluZGV4XSA9IG9Xb3JkVmFyaWFudDtcbiAgICB9KTtcbiAgfSk7XG4gIGRlYnVnbG9nKGRlYnVnbG9nLmVuYWJsZWQgPyBKU09OLnN0cmluZ2lmeSh0b2tlbk1hdGNoZXMpIDogJy0nKTtcbiAgdmFyIHJlc3VsdCA9IHtcbiAgICBlcnJvcnM6IFtdLFxuICAgIHRva2VuczogdG9rZW5zLFxuICAgIHNlbnRlbmNlczogW11cbiAgfSBhcyBJTWF0Y2guSVByb2Nlc3NlZFNlbnRlbmNlcztcbiAgdmFyIG52ZWNzID0gW107XG4gIHZhciByZXMgPSBbW11dO1xuICAvLyB2YXIgbnZlY3MgPSBbXTtcbiAgdmFyIHJ2ZWMgPSBbXTtcbiAgZm9yICh2YXIgdG9rZW5JbmRleCA9IDA7IHRva2VuSW5kZXggPCB0b2tlbk1hdGNoZXMubGVuZ3RoOyArK3Rva2VuSW5kZXgpIHsgLy8gd29yZGcgaW5kZXgga1xuICAgIC8vdmVjcyBpcyB0aGUgdmVjdG9yIG9mIGFsbCBzbyBmYXIgc2VlbiB2YXJpYW50cyB1cCB0byBrIGxlbmd0aC5cbiAgICB2YXIgbmV4dEJhc2UgPSBbXTtcbiAgICAvL2luZGVwZW5kZW50IG9mIGV4aXN0ZW5jZSBvZiBtYXRjaGVzIG9uIGxldmVsIGssIHdlIHJldGFpbiBhbGwgdmVjdG9ycyB3aGljaCBhcmUgY292ZXJlZCBieSBhIHNwYW5cbiAgICAvLyB3ZSBza2lwIGV4dGVuZGluZyB0aGVtIGJlbG93XG4gICAgZm9yICh2YXIgdSA9IDA7IHUgPCByZXMubGVuZ3RoOyArK3UpIHtcbiAgICAgIGlmIChpc1NwYW5WZWMocmVzW3VdLCB0b2tlbkluZGV4KSkge1xuICAgICAgICBuZXh0QmFzZS5wdXNoKHJlc1t1XSk7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBsZW5NYXRjaGVzID0gdG9rZW5NYXRjaGVzW3Rva2VuSW5kZXhdLmxlbmd0aDtcbiAgICBpZiAobmV4dEJhc2UubGVuZ3RoID09PSAwICYmIGxlbk1hdGNoZXMgPT09IDApIHtcbiAgICAgIC8vIHRoZSB3b3JkIGF0IGluZGV4IEkgY2Fubm90IGJlIHVuZGVyc3Rvb2RcbiAgICAgIGlmIChyZXN1bHQuZXJyb3JzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXN1bHQuZXJyb3JzLnB1c2goRVJFcnJvci5tYWtlRXJyb3JfTk9fS05PV05fV09SRCh0b2tlbkluZGV4LCB0b2tlbnMpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yICh2YXIgbCA9IDA7IGwgPCBsZW5NYXRjaGVzOyArK2wpIHsgLy8gZm9yIGVhY2ggdmFyaWFudCBwcmVzZW50IGF0IGluZGV4IGtcbiAgICAgIC8vZGVidWdsb2coXCJ2ZWNzIG5vd1wiICsgSlNPTi5zdHJpbmdpZnkodmVjcykpO1xuICAgICAgdmFyIG52ZWNzID0gW107IC8vdmVjcy5zbGljZSgpOyAvLyBjb3B5IHRoZSB2ZWNbaV0gYmFzZSB2ZWN0b3I7XG4gICAgICAvL2RlYnVnbG9nKFwidmVjcyBjb3BpZWQgbm93XCIgKyBKU09OLnN0cmluZ2lmeShudmVjcykpO1xuICAgICAgZm9yICh2YXIgdSA9IDA7IHUgPCByZXMubGVuZ3RoOyArK3UpIHtcbiAgICAgICAgaWYgKCFpc1NwYW5WZWMocmVzW3VdLCB0b2tlbkluZGV4KSkge1xuICAgICAgICAgIC8vIGZvciBlYWNoIHNvIGZhciBjb25zdHJ1Y3RlZCByZXN1bHQgKG9mIGxlbmd0aCBrKSBpbiByZXNcbiAgICAgICAgICBudmVjcy5wdXNoKHJlc1t1XS5zbGljZSgpKTsgLy8gbWFrZSBhIGNvcHkgb2YgZWFjaCB2ZWN0b3JcbiAgICAgICAgICBudmVjc1tudmVjcy5sZW5ndGggLSAxXSA9IGNvcHlWZWNNZW1iZXJzKG52ZWNzW252ZWNzLmxlbmd0aCAtIDFdKTtcbiAgICAgICAgICAvLyBkZWJ1Z2xvZyhcImNvcGllZCB2ZWNzW1wiKyB1K1wiXVwiICsgSlNPTi5zdHJpbmdpZnkodmVjc1t1XSkpO1xuICAgICAgICAgIG52ZWNzW252ZWNzLmxlbmd0aCAtIDFdLnB1c2goXG4gICAgICAgICAgICBjbG9uZSh0b2tlbk1hdGNoZXNbdG9rZW5JbmRleF1bbF0pKTsgLy8gcHVzaCB0aGUgbHRoIHZhcmlhbnRcbiAgICAgICAgICAvLyBkZWJ1Z2xvZyhcIm5vdyBudmVjcyBcIiArIG52ZWNzLmxlbmd0aCArIFwiIFwiICsgSlNPTi5zdHJpbmdpZnkobnZlY3MpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gICBkZWJ1Z2xvZyhcIiBhdCAgICAgXCIgKyBrICsgXCI6XCIgKyBsICsgXCIgbmV4dGJhc2UgPlwiICsgSlNPTi5zdHJpbmdpZnkobmV4dEJhc2UpKVxuICAgICAgLy8gICBkZWJ1Z2xvZyhcIiBhcHBlbmQgXCIgKyBrICsgXCI6XCIgKyBsICsgXCIgbnZlY3MgICAgPlwiICsgSlNPTi5zdHJpbmdpZnkobnZlY3MpKVxuICAgICAgbmV4dEJhc2UgPSBuZXh0QmFzZS5jb25jYXQobnZlY3MpO1xuICAgICAgLy8gICBkZWJ1Z2xvZyhcIiAgcmVzdWx0IFwiICsgayArIFwiOlwiICsgbCArIFwiIG52ZWNzICAgID5cIiArIEpTT04uc3RyaW5naWZ5KG5leHRCYXNlKSlcbiAgICB9IC8vY29uc3RydVxuICAgIC8vICBkZWJ1Z2xvZyhcIm5vdyBhdCBcIiArIGsgKyBcIjpcIiArIGwgKyBcIiA+XCIgKyBKU09OLnN0cmluZ2lmeShuZXh0QmFzZSkpXG4gICAgcmVzID0gbmV4dEJhc2U7XG4gIH1cbiAgZGVidWdsb2dWKGRlYnVnbG9nVi5lbmFibGVkID8gKFwiQVBQRU5ESU5HIFRPIFJFU1wiICsgMCArIFwiOlwiICsgbCArIFwiID5cIiArIEpTT04uc3RyaW5naWZ5KG5leHRCYXNlKSkgOiAnLScpO1xuICByZXN1bHQuc2VudGVuY2VzID0gcmVzO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5cbnZhciBzV29yZHMgPSB7fTtcblxuZXhwb3J0IGZ1bmN0aW9uIHByb2Nlc3NTdHJpbmcocXVlcnk6IHN0cmluZywgcnVsZXM6IElNYXRjaC5TcGxpdFJ1bGVzKTogIElNYXRjaC5JUHJvY2Vzc2VkU2VudGVuY2VzIHtcbiAgdmFyIHRva2VuU3RydWN0ID0gdG9rZW5pemVTdHJpbmcocXVlcnksIHJ1bGVzLCBzV29yZHMpO1xuICBldmFsdWF0ZVJhbmdlUnVsZXNUb1Bvc2l0aW9uKHRva2VuU3RydWN0LnRva2VucywgdG9rZW5TdHJ1Y3QuZnVzYWJsZSxcbiAgICB0b2tlblN0cnVjdC5jYXRlZ29yaXplZFdvcmRzKTtcbiAgaWYgKGRlYnVnbG9nLmVuYWJsZWQpIHtcbiAgICBkZWJ1Z2xvZyhcIkFmdGVyIG1hdGNoZWQgXCIgKyBKU09OLnN0cmluZ2lmeSh0b2tlblN0cnVjdC5jYXRlZ29yaXplZFdvcmRzKSk7XG4gIH1cbiAgdmFyIGFTZW50ZW5jZXMgPSBleHBhbmRUb2tlbk1hdGNoZXNUb1NlbnRlbmNlcyh0b2tlblN0cnVjdC50b2tlbnMsIHRva2VuU3RydWN0LmNhdGVnb3JpemVkV29yZHMpO1xuICBpZiAoZGVidWdsb2cuZW5hYmxlZCkge1xuICAgIGRlYnVnbG9nKFwiYWZ0ZXIgZXhwYW5kXCIgKyBhU2VudGVuY2VzLnNlbnRlbmNlcy5tYXAoZnVuY3Rpb24gKG9TZW50ZW5jZSkge1xuICAgICAgcmV0dXJuIFNlbnRlbmNlLnJhbmtpbmdQcm9kdWN0KG9TZW50ZW5jZSkgKyBcIjpcIiArIEpTT04uc3RyaW5naWZ5KG9TZW50ZW5jZSk7XG4gICAgfSkuam9pbihcIlxcblwiKSk7XG4gIH1cbiAgYVNlbnRlbmNlcy5zZW50ZW5jZXMgPSBJbnB1dEZpbHRlci5yZWluRm9yY2UoYVNlbnRlbmNlcy5zZW50ZW5jZXMpO1xuICBpZiAoZGVidWdsb2cuZW5hYmxlZCkge1xuICAgIGRlYnVnbG9nKFwiYWZ0ZXIgcmVpbmZvcmNlXCIgKyBhU2VudGVuY2VzLnNlbnRlbmNlcy5tYXAoZnVuY3Rpb24gKG9TZW50ZW5jZSkge1xuICAgICAgcmV0dXJuIFNlbnRlbmNlLnJhbmtpbmdQcm9kdWN0KG9TZW50ZW5jZSkgKyBcIjpcIiArIEpTT04uc3RyaW5naWZ5KG9TZW50ZW5jZSk7XG4gICAgfSkuam9pbihcIlxcblwiKSk7XG4gIH1cbiAgcmV0dXJuIGFTZW50ZW5jZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaW1wbGlmeVNlbnRlbmNlKHJlcykge1xuICByZXR1cm4gcmVzLm1hcChmdW5jdGlvbiAocikge1xuICAgIHJldHVybiByLm1hcCh3b3JkID0+IHsgcmV0dXJuIHdvcmQuc3RyaW5nICsgJz0+JyArIHdvcmQubWF0Y2hlZFN0cmluZyArICcvJyArIHdvcmQuY2F0ZWdvcnkgKyAod29yZC5zcGFuID8gJy8nICsgd29yZC5zcGFuIDogJycpIH0pXG4gIH0pO1xufVxuIiwiLyoqXG4gKlxuICogQG1vZHVsZSBqZnNlYi5mZGV2c3RhcnQuYW5hbHl6ZVxuICogQGZpbGUgZXJiYXNlXG4gKiBAY29weXJpZ2h0IChjKSAyMDE2IEdlcmQgRm9yc3RtYW5uXG4gKlxuICogQmFzaWMgZG9tYWluIGJhc2VkIGVudGl0eSByZWNvZ25pdGlvblxuICovXG5cInVzZSBzdHJpY3RcIjtcbnZhciBJbnB1dEZpbHRlciA9IHJlcXVpcmUoXCIuL2lucHV0RmlsdGVyXCIpO1xudmFyIGRlYnVnID0gcmVxdWlyZShcImRlYnVnXCIpO1xudmFyIGRlYnVnbG9nID0gZGVidWcoJ2VyYmFzZScpO1xudmFyIGRlYnVnbG9nViA9IGRlYnVnKCdlcmJhc2UnKTtcbnZhciBwZXJmbG9nID0gZGVidWcoJ3BlcmYnKTtcbnZhciBicmVha2Rvd24gPSByZXF1aXJlKFwiLi9icmVha2Rvd25cIik7XG52YXIgRVJFcnJvciA9IHJlcXVpcmUoXCIuL2VyZXJyb3JcIik7XG52YXIgQW55T2JqZWN0ID0gT2JqZWN0O1xudmFyIHV0aWxzID0gcmVxdWlyZShcIi4uL3V0aWxzL3V0aWxzXCIpO1xudmFyIFNlbnRlbmNlID0gcmVxdWlyZShcIi4vc2VudGVuY2VcIik7XG4vKipcbiAqIEdpdmVuIGEgIHN0cmluZywgYnJlYWsgaXQgZG93biBpbnRvIGNvbXBvbmVudHMsXG4gKiBbWydBJywgJ0InXSwgWydBIEInXV1cbiAqXG4gKiB0aGVuIGNhdGVnb3JpemVXb3Jkc1xuICogcmV0dXJuaW5nXG4gKlxuICogWyBbWyB7IGNhdGVnb3J5OiAnc3lzdGVtSWQnLCB3b3JkIDogJ0EnfSxcbiAqICAgICAgeyBjYXRlZ29yeTogJ290aGVydGhpbmcnLCB3b3JkIDogJ0EnfVxuICogICAgXSxcbiAqICAgIC8vIHJlc3VsdCBvZiBCXG4gKiAgICBbIHsgY2F0ZWdvcnk6ICdzeXN0ZW1JZCcsIHdvcmQgOiAnQid9LFxuICogICAgICB7IGNhdGVnb3J5OiAnb3RoZXJ0aGluZycsIHdvcmQgOiAnQSd9XG4gKiAgICAgIHsgY2F0ZWdvcnk6ICdhbm90aGVydHJ5cCcsIHdvcmQgOiAnQid9XG4gKiAgICBdXG4gKiAgIF0sXG4gKiBdXV1cbiAqXG4gKlxuICpcbiAqL1xuZnVuY3Rpb24gdG9rZW5pemVTdHJpbmcoc1N0cmluZywgcnVsZXMsIHdvcmRzKSB7XG4gICAgdmFyIGNudCA9IDA7XG4gICAgdmFyIGZhYyA9IDE7XG4gICAgdmFyIHRva2VucyA9IGJyZWFrZG93bi50b2tlbml6ZVN0cmluZyhzU3RyaW5nKTtcbiAgICBpZiAoZGVidWdsb2cuZW5hYmxlZCkge1xuICAgICAgICBkZWJ1Z2xvZyhcImhlcmUgYnJlYWtkb3duXCIgKyBKU09OLnN0cmluZ2lmeSh0b2tlbnMpKTtcbiAgICB9XG4gICAgLy9jb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeSh1KSk7XG4gICAgd29yZHMgPSB3b3JkcyB8fCB7fTtcbiAgICBwZXJmbG9nKCd0aGlzIG1hbnkga25vd24gd29yZHM6ICcgKyBPYmplY3Qua2V5cyh3b3JkcykubGVuZ3RoKTtcbiAgICB2YXIgcmVzID0gW107XG4gICAgdmFyIGNudFJlYyA9IHt9O1xuICAgIHZhciBjYXRlZ29yaXplZFNlbnRlbmNlID0gW107XG4gICAgdmFyIGhhc1JlY29tYmluZWQgPSBmYWxzZTtcbiAgICB0b2tlbnMudG9rZW5zLmZvckVhY2goZnVuY3Rpb24gKHRva2VuLCBpbmRleCkge1xuICAgICAgICB2YXIgc2Vlbkl0ID0gSW5wdXRGaWx0ZXIuY2F0ZWdvcml6ZUFXb3JkV2l0aE9mZnNldHModG9rZW4sIHJ1bGVzLCBzU3RyaW5nLCB3b3JkcywgY250UmVjKTtcbiAgICAgICAgLyogY2Fubm90IGhhdmUgdGhpcywgb3IgbmVlZCB0byBhZGQgYWxsIGZyYWdtZW50IHdvcmRzIFwiVUkyIEludGVncmF0aW9uXCIgIGlmKHNlZW5JdC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAqL1xuICAgICAgICBoYXNSZWNvbWJpbmVkID0gaGFzUmVjb21iaW5lZCB8fCAhc2Vlbkl0LmV2ZXJ5KGZ1bmN0aW9uIChyZXMpIHsgcmV0dXJuICFyZXMucnVsZS5yYW5nZTsgfSk7XG4gICAgICAgIGRlYnVnbG9nKFwiIGNhdGVnb3JpemVkIFwiICsgdG9rZW4gKyBcIi9cIiArIGluZGV4ICsgXCIgdG8gXCIgKyBKU09OLnN0cmluZ2lmeShzZWVuSXQpKTtcbiAgICAgICAgY2F0ZWdvcml6ZWRTZW50ZW5jZVtpbmRleF0gPSBzZWVuSXQ7XG4gICAgICAgIGNudCA9IGNudCArIHNlZW5JdC5sZW5ndGg7XG4gICAgICAgIGZhYyA9IGZhYyAqIHNlZW5JdC5sZW5ndGg7XG4gICAgfSk7XG4gICAgLy8gaGF2ZSBzZWVuIHRoZSBwbGFpbiBjYXRlZ29yaXphdGlvbixcbiAgICBkZWJ1Z2xvZyhcIiBzZW50ZW5jZXMgXCIgKyB0b2tlbnMudG9rZW5zLmxlbmd0aCArIFwiIG1hdGNoZXMgXCIgKyBjbnQgKyBcIiBmYWM6IFwiICsgZmFjKTtcbiAgICBpZiAoZGVidWdsb2cuZW5hYmxlZCAmJiB0b2tlbnMudG9rZW5zLmxlbmd0aCkge1xuICAgICAgICBkZWJ1Z2xvZyhcImZpcnN0IG1hdGNoIFwiICsgSlNPTi5zdHJpbmdpZnkodG9rZW5zLCB1bmRlZmluZWQsIDIpKTtcbiAgICB9XG4gICAgZGVidWdsb2coZGVidWdsb2cuZW5hYmxlZCA/IFwiIHByaW9yIFJhbmdlUnVsZSBcIiArIEpTT04uc3RyaW5naWZ5KGNhdGVnb3JpemVkU2VudGVuY2UpICsgXCIgXCIgOiAnLScpO1xuICAgIGlmIChoYXNSZWNvbWJpbmVkKSB7XG4gICAgICAgIGV2YWx1YXRlUmFuZ2VSdWxlc1RvUG9zaXRpb24odG9rZW5zLnRva2VucywgdG9rZW5zLmZ1c2FibGUsIGNhdGVnb3JpemVkU2VudGVuY2UpO1xuICAgIH1cbiAgICBkZWJ1Z2xvZyhkZWJ1Z2xvZy5lbmFibGVkID8gXCIgYWZ0ZXIgUmFuZ2VSdWxlIFwiICsgSlNPTi5zdHJpbmdpZnkoY2F0ZWdvcml6ZWRTZW50ZW5jZSkgKyBcIiBcIiA6ICctJyk7XG4gICAgcGVyZmxvZyhcIiBzZW50ZW5jZXMgXCIgKyB0b2tlbnMudG9rZW5zLmxlbmd0aCArIFwiIC8gXCIgKyByZXMubGVuZ3RoICsgXCIgbWF0Y2hlcyBcIiArIGNudCArIFwiIGZhYzogXCIgKyBmYWMgKyBcIiByZWMgOiBcIiArIEpTT04uc3RyaW5naWZ5KGNudFJlYywgdW5kZWZpbmVkLCAyKSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZnVzYWJsZTogdG9rZW5zLmZ1c2FibGUsXG4gICAgICAgIHRva2VuczogdG9rZW5zLnRva2VucyxcbiAgICAgICAgY2F0ZWdvcml6ZWRXb3JkczogY2F0ZWdvcml6ZWRTZW50ZW5jZVxuICAgIH07XG59XG5leHBvcnRzLnRva2VuaXplU3RyaW5nID0gdG9rZW5pemVTdHJpbmc7XG5mdW5jdGlvbiBpc1NhbWVSZXMocHJlc2VudCwgcmVzKSB7XG4gICAgaWYgKCEoKHByZXNlbnQucnVsZS5tYXRjaGVkU3RyaW5nID09PSByZXMucnVsZS5tYXRjaGVkU3RyaW5nKVxuICAgICAgICAmJiAocHJlc2VudC5ydWxlLmNhdGVnb3J5ID09PSByZXMucnVsZS5jYXRlZ29yeSlcbiAgICAgICAgJiYgKHByZXNlbnQuc3BhbiA9PT0gcmVzLnNwYW4pXG4gICAgICAgICYmIChwcmVzZW50LnJ1bGUuYml0aW5kZXggPT09IHJlcy5ydWxlLmJpdGluZGV4KSkpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGlmIChwcmVzZW50Ll9yYW5raW5nIDwgcmVzLl9yYW5raW5nKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gICAgcmV0dXJuICsxO1xufVxuZXhwb3J0cy5pc1NhbWVSZXMgPSBpc1NhbWVSZXM7XG5mdW5jdGlvbiBtZXJnZUlnbm9yZU9yQXBwZW5kKHJlc3VsdCwgcmVzKSB7XG4gICAgdmFyIGluc2VydGluZGV4ID0gLTE7XG4gICAgdmFyIGZvdW5kTm90aGluZyA9IHJlc3VsdC5ldmVyeShmdW5jdGlvbiAocHJlc2VudCwgaW5kZXgpIHtcbiAgICAgICAgdmFyIHIgPSBpc1NhbWVSZXMocHJlc2VudCwgcmVzKTtcbiAgICAgICAgaWYgKHIgPCAwKSB7XG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwib3ZlcndyaXRpbmcgd29yc2UgXFxuXCIgKyBKU09OLnN0cmluZ2lmeShyZXMpICsgJ1xcbicgKyBKU09OLnN0cmluZ2lmeShwcmVzZW50KSsgJ1xcbicpO1xuICAgICAgICAgICAgcmVzdWx0W2luZGV4XSA9IHJlcztcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChyID4gMCkge1xuICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnc2tpcHBpbmcgcHJlc2VudCcpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pO1xuICAgIGlmIChmb3VuZE5vdGhpbmcpIHtcbiAgICAgICAgLy9kZWJ1bG9nKCdwdXNoaW5nJyk7XG4gICAgICAgIHJlc3VsdC5wdXNoKHJlcyk7XG4gICAgfVxufVxuZXhwb3J0cy5tZXJnZUlnbm9yZU9yQXBwZW5kID0gbWVyZ2VJZ25vcmVPckFwcGVuZDtcbmZ1bmN0aW9uIGV2YWx1YXRlUmFuZ2VSdWxlc1RvUG9zaXRpb24odG9rZW5zLCBmdXNhYmxlLCBjYXRlZ29yaXplZFdvcmRzKSB7XG4gICAgZGVidWdsb2coZGVidWdsb2cuZW5hYmxlZCA/IChcImV2YWx1YXRlUmFuZ2VSdWxlc1RvUG9zaXRpb24uLi4gXCIgKyBKU09OLnN0cmluZ2lmeShjYXRlZ29yaXplZFdvcmRzKSkgOiAnLScpO1xuICAgIGNhdGVnb3JpemVkV29yZHMuZm9yRWFjaChmdW5jdGlvbiAod29yZGxpc3QsIGluZGV4KSB7XG4gICAgICAgIHdvcmRsaXN0LmZvckVhY2goZnVuY3Rpb24gKHdvcmQpIHtcbiAgICAgICAgICAgIGlmICh3b3JkLnJ1bGUucmFuZ2UpIHtcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKGAgZ290IHRhcmdldGluZGV4IGZvciBSYW5nZVJ1bGVzIGV2YWx1YXRpb24gOiAke3RhcmdldEluZGV4fSAke2luZGV4fSAke2Z1c2FibGUuam9pbihcIiBcIil9YCk7XG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldEluZGV4ID0gYnJlYWtkb3duLmlzQ29tYmluYWJsZVJhbmdlUmV0dXJuSW5kZXgod29yZC5ydWxlLnJhbmdlLCBmdXNhYmxlLCBpbmRleCk7XG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhgIGdvdCB0YXJnZXRpbmRleCBmb3IgUmFuZ2VSdWxlcyBldmFsdWF0aW9uIDogJHt0YXJnZXRJbmRleH1gKTtcbiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0SW5kZXggPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY29tYmluZWRXb3JkID0gYnJlYWtkb3duLmNvbWJpbmVUb2tlbnMod29yZC5ydWxlLnJhbmdlLCBpbmRleCwgdG9rZW5zKTtcbiAgICAgICAgICAgICAgICAgICAgZGVidWdsb2coZGVidWdsb2cuZW5hYmxlZCA/IChcIiB0ZXN0IFxcXCJcIiArIGNvbWJpbmVkV29yZCArIFwiXFxcIiBhZ2FpbnN0IFxcXCJcIiArIHdvcmQucnVsZS5yYW5nZS5ydWxlLmxvd2VyY2FzZXdvcmQgKyBcIlxcXCIgXCIgKyBKU09OLnN0cmluZ2lmeSh3b3JkLnJ1bGUucmFuZ2UucnVsZSkpIDogJy0nKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlcyA9IElucHV0RmlsdGVyLmNhdGVnb3JpemVXb3JkV2l0aE9mZnNldFdpdGhSYW5rQ3V0b2ZmU2luZ2xlKGNvbWJpbmVkV29yZCwgd29yZC5ydWxlLnJhbmdlLnJ1bGUpO1xuICAgICAgICAgICAgICAgICAgICBkZWJ1Z2xvZyhkZWJ1Z2xvZy5lbmFibGVkID8gKFwiIGdvdCByZXMgOiBcIiArIEpTT04uc3RyaW5naWZ5KHJlcykpIDogJy0nKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzLnNwYW4gPSB3b3JkLnJ1bGUucmFuZ2UuaGlnaCAtIHdvcmQucnVsZS5yYW5nZS5sb3cgKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcml6ZWRXb3Jkc1t0YXJnZXRJbmRleF0gPSBjYXRlZ29yaXplZFdvcmRzW3RhcmdldEluZGV4XS5zbGljZSgwKTsgLy8gYXZvaWQgaW52YWxpZGF0aW9uIG9mIHNlZW5pdFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVidWdsb2coXCJwdXNoZWQgc3RoIGF0IFwiICsgdGFyZ2V0SW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWVyZ2VJZ25vcmVPckFwcGVuZChjYXRlZ29yaXplZFdvcmRzW3RhcmdldEluZGV4XSwgcmVzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgLy8gZmlsdGVyIGFsbCByYW5nZSBydWxlcyAhXG4gICAgY2F0ZWdvcml6ZWRXb3Jkcy5mb3JFYWNoKGZ1bmN0aW9uICh3b3JkbGlzdCwgaW5kZXgpIHtcbiAgICAgICAgY2F0ZWdvcml6ZWRXb3Jkc1tpbmRleF0gPSB3b3JkbGlzdC5maWx0ZXIoZnVuY3Rpb24gKHdvcmQpIHsgcmV0dXJuICF3b3JkLnJ1bGUucmFuZ2U7IH0pO1xuICAgIH0pO1xufVxuZXhwb3J0cy5ldmFsdWF0ZVJhbmdlUnVsZXNUb1Bvc2l0aW9uID0gZXZhbHVhdGVSYW5nZVJ1bGVzVG9Qb3NpdGlvbjtcbnZhciBjbG9uZSA9IHV0aWxzLmNsb25lRGVlcDtcbmZ1bmN0aW9uIGNvcHlWZWNNZW1iZXJzKHUpIHtcbiAgICB2YXIgaSA9IDA7XG4gICAgZm9yIChpID0gMDsgaSA8IHUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdVtpXSA9IGNsb25lKHVbaV0pO1xuICAgIH1cbiAgICByZXR1cm4gdTtcbn1cbi8vIHdlIGNhbiByZXBsaWNhdGUgdGhlIHRhaWwgb3IgdGhlIGhlYWQsXG4vLyB3ZSByZXBsaWNhdGUgdGhlIHRhaWwgYXMgaXQgaXMgc21hbGxlci5cbi8vIFthLGIsYyBdXG5mdW5jdGlvbiBpc1NwYW5WZWModmVjLCBpbmRleCkge1xuICAgIHZhciBlZmZlY3RpdmVsZW4gPSB2ZWMucmVkdWNlKGZ1bmN0aW9uIChwcmV2LCBtZW0pIHsgcmV0dXJuIHByZXYgKz0gbWVtLnNwYW4gPyBtZW0uc3BhbiA6IDE7IH0sIDApO1xuICAgIHJldHVybiBlZmZlY3RpdmVsZW4gPiBpbmRleDtcbn1cbmV4cG9ydHMuaXNTcGFuVmVjID0gaXNTcGFuVmVjO1xuLyoqXG4gKiBleHBhbmQgYW4gYXJyYXkgW1thMSxhMl0sIFtiMSxiMl0sW2NdXVxuICogaW50byBhbGwgY29tYmluYXRpb25zXG4gKlxuICogIGlmIGExIGhhcyBhIHNwYW4gb2YgdGhyZWUsIHRoZSB2YXJpYXRpb25zIG9mIHRoZSBsb3dlciBsYXllciBhcmUgc2tpcHBlZFxuICpcbiAqIHdpdGggdGhlIHNwZWNpYWwgcHJvcGVydHlcbiAqL1xuZnVuY3Rpb24gZXhwYW5kVG9rZW5NYXRjaGVzVG9TZW50ZW5jZXModG9rZW5zLCB0b2tlbk1hdGNoZXMpIHtcbiAgICB2YXIgYSA9IFtdO1xuICAgIHZhciB3b3JkTWF0Y2hlcyA9IFtdO1xuICAgIGRlYnVnbG9nVihkZWJ1Z2xvZy5lbmFibGVkID8gSlNPTi5zdHJpbmdpZnkodG9rZW5NYXRjaGVzKSA6ICctJyk7XG4gICAgdG9rZW5NYXRjaGVzLmZvckVhY2goZnVuY3Rpb24gKGFXb3JkTWF0Y2hlcywgd29yZEluZGV4KSB7XG4gICAgICAgIHdvcmRNYXRjaGVzW3dvcmRJbmRleF0gPSBbXTtcbiAgICAgICAgYVdvcmRNYXRjaGVzLmZvckVhY2goZnVuY3Rpb24gKG9Xb3JkVmFyaWFudCwgd29yZFZhcmlhbnRJbmRleCkge1xuICAgICAgICAgICAgd29yZE1hdGNoZXNbd29yZEluZGV4XVt3b3JkVmFyaWFudEluZGV4XSA9IG9Xb3JkVmFyaWFudDtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgZGVidWdsb2coZGVidWdsb2cuZW5hYmxlZCA/IEpTT04uc3RyaW5naWZ5KHRva2VuTWF0Y2hlcykgOiAnLScpO1xuICAgIHZhciByZXN1bHQgPSB7XG4gICAgICAgIGVycm9yczogW10sXG4gICAgICAgIHRva2VuczogdG9rZW5zLFxuICAgICAgICBzZW50ZW5jZXM6IFtdXG4gICAgfTtcbiAgICB2YXIgbnZlY3MgPSBbXTtcbiAgICB2YXIgcmVzID0gW1tdXTtcbiAgICAvLyB2YXIgbnZlY3MgPSBbXTtcbiAgICB2YXIgcnZlYyA9IFtdO1xuICAgIGZvciAodmFyIHRva2VuSW5kZXggPSAwOyB0b2tlbkluZGV4IDwgdG9rZW5NYXRjaGVzLmxlbmd0aDsgKyt0b2tlbkluZGV4KSB7XG4gICAgICAgIC8vdmVjcyBpcyB0aGUgdmVjdG9yIG9mIGFsbCBzbyBmYXIgc2VlbiB2YXJpYW50cyB1cCB0byBrIGxlbmd0aC5cbiAgICAgICAgdmFyIG5leHRCYXNlID0gW107XG4gICAgICAgIC8vaW5kZXBlbmRlbnQgb2YgZXhpc3RlbmNlIG9mIG1hdGNoZXMgb24gbGV2ZWwgaywgd2UgcmV0YWluIGFsbCB2ZWN0b3JzIHdoaWNoIGFyZSBjb3ZlcmVkIGJ5IGEgc3BhblxuICAgICAgICAvLyB3ZSBza2lwIGV4dGVuZGluZyB0aGVtIGJlbG93XG4gICAgICAgIGZvciAodmFyIHUgPSAwOyB1IDwgcmVzLmxlbmd0aDsgKyt1KSB7XG4gICAgICAgICAgICBpZiAoaXNTcGFuVmVjKHJlc1t1XSwgdG9rZW5JbmRleCkpIHtcbiAgICAgICAgICAgICAgICBuZXh0QmFzZS5wdXNoKHJlc1t1XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGxlbk1hdGNoZXMgPSB0b2tlbk1hdGNoZXNbdG9rZW5JbmRleF0ubGVuZ3RoO1xuICAgICAgICBpZiAobmV4dEJhc2UubGVuZ3RoID09PSAwICYmIGxlbk1hdGNoZXMgPT09IDApIHtcbiAgICAgICAgICAgIC8vIHRoZSB3b3JkIGF0IGluZGV4IEkgY2Fubm90IGJlIHVuZGVyc3Rvb2RcbiAgICAgICAgICAgIGlmIChyZXN1bHQuZXJyb3JzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5lcnJvcnMucHVzaChFUkVycm9yLm1ha2VFcnJvcl9OT19LTk9XTl9XT1JEKHRva2VuSW5kZXgsIHRva2VucykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIGwgPSAwOyBsIDwgbGVuTWF0Y2hlczsgKytsKSB7XG4gICAgICAgICAgICAvL2RlYnVnbG9nKFwidmVjcyBub3dcIiArIEpTT04uc3RyaW5naWZ5KHZlY3MpKTtcbiAgICAgICAgICAgIHZhciBudmVjcyA9IFtdOyAvL3ZlY3Muc2xpY2UoKTsgLy8gY29weSB0aGUgdmVjW2ldIGJhc2UgdmVjdG9yO1xuICAgICAgICAgICAgLy9kZWJ1Z2xvZyhcInZlY3MgY29waWVkIG5vd1wiICsgSlNPTi5zdHJpbmdpZnkobnZlY3MpKTtcbiAgICAgICAgICAgIGZvciAodmFyIHUgPSAwOyB1IDwgcmVzLmxlbmd0aDsgKyt1KSB7XG4gICAgICAgICAgICAgICAgaWYgKCFpc1NwYW5WZWMocmVzW3VdLCB0b2tlbkluZGV4KSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBmb3IgZWFjaCBzbyBmYXIgY29uc3RydWN0ZWQgcmVzdWx0IChvZiBsZW5ndGggaykgaW4gcmVzXG4gICAgICAgICAgICAgICAgICAgIG52ZWNzLnB1c2gocmVzW3VdLnNsaWNlKCkpOyAvLyBtYWtlIGEgY29weSBvZiBlYWNoIHZlY3RvclxuICAgICAgICAgICAgICAgICAgICBudmVjc1tudmVjcy5sZW5ndGggLSAxXSA9IGNvcHlWZWNNZW1iZXJzKG52ZWNzW252ZWNzLmxlbmd0aCAtIDFdKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gZGVidWdsb2coXCJjb3BpZWQgdmVjc1tcIisgdStcIl1cIiArIEpTT04uc3RyaW5naWZ5KHZlY3NbdV0pKTtcbiAgICAgICAgICAgICAgICAgICAgbnZlY3NbbnZlY3MubGVuZ3RoIC0gMV0ucHVzaChjbG9uZSh0b2tlbk1hdGNoZXNbdG9rZW5JbmRleF1bbF0pKTsgLy8gcHVzaCB0aGUgbHRoIHZhcmlhbnRcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyAgIGRlYnVnbG9nKFwiIGF0ICAgICBcIiArIGsgKyBcIjpcIiArIGwgKyBcIiBuZXh0YmFzZSA+XCIgKyBKU09OLnN0cmluZ2lmeShuZXh0QmFzZSkpXG4gICAgICAgICAgICAvLyAgIGRlYnVnbG9nKFwiIGFwcGVuZCBcIiArIGsgKyBcIjpcIiArIGwgKyBcIiBudmVjcyAgICA+XCIgKyBKU09OLnN0cmluZ2lmeShudmVjcykpXG4gICAgICAgICAgICBuZXh0QmFzZSA9IG5leHRCYXNlLmNvbmNhdChudmVjcyk7XG4gICAgICAgIH0gLy9jb25zdHJ1XG4gICAgICAgIC8vICBkZWJ1Z2xvZyhcIm5vdyBhdCBcIiArIGsgKyBcIjpcIiArIGwgKyBcIiA+XCIgKyBKU09OLnN0cmluZ2lmeShuZXh0QmFzZSkpXG4gICAgICAgIHJlcyA9IG5leHRCYXNlO1xuICAgIH1cbiAgICBkZWJ1Z2xvZ1YoZGVidWdsb2dWLmVuYWJsZWQgPyAoXCJBUFBFTkRJTkcgVE8gUkVTXCIgKyAwICsgXCI6XCIgKyBsICsgXCIgPlwiICsgSlNPTi5zdHJpbmdpZnkobmV4dEJhc2UpKSA6ICctJyk7XG4gICAgcmVzdWx0LnNlbnRlbmNlcyA9IHJlcztcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZXhwb3J0cy5leHBhbmRUb2tlbk1hdGNoZXNUb1NlbnRlbmNlcyA9IGV4cGFuZFRva2VuTWF0Y2hlc1RvU2VudGVuY2VzO1xudmFyIHNXb3JkcyA9IHt9O1xuZnVuY3Rpb24gcHJvY2Vzc1N0cmluZyhxdWVyeSwgcnVsZXMpIHtcbiAgICB2YXIgdG9rZW5TdHJ1Y3QgPSB0b2tlbml6ZVN0cmluZyhxdWVyeSwgcnVsZXMsIHNXb3Jkcyk7XG4gICAgZXZhbHVhdGVSYW5nZVJ1bGVzVG9Qb3NpdGlvbih0b2tlblN0cnVjdC50b2tlbnMsIHRva2VuU3RydWN0LmZ1c2FibGUsIHRva2VuU3RydWN0LmNhdGVnb3JpemVkV29yZHMpO1xuICAgIGlmIChkZWJ1Z2xvZy5lbmFibGVkKSB7XG4gICAgICAgIGRlYnVnbG9nKFwiQWZ0ZXIgbWF0Y2hlZCBcIiArIEpTT04uc3RyaW5naWZ5KHRva2VuU3RydWN0LmNhdGVnb3JpemVkV29yZHMpKTtcbiAgICB9XG4gICAgdmFyIGFTZW50ZW5jZXMgPSBleHBhbmRUb2tlbk1hdGNoZXNUb1NlbnRlbmNlcyh0b2tlblN0cnVjdC50b2tlbnMsIHRva2VuU3RydWN0LmNhdGVnb3JpemVkV29yZHMpO1xuICAgIGlmIChkZWJ1Z2xvZy5lbmFibGVkKSB7XG4gICAgICAgIGRlYnVnbG9nKFwiYWZ0ZXIgZXhwYW5kXCIgKyBhU2VudGVuY2VzLnNlbnRlbmNlcy5tYXAoZnVuY3Rpb24gKG9TZW50ZW5jZSkge1xuICAgICAgICAgICAgcmV0dXJuIFNlbnRlbmNlLnJhbmtpbmdQcm9kdWN0KG9TZW50ZW5jZSkgKyBcIjpcIiArIEpTT04uc3RyaW5naWZ5KG9TZW50ZW5jZSk7XG4gICAgICAgIH0pLmpvaW4oXCJcXG5cIikpO1xuICAgIH1cbiAgICBhU2VudGVuY2VzLnNlbnRlbmNlcyA9IElucHV0RmlsdGVyLnJlaW5Gb3JjZShhU2VudGVuY2VzLnNlbnRlbmNlcyk7XG4gICAgaWYgKGRlYnVnbG9nLmVuYWJsZWQpIHtcbiAgICAgICAgZGVidWdsb2coXCJhZnRlciByZWluZm9yY2VcIiArIGFTZW50ZW5jZXMuc2VudGVuY2VzLm1hcChmdW5jdGlvbiAob1NlbnRlbmNlKSB7XG4gICAgICAgICAgICByZXR1cm4gU2VudGVuY2UucmFua2luZ1Byb2R1Y3Qob1NlbnRlbmNlKSArIFwiOlwiICsgSlNPTi5zdHJpbmdpZnkob1NlbnRlbmNlKTtcbiAgICAgICAgfSkuam9pbihcIlxcblwiKSk7XG4gICAgfVxuICAgIHJldHVybiBhU2VudGVuY2VzO1xufVxuZXhwb3J0cy5wcm9jZXNzU3RyaW5nID0gcHJvY2Vzc1N0cmluZztcbmZ1bmN0aW9uIHNpbXBsaWZ5U2VudGVuY2UocmVzKSB7XG4gICAgcmV0dXJuIHJlcy5tYXAoZnVuY3Rpb24gKHIpIHtcbiAgICAgICAgcmV0dXJuIHIubWFwKGZ1bmN0aW9uICh3b3JkKSB7IHJldHVybiB3b3JkLnN0cmluZyArICc9PicgKyB3b3JkLm1hdGNoZWRTdHJpbmcgKyAnLycgKyB3b3JkLmNhdGVnb3J5ICsgKHdvcmQuc3BhbiA/ICcvJyArIHdvcmQuc3BhbiA6ICcnKTsgfSk7XG4gICAgfSk7XG59XG5leHBvcnRzLnNpbXBsaWZ5U2VudGVuY2UgPSBzaW1wbGlmeVNlbnRlbmNlO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
