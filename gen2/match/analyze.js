/**
 *
 * @module jfseb.fdevstart.analyze
 * @file analyze.ts
 * @copyright (c) 2016 Gerd Forstmann
 */
"use strict";

var InputFilter = require('./inputFilter');
var debug = require('debug');
var debuglog = debug('analyze');
var Toolmatcher = require('./toolmatcher');
var Sentence = require('./sentence');
function analyzeAll(sString, aRules, aTools) {
    if (sString.length === 0) {
        return [];
    } else {
        var matched = InputFilter.analyzeString(sString, aRules);
        debuglog("After matched " + JSON.stringify(matched));
        var aSentences = InputFilter.expandMatchArr(matched);
        debuglog("after expand" + aSentences.map(function (oSentence) {
            return Sentence.rankingProduct(oSentence) + ":" + JSON.stringify(oSentence);
        }).join("\n"));
        var aSentencesReinforced = InputFilter.reinForce(aSentences);
        //aSentences.map(function(oSentence) { return InputFilter.reinForce(oSentence); });
        debuglog("after reinforce" + aSentencesReinforced.map(function (oSentence) {
            return Sentence.rankingProduct(oSentence) + ":" + JSON.stringify(oSentence);
        }).join("\n"));
        var matchedTools = Toolmatcher.matchTools(aSentences, aTools); //aTool: Array<IMatch.ITool>): any /* objectstream*/ {
        debuglog(" matchedTools" + JSON.stringify(matchedTools, undefined, 2));
        return matchedTools;
    }
}
exports.analyzeAll = analyzeAll;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tYXRjaC9hbmFseXplLnRzIiwibWF0Y2gvYW5hbHl6ZS5qcyJdLCJuYW1lcyI6WyJJbnB1dEZpbHRlciIsInJlcXVpcmUiLCJkZWJ1ZyIsImRlYnVnbG9nIiwiVG9vbG1hdGNoZXIiLCJTZW50ZW5jZSIsImFuYWx5emVBbGwiLCJzU3RyaW5nIiwiYVJ1bGVzIiwiYVRvb2xzIiwibGVuZ3RoIiwibWF0Y2hlZCIsImFuYWx5emVTdHJpbmciLCJKU09OIiwic3RyaW5naWZ5IiwiYVNlbnRlbmNlcyIsImV4cGFuZE1hdGNoQXJyIiwibWFwIiwib1NlbnRlbmNlIiwicmFua2luZ1Byb2R1Y3QiLCJqb2luIiwiYVNlbnRlbmNlc1JlaW5mb3JjZWQiLCJyZWluRm9yY2UiLCJtYXRjaGVkVG9vbHMiLCJtYXRjaFRvb2xzIiwidW5kZWZpbmVkIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQ01BOztBREVBLElBQVlBLGNBQVdDLFFBQU0sZUFBTixDQUF2QjtBQUVBLElBQVlDLFFBQUtELFFBQU0sT0FBTixDQUFqQjtBQUVBLElBQU1FLFdBQVdELE1BQU0sU0FBTixDQUFqQjtBQU1BLElBQVlFLGNBQVdILFFBQU0sZUFBTixDQUF2QjtBQUVBLElBQVlJLFdBQVFKLFFBQU0sWUFBTixDQUFwQjtBQUVBLFNBQUFLLFVBQUEsQ0FBMkJDLE9BQTNCLEVBQTRDQyxNQUE1QyxFQUF5RUMsTUFBekUsRUFBb0c7QUFDbEcsUUFBSUYsUUFBUUcsTUFBUixLQUFtQixDQUF2QixFQUEwQjtBQUN4QixlQUFPLEVBQVA7QUFDRCxLQUZELE1BRU87QUFDTCxZQUFJQyxVQUFVWCxZQUFZWSxhQUFaLENBQTBCTCxPQUExQixFQUFtQ0MsTUFBbkMsQ0FBZDtBQUNBTCxpQkFBUyxtQkFBbUJVLEtBQUtDLFNBQUwsQ0FBZUgsT0FBZixDQUE1QjtBQUNBLFlBQUlJLGFBQWFmLFlBQVlnQixjQUFaLENBQTJCTCxPQUEzQixDQUFqQjtBQUNBUixpQkFBUyxpQkFBaUJZLFdBQVdFLEdBQVgsQ0FBZSxVQUFVQyxTQUFWLEVBQW1CO0FBQzFELG1CQUFPYixTQUFTYyxjQUFULENBQXdCRCxTQUF4QixJQUFxQyxHQUFyQyxHQUEyQ0wsS0FBS0MsU0FBTCxDQUFlSSxTQUFmLENBQWxEO0FBQ0QsU0FGeUIsRUFFdkJFLElBRnVCLENBRWxCLElBRmtCLENBQTFCO0FBR0EsWUFBSUMsdUJBQXVCckIsWUFBWXNCLFNBQVosQ0FBc0JQLFVBQXRCLENBQTNCO0FBQ0E7QUFDQVosaUJBQVMsb0JBQW9Ca0IscUJBQXFCSixHQUFyQixDQUF5QixVQUFVQyxTQUFWLEVBQW1CO0FBQ3ZFLG1CQUFPYixTQUFTYyxjQUFULENBQXdCRCxTQUF4QixJQUFxQyxHQUFyQyxHQUEyQ0wsS0FBS0MsU0FBTCxDQUFlSSxTQUFmLENBQWxEO0FBQ0QsU0FGNEIsRUFFMUJFLElBRjBCLENBRXJCLElBRnFCLENBQTdCO0FBSUEsWUFBSUcsZUFBZW5CLFlBQVlvQixVQUFaLENBQXVCVCxVQUF2QixFQUFtQ04sTUFBbkMsQ0FBbkIsQ0FiSyxDQWEwRDtBQUMvRE4saUJBQVMsa0JBQWtCVSxLQUFLQyxTQUFMLENBQWVTLFlBQWYsRUFBNkJFLFNBQTdCLEVBQXdDLENBQXhDLENBQTNCO0FBQ0EsZUFBT0YsWUFBUDtBQUNEO0FBQ0Y7QUFwQmVHLFFBQUFwQixVQUFBLEdBQVVBLFVBQVYiLCJmaWxlIjoibWF0Y2gvYW5hbHl6ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICpcbiAqIEBtb2R1bGUgamZzZWIuZmRldnN0YXJ0LmFuYWx5emVcbiAqIEBmaWxlIGFuYWx5emUudHNcbiAqIEBjb3B5cmlnaHQgKGMpIDIwMTYgR2VyZCBGb3JzdG1hbm5cbiAqL1xuXG5cbmltcG9ydCAqIGFzIElucHV0RmlsdGVyIGZyb20gJy4vaW5wdXRGaWx0ZXInO1xuXG5pbXBvcnQgKiBhcyBkZWJ1ZyBmcm9tICdkZWJ1Zyc7XG5cbmNvbnN0IGRlYnVnbG9nID0gZGVidWcoJ2FuYWx5emUnKTtcblxuaW1wb3J0ICogYXMgdXRpbHMgZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xuXG5pbXBvcnQgKiBhcyBJTWF0Y2ggZnJvbSAnLi9pZm1hdGNoJztcblxuaW1wb3J0ICogYXMgVG9vbG1hdGNoZXIgZnJvbSAnLi90b29sbWF0Y2hlcic7XG5cbmltcG9ydCAqIGFzIFNlbnRlbmNlIGZyb20gJy4vc2VudGVuY2UnO1xuXG5leHBvcnQgZnVuY3Rpb24gYW5hbHl6ZUFsbChzU3RyaW5nOiBzdHJpbmcsIGFSdWxlczogQXJyYXk8SU1hdGNoLm1SdWxlPiwgYVRvb2xzOiBBcnJheTxJTWF0Y2guSVRvb2w+KSB7XG4gIGlmIChzU3RyaW5nLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBbXTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbWF0Y2hlZCA9IElucHV0RmlsdGVyLmFuYWx5emVTdHJpbmcoc1N0cmluZywgYVJ1bGVzKTtcbiAgICBkZWJ1Z2xvZyhcIkFmdGVyIG1hdGNoZWQgXCIgKyBKU09OLnN0cmluZ2lmeShtYXRjaGVkKSk7XG4gICAgdmFyIGFTZW50ZW5jZXMgPSBJbnB1dEZpbHRlci5leHBhbmRNYXRjaEFycihtYXRjaGVkKTtcbiAgICBkZWJ1Z2xvZyhcImFmdGVyIGV4cGFuZFwiICsgYVNlbnRlbmNlcy5tYXAoZnVuY3Rpb24gKG9TZW50ZW5jZSkge1xuICAgICAgcmV0dXJuIFNlbnRlbmNlLnJhbmtpbmdQcm9kdWN0KG9TZW50ZW5jZSkgKyBcIjpcIiArIEpTT04uc3RyaW5naWZ5KG9TZW50ZW5jZSk7XG4gICAgfSkuam9pbihcIlxcblwiKSk7XG4gICAgdmFyIGFTZW50ZW5jZXNSZWluZm9yY2VkID0gSW5wdXRGaWx0ZXIucmVpbkZvcmNlKGFTZW50ZW5jZXMpO1xuICAgIC8vYVNlbnRlbmNlcy5tYXAoZnVuY3Rpb24ob1NlbnRlbmNlKSB7IHJldHVybiBJbnB1dEZpbHRlci5yZWluRm9yY2Uob1NlbnRlbmNlKTsgfSk7XG4gICAgZGVidWdsb2coXCJhZnRlciByZWluZm9yY2VcIiArIGFTZW50ZW5jZXNSZWluZm9yY2VkLm1hcChmdW5jdGlvbiAob1NlbnRlbmNlKSB7XG4gICAgICByZXR1cm4gU2VudGVuY2UucmFua2luZ1Byb2R1Y3Qob1NlbnRlbmNlKSArIFwiOlwiICsgSlNPTi5zdHJpbmdpZnkob1NlbnRlbmNlKTtcbiAgICB9KS5qb2luKFwiXFxuXCIpKTtcblxuICAgIHZhciBtYXRjaGVkVG9vbHMgPSBUb29sbWF0Y2hlci5tYXRjaFRvb2xzKGFTZW50ZW5jZXMsIGFUb29scyk7IC8vYVRvb2w6IEFycmF5PElNYXRjaC5JVG9vbD4pOiBhbnkgLyogb2JqZWN0c3RyZWFtKi8ge1xuICAgIGRlYnVnbG9nKFwiIG1hdGNoZWRUb29sc1wiICsgSlNPTi5zdHJpbmdpZnkobWF0Y2hlZFRvb2xzLCB1bmRlZmluZWQsIDIpKTtcbiAgICByZXR1cm4gbWF0Y2hlZFRvb2xzO1xuICB9XG59IiwiLyoqXG4gKlxuICogQG1vZHVsZSBqZnNlYi5mZGV2c3RhcnQuYW5hbHl6ZVxuICogQGZpbGUgYW5hbHl6ZS50c1xuICogQGNvcHlyaWdodCAoYykgMjAxNiBHZXJkIEZvcnN0bWFublxuICovXG5cInVzZSBzdHJpY3RcIjtcbnZhciBJbnB1dEZpbHRlciA9IHJlcXVpcmUoJy4vaW5wdXRGaWx0ZXInKTtcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJyk7XG52YXIgZGVidWdsb2cgPSBkZWJ1ZygnYW5hbHl6ZScpO1xudmFyIFRvb2xtYXRjaGVyID0gcmVxdWlyZSgnLi90b29sbWF0Y2hlcicpO1xudmFyIFNlbnRlbmNlID0gcmVxdWlyZSgnLi9zZW50ZW5jZScpO1xuZnVuY3Rpb24gYW5hbHl6ZUFsbChzU3RyaW5nLCBhUnVsZXMsIGFUb29scykge1xuICAgIGlmIChzU3RyaW5nLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YXIgbWF0Y2hlZCA9IElucHV0RmlsdGVyLmFuYWx5emVTdHJpbmcoc1N0cmluZywgYVJ1bGVzKTtcbiAgICAgICAgZGVidWdsb2coXCJBZnRlciBtYXRjaGVkIFwiICsgSlNPTi5zdHJpbmdpZnkobWF0Y2hlZCkpO1xuICAgICAgICB2YXIgYVNlbnRlbmNlcyA9IElucHV0RmlsdGVyLmV4cGFuZE1hdGNoQXJyKG1hdGNoZWQpO1xuICAgICAgICBkZWJ1Z2xvZyhcImFmdGVyIGV4cGFuZFwiICsgYVNlbnRlbmNlcy5tYXAoZnVuY3Rpb24gKG9TZW50ZW5jZSkge1xuICAgICAgICAgICAgcmV0dXJuIFNlbnRlbmNlLnJhbmtpbmdQcm9kdWN0KG9TZW50ZW5jZSkgKyBcIjpcIiArIEpTT04uc3RyaW5naWZ5KG9TZW50ZW5jZSk7XG4gICAgICAgIH0pLmpvaW4oXCJcXG5cIikpO1xuICAgICAgICB2YXIgYVNlbnRlbmNlc1JlaW5mb3JjZWQgPSBJbnB1dEZpbHRlci5yZWluRm9yY2UoYVNlbnRlbmNlcyk7XG4gICAgICAgIC8vYVNlbnRlbmNlcy5tYXAoZnVuY3Rpb24ob1NlbnRlbmNlKSB7IHJldHVybiBJbnB1dEZpbHRlci5yZWluRm9yY2Uob1NlbnRlbmNlKTsgfSk7XG4gICAgICAgIGRlYnVnbG9nKFwiYWZ0ZXIgcmVpbmZvcmNlXCIgKyBhU2VudGVuY2VzUmVpbmZvcmNlZC5tYXAoZnVuY3Rpb24gKG9TZW50ZW5jZSkge1xuICAgICAgICAgICAgcmV0dXJuIFNlbnRlbmNlLnJhbmtpbmdQcm9kdWN0KG9TZW50ZW5jZSkgKyBcIjpcIiArIEpTT04uc3RyaW5naWZ5KG9TZW50ZW5jZSk7XG4gICAgICAgIH0pLmpvaW4oXCJcXG5cIikpO1xuICAgICAgICB2YXIgbWF0Y2hlZFRvb2xzID0gVG9vbG1hdGNoZXIubWF0Y2hUb29scyhhU2VudGVuY2VzLCBhVG9vbHMpOyAvL2FUb29sOiBBcnJheTxJTWF0Y2guSVRvb2w+KTogYW55IC8qIG9iamVjdHN0cmVhbSovIHtcbiAgICAgICAgZGVidWdsb2coXCIgbWF0Y2hlZFRvb2xzXCIgKyBKU09OLnN0cmluZ2lmeShtYXRjaGVkVG9vbHMsIHVuZGVmaW5lZCwgMikpO1xuICAgICAgICByZXR1cm4gbWF0Y2hlZFRvb2xzO1xuICAgIH1cbn1cbmV4cG9ydHMuYW5hbHl6ZUFsbCA9IGFuYWx5emVBbGw7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
