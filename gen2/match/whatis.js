/**
 *
 * @module jfseb.fdevstart.analyze
 * @file analyze.ts
 * @copyright (c) 2016 Gerd Forstmann
 */
"use strict";

var InputFilter = require('./inputFilter');
var debug = require('debug');
var debuglog = debug('whatis');
var perflog = debug('perf');
var Sentence = require('./sentence');
var Word = require('./word');
function cmpByResultThenRanking(a, b) {
    var cmp = a.result.localeCompare(b.result);
    if (cmp) {
        return cmp;
    }
    return -(a._ranking - b._ranking);
}
exports.cmpByResultThenRanking = cmpByResultThenRanking;
function cmpByRanking(a, b) {
    var cmp = -(a._ranking - b._ranking);
    if (cmp) {
        return cmp;
    }
    cmp = a.result.localeCompare(b.result);
    if (cmp) {
        return cmp;
    }
    // are records different?
    var keys = Object.keys(a.record).concat(Object.keys(b.record)).sort();
    var res = keys.reduce(function (prev, sKey) {
        if (prev) {
            return prev;
        }
        if (b.record[sKey] !== a.record[sKey]) {
            if (!b.record[sKey]) {
                return -1;
            }
            if (!a.record[sKey]) {
                return +1;
            }
            return a.record[sKey].localeCompare(b.record[sKey]);
        }
        return 0;
    }, 0);
    return res;
}
exports.cmpByRanking = cmpByRanking;
function dumpNice(answer) {
    var result = {
        s: "",
        push: function push(s) {
            this.s = this.s + s;
        }
    };
    var s = "**Result for category: " + answer.category + " is " + answer.result + "\n rank: " + answer._ranking + "\n";
    result.push(s);
    Object.keys(answer.record).forEach(function (sRequires, index) {
        if (sRequires.charAt(0) !== '_') {
            result.push("record: " + sRequires + " -> " + answer.record[sRequires]);
        }
        result.push('\n');
    });
    var oSentence = answer.sentence;
    oSentence.forEach(function (oWord, index) {
        var sWord = "[" + index + "] : " + oWord.category + " \"" + oWord.string + "\" => \"" + oWord.matchedString + "\"";
        result.push(sWord + "\n");
    });
    result.push(".\n");
    return result.s;
}
exports.dumpNice = dumpNice;
function dumpWeightsTop(toolmatches, options) {
    var s = '';
    toolmatches.forEach(function (oMatch, index) {
        if (index < options.top) {
            s = s + "WhatIsAnswer[" + index + "]...\n";
            s = s + dumpNice(oMatch);
        }
    });
    return s;
}
exports.dumpWeightsTop = dumpWeightsTop;
function filterRetainTopRankedResult(res) {
    var result = res.filter(function (iRes, index) {
        if (debuglog.enabled) {
            debuglog(index + ' ' + JSON.stringify(iRes));
        }
        if (iRes.result === (res[index - 1] && res[index - 1].result)) {
            debuglog('skip');
            return false;
        }
        return true;
    });
    result.sort(cmpByRanking);
    return result;
}
exports.filterRetainTopRankedResult = filterRetainTopRankedResult;
var Match = require('./match');
function calcRanking(matched, mismatched, relevantCount) {
    var lenMatched = Object.keys(matched).length;
    var factor = Match.calcRankingProduct(matched);
    factor *= Math.pow(1.5, lenMatched);
    var lenMisMatched = Object.keys(mismatched).length;
    var factor2 = Match.calcRankingProduct(mismatched);
    factor2 *= Math.pow(0.4, lenMisMatched);
    return Math.pow(factor2 * factor, 1 / (lenMisMatched + lenMatched));
}
exports.calcRanking = calcRanking;
function calcRankingSimple(matched, mismatched, relevantCount) {
    var factor = Math.pow(1.5, matched);
    var factor2 = Math.pow(0.4, mismatched);
    return Math.pow(factor2 * factor, 1 / (mismatched + matched));
}
exports.calcRankingSimple = calcRankingSimple;
function calcRankingHavingCategory(matched, hasCategory, mismatched, relevantCount) {
    var lenMatched = Object.keys(matched).length;
    var factor = Match.calcRankingProduct(matched);
    factor *= Math.pow(1.5, lenMatched);
    var lenHasCategory = Object.keys(hasCategory).length;
    var factorH = Math.pow(1.2, lenHasCategory);
    var lenMisMatched = Object.keys(mismatched).length;
    var factor2 = Match.calcRankingProduct(mismatched);
    factor2 *= Math.pow(0.4, lenMisMatched);
    return Math.pow(factor2 * factorH * factor, 1 / (lenMisMatched + lenHasCategory + lenMatched));
}
exports.calcRankingHavingCategory = calcRankingHavingCategory;
/**
 * list all top level rankings
 */
function matchRecordsHavingContext(aSentences, category, records, categorySet) {
    debuglog(JSON.stringify(records, undefined, 2));
    var relevantRecords = records.filter(function (record) {
        return record[category] !== undefined && record[category] !== null;
    });
    var res = [];
    debuglog("relevant records nr:" + relevantRecords.length);
    debuglog(debuglog.enabled ? "sentences are : " + JSON.stringify(aSentences, undefined, 2) : "-");
    if (process.env.ABOT_FAST && categorySet) {
        // we are only interested in categories present in records for domains which contain the category
        // var categoryset = Model.calculateRelevantRecordCategories(theModel,category);
        //knowing the target
        perflog("got categoryset with " + Object.keys(categorySet).length);
        var fl = 0;
        var lf = 0;
        var aSimplifiedSentences = aSentences.map(function (oSentence) {
            var fWords = oSentence.filter(function (oWord) {
                return !Word.Word.isFiller(oWord);
            });
            var rWords = oSentence.filter(function (oWord) {
                return !!categorySet[oWord.category] || Word.Word.isCategory(oWord);
            });
            fl = fl + oSentence.length;
            lf = lf + rWords.length;
            return {
                oSentence: oSentence,
                cntRelevantWords: rWords.length,
                rWords: rWords
            };
        });
        Object.freeze(aSimplifiedSentences);
        perflog("post simplify (r=" + relevantRecords.length + " s=" + aSentences.length + " fl " + fl + "->" + lf + ")");
        relevantRecords.forEach(function (record) {
            // count matches in record which are *not* the category
            aSimplifiedSentences.forEach(function (aSentence) {
                var hasCategory = {};
                var mismatched = {};
                var matched = {};
                var cntRelevantWords = aSentence.cntRelevantWords;
                aSentence.rWords.forEach(function (oWord) {
                    if (oWord.category && record[oWord.category] !== undefined) {
                        if (oWord.matchedString === record[oWord.category]) {
                            matched[oWord.category] = oWord;
                        } else {
                            mismatched[oWord.category] = oWord;
                        }
                    } else if (Word.Word.isCategory(oWord) && record[oWord.matchedString]) {
                        hasCategory[oWord.matchedString] = 1;
                    }
                });
                if (Object.keys(matched).length + Object.keys(hasCategory).length > Object.keys(mismatched).length) {
                    res.push({
                        sentence: aSentence.oSentence,
                        record: record,
                        category: category,
                        result: record[category],
                        _ranking: calcRankingHavingCategory(matched, hasCategory, mismatched, cntRelevantWords)
                    });
                }
            });
        });
    } else {
        relevantRecords.forEach(function (record) {
            // count matches in record which are *not* the category
            aSentences.forEach(function (aSentence) {
                var hasCategory = {};
                var mismatched = {};
                var matched = {};
                var cntRelevantWords = 0;
                aSentence.forEach(function (oWord) {
                    if (!Word.Word.isFiller(oWord)) {
                        cntRelevantWords = cntRelevantWords + 1;
                        if (oWord.category && record[oWord.category] !== undefined) {
                            if (oWord.matchedString === record[oWord.category]) {
                                matched[oWord.category] = oWord;
                            } else {
                                mismatched[oWord.category] = oWord;
                            }
                        } else if (Word.Word.isCategory(oWord) && record[oWord.matchedString]) {
                            hasCategory[oWord.matchedString] = 1;
                        }
                    }
                });
                if (Object.keys(matched).length + Object.keys(hasCategory).length > Object.keys(mismatched).length) {
                    res.push({
                        sentence: aSentence,
                        record: record,
                        category: category,
                        result: record[category],
                        _ranking: calcRankingHavingCategory(matched, hasCategory, mismatched, cntRelevantWords)
                    });
                }
            });
        });
    }
    res.sort(cmpByResultThenRanking);
    res = filterRetainTopRankedResult(res);
    return res;
}
exports.matchRecordsHavingContext = matchRecordsHavingContext;
function matchRecords(aSentences, category, records) {
    if (debuglog.enabled) {
        debuglog(JSON.stringify(records, undefined, 2));
    }
    var relevantRecords = records.filter(function (record) {
        return record[category] !== undefined && record[category] !== null;
    });
    var res = [];
    debuglog("relevant records nr:" + relevantRecords.length);
    relevantRecords.forEach(function (record) {
        aSentences.forEach(function (aSentence) {
            // count matches in record which are *not* the category
            var mismatched = {};
            var matched = {};
            var cntRelevantWords = 0;
            aSentence.forEach(function (oWord) {
                if (!Word.Word.isFiller(oWord)) {
                    cntRelevantWords = cntRelevantWords + 1;
                    if (oWord.category && record[oWord.category] !== undefined) {
                        if (oWord.matchedString === record[oWord.category]) {
                            matched[oWord.category] = oWord;
                        } else {
                            mismatched[oWord.category] = oWord;
                        }
                    }
                }
            });
            if (Object.keys(matched).length > Object.keys(mismatched).length) {
                res.push({
                    sentence: aSentence,
                    record: record,
                    category: category,
                    result: record[category],
                    _ranking: calcRanking(matched, mismatched, cntRelevantWords)
                });
            }
        });
    });
    res.sort(cmpByResultThenRanking);
    res = filterRetainTopRankedResult(res);
    return res;
}
exports.matchRecords = matchRecords;
function matchRecordsQuick(aSentences, category, records, categorySet) {
    if (debuglog.enabled) {
        debuglog(JSON.stringify(records, undefined, 2));
    }
    Object.freeze(categorySet);
    perflog("matchRecordsQuick ...(r=" + records.length + " s=" + aSentences.length + ")");
    var relevantRecords = records.filter(function (record) {
        return record[category] !== undefined && record[category] !== null;
    });
    var res = [];
    debuglog("relevant records (r=" + relevantRecords.length + ")");
    perflog("relevant records nr:" + relevantRecords.length + " sentences " + aSentences.length);
    if (process.env.ABOT_FAST && categorySet) {
        // we are only interested in categories present in records for domains which contain the category
        // var categoryset = Model.calculateRelevantRecordCategories(theModel,category);
        //knowing the target
        perflog("got categoryset with " + Object.keys(categorySet).length);
        var fl = 0;
        var lf = 0;
        var aSimplifiedSentences = aSentences.map(function (oSentence) {
            var rWords = oSentence.filter(function (oWord) {
                return !!categorySet[oWord.category];
            });
            fl = fl + oSentence.length;
            lf = lf + rWords.length;
            return {
                oSentence: oSentence,
                cntRelevantWords: rWords.length,
                rWords: rWords
            };
        });
        perflog("post simplify (r=" + relevantRecords.length + " s=" + aSentences.length + " fl " + fl + "->" + lf + ")");
    } else {
        var fl = 0;
        var lf = 0;
        var aSimplifiedSentences = aSentences.map(function (oSentence) {
            var rWords = oSentence.filter(function (oWord) {
                return !Word.Word.isFiller(oWord);
            });
            fl = fl + oSentence.length;
            lf = lf + rWords.length;
            return {
                oSentence: oSentence,
                cntRelevantWords: rWords.length,
                rWords: rWords
            };
        });
        perflog("post simplify (r=" + relevantRecords.length + " s=" + aSentences.length + " fl " + fl + "->" + lf + ")");
    }
    relevantRecords.forEach(function (record) {
        aSimplifiedSentences.forEach(function (aSentence) {
            // count matches in record which are *not* the category
            var mismatched = 0;
            var matched = 0;
            aSentence.rWords.forEach(function (oWord) {
                if (record[oWord.category] !== undefined) {
                    if (oWord.matchedString === record[oWord.category]) {
                        ++matched;
                    } else {
                        ++mismatched;
                    }
                }
            });
            // if(matched > 0 || mismatched > 0 ) {
            //   console.log(" m" + matched + " mismatched" + mismatched);
            // }
            //console.log(JSON.stringify(aSentence.oSentence));
            if (matched > mismatched) {
                res.push({
                    sentence: aSentence.oSentence,
                    record: record,
                    category: category,
                    result: record[category],
                    _ranking: calcRankingSimple(matched, mismatched, aSentence.cntRelevantWords)
                });
            }
        });
    });
    perflog("sort (a=" + res.length + ")");
    res.sort(cmpByResultThenRanking);
    perflog("filterRetain ...");
    res = filterRetainTopRankedResult(res);
    perflog("matchRecordsQuick done: (r=" + relevantRecords.length + " s=" + aSentences.length + " a=" + res.length + ")");
    return res;
}
exports.matchRecordsQuick = matchRecordsQuick;
function analyzeCategory(categoryword, rules, wholesentence) {
    var cats = InputFilter.categorizeAWord(categoryword, rules, wholesentence, {});
    // TODO qualify
    cats = cats.filter(function (cat) {
        return cat.category === 'category';
    });
    debuglog(JSON.stringify(cats));
    if (cats.length) {
        return cats[0].matchedString;
    }
}
exports.analyzeCategory = analyzeCategory;
// const result = WhatIs.resolveCategory(cat, a1.entity,
//   theModel.mRules, theModel.tools, theModel.records);
function resolveCategory(category, contextQueryString, rules, records) {
    if (contextQueryString.length === 0) {
        return [];
    } else {
        var matched = InputFilter.analyzeString(contextQueryString, rules);
        debuglog("after matched " + JSON.stringify(matched));
        var aSentences = InputFilter.expandMatchArr(matched);
        debuglog("after expand" + aSentences.map(function (oSentence) {
            return Sentence.rankingProduct(oSentence) + ":" + JSON.stringify(oSentence);
        }).join("\n"));
        var aSentencesReinforced = InputFilter.reinForce(aSentences);
        //aSentences.map(function(oSentence) { return InputFilter.reinForce(oSentence); });
        debuglog("after reinforce" + aSentencesReinforced.map(function (oSentence) {
            return Sentence.rankingProduct(oSentence) + ":" + JSON.stringify(oSentence);
        }).join("\n"));
        var matchedAnswers = matchRecords(aSentences, category, records); //aTool: Array<IMatch.ITool>): any /* objectstream*/ {
        debuglog(" matchedAnswers" + JSON.stringify(matchedAnswers, undefined, 2));
        return matchedAnswers;
    }
}
exports.resolveCategory = resolveCategory;
function filterOnlyTopRanked(results) {
    var res = results.filter(function (result) {
        if (result._ranking === results[0]._ranking) {
            return true;
        }
        if (result._ranking >= results[0]._ranking) {
            throw new Error("List to filter must be ordered");
        }
        return false;
    });
    return res;
}
exports.filterOnlyTopRanked = filterOnlyTopRanked;
function isIndiscriminateResult(results) {
    var cnt = results.reduce(function (prev, result) {
        if (result._ranking === results[0]._ranking) {
            return prev + 1;
        }
    }, 0);
    if (cnt > 1) {
        // search for a discriminating category value
        var discriminating = Object.keys(results[0].record).reduce(function (prev, category) {
            if (category.charAt(0) !== '_' && category !== results[0].category && results[0].record[category] !== results[1].record[category]) {
                prev.push(category);
            }
            return prev;
        }, []);
        if (discriminating.length) {
            return "Many comparable results, perhaps you want to specify a discriminating " + discriminating.join(',');
        }
        return 'Your question does not have a specific answer';
    }
    return undefined;
}
exports.isIndiscriminateResult = isIndiscriminateResult;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tYXRjaC93aGF0aXMudHMiLCJtYXRjaC93aGF0aXMuanMiXSwibmFtZXMiOlsiSW5wdXRGaWx0ZXIiLCJyZXF1aXJlIiwiZGVidWciLCJkZWJ1Z2xvZyIsInBlcmZsb2ciLCJTZW50ZW5jZSIsIldvcmQiLCJjbXBCeVJlc3VsdFRoZW5SYW5raW5nIiwiYSIsImIiLCJjbXAiLCJyZXN1bHQiLCJsb2NhbGVDb21wYXJlIiwiX3JhbmtpbmciLCJleHBvcnRzIiwiY21wQnlSYW5raW5nIiwia2V5cyIsIk9iamVjdCIsInJlY29yZCIsImNvbmNhdCIsInNvcnQiLCJyZXMiLCJyZWR1Y2UiLCJwcmV2Iiwic0tleSIsImR1bXBOaWNlIiwiYW5zd2VyIiwicyIsInB1c2giLCJjYXRlZ29yeSIsImZvckVhY2giLCJzUmVxdWlyZXMiLCJpbmRleCIsImNoYXJBdCIsIm9TZW50ZW5jZSIsInNlbnRlbmNlIiwib1dvcmQiLCJzV29yZCIsInN0cmluZyIsIm1hdGNoZWRTdHJpbmciLCJkdW1wV2VpZ2h0c1RvcCIsInRvb2xtYXRjaGVzIiwib3B0aW9ucyIsIm9NYXRjaCIsInRvcCIsImZpbHRlclJldGFpblRvcFJhbmtlZFJlc3VsdCIsImZpbHRlciIsImlSZXMiLCJlbmFibGVkIiwiSlNPTiIsInN0cmluZ2lmeSIsIk1hdGNoIiwiY2FsY1JhbmtpbmciLCJtYXRjaGVkIiwibWlzbWF0Y2hlZCIsInJlbGV2YW50Q291bnQiLCJsZW5NYXRjaGVkIiwibGVuZ3RoIiwiZmFjdG9yIiwiY2FsY1JhbmtpbmdQcm9kdWN0IiwiTWF0aCIsInBvdyIsImxlbk1pc01hdGNoZWQiLCJmYWN0b3IyIiwiY2FsY1JhbmtpbmdTaW1wbGUiLCJjYWxjUmFua2luZ0hhdmluZ0NhdGVnb3J5IiwiaGFzQ2F0ZWdvcnkiLCJsZW5IYXNDYXRlZ29yeSIsImZhY3RvckgiLCJtYXRjaFJlY29yZHNIYXZpbmdDb250ZXh0IiwiYVNlbnRlbmNlcyIsInJlY29yZHMiLCJjYXRlZ29yeVNldCIsInVuZGVmaW5lZCIsInJlbGV2YW50UmVjb3JkcyIsInByb2Nlc3MiLCJlbnYiLCJBQk9UX0ZBU1QiLCJmbCIsImxmIiwiYVNpbXBsaWZpZWRTZW50ZW5jZXMiLCJtYXAiLCJmV29yZHMiLCJpc0ZpbGxlciIsInJXb3JkcyIsImlzQ2F0ZWdvcnkiLCJjbnRSZWxldmFudFdvcmRzIiwiZnJlZXplIiwiYVNlbnRlbmNlIiwibWF0Y2hSZWNvcmRzIiwibWF0Y2hSZWNvcmRzUXVpY2siLCJhbmFseXplQ2F0ZWdvcnkiLCJjYXRlZ29yeXdvcmQiLCJydWxlcyIsIndob2xlc2VudGVuY2UiLCJjYXRzIiwiY2F0ZWdvcml6ZUFXb3JkIiwiY2F0IiwicmVzb2x2ZUNhdGVnb3J5IiwiY29udGV4dFF1ZXJ5U3RyaW5nIiwiYW5hbHl6ZVN0cmluZyIsImV4cGFuZE1hdGNoQXJyIiwicmFua2luZ1Byb2R1Y3QiLCJqb2luIiwiYVNlbnRlbmNlc1JlaW5mb3JjZWQiLCJyZWluRm9yY2UiLCJtYXRjaGVkQW5zd2VycyIsImZpbHRlck9ubHlUb3BSYW5rZWQiLCJyZXN1bHRzIiwiRXJyb3IiLCJpc0luZGlzY3JpbWluYXRlUmVzdWx0IiwiY250IiwiZGlzY3JpbWluYXRpbmciXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7QUNNQTs7QURFQSxJQUFZQSxjQUFXQyxRQUFNLGVBQU4sQ0FBdkI7QUFFQSxJQUFZQyxRQUFLRCxRQUFNLE9BQU4sQ0FBakI7QUFFQSxJQUFNRSxXQUFXRCxNQUFNLFFBQU4sQ0FBakI7QUFDQSxJQUFNRSxVQUFVRixNQUFNLE1BQU4sQ0FBaEI7QUFRQSxJQUFZRyxXQUFRSixRQUFNLFlBQU4sQ0FBcEI7QUFFQSxJQUFZSyxPQUFJTCxRQUFNLFFBQU4sQ0FBaEI7QUFHQSxTQUFBTSxzQkFBQSxDQUF1Q0MsQ0FBdkMsRUFBZ0VDLENBQWhFLEVBQXVGO0FBQ3JGLFFBQUlDLE1BQU1GLEVBQUVHLE1BQUYsQ0FBU0MsYUFBVCxDQUF1QkgsRUFBRUUsTUFBekIsQ0FBVjtBQUNBLFFBQUlELEdBQUosRUFBUztB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QUlBLE9BQU9FLFFBQVAsS0FBb0IrRixRQUFRLENBQVIsRUFBVy9GLFFBQW5DLEVBQTZDO0FBQzNDLG1CQUFPVSxPQUFPLENBQWQ7QUFDRDtBQUNGLEtBSlMsRUFJUCxDQUpPLENBQVY7QUFLQSxRQUFJd0YsTUFBTSxDQUFWLEVBQWE7QUFDWDtBQUNBLFlBQUlDLGlCQUFpQi9GLE9BQU9ELElBQVAsQ0FBWTRGLFFBQVEsQ0FBUixFQUFXMUYsTUFBdkIsRUFBK0JJLE1BQS9CLENBQXNDLFVBQVVDLElBQVYsRUFBZ0JNLFFBQWhCLEVBQXdCO0FBQ2pGLGdCQUFLQSxTQUFTSSxNQUFULENBQWdCLENBQWhCLE1BQXVCLEdBQXZCLElBQThCSixhQUFhK0UsUUFBUSxDQUFSLEVBQVcvRSxRQUF2RCxJQUNFK0UsUUFBUSxDQUFSLEVBQVcxRixNQUFYLENBQWtCVyxRQUFsQixNQUFnQytFLFFBQVEsQ0FBUixFQUFXMUYsTUFBWCxDQUFrQlcsUUFBbEIsQ0FEdEMsRUFDb0U7QUFDbEVOLHFCQUFLSyxJQUFMLENBQVVDLFFBQVY7QUFDRDtBQUNELG1CQUFPTixJQUFQO0FBQ0QsU0FOb0IsRUFNbEIsRUFOa0IsQ0FBckI7QUFPQSxZQUFJeUYsZUFBZXZELE1BQW5CLEVBQTJCO0FBQ3pCLG1CQUFPLDJFQUEyRXVELGVBQWVULElBQWYsQ0FBb0IsR0FBcEIsQ0FBbEY7QUFDRDtBQUNELGVBQU8sK0NBQVA7QUFDRDtBQUNELFdBQU85QixTQUFQO0FBQ0Q7QUFyQmUzRCxRQUFBZ0csc0JBQUEsR0FBc0JBLHNCQUF0QiIsImZpbGUiOiJtYXRjaC93aGF0aXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqXG4gKiBAbW9kdWxlIGpmc2ViLmZkZXZzdGFydC5hbmFseXplXG4gKiBAZmlsZSBhbmFseXplLnRzXG4gKiBAY29weXJpZ2h0IChjKSAyMDE2IEdlcmQgRm9yc3RtYW5uXG4gKi9cblxuXG5pbXBvcnQgKiBhcyBJbnB1dEZpbHRlciBmcm9tICcuL2lucHV0RmlsdGVyJztcblxuaW1wb3J0ICogYXMgZGVidWcgZnJvbSAnZGVidWcnO1xuXG5jb25zdCBkZWJ1Z2xvZyA9IGRlYnVnKCd3aGF0aXMnKTtcbmNvbnN0IHBlcmZsb2cgPSBkZWJ1ZygncGVyZicpO1xuXG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tICcuLi91dGlscy91dGlscyc7XG5cbmltcG9ydCAqIGFzIElNYXRjaCBmcm9tICcuL2lmbWF0Y2gnO1xuXG5pbXBvcnQgKiBhcyBUb29sbWF0Y2hlciBmcm9tICcuL3Rvb2xtYXRjaGVyJztcblxuaW1wb3J0ICogYXMgU2VudGVuY2UgZnJvbSAnLi9zZW50ZW5jZSc7XG5cbmltcG9ydCAqIGFzIFdvcmQgZnJvbSAnLi93b3JkJztcblxuXG5leHBvcnQgZnVuY3Rpb24gY21wQnlSZXN1bHRUaGVuUmFua2luZyhhOiBJTWF0Y2guSVdoYXRJc0Fuc3dlciwgYjogSU1hdGNoLklXaGF0SXNBbnN3ZXIpIHtcbiAgdmFyIGNtcCA9IGEucmVzdWx0LmxvY2FsZUNvbXBhcmUoYi5yZXN1bHQpO1xuICBpZiAoY21wKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuICByZXR1cm4gLShhLl9yYW5raW5nIC0gYi5fcmFua2luZyk7XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGNtcEJ5UmFua2luZyhhOiBJTWF0Y2guSVdoYXRJc0Fuc3dlciwgYjogSU1hdGNoLklXaGF0SXNBbnN3ZXIpIHtcbiAgdmFyIGNtcCA9IC0oYS5fcmFua2luZyAtIGIuX3JhbmtpbmcpO1xuICBpZiAoY21wKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuICBjbXAgPSBhLnJlc3VsdC5sb2NhbGVDb21wYXJlKGIucmVzdWx0KTtcbiAgaWYgKGNtcCkge1xuICAgIHJldHVybiBjbXA7XG4gIH1cblxuICAvLyBhcmUgcmVjb3JkcyBkaWZmZXJlbnQ/XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoYS5yZWNvcmQpLmNvbmNhdChPYmplY3Qua2V5cyhiLnJlY29yZCkpLnNvcnQoKTtcbiAgdmFyIHJlcyA9IGtleXMucmVkdWNlKGZ1bmN0aW9uIChwcmV2LCBzS2V5KSB7XG4gICAgaWYgKHByZXYpIHtcbiAgICAgIHJldHVybiBwcmV2O1xuICAgIH1cbiAgICBpZiAoYi5yZWNvcmRbc0tleV0gIT09IGEucmVjb3JkW3NLZXldKSB7XG4gICAgICBpZiAoIWIucmVjb3JkW3NLZXldKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICAgIGlmICghYS5yZWNvcmRbc0tleV0pIHtcbiAgICAgICAgcmV0dXJuICsxO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGEucmVjb3JkW3NLZXldLmxvY2FsZUNvbXBhcmUoYi5yZWNvcmRbc0tleV0pO1xuICAgIH1cbiAgICByZXR1cm4gMDtcbiAgfSwgMCk7XG4gIHJldHVybiByZXM7XG59XG5cblxuXG5leHBvcnQgZnVuY3Rpb24gZHVtcE5pY2UoYW5zd2VyOiBJTWF0Y2guSVdoYXRJc0Fuc3dlcikge1xuICB2YXIgcmVzdWx0ID0ge1xuICAgIHM6IFwiXCIsXG4gICAgcHVzaDogZnVuY3Rpb24gKHMpIHsgdGhpcy5zID0gdGhpcy5zICsgczsgfVxuICB9O1xuICB2YXIgcyA9XG4gICAgYCoqUmVzdWx0IGZvciBjYXRlZ29yeTogJHthbnN3ZXIuY2F0ZWdvcnl9IGlzICR7YW5zd2VyLnJlc3VsdH1cbiByYW5rOiAke2Fuc3dlci5fcmFua2luZ31cbmA7XG4gIHJlc3VsdC5wdXNoKHMpO1xuICBPYmplY3Qua2V5cyhhbnN3ZXIucmVjb3JkKS5mb3JFYWNoKGZ1bmN0aW9uIChzUmVxdWlyZXMsIGluZGV4KSB7XG4gICAgaWYgKHNSZXF1aXJlcy5jaGFyQXQoMCkgIT09ICdfJykge1xuICAgICAgcmVzdWx0LnB1c2goYHJlY29yZDogJHtzUmVxdWlyZXN9IC0+ICR7YW5zd2VyLnJlY29yZFtzUmVxdWlyZXNdfWApO1xuICAgIH1cbiAgICByZXN1bHQucHVzaCgnXFxuJyk7XG4gIH0pO1xuICB2YXIgb1NlbnRlbmNlID0gYW5zd2VyLnNlbnRlbmNlO1xuICBvU2VudGVuY2UuZm9yRWFjaChmdW5jdGlvbiAob1dvcmQsIGluZGV4KSB7XG4gICAgdmFyIHNXb3JkID0gYFske2luZGV4fV0gOiAke29Xb3JkLmNhdGVnb3J5fSBcIiR7b1dvcmQuc3RyaW5nfVwiID0+IFwiJHtvV29yZC5tYXRjaGVkU3RyaW5nfVwiYFxuICAgIHJlc3VsdC5wdXNoKHNXb3JkICsgXCJcXG5cIik7XG4gIH0pXG4gIHJlc3VsdC5wdXNoKFwiLlxcblwiKTtcbiAgcmV0dXJuIHJlc3VsdC5zO1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBkdW1wV2VpZ2h0c1RvcCh0b29sbWF0Y2hlczogQXJyYXk8SU1hdGNoLklXaGF0SXNBbnN3ZXI+LCBvcHRpb25zOiBhbnkpIHtcbiAgdmFyIHMgPSAnJztcbiAgdG9vbG1hdGNoZXMuZm9yRWFjaChmdW5jdGlvbiAob01hdGNoLCBpbmRleCkge1xuICAgIGlmIChpbmRleCA8IG9wdGlvbnMudG9wKSB7XG4gICAgICBzID0gcyArIFwiV2hhdElzQW5zd2VyW1wiICsgaW5kZXggKyBcIl0uLi5cXG5cIjtcbiAgICAgIHMgPSBzICsgZHVtcE5pY2Uob01hdGNoKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpbHRlclJldGFpblRvcFJhbmtlZFJlc3VsdChyZXM6IEFycmF5PElNYXRjaC5JV2hhdElzQW5zd2VyPik6IEFycmF5PElNYXRjaC5JV2hhdElzQW5zd2VyPiB7XG4gIHZhciByZXN1bHQgPSByZXMuZmlsdGVyKGZ1bmN0aW9uIChpUmVzLCBpbmRleCkge1xuICAgIGlmKGRlYnVnbG9nLmVuYWJsZWQpIHtcbiAgICAgIGRlYnVnbG9nKGluZGV4ICsgJyAnICsgSlNPTi5zdHJpbmdpZnkoaVJlcykpO1xuICAgIH1cbiAgICBpZiAoaVJlcy5yZXN1bHQgPT09IChyZXNbaW5kZXggLSAxXSAmJiByZXNbaW5kZXggLSAxXS5yZXN1bHQpKSB7XG4gICAgICBkZWJ1Z2xvZygnc2tpcCcpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSk7XG4gIHJlc3VsdC5zb3J0KGNtcEJ5UmFua2luZyk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmltcG9ydCAqIGFzIE1hdGNoIGZyb20gJy4vbWF0Y2gnO1xuXG5leHBvcnQgZnVuY3Rpb24gY2FsY1JhbmtpbmcobWF0Y2hlZDogeyBba2V5OiBzdHJpbmddOiBJTWF0Y2guSVdvcmQgfSxcbiAgbWlzbWF0Y2hlZDogeyBba2V5OiBzdHJpbmddOiBJTWF0Y2guSVdvcmQgfSwgcmVsZXZhbnRDb3VudDogbnVtYmVyKTogbnVtYmVyIHtcblxuICB2YXIgbGVuTWF0Y2hlZCA9IE9iamVjdC5rZXlzKG1hdGNoZWQpLmxlbmd0aDtcbiAgdmFyIGZhY3RvciA9IE1hdGNoLmNhbGNSYW5raW5nUHJvZHVjdChtYXRjaGVkKTtcbiAgZmFjdG9yICo9IE1hdGgucG93KDEuNSwgbGVuTWF0Y2hlZCk7XG5cbiAgdmFyIGxlbk1pc01hdGNoZWQgPSBPYmplY3Qua2V5cyhtaXNtYXRjaGVkKS5sZW5ndGg7XG4gIHZhciBmYWN0b3IyID0gTWF0Y2guY2FsY1JhbmtpbmdQcm9kdWN0KG1pc21hdGNoZWQpO1xuICBmYWN0b3IyICo9IE1hdGgucG93KDAuNCwgbGVuTWlzTWF0Y2hlZCk7XG5cbiAgcmV0dXJuIE1hdGgucG93KGZhY3RvcjIgKiBmYWN0b3IsIDEgLyAobGVuTWlzTWF0Y2hlZCArIGxlbk1hdGNoZWQpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhbGNSYW5raW5nU2ltcGxlKG1hdGNoZWQ6IG51bWJlcixcbiAgbWlzbWF0Y2hlZDogbnVtYmVyLFxuICByZWxldmFudENvdW50OiBudW1iZXIpOiBudW1iZXIge1xuICB2YXIgZmFjdG9yID0gTWF0aC5wb3coMS41LCBtYXRjaGVkKTtcbiAgdmFyIGZhY3RvcjIgPSBNYXRoLnBvdygwLjQsIG1pc21hdGNoZWQpO1xuICByZXR1cm4gTWF0aC5wb3coZmFjdG9yMiAqIGZhY3RvciwgMSAvIChtaXNtYXRjaGVkICsgbWF0Y2hlZCkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2FsY1JhbmtpbmdIYXZpbmdDYXRlZ29yeShtYXRjaGVkOiB7IFtrZXk6IHN0cmluZ106IElNYXRjaC5JV29yZCB9LFxuICBoYXNDYXRlZ29yeTogeyBba2V5OiBzdHJpbmddOiBudW1iZXIgfSxcbiAgbWlzbWF0Y2hlZDogeyBba2V5OiBzdHJpbmddOiBJTWF0Y2guSVdvcmQgfSwgcmVsZXZhbnRDb3VudDogbnVtYmVyKTogbnVtYmVyIHtcblxuXG4gIHZhciBsZW5NYXRjaGVkID0gT2JqZWN0LmtleXMobWF0Y2hlZCkubGVuZ3RoO1xuICB2YXIgZmFjdG9yID0gTWF0Y2guY2FsY1JhbmtpbmdQcm9kdWN0KG1hdGNoZWQpO1xuICBmYWN0b3IgKj0gTWF0aC5wb3coMS41LCBsZW5NYXRjaGVkKTtcblxuICB2YXIgbGVuSGFzQ2F0ZWdvcnkgPSBPYmplY3Qua2V5cyhoYXNDYXRlZ29yeSkubGVuZ3RoO1xuICB2YXIgZmFjdG9ySCA9IE1hdGgucG93KDEuMiwgbGVuSGFzQ2F0ZWdvcnkpO1xuXG4gIHZhciBsZW5NaXNNYXRjaGVkID0gT2JqZWN0LmtleXMobWlzbWF0Y2hlZCkubGVuZ3RoO1xuICB2YXIgZmFjdG9yMiA9IE1hdGNoLmNhbGNSYW5raW5nUHJvZHVjdChtaXNtYXRjaGVkKTtcbiAgZmFjdG9yMiAqPSBNYXRoLnBvdygwLjQsIGxlbk1pc01hdGNoZWQpO1xuXG4gIHJldHVybiBNYXRoLnBvdyhmYWN0b3IyICogZmFjdG9ySCAqIGZhY3RvciwgMSAvIChsZW5NaXNNYXRjaGVkICsgbGVuSGFzQ2F0ZWdvcnkgKyBsZW5NYXRjaGVkKSk7XG59XG5cbi8qKlxuICogbGlzdCBhbGwgdG9wIGxldmVsIHJhbmtpbmdzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYXRjaFJlY29yZHNIYXZpbmdDb250ZXh0KFxuICBhU2VudGVuY2VzOiBBcnJheTxJTWF0Y2guSVNlbnRlbmNlPiwgY2F0ZWdvcnk6IHN0cmluZywgcmVjb3JkczogQXJyYXk8SU1hdGNoLklSZWNvcmQ+LFxuICBjYXRlZ29yeVNldCA6IHtba2V5IDogc3RyaW5nXSA6IGJvb2xlYW4gfSlcbiAgOiBBcnJheTxJTWF0Y2guSVdoYXRJc0Fuc3dlcj4ge1xuICBkZWJ1Z2xvZyhKU09OLnN0cmluZ2lmeShyZWNvcmRzLCB1bmRlZmluZWQsIDIpKTtcbiAgdmFyIHJlbGV2YW50UmVjb3JkcyA9IHJlY29yZHMuZmlsdGVyKGZ1bmN0aW9uIChyZWNvcmQ6IElNYXRjaC5JUmVjb3JkKSB7XG4gICAgcmV0dXJuIChyZWNvcmRbY2F0ZWdvcnldICE9PSB1bmRlZmluZWQpICYmIChyZWNvcmRbY2F0ZWdvcnldICE9PSBudWxsKTtcbiAgfSk7XG4gIHZhciByZXMgPSBbXTtcbiAgZGVidWdsb2coXCJyZWxldmFudCByZWNvcmRzIG5yOlwiICsgcmVsZXZhbnRSZWNvcmRzLmxlbmd0aCk7XG4gIGRlYnVnbG9nKGRlYnVnbG9nLmVuYWJsZWQgPyAoXCJzZW50ZW5jZXMgYXJlIDogXCIgKyBKU09OLnN0cmluZ2lmeShhU2VudGVuY2VzLCB1bmRlZmluZWQsIDIpKSA6IFwiLVwiKTtcbiAgaWYgKHByb2Nlc3MuZW52LkFCT1RfRkFTVCAmJiBjYXRlZ29yeVNldCkge1xuICAgIC8vIHdlIGFyZSBvbmx5IGludGVyZXN0ZWQgaW4gY2F0ZWdvcmllcyBwcmVzZW50IGluIHJlY29yZHMgZm9yIGRvbWFpbnMgd2hpY2ggY29udGFpbiB0aGUgY2F0ZWdvcnlcbiAgICAvLyB2YXIgY2F0ZWdvcnlzZXQgPSBNb2RlbC5jYWxjdWxhdGVSZWxldmFudFJlY29yZENhdGVnb3JpZXModGhlTW9kZWwsY2F0ZWdvcnkpO1xuICAgIC8va25vd2luZyB0aGUgdGFyZ2V0XG4gICAgcGVyZmxvZyhcImdvdCBjYXRlZ29yeXNldCB3aXRoIFwiICsgT2JqZWN0LmtleXMoY2F0ZWdvcnlTZXQpLmxlbmd0aCk7XG4gICAgdmFyIGZsID0gMDtcbiAgICB2YXIgbGYgPSAwO1xuICAgIHZhciBhU2ltcGxpZmllZFNlbnRlbmNlcyA9IGFTZW50ZW5jZXMubWFwKGZ1bmN0aW9uIChvU2VudGVuY2UpIHtcbiAgICAgIHZhciBmV29yZHMgPSBvU2VudGVuY2UuZmlsdGVyKGZ1bmN0aW9uKG9Xb3JkKSB7XG4gICAgICAgIHJldHVybiAhV29yZC5Xb3JkLmlzRmlsbGVyKG9Xb3JkKTtcbiAgICAgIH0pO1xuICAgICAgdmFyIHJXb3JkcyA9IG9TZW50ZW5jZS5maWx0ZXIoZnVuY3Rpb24gKG9Xb3JkKSB7XG4gICAgICAgICAgcmV0dXJuICAhIWNhdGVnb3J5U2V0W29Xb3JkLmNhdGVnb3J5XSB8fCBXb3JkLldvcmQuaXNDYXRlZ29yeShvV29yZCk7XG4gICAgICAgIH0pO1xuICAgICAgICBmbCA9IGZsICsgb1NlbnRlbmNlLmxlbmd0aDtcbiAgICAgICAgbGYgPSBsZiArIHJXb3Jkcy5sZW5ndGg7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgb1NlbnRlbmNlOiBvU2VudGVuY2UsXG4gICAgICAgICAgY250UmVsZXZhbnRXb3JkczogcldvcmRzLmxlbmd0aCwgLy8gbm90IGEgZmlsbGVyICAvLyB0byBiZSBjb21wYXRpYmxlIGl0IHdvdWxkIGJlIGZXb3Jkc1xuICAgICAgICAgIHJXb3JkczogcldvcmRzXG4gICAgICAgIH07XG4gICAgfSk7XG4gICAgT2JqZWN0LmZyZWV6ZShhU2ltcGxpZmllZFNlbnRlbmNlcyk7XG4gICAgcGVyZmxvZyhcInBvc3Qgc2ltcGxpZnkgKHI9XCIgKyByZWxldmFudFJlY29yZHMubGVuZ3RoICsgXCIgcz1cIiArIGFTZW50ZW5jZXMubGVuZ3RoICsgXCIgZmwgXCIgKyBmbCArIFwiLT5cIiArIGxmICsgXCIpXCIpO1xuICAgIHJlbGV2YW50UmVjb3Jkcy5mb3JFYWNoKGZ1bmN0aW9uIChyZWNvcmQpIHtcbiAgICAgIC8vIGNvdW50IG1hdGNoZXMgaW4gcmVjb3JkIHdoaWNoIGFyZSAqbm90KiB0aGUgY2F0ZWdvcnlcbiAgICAgIGFTaW1wbGlmaWVkU2VudGVuY2VzLmZvckVhY2goZnVuY3Rpb24gKGFTZW50ZW5jZSkge1xuICAgICAgICB2YXIgaGFzQ2F0ZWdvcnkgPSB7fTtcbiAgICAgICAgdmFyIG1pc21hdGNoZWQgPSB7fTtcbiAgICAgICAgdmFyIG1hdGNoZWQgPSB7fTtcbiAgICAgICAgdmFyIGNudFJlbGV2YW50V29yZHMgPSBhU2VudGVuY2UuY250UmVsZXZhbnRXb3JkcztcbiAgICAgICAgYVNlbnRlbmNlLnJXb3Jkcy5mb3JFYWNoKGZ1bmN0aW9uIChvV29yZCkge1xuICAgICAgICAgICAgaWYgKG9Xb3JkLmNhdGVnb3J5ICYmIChyZWNvcmRbb1dvcmQuY2F0ZWdvcnldICE9PSB1bmRlZmluZWQpKSB7XG4gICAgICAgICAgICAgIGlmIChvV29yZC5tYXRjaGVkU3RyaW5nID09PSByZWNvcmRbb1dvcmQuY2F0ZWdvcnldKSB7XG4gICAgICAgICAgICAgICAgbWF0Y2hlZFtvV29yZC5jYXRlZ29yeV0gPSBvV29yZDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBtaXNtYXRjaGVkW29Xb3JkLmNhdGVnb3J5XSA9IG9Xb3JkO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChXb3JkLldvcmQuaXNDYXRlZ29yeShvV29yZCkgJiYgcmVjb3JkW29Xb3JkLm1hdGNoZWRTdHJpbmddKSB7XG4gICAgICAgICAgICAgIGhhc0NhdGVnb3J5W29Xb3JkLm1hdGNoZWRTdHJpbmddID0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIGlmICgoT2JqZWN0LmtleXMobWF0Y2hlZCkubGVuZ3RoICsgT2JqZWN0LmtleXMoaGFzQ2F0ZWdvcnkpLmxlbmd0aCkgPiBPYmplY3Qua2V5cyhtaXNtYXRjaGVkKS5sZW5ndGgpIHtcbiAgICAgICAgICByZXMucHVzaCh7XG4gICAgICAgICAgICBzZW50ZW5jZTogYVNlbnRlbmNlLm9TZW50ZW5jZSxcbiAgICAgICAgICAgIHJlY29yZDogcmVjb3JkLFxuICAgICAgICAgICAgY2F0ZWdvcnk6IGNhdGVnb3J5LFxuICAgICAgICAgICAgcmVzdWx0OiByZWNvcmRbY2F0ZWdvcnldLFxuICAgICAgICAgICAgX3Jhbmtpbmc6IGNhbGNSYW5raW5nSGF2aW5nQ2F0ZWdvcnkobWF0Y2hlZCwgaGFzQ2F0ZWdvcnksIG1pc21hdGNoZWQsIGNudFJlbGV2YW50V29yZHMpXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgcmVsZXZhbnRSZWNvcmRzLmZvckVhY2goZnVuY3Rpb24gKHJlY29yZCkge1xuICAgICAgLy8gY291bnQgbWF0Y2hlcyBpbiByZWNvcmQgd2hpY2ggYXJlICpub3QqIHRoZSBjYXRlZ29yeVxuICAgICAgYVNlbnRlbmNlcy5mb3JFYWNoKGZ1bmN0aW9uIChhU2VudGVuY2UpIHtcbiAgICAgICAgdmFyIGhhc0NhdGVnb3J5ID0ge307XG4gICAgICAgIHZhciBtaXNtYXRjaGVkID0ge307XG4gICAgICAgIHZhciBtYXRjaGVkID0ge307XG4gICAgICAgIHZhciBjbnRSZWxldmFudFdvcmRzID0gMDtcbiAgICAgICAgYVNlbnRlbmNlLmZvckVhY2goZnVuY3Rpb24gKG9Xb3JkKSB7XG4gICAgICAgICAgaWYgKCFXb3JkLldvcmQuaXNGaWxsZXIob1dvcmQpKSB7XG4gICAgICAgICAgICBjbnRSZWxldmFudFdvcmRzID0gY250UmVsZXZhbnRXb3JkcyArIDE7XG4gICAgICAgICAgICBpZiAob1dvcmQuY2F0ZWdvcnkgJiYgKHJlY29yZFtvV29yZC5jYXRlZ29yeV0gIT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgICAgICAgaWYgKG9Xb3JkLm1hdGNoZWRTdHJpbmcgPT09IHJlY29yZFtvV29yZC5jYXRlZ29yeV0pIHtcbiAgICAgICAgICAgICAgICBtYXRjaGVkW29Xb3JkLmNhdGVnb3J5XSA9IG9Xb3JkO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG1pc21hdGNoZWRbb1dvcmQuY2F0ZWdvcnldID0gb1dvcmQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKFdvcmQuV29yZC5pc0NhdGVnb3J5KG9Xb3JkKSAmJiByZWNvcmRbb1dvcmQubWF0Y2hlZFN0cmluZ10pIHtcbiAgICAgICAgICAgICAgaGFzQ2F0ZWdvcnlbb1dvcmQubWF0Y2hlZFN0cmluZ10gPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmICgoT2JqZWN0LmtleXMobWF0Y2hlZCkubGVuZ3RoICsgT2JqZWN0LmtleXMoaGFzQ2F0ZWdvcnkpLmxlbmd0aCkgPiBPYmplY3Qua2V5cyhtaXNtYXRjaGVkKS5sZW5ndGgpIHtcbiAgICAgICAgICByZXMucHVzaCh7XG4gICAgICAgICAgICBzZW50ZW5jZTogYVNlbnRlbmNlLFxuICAgICAgICAgICAgcmVjb3JkOiByZWNvcmQsXG4gICAgICAgICAgICBjYXRlZ29yeTogY2F0ZWdvcnksXG4gICAgICAgICAgICByZXN1bHQ6IHJlY29yZFtjYXRlZ29yeV0sXG4gICAgICAgICAgICBfcmFua2luZzogY2FsY1JhbmtpbmdIYXZpbmdDYXRlZ29yeShtYXRjaGVkLCBoYXNDYXRlZ29yeSwgbWlzbWF0Y2hlZCwgY250UmVsZXZhbnRXb3JkcylcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9KTtcbiAgfVxuICByZXMuc29ydChjbXBCeVJlc3VsdFRoZW5SYW5raW5nKTtcbiAgcmVzID0gZmlsdGVyUmV0YWluVG9wUmFua2VkUmVzdWx0KHJlcyk7XG4gIHJldHVybiByZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtYXRjaFJlY29yZHMoYVNlbnRlbmNlczogQXJyYXk8SU1hdGNoLklTZW50ZW5jZT4sIGNhdGVnb3J5OiBzdHJpbmcsIHJlY29yZHM6IEFycmF5PElNYXRjaC5JUmVjb3JkPilcbiAgOiBBcnJheTxJTWF0Y2guSVdoYXRJc0Fuc3dlcj4ge1xuICBpZiAoZGVidWdsb2cuZW5hYmxlZCkge1xuICAgIGRlYnVnbG9nKEpTT04uc3RyaW5naWZ5KHJlY29yZHMsIHVuZGVmaW5lZCwgMikpO1xuICB9XG4gIHZhciByZWxldmFudFJlY29yZHMgPSByZWNvcmRzLmZpbHRlcihmdW5jdGlvbiAocmVjb3JkOiBJTWF0Y2guSVJlY29yZCkge1xuICAgIHJldHVybiAocmVjb3JkW2NhdGVnb3J5XSAhPT0gdW5kZWZpbmVkKSAmJiAocmVjb3JkW2NhdGVnb3J5XSAhPT0gbnVsbCk7XG4gIH0pO1xuICB2YXIgcmVzID0gW107XG4gIGRlYnVnbG9nKFwicmVsZXZhbnQgcmVjb3JkcyBucjpcIiArIHJlbGV2YW50UmVjb3Jkcy5sZW5ndGgpO1xuICByZWxldmFudFJlY29yZHMuZm9yRWFjaChmdW5jdGlvbiAocmVjb3JkKSB7XG4gICAgYVNlbnRlbmNlcy5mb3JFYWNoKGZ1bmN0aW9uIChhU2VudGVuY2UpIHtcbiAgICAgIC8vIGNvdW50IG1hdGNoZXMgaW4gcmVjb3JkIHdoaWNoIGFyZSAqbm90KiB0aGUgY2F0ZWdvcnlcbiAgICAgIHZhciBtaXNtYXRjaGVkID0ge31cbiAgICAgIHZhciBtYXRjaGVkID0ge307XG4gICAgICB2YXIgY250UmVsZXZhbnRXb3JkcyA9IDA7XG4gICAgICBhU2VudGVuY2UuZm9yRWFjaChmdW5jdGlvbiAob1dvcmQpIHtcbiAgICAgICAgaWYgKCFXb3JkLldvcmQuaXNGaWxsZXIob1dvcmQpKSB7XG4gICAgICAgICAgY250UmVsZXZhbnRXb3JkcyA9IGNudFJlbGV2YW50V29yZHMgKyAxO1xuICAgICAgICAgIGlmIChvV29yZC5jYXRlZ29yeSAmJiAocmVjb3JkW29Xb3JkLmNhdGVnb3J5XSAhPT0gdW5kZWZpbmVkKSkge1xuICAgICAgICAgICAgaWYgKG9Xb3JkLm1hdGNoZWRTdHJpbmcgPT09IHJlY29yZFtvV29yZC5jYXRlZ29yeV0pIHtcbiAgICAgICAgICAgICAgbWF0Y2hlZFtvV29yZC5jYXRlZ29yeV0gPSBvV29yZDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG1pc21hdGNoZWRbb1dvcmQuY2F0ZWdvcnldID0gb1dvcmQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmIChPYmplY3Qua2V5cyhtYXRjaGVkKS5sZW5ndGggPiBPYmplY3Qua2V5cyhtaXNtYXRjaGVkKS5sZW5ndGgpIHtcbiAgICAgICAgcmVzLnB1c2goe1xuICAgICAgICAgIHNlbnRlbmNlOiBhU2VudGVuY2UsXG4gICAgICAgICAgcmVjb3JkOiByZWNvcmQsXG4gICAgICAgICAgY2F0ZWdvcnk6IGNhdGVnb3J5LFxuICAgICAgICAgIHJlc3VsdDogcmVjb3JkW2NhdGVnb3J5XSxcbiAgICAgICAgICBfcmFua2luZzogY2FsY1JhbmtpbmcobWF0Y2hlZCwgbWlzbWF0Y2hlZCwgY250UmVsZXZhbnRXb3JkcylcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSlcbiAgfSk7XG4gIHJlcy5zb3J0KGNtcEJ5UmVzdWx0VGhlblJhbmtpbmcpO1xuICByZXMgPSBmaWx0ZXJSZXRhaW5Ub3BSYW5rZWRSZXN1bHQocmVzKTtcbiAgcmV0dXJuIHJlcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1hdGNoUmVjb3Jkc1F1aWNrKGFTZW50ZW5jZXM6IEFycmF5PElNYXRjaC5JU2VudGVuY2U+LCBjYXRlZ29yeTogc3RyaW5nLCByZWNvcmRzOiBBcnJheTxJTWF0Y2guSVJlY29yZD4sIGNhdGVnb3J5U2V0PyA6IHsgW2tleSA6IHN0cmluZ10gOiBib29sZWFufSApXG4gIDogQXJyYXk8SU1hdGNoLklXaGF0SXNBbnN3ZXI+IHtcbiAgaWYgKGRlYnVnbG9nLmVuYWJsZWQpIHtcbiAgICBkZWJ1Z2xvZyhKU09OLnN0cmluZ2lmeShyZWNvcmRzLCB1bmRlZmluZWQsIDIpKTtcbiAgfVxuICBPYmplY3QuZnJlZXplKGNhdGVnb3J5U2V0KTtcbiAgcGVyZmxvZyhcIm1hdGNoUmVjb3Jkc1F1aWNrIC4uLihyPVwiICsgcmVjb3Jkcy5sZW5ndGggKyBcIiBzPVwiICsgYVNlbnRlbmNlcy5sZW5ndGggKyBcIilcIik7XG4gIHZhciByZWxldmFudFJlY29yZHMgPSByZWNvcmRzLmZpbHRlcihmdW5jdGlvbiAocmVjb3JkOiBJTWF0Y2guSVJlY29yZCkge1xuICAgIHJldHVybiAocmVjb3JkW2NhdGVnb3J5XSAhPT0gdW5kZWZpbmVkKSAmJiAocmVjb3JkW2NhdGVnb3J5XSAhPT0gbnVsbCk7XG4gIH0pO1xuICB2YXIgcmVzID0gW107XG4gIGRlYnVnbG9nKFwicmVsZXZhbnQgcmVjb3JkcyAocj1cIiArIHJlbGV2YW50UmVjb3Jkcy5sZW5ndGggKyBcIilcIik7XG4gIHBlcmZsb2coXCJyZWxldmFudCByZWNvcmRzIG5yOlwiICsgcmVsZXZhbnRSZWNvcmRzLmxlbmd0aCArIFwiIHNlbnRlbmNlcyBcIiArIGFTZW50ZW5jZXMubGVuZ3RoKTtcbiAgaWYocHJvY2Vzcy5lbnYuQUJPVF9GQVNUICYmIGNhdGVnb3J5U2V0KSB7XG4gICAgLy8gd2UgYXJlIG9ubHkgaW50ZXJlc3RlZCBpbiBjYXRlZ29yaWVzIHByZXNlbnQgaW4gcmVjb3JkcyBmb3IgZG9tYWlucyB3aGljaCBjb250YWluIHRoZSBjYXRlZ29yeVxuICAgIC8vIHZhciBjYXRlZ29yeXNldCA9IE1vZGVsLmNhbGN1bGF0ZVJlbGV2YW50UmVjb3JkQ2F0ZWdvcmllcyh0aGVNb2RlbCxjYXRlZ29yeSk7XG4gICAgLy9rbm93aW5nIHRoZSB0YXJnZXRcbiAgICBwZXJmbG9nKFwiZ290IGNhdGVnb3J5c2V0IHdpdGggXCIgKyBPYmplY3Qua2V5cyhjYXRlZ29yeVNldCkubGVuZ3RoKTtcbiAgICB2YXIgZmwgPSAwO1xuICAgICAgdmFyIGxmID0gMDtcbiAgICAgIHZhciBhU2ltcGxpZmllZFNlbnRlbmNlcyA9IGFTZW50ZW5jZXMubWFwKGZ1bmN0aW9uIChvU2VudGVuY2UpIHtcbiAgICAgICAgdmFyIHJXb3JkcyA9IG9TZW50ZW5jZS5maWx0ZXIoZnVuY3Rpb24gKG9Xb3JkKSB7XG4gICAgICAgICAgcmV0dXJuICEhY2F0ZWdvcnlTZXRbb1dvcmQuY2F0ZWdvcnldO1xuICAgICAgICB9KTtcbiAgICAgICAgZmwgPSBmbCArIG9TZW50ZW5jZS5sZW5ndGg7XG4gICAgICAgIGxmID0gbGYgKyByV29yZHMubGVuZ3RoO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG9TZW50ZW5jZTogb1NlbnRlbmNlLFxuICAgICAgICAgIGNudFJlbGV2YW50V29yZHM6IHJXb3Jkcy5sZW5ndGgsXG4gICAgICAgICAgcldvcmRzOiByV29yZHNcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgICAgcGVyZmxvZyhcInBvc3Qgc2ltcGxpZnkgKHI9XCIgKyByZWxldmFudFJlY29yZHMubGVuZ3RoICsgXCIgcz1cIiArIGFTZW50ZW5jZXMubGVuZ3RoICsgXCIgZmwgXCIgKyBmbCArIFwiLT5cIiArIGxmICsgXCIpXCIpO1xuXG5cblxuICB9IGVsc2Uge1xuICAgIHZhciBmbCA9IDA7XG4gICAgdmFyIGxmID0gMDtcbiAgICB2YXIgYVNpbXBsaWZpZWRTZW50ZW5jZXMgPSBhU2VudGVuY2VzLm1hcChmdW5jdGlvbiAob1NlbnRlbmNlKSB7XG4gICAgICB2YXIgcldvcmRzID0gb1NlbnRlbmNlLmZpbHRlcihmdW5jdGlvbiAob1dvcmQpIHtcbiAgICAgICAgcmV0dXJuICFXb3JkLldvcmQuaXNGaWxsZXIob1dvcmQpO1xuICAgICAgfSk7XG4gICAgICBmbCA9IGZsICsgb1NlbnRlbmNlLmxlbmd0aDtcbiAgICAgIGxmID0gbGYgKyByV29yZHMubGVuZ3RoO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgb1NlbnRlbmNlOiBvU2VudGVuY2UsXG4gICAgICAgIGNudFJlbGV2YW50V29yZHM6IHJXb3Jkcy5sZW5ndGgsXG4gICAgICAgIHJXb3JkczogcldvcmRzXG4gICAgICB9O1xuICAgIH0pO1xuICAgIHBlcmZsb2coXCJwb3N0IHNpbXBsaWZ5IChyPVwiICsgcmVsZXZhbnRSZWNvcmRzLmxlbmd0aCArIFwiIHM9XCIgKyBhU2VudGVuY2VzLmxlbmd0aCArIFwiIGZsIFwiICsgZmwgKyBcIi0+XCIgKyBsZiArIFwiKVwiKTtcbiAgfVxuXG4gIHJlbGV2YW50UmVjb3Jkcy5mb3JFYWNoKGZ1bmN0aW9uIChyZWNvcmQpIHtcbiAgICBhU2ltcGxpZmllZFNlbnRlbmNlcy5mb3JFYWNoKGZ1bmN0aW9uIChhU2VudGVuY2UpIHtcbiAgICAgIC8vIGNvdW50IG1hdGNoZXMgaW4gcmVjb3JkIHdoaWNoIGFyZSAqbm90KiB0aGUgY2F0ZWdvcnlcbiAgICAgIHZhciBtaXNtYXRjaGVkID0gMDtcbiAgICAgIHZhciBtYXRjaGVkID0gMDtcbiAgICAgIGFTZW50ZW5jZS5yV29yZHMuZm9yRWFjaChmdW5jdGlvbiAob1dvcmQpIHtcbiAgICAgICAgaWYgKHJlY29yZFtvV29yZC5jYXRlZ29yeV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmIChvV29yZC5tYXRjaGVkU3RyaW5nID09PSByZWNvcmRbb1dvcmQuY2F0ZWdvcnldKSB7XG4gICAgICAgICAgICArK21hdGNoZWQ7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICsrbWlzbWF0Y2hlZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAvLyBpZihtYXRjaGVkID4gMCB8fCBtaXNtYXRjaGVkID4gMCApIHtcbiAgICAgLy8gICBjb25zb2xlLmxvZyhcIiBtXCIgKyBtYXRjaGVkICsgXCIgbWlzbWF0Y2hlZFwiICsgbWlzbWF0Y2hlZCk7XG4gICAgIC8vIH1cbiAgICAgIC8vY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkoYVNlbnRlbmNlLm9TZW50ZW5jZSkpO1xuICAgICAgaWYgKG1hdGNoZWQgPiBtaXNtYXRjaGVkKSB7XG4gICAgICAgIHJlcy5wdXNoKHtcbiAgICAgICAgICBzZW50ZW5jZTogYVNlbnRlbmNlLm9TZW50ZW5jZSxcbiAgICAgICAgICByZWNvcmQ6IHJlY29yZCxcbiAgICAgICAgICBjYXRlZ29yeTogY2F0ZWdvcnksXG4gICAgICAgICAgcmVzdWx0OiByZWNvcmRbY2F0ZWdvcnldLFxuICAgICAgICAgIF9yYW5raW5nOiBjYWxjUmFua2luZ1NpbXBsZShtYXRjaGVkLCBtaXNtYXRjaGVkLCBhU2VudGVuY2UuY250UmVsZXZhbnRXb3JkcylcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSlcbiAgfSk7XG4gIHBlcmZsb2coXCJzb3J0IChhPVwiICsgcmVzLmxlbmd0aCArIFwiKVwiKTtcbiAgcmVzLnNvcnQoY21wQnlSZXN1bHRUaGVuUmFua2luZyk7XG4gIHBlcmZsb2coXCJmaWx0ZXJSZXRhaW4gLi4uXCIpO1xuICByZXMgPSBmaWx0ZXJSZXRhaW5Ub3BSYW5rZWRSZXN1bHQocmVzKTtcbiAgcGVyZmxvZyhcIm1hdGNoUmVjb3Jkc1F1aWNrIGRvbmU6IChyPVwiICsgcmVsZXZhbnRSZWNvcmRzLmxlbmd0aCArIFwiIHM9XCIgKyBhU2VudGVuY2VzLmxlbmd0aCArIFwiIGE9XCIgKyByZXMubGVuZ3RoICsgXCIpXCIpO1xuICByZXR1cm4gcmVzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYW5hbHl6ZUNhdGVnb3J5KGNhdGVnb3J5d29yZDogc3RyaW5nLCBydWxlczogSU1hdGNoLlNwbGl0UnVsZXMsIHdob2xlc2VudGVuY2U6IHN0cmluZyk6IHN0cmluZyB7XG4gIHZhciBjYXRzID0gSW5wdXRGaWx0ZXIuY2F0ZWdvcml6ZUFXb3JkKGNhdGVnb3J5d29yZCwgcnVsZXMsIHdob2xlc2VudGVuY2UsIHt9KTtcbiAgLy8gVE9ETyBxdWFsaWZ5XG4gIGNhdHMgPSBjYXRzLmZpbHRlcihmdW5jdGlvbiAoY2F0KSB7XG4gICAgcmV0dXJuIGNhdC5jYXRlZ29yeSA9PT0gJ2NhdGVnb3J5JztcbiAgfSlcbiAgZGVidWdsb2coSlNPTi5zdHJpbmdpZnkoY2F0cykpO1xuICBpZiAoY2F0cy5sZW5ndGgpIHtcbiAgICByZXR1cm4gY2F0c1swXS5tYXRjaGVkU3RyaW5nO1xuICB9XG59XG5cbi8vIGNvbnN0IHJlc3VsdCA9IFdoYXRJcy5yZXNvbHZlQ2F0ZWdvcnkoY2F0LCBhMS5lbnRpdHksXG4vLyAgIHRoZU1vZGVsLm1SdWxlcywgdGhlTW9kZWwudG9vbHMsIHRoZU1vZGVsLnJlY29yZHMpO1xuXG5leHBvcnQgZnVuY3Rpb24gcmVzb2x2ZUNhdGVnb3J5KGNhdGVnb3J5OiBzdHJpbmcsIGNvbnRleHRRdWVyeVN0cmluZzogc3RyaW5nLFxuICBydWxlcyA6IElNYXRjaC5TcGxpdFJ1bGVzLCByZWNvcmRzOiBBcnJheTxJTWF0Y2guSVJlY29yZD4pOiBBcnJheTxJTWF0Y2guSVdoYXRJc0Fuc3dlcj4ge1xuICBpZiAoY29udGV4dFF1ZXJ5U3RyaW5nLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBbXTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbWF0Y2hlZCA9IElucHV0RmlsdGVyLmFuYWx5emVTdHJpbmcoY29udGV4dFF1ZXJ5U3RyaW5nLCBydWxlcyk7XG4gICAgZGVidWdsb2coXCJhZnRlciBtYXRjaGVkIFwiICsgSlNPTi5zdHJpbmdpZnkobWF0Y2hlZCkpO1xuICAgIHZhciBhU2VudGVuY2VzID0gSW5wdXRGaWx0ZXIuZXhwYW5kTWF0Y2hBcnIobWF0Y2hlZCk7XG4gICAgZGVidWdsb2coXCJhZnRlciBleHBhbmRcIiArIGFTZW50ZW5jZXMubWFwKGZ1bmN0aW9uIChvU2VudGVuY2UpIHtcbiAgICAgIHJldHVybiBTZW50ZW5jZS5yYW5raW5nUHJvZHVjdChvU2VudGVuY2UpICsgXCI6XCIgKyBKU09OLnN0cmluZ2lmeShvU2VudGVuY2UpO1xuICAgIH0pLmpvaW4oXCJcXG5cIikpO1xuICAgIHZhciBhU2VudGVuY2VzUmVpbmZvcmNlZCA9IElucHV0RmlsdGVyLnJlaW5Gb3JjZShhU2VudGVuY2VzKTtcbiAgICAvL2FTZW50ZW5jZXMubWFwKGZ1bmN0aW9uKG9TZW50ZW5jZSkgeyByZXR1cm4gSW5wdXRGaWx0ZXIucmVpbkZvcmNlKG9TZW50ZW5jZSk7IH0pO1xuICAgIGRlYnVnbG9nKFwiYWZ0ZXIgcmVpbmZvcmNlXCIgKyBhU2VudGVuY2VzUmVpbmZvcmNlZC5tYXAoZnVuY3Rpb24gKG9TZW50ZW5jZSkge1xuICAgICAgcmV0dXJuIFNlbnRlbmNlLnJhbmtpbmdQcm9kdWN0KG9TZW50ZW5jZSkgKyBcIjpcIiArIEpTT04uc3RyaW5naWZ5KG9TZW50ZW5jZSk7XG4gICAgfSkuam9pbihcIlxcblwiKSk7XG4gICAgdmFyIG1hdGNoZWRBbnN3ZXJzID0gbWF0Y2hSZWNvcmRzKGFTZW50ZW5jZXMsIGNhdGVnb3J5LCByZWNvcmRzKTsgLy9hVG9vbDogQXJyYXk8SU1hdGNoLklUb29sPik6IGFueSAvKiBvYmplY3RzdHJlYW0qLyB7XG4gICAgZGVidWdsb2coXCIgbWF0Y2hlZEFuc3dlcnNcIiArIEpTT04uc3RyaW5naWZ5KG1hdGNoZWRBbnN3ZXJzLCB1bmRlZmluZWQsIDIpKTtcbiAgICByZXR1cm4gbWF0Y2hlZEFuc3dlcnM7XG4gIH1cbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gZmlsdGVyT25seVRvcFJhbmtlZChyZXN1bHRzOiBBcnJheTxJTWF0Y2guSVdoYXRJc0Fuc3dlcj4pOiBBcnJheTxJTWF0Y2guSVdoYXRJc0Fuc3dlcj4ge1xuICB2YXIgcmVzID0gcmVzdWx0cy5maWx0ZXIoZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgIGlmIChyZXN1bHQuX3JhbmtpbmcgPT09IHJlc3VsdHNbMF0uX3JhbmtpbmcpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAocmVzdWx0Ll9yYW5raW5nID49IHJlc3VsdHNbMF0uX3JhbmtpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkxpc3QgdG8gZmlsdGVyIG11c3QgYmUgb3JkZXJlZFwiKTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9KTtcbiAgcmV0dXJuIHJlcztcbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gaXNJbmRpc2NyaW1pbmF0ZVJlc3VsdChyZXN1bHRzOiBBcnJheTxJTWF0Y2guSVdoYXRJc0Fuc3dlcj4pOiBzdHJpbmcge1xuICB2YXIgY250ID0gcmVzdWx0cy5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIHJlc3VsdCkge1xuICAgIGlmIChyZXN1bHQuX3JhbmtpbmcgPT09IHJlc3VsdHNbMF0uX3JhbmtpbmcpIHtcbiAgICAgIHJldHVybiBwcmV2ICsgMTtcbiAgICB9XG4gIH0sIDApO1xuICBpZiAoY250ID4gMSkge1xuICAgIC8vIHNlYXJjaCBmb3IgYSBkaXNjcmltaW5hdGluZyBjYXRlZ29yeSB2YWx1ZVxuICAgIHZhciBkaXNjcmltaW5hdGluZyA9IE9iamVjdC5rZXlzKHJlc3VsdHNbMF0ucmVjb3JkKS5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIGNhdGVnb3J5KSB7XG4gICAgICBpZiAoKGNhdGVnb3J5LmNoYXJBdCgwKSAhPT0gJ18nICYmIGNhdGVnb3J5ICE9PSByZXN1bHRzWzBdLmNhdGVnb3J5KVxuICAgICAgICAmJiAocmVzdWx0c1swXS5yZWNvcmRbY2F0ZWdvcnldICE9PSByZXN1bHRzWzFdLnJlY29yZFtjYXRlZ29yeV0pKSB7XG4gICAgICAgIHByZXYucHVzaChjYXRlZ29yeSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcHJldjtcbiAgICB9LCBbXSk7XG4gICAgaWYgKGRpc2NyaW1pbmF0aW5nLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIFwiTWFueSBjb21wYXJhYmxlIHJlc3VsdHMsIHBlcmhhcHMgeW91IHdhbnQgdG8gc3BlY2lmeSBhIGRpc2NyaW1pbmF0aW5nIFwiICsgZGlzY3JpbWluYXRpbmcuam9pbignLCcpO1xuICAgIH1cbiAgICByZXR1cm4gJ1lvdXIgcXVlc3Rpb24gZG9lcyBub3QgaGF2ZSBhIHNwZWNpZmljIGFuc3dlcic7XG4gIH1cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cbiIsIi8qKlxuICpcbiAqIEBtb2R1bGUgamZzZWIuZmRldnN0YXJ0LmFuYWx5emVcbiAqIEBmaWxlIGFuYWx5emUudHNcbiAqIEBjb3B5cmlnaHQgKGMpIDIwMTYgR2VyZCBGb3JzdG1hbm5cbiAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgSW5wdXRGaWx0ZXIgPSByZXF1aXJlKCcuL2lucHV0RmlsdGVyJyk7XG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpO1xudmFyIGRlYnVnbG9nID0gZGVidWcoJ3doYXRpcycpO1xudmFyIHBlcmZsb2cgPSBkZWJ1ZygncGVyZicpO1xudmFyIFNlbnRlbmNlID0gcmVxdWlyZSgnLi9zZW50ZW5jZScpO1xudmFyIFdvcmQgPSByZXF1aXJlKCcuL3dvcmQnKTtcbmZ1bmN0aW9uIGNtcEJ5UmVzdWx0VGhlblJhbmtpbmcoYSwgYikge1xuICAgIHZhciBjbXAgPSBhLnJlc3VsdC5sb2NhbGVDb21wYXJlKGIucmVzdWx0KTtcbiAgICBpZiAoY21wKSB7XG4gICAgICAgIHJldHVybiBjbXA7XG4gICAgfVxuICAgIHJldHVybiAtKGEuX3JhbmtpbmcgLSBiLl9yYW5raW5nKTtcbn1cbmV4cG9ydHMuY21wQnlSZXN1bHRUaGVuUmFua2luZyA9IGNtcEJ5UmVzdWx0VGhlblJhbmtpbmc7XG5mdW5jdGlvbiBjbXBCeVJhbmtpbmcoYSwgYikge1xuICAgIHZhciBjbXAgPSAtKGEuX3JhbmtpbmcgLSBiLl9yYW5raW5nKTtcbiAgICBpZiAoY21wKSB7XG4gICAgICAgIHJldHVybiBjbXA7XG4gICAgfVxuICAgIGNtcCA9IGEucmVzdWx0LmxvY2FsZUNvbXBhcmUoYi5yZXN1bHQpO1xuICAgIGlmIChjbXApIHtcbiAgICAgICAgcmV0dXJuIGNtcDtcbiAgICB9XG4gICAgLy8gYXJlIHJlY29yZHMgZGlmZmVyZW50P1xuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoYS5yZWNvcmQpLmNvbmNhdChPYmplY3Qua2V5cyhiLnJlY29yZCkpLnNvcnQoKTtcbiAgICB2YXIgcmVzID0ga2V5cy5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIHNLZXkpIHtcbiAgICAgICAgaWYgKHByZXYpIHtcbiAgICAgICAgICAgIHJldHVybiBwcmV2O1xuICAgICAgICB9XG4gICAgICAgIGlmIChiLnJlY29yZFtzS2V5XSAhPT0gYS5yZWNvcmRbc0tleV0pIHtcbiAgICAgICAgICAgIGlmICghYi5yZWNvcmRbc0tleV0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWEucmVjb3JkW3NLZXldKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICsxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGEucmVjb3JkW3NLZXldLmxvY2FsZUNvbXBhcmUoYi5yZWNvcmRbc0tleV0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAwO1xuICAgIH0sIDApO1xuICAgIHJldHVybiByZXM7XG59XG5leHBvcnRzLmNtcEJ5UmFua2luZyA9IGNtcEJ5UmFua2luZztcbmZ1bmN0aW9uIGR1bXBOaWNlKGFuc3dlcikge1xuICAgIHZhciByZXN1bHQgPSB7XG4gICAgICAgIHM6IFwiXCIsXG4gICAgICAgIHB1c2g6IGZ1bmN0aW9uIChzKSB7IHRoaXMucyA9IHRoaXMucyArIHM7IH1cbiAgICB9O1xuICAgIHZhciBzID0gXCIqKlJlc3VsdCBmb3IgY2F0ZWdvcnk6IFwiICsgYW5zd2VyLmNhdGVnb3J5ICsgXCIgaXMgXCIgKyBhbnN3ZXIucmVzdWx0ICsgXCJcXG4gcmFuazogXCIgKyBhbnN3ZXIuX3JhbmtpbmcgKyBcIlxcblwiO1xuICAgIHJlc3VsdC5wdXNoKHMpO1xuICAgIE9iamVjdC5rZXlzKGFuc3dlci5yZWNvcmQpLmZvckVhY2goZnVuY3Rpb24gKHNSZXF1aXJlcywgaW5kZXgpIHtcbiAgICAgICAgaWYgKHNSZXF1aXJlcy5jaGFyQXQoMCkgIT09ICdfJykge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goXCJyZWNvcmQ6IFwiICsgc1JlcXVpcmVzICsgXCIgLT4gXCIgKyBhbnN3ZXIucmVjb3JkW3NSZXF1aXJlc10pO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdC5wdXNoKCdcXG4nKTtcbiAgICB9KTtcbiAgICB2YXIgb1NlbnRlbmNlID0gYW5zd2VyLnNlbnRlbmNlO1xuICAgIG9TZW50ZW5jZS5mb3JFYWNoKGZ1bmN0aW9uIChvV29yZCwgaW5kZXgpIHtcbiAgICAgICAgdmFyIHNXb3JkID0gXCJbXCIgKyBpbmRleCArIFwiXSA6IFwiICsgb1dvcmQuY2F0ZWdvcnkgKyBcIiBcXFwiXCIgKyBvV29yZC5zdHJpbmcgKyBcIlxcXCIgPT4gXFxcIlwiICsgb1dvcmQubWF0Y2hlZFN0cmluZyArIFwiXFxcIlwiO1xuICAgICAgICByZXN1bHQucHVzaChzV29yZCArIFwiXFxuXCIpO1xuICAgIH0pO1xuICAgIHJlc3VsdC5wdXNoKFwiLlxcblwiKTtcbiAgICByZXR1cm4gcmVzdWx0LnM7XG59XG5leHBvcnRzLmR1bXBOaWNlID0gZHVtcE5pY2U7XG5mdW5jdGlvbiBkdW1wV2VpZ2h0c1RvcCh0b29sbWF0Y2hlcywgb3B0aW9ucykge1xuICAgIHZhciBzID0gJyc7XG4gICAgdG9vbG1hdGNoZXMuZm9yRWFjaChmdW5jdGlvbiAob01hdGNoLCBpbmRleCkge1xuICAgICAgICBpZiAoaW5kZXggPCBvcHRpb25zLnRvcCkge1xuICAgICAgICAgICAgcyA9IHMgKyBcIldoYXRJc0Fuc3dlcltcIiArIGluZGV4ICsgXCJdLi4uXFxuXCI7XG4gICAgICAgICAgICBzID0gcyArIGR1bXBOaWNlKG9NYXRjaCk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcztcbn1cbmV4cG9ydHMuZHVtcFdlaWdodHNUb3AgPSBkdW1wV2VpZ2h0c1RvcDtcbmZ1bmN0aW9uIGZpbHRlclJldGFpblRvcFJhbmtlZFJlc3VsdChyZXMpIHtcbiAgICB2YXIgcmVzdWx0ID0gcmVzLmZpbHRlcihmdW5jdGlvbiAoaVJlcywgaW5kZXgpIHtcbiAgICAgICAgaWYgKGRlYnVnbG9nLmVuYWJsZWQpIHtcbiAgICAgICAgICAgIGRlYnVnbG9nKGluZGV4ICsgJyAnICsgSlNPTi5zdHJpbmdpZnkoaVJlcykpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpUmVzLnJlc3VsdCA9PT0gKHJlc1tpbmRleCAtIDFdICYmIHJlc1tpbmRleCAtIDFdLnJlc3VsdCkpIHtcbiAgICAgICAgICAgIGRlYnVnbG9nKCdza2lwJyk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSk7XG4gICAgcmVzdWx0LnNvcnQoY21wQnlSYW5raW5nKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZXhwb3J0cy5maWx0ZXJSZXRhaW5Ub3BSYW5rZWRSZXN1bHQgPSBmaWx0ZXJSZXRhaW5Ub3BSYW5rZWRSZXN1bHQ7XG52YXIgTWF0Y2ggPSByZXF1aXJlKCcuL21hdGNoJyk7XG5mdW5jdGlvbiBjYWxjUmFua2luZyhtYXRjaGVkLCBtaXNtYXRjaGVkLCByZWxldmFudENvdW50KSB7XG4gICAgdmFyIGxlbk1hdGNoZWQgPSBPYmplY3Qua2V5cyhtYXRjaGVkKS5sZW5ndGg7XG4gICAgdmFyIGZhY3RvciA9IE1hdGNoLmNhbGNSYW5raW5nUHJvZHVjdChtYXRjaGVkKTtcbiAgICBmYWN0b3IgKj0gTWF0aC5wb3coMS41LCBsZW5NYXRjaGVkKTtcbiAgICB2YXIgbGVuTWlzTWF0Y2hlZCA9IE9iamVjdC5rZXlzKG1pc21hdGNoZWQpLmxlbmd0aDtcbiAgICB2YXIgZmFjdG9yMiA9IE1hdGNoLmNhbGNSYW5raW5nUHJvZHVjdChtaXNtYXRjaGVkKTtcbiAgICBmYWN0b3IyICo9IE1hdGgucG93KDAuNCwgbGVuTWlzTWF0Y2hlZCk7XG4gICAgcmV0dXJuIE1hdGgucG93KGZhY3RvcjIgKiBmYWN0b3IsIDEgLyAobGVuTWlzTWF0Y2hlZCArIGxlbk1hdGNoZWQpKTtcbn1cbmV4cG9ydHMuY2FsY1JhbmtpbmcgPSBjYWxjUmFua2luZztcbmZ1bmN0aW9uIGNhbGNSYW5raW5nU2ltcGxlKG1hdGNoZWQsIG1pc21hdGNoZWQsIHJlbGV2YW50Q291bnQpIHtcbiAgICB2YXIgZmFjdG9yID0gTWF0aC5wb3coMS41LCBtYXRjaGVkKTtcbiAgICB2YXIgZmFjdG9yMiA9IE1hdGgucG93KDAuNCwgbWlzbWF0Y2hlZCk7XG4gICAgcmV0dXJuIE1hdGgucG93KGZhY3RvcjIgKiBmYWN0b3IsIDEgLyAobWlzbWF0Y2hlZCArIG1hdGNoZWQpKTtcbn1cbmV4cG9ydHMuY2FsY1JhbmtpbmdTaW1wbGUgPSBjYWxjUmFua2luZ1NpbXBsZTtcbmZ1bmN0aW9uIGNhbGNSYW5raW5nSGF2aW5nQ2F0ZWdvcnkobWF0Y2hlZCwgaGFzQ2F0ZWdvcnksIG1pc21hdGNoZWQsIHJlbGV2YW50Q291bnQpIHtcbiAgICB2YXIgbGVuTWF0Y2hlZCA9IE9iamVjdC5rZXlzKG1hdGNoZWQpLmxlbmd0aDtcbiAgICB2YXIgZmFjdG9yID0gTWF0Y2guY2FsY1JhbmtpbmdQcm9kdWN0KG1hdGNoZWQpO1xuICAgIGZhY3RvciAqPSBNYXRoLnBvdygxLjUsIGxlbk1hdGNoZWQpO1xuICAgIHZhciBsZW5IYXNDYXRlZ29yeSA9IE9iamVjdC5rZXlzKGhhc0NhdGVnb3J5KS5sZW5ndGg7XG4gICAgdmFyIGZhY3RvckggPSBNYXRoLnBvdygxLjIsIGxlbkhhc0NhdGVnb3J5KTtcbiAgICB2YXIgbGVuTWlzTWF0Y2hlZCA9IE9iamVjdC5rZXlzKG1pc21hdGNoZWQpLmxlbmd0aDtcbiAgICB2YXIgZmFjdG9yMiA9IE1hdGNoLmNhbGNSYW5raW5nUHJvZHVjdChtaXNtYXRjaGVkKTtcbiAgICBmYWN0b3IyICo9IE1hdGgucG93KDAuNCwgbGVuTWlzTWF0Y2hlZCk7XG4gICAgcmV0dXJuIE1hdGgucG93KGZhY3RvcjIgKiBmYWN0b3JIICogZmFjdG9yLCAxIC8gKGxlbk1pc01hdGNoZWQgKyBsZW5IYXNDYXRlZ29yeSArIGxlbk1hdGNoZWQpKTtcbn1cbmV4cG9ydHMuY2FsY1JhbmtpbmdIYXZpbmdDYXRlZ29yeSA9IGNhbGNSYW5raW5nSGF2aW5nQ2F0ZWdvcnk7XG4vKipcbiAqIGxpc3QgYWxsIHRvcCBsZXZlbCByYW5raW5nc1xuICovXG5mdW5jdGlvbiBtYXRjaFJlY29yZHNIYXZpbmdDb250ZXh0KGFTZW50ZW5jZXMsIGNhdGVnb3J5LCByZWNvcmRzLCBjYXRlZ29yeVNldCkge1xuICAgIGRlYnVnbG9nKEpTT04uc3RyaW5naWZ5KHJlY29yZHMsIHVuZGVmaW5lZCwgMikpO1xuICAgIHZhciByZWxldmFudFJlY29yZHMgPSByZWNvcmRzLmZpbHRlcihmdW5jdGlvbiAocmVjb3JkKSB7XG4gICAgICAgIHJldHVybiAocmVjb3JkW2NhdGVnb3J5XSAhPT0gdW5kZWZpbmVkKSAmJiAocmVjb3JkW2NhdGVnb3J5XSAhPT0gbnVsbCk7XG4gICAgfSk7XG4gICAgdmFyIHJlcyA9IFtdO1xuICAgIGRlYnVnbG9nKFwicmVsZXZhbnQgcmVjb3JkcyBucjpcIiArIHJlbGV2YW50UmVjb3Jkcy5sZW5ndGgpO1xuICAgIGRlYnVnbG9nKGRlYnVnbG9nLmVuYWJsZWQgPyAoXCJzZW50ZW5jZXMgYXJlIDogXCIgKyBKU09OLnN0cmluZ2lmeShhU2VudGVuY2VzLCB1bmRlZmluZWQsIDIpKSA6IFwiLVwiKTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuQUJPVF9GQVNUICYmIGNhdGVnb3J5U2V0KSB7XG4gICAgICAgIC8vIHdlIGFyZSBvbmx5IGludGVyZXN0ZWQgaW4gY2F0ZWdvcmllcyBwcmVzZW50IGluIHJlY29yZHMgZm9yIGRvbWFpbnMgd2hpY2ggY29udGFpbiB0aGUgY2F0ZWdvcnlcbiAgICAgICAgLy8gdmFyIGNhdGVnb3J5c2V0ID0gTW9kZWwuY2FsY3VsYXRlUmVsZXZhbnRSZWNvcmRDYXRlZ29yaWVzKHRoZU1vZGVsLGNhdGVnb3J5KTtcbiAgICAgICAgLy9rbm93aW5nIHRoZSB0YXJnZXRcbiAgICAgICAgcGVyZmxvZyhcImdvdCBjYXRlZ29yeXNldCB3aXRoIFwiICsgT2JqZWN0LmtleXMoY2F0ZWdvcnlTZXQpLmxlbmd0aCk7XG4gICAgICAgIHZhciBmbCA9IDA7XG4gICAgICAgIHZhciBsZiA9IDA7XG4gICAgICAgIHZhciBhU2ltcGxpZmllZFNlbnRlbmNlcyA9IGFTZW50ZW5jZXMubWFwKGZ1bmN0aW9uIChvU2VudGVuY2UpIHtcbiAgICAgICAgICAgIHZhciBmV29yZHMgPSBvU2VudGVuY2UuZmlsdGVyKGZ1bmN0aW9uIChvV29yZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAhV29yZC5Xb3JkLmlzRmlsbGVyKG9Xb3JkKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdmFyIHJXb3JkcyA9IG9TZW50ZW5jZS5maWx0ZXIoZnVuY3Rpb24gKG9Xb3JkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICEhY2F0ZWdvcnlTZXRbb1dvcmQuY2F0ZWdvcnldIHx8IFdvcmQuV29yZC5pc0NhdGVnb3J5KG9Xb3JkKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZmwgPSBmbCArIG9TZW50ZW5jZS5sZW5ndGg7XG4gICAgICAgICAgICBsZiA9IGxmICsgcldvcmRzLmxlbmd0aDtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgb1NlbnRlbmNlOiBvU2VudGVuY2UsXG4gICAgICAgICAgICAgICAgY250UmVsZXZhbnRXb3JkczogcldvcmRzLmxlbmd0aCxcbiAgICAgICAgICAgICAgICByV29yZHM6IHJXb3Jkc1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5mcmVlemUoYVNpbXBsaWZpZWRTZW50ZW5jZXMpO1xuICAgICAgICBwZXJmbG9nKFwicG9zdCBzaW1wbGlmeSAocj1cIiArIHJlbGV2YW50UmVjb3Jkcy5sZW5ndGggKyBcIiBzPVwiICsgYVNlbnRlbmNlcy5sZW5ndGggKyBcIiBmbCBcIiArIGZsICsgXCItPlwiICsgbGYgKyBcIilcIik7XG4gICAgICAgIHJlbGV2YW50UmVjb3Jkcy5mb3JFYWNoKGZ1bmN0aW9uIChyZWNvcmQpIHtcbiAgICAgICAgICAgIC8vIGNvdW50IG1hdGNoZXMgaW4gcmVjb3JkIHdoaWNoIGFyZSAqbm90KiB0aGUgY2F0ZWdvcnlcbiAgICAgICAgICAgIGFTaW1wbGlmaWVkU2VudGVuY2VzLmZvckVhY2goZnVuY3Rpb24gKGFTZW50ZW5jZSkge1xuICAgICAgICAgICAgICAgIHZhciBoYXNDYXRlZ29yeSA9IHt9O1xuICAgICAgICAgICAgICAgIHZhciBtaXNtYXRjaGVkID0ge307XG4gICAgICAgICAgICAgICAgdmFyIG1hdGNoZWQgPSB7fTtcbiAgICAgICAgICAgICAgICB2YXIgY250UmVsZXZhbnRXb3JkcyA9IGFTZW50ZW5jZS5jbnRSZWxldmFudFdvcmRzO1xuICAgICAgICAgICAgICAgIGFTZW50ZW5jZS5yV29yZHMuZm9yRWFjaChmdW5jdGlvbiAob1dvcmQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9Xb3JkLmNhdGVnb3J5ICYmIChyZWNvcmRbb1dvcmQuY2F0ZWdvcnldICE9PSB1bmRlZmluZWQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob1dvcmQubWF0Y2hlZFN0cmluZyA9PT0gcmVjb3JkW29Xb3JkLmNhdGVnb3J5XSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoZWRbb1dvcmQuY2F0ZWdvcnldID0gb1dvcmQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaXNtYXRjaGVkW29Xb3JkLmNhdGVnb3J5XSA9IG9Xb3JkO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKFdvcmQuV29yZC5pc0NhdGVnb3J5KG9Xb3JkKSAmJiByZWNvcmRbb1dvcmQubWF0Y2hlZFN0cmluZ10pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhc0NhdGVnb3J5W29Xb3JkLm1hdGNoZWRTdHJpbmddID0gMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmICgoT2JqZWN0LmtleXMobWF0Y2hlZCkubGVuZ3RoICsgT2JqZWN0LmtleXMoaGFzQ2F0ZWdvcnkpLmxlbmd0aCkgPiBPYmplY3Qua2V5cyhtaXNtYXRjaGVkKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VudGVuY2U6IGFTZW50ZW5jZS5vU2VudGVuY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICByZWNvcmQ6IHJlY29yZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBjYXRlZ29yeSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdDogcmVjb3JkW2NhdGVnb3J5XSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9yYW5raW5nOiBjYWxjUmFua2luZ0hhdmluZ0NhdGVnb3J5KG1hdGNoZWQsIGhhc0NhdGVnb3J5LCBtaXNtYXRjaGVkLCBjbnRSZWxldmFudFdvcmRzKVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZWxldmFudFJlY29yZHMuZm9yRWFjaChmdW5jdGlvbiAocmVjb3JkKSB7XG4gICAgICAgICAgICAvLyBjb3VudCBtYXRjaGVzIGluIHJlY29yZCB3aGljaCBhcmUgKm5vdCogdGhlIGNhdGVnb3J5XG4gICAgICAgICAgICBhU2VudGVuY2VzLmZvckVhY2goZnVuY3Rpb24gKGFTZW50ZW5jZSkge1xuICAgICAgICAgICAgICAgIHZhciBoYXNDYXRlZ29yeSA9IHt9O1xuICAgICAgICAgICAgICAgIHZhciBtaXNtYXRjaGVkID0ge307XG4gICAgICAgICAgICAgICAgdmFyIG1hdGNoZWQgPSB7fTtcbiAgICAgICAgICAgICAgICB2YXIgY250UmVsZXZhbnRXb3JkcyA9IDA7XG4gICAgICAgICAgICAgICAgYVNlbnRlbmNlLmZvckVhY2goZnVuY3Rpb24gKG9Xb3JkKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghV29yZC5Xb3JkLmlzRmlsbGVyKG9Xb3JkKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY250UmVsZXZhbnRXb3JkcyA9IGNudFJlbGV2YW50V29yZHMgKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9Xb3JkLmNhdGVnb3J5ICYmIChyZWNvcmRbb1dvcmQuY2F0ZWdvcnldICE9PSB1bmRlZmluZWQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9Xb3JkLm1hdGNoZWRTdHJpbmcgPT09IHJlY29yZFtvV29yZC5jYXRlZ29yeV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlZFtvV29yZC5jYXRlZ29yeV0gPSBvV29yZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pc21hdGNoZWRbb1dvcmQuY2F0ZWdvcnldID0gb1dvcmQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoV29yZC5Xb3JkLmlzQ2F0ZWdvcnkob1dvcmQpICYmIHJlY29yZFtvV29yZC5tYXRjaGVkU3RyaW5nXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc0NhdGVnb3J5W29Xb3JkLm1hdGNoZWRTdHJpbmddID0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmICgoT2JqZWN0LmtleXMobWF0Y2hlZCkubGVuZ3RoICsgT2JqZWN0LmtleXMoaGFzQ2F0ZWdvcnkpLmxlbmd0aCkgPiBPYmplY3Qua2V5cyhtaXNtYXRjaGVkKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VudGVuY2U6IGFTZW50ZW5jZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlY29yZDogcmVjb3JkLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcnk6IGNhdGVnb3J5LFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0OiByZWNvcmRbY2F0ZWdvcnldLFxuICAgICAgICAgICAgICAgICAgICAgICAgX3Jhbmtpbmc6IGNhbGNSYW5raW5nSGF2aW5nQ2F0ZWdvcnkobWF0Y2hlZCwgaGFzQ2F0ZWdvcnksIG1pc21hdGNoZWQsIGNudFJlbGV2YW50V29yZHMpXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmVzLnNvcnQoY21wQnlSZXN1bHRUaGVuUmFua2luZyk7XG4gICAgcmVzID0gZmlsdGVyUmV0YWluVG9wUmFua2VkUmVzdWx0KHJlcyk7XG4gICAgcmV0dXJuIHJlcztcbn1cbmV4cG9ydHMubWF0Y2hSZWNvcmRzSGF2aW5nQ29udGV4dCA9IG1hdGNoUmVjb3Jkc0hhdmluZ0NvbnRleHQ7XG5mdW5jdGlvbiBtYXRjaFJlY29yZHMoYVNlbnRlbmNlcywgY2F0ZWdvcnksIHJlY29yZHMpIHtcbiAgICBpZiAoZGVidWdsb2cuZW5hYmxlZCkge1xuICAgICAgICBkZWJ1Z2xvZyhKU09OLnN0cmluZ2lmeShyZWNvcmRzLCB1bmRlZmluZWQsIDIpKTtcbiAgICB9XG4gICAgdmFyIHJlbGV2YW50UmVjb3JkcyA9IHJlY29yZHMuZmlsdGVyKGZ1bmN0aW9uIChyZWNvcmQpIHtcbiAgICAgICAgcmV0dXJuIChyZWNvcmRbY2F0ZWdvcnldICE9PSB1bmRlZmluZWQpICYmIChyZWNvcmRbY2F0ZWdvcnldICE9PSBudWxsKTtcbiAgICB9KTtcbiAgICB2YXIgcmVzID0gW107XG4gICAgZGVidWdsb2coXCJyZWxldmFudCByZWNvcmRzIG5yOlwiICsgcmVsZXZhbnRSZWNvcmRzLmxlbmd0aCk7XG4gICAgcmVsZXZhbnRSZWNvcmRzLmZvckVhY2goZnVuY3Rpb24gKHJlY29yZCkge1xuICAgICAgICBhU2VudGVuY2VzLmZvckVhY2goZnVuY3Rpb24gKGFTZW50ZW5jZSkge1xuICAgICAgICAgICAgLy8gY291bnQgbWF0Y2hlcyBpbiByZWNvcmQgd2hpY2ggYXJlICpub3QqIHRoZSBjYXRlZ29yeVxuICAgICAgICAgICAgdmFyIG1pc21hdGNoZWQgPSB7fTtcbiAgICAgICAgICAgIHZhciBtYXRjaGVkID0ge307XG4gICAgICAgICAgICB2YXIgY250UmVsZXZhbnRXb3JkcyA9IDA7XG4gICAgICAgICAgICBhU2VudGVuY2UuZm9yRWFjaChmdW5jdGlvbiAob1dvcmQpIHtcbiAgICAgICAgICAgICAgICBpZiAoIVdvcmQuV29yZC5pc0ZpbGxlcihvV29yZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY250UmVsZXZhbnRXb3JkcyA9IGNudFJlbGV2YW50V29yZHMgKyAxO1xuICAgICAgICAgICAgICAgICAgICBpZiAob1dvcmQuY2F0ZWdvcnkgJiYgKHJlY29yZFtvV29yZC5jYXRlZ29yeV0gIT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvV29yZC5tYXRjaGVkU3RyaW5nID09PSByZWNvcmRbb1dvcmQuY2F0ZWdvcnldKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlZFtvV29yZC5jYXRlZ29yeV0gPSBvV29yZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pc21hdGNoZWRbb1dvcmQuY2F0ZWdvcnldID0gb1dvcmQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhtYXRjaGVkKS5sZW5ndGggPiBPYmplY3Qua2V5cyhtaXNtYXRjaGVkKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICByZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHNlbnRlbmNlOiBhU2VudGVuY2UsXG4gICAgICAgICAgICAgICAgICAgIHJlY29yZDogcmVjb3JkLFxuICAgICAgICAgICAgICAgICAgICBjYXRlZ29yeTogY2F0ZWdvcnksXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdDogcmVjb3JkW2NhdGVnb3J5XSxcbiAgICAgICAgICAgICAgICAgICAgX3Jhbmtpbmc6IGNhbGNSYW5raW5nKG1hdGNoZWQsIG1pc21hdGNoZWQsIGNudFJlbGV2YW50V29yZHMpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJlcy5zb3J0KGNtcEJ5UmVzdWx0VGhlblJhbmtpbmcpO1xuICAgIHJlcyA9IGZpbHRlclJldGFpblRvcFJhbmtlZFJlc3VsdChyZXMpO1xuICAgIHJldHVybiByZXM7XG59XG5leHBvcnRzLm1hdGNoUmVjb3JkcyA9IG1hdGNoUmVjb3JkcztcbmZ1bmN0aW9uIG1hdGNoUmVjb3Jkc1F1aWNrKGFTZW50ZW5jZXMsIGNhdGVnb3J5LCByZWNvcmRzLCBjYXRlZ29yeVNldCkge1xuICAgIGlmIChkZWJ1Z2xvZy5lbmFibGVkKSB7XG4gICAgICAgIGRlYnVnbG9nKEpTT04uc3RyaW5naWZ5KHJlY29yZHMsIHVuZGVmaW5lZCwgMikpO1xuICAgIH1cbiAgICBPYmplY3QuZnJlZXplKGNhdGVnb3J5U2V0KTtcbiAgICBwZXJmbG9nKFwibWF0Y2hSZWNvcmRzUXVpY2sgLi4uKHI9XCIgKyByZWNvcmRzLmxlbmd0aCArIFwiIHM9XCIgKyBhU2VudGVuY2VzLmxlbmd0aCArIFwiKVwiKTtcbiAgICB2YXIgcmVsZXZhbnRSZWNvcmRzID0gcmVjb3Jkcy5maWx0ZXIoZnVuY3Rpb24gKHJlY29yZCkge1xuICAgICAgICByZXR1cm4gKHJlY29yZFtjYXRlZ29yeV0gIT09IHVuZGVmaW5lZCkgJiYgKHJlY29yZFtjYXRlZ29yeV0gIT09IG51bGwpO1xuICAgIH0pO1xuICAgIHZhciByZXMgPSBbXTtcbiAgICBkZWJ1Z2xvZyhcInJlbGV2YW50IHJlY29yZHMgKHI9XCIgKyByZWxldmFudFJlY29yZHMubGVuZ3RoICsgXCIpXCIpO1xuICAgIHBlcmZsb2coXCJyZWxldmFudCByZWNvcmRzIG5yOlwiICsgcmVsZXZhbnRSZWNvcmRzLmxlbmd0aCArIFwiIHNlbnRlbmNlcyBcIiArIGFTZW50ZW5jZXMubGVuZ3RoKTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuQUJPVF9GQVNUICYmIGNhdGVnb3J5U2V0KSB7XG4gICAgICAgIC8vIHdlIGFyZSBvbmx5IGludGVyZXN0ZWQgaW4gY2F0ZWdvcmllcyBwcmVzZW50IGluIHJlY29yZHMgZm9yIGRvbWFpbnMgd2hpY2ggY29udGFpbiB0aGUgY2F0ZWdvcnlcbiAgICAgICAgLy8gdmFyIGNhdGVnb3J5c2V0ID0gTW9kZWwuY2FsY3VsYXRlUmVsZXZhbnRSZWNvcmRDYXRlZ29yaWVzKHRoZU1vZGVsLGNhdGVnb3J5KTtcbiAgICAgICAgLy9rbm93aW5nIHRoZSB0YXJnZXRcbiAgICAgICAgcGVyZmxvZyhcImdvdCBjYXRlZ29yeXNldCB3aXRoIFwiICsgT2JqZWN0LmtleXMoY2F0ZWdvcnlTZXQpLmxlbmd0aCk7XG4gICAgICAgIHZhciBmbCA9IDA7XG4gICAgICAgIHZhciBsZiA9IDA7XG4gICAgICAgIHZhciBhU2ltcGxpZmllZFNlbnRlbmNlcyA9IGFTZW50ZW5jZXMubWFwKGZ1bmN0aW9uIChvU2VudGVuY2UpIHtcbiAgICAgICAgICAgIHZhciByV29yZHMgPSBvU2VudGVuY2UuZmlsdGVyKGZ1bmN0aW9uIChvV29yZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAhIWNhdGVnb3J5U2V0W29Xb3JkLmNhdGVnb3J5XTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZmwgPSBmbCArIG9TZW50ZW5jZS5sZW5ndGg7XG4gICAgICAgICAgICBsZiA9IGxmICsgcldvcmRzLmxlbmd0aDtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgb1NlbnRlbmNlOiBvU2VudGVuY2UsXG4gICAgICAgICAgICAgICAgY250UmVsZXZhbnRXb3JkczogcldvcmRzLmxlbmd0aCxcbiAgICAgICAgICAgICAgICByV29yZHM6IHJXb3Jkc1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICAgIHBlcmZsb2coXCJwb3N0IHNpbXBsaWZ5IChyPVwiICsgcmVsZXZhbnRSZWNvcmRzLmxlbmd0aCArIFwiIHM9XCIgKyBhU2VudGVuY2VzLmxlbmd0aCArIFwiIGZsIFwiICsgZmwgKyBcIi0+XCIgKyBsZiArIFwiKVwiKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHZhciBmbCA9IDA7XG4gICAgICAgIHZhciBsZiA9IDA7XG4gICAgICAgIHZhciBhU2ltcGxpZmllZFNlbnRlbmNlcyA9IGFTZW50ZW5jZXMubWFwKGZ1bmN0aW9uIChvU2VudGVuY2UpIHtcbiAgICAgICAgICAgIHZhciByV29yZHMgPSBvU2VudGVuY2UuZmlsdGVyKGZ1bmN0aW9uIChvV29yZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAhV29yZC5Xb3JkLmlzRmlsbGVyKG9Xb3JkKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZmwgPSBmbCArIG9TZW50ZW5jZS5sZW5ndGg7XG4gICAgICAgICAgICBsZiA9IGxmICsgcldvcmRzLmxlbmd0aDtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgb1NlbnRlbmNlOiBvU2VudGVuY2UsXG4gICAgICAgICAgICAgICAgY250UmVsZXZhbnRXb3JkczogcldvcmRzLmxlbmd0aCxcbiAgICAgICAgICAgICAgICByV29yZHM6IHJXb3Jkc1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICAgIHBlcmZsb2coXCJwb3N0IHNpbXBsaWZ5IChyPVwiICsgcmVsZXZhbnRSZWNvcmRzLmxlbmd0aCArIFwiIHM9XCIgKyBhU2VudGVuY2VzLmxlbmd0aCArIFwiIGZsIFwiICsgZmwgKyBcIi0+XCIgKyBsZiArIFwiKVwiKTtcbiAgICB9XG4gICAgcmVsZXZhbnRSZWNvcmRzLmZvckVhY2goZnVuY3Rpb24gKHJlY29yZCkge1xuICAgICAgICBhU2ltcGxpZmllZFNlbnRlbmNlcy5mb3JFYWNoKGZ1bmN0aW9uIChhU2VudGVuY2UpIHtcbiAgICAgICAgICAgIC8vIGNvdW50IG1hdGNoZXMgaW4gcmVjb3JkIHdoaWNoIGFyZSAqbm90KiB0aGUgY2F0ZWdvcnlcbiAgICAgICAgICAgIHZhciBtaXNtYXRjaGVkID0gMDtcbiAgICAgICAgICAgIHZhciBtYXRjaGVkID0gMDtcbiAgICAgICAgICAgIGFTZW50ZW5jZS5yV29yZHMuZm9yRWFjaChmdW5jdGlvbiAob1dvcmQpIHtcbiAgICAgICAgICAgICAgICBpZiAocmVjb3JkW29Xb3JkLmNhdGVnb3J5XSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvV29yZC5tYXRjaGVkU3RyaW5nID09PSByZWNvcmRbb1dvcmQuY2F0ZWdvcnldKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICArK21hdGNoZWQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICArK21pc21hdGNoZWQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIGlmKG1hdGNoZWQgPiAwIHx8IG1pc21hdGNoZWQgPiAwICkge1xuICAgICAgICAgICAgLy8gICBjb25zb2xlLmxvZyhcIiBtXCIgKyBtYXRjaGVkICsgXCIgbWlzbWF0Y2hlZFwiICsgbWlzbWF0Y2hlZCk7XG4gICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KGFTZW50ZW5jZS5vU2VudGVuY2UpKTtcbiAgICAgICAgICAgIGlmIChtYXRjaGVkID4gbWlzbWF0Y2hlZCkge1xuICAgICAgICAgICAgICAgIHJlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgc2VudGVuY2U6IGFTZW50ZW5jZS5vU2VudGVuY2UsXG4gICAgICAgICAgICAgICAgICAgIHJlY29yZDogcmVjb3JkLFxuICAgICAgICAgICAgICAgICAgICBjYXRlZ29yeTogY2F0ZWdvcnksXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdDogcmVjb3JkW2NhdGVnb3J5XSxcbiAgICAgICAgICAgICAgICAgICAgX3Jhbmtpbmc6IGNhbGNSYW5raW5nU2ltcGxlKG1hdGNoZWQsIG1pc21hdGNoZWQsIGFTZW50ZW5jZS5jbnRSZWxldmFudFdvcmRzKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICBwZXJmbG9nKFwic29ydCAoYT1cIiArIHJlcy5sZW5ndGggKyBcIilcIik7XG4gICAgcmVzLnNvcnQoY21wQnlSZXN1bHRUaGVuUmFua2luZyk7XG4gICAgcGVyZmxvZyhcImZpbHRlclJldGFpbiAuLi5cIik7XG4gICAgcmVzID0gZmlsdGVyUmV0YWluVG9wUmFua2VkUmVzdWx0KHJlcyk7XG4gICAgcGVyZmxvZyhcIm1hdGNoUmVjb3Jkc1F1aWNrIGRvbmU6IChyPVwiICsgcmVsZXZhbnRSZWNvcmRzLmxlbmd0aCArIFwiIHM9XCIgKyBhU2VudGVuY2VzLmxlbmd0aCArIFwiIGE9XCIgKyByZXMubGVuZ3RoICsgXCIpXCIpO1xuICAgIHJldHVybiByZXM7XG59XG5leHBvcnRzLm1hdGNoUmVjb3Jkc1F1aWNrID0gbWF0Y2hSZWNvcmRzUXVpY2s7XG5mdW5jdGlvbiBhbmFseXplQ2F0ZWdvcnkoY2F0ZWdvcnl3b3JkLCBydWxlcywgd2hvbGVzZW50ZW5jZSkge1xuICAgIHZhciBjYXRzID0gSW5wdXRGaWx0ZXIuY2F0ZWdvcml6ZUFXb3JkKGNhdGVnb3J5d29yZCwgcnVsZXMsIHdob2xlc2VudGVuY2UsIHt9KTtcbiAgICAvLyBUT0RPIHF1YWxpZnlcbiAgICBjYXRzID0gY2F0cy5maWx0ZXIoZnVuY3Rpb24gKGNhdCkge1xuICAgICAgICByZXR1cm4gY2F0LmNhdGVnb3J5ID09PSAnY2F0ZWdvcnknO1xuICAgIH0pO1xuICAgIGRlYnVnbG9nKEpTT04uc3RyaW5naWZ5KGNhdHMpKTtcbiAgICBpZiAoY2F0cy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGNhdHNbMF0ubWF0Y2hlZFN0cmluZztcbiAgICB9XG59XG5leHBvcnRzLmFuYWx5emVDYXRlZ29yeSA9IGFuYWx5emVDYXRlZ29yeTtcbi8vIGNvbnN0IHJlc3VsdCA9IFdoYXRJcy5yZXNvbHZlQ2F0ZWdvcnkoY2F0LCBhMS5lbnRpdHksXG4vLyAgIHRoZU1vZGVsLm1SdWxlcywgdGhlTW9kZWwudG9vbHMsIHRoZU1vZGVsLnJlY29yZHMpO1xuZnVuY3Rpb24gcmVzb2x2ZUNhdGVnb3J5KGNhdGVnb3J5LCBjb250ZXh0UXVlcnlTdHJpbmcsIHJ1bGVzLCByZWNvcmRzKSB7XG4gICAgaWYgKGNvbnRleHRRdWVyeVN0cmluZy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdmFyIG1hdGNoZWQgPSBJbnB1dEZpbHRlci5hbmFseXplU3RyaW5nKGNvbnRleHRRdWVyeVN0cmluZywgcnVsZXMpO1xuICAgICAgICBkZWJ1Z2xvZyhcImFmdGVyIG1hdGNoZWQgXCIgKyBKU09OLnN0cmluZ2lmeShtYXRjaGVkKSk7XG4gICAgICAgIHZhciBhU2VudGVuY2VzID0gSW5wdXRGaWx0ZXIuZXhwYW5kTWF0Y2hBcnIobWF0Y2hlZCk7XG4gICAgICAgIGRlYnVnbG9nKFwiYWZ0ZXIgZXhwYW5kXCIgKyBhU2VudGVuY2VzLm1hcChmdW5jdGlvbiAob1NlbnRlbmNlKSB7XG4gICAgICAgICAgICByZXR1cm4gU2VudGVuY2UucmFua2luZ1Byb2R1Y3Qob1NlbnRlbmNlKSArIFwiOlwiICsgSlNPTi5zdHJpbmdpZnkob1NlbnRlbmNlKTtcbiAgICAgICAgfSkuam9pbihcIlxcblwiKSk7XG4gICAgICAgIHZhciBhU2VudGVuY2VzUmVpbmZvcmNlZCA9IElucHV0RmlsdGVyLnJlaW5Gb3JjZShhU2VudGVuY2VzKTtcbiAgICAgICAgLy9hU2VudGVuY2VzLm1hcChmdW5jdGlvbihvU2VudGVuY2UpIHsgcmV0dXJuIElucHV0RmlsdGVyLnJlaW5Gb3JjZShvU2VudGVuY2UpOyB9KTtcbiAgICAgICAgZGVidWdsb2coXCJhZnRlciByZWluZm9yY2VcIiArIGFTZW50ZW5jZXNSZWluZm9yY2VkLm1hcChmdW5jdGlvbiAob1NlbnRlbmNlKSB7XG4gICAgICAgICAgICByZXR1cm4gU2VudGVuY2UucmFua2luZ1Byb2R1Y3Qob1NlbnRlbmNlKSArIFwiOlwiICsgSlNPTi5zdHJpbmdpZnkob1NlbnRlbmNlKTtcbiAgICAgICAgfSkuam9pbihcIlxcblwiKSk7XG4gICAgICAgIHZhciBtYXRjaGVkQW5zd2VycyA9IG1hdGNoUmVjb3JkcyhhU2VudGVuY2VzLCBjYXRlZ29yeSwgcmVjb3Jkcyk7IC8vYVRvb2w6IEFycmF5PElNYXRjaC5JVG9vbD4pOiBhbnkgLyogb2JqZWN0c3RyZWFtKi8ge1xuICAgICAgICBkZWJ1Z2xvZyhcIiBtYXRjaGVkQW5zd2Vyc1wiICsgSlNPTi5zdHJpbmdpZnkobWF0Y2hlZEFuc3dlcnMsIHVuZGVmaW5lZCwgMikpO1xuICAgICAgICByZXR1cm4gbWF0Y2hlZEFuc3dlcnM7XG4gICAgfVxufVxuZXhwb3J0cy5yZXNvbHZlQ2F0ZWdvcnkgPSByZXNvbHZlQ2F0ZWdvcnk7XG5mdW5jdGlvbiBmaWx0ZXJPbmx5VG9wUmFua2VkKHJlc3VsdHMpIHtcbiAgICB2YXIgcmVzID0gcmVzdWx0cy5maWx0ZXIoZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICBpZiAocmVzdWx0Ll9yYW5raW5nID09PSByZXN1bHRzWzBdLl9yYW5raW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzdWx0Ll9yYW5raW5nID49IHJlc3VsdHNbMF0uX3JhbmtpbmcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkxpc3QgdG8gZmlsdGVyIG11c3QgYmUgb3JkZXJlZFwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlcztcbn1cbmV4cG9ydHMuZmlsdGVyT25seVRvcFJhbmtlZCA9IGZpbHRlck9ubHlUb3BSYW5rZWQ7XG5mdW5jdGlvbiBpc0luZGlzY3JpbWluYXRlUmVzdWx0KHJlc3VsdHMpIHtcbiAgICB2YXIgY250ID0gcmVzdWx0cy5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIHJlc3VsdCkge1xuICAgICAgICBpZiAocmVzdWx0Ll9yYW5raW5nID09PSByZXN1bHRzWzBdLl9yYW5raW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gcHJldiArIDE7XG4gICAgICAgIH1cbiAgICB9LCAwKTtcbiAgICBpZiAoY250ID4gMSkge1xuICAgICAgICAvLyBzZWFyY2ggZm9yIGEgZGlzY3JpbWluYXRpbmcgY2F0ZWdvcnkgdmFsdWVcbiAgICAgICAgdmFyIGRpc2NyaW1pbmF0aW5nID0gT2JqZWN0LmtleXMocmVzdWx0c1swXS5yZWNvcmQpLnJlZHVjZShmdW5jdGlvbiAocHJldiwgY2F0ZWdvcnkpIHtcbiAgICAgICAgICAgIGlmICgoY2F0ZWdvcnkuY2hhckF0KDApICE9PSAnXycgJiYgY2F0ZWdvcnkgIT09IHJlc3VsdHNbMF0uY2F0ZWdvcnkpXG4gICAgICAgICAgICAgICAgJiYgKHJlc3VsdHNbMF0ucmVjb3JkW2NhdGVnb3J5XSAhPT0gcmVzdWx0c1sxXS5yZWNvcmRbY2F0ZWdvcnldKSkge1xuICAgICAgICAgICAgICAgIHByZXYucHVzaChjYXRlZ29yeSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcHJldjtcbiAgICAgICAgfSwgW10pO1xuICAgICAgICBpZiAoZGlzY3JpbWluYXRpbmcubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJNYW55IGNvbXBhcmFibGUgcmVzdWx0cywgcGVyaGFwcyB5b3Ugd2FudCB0byBzcGVjaWZ5IGEgZGlzY3JpbWluYXRpbmcgXCIgKyBkaXNjcmltaW5hdGluZy5qb2luKCcsJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICdZb3VyIHF1ZXN0aW9uIGRvZXMgbm90IGhhdmUgYSBzcGVjaWZpYyBhbnN3ZXInO1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xufVxuZXhwb3J0cy5pc0luZGlzY3JpbWluYXRlUmVzdWx0ID0gaXNJbmRpc2NyaW1pbmF0ZVJlc3VsdDtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
