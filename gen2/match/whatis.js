/**
 *
 * @module jfseb.fdevstart.analyze
 * @file analyze.ts
 * @copyright (c) 2016 Gerd Forstmann
 */
"use strict";

var InputFilter = require('./inputFilter');
var debug = require('debug');
var debuglog = debug('whatis');
var Sentence = require('./sentence');
var Word = require('./word');
function cmpByResultThenRanking(a, b) {
    var cmp = a.result.localeCompare(b.result);
    if (cmp) {
        return cmp;
    }
    return -(a._ranking - b._ranking);
}
exports.cmpByResultThenRanking = cmpByResultThenRanking;
function cmpByRanking(a, b) {
    var cmp = -(a._ranking - b._ranking);
    if (cmp) {
        return cmp;
    }
    cmp = a.result.localeCompare(b.result);
    if (cmp) {
        return cmp;
    }
    // are records different?
    var keys = Object.keys(a.record).concat(Object.keys(b.record)).sort();
    var res = keys.reduce(function (prev, sKey) {
        if (prev) {
            return prev;
        }
        if (b.record[sKey] !== a.record[sKey]) {
            if (!b.record[sKey]) {
                return -1;
            }
            if (!a.record[sKey]) {
                return +1;
            }
            return a.record[sKey].localeCompare(b.record[sKey]);
        }
        return 0;
    }, 0);
    return res;
}
exports.cmpByRanking = cmpByRanking;
function dumpNice(answer) {
    var result = {
        s: "",
        push: function push(s) {
            this.s = this.s + s;
        }
    };
    var s = "**Result for category: " + answer.category + " is " + answer.result + "\n rank: " + answer._ranking + "\n";
    result.push(s);
    Object.keys(answer.record).forEach(function (sRequires, index) {
        if (sRequires.charAt(0) !== '_') {
            result.push("record: " + sRequires + " -> " + answer.record[sRequires]);
        }
        result.push('\n');
    });
    var oSentence = answer.sentence;
    oSentence.forEach(function (oWord, index) {
        var sWord = "[" + index + "] : " + oWord.category + " \"" + oWord.string + "\" => \"" + oWord.matchedString + "\"";
        result.push(sWord + "\n");
    });
    result.push(".\n");
    return result.s;
}
exports.dumpNice = dumpNice;
function dumpWeightsTop(toolmatches, options) {
    var s = '';
    toolmatches.forEach(function (oMatch, index) {
        if (index < options.top) {
            s = s + "WhatIsAnswer[" + index + "]...\n";
            s = s + dumpNice(oMatch);
        }
    });
    return s;
}
exports.dumpWeightsTop = dumpWeightsTop;
function filterRetainTopRankedResult(res) {
    var result = res.filter(function (iRes, index) {
        debuglog(index + ' ' + JSON.stringify(iRes));
        if (iRes.result === (res[index - 1] && res[index - 1].result)) {
            debuglog('skip');
            return false;
        }
        return true;
    });
    result.sort(cmpByRanking);
    return result;
}
exports.filterRetainTopRankedResult = filterRetainTopRankedResult;
var Match = require('./match');
function calcRanking(matched, mismatched, relevantCount) {
    var lenMatched = Object.keys(matched).length;
    var factor = Match.calcRankingProduct(matched);
    factor *= Math.pow(1.5, lenMatched);
    var lenMisMatched = Object.keys(mismatched).length;
    var factor2 = Match.calcRankingProduct(mismatched);
    factor2 *= Math.pow(0.4, lenMisMatched);
    return Math.pow(factor2 * factor, 1 / (lenMisMatched + lenMatched));
}
exports.calcRanking = calcRanking;
function matchRecords(aSentences, category, records) {
    var relevantRecords = records.filter(function (record) {
        return !!record[category];
    });
    var res = [];
    relevantRecords.forEach(function (record) {
        aSentences.forEach(function (oSentence) {
            // count matches in record which are *not* the category
            var mismatched = {};
            var matched = {};
            aSentences.forEach(function (aSentence) {
                var mismatched = {};
                var matched = {};
                var cntRelevantWords = 0;
                aSentence.forEach(function (oWord) {
                    if (!Word.Word.isFiller(oWord)) {
                        cntRelevantWords = cntRelevantWords + 1;
                        if (oWord.category && record[oWord.category] !== undefined) {
                            if (oWord.matchedString === record[oWord.category]) {
                                matched[oWord.category] = oWord;
                            } else {
                                mismatched[oWord.category] = oWord;
                            }
                        }
                    }
                });
                if (Object.keys(matched).length > Object.keys(mismatched).length) {
                    res.push({
                        sentence: aSentence,
                        record: record,
                        category: category,
                        result: record[category],
                        _ranking: calcRanking(matched, mismatched, cntRelevantWords)
                    });
                }
            });
        });
    });
    res.sort(cmpByResultThenRanking);
    res = filterRetainTopRankedResult(res);
    return res;
}
exports.matchRecords = matchRecords;
function analyzeCategory(categoryword, aRules, wholesentence) {
    var cats = InputFilter.categorizeAWord(categoryword, aRules, wholesentence, {});
    // TODO qualify
    cats = cats.filter(function (cat) {
        return cat.category === 'category';
    });
    if (cats.length) {
        return cats[0].matchedString;
    }
}
exports.analyzeCategory = analyzeCategory;
// const result = WhatIs.resolveCategory(cat, a1.entity,
//   theModel.mRules, theModel.tools, theModel.records);
function resolveCategory(category, contextQueryString, aRules, records) {
    if (contextQueryString.length === 0) {
        return [];
    } else {
        var matched = InputFilter.analyzeString(contextQueryString, aRules);
        debuglog("After matched " + JSON.stringify(matched));
        var aSentences = InputFilter.expandMatchArr(matched);
        debuglog("after expand" + aSentences.map(function (oSentence) {
            return Sentence.rankingProduct(oSentence) + ":" + JSON.stringify(oSentence);
        }).join("\n"));
        var aSentencesReinforced = InputFilter.reinForce(aSentences);
        //aSentences.map(function(oSentence) { return InputFilter.reinForce(oSentence); });
        debuglog("after reinforce" + aSentencesReinforced.map(function (oSentence) {
            return Sentence.rankingProduct(oSentence) + ":" + JSON.stringify(oSentence);
        }).join("\n"));
        var matchedAnswers = matchRecords(aSentences, category, records); //aTool: Array<IMatch.ITool>): any /* objectstream*/ {
        debuglog(" matchedTools" + JSON.stringify(matchedAnswers, undefined, 2));
        return matchedAnswers;
    }
}
exports.resolveCategory = resolveCategory;
function isIndiscriminateResult(results) {
    var cnt = results.reduce(function (prev, result) {
        if (result._ranking === results[0]._ranking) {
            return prev + 1;
        }
    }, 0);
    if (cnt > 1) {
        // search for a discriminating category value
        var discriminating = Object.keys(results[0].record).reduce(function (prev, category) {
            if (category.charAt(0) !== '_' && category !== results[0].category && results[0].record[category] !== results[1].record[category]) {
                prev.push(category);
            }
            return prev;
        }, []);
        if (discriminating.length) {
            return "Many comparable results, perhaps you want to specify a discriminating " + discriminating.join(',');
        }
        return 'Your question does not have a specifci answer';
    }
    return undefined;
}
exports.isIndiscriminateResult = isIndiscriminateResult;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tYXRjaC93aGF0aXMudHMiLCJtYXRjaC93aGF0aXMuanMiXSwibmFtZXMiOlsiSW5wdXRGaWx0ZXIiLCJyZXF1aXJlIiwiZGVidWciLCJkZWJ1Z2xvZyIsIlNlbnRlbmNlIiwiV29yZCIsImNtcEJ5UmVzdWx0VGhlblJhbmtpbmciLCJhIiwiYiIsImNtcCIsInJlc3VsdCIsImxvY2FsZUNvbXBhcmUiLCJfcmFua2luZyIsImV4cG9ydHMiLCJjbXBCeVJhbmtpbmciLCJrZXlzIiwiT2JqZWN0IiwicmVjb3JkIiwiY29uY2F0Iiwic29ydCIsInJlcyIsInJlZHVjZSIsInByZXYiLCJzS2V5IiwiZHVtcE5pY2UiLCJhbnN3ZXIiLCJzIiwicHVzaCIsImNhdGVnb3J5IiwiZm9yRWFjaCIsInNSZXF1aXJlcyIsImluZGV4IiwiY2hhckF0Iiwib1NlbnRlbmNlIiwic2VudGVuY2UiLCJvV29yZCIsInNXb3JkIiwic3RyaW5nIiwibWF0Y2hlZFN0cmluZyIsImR1bXBXZWlnaHRzVG9wIiwidG9vbG1hdGNoZXMiLCJvcHRpb25zIiwib01hdGNoIiwidG9wIiwiZmlsdGVyUmV0YWluVG9wUmFua2VkUmVzdWx0IiwiZmlsdGVyIiwiaVJlcyIsIkpTT04iLCJzdHJpbmdpZnkiLCJNYXRjaCIsImNhbGNSYW5raW5nIiwibWF0Y2hlZCIsIm1pc21hdGNoZWQiLCJyZWxldmFudENvdW50IiwibGVuTWF0Y2hlZCIsImxlbmd0aCIsImZhY3RvciIsImNhbGNSYW5raW5nUHJvZHVjdCIsIk1hdGgiLCJwb3ciLCJsZW5NaXNNYXRjaGVkIiwiZmFjdG9yMiIsIm1hdGNoUmVjb3JkcyIsImFTZW50ZW5jZXMiLCJyZWNvcmRzIiwicmVsZXZhbnRSZWNvcmRzIiwiYVNlbnRlbmNlIiwiY250UmVsZXZhbnRXb3JkcyIsImlzRmlsbGVyIiwidW5kZWZpbmVkIiwiYW5hbHl6ZUNhdGVnb3J5IiwiY2F0ZWdvcnl3b3JkIiwiYVJ1bGVzIiwid2hvbGVzZW50ZW5jZSIsImNhdHMiLCJjYXRlZ29yaXplQVdvcmQiLCJjYXQiLCJyZXNvbHZlQ2F0ZWdvcnkiLCJjb250ZXh0UXVlcnlTdHJpbmciLCJhbmFseXplU3RyaW5nIiwiZXhwYW5kTWF0Y2hBcnIiLCJtYXAiLCJyYW5raW5nUHJvZHVjdCIsImpvaW4iLCJhU2VudGVuY2VzUmVpbmZvcmNlZCIsInJlaW5Gb3JjZSIsIm1hdGNoZWRBbnN3ZXJzIiwiaXNJbmRpc2NyaW1pbmF0ZVJlc3VsdCIsInJlc3VsdHMiLCJjbnQiLCJkaXNjcmltaW5hdGluZyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQ01BOztBREVBLElBQVlBLGNBQVdDLFFBQU0sZUFBTixDQUF2QjtBQUVBLElBQVlDLFFBQUtELFFBQU0sT0FBTixDQUFqQjtBQUVBLElBQU1FLFdBQVdELE1BQU0sUUFBTixDQUFqQjtBQVFBLElBQVlFLFdBQVFILFFBQU0sWUFBTixDQUFwQjtBQUVBLElBQVlJLE9BQUlKLFFBQU0sUUFBTixDQUFoQjtBQUdBLFNBQUFLLHNCQUFBLENBQXVDQyxDQUF2QyxFQUFnRUMsQ0FBaEUsRUFBdUY7QUFDckYsUUFBSUMsTUFBTUYsRUFBRUcsTUFBRixDQUFTQyxhQUFULENBQXVCSCxFQUFFRSxNQUF6QixDQUFWO0FBQ0EsUUFBSUQsR0FBSixFQUFTO0FBQ1AsZUFBT0EsR0FBUDtBQUNEO0FBQ0QsV0FBTyxFQUFFRixFQUFFSyxRQUFGLEdBQWFKLEVBQUVJLFFBQWpCLENBQVA7QUFDRDtBQU5lQyxRQUFBUCxzQkFBQSxHQUFzQkEsc0JBQXRCO0FBU2hCLFNBQUFRLFlBQUEsQ0FBNkJQLENBQTdCLEVBQXNEQyxDQUF0RCxFQUE2RTtBQUMzRSxRQUFJQyxNQUFNLEVBQUVGLEVBQUVLLFFBQUYsR0FBYUosRUFBRUksUUFBakIsQ0FBVjtBQUNBLFFBQUlILEdBQUosRUFBUztBQUNQLGVBQU9BLEdBQVA7QUFDRDtBQUNEQSxVQUFNRixFQUFFRyxNQUFGLENBQVNDLGFBQVQsQ0FBdUJILEVBQUVFLE1BQXpCLENBQU47QUFDQSxRQUFHRCxHQUFILEVBQVE7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QmhCLFNBQUFVLHNCQUFBLENBQXVDQyxPQUF2QyxFQUEyRTtBQUN6RSxRQUFJQyxNQUFNRCxRQUFRbkUsTUFBUixDQUFlLFVBQVVDLElBQVYsRUFBZ0JaLE1BQWhCLEVBQXNCO0FBQzdDLFlBQUlBLE9BQU9FLFFBQVAsS0FBb0I0RSxRQUFRLENBQVIsRUFBVzVFLFFBQW5DLEVBQTZDO0FBQzNDLG1CQUFPVSxPQUFPLENBQWQ7QUFDRDtBQUNGLEtBSlMsRUFJUCxDQUpPLENBQVY7QUFLQSxRQUFJbUUsTUFBTSxDQUFWLEVBQWE7QUFDWDtBQUNBLFlBQUlDLGlCQUFpQjFFLE9BQU9ELElBQVAsQ0FBWXlFLFFBQVEsQ0FBUixFQUFXdkUsTUFBdkIsRUFBK0JJLE1BQS9CLENBQXNDLFVBQVVDLElBQVYsRUFBZ0JNLFFBQWhCLEVBQXdCO0FBQ2pGLGdCQUFLQSxTQUFTSSxNQUFULENBQWdCLENBQWhCLE1BQXVCLEdBQXZCLElBQThCSixhQUFhNEQsUUFBUSxDQUFSLEVBQVc1RCxRQUF2RCxJQUNFNEQsUUFBUSxDQUFSLEVBQVd2RSxNQUFYLENBQWtCVyxRQUFsQixNQUFnQzRELFFBQVEsQ0FBUixFQUFXdkUsTUFBWCxDQUFrQlcsUUFBbEIsQ0FEdEMsRUFDb0U7QUFDbEVOLHFCQUFLSyxJQUFMLENBQVVDLFFBQVY7QUFDRDtBQUNELG1CQUFPTixJQUFQO0FBQ0QsU0FOb0IsRUFNbEIsRUFOa0IsQ0FBckI7QUFPQSxZQUFJb0UsZUFBZW5DLE1BQW5CLEVBQTJCO0FBQ3pCLG1CQUFPLDJFQUEyRW1DLGVBQWVQLElBQWYsQ0FBb0IsR0FBcEIsQ0FBbEY7QUFDRDtBQUNELGVBQU8sK0NBQVA7QUFDRDtBQUNELFdBQU9kLFNBQVA7QUFDRDtBQXJCZXhELFFBQUEwRSxzQkFBQSxHQUFzQkEsc0JBQXRCIiwiZmlsZSI6Im1hdGNoL3doYXRpcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICpcbiAqIEBtb2R1bGUgamZzZWIuZmRldnN0YXJ0LmFuYWx5emVcbiAqIEBmaWxlIGFuYWx5emUudHNcbiAqIEBjb3B5cmlnaHQgKGMpIDIwMTYgR2VyZCBGb3JzdG1hbm5cbiAqL1xuXG5cbmltcG9ydCAqIGFzIElucHV0RmlsdGVyIGZyb20gJy4vaW5wdXRGaWx0ZXInO1xuXG5pbXBvcnQgKiBhcyBkZWJ1ZyBmcm9tICdkZWJ1Zyc7XG5cbmNvbnN0IGRlYnVnbG9nID0gZGVidWcoJ3doYXRpcycpO1xuXG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tICcuLi91dGlscy91dGlscyc7XG5cbmltcG9ydCAqIGFzIElNYXRjaCBmcm9tICcuL2lmbWF0Y2gnO1xuXG5pbXBvcnQgKiBhcyBUb29sbWF0Y2hlciBmcm9tICcuL3Rvb2xtYXRjaGVyJztcblxuaW1wb3J0ICogYXMgU2VudGVuY2UgZnJvbSAnLi9zZW50ZW5jZSc7XG5cbmltcG9ydCAqIGFzIFdvcmQgZnJvbSAnLi93b3JkJztcblxuXG5leHBvcnQgZnVuY3Rpb24gY21wQnlSZXN1bHRUaGVuUmFua2luZyhhOiBJTWF0Y2guSVdoYXRJc0Fuc3dlciwgYjogSU1hdGNoLklXaGF0SXNBbnN3ZXIpIHtcbiAgdmFyIGNtcCA9IGEucmVzdWx0LmxvY2FsZUNvbXBhcmUoYi5yZXN1bHQpO1xuICBpZiAoY21wKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuICByZXR1cm4gLShhLl9yYW5raW5nIC0gYi5fcmFua2luZyk7XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGNtcEJ5UmFua2luZyhhOiBJTWF0Y2guSVdoYXRJc0Fuc3dlciwgYjogSU1hdGNoLklXaGF0SXNBbnN3ZXIpIHtcbiAgdmFyIGNtcCA9IC0oYS5fcmFua2luZyAtIGIuX3JhbmtpbmcpO1xuICBpZiAoY21wKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuICBjbXAgPSBhLnJlc3VsdC5sb2NhbGVDb21wYXJlKGIucmVzdWx0KTtcbiAgaWYoY21wKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIC8vIGFyZSByZWNvcmRzIGRpZmZlcmVudD9cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhhLnJlY29yZCkuY29uY2F0KE9iamVjdC5rZXlzKGIucmVjb3JkKSkuc29ydCgpO1xuICB2YXIgcmVzID0ga2V5cy5yZWR1Y2UoZnVuY3Rpb24ocHJldiwgc0tleSkge1xuICAgIGlmKHByZXYpIHtcbiAgICAgIHJldHVybiBwcmV2O1xuICAgIH1cbiAgICBpZihiLnJlY29yZFtzS2V5XSAhPT0gYS5yZWNvcmRbc0tleV0pIHtcbiAgICAgIGlmKCFiLnJlY29yZFtzS2V5XSkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICBpZighYS5yZWNvcmRbc0tleV0pIHtcbiAgICAgICAgcmV0dXJuICsxO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGEucmVjb3JkW3NLZXldLmxvY2FsZUNvbXBhcmUoYi5yZWNvcmRbc0tleV0pO1xuICAgIH1cbiAgICByZXR1cm4gMDtcbiAgfSwgMCk7XG4gIHJldHVybiByZXM7XG59XG5cblxuXG5leHBvcnQgZnVuY3Rpb24gZHVtcE5pY2UoYW5zd2VyOiBJTWF0Y2guSVdoYXRJc0Fuc3dlcikge1xuICB2YXIgcmVzdWx0ID0ge1xuICAgIHM6IFwiXCIsXG4gICAgcHVzaDogZnVuY3Rpb24gKHMpIHsgdGhpcy5zID0gdGhpcy5zICsgczsgfVxuICB9O1xuICB2YXIgcyA9XG4gICAgYCoqUmVzdWx0IGZvciBjYXRlZ29yeTogJHthbnN3ZXIuY2F0ZWdvcnl9IGlzICR7YW5zd2VyLnJlc3VsdH1cbiByYW5rOiAke2Fuc3dlci5fcmFua2luZ31cbmA7XG4gIHJlc3VsdC5wdXNoKHMpO1xuICBPYmplY3Qua2V5cyhhbnN3ZXIucmVjb3JkKS5mb3JFYWNoKGZ1bmN0aW9uIChzUmVxdWlyZXMsIGluZGV4KSB7XG4gICAgaWYgKHNSZXF1aXJlcy5jaGFyQXQoMCkgIT09ICdfJykge1xuICAgICAgcmVzdWx0LnB1c2goYHJlY29yZDogJHtzUmVxdWlyZXN9IC0+ICR7YW5zd2VyLnJlY29yZFtzUmVxdWlyZXNdfWApO1xuICAgIH1cbiAgICByZXN1bHQucHVzaCgnXFxuJyk7XG4gIH0pO1xuICB2YXIgb1NlbnRlbmNlID0gYW5zd2VyLnNlbnRlbmNlO1xuICBvU2VudGVuY2UuZm9yRWFjaChmdW5jdGlvbiAob1dvcmQsIGluZGV4KSB7XG4gICAgdmFyIHNXb3JkID0gYFske2luZGV4fV0gOiAke29Xb3JkLmNhdGVnb3J5fSBcIiR7b1dvcmQuc3RyaW5nfVwiID0+IFwiJHtvV29yZC5tYXRjaGVkU3RyaW5nfVwiYFxuICAgIHJlc3VsdC5wdXNoKHNXb3JkICsgXCJcXG5cIik7XG4gIH0pXG4gIHJlc3VsdC5wdXNoKFwiLlxcblwiKTtcbiAgcmV0dXJuIHJlc3VsdC5zO1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBkdW1wV2VpZ2h0c1RvcCh0b29sbWF0Y2hlczogQXJyYXk8SU1hdGNoLklXaGF0SXNBbnN3ZXI+LCBvcHRpb25zOiBhbnkpIHtcbiAgdmFyIHMgPSAnJztcbiAgdG9vbG1hdGNoZXMuZm9yRWFjaChmdW5jdGlvbiAob01hdGNoLCBpbmRleCkge1xuICAgIGlmIChpbmRleCA8IG9wdGlvbnMudG9wKSB7XG4gICAgICBzID0gcyArIFwiV2hhdElzQW5zd2VyW1wiICsgaW5kZXggKyBcIl0uLi5cXG5cIjtcbiAgICAgIHMgPSBzICsgZHVtcE5pY2Uob01hdGNoKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpbHRlclJldGFpblRvcFJhbmtlZFJlc3VsdChyZXM6IEFycmF5PElNYXRjaC5JV2hhdElzQW5zd2VyPik6IEFycmF5PElNYXRjaC5JV2hhdElzQW5zd2VyPiB7XG4gIHZhciByZXN1bHQgPSByZXMuZmlsdGVyKGZ1bmN0aW9uIChpUmVzLCBpbmRleCkge1xuICAgIGRlYnVnbG9nKGluZGV4ICsgJyAnICsgSlNPTi5zdHJpbmdpZnkoaVJlcykpO1xuICAgIGlmIChpUmVzLnJlc3VsdCA9PT0gKHJlc1tpbmRleCAtIDFdICYmIHJlc1tpbmRleCAtIDFdLnJlc3VsdCkpIHtcbiAgICAgIGRlYnVnbG9nKCdza2lwJyk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9KTtcbiAgcmVzdWx0LnNvcnQoY21wQnlSYW5raW5nKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuaW1wb3J0ICogYXMgTWF0Y2ggZnJvbSAnLi9tYXRjaCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBjYWxjUmFua2luZyhtYXRjaGVkOiB7IFtrZXk6IHN0cmluZ106IElNYXRjaC5JV29yZCB9LFxuICBtaXNtYXRjaGVkOiB7IFtrZXk6IHN0cmluZ106IElNYXRjaC5JV29yZCB9LCByZWxldmFudENvdW50OiBudW1iZXIpOiBudW1iZXIge1xuXG4gIHZhciBsZW5NYXRjaGVkID0gT2JqZWN0LmtleXMobWF0Y2hlZCkubGVuZ3RoO1xuICB2YXIgZmFjdG9yID0gTWF0Y2guY2FsY1JhbmtpbmdQcm9kdWN0KG1hdGNoZWQpO1xuICBmYWN0b3IgKj0gTWF0aC5wb3coMS41LCBsZW5NYXRjaGVkKTtcblxuICB2YXIgbGVuTWlzTWF0Y2hlZCA9IE9iamVjdC5rZXlzKG1pc21hdGNoZWQpLmxlbmd0aDtcbiAgdmFyIGZhY3RvcjIgPSBNYXRjaC5jYWxjUmFua2luZ1Byb2R1Y3QobWlzbWF0Y2hlZCk7XG4gIGZhY3RvcjIgKj0gTWF0aC5wb3coMC40LCBsZW5NaXNNYXRjaGVkKTtcblxuICByZXR1cm4gTWF0aC5wb3coZmFjdG9yMiAqIGZhY3RvciwgMSAvIChsZW5NaXNNYXRjaGVkICsgbGVuTWF0Y2hlZCkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWF0Y2hSZWNvcmRzKGFTZW50ZW5jZXM6IEFycmF5PElNYXRjaC5JU2VudGVuY2U+LCBjYXRlZ29yeTogc3RyaW5nLCByZWNvcmRzOiBBcnJheTxJTWF0Y2guSVJlY29yZD4pXG4gIDogQXJyYXk8SU1hdGNoLklXaGF0SXNBbnN3ZXI+IHtcbiAgdmFyIHJlbGV2YW50UmVjb3JkcyA9IHJlY29yZHMuZmlsdGVyKGZ1bmN0aW9uIChyZWNvcmQ6IElNYXRjaC5JUmVjb3JkKSB7XG4gICAgcmV0dXJuICEhcmVjb3JkW2NhdGVnb3J5XTtcbiAgfSk7XG4gIHZhciByZXMgPSBbXTtcbiAgcmVsZXZhbnRSZWNvcmRzLmZvckVhY2goZnVuY3Rpb24gKHJlY29yZCkge1xuICAgIGFTZW50ZW5jZXMuZm9yRWFjaChmdW5jdGlvbiAob1NlbnRlbmNlKSB7XG4gICAgICAvLyBjb3VudCBtYXRjaGVzIGluIHJlY29yZCB3aGljaCBhcmUgKm5vdCogdGhlIGNhdGVnb3J5XG4gICAgICB2YXIgbWlzbWF0Y2hlZCA9IHt9XG4gICAgICB2YXIgbWF0Y2hlZCA9IHt9O1xuICAgICAgYVNlbnRlbmNlcy5mb3JFYWNoKGZ1bmN0aW9uIChhU2VudGVuY2UpIHtcbiAgICAgICAgdmFyIG1pc21hdGNoZWQgPSB7fTtcbiAgICAgICAgdmFyIG1hdGNoZWQgPSB7fTtcbiAgICAgICAgdmFyIGNudFJlbGV2YW50V29yZHMgPSAwO1xuICAgICAgICBhU2VudGVuY2UuZm9yRWFjaChmdW5jdGlvbiAob1dvcmQpIHtcbiAgICAgICAgICBpZiAoIVdvcmQuV29yZC5pc0ZpbGxlcihvV29yZCkpIHtcbiAgICAgICAgICAgIGNudFJlbGV2YW50V29yZHMgPSBjbnRSZWxldmFudFdvcmRzICsgMTtcbiAgICAgICAgICAgIGlmIChvV29yZC5jYXRlZ29yeSAmJiAocmVjb3JkW29Xb3JkLmNhdGVnb3J5XSAhPT0gdW5kZWZpbmVkKSkge1xuICAgICAgICAgICAgICBpZiAob1dvcmQubWF0Y2hlZFN0cmluZyA9PT0gcmVjb3JkW29Xb3JkLmNhdGVnb3J5XSkge1xuICAgICAgICAgICAgICAgIG1hdGNoZWRbb1dvcmQuY2F0ZWdvcnldID0gb1dvcmQ7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbWlzbWF0Y2hlZFtvV29yZC5jYXRlZ29yeV0gPSBvV29yZDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChPYmplY3Qua2V5cyhtYXRjaGVkKS5sZW5ndGggPiBPYmplY3Qua2V5cyhtaXNtYXRjaGVkKS5sZW5ndGgpIHtcbiAgICAgICAgICByZXMucHVzaCh7XG4gICAgICAgICAgICBzZW50ZW5jZTogYVNlbnRlbmNlLFxuICAgICAgICAgICAgcmVjb3JkIDogcmVjb3JkLFxuICAgICAgICAgICAgY2F0ZWdvcnkgOiBjYXRlZ29yeSxcbiAgICAgICAgICAgIHJlc3VsdDogcmVjb3JkW2NhdGVnb3J5XSxcbiAgICAgICAgICAgIF9yYW5raW5nOiBjYWxjUmFua2luZyhtYXRjaGVkLCBtaXNtYXRjaGVkLCBjbnRSZWxldmFudFdvcmRzKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0pO1xuICB9KTtcbiAgcmVzLnNvcnQoY21wQnlSZXN1bHRUaGVuUmFua2luZyk7XG4gIHJlcyA9IGZpbHRlclJldGFpblRvcFJhbmtlZFJlc3VsdChyZXMpO1xuICByZXR1cm4gcmVzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYW5hbHl6ZUNhdGVnb3J5KGNhdGVnb3J5d29yZCA6IHN0cmluZyAsIGFSdWxlczogQXJyYXk8SU1hdGNoLm1SdWxlPiwgd2hvbGVzZW50ZW5jZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgdmFyIGNhdHMgPSBJbnB1dEZpbHRlci5jYXRlZ29yaXplQVdvcmQoY2F0ZWdvcnl3b3JkLCBhUnVsZXMsIHdob2xlc2VudGVuY2UsIHt9KTtcbiAgLy8gVE9ETyBxdWFsaWZ5XG4gIGNhdHMgPSBjYXRzLmZpbHRlcihmdW5jdGlvbihjYXQpIHtcbiAgICByZXR1cm4gY2F0LmNhdGVnb3J5ID09PSAnY2F0ZWdvcnknO1xuICB9KVxuICBpZiAoY2F0cy5sZW5ndGgpIHtcbiAgICByZXR1cm4gY2F0c1swXS5tYXRjaGVkU3RyaW5nO1xuICB9XG59XG5cbi8vIGNvbnN0IHJlc3VsdCA9IFdoYXRJcy5yZXNvbHZlQ2F0ZWdvcnkoY2F0LCBhMS5lbnRpdHksXG4vLyAgIHRoZU1vZGVsLm1SdWxlcywgdGhlTW9kZWwudG9vbHMsIHRoZU1vZGVsLnJlY29yZHMpO1xuXG5leHBvcnQgZnVuY3Rpb24gcmVzb2x2ZUNhdGVnb3J5KGNhdGVnb3J5OiBzdHJpbmcsIGNvbnRleHRRdWVyeVN0cmluZzogc3RyaW5nLFxuICBhUnVsZXM6IEFycmF5PElNYXRjaC5tUnVsZT4sIHJlY29yZHM6IEFycmF5PElNYXRjaC5JUmVjb3JkPik6IEFycmF5PElNYXRjaC5JV2hhdElzQW5zd2VyPiB7XG4gIGlmIChjb250ZXh0UXVlcnlTdHJpbmcubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9IGVsc2Uge1xuICAgIHZhciBtYXRjaGVkID0gSW5wdXRGaWx0ZXIuYW5hbHl6ZVN0cmluZyhjb250ZXh0UXVlcnlTdHJpbmcsIGFSdWxlcyk7XG4gICAgZGVidWdsb2coXCJBZnRlciBtYXRjaGVkIFwiICsgSlNPTi5zdHJpbmdpZnkobWF0Y2hlZCkpO1xuICAgIHZhciBhU2VudGVuY2VzID0gSW5wdXRGaWx0ZXIuZXhwYW5kTWF0Y2hBcnIobWF0Y2hlZCk7XG4gICAgZGVidWdsb2coXCJhZnRlciBleHBhbmRcIiArIGFTZW50ZW5jZXMubWFwKGZ1bmN0aW9uIChvU2VudGVuY2UpIHtcbiAgICAgIHJldHVybiBTZW50ZW5jZS5yYW5raW5nUHJvZHVjdChvU2VudGVuY2UpICsgXCI6XCIgKyBKU09OLnN0cmluZ2lmeShvU2VudGVuY2UpO1xuICAgIH0pLmpvaW4oXCJcXG5cIikpO1xuICAgIHZhciBhU2VudGVuY2VzUmVpbmZvcmNlZCA9IElucHV0RmlsdGVyLnJlaW5Gb3JjZShhU2VudGVuY2VzKTtcbiAgICAvL2FTZW50ZW5jZXMubWFwKGZ1bmN0aW9uKG9TZW50ZW5jZSkgeyByZXR1cm4gSW5wdXRGaWx0ZXIucmVpbkZvcmNlKG9TZW50ZW5jZSk7IH0pO1xuICAgIGRlYnVnbG9nKFwiYWZ0ZXIgcmVpbmZvcmNlXCIgKyBhU2VudGVuY2VzUmVpbmZvcmNlZC5tYXAoZnVuY3Rpb24gKG9TZW50ZW5jZSkge1xuICAgICAgcmV0dXJuIFNlbnRlbmNlLnJhbmtpbmdQcm9kdWN0KG9TZW50ZW5jZSkgKyBcIjpcIiArIEpTT04uc3RyaW5naWZ5KG9TZW50ZW5jZSk7XG4gICAgfSkuam9pbihcIlxcblwiKSk7XG4gICAgdmFyIG1hdGNoZWRBbnN3ZXJzID0gbWF0Y2hSZWNvcmRzKGFTZW50ZW5jZXMsIGNhdGVnb3J5LCByZWNvcmRzKTsgLy9hVG9vbDogQXJyYXk8SU1hdGNoLklUb29sPik6IGFueSAvKiBvYmplY3RzdHJlYW0qLyB7XG4gICAgZGVidWdsb2coXCIgbWF0Y2hlZFRvb2xzXCIgKyBKU09OLnN0cmluZ2lmeShtYXRjaGVkQW5zd2VycywgdW5kZWZpbmVkLCAyKSk7XG4gICAgcmV0dXJuIG1hdGNoZWRBbnN3ZXJzO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0luZGlzY3JpbWluYXRlUmVzdWx0KHJlc3VsdHM6IEFycmF5PElNYXRjaC5JV2hhdElzQW5zd2VyPik6IHN0cmluZyB7XG4gIHZhciBjbnQgPSByZXN1bHRzLnJlZHVjZShmdW5jdGlvbiAocHJldiwgcmVzdWx0KSB7XG4gICAgaWYgKHJlc3VsdC5fcmFua2luZyA9PT0gcmVzdWx0c1swXS5fcmFua2luZykge1xuICAgICAgcmV0dXJuIHByZXYgKyAxO1xuICAgIH1cbiAgfSwgMCk7XG4gIGlmIChjbnQgPiAxKSB7XG4gICAgLy8gc2VhcmNoIGZvciBhIGRpc2NyaW1pbmF0aW5nIGNhdGVnb3J5IHZhbHVlXG4gICAgdmFyIGRpc2NyaW1pbmF0aW5nID0gT2JqZWN0LmtleXMocmVzdWx0c1swXS5yZWNvcmQpLnJlZHVjZShmdW5jdGlvbiAocHJldiwgY2F0ZWdvcnkpIHtcbiAgICAgIGlmICgoY2F0ZWdvcnkuY2hhckF0KDApICE9PSAnXycgJiYgY2F0ZWdvcnkgIT09IHJlc3VsdHNbMF0uY2F0ZWdvcnkpXG4gICAgICAgICYmIChyZXN1bHRzWzBdLnJlY29yZFtjYXRlZ29yeV0gIT09IHJlc3VsdHNbMV0ucmVjb3JkW2NhdGVnb3J5XSkpIHtcbiAgICAgICAgcHJldi5wdXNoKGNhdGVnb3J5KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwcmV2O1xuICAgIH0sIFtdKTtcbiAgICBpZiAoZGlzY3JpbWluYXRpbmcubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gXCJNYW55IGNvbXBhcmFibGUgcmVzdWx0cywgcGVyaGFwcyB5b3Ugd2FudCB0byBzcGVjaWZ5IGEgZGlzY3JpbWluYXRpbmcgXCIgKyBkaXNjcmltaW5hdGluZy5qb2luKCcsJyk7XG4gICAgfVxuICAgIHJldHVybiAnWW91ciBxdWVzdGlvbiBkb2VzIG5vdCBoYXZlIGEgc3BlY2lmY2kgYW5zd2VyJztcbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuIiwiLyoqXG4gKlxuICogQG1vZHVsZSBqZnNlYi5mZGV2c3RhcnQuYW5hbHl6ZVxuICogQGZpbGUgYW5hbHl6ZS50c1xuICogQGNvcHlyaWdodCAoYykgMjAxNiBHZXJkIEZvcnN0bWFublxuICovXG5cInVzZSBzdHJpY3RcIjtcbnZhciBJbnB1dEZpbHRlciA9IHJlcXVpcmUoJy4vaW5wdXRGaWx0ZXInKTtcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJyk7XG52YXIgZGVidWdsb2cgPSBkZWJ1Zygnd2hhdGlzJyk7XG52YXIgU2VudGVuY2UgPSByZXF1aXJlKCcuL3NlbnRlbmNlJyk7XG52YXIgV29yZCA9IHJlcXVpcmUoJy4vd29yZCcpO1xuZnVuY3Rpb24gY21wQnlSZXN1bHRUaGVuUmFua2luZyhhLCBiKSB7XG4gICAgdmFyIGNtcCA9IGEucmVzdWx0LmxvY2FsZUNvbXBhcmUoYi5yZXN1bHQpO1xuICAgIGlmIChjbXApIHtcbiAgICAgICAgcmV0dXJuIGNtcDtcbiAgICB9XG4gICAgcmV0dXJuIC0oYS5fcmFua2luZyAtIGIuX3JhbmtpbmcpO1xufVxuZXhwb3J0cy5jbXBCeVJlc3VsdFRoZW5SYW5raW5nID0gY21wQnlSZXN1bHRUaGVuUmFua2luZztcbmZ1bmN0aW9uIGNtcEJ5UmFua2luZyhhLCBiKSB7XG4gICAgdmFyIGNtcCA9IC0oYS5fcmFua2luZyAtIGIuX3JhbmtpbmcpO1xuICAgIGlmIChjbXApIHtcbiAgICAgICAgcmV0dXJuIGNtcDtcbiAgICB9XG4gICAgY21wID0gYS5yZXN1bHQubG9jYWxlQ29tcGFyZShiLnJlc3VsdCk7XG4gICAgaWYgKGNtcCkge1xuICAgICAgICByZXR1cm4gY21wO1xuICAgIH1cbiAgICAvLyBhcmUgcmVjb3JkcyBkaWZmZXJlbnQ/XG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhhLnJlY29yZCkuY29uY2F0KE9iamVjdC5rZXlzKGIucmVjb3JkKSkuc29ydCgpO1xuICAgIHZhciByZXMgPSBrZXlzLnJlZHVjZShmdW5jdGlvbiAocHJldiwgc0tleSkge1xuICAgICAgICBpZiAocHJldikge1xuICAgICAgICAgICAgcmV0dXJuIHByZXY7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGIucmVjb3JkW3NLZXldICE9PSBhLnJlY29yZFtzS2V5XSkge1xuICAgICAgICAgICAgaWYgKCFiLnJlY29yZFtzS2V5XSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghYS5yZWNvcmRbc0tleV0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKzE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYS5yZWNvcmRbc0tleV0ubG9jYWxlQ29tcGFyZShiLnJlY29yZFtzS2V5XSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfSwgMCk7XG4gICAgcmV0dXJuIHJlcztcbn1cbmV4cG9ydHMuY21wQnlSYW5raW5nID0gY21wQnlSYW5raW5nO1xuZnVuY3Rpb24gZHVtcE5pY2UoYW5zd2VyKSB7XG4gICAgdmFyIHJlc3VsdCA9IHtcbiAgICAgICAgczogXCJcIixcbiAgICAgICAgcHVzaDogZnVuY3Rpb24gKHMpIHsgdGhpcy5zID0gdGhpcy5zICsgczsgfVxuICAgIH07XG4gICAgdmFyIHMgPSBcIioqUmVzdWx0IGZvciBjYXRlZ29yeTogXCIgKyBhbnN3ZXIuY2F0ZWdvcnkgKyBcIiBpcyBcIiArIGFuc3dlci5yZXN1bHQgKyBcIlxcbiByYW5rOiBcIiArIGFuc3dlci5fcmFua2luZyArIFwiXFxuXCI7XG4gICAgcmVzdWx0LnB1c2gocyk7XG4gICAgT2JqZWN0LmtleXMoYW5zd2VyLnJlY29yZCkuZm9yRWFjaChmdW5jdGlvbiAoc1JlcXVpcmVzLCBpbmRleCkge1xuICAgICAgICBpZiAoc1JlcXVpcmVzLmNoYXJBdCgwKSAhPT0gJ18nKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChcInJlY29yZDogXCIgKyBzUmVxdWlyZXMgKyBcIiAtPiBcIiArIGFuc3dlci5yZWNvcmRbc1JlcXVpcmVzXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0LnB1c2goJ1xcbicpO1xuICAgIH0pO1xuICAgIHZhciBvU2VudGVuY2UgPSBhbnN3ZXIuc2VudGVuY2U7XG4gICAgb1NlbnRlbmNlLmZvckVhY2goZnVuY3Rpb24gKG9Xb3JkLCBpbmRleCkge1xuICAgICAgICB2YXIgc1dvcmQgPSBcIltcIiArIGluZGV4ICsgXCJdIDogXCIgKyBvV29yZC5jYXRlZ29yeSArIFwiIFxcXCJcIiArIG9Xb3JkLnN0cmluZyArIFwiXFxcIiA9PiBcXFwiXCIgKyBvV29yZC5tYXRjaGVkU3RyaW5nICsgXCJcXFwiXCI7XG4gICAgICAgIHJlc3VsdC5wdXNoKHNXb3JkICsgXCJcXG5cIik7XG4gICAgfSk7XG4gICAgcmVzdWx0LnB1c2goXCIuXFxuXCIpO1xuICAgIHJldHVybiByZXN1bHQucztcbn1cbmV4cG9ydHMuZHVtcE5pY2UgPSBkdW1wTmljZTtcbmZ1bmN0aW9uIGR1bXBXZWlnaHRzVG9wKHRvb2xtYXRjaGVzLCBvcHRpb25zKSB7XG4gICAgdmFyIHMgPSAnJztcbiAgICB0b29sbWF0Y2hlcy5mb3JFYWNoKGZ1bmN0aW9uIChvTWF0Y2gsIGluZGV4KSB7XG4gICAgICAgIGlmIChpbmRleCA8IG9wdGlvbnMudG9wKSB7XG4gICAgICAgICAgICBzID0gcyArIFwiV2hhdElzQW5zd2VyW1wiICsgaW5kZXggKyBcIl0uLi5cXG5cIjtcbiAgICAgICAgICAgIHMgPSBzICsgZHVtcE5pY2Uob01hdGNoKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBzO1xufVxuZXhwb3J0cy5kdW1wV2VpZ2h0c1RvcCA9IGR1bXBXZWlnaHRzVG9wO1xuZnVuY3Rpb24gZmlsdGVyUmV0YWluVG9wUmFua2VkUmVzdWx0KHJlcykge1xuICAgIHZhciByZXN1bHQgPSByZXMuZmlsdGVyKGZ1bmN0aW9uIChpUmVzLCBpbmRleCkge1xuICAgICAgICBkZWJ1Z2xvZyhpbmRleCArICcgJyArIEpTT04uc3RyaW5naWZ5KGlSZXMpKTtcbiAgICAgICAgaWYgKGlSZXMucmVzdWx0ID09PSAocmVzW2luZGV4IC0gMV0gJiYgcmVzW2luZGV4IC0gMV0ucmVzdWx0KSkge1xuICAgICAgICAgICAgZGVidWdsb2coJ3NraXAnKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KTtcbiAgICByZXN1bHQuc29ydChjbXBCeVJhbmtpbmcpO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG5leHBvcnRzLmZpbHRlclJldGFpblRvcFJhbmtlZFJlc3VsdCA9IGZpbHRlclJldGFpblRvcFJhbmtlZFJlc3VsdDtcbnZhciBNYXRjaCA9IHJlcXVpcmUoJy4vbWF0Y2gnKTtcbmZ1bmN0aW9uIGNhbGNSYW5raW5nKG1hdGNoZWQsIG1pc21hdGNoZWQsIHJlbGV2YW50Q291bnQpIHtcbiAgICB2YXIgbGVuTWF0Y2hlZCA9IE9iamVjdC5rZXlzKG1hdGNoZWQpLmxlbmd0aDtcbiAgICB2YXIgZmFjdG9yID0gTWF0Y2guY2FsY1JhbmtpbmdQcm9kdWN0KG1hdGNoZWQpO1xuICAgIGZhY3RvciAqPSBNYXRoLnBvdygxLjUsIGxlbk1hdGNoZWQpO1xuICAgIHZhciBsZW5NaXNNYXRjaGVkID0gT2JqZWN0LmtleXMobWlzbWF0Y2hlZCkubGVuZ3RoO1xuICAgIHZhciBmYWN0b3IyID0gTWF0Y2guY2FsY1JhbmtpbmdQcm9kdWN0KG1pc21hdGNoZWQpO1xuICAgIGZhY3RvcjIgKj0gTWF0aC5wb3coMC40LCBsZW5NaXNNYXRjaGVkKTtcbiAgICByZXR1cm4gTWF0aC5wb3coZmFjdG9yMiAqIGZhY3RvciwgMSAvIChsZW5NaXNNYXRjaGVkICsgbGVuTWF0Y2hlZCkpO1xufVxuZXhwb3J0cy5jYWxjUmFua2luZyA9IGNhbGNSYW5raW5nO1xuZnVuY3Rpb24gbWF0Y2hSZWNvcmRzKGFTZW50ZW5jZXMsIGNhdGVnb3J5LCByZWNvcmRzKSB7XG4gICAgdmFyIHJlbGV2YW50UmVjb3JkcyA9IHJlY29yZHMuZmlsdGVyKGZ1bmN0aW9uIChyZWNvcmQpIHtcbiAgICAgICAgcmV0dXJuICEhcmVjb3JkW2NhdGVnb3J5XTtcbiAgICB9KTtcbiAgICB2YXIgcmVzID0gW107XG4gICAgcmVsZXZhbnRSZWNvcmRzLmZvckVhY2goZnVuY3Rpb24gKHJlY29yZCkge1xuICAgICAgICBhU2VudGVuY2VzLmZvckVhY2goZnVuY3Rpb24gKG9TZW50ZW5jZSkge1xuICAgICAgICAgICAgLy8gY291bnQgbWF0Y2hlcyBpbiByZWNvcmQgd2hpY2ggYXJlICpub3QqIHRoZSBjYXRlZ29yeVxuICAgICAgICAgICAgdmFyIG1pc21hdGNoZWQgPSB7fTtcbiAgICAgICAgICAgIHZhciBtYXRjaGVkID0ge307XG4gICAgICAgICAgICBhU2VudGVuY2VzLmZvckVhY2goZnVuY3Rpb24gKGFTZW50ZW5jZSkge1xuICAgICAgICAgICAgICAgIHZhciBtaXNtYXRjaGVkID0ge307XG4gICAgICAgICAgICAgICAgdmFyIG1hdGNoZWQgPSB7fTtcbiAgICAgICAgICAgICAgICB2YXIgY250UmVsZXZhbnRXb3JkcyA9IDA7XG4gICAgICAgICAgICAgICAgYVNlbnRlbmNlLmZvckVhY2goZnVuY3Rpb24gKG9Xb3JkKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghV29yZC5Xb3JkLmlzRmlsbGVyKG9Xb3JkKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY250UmVsZXZhbnRXb3JkcyA9IGNudFJlbGV2YW50V29yZHMgKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9Xb3JkLmNhdGVnb3J5ICYmIChyZWNvcmRbb1dvcmQuY2F0ZWdvcnldICE9PSB1bmRlZmluZWQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9Xb3JkLm1hdGNoZWRTdHJpbmcgPT09IHJlY29yZFtvV29yZC5jYXRlZ29yeV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlZFtvV29yZC5jYXRlZ29yeV0gPSBvV29yZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pc21hdGNoZWRbb1dvcmQuY2F0ZWdvcnldID0gb1dvcmQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKG1hdGNoZWQpLmxlbmd0aCA+IE9iamVjdC5rZXlzKG1pc21hdGNoZWQpLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICByZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZW50ZW5jZTogYVNlbnRlbmNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVjb3JkOiByZWNvcmQsXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRlZ29yeTogY2F0ZWdvcnksXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQ6IHJlY29yZFtjYXRlZ29yeV0sXG4gICAgICAgICAgICAgICAgICAgICAgICBfcmFua2luZzogY2FsY1JhbmtpbmcobWF0Y2hlZCwgbWlzbWF0Y2hlZCwgY250UmVsZXZhbnRXb3JkcylcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJlcy5zb3J0KGNtcEJ5UmVzdWx0VGhlblJhbmtpbmcpO1xuICAgIHJlcyA9IGZpbHRlclJldGFpblRvcFJhbmtlZFJlc3VsdChyZXMpO1xuICAgIHJldHVybiByZXM7XG59XG5leHBvcnRzLm1hdGNoUmVjb3JkcyA9IG1hdGNoUmVjb3JkcztcbmZ1bmN0aW9uIGFuYWx5emVDYXRlZ29yeShjYXRlZ29yeXdvcmQsIGFSdWxlcywgd2hvbGVzZW50ZW5jZSkge1xuICAgIHZhciBjYXRzID0gSW5wdXRGaWx0ZXIuY2F0ZWdvcml6ZUFXb3JkKGNhdGVnb3J5d29yZCwgYVJ1bGVzLCB3aG9sZXNlbnRlbmNlLCB7fSk7XG4gICAgLy8gVE9ETyBxdWFsaWZ5XG4gICAgY2F0cyA9IGNhdHMuZmlsdGVyKGZ1bmN0aW9uIChjYXQpIHtcbiAgICAgICAgcmV0dXJuIGNhdC5jYXRlZ29yeSA9PT0gJ2NhdGVnb3J5JztcbiAgICB9KTtcbiAgICBpZiAoY2F0cy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGNhdHNbMF0ubWF0Y2hlZFN0cmluZztcbiAgICB9XG59XG5leHBvcnRzLmFuYWx5emVDYXRlZ29yeSA9IGFuYWx5emVDYXRlZ29yeTtcbi8vIGNvbnN0IHJlc3VsdCA9IFdoYXRJcy5yZXNvbHZlQ2F0ZWdvcnkoY2F0LCBhMS5lbnRpdHksXG4vLyAgIHRoZU1vZGVsLm1SdWxlcywgdGhlTW9kZWwudG9vbHMsIHRoZU1vZGVsLnJlY29yZHMpO1xuZnVuY3Rpb24gcmVzb2x2ZUNhdGVnb3J5KGNhdGVnb3J5LCBjb250ZXh0UXVlcnlTdHJpbmcsIGFSdWxlcywgcmVjb3Jkcykge1xuICAgIGlmIChjb250ZXh0UXVlcnlTdHJpbmcubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHZhciBtYXRjaGVkID0gSW5wdXRGaWx0ZXIuYW5hbHl6ZVN0cmluZyhjb250ZXh0UXVlcnlTdHJpbmcsIGFSdWxlcyk7XG4gICAgICAgIGRlYnVnbG9nKFwiQWZ0ZXIgbWF0Y2hlZCBcIiArIEpTT04uc3RyaW5naWZ5KG1hdGNoZWQpKTtcbiAgICAgICAgdmFyIGFTZW50ZW5jZXMgPSBJbnB1dEZpbHRlci5leHBhbmRNYXRjaEFycihtYXRjaGVkKTtcbiAgICAgICAgZGVidWdsb2coXCJhZnRlciBleHBhbmRcIiArIGFTZW50ZW5jZXMubWFwKGZ1bmN0aW9uIChvU2VudGVuY2UpIHtcbiAgICAgICAgICAgIHJldHVybiBTZW50ZW5jZS5yYW5raW5nUHJvZHVjdChvU2VudGVuY2UpICsgXCI6XCIgKyBKU09OLnN0cmluZ2lmeShvU2VudGVuY2UpO1xuICAgICAgICB9KS5qb2luKFwiXFxuXCIpKTtcbiAgICAgICAgdmFyIGFTZW50ZW5jZXNSZWluZm9yY2VkID0gSW5wdXRGaWx0ZXIucmVpbkZvcmNlKGFTZW50ZW5jZXMpO1xuICAgICAgICAvL2FTZW50ZW5jZXMubWFwKGZ1bmN0aW9uKG9TZW50ZW5jZSkgeyByZXR1cm4gSW5wdXRGaWx0ZXIucmVpbkZvcmNlKG9TZW50ZW5jZSk7IH0pO1xuICAgICAgICBkZWJ1Z2xvZyhcImFmdGVyIHJlaW5mb3JjZVwiICsgYVNlbnRlbmNlc1JlaW5mb3JjZWQubWFwKGZ1bmN0aW9uIChvU2VudGVuY2UpIHtcbiAgICAgICAgICAgIHJldHVybiBTZW50ZW5jZS5yYW5raW5nUHJvZHVjdChvU2VudGVuY2UpICsgXCI6XCIgKyBKU09OLnN0cmluZ2lmeShvU2VudGVuY2UpO1xuICAgICAgICB9KS5qb2luKFwiXFxuXCIpKTtcbiAgICAgICAgdmFyIG1hdGNoZWRBbnN3ZXJzID0gbWF0Y2hSZWNvcmRzKGFTZW50ZW5jZXMsIGNhdGVnb3J5LCByZWNvcmRzKTsgLy9hVG9vbDogQXJyYXk8SU1hdGNoLklUb29sPik6IGFueSAvKiBvYmplY3RzdHJlYW0qLyB7XG4gICAgICAgIGRlYnVnbG9nKFwiIG1hdGNoZWRUb29sc1wiICsgSlNPTi5zdHJpbmdpZnkobWF0Y2hlZEFuc3dlcnMsIHVuZGVmaW5lZCwgMikpO1xuICAgICAgICByZXR1cm4gbWF0Y2hlZEFuc3dlcnM7XG4gICAgfVxufVxuZXhwb3J0cy5yZXNvbHZlQ2F0ZWdvcnkgPSByZXNvbHZlQ2F0ZWdvcnk7XG5mdW5jdGlvbiBpc0luZGlzY3JpbWluYXRlUmVzdWx0KHJlc3VsdHMpIHtcbiAgICB2YXIgY250ID0gcmVzdWx0cy5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIHJlc3VsdCkge1xuICAgICAgICBpZiAocmVzdWx0Ll9yYW5raW5nID09PSByZXN1bHRzWzBdLl9yYW5raW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gcHJldiArIDE7XG4gICAgICAgIH1cbiAgICB9LCAwKTtcbiAgICBpZiAoY250ID4gMSkge1xuICAgICAgICAvLyBzZWFyY2ggZm9yIGEgZGlzY3JpbWluYXRpbmcgY2F0ZWdvcnkgdmFsdWVcbiAgICAgICAgdmFyIGRpc2NyaW1pbmF0aW5nID0gT2JqZWN0LmtleXMocmVzdWx0c1swXS5yZWNvcmQpLnJlZHVjZShmdW5jdGlvbiAocHJldiwgY2F0ZWdvcnkpIHtcbiAgICAgICAgICAgIGlmICgoY2F0ZWdvcnkuY2hhckF0KDApICE9PSAnXycgJiYgY2F0ZWdvcnkgIT09IHJlc3VsdHNbMF0uY2F0ZWdvcnkpXG4gICAgICAgICAgICAgICAgJiYgKHJlc3VsdHNbMF0ucmVjb3JkW2NhdGVnb3J5XSAhPT0gcmVzdWx0c1sxXS5yZWNvcmRbY2F0ZWdvcnldKSkge1xuICAgICAgICAgICAgICAgIHByZXYucHVzaChjYXRlZ29yeSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcHJldjtcbiAgICAgICAgfSwgW10pO1xuICAgICAgICBpZiAoZGlzY3JpbWluYXRpbmcubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJNYW55IGNvbXBhcmFibGUgcmVzdWx0cywgcGVyaGFwcyB5b3Ugd2FudCB0byBzcGVjaWZ5IGEgZGlzY3JpbWluYXRpbmcgXCIgKyBkaXNjcmltaW5hdGluZy5qb2luKCcsJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICdZb3VyIHF1ZXN0aW9uIGRvZXMgbm90IGhhdmUgYSBzcGVjaWZjaSBhbnN3ZXInO1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xufVxuZXhwb3J0cy5pc0luZGlzY3JpbWluYXRlUmVzdWx0ID0gaXNJbmRpc2NyaW1pbmF0ZVJlc3VsdDtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
