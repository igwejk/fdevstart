/**
 *
 * @module jfseb.fdevstart.analyze
 * @file analyze.ts
 * @copyright (c) 2016 Gerd Forstmann
 */
"use strict";

var InputFilter = require("./inputFilter");
var debug = require("debug");
var debuglog = debug('whatis');
var debuglogV = debug('whatVis');
var perflog = debug('perf');
var Sentence = require("./sentence");
var Word = require("./word");
var Algol = require("./algol");
function cmpByResultThenRanking(a, b) {
    var cmp = a.result.localeCompare(b.result);
    if (cmp) {
        return cmp;
    }
    return -(a._ranking - b._ranking);
}
exports.cmpByResultThenRanking = cmpByResultThenRanking;
function localeCompareArrs(aaresult, bbresult) {
    var cmp = 0;
    var blen = bbresult.length;
    aaresult.every(function (a, index) {
        if (blen <= index) {
            cmp = -1;
            return false;
        }
        cmp = a.localeCompare(bbresult[index]);
        if (cmp) {
            return false;
        }
        return true;
    });
    if (cmp) {
        return cmp;
    }
    if (blen > aaresult.length) {
        cmp = +1;
    }
    return 0;
}
function cmpByResultThenRankingTupel(aa, bb) {
    var cmp = localeCompareArrs(aa.result, bb.result);
    if (cmp) {
        return cmp;
    }
    return -(aa._ranking - bb._ranking);
}
exports.cmpByResultThenRankingTupel = cmpByResultThenRankingTupel;
function cmpByRanking(a, b) {
    var cmp = -(a._ranking - b._ranking);
    if (cmp) {
        return cmp;
    }
    cmp = a.result.localeCompare(b.result);
    if (cmp) {
        return cmp;
    }
    // are records different?
    var keys = Object.keys(a.record).concat(Object.keys(b.record)).sort();
    var res = keys.reduce(function (prev, sKey) {
        if (prev) {
            return prev;
        }
        if (b.record[sKey] !== a.record[sKey]) {
            if (!b.record[sKey]) {
                return -1;
            }
            if (!a.record[sKey]) {
                return +1;
            }
            return a.record[sKey].localeCompare(b.record[sKey]);
        }
        return 0;
    }, 0);
    return res;
}
exports.cmpByRanking = cmpByRanking;
function cmpByRankingTupel(a, b) {
    var cmp = -(a._ranking - b._ranking);
    if (cmp) {
        return cmp;
    }
    cmp = localeCompareArrs(a.result, b.result);
    if (cmp) {
        return cmp;
    }
    // are records different?
    var keys = Object.keys(a.record).concat(Object.keys(b.record)).sort();
    var res = keys.reduce(function (prev, sKey) {
        if (prev) {
            return prev;
        }
        if (b.record[sKey] !== a.record[sKey]) {
            if (!b.record[sKey]) {
                return -1;
            }
            if (!a.record[sKey]) {
                return +1;
            }
            return a.record[sKey].localeCompare(b.record[sKey]);
        }
        return 0;
    }, 0);
    return res;
}
exports.cmpByRankingTupel = cmpByRankingTupel;
function dumpNice(answer) {
    var result = {
        s: "",
        push: function push(s) {
            this.s = this.s + s;
        }
    };
    var s = "**Result for category: " + answer.category + " is " + answer.result + "\n rank: " + answer._ranking + "\n";
    result.push(s);
    Object.keys(answer.record).forEach(function (sRequires, index) {
        if (sRequires.charAt(0) !== '_') {
            result.push("record: " + sRequires + " -> " + answer.record[sRequires]);
        }
        result.push('\n');
    });
    var oSentence = answer.sentence;
    oSentence.forEach(function (oWord, index) {
        var sWord = "[" + index + "] : " + oWord.category + " \"" + oWord.string + "\" => \"" + oWord.matchedString + "\"";
        result.push(sWord + "\n");
    });
    result.push(".\n");
    return result.s;
}
exports.dumpNice = dumpNice;
function dumpNiceTupel(answer) {
    var result = {
        s: "",
        push: function push(s) {
            this.s = this.s + s;
        }
    };
    var s = "**Result for categories: " + answer.categories.join(";") + " is " + answer.result + "\n rank: " + answer._ranking + "\n";
    result.push(s);
    Object.keys(answer.record).forEach(function (sRequires, index) {
        if (sRequires.charAt(0) !== '_') {
            result.push("record: " + sRequires + " -> " + answer.record[sRequires]);
        }
        result.push('\n');
    });
    var oSentence = answer.sentence;
    oSentence.forEach(function (oWord, index) {
        var sWord = "[" + index + "] : " + oWord.category + " \"" + oWord.string + "\" => \"" + oWord.matchedString + "\"";
        result.push(sWord + "\n");
    });
    result.push(".\n");
    return result.s;
}
exports.dumpNiceTupel = dumpNiceTupel;
function dumpWeightsTop(toolmatches, options) {
    var s = '';
    toolmatches.forEach(function (oMatch, index) {
        if (index < options.top) {
            s = s + "WhatIsAnswer[" + index + "]...\n";
            s = s + dumpNice(oMatch);
        }
    });
    return s;
}
exports.dumpWeightsTop = dumpWeightsTop;
function filterRetainTopRankedResult(res) {
    var result = res.answers.filter(function (iRes, index) {
        if (debuglog.enabled) {
            debuglog('retain topRanked: ' + index + ' ' + JSON.stringify(iRes));
        }
        if (iRes.result === (res.answers[index - 1] && res.answers[index - 1].result)) {
            debuglog('skip');
            return false;
        }
        return true;
    });
    result.sort(cmpByRanking);
    var a = Object.assign({ answers: result }, res, { answers: result });
    a.answers = result;
    return a;
}
exports.filterRetainTopRankedResult = filterRetainTopRankedResult;
function filterRetainTopRankedResultTupel(res) {
    var result = res.tupelanswers.filter(function (iRes, index) {
        if (debuglog.enabled) {
            debuglog(' retain tupel ' + index + ' ' + JSON.stringify(iRes));
        }
        if (iRes.result === (res[index - 1] && res[index - 1].result)) {
            debuglog('skip');
            return false;
        }
        return true;
    });
    result.sort(cmpByRankingTupel);
    return Object.assign({ tupelanswers: result }, res);
}
exports.filterRetainTopRankedResultTupel = filterRetainTopRankedResultTupel;
var Match = require("./match");
function calcRanking(matched, mismatched, relevantCount) {
    var lenMatched = Object.keys(matched).length;
    var factor = Match.calcRankingProduct(matched);
    factor *= Math.pow(1.5, lenMatched);
    var lenMisMatched = Object.keys(mismatched).length;
    var factor2 = Match.calcRankingProduct(mismatched);
    factor2 *= Math.pow(0.4, lenMisMatched);
    return Math.pow(factor2 * factor, 1 / (lenMisMatched + lenMatched));
}
exports.calcRanking = calcRanking;
function calcRankingSimple(matched, mismatched, nouse, relevantCount) {
    // 2 : 0
    // 1 : 0
    var factor = matched * Math.pow(1.5, matched) * Math.pow(1.5, matched);
    var factor2 = Math.pow(0.4, mismatched);
    var factor3 = Math.pow(0.4, nouse);
    return Math.pow(factor2 * factor * factor3, 1 / (mismatched + matched + nouse));
}
exports.calcRankingSimple = calcRankingSimple;
function calcRankingHavingCategory(matched, hasCategory, mismatched, relevantCount) {
    var lenMatched = Object.keys(matched).length;
    var factor = Match.calcRankingProduct(matched);
    factor *= Math.pow(1.5, lenMatched);
    var lenHasCategory = Object.keys(hasCategory).length;
    var factorH = Math.pow(1.1, lenHasCategory);
    var lenMisMatched = Object.keys(mismatched).length;
    var factor2 = Match.calcRankingProduct(mismatched);
    factor2 *= Math.pow(0.4, lenMisMatched);
    return Math.pow(factor2 * factorH * factor, 1 / (lenMisMatched + lenHasCategory + lenMatched));
}
exports.calcRankingHavingCategory = calcRankingHavingCategory;
/**
 * list all top level rankings
 */
function matchRecordsHavingContext(pSentences, category, records, categorySet) {
    //debuglog(JSON.stringify(records, undefined, 2));
    var relevantRecords = records.filter(function (record) {
        return record[category] !== undefined && record[category] !== null;
    });
    var res = [];
    debuglog("MatchRecordsHavingContext : relevant records nr:" + relevantRecords.length);
    debuglog(debuglog.enabled ? "sentences are : " + JSON.stringify(pSentences, undefined, 2) : "-");
    debuglog(debuglog.enabled ? "category " + category + " and categoryset is: " + JSON.stringify(categorySet, undefined, 2) : "-");
    if (process.env.ABOT_FAST && categorySet) {
        // we are only interested in categories present in records for domains which contain the category
        // var categoryset = Model.calculateRelevantRecordCategories(theModel,category);
        //knowing the target
        perflog("got categoryset with " + Object.keys(categorySet).length);
        var fl = 0;
        var lf = 0;
        var aSimplifiedSentences = pSentences.sentences.map(function (oSentence) {
            var fWords = oSentence.filter(function (oWord) {
                return !Word.Word.isFiller(oWord);
            });
            var rWords = oSentence.filter(function (oWord) {
                return !!categorySet[oWord.category] || Word.Word.isCategory(oWord);
            });
            fl = fl + oSentence.length;
            lf = lf + rWords.length;
            return {
                oSentence: oSentence,
                cntRelevantWords: rWords.length,
                rWords: rWords
            };
        });
        Object.freeze(aSimplifiedSentences);
        debuglog("post simplify (r=" + relevantRecords.length + " s=" + pSentences.sentences.length + " fl " + fl + "->" + lf + ")");
        perflog("post simplify (r=" + relevantRecords.length + " s=" + pSentences.sentences.length + " fl " + fl + "->" + lf + ")");
        relevantRecords.forEach(function (record) {
            // count matches in record which are *not* the category
            aSimplifiedSentences.forEach(function (aSentence) {
                var hasCategory = {};
                var mismatched = {};
                var matched = {};
                var cntRelevantWords = aSentence.cntRelevantWords;
                aSentence.rWords.forEach(function (oWord) {
                    if (oWord.category && record[oWord.category] !== undefined) {
                        if (oWord.matchedString === record[oWord.category]) {
                            matched[oWord.category] = oWord;
                        } else {
                            mismatched[oWord.category] = oWord;
                        }
                    } else if (Word.Word.isCategory(oWord) && record[oWord.matchedString]) {
                        hasCategory[oWord.matchedString] = 1;
                    }
                });
                if (Object.keys(matched).length + Object.keys(hasCategory).length > Object.keys(mismatched).length) {
                    res.push({
                        sentence: aSentence.oSentence,
                        record: record,
                        category: category,
                        result: record[category],
                        _ranking: calcRankingHavingCategory(matched, hasCategory, mismatched, cntRelevantWords)
                    });
                }
            });
        });
        debuglog("here in weird");
    } else {
        relevantRecords.forEach(function (record) {
            // count matches in record which are *not* the category
            pSentences.sentences.forEach(function (aSentence) {
                var hasCategory = {};
                var mismatched = {};
                var matched = {};
                var cntRelevantWords = 0;
                aSentence.forEach(function (oWord) {
                    if (!Word.Word.isFiller(oWord)) {
                        cntRelevantWords = cntRelevantWords + 1;
                        if (oWord.category && record[oWord.category] !== undefined) {
                            if (oWord.matchedString === record[oWord.category]) {
                                matched[oWord.category] = oWord;
                            } else {
                                mismatched[oWord.category] = oWord;
                            }
                        } else if (Word.Word.isCategory(oWord) && record[oWord.matchedString]) {
                            hasCategory[oWord.matchedString] = 1;
                        }
                    }
                });
                if (Object.keys(matched).length + Object.keys(hasCategory).length > Object.keys(mismatched).length) {
                    res.push({
                        sentence: aSentence,
                        record: record,
                        category: category,
                        result: record[category],
                        _ranking: calcRankingHavingCategory(matched, hasCategory, mismatched, cntRelevantWords)
                    });
                }
            });
        });
    }
    res.sort(cmpByResultThenRanking);
    debuglog(" after sort" + res.length);
    var result = Object.assign({}, pSentences, { answers: res });
    return filterRetainTopRankedResult(result);
}
exports.matchRecordsHavingContext = matchRecordsHavingContext;
/**
 * list all top level rankings
 */
function matchRecordsTupelHavingContext(pSentences, categories, records, categorySet) {
    // debuglog(JSON.stringify(records, undefined, 2));
    var categoryF = categories[0];
    var relevantRecords = records.filter(function (record) {
        return record[categoryF] !== undefined && record[categoryF] !== null;
    });
    var res = [];
    debuglog("relevant records nr:" + relevantRecords.length);
    debuglog(debuglog.enabled ? "sentences are : " + JSON.stringify(pSentences, undefined, 2) : "-");
    if (process.env.ABOT_FAST && categorySet) {
        // we are only interested in categories present in records for domains which contain the category
        // var categoryset = Model.calculateRelevantRecordCategories(theModel,category);
        //knowing the target
        perflog("got categoryset with " + Object.keys(categorySet).length);
        var fl = 0;
        var lf = 0;
        var aSimplifiedSentences = pSentences.sentences.map(function (oSentence) {
            var fWords = oSentence.filter(function (oWord) {
                return !Word.Word.isFiller(oWord);
            });
            var rWords = oSentence.filter(function (oWord) {
                return !!categorySet[oWord.category] || Word.Word.isCategory(oWord);
            });
            fl = fl + oSentence.length;
            lf = lf + rWords.length;
            return {
                oSentence: oSentence,
                cntRelevantWords: rWords.length,
                rWords: rWords
            };
        });
        Object.freeze(aSimplifiedSentences);
        perflog("post simplify (r=" + relevantRecords.length + " s=" + pSentences.sentences.length + " fl " + fl + "->" + lf + ")");
        relevantRecords.forEach(function (record) {
            // count matches in record which are *not* the category
            aSimplifiedSentences.forEach(function (aSentence) {
                var hasCategory = {};
                var mismatched = {};
                var matched = {};
                var cntRelevantWords = aSentence.cntRelevantWords;
                aSentence.rWords.forEach(function (oWord) {
                    if (oWord.category && record[oWord.category] !== undefined) {
                        if (oWord.matchedString === record[oWord.category]) {
                            matched[oWord.category] = oWord;
                        } else {
                            mismatched[oWord.category] = oWord;
                        }
                    } else if (Word.Word.isCategory(oWord) && record[oWord.matchedString]) {
                        hasCategory[oWord.matchedString] = 1;
                    }
                });
                if (Object.keys(matched).length + Object.keys(hasCategory).length > Object.keys(mismatched).length) {
                    res.push({
                        sentence: aSentence.oSentence,
                        record: record,
                        categories: categories,
                        result: extractResult(categories, record),
                        _ranking: calcRankingHavingCategory(matched, hasCategory, mismatched, cntRelevantWords)
                    });
                }
            });
        });
    } else {
        relevantRecords.forEach(function (record) {
            // count matches in record which are *not* the category
            pSentences.sentences.forEach(function (aSentence) {
                var hasCategory = {};
                var mismatched = {};
                var matched = {};
                var cntRelevantWords = 0;
                aSentence.forEach(function (oWord) {
                    if (!Word.Word.isFiller(oWord)) {
                        cntRelevantWords = cntRelevantWords + 1;
                        if (oWord.category && record[oWord.category] !== undefined) {
                            if (oWord.matchedString === record[oWord.category]) {
                                matched[oWord.category] = oWord;
                            } else {
                                mismatched[oWord.category] = oWord;
                            }
                        } else if (Word.Word.isCategory(oWord) && record[oWord.matchedString]) {
                            hasCategory[oWord.matchedString] = 1;
                        }
                    }
                });
                if (Object.keys(matched).length + Object.keys(hasCategory).length > Object.keys(mismatched).length) {
                    res.push({
                        sentence: aSentence,
                        record: record,
                        categories: categories,
                        result: extractResult(categories, record),
                        _ranking: calcRankingHavingCategory(matched, hasCategory, mismatched, cntRelevantWords)
                    });
                }
            });
        });
    }
    res.sort(cmpByResultThenRankingTupel);
    var result1 = Object.assign({ tupelanswers: res }, pSentences);
    return filterRetainTopRankedResultTupel(result1);
}
exports.matchRecordsTupelHavingContext = matchRecordsTupelHavingContext;
function matchRecords(aSentences, category, records) {
    // if (debuglog.enabled) {
    //   debuglog(JSON.stringify(records, undefined, 2));
    // }
    var relevantRecords = records.filter(function (record) {
        return record[category] !== undefined && record[category] !== null;
    });
    var res = [];
    debuglog("relevant records nr:" + relevantRecords.length);
    relevantRecords.forEach(function (record) {
        aSentences.sentences.forEach(function (aSentence) {
            // count matches in record which are *not* the category
            var mismatched = {};
            var matched = {};
            var cntRelevantWords = 0;
            aSentence.forEach(function (oWord) {
                if (!Word.Word.isFiller(oWord)) {
                    cntRelevantWords = cntRelevantWords + 1;
                    if (oWord.category && record[oWord.category] !== undefined) {
                        if (oWord.matchedString === record[oWord.category]) {
                            matched[oWord.category] = oWord;
                        } else {
                            mismatched[oWord.category] = oWord;
                        }
                    }
                }
            });
            if (Object.keys(matched).length > Object.keys(mismatched).length) {
                res.push({
                    sentence: aSentence,
                    record: record,
                    category: category,
                    result: record[category],
                    _ranking: calcRanking(matched, mismatched, cntRelevantWords)
                });
            }
        });
    });
    res.sort(cmpByResultThenRanking);
    var result = Object.assign({}, aSentences, { answers: res });
    return filterRetainTopRankedResult(result);
}
exports.matchRecords = matchRecords;
function matchRecordsQuick(aSentences, category, records, categorySet) {
    //if (debuglog.enabled) {
    //  debuglog(JSON.stringify(records, undefined, 2));
    //}
    Object.freeze(categorySet);
    perflog("matchRecordsQuick ...(r=" + records.length + " s=" + aSentences.sentences.length + ")");
    var relevantRecords = records.filter(function (record) {
        return record[category] !== undefined && record[category] !== null;
    });
    var res = [];
    debuglog("matchRecordsQuick: relevant records (r=" + relevantRecords.length + ") sentences " + aSentences.sentences.length);
    perflog("relevant records nr:" + relevantRecords.length + " sentences " + aSentences.sentences.length);
    if (process.env.ABOT_FAST && categorySet) {
        // we are only interested in categories present in records for domains which contain the category
        // var categoryset = Model.calculateRelevantRecordCategories(theModel,category);
        //knowing the target
        perflog("got categoryset with " + Object.keys(categorySet).length);
        var fl = 0;
        var lf = 0;
        var aSimplifiedSentences = aSentences.sentences.map(function (oSentence) {
            var rWords = oSentence.filter(function (oWord) {
                return !!categorySet[oWord.category];
            });
            fl = fl + oSentence.length;
            lf = lf + rWords.length;
            return {
                oSentence: oSentence,
                cntRelevantWords: rWords.length,
                rWords: rWords
            };
        });
        perflog("post simplify (r=" + relevantRecords.length + " s=" + aSentences.sentences.length + " fl " + fl + "->" + lf + ")");
    } else {
        var fl = 0;
        var lf = 0;
        var aSimplifiedSentences = aSentences.sentences.map(function (oSentence) {
            var rWords = oSentence.filter(function (oWord) {
                return !Word.Word.isFiller(oWord);
            });
            fl = fl + oSentence.length;
            lf = lf + rWords.length;
            return {
                oSentence: oSentence,
                cntRelevantWords: rWords.length,
                rWords: rWords
            };
        });
        perflog("post simplify (r=" + relevantRecords.length + " s=" + aSentences.sentences.length + " fl " + fl + "->" + lf + ")");
    }
    relevantRecords.forEach(function (record) {
        aSimplifiedSentences.forEach(function (aSentence) {
            // count matches in record which are *not* the category
            var mismatched = 0;
            var matched = 0;
            var nouse = 0;
            var missingcat = 0;
            aSentence.rWords.forEach(function (oWord) {
                if (record[oWord.category] !== undefined) {
                    if (oWord.matchedString === record[oWord.category]) {
                        ++matched;
                    } else {
                        ++mismatched;
                    }
                } else {
                    if (oWord.category !== "category") {
                        nouse += 1;
                    } else {
                        if (!record[oWord.matchedString]) {
                            missingcat += 1;
                        }
                    }
                }
            });
            // if(matched > 0 || mismatched > 0 ) {
            //   console.log(" m" + matched + " mismatched" + mismatched);
            // }
            //console.log(JSON.stringify(aSentence.oSentence));
            if (matched > mismatched) {
                res.push({
                    sentence: aSentence.oSentence,
                    record: record,
                    category: category,
                    result: record[category],
                    _ranking: calcRankingSimple(matched, mismatched, nouse + missingcat, aSentence.cntRelevantWords)
                });
            }
        });
    });
    perflog("sort (a=" + res.length + ")");
    res.sort(cmpByResultThenRanking);
    perflog("filterRetain ...");
    var result2 = Object.assign({ answers: res }, aSentences);
    var result = filterRetainTopRankedResult(result2);
    debuglog("matchRecordsQuick done: (r=" + relevantRecords.length + " s=" + aSentences.sentences.length + " a=" + result.answers.length + ")");
    perflog("matchRecordsQuick done: (r=" + relevantRecords.length + " s=" + aSentences.sentences.length + " a=" + result.answers.length + ")");
    return result;
}
exports.matchRecordsQuick = matchRecordsQuick;
function extractResult(categories, record) {
    return categories.map(function (category) {
        return record[category] || "n/a";
    });
}
function matchRecordsQuickMultipleCategories(pSentences, categories, records, categorySet) {
    // if (debuglog.enabled) {
    //  debuglog(JSON.stringify(records, undefined, 2));
    // }
    Object.freeze(categorySet);
    var categoryF = categories[0];
    debuglog("matchRecordsQuickMultipleCategories (r=" + records.length + " s=" + pSentences.sentences.length + ")\n categories:" + categories.join("\n"));
    perflog("matchRecordsQuickMult ...(r=" + records.length + " s=" + pSentences.sentences.length + ")");
    var relevantRecords = records.filter(function (record) {
        return record[categoryF] !== undefined && record[categoryF] !== null;
    });
    var res = [];
    debuglog("relevant records with first (r=" + relevantRecords.length + ")");
    perflog("relevant records with first nr:" + relevantRecords.length + " sentences " + pSentences.sentences.length);
    if (process.env.ABOT_FAST && categorySet) {
        // we are only interested in categories present in records for domains which contain the category
        // var categoryset = Model.calculateRelevantRecordCategories(theModel,category);
        //knowing the target
        perflog("got categoryset with " + Object.keys(categorySet).length);
        var fl = 0;
        var lf = 0;
        var aSimplifiedSentences = pSentences.sentences.map(function (oSentence) {
            var rWords = oSentence.filter(function (oWord) {
                return !!categorySet[oWord.category];
            });
            fl = fl + oSentence.length;
            lf = lf + rWords.length;
            return {
                oSentence: oSentence,
                cntRelevantWords: rWords.length,
                rWords: rWords
            };
        });
        perflog("post simplify (r=" + relevantRecords.length + " s=" + pSentences.sentences.length + " fl " + fl + "->" + lf + ")");
    } else {
        debuglog("not abot_fast !");
        var fl = 0;
        var lf = 0;
        var aSimplifiedSentences = pSentences.sentences.map(function (oSentence) {
            var rWords = oSentence.filter(function (oWord) {
                return !Word.Word.isFiller(oWord);
            });
            fl = fl + oSentence.length;
            lf = lf + rWords.length;
            return {
                oSentence: oSentence,
                cntRelevantWords: rWords.length,
                rWords: rWords
            };
        });
        debuglog("post simplify (r=" + relevantRecords.length + " s=" + pSentences.sentences.length + " fl " + fl + "->" + lf + ")");
        perflog("post simplify (r=" + relevantRecords.length + " s=" + pSentences.sentences.length + " fl " + fl + "->" + lf + ")");
    }
    relevantRecords.forEach(function (record) {
        aSimplifiedSentences.forEach(function (aSentence) {
            // count matches in record which are *not* the category
            var mismatched = 0;
            var matched = 0;
            var nouse = 0;
            var missingcat = 0;
            aSentence.rWords.forEach(function (oWord) {
                if (record[oWord.category] !== undefined) {
                    if (oWord.matchedString === record[oWord.category]) {
                        ++matched;
                    } else {
                        ++mismatched;
                    }
                } else {
                    if (oWord.category !== "category") {
                        nouse += 1;
                    } else {
                        if (!record[oWord.matchedString]) {
                            missingcat += 1;
                        }
                    }
                }
            });
            // if(matched > 0 || mismatched > 0 ) {
            //   console.log(" m" + matched + " mismatched" + mismatched);
            // }
            //console.log(JSON.stringify(aSentence.oSentence));
            if (matched > mismatched) {
                var rec = {
                    sentence: aSentence.oSentence,
                    record: record,
                    categories: categories,
                    result: extractResult(categories, record),
                    _ranking: calcRankingSimple(matched, mismatched, nouse + missingcat, aSentence.cntRelevantWords)
                };
                /*   if(record["appId"] ==="F1566") {
                     console.log("here F1566" + JSON.stringify(rec));
                     console.log("here matched" + matched + " mismatched" + mismatched + " nouse " + (nouse + missingcat));
                     console.log("here cntRelevant :" + aSentence.cntRelevantWords);
                   }
                   if(record["appId"] ==="F0731A") {
                     console.log("here F0731A" + JSON.stringify(rec));
                     console.log("here matched" + matched + " mismatched" + mismatched + " nouse " + (nouse + missingcat));
                     console.log("here cntRelevant :" + aSentence.cntRelevantWords);
                   }
                   */
                res.push(rec);
            }
        });
    });
    perflog("sort (a=" + res.length + ")");
    res.sort(cmpByResultThenRankingTupel);
    perflog("filterRetain ...");
    var result1 = Object.assign({ tupelanswers: res }, pSentences);
    var result2 = filterRetainTopRankedResultTupel(result1);
    perflog("matchRecordsQuick done: (r=" + relevantRecords.length + " s=" + pSentences.sentences.length + " a=" + res.length + ")");
    return result2;
}
exports.matchRecordsQuickMultipleCategories = matchRecordsQuickMultipleCategories;
function classifyWordWithTargetCategory(word, targetcategory, rules, wholesentence) {
    //console.log("classify " + word + " "  + targetcategory);
    var cats = InputFilter.categorizeAWord(word, rules, wholesentence, {});
    // TODO qualify
    cats = cats.filter(function (cat) {
        return cat.category === targetcategory;
    });
    debuglog(JSON.stringify(cats));
    if (cats.length) {
        return cats[0].matchedString;
    }
}
function analyzeCategory(categoryword, rules, wholesentence) {
    return classifyWordWithTargetCategory(categoryword, 'category', rules, wholesentence);
}
exports.analyzeCategory = analyzeCategory;
function splitAtCommaAnd(str) {
    var r = str.split(/(\band\b)|[,]/);
    r = r.filter(function (o, index) {
        if (index % 2 > 0) {
            return false;
        }
        return true;
    });
    var rtrimmed = r.map(function (o) {
        return new String(o).trim();
    });
    return rtrimmed;
}
exports.splitAtCommaAnd = splitAtCommaAnd;
/**
 * A simple implementation, splitting at and and ,
 */
function analyzeCategoryMultOnlyAndComma(categorylist, rules, wholesentence) {
    var rtrimmed = splitAtCommaAnd(categorylist);
    var rcat = rtrimmed.map(function (o) {
        return analyzeCategory(o, rules, wholesentence);
    });
    if (rcat.indexOf(undefined) >= 0) {
        throw new Error('"' + rtrimmed[rcat.indexOf(undefined)] + '" is not a category!');
    }
    return rcat;
}
exports.analyzeCategoryMultOnlyAndComma = analyzeCategoryMultOnlyAndComma;
function filterAcceptingOnly(res, categories) {
    return res.filter(function (aSentence, iIndex) {
        return aSentence.every(function (oWord) {
            return categories.indexOf(oWord.category) >= 0;
        });
    });
}
exports.filterAcceptingOnly = filterAcceptingOnly;
var Erbase = require("./erbase");
var sWords = {};
function processString(query, rules) {
    if (!process.env.ABOT_OLDMATCH) {
        return Erbase.processString(query, rules);
    }
    var matched = InputFilter.analyzeString(query, rules, sWords);
    if (debuglog.enabled) {
        debuglog("After matched " + JSON.stringify(matched));
    }
    var aSentences = InputFilter.expandMatchArr(matched);
    if (debuglog.enabled) {
        debuglog("after expand" + aSentences.map(function (oSentence) {
            return Sentence.rankingProduct(oSentence) + ":" + JSON.stringify(oSentence);
        }).join("\n"));
    }
    var aSentencesReinforced = InputFilter.reinForce(aSentences);
    if (debuglog.enabled) {
        debuglog("after reinforce" + aSentencesReinforced.map(function (oSentence) {
            return Sentence.rankingProduct(oSentence) + ":" + JSON.stringify(oSentence);
        }).join("\n"));
    }
    return {
        errors: [],
        sentences: aSentencesReinforced
    };
}
exports.processString = processString;
function analyzeContextString(contextQueryString, rules) {
    var aSentencesReinforced = processString(contextQueryString, rules);
    // we limit analysis to n sentences
    aSentencesReinforced.sentences = aSentencesReinforced.sentences.slice(0, Algol.Cutoff_Sentences);
    if (debuglog.enabled) {
        debuglog("after reinforce and cutoff" + aSentencesReinforced.sentences.length + "\n" + aSentencesReinforced.sentences.map(function (oSentence) {
            return Sentence.rankingProduct(oSentence) + ":" + JSON.stringify(oSentence);
        }).join("\n"));
    }
    return aSentencesReinforced;
}
exports.analyzeContextString = analyzeContextString;
function cmpByNrCategoriesAndSameDomain(a, b) {
    //console.log("compare a" + a + " cntb " + b);
    var cnta = Sentence.getDistinctCategoriesInSentence(a).length;
    var cntb = Sentence.getDistinctCategoriesInSentence(b).length;
    /*
      var cnta = a.reduce(function(prev, oWord) {
        return prev + ((oWord.category === "category")? 1 : 0);
      },0);
      var cntb = b.reduce(function(prev, oWord) {
        return prev + ((oWord.category === "category")? 1 : 0);
      },0);
     // console.log("cnt a" + cnta + " cntb " + cntb);
     */
    return cntb - cnta;
}
exports.cmpByNrCategoriesAndSameDomain = cmpByNrCategoriesAndSameDomain;
function analyzeCategoryMult(categorylist, rules, wholesentence, gWords) {
    var res = analyzeContextString(categorylist, rules);
    //  debuglog("resulting category sentences", JSON.stringify(res));
    var res2 = filterAcceptingOnly(res.sentences, ["category", "filler"]);
    res2.sort(Sentence.cmpRankingProduct);
    debuglog("resulting category sentences: \n", debuglog.enabled ? Sentence.dumpNiceArr(res2.slice(0, 3), Sentence.rankingProduct) : '-');
    // TODO:   res2 = filterAcceptingOnlySameDomain(res2);
    //debuglog("resulting category sentences", JSON.stringify(res2, undefined, 2));
    // expect only categories
    // we could rank now by common domains , but for now we only take the first one
    if (!res.sentences.length) {
        return undefined;
    }
    //res.sort(cmpByNrCategoriesAndSameDomain);
    var rescat = Sentence.getDistinctCategoriesInSentence(res2[0]);
    return rescat;
    // "" return res[0].filter()
    // return classifyWordWithTargetCategory(categorylist, 'category', rules, wholesentence);
}
exports.analyzeCategoryMult = analyzeCategoryMult;
function analyzeOperator(opword, rules, wholesentence) {
    return classifyWordWithTargetCategory(opword, 'operator', rules, wholesentence);
}
exports.analyzeOperator = analyzeOperator;
var ErError = require("./ererror");
// const result = WhatIs.resolveCategory(cat, a1.entity,
//   theModel.mRules, theModel.tools, theModel.records);
function resolveCategory(category, contextQueryString, rules, records) {
    if (contextQueryString.length === 0) {
        return { errors: [ErError.makeError_EMPTY_INPUT()], tokens: [], answers: [] };
    } else {
        /*
            var matched = InputFilter.analyzeString(contextQueryString, rules);
            debuglog(debuglog.enabled ? ("after matched " + JSON.stringify(matched)): '-');
            var aSentences = InputFilter.expandMatchArr(matched);
            if(debuglog.enabled) {
              debuglog("after expand" + aSentences.map(function (oSentence) {
                return Sentence.rankingProduct(oSentence) + ":" + JSON.stringify(oSentence);
              }).join("\n"));
          } */
        var aSentencesReinforced = processString(contextQueryString, rules);
        //aSentences.map(function(oSentence) { return InputFilter.reinForce(oSentence); });
        debuglog(debuglog.enabled ? "after reinforce" + aSentencesReinforced.sentences.map(function (oSentence) {
            return Sentence.rankingProduct(oSentence) + ":" + JSON.stringify(oSentence);
        }).join("\n") : '-');
        var matchedAnswers = matchRecords(aSentencesReinforced, category, records); //aTool: Array<IMatch.ITool>): any /* objectstream*/ {
        debuglog(debuglog.enabled ? " matchedAnswers" + JSON.stringify(matchedAnswers, undefined, 2) : '-');
        return matchedAnswers;
    }
}
exports.resolveCategory = resolveCategory;
var Model = require("../model/model");
function resolveCategories(categories, contextQueryString, theModel) {
    var records = theModel.records;
    var rules = theModel.rules;
    if (contextQueryString.length === 0) {
        return {
            errors: [ErError.makeError_EMPTY_INPUT()],
            tupelanswers: [],
            tokens: []
        };
    } else {
        /*
        var matched = InputFilter.analyzeString(contextQueryString, rules);
        debuglog(debuglog.enabled? ("after matched " + JSON.stringify(matched)): '-');
        var aSentences = InputFilter.expandMatchArr(matched);
        if(debuglog.enabled) {
          debuglog(debuglog.enabled ? ("after expand" + aSentences.map(function (oSentence) {
            return Sentence.rankingProduct(oSentence) + ":" + JSON.stringify(oSentence);
          }).join("\n")): '-');
        } */
        var aSentencesReinforced = processString(contextQueryString, theModel.rules);
        //aSentences.map(function(oSentence) { return InputFilter.reinForce(oSentence); });
        debuglog(debuglog.enabled ? "after reinforce" + aSentencesReinforced.sentences.map(function (oSentence) {
            return Sentence.rankingProduct(oSentence) + ":" + JSON.stringify(oSentence);
        }).join("\n") : '-');
        //var matchedAnswers = matchRecordsQuick(aSentences, category, records); //aTool: Array<IMatch.ITool>): any /* objectstream*/ {
        var categorySet = {};
        categories.forEach(function (category) {
            categorySet[category] = true;
            var categorySetLocal = Model.getAllRecordCategoriesForTargetCategory(theModel, category, true);
            Object.assign(categorySet, categorySetLocal);
        });
        var matchedAnswers = matchRecordsQuickMultipleCategories(aSentencesReinforced, categories, records, categorySet); //aTool: Array<IMatch.ITool>): any /* objectstream*/ {
        if (debuglog.enabled) {
            debuglog(" matched Answers" + JSON.stringify(matchedAnswers, undefined, 2));
        }
        perflog("filtering topRanked (a=" + matchedAnswers.tupelanswers.length + ")...");
        var matchedFiltered = Object.assign({}, matchedAnswers);
        matchedFiltered.tupelanswers = filterOnlyTopRankedTupel(matchedAnswers.tupelanswers);
        if (debuglog.enabled) {
            debuglog(" matched top-ranked Answers" + JSON.stringify(matchedFiltered, undefined, 2));
        }
        perflog("totalWhatisWithContext (a=" + matchedFiltered.tupelanswers.length + ")");
        return matchedFiltered; // ??? Answers;
    }
}
exports.resolveCategories = resolveCategories;
function filterOnlyTopRanked(results) {
    var res = results.filter(function (result) {
        if (result._ranking === results[0]._ranking) {
            return true;
        }
        if (result._ranking >= results[0]._ranking) {
            throw new Error("List to filter must be ordered");
        }
        return false;
    });
    return res;
}
exports.filterOnlyTopRanked = filterOnlyTopRanked;
function filterOnlyTopRankedTupel(results) {
    var res = results.filter(function (result) {
        if (result._ranking === results[0]._ranking) {
            return true;
        }
        if (result._ranking >= results[0]._ranking) {
            throw new Error("List to filter must be ordered");
        }
        return false;
    });
    return res;
}
exports.filterOnlyTopRankedTupel = filterOnlyTopRankedTupel;
function isIndiscriminateResult(results) {
    var cnt = results.reduce(function (prev, result) {
        if (result._ranking === results[0]._ranking) {
            return prev + 1;
        }
    }, 0);
    if (cnt > 1) {
        // search for a discriminating category value
        var discriminating = Object.keys(results[0].record).reduce(function (prev, category) {
            if (category.charAt(0) !== '_' && category !== results[0].category && results[0].record[category] !== results[1].record[category]) {
                prev.push(category);
            }
            return prev;
        }, []);
        if (discriminating.length) {
            return "Many comparable results, perhaps you want to specify a discriminating " + discriminating.join(',');
        }
        return 'Your question does not have a specific answer';
    }
    return undefined;
}
exports.isIndiscriminateResult = isIndiscriminateResult;
function isIndiscriminateResultTupel(results) {
    var cnt = results.reduce(function (prev, result) {
        if (result._ranking === results[0]._ranking) {
            return prev + 1;
        }
    }, 0);
    if (cnt > 1) {
        // search for a discriminating category value
        var discriminating = Object.keys(results[0].record).reduce(function (prev, category) {
            if (category.charAt(0) !== '_' && results[0].categories.indexOf(category) < 0 && results[0].record[category] !== results[1].record[category]) {
                prev.push(category);
            }
            return prev;
        }, []);
        if (discriminating.length) {
            return "Many comparable results, perhaps you want to specify a discriminating " + discriminating.join(',') + ' or use "list all ..."';
        }
        return 'Your question does not have a specific answer';
    }
    return undefined;
}
exports.isIndiscriminateResultTupel = isIndiscriminateResultTupel;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tYXRjaC93aGF0aXMudHMiLCJtYXRjaC93aGF0aXMuanMiXSwibmFtZXMiOlsiSW5wdXRGaWx0ZXIiLCJyZXF1aXJlIiwiZGVidWciLCJkZWJ1Z2xvZyIsImRlYnVnbG9nViIsInBlcmZsb2ciLCJTZW50ZW5jZSIsIldvcmQiLCJBbGdvbCIsImNtcEJ5UmVzdWx0VGhlblJhbmtpbmciLCJhIiwiYiIsImNtcCIsInJlc3VsdCIsImxvY2FsZUNvbXBhcmUiLCJfcmFua2luZyIsImV4cG9ydHMiLCJsb2NhbGVDb21wYXJlQXJycyIsImFhcmVzdWx0IiwiYmJyZXN1bHQiLCJibGVuIiwibGVuZ3RoIiwiZXZlcnkiLCJpbmRleCIsImNtcEJ5UmVzdWx0VGhlblJhbmtpbmdUdXBlbCIsImFhIiwiYmIiLCJjbXBCeVJhbmtpbmciLCJrZXlzIiwiT2JqZWN0IiwicmVjb3JkIiwiY29uY2F0Iiwic29ydCIsInJlcyIsInJlZHVjZSIsInByZXYiLCJzS2V5IiwiY21wQnlSYW5raW5nVHVwZWwiLCJkdW1wTmljZSIsImFuc3dlciIsInMiLCJwdXNoIiwiY2F0ZWdvcnkiLCJmb3JFYWNoIiwic1JlcXVpcmVzIiwiY2hhckF0Iiwib1NlbnRlbmNlIiwic2VudGVuY2UiLCJvV29yZCIsInNXb3JkIiwic3RyaW5nIiwibWF0Y2hlZFN0cmluZyIsImR1bXBOaWNlVHVwZWwiLCJjYXRlZ29yaWVzIiwiam9pbiIsImR1bXBXZWlnaHRzVG9wIiwidG9vbG1hdGNoZXMiLCJvcHRpb25zIiwib01hdGNoIiwidG9wIiwiZmlsdGVyUmV0YWluVG9wUmFua2VkUmVzdWx0IiwiYW5zd2VycyIsImZpbHRlciIsImlSZXMiLCJlbmFibGVkIiwiSlNPTiIsInN0cmluZ2lmeSIsImFzc2lnbiIsImZpbHRlclJldGFpblRvcFJhbmtlZFJlc3VsdFR1cGVsIiwidHVwZWxhbnN3ZXJzIiwiTWF0Y2giLCJjYWxjUmFua2luZyIsIm1hdGNoZWQiLCJtaXNtYXRjaGVkIiwicmVsZXZhbnRDb3VudCIsImxlbk1hdGNoZWQiLCJmYWN0b3IiLCJjYWxjUmFua2luZ1Byb2R1Y3QiLCJNYXRoIiwicG93IiwibGVuTWlzTWF0Y2hlZCIsImZhY3RvcjIiLCJjYWxjUmFua2luZ1NpbXBsZSIsIm5vdXNlIiwiZmFjdG9yMyIsImNhbGNSYW5raW5nSGF2aW5nQ2F0ZWdvcnkiLCJoYXNDYXRlZ29yeSIsImxlbkhhc0NhdGVnb3J5IiwiZmFjdG9ySCIsIm1hdGNoUmVjb3Jkc0hhdmluZ0NvbnRleHQiLCJwU2VudGVuY2VzIiwicmVjb3JkcyIsImNhdGVnb3J5U2V0IiwicmVsZXZhbnRSZWNvcmRzIiwidW5kZWZpbmVkIiwicHJvY2VzcyIsImVudiIsIkFCT1RfRkFTVCIsImZsIiwibGYiLCJhU2ltcGxpZmllZFNlbnRlbmNlcyIsInNlbnRlbmNlcyIsIm1hcCIsImZXb3JkcyIsImlzRmlsbGVyIiwicldvcmRzIiwiaXNDYXRlZ29yeSIsImNudFJlbGV2YW50V29yZHMiLCJmcmVlemUiLCJhU2VudGVuY2UiLCJtYXRjaFJlY29yZHNUdXBlbEhhdmluZ0NvbnRleHQiLCJjYXRlZ29yeUYiLCJleHRyYWN0UmVzdWx0IiwicmVzdWx0MSIsIm1hdGNoUmVjb3JkcyIsImFTZW50ZW5jZXMiLCJtYXRjaFJlY29yZHNRdWljayIsIm1pc3NpbmdjYXQiLCJyZXN1bHQyIiwibWF0Y2hSZWNvcmRzUXVpY2tNdWx0aXBsZUNhdGVnb3JpZXMiLCJyZWMiLCJjbGFzc2lmeVdvcmRXaXRoVGFyZ2V0Q2F0ZWdvcnkiLCJ3b3JkIiwidGFyZ2V0Y2F0ZWdvcnkiLCJydWxlcyIsIndob2xlc2VudGVuY2UiLCJjYXRzIiwiY2F0ZWdvcml6ZUFXb3JkIiwiY2F0IiwiYW5hbHl6ZUNhdGVnb3J5IiwiY2F0ZWdvcnl3b3JkIiwic3BsaXRBdENvbW1hQW5kIiwic3RyIiwiciIsInNwbGl0IiwibyIsInJ0cmltbWVkIiwiU3RyaW5nIiwidHJpbSIsImFuYWx5emVDYXRlZ29yeU11bHRPbmx5QW5kQ29tbWEiLCJjYXRlZ29yeWxpc3QiLCJyY2F0IiwiaW5kZXhPZiIsIkVycm9yIiwiZmlsdGVyQWNjZXB0aW5nT25seSIsImlJbmRleCIsIkVyYmFzZSIsInNXb3JkcyIsInByb2Nlc3NTdHJpbmciLCJxdWVyeSIsIkFCT1RfT0xETUFUQ0giLCJhbmFseXplU3RyaW5nIiwiZXhwYW5kTWF0Y2hBcnIiLCJyYW5raW5nUHJvZHVjdCIsImFTZW50ZW5jZXNSZWluZm9yY2VkIiwicmVpbkZvcmNlIiwiZXJyb3JzIiwiYW5hbHl6ZUNvbnRleHRTdHJpbmciLCJjb250ZXh0UXVlcnlTdHJpbmciLCJzbGljZSIsIkN1dG9mZl9TZW50ZW5jZXMiLCJjbXBCeU5yQ2F0ZWdvcmllc0FuZFNhbWVEb21haW4iLCJjbnRhIiwiZ2V0RGlzdGluY3RDYXRlZ29yaWVzSW5TZW50ZW5jZSIsImNudGIiLCJhbmFseXplQ2F0ZWdvcnlNdWx0IiwiZ1dvcmRzIiwicmVzMiIsImNtcFJhbmtpbmdQcm9kdWN0IiwiZHVtcE5pY2VBcnIiLCJyZXNjYXQiLCJhbmFseXplT3BlcmF0b3IiLCJvcHdvcmQiLCJFckVycm9yIiwicmVzb2x2ZUNhdGVnb3J5IiwibWFrZUVycm9yX0VNUFRZX0lOUFVUIiwidG9rZW5zIiwibWF0Y2hlZEFuc3dlcnMiLCJNb2RlbCIsInJlc29sdmVDYXRlZ29yaWVzIiwidGhlTW9kZWwiLCJjYXRlZ29yeVNldExvY2FsIiwiZ2V0QWxsUmVjb3JkQ2F0ZWdvcmllc0ZvclRhcmdldENhdGVnb3J5IiwibWF0Y2hlZEZpbHRlcmVkIiwiZmlsdGVyT25seVRvcFJhbmtlZFR1cGVsIiwiZmlsdGVyT25seVRvcFJhbmtlZCIsInJlc3VsdHMiLCJpc0luZGlzY3JpbWluYXRlUmVzdWx0IiwiY250IiwiZGlzY3JpbWluYXRpbmciLCJpc0luZGlzY3JpbWluYXRlUmVzdWx0VHVwZWwiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7QUNNQTs7QURFQSxJQUFBQSxjQUFBQyxRQUFBLGVBQUEsQ0FBQTtBQUVBLElBQUFDLFFBQUFELFFBQUEsT0FBQSxDQUFBO0FBRUEsSUFB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M0UsR0FBc0csd0JBQTdHO0FBQ0Q7QUFDRCxlQUFPLCtDQUFQO0FBQ0Q7QUFDRCxXQUFPd0MsU0FBUDtBQUNEO0FBckJEOUUsUUFBQThLLDJCQUFBLEdBQUFBLDJCQUFBIiwiZmlsZSI6Im1hdGNoL3doYXRpcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICpcbiAqIEBtb2R1bGUgamZzZWIuZmRldnN0YXJ0LmFuYWx5emVcbiAqIEBmaWxlIGFuYWx5emUudHNcbiAqIEBjb3B5cmlnaHQgKGMpIDIwMTYgR2VyZCBGb3JzdG1hbm5cbiAqL1xuXG5cbmltcG9ydCAqIGFzIElucHV0RmlsdGVyIGZyb20gJy4vaW5wdXRGaWx0ZXInO1xuXG5pbXBvcnQgKiBhcyBkZWJ1ZyBmcm9tICdkZWJ1Zyc7XG5cbmNvbnN0IGRlYnVnbG9nID0gZGVidWcoJ3doYXRpcycpO1xuY29uc3QgZGVidWdsb2dWID0gZGVidWcoJ3doYXRWaXMnKTtcbmNvbnN0IHBlcmZsb2cgPSBkZWJ1ZygncGVyZicpO1xuXG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tICcuLi91dGlscy91dGlscyc7XG5cbmltcG9ydCAqIGFzIElNYXRjaCBmcm9tICcuL2lmbWF0Y2gnO1xuXG5pbXBvcnQgKiBhcyBUb29sbWF0Y2hlciBmcm9tICcuL3Rvb2xtYXRjaGVyJztcblxuaW1wb3J0ICogYXMgU2VudGVuY2UgZnJvbSAnLi9zZW50ZW5jZSc7XG5cbmltcG9ydCAqIGFzIFdvcmQgZnJvbSAnLi93b3JkJztcblxuaW1wb3J0ICogYXMgQWxnb2wgZnJvbSAnLi9hbGdvbCc7XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGNtcEJ5UmVzdWx0VGhlblJhbmtpbmcoYTogSU1hdGNoLklXaGF0SXNBbnN3ZXIsIGI6IElNYXRjaC5JV2hhdElzQW5zd2VyKSB7XG4gIHZhciBjbXAgPSBhLnJlc3VsdC5sb2NhbGVDb21wYXJlKGIucmVzdWx0KTtcbiAgaWYgKGNtcCkge1xuICAgIHJldHVybiBjbXA7XG4gIH1cbiAgcmV0dXJuIC0oYS5fcmFua2luZyAtIGIuX3JhbmtpbmcpO1xufVxuXG5mdW5jdGlvbiBsb2NhbGVDb21wYXJlQXJycyhhYXJlc3VsdDogc3RyaW5nW10sIGJicmVzdWx0OiBzdHJpbmdbXSk6IG51bWJlciB7XG4gIHZhciBjbXAgPSAwO1xuICB2YXIgYmxlbiA9IGJicmVzdWx0Lmxlbmd0aDtcbiAgYWFyZXN1bHQuZXZlcnkoZnVuY3Rpb24gKGEsIGluZGV4KSB7XG4gICAgaWYgKGJsZW4gPD0gaW5kZXgpIHtcbiAgICAgIGNtcCA9IC0xO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjbXAgPSBhLmxvY2FsZUNvbXBhcmUoYmJyZXN1bHRbaW5kZXhdKTtcbiAgICBpZiAoY21wKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9KTtcbiAgaWYgKGNtcCkge1xuICAgIHJldHVybiBjbXA7XG4gIH1cbiAgaWYgKGJsZW4gPiBhYXJlc3VsdC5sZW5ndGgpIHtcbiAgICBjbXAgPSArMTtcbiAgfVxuICByZXR1cm4gMDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNtcEJ5UmVzdWx0VGhlblJhbmtpbmdUdXBlbChhYTogSU1hdGNoLklXaGF0SXNUdXBlbEFuc3dlciwgYmI6IElNYXRjaC5JV2hhdElzVHVwZWxBbnN3ZXIpIHtcbiAgdmFyIGNtcCA9IGxvY2FsZUNvbXBhcmVBcnJzKGFhLnJlc3VsdCwgYmIucmVzdWx0KTtcbiAgaWYgKGNtcCkge1xuICAgIHJldHVybiBjbXA7XG4gIH1cbiAgcmV0dXJuIC0oYWEuX3JhbmtpbmcgLSBiYi5fcmFua2luZyk7XG59XG5cblxuXG5leHBvcnQgZnVuY3Rpb24gY21wQnlSYW5raW5nKGE6IElNYXRjaC5JV2hhdElzQW5zd2VyLCBiOiBJTWF0Y2guSVdoYXRJc0Fuc3dlcikge1xuICB2YXIgY21wID0gLShhLl9yYW5raW5nIC0gYi5fcmFua2luZyk7XG4gIGlmIChjbXApIHtcbiAgICByZXR1cm4gY21wO1xuICB9XG4gIGNtcCA9IGEucmVzdWx0LmxvY2FsZUNvbXBhcmUoYi5yZXN1bHQpO1xuICBpZiAoY21wKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIC8vIGFyZSByZWNvcmRzIGRpZmZlcmVudD9cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhhLnJlY29yZCkuY29uY2F0KE9iamVjdC5rZXlzKGIucmVjb3JkKSkuc29ydCgpO1xuICB2YXIgcmVzID0ga2V5cy5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIHNLZXkpIHtcbiAgICBpZiAocHJldikge1xuICAgICAgcmV0dXJuIHByZXY7XG4gICAgfVxuICAgIGlmIChiLnJlY29yZFtzS2V5XSAhPT0gYS5yZWNvcmRbc0tleV0pIHtcbiAgICAgIGlmICghYi5yZWNvcmRbc0tleV0pIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgaWYgKCFhLnJlY29yZFtzS2V5XSkge1xuICAgICAgICByZXR1cm4gKzE7XG4gICAgICB9XG4gICAgICByZXR1cm4gYS5yZWNvcmRbc0tleV0ubG9jYWxlQ29tcGFyZShiLnJlY29yZFtzS2V5XSk7XG4gICAgfVxuICAgIHJldHVybiAwO1xuICB9LCAwKTtcbiAgcmV0dXJuIHJlcztcbn1cblxuXG5cbmV4cG9ydCBmdW5jdGlvbiBjbXBCeVJhbmtpbmdUdXBlbChhOiBJTWF0Y2guSVdoYXRJc1R1cGVsQW5zd2VyLCBiOiBJTWF0Y2guSVdoYXRJc1R1cGVsQW5zd2VyKSB7XG4gIHZhciBjbXAgPSAtKGEuX3JhbmtpbmcgLSBiLl9yYW5raW5nKTtcbiAgaWYgKGNtcCkge1xuICAgIHJldHVybiBjbXA7XG4gIH1cbiAgY21wID0gbG9jYWxlQ29tcGFyZUFycnMoYS5yZXN1bHQsIGIucmVzdWx0KTtcbiAgaWYgKGNtcCkge1xuICAgIHJldHVybiBjbXA7XG4gIH1cbiAgLy8gYXJlIHJlY29yZHMgZGlmZmVyZW50P1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGEucmVjb3JkKS5jb25jYXQoT2JqZWN0LmtleXMoYi5yZWNvcmQpKS5zb3J0KCk7XG4gIHZhciByZXMgPSBrZXlzLnJlZHVjZShmdW5jdGlvbiAocHJldiwgc0tleSkge1xuICAgIGlmIChwcmV2KSB7XG4gICAgICByZXR1cm4gcHJldjtcbiAgICB9XG4gICAgaWYgKGIucmVjb3JkW3NLZXldICE9PSBhLnJlY29yZFtzS2V5XSkge1xuICAgICAgaWYgKCFiLnJlY29yZFtzS2V5XSkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICBpZiAoIWEucmVjb3JkW3NLZXldKSB7XG4gICAgICAgIHJldHVybiArMTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhLnJlY29yZFtzS2V5XS5sb2NhbGVDb21wYXJlKGIucmVjb3JkW3NLZXldKTtcbiAgICB9XG4gICAgcmV0dXJuIDA7XG4gIH0sIDApO1xuICByZXR1cm4gcmVzO1xufVxuXG5cblxuZXhwb3J0IGZ1bmN0aW9uIGR1bXBOaWNlKGFuc3dlcjogSU1hdGNoLklXaGF0SXNBbnN3ZXIpIHtcbiAgdmFyIHJlc3VsdCA9IHtcbiAgICBzOiBcIlwiLFxuICAgIHB1c2g6IGZ1bmN0aW9uIChzKSB7IHRoaXMucyA9IHRoaXMucyArIHM7IH1cbiAgfTtcbiAgdmFyIHMgPVxuICAgIGAqKlJlc3VsdCBmb3IgY2F0ZWdvcnk6ICR7YW5zd2VyLmNhdGVnb3J5fSBpcyAke2Fuc3dlci5yZXN1bHR9XG4gcmFuazogJHthbnN3ZXIuX3Jhbmtpbmd9XG5gO1xuICByZXN1bHQucHVzaChzKTtcbiAgT2JqZWN0LmtleXMoYW5zd2VyLnJlY29yZCkuZm9yRWFjaChmdW5jdGlvbiAoc1JlcXVpcmVzLCBpbmRleCkge1xuICAgIGlmIChzUmVxdWlyZXMuY2hhckF0KDApICE9PSAnXycpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGByZWNvcmQ6ICR7c1JlcXVpcmVzfSAtPiAke2Fuc3dlci5yZWNvcmRbc1JlcXVpcmVzXX1gKTtcbiAgICB9XG4gICAgcmVzdWx0LnB1c2goJ1xcbicpO1xuICB9KTtcbiAgdmFyIG9TZW50ZW5jZSA9IGFuc3dlci5zZW50ZW5jZTtcbiAgb1NlbnRlbmNlLmZvckVhY2goZnVuY3Rpb24gKG9Xb3JkLCBpbmRleCkge1xuICAgIHZhciBzV29yZCA9IGBbJHtpbmRleH1dIDogJHtvV29yZC5jYXRlZ29yeX0gXCIke29Xb3JkLnN0cmluZ31cIiA9PiBcIiR7b1dvcmQubWF0Y2hlZFN0cmluZ31cImBcbiAgICByZXN1bHQucHVzaChzV29yZCArIFwiXFxuXCIpO1xuICB9KVxuICByZXN1bHQucHVzaChcIi5cXG5cIik7XG4gIHJldHVybiByZXN1bHQucztcbn1cbmV4cG9ydCBmdW5jdGlvbiBkdW1wTmljZVR1cGVsKGFuc3dlcjogSU1hdGNoLklXaGF0SXNUdXBlbEFuc3dlcikge1xuICB2YXIgcmVzdWx0ID0ge1xuICAgIHM6IFwiXCIsXG4gICAgcHVzaDogZnVuY3Rpb24gKHMpIHsgdGhpcy5zID0gdGhpcy5zICsgczsgfVxuICB9O1xuICB2YXIgcyA9XG4gICAgYCoqUmVzdWx0IGZvciBjYXRlZ29yaWVzOiAke2Fuc3dlci5jYXRlZ29yaWVzLmpvaW4oXCI7XCIpfSBpcyAke2Fuc3dlci5yZXN1bHR9XG4gcmFuazogJHthbnN3ZXIuX3Jhbmtpbmd9XG5gO1xuICByZXN1bHQucHVzaChzKTtcbiAgT2JqZWN0LmtleXMoYW5zd2VyLnJlY29yZCkuZm9yRWFjaChmdW5jdGlvbiAoc1JlcXVpcmVzLCBpbmRleCkge1xuICAgIGlmIChzUmVxdWlyZXMuY2hhckF0KDApICE9PSAnXycpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGByZWNvcmQ6ICR7c1JlcXVpcmVzfSAtPiAke2Fuc3dlci5yZWNvcmRbc1JlcXVpcmVzXX1gKTtcbiAgICB9XG4gICAgcmVzdWx0LnB1c2goJ1xcbicpO1xuICB9KTtcbiAgdmFyIG9TZW50ZW5jZSA9IGFuc3dlci5zZW50ZW5jZTtcbiAgb1NlbnRlbmNlLmZvckVhY2goZnVuY3Rpb24gKG9Xb3JkLCBpbmRleCkge1xuICAgIHZhciBzV29yZCA9IGBbJHtpbmRleH1dIDogJHtvV29yZC5jYXRlZ29yeX0gXCIke29Xb3JkLnN0cmluZ31cIiA9PiBcIiR7b1dvcmQubWF0Y2hlZFN0cmluZ31cImBcbiAgICByZXN1bHQucHVzaChzV29yZCArIFwiXFxuXCIpO1xuICB9KVxuICByZXN1bHQucHVzaChcIi5cXG5cIik7XG4gIHJldHVybiByZXN1bHQucztcbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gZHVtcFdlaWdodHNUb3AodG9vbG1hdGNoZXM6IEFycmF5PElNYXRjaC5JV2hhdElzQW5zd2VyPiwgb3B0aW9uczogYW55KSB7XG4gIHZhciBzID0gJyc7XG4gIHRvb2xtYXRjaGVzLmZvckVhY2goZnVuY3Rpb24gKG9NYXRjaCwgaW5kZXgpIHtcbiAgICBpZiAoaW5kZXggPCBvcHRpb25zLnRvcCkge1xuICAgICAgcyA9IHMgKyBcIldoYXRJc0Fuc3dlcltcIiArIGluZGV4ICsgXCJdLi4uXFxuXCI7XG4gICAgICBzID0gcyArIGR1bXBOaWNlKG9NYXRjaCk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaWx0ZXJSZXRhaW5Ub3BSYW5rZWRSZXN1bHQocmVzOiBJTWF0Y2guSVByb2Nlc3NlZFdoYXRJc0Fuc3dlcnMpOiBJTWF0Y2guSVByb2Nlc3NlZFdoYXRJc0Fuc3dlcnMge1xuICB2YXIgcmVzdWx0ID0gcmVzLmFuc3dlcnMuZmlsdGVyKGZ1bmN0aW9uIChpUmVzLCBpbmRleCkge1xuICAgIGlmIChkZWJ1Z2xvZy5lbmFibGVkKSB7XG4gICAgICBkZWJ1Z2xvZygncmV0YWluIHRvcFJhbmtlZDogJyArIGluZGV4ICsgJyAnICsgSlNPTi5zdHJpbmdpZnkoaVJlcykpO1xuICAgIH1cbiAgICBpZiAoaVJlcy5yZXN1bHQgPT09IChyZXMuYW5zd2Vyc1tpbmRleCAtIDFdICYmIHJlcy5hbnN3ZXJzW2luZGV4IC0gMV0ucmVzdWx0KSkge1xuICAgICAgZGVidWdsb2coJ3NraXAnKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH0pO1xuICByZXN1bHQuc29ydChjbXBCeVJhbmtpbmcpO1xuICB2YXIgYSA9ICBPYmplY3QuYXNzaWduKHsgYW5zd2VycyA6IHJlc3VsdCB9LHJlcywge2Fuc3dlcnM6IHJlc3VsdH0pO1xuICBhLmFuc3dlcnMgPSByZXN1bHQ7XG4gIHJldHVybiBhO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZmlsdGVyUmV0YWluVG9wUmFua2VkUmVzdWx0VHVwZWwocmVzOiBJTWF0Y2guSVByb2Nlc3NlZFdoYXRJc1R1cGVsQW5zd2Vycyk6IElNYXRjaC5JUHJvY2Vzc2VkV2hhdElzVHVwZWxBbnN3ZXJzIHtcbiAgdmFyIHJlc3VsdCA9IHJlcy50dXBlbGFuc3dlcnMuZmlsdGVyKGZ1bmN0aW9uIChpUmVzLCBpbmRleCkge1xuICAgIGlmIChkZWJ1Z2xvZy5lbmFibGVkKSB7XG4gICAgICBkZWJ1Z2xvZygnIHJldGFpbiB0dXBlbCAnICsgaW5kZXggKyAnICcgKyBKU09OLnN0cmluZ2lmeShpUmVzKSk7XG4gICAgfVxuICAgIGlmIChpUmVzLnJlc3VsdCA9PT0gKHJlc1tpbmRleCAtIDFdICYmIHJlc1tpbmRleCAtIDFdLnJlc3VsdCkpIHtcbiAgICAgIGRlYnVnbG9nKCdza2lwJyk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9KTtcbiAgcmVzdWx0LnNvcnQoY21wQnlSYW5raW5nVHVwZWwpO1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbih7IHR1cGVsYW5zd2VycyA6IHJlc3VsdCB9LHJlcyk7XG59XG5cblxuaW1wb3J0ICogYXMgTWF0Y2ggZnJvbSAnLi9tYXRjaCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBjYWxjUmFua2luZyhtYXRjaGVkOiB7IFtrZXk6IHN0cmluZ106IElNYXRjaC5JV29yZCB9LFxuICBtaXNtYXRjaGVkOiB7IFtrZXk6IHN0cmluZ106IElNYXRjaC5JV29yZCB9LCByZWxldmFudENvdW50OiBudW1iZXIpOiBudW1iZXIge1xuXG4gIHZhciBsZW5NYXRjaGVkID0gT2JqZWN0LmtleXMobWF0Y2hlZCkubGVuZ3RoO1xuICB2YXIgZmFjdG9yID0gTWF0Y2guY2FsY1JhbmtpbmdQcm9kdWN0KG1hdGNoZWQpO1xuICBmYWN0b3IgKj0gTWF0aC5wb3coMS41LCBsZW5NYXRjaGVkKTtcblxuICB2YXIgbGVuTWlzTWF0Y2hlZCA9IE9iamVjdC5rZXlzKG1pc21hdGNoZWQpLmxlbmd0aDtcbiAgdmFyIGZhY3RvcjIgPSBNYXRjaC5jYWxjUmFua2luZ1Byb2R1Y3QobWlzbWF0Y2hlZCk7XG4gIGZhY3RvcjIgKj0gTWF0aC5wb3coMC40LCBsZW5NaXNNYXRjaGVkKTtcblxuICByZXR1cm4gTWF0aC5wb3coZmFjdG9yMiAqIGZhY3RvciwgMSAvIChsZW5NaXNNYXRjaGVkICsgbGVuTWF0Y2hlZCkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2FsY1JhbmtpbmdTaW1wbGUobWF0Y2hlZDogbnVtYmVyLFxuICBtaXNtYXRjaGVkOiBudW1iZXIsIG5vdXNlOiBudW1iZXIsXG4gIHJlbGV2YW50Q291bnQ6IG51bWJlcik6IG51bWJlciB7XG4gIC8vIDIgOiAwXG4gIC8vIDEgOiAwXG4gIHZhciBmYWN0b3IgPSBtYXRjaGVkICogTWF0aC5wb3coMS41LCBtYXRjaGVkKSAqIE1hdGgucG93KDEuNSwgbWF0Y2hlZCk7XG4gIHZhciBmYWN0b3IyID0gTWF0aC5wb3coMC40LCBtaXNtYXRjaGVkKTtcbiAgdmFyIGZhY3RvcjMgPSBNYXRoLnBvdygwLjQsIG5vdXNlKTtcbiAgcmV0dXJuIE1hdGgucG93KGZhY3RvcjIgKiBmYWN0b3IgKiBmYWN0b3IzLCAxIC8gKG1pc21hdGNoZWQgKyBtYXRjaGVkICsgbm91c2UpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhbGNSYW5raW5nSGF2aW5nQ2F0ZWdvcnkobWF0Y2hlZDogeyBba2V5OiBzdHJpbmddOiBJTWF0Y2guSVdvcmQgfSxcbiAgaGFzQ2F0ZWdvcnk6IHsgW2tleTogc3RyaW5nXTogbnVtYmVyIH0sXG4gIG1pc21hdGNoZWQ6IHsgW2tleTogc3RyaW5nXTogSU1hdGNoLklXb3JkIH0sIHJlbGV2YW50Q291bnQ6IG51bWJlcik6IG51bWJlciB7XG5cblxuICB2YXIgbGVuTWF0Y2hlZCA9IE9iamVjdC5rZXlzKG1hdGNoZWQpLmxlbmd0aDtcbiAgdmFyIGZhY3RvciA9IE1hdGNoLmNhbGNSYW5raW5nUHJvZHVjdChtYXRjaGVkKTtcbiAgZmFjdG9yICo9IE1hdGgucG93KDEuNSwgbGVuTWF0Y2hlZCk7XG5cbiAgdmFyIGxlbkhhc0NhdGVnb3J5ID0gT2JqZWN0LmtleXMoaGFzQ2F0ZWdvcnkpLmxlbmd0aDtcbiAgdmFyIGZhY3RvckggPSBNYXRoLnBvdygxLjEsIGxlbkhhc0NhdGVnb3J5KTtcblxuICB2YXIgbGVuTWlzTWF0Y2hlZCA9IE9iamVjdC5rZXlzKG1pc21hdGNoZWQpLmxlbmd0aDtcbiAgdmFyIGZhY3RvcjIgPSBNYXRjaC5jYWxjUmFua2luZ1Byb2R1Y3QobWlzbWF0Y2hlZCk7XG4gIGZhY3RvcjIgKj0gTWF0aC5wb3coMC40LCBsZW5NaXNNYXRjaGVkKTtcblxuICByZXR1cm4gTWF0aC5wb3coZmFjdG9yMiAqIGZhY3RvckggKiBmYWN0b3IsIDEgLyAobGVuTWlzTWF0Y2hlZCArIGxlbkhhc0NhdGVnb3J5ICsgbGVuTWF0Y2hlZCkpO1xufVxuXG4vKipcbiAqIGxpc3QgYWxsIHRvcCBsZXZlbCByYW5raW5nc1xuICovXG5leHBvcnQgZnVuY3Rpb24gbWF0Y2hSZWNvcmRzSGF2aW5nQ29udGV4dChcbiAgcFNlbnRlbmNlczogSU1hdGNoLklQcm9jZXNzZWRTZW50ZW5jZXMsIGNhdGVnb3J5OiBzdHJpbmcsIHJlY29yZHM6IEFycmF5PElNYXRjaC5JUmVjb3JkPixcbiAgY2F0ZWdvcnlTZXQ6IHsgW2tleTogc3RyaW5nXTogYm9vbGVhbiB9KVxuICA6IElNYXRjaC5JUHJvY2Vzc2VkV2hhdElzQW5zd2VycyB7XG5cbiAgLy9kZWJ1Z2xvZyhKU09OLnN0cmluZ2lmeShyZWNvcmRzLCB1bmRlZmluZWQsIDIpKTtcbiAgdmFyIHJlbGV2YW50UmVjb3JkcyA9IHJlY29yZHMuZmlsdGVyKGZ1bmN0aW9uIChyZWNvcmQ6IElNYXRjaC5JUmVjb3JkKSB7XG4gICAgcmV0dXJuIChyZWNvcmRbY2F0ZWdvcnldICE9PSB1bmRlZmluZWQpICYmIChyZWNvcmRbY2F0ZWdvcnldICE9PSBudWxsKTtcbiAgfSk7XG4gIHZhciByZXMgPSBbXTtcbiAgZGVidWdsb2coXCJNYXRjaFJlY29yZHNIYXZpbmdDb250ZXh0IDogcmVsZXZhbnQgcmVjb3JkcyBucjpcIiArIHJlbGV2YW50UmVjb3Jkcy5sZW5ndGgpO1xuICBkZWJ1Z2xvZyhkZWJ1Z2xvZy5lbmFibGVkID8gKFwic2VudGVuY2VzIGFyZSA6IFwiICsgSlNPTi5zdHJpbmdpZnkocFNlbnRlbmNlcywgdW5kZWZpbmVkLCAyKSkgOiBcIi1cIik7XG4gIGRlYnVnbG9nKGRlYnVnbG9nLmVuYWJsZWQgPyAoXCJjYXRlZ29yeSBcIiArIGNhdGVnb3J5ICsgXCIgYW5kIGNhdGVnb3J5c2V0IGlzOiBcIiArIEpTT04uc3RyaW5naWZ5KGNhdGVnb3J5U2V0LCB1bmRlZmluZWQsIDIpKSA6IFwiLVwiKTtcbiAgaWYgKHByb2Nlc3MuZW52LkFCT1RfRkFTVCAmJiBjYXRlZ29yeVNldCkge1xuICAgIC8vIHdlIGFyZSBvbmx5IGludGVyZXN0ZWQgaW4gY2F0ZWdvcmllcyBwcmVzZW50IGluIHJlY29yZHMgZm9yIGRvbWFpbnMgd2hpY2ggY29udGFpbiB0aGUgY2F0ZWdvcnlcbiAgICAvLyB2YXIgY2F0ZWdvcnlzZXQgPSBNb2RlbC5jYWxjdWxhdGVSZWxldmFudFJlY29yZENhdGVnb3JpZXModGhlTW9kZWwsY2F0ZWdvcnkpO1xuICAgIC8va25vd2luZyB0aGUgdGFyZ2V0XG4gICAgcGVyZmxvZyhcImdvdCBjYXRlZ29yeXNldCB3aXRoIFwiICsgT2JqZWN0LmtleXMoY2F0ZWdvcnlTZXQpLmxlbmd0aCk7XG4gICAgdmFyIGZsID0gMDtcbiAgICB2YXIgbGYgPSAwO1xuICAgIHZhciBhU2ltcGxpZmllZFNlbnRlbmNlcyA9IHBTZW50ZW5jZXMuc2VudGVuY2VzLm1hcChmdW5jdGlvbiAob1NlbnRlbmNlKSB7XG4gICAgICB2YXIgZldvcmRzID0gb1NlbnRlbmNlLmZpbHRlcihmdW5jdGlvbiAob1dvcmQpIHtcbiAgICAgICAgcmV0dXJuICFXb3JkLldvcmQuaXNGaWxsZXIob1dvcmQpO1xuICAgICAgfSk7XG4gICAgICB2YXIgcldvcmRzID0gb1NlbnRlbmNlLmZpbHRlcihmdW5jdGlvbiAob1dvcmQpIHtcbiAgICAgICAgcmV0dXJuICEhY2F0ZWdvcnlTZXRbb1dvcmQuY2F0ZWdvcnldIHx8IFdvcmQuV29yZC5pc0NhdGVnb3J5KG9Xb3JkKTtcbiAgICAgIH0pO1xuICAgICAgZmwgPSBmbCArIG9TZW50ZW5jZS5sZW5ndGg7XG4gICAgICBsZiA9IGxmICsgcldvcmRzLmxlbmd0aDtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG9TZW50ZW5jZTogb1NlbnRlbmNlLFxuICAgICAgICBjbnRSZWxldmFudFdvcmRzOiByV29yZHMubGVuZ3RoLCAvLyBub3QgYSBmaWxsZXIgIC8vIHRvIGJlIGNvbXBhdGlibGUgaXQgd291bGQgYmUgZldvcmRzXG4gICAgICAgIHJXb3JkczogcldvcmRzXG4gICAgICB9O1xuICAgIH0pO1xuICAgIE9iamVjdC5mcmVlemUoYVNpbXBsaWZpZWRTZW50ZW5jZXMpO1xuICAgIGRlYnVnbG9nKFwicG9zdCBzaW1wbGlmeSAocj1cIiArIHJlbGV2YW50UmVjb3Jkcy5sZW5ndGggKyBcIiBzPVwiICsgcFNlbnRlbmNlcy5zZW50ZW5jZXMubGVuZ3RoICsgXCIgZmwgXCIgKyBmbCArIFwiLT5cIiArIGxmICsgXCIpXCIpO1xuICAgIHBlcmZsb2coXCJwb3N0IHNpbXBsaWZ5IChyPVwiICsgcmVsZXZhbnRSZWNvcmRzLmxlbmd0aCArIFwiIHM9XCIgKyBwU2VudGVuY2VzLnNlbnRlbmNlcy5sZW5ndGggKyBcIiBmbCBcIiArIGZsICsgXCItPlwiICsgbGYgKyBcIilcIik7XG4gICAgcmVsZXZhbnRSZWNvcmRzLmZvckVhY2goZnVuY3Rpb24gKHJlY29yZCkge1xuICAgICAgLy8gY291bnQgbWF0Y2hlcyBpbiByZWNvcmQgd2hpY2ggYXJlICpub3QqIHRoZSBjYXRlZ29yeVxuICAgICAgYVNpbXBsaWZpZWRTZW50ZW5jZXMuZm9yRWFjaChmdW5jdGlvbiAoYVNlbnRlbmNlKSB7XG4gICAgICAgIHZhciBoYXNDYXRlZ29yeSA9IHt9O1xuICAgICAgICB2YXIgbWlzbWF0Y2hlZCA9IHt9O1xuICAgICAgICB2YXIgbWF0Y2hlZCA9IHt9O1xuICAgICAgICB2YXIgY250UmVsZXZhbnRXb3JkcyA9IGFTZW50ZW5jZS5jbnRSZWxldmFudFdvcmRzO1xuICAgICAgICBhU2VudGVuY2UucldvcmRzLmZvckVhY2goZnVuY3Rpb24gKG9Xb3JkKSB7XG4gICAgICAgICAgaWYgKG9Xb3JkLmNhdGVnb3J5ICYmIChyZWNvcmRbb1dvcmQuY2F0ZWdvcnldICE9PSB1bmRlZmluZWQpKSB7XG4gICAgICAgICAgICBpZiAob1dvcmQubWF0Y2hlZFN0cmluZyA9PT0gcmVjb3JkW29Xb3JkLmNhdGVnb3J5XSkge1xuICAgICAgICAgICAgICBtYXRjaGVkW29Xb3JkLmNhdGVnb3J5XSA9IG9Xb3JkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgIG1pc21hdGNoZWRbb1dvcmQuY2F0ZWdvcnldID0gb1dvcmQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKFdvcmQuV29yZC5pc0NhdGVnb3J5KG9Xb3JkKSAmJiByZWNvcmRbb1dvcmQubWF0Y2hlZFN0cmluZ10pIHtcbiAgICAgICAgICAgIGhhc0NhdGVnb3J5W29Xb3JkLm1hdGNoZWRTdHJpbmddID0gMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgICAgaWYgKChPYmplY3Qua2V5cyhtYXRjaGVkKS5sZW5ndGggKyBPYmplY3Qua2V5cyhoYXNDYXRlZ29yeSkubGVuZ3RoKSA+IE9iamVjdC5rZXlzKG1pc21hdGNoZWQpLmxlbmd0aCkge1xuICAgICAgICAgIHJlcy5wdXNoKHtcbiAgICAgICAgICAgIHNlbnRlbmNlOiBhU2VudGVuY2Uub1NlbnRlbmNlLFxuICAgICAgICAgICAgcmVjb3JkOiByZWNvcmQsXG4gICAgICAgICAgICBjYXRlZ29yeTogY2F0ZWdvcnksXG4gICAgICAgICAgICByZXN1bHQ6IHJlY29yZFtjYXRlZ29yeV0sXG4gICAgICAgICAgICBfcmFua2luZzogY2FsY1JhbmtpbmdIYXZpbmdDYXRlZ29yeShtYXRjaGVkLCBoYXNDYXRlZ29yeSwgbWlzbWF0Y2hlZCwgY250UmVsZXZhbnRXb3JkcylcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9KTtcbiAgICBkZWJ1Z2xvZyhcImhlcmUgaW4gd2VpcmRcIik7XG4gIH0gZWxzZSB7XG4gICAgcmVsZXZhbnRSZWNvcmRzLmZvckVhY2goZnVuY3Rpb24gKHJlY29yZCkge1xuICAgICAgLy8gY291bnQgbWF0Y2hlcyBpbiByZWNvcmQgd2hpY2ggYXJlICpub3QqIHRoZSBjYXRlZ29yeVxuICAgICAgcFNlbnRlbmNlcy5zZW50ZW5jZXMuZm9yRWFjaChmdW5jdGlvbiAoYVNlbnRlbmNlKSB7XG4gICAgICAgIHZhciBoYXNDYXRlZ29yeSA9IHt9O1xuICAgICAgICB2YXIgbWlzbWF0Y2hlZCA9IHt9O1xuICAgICAgICB2YXIgbWF0Y2hlZCA9IHt9O1xuICAgICAgICB2YXIgY250UmVsZXZhbnRXb3JkcyA9IDA7XG4gICAgICAgIGFTZW50ZW5jZS5mb3JFYWNoKGZ1bmN0aW9uIChvV29yZCkge1xuICAgICAgICAgIGlmICghV29yZC5Xb3JkLmlzRmlsbGVyKG9Xb3JkKSkge1xuICAgICAgICAgICAgY250UmVsZXZhbnRXb3JkcyA9IGNudFJlbGV2YW50V29yZHMgKyAxO1xuICAgICAgICAgICAgaWYgKG9Xb3JkLmNhdGVnb3J5ICYmIChyZWNvcmRbb1dvcmQuY2F0ZWdvcnldICE9PSB1bmRlZmluZWQpKSB7XG4gICAgICAgICAgICAgIGlmIChvV29yZC5tYXRjaGVkU3RyaW5nID09PSByZWNvcmRbb1dvcmQuY2F0ZWdvcnldKSB7XG4gICAgICAgICAgICAgICAgbWF0Y2hlZFtvV29yZC5jYXRlZ29yeV0gPSBvV29yZDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBtaXNtYXRjaGVkW29Xb3JkLmNhdGVnb3J5XSA9IG9Xb3JkO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChXb3JkLldvcmQuaXNDYXRlZ29yeShvV29yZCkgJiYgcmVjb3JkW29Xb3JkLm1hdGNoZWRTdHJpbmddKSB7XG4gICAgICAgICAgICAgIGhhc0NhdGVnb3J5W29Xb3JkLm1hdGNoZWRTdHJpbmddID0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoKE9iamVjdC5rZXlzKG1hdGNoZWQpLmxlbmd0aCArIE9iamVjdC5rZXlzKGhhc0NhdGVnb3J5KS5sZW5ndGgpID4gT2JqZWN0LmtleXMobWlzbWF0Y2hlZCkubGVuZ3RoKSB7XG4gICAgICAgICAgcmVzLnB1c2goe1xuICAgICAgICAgICAgc2VudGVuY2U6IGFTZW50ZW5jZSxcbiAgICAgICAgICAgIHJlY29yZDogcmVjb3JkLFxuICAgICAgICAgICAgY2F0ZWdvcnk6IGNhdGVnb3J5LFxuICAgICAgICAgICAgcmVzdWx0OiByZWNvcmRbY2F0ZWdvcnldLFxuICAgICAgICAgICAgX3Jhbmtpbmc6IGNhbGNSYW5raW5nSGF2aW5nQ2F0ZWdvcnkobWF0Y2hlZCwgaGFzQ2F0ZWdvcnksIG1pc21hdGNoZWQsIGNudFJlbGV2YW50V29yZHMpXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSk7XG4gIH1cbiAgcmVzLnNvcnQoY21wQnlSZXN1bHRUaGVuUmFua2luZyk7XG4gIGRlYnVnbG9nKFwiIGFmdGVyIHNvcnRcIiArIHJlcy5sZW5ndGgpO1xuICB2YXIgcmVzdWx0ID0gT2JqZWN0LmFzc2lnbih7fSwgcFNlbnRlbmNlcywgeyBhbnN3ZXJzOiByZXN9KTtcbiAgcmV0dXJuICBmaWx0ZXJSZXRhaW5Ub3BSYW5rZWRSZXN1bHQocmVzdWx0KTtcbn1cblxuXG4vKipcbiAqIGxpc3QgYWxsIHRvcCBsZXZlbCByYW5raW5nc1xuICovXG5leHBvcnQgZnVuY3Rpb24gbWF0Y2hSZWNvcmRzVHVwZWxIYXZpbmdDb250ZXh0KFxuICBwU2VudGVuY2VzOiBJTWF0Y2guSVByb2Nlc3NlZFNlbnRlbmNlcywgY2F0ZWdvcmllczogc3RyaW5nW10sIHJlY29yZHM6IEFycmF5PElNYXRjaC5JUmVjb3JkPixcbiAgY2F0ZWdvcnlTZXQ6IHsgW2tleTogc3RyaW5nXTogYm9vbGVhbiB9KVxuICA6IElNYXRjaC5JUHJvY2Vzc2VkV2hhdElzVHVwZWxBbnN3ZXJzIHtcbiAgLy8gZGVidWdsb2coSlNPTi5zdHJpbmdpZnkocmVjb3JkcywgdW5kZWZpbmVkLCAyKSk7XG4gIHZhciBjYXRlZ29yeUYgPSBjYXRlZ29yaWVzWzBdO1xuICB2YXIgcmVsZXZhbnRSZWNvcmRzID0gcmVjb3Jkcy5maWx0ZXIoZnVuY3Rpb24gKHJlY29yZDogSU1hdGNoLklSZWNvcmQpIHtcbiAgICByZXR1cm4gKHJlY29yZFtjYXRlZ29yeUZdICE9PSB1bmRlZmluZWQpICYmIChyZWNvcmRbY2F0ZWdvcnlGXSAhPT0gbnVsbCk7XG4gIH0pO1xuICB2YXIgcmVzID0gW10gYXMgSU1hdGNoLklXaGF0SXNUdXBlbEFuc3dlcltdO1xuICBkZWJ1Z2xvZyhcInJlbGV2YW50IHJlY29yZHMgbnI6XCIgKyByZWxldmFudFJlY29yZHMubGVuZ3RoKTtcbiAgZGVidWdsb2coZGVidWdsb2cuZW5hYmxlZCA/IChcInNlbnRlbmNlcyBhcmUgOiBcIiArIEpTT04uc3RyaW5naWZ5KHBTZW50ZW5jZXMsIHVuZGVmaW5lZCwgMikpIDogXCItXCIpO1xuICBpZiAocHJvY2Vzcy5lbnYuQUJPVF9GQVNUICYmIGNhdGVnb3J5U2V0KSB7XG4gICAgLy8gd2UgYXJlIG9ubHkgaW50ZXJlc3RlZCBpbiBjYXRlZ29yaWVzIHByZXNlbnQgaW4gcmVjb3JkcyBmb3IgZG9tYWlucyB3aGljaCBjb250YWluIHRoZSBjYXRlZ29yeVxuICAgIC8vIHZhciBjYXRlZ29yeXNldCA9IE1vZGVsLmNhbGN1bGF0ZVJlbGV2YW50UmVjb3JkQ2F0ZWdvcmllcyh0aGVNb2RlbCxjYXRlZ29yeSk7XG4gICAgLy9rbm93aW5nIHRoZSB0YXJnZXRcbiAgICBwZXJmbG9nKFwiZ290IGNhdGVnb3J5c2V0IHdpdGggXCIgKyBPYmplY3Qua2V5cyhjYXRlZ29yeVNldCkubGVuZ3RoKTtcbiAgICB2YXIgZmwgPSAwO1xuICAgIHZhciBsZiA9IDA7XG4gICAgdmFyIGFTaW1wbGlmaWVkU2VudGVuY2VzID0gcFNlbnRlbmNlcy5zZW50ZW5jZXMubWFwKGZ1bmN0aW9uIChvU2VudGVuY2UpIHtcbiAgICAgIHZhciBmV29yZHMgPSBvU2VudGVuY2UuZmlsdGVyKGZ1bmN0aW9uIChvV29yZCkge1xuICAgICAgICByZXR1cm4gIVdvcmQuV29yZC5pc0ZpbGxlcihvV29yZCk7XG4gICAgICB9KTtcbiAgICAgIHZhciByV29yZHMgPSBvU2VudGVuY2UuZmlsdGVyKGZ1bmN0aW9uIChvV29yZCkge1xuICAgICAgICByZXR1cm4gISFjYXRlZ29yeVNldFtvV29yZC5jYXRlZ29yeV0gfHwgV29yZC5Xb3JkLmlzQ2F0ZWdvcnkob1dvcmQpO1xuICAgICAgfSk7XG4gICAgICBmbCA9IGZsICsgb1NlbnRlbmNlLmxlbmd0aDtcbiAgICAgIGxmID0gbGYgKyByV29yZHMubGVuZ3RoO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgb1NlbnRlbmNlOiBvU2VudGVuY2UsXG4gICAgICAgIGNudFJlbGV2YW50V29yZHM6IHJXb3Jkcy5sZW5ndGgsIC8vIG5vdCBhIGZpbGxlciAgLy8gdG8gYmUgY29tcGF0aWJsZSBpdCB3b3VsZCBiZSBmV29yZHNcbiAgICAgICAgcldvcmRzOiByV29yZHNcbiAgICAgIH07XG4gICAgfSk7XG4gICAgT2JqZWN0LmZyZWV6ZShhU2ltcGxpZmllZFNlbnRlbmNlcyk7XG4gICAgcGVyZmxvZyhcInBvc3Qgc2ltcGxpZnkgKHI9XCIgKyByZWxldmFudFJlY29yZHMubGVuZ3RoICsgXCIgcz1cIiArIHBTZW50ZW5jZXMuc2VudGVuY2VzLmxlbmd0aCArIFwiIGZsIFwiICsgZmwgKyBcIi0+XCIgKyBsZiArIFwiKVwiKTtcbiAgICByZWxldmFudFJlY29yZHMuZm9yRWFjaChmdW5jdGlvbiAocmVjb3JkKSB7XG4gICAgICAvLyBjb3VudCBtYXRjaGVzIGluIHJlY29yZCB3aGljaCBhcmUgKm5vdCogdGhlIGNhdGVnb3J5XG4gICAgICBhU2ltcGxpZmllZFNlbnRlbmNlcy5mb3JFYWNoKGZ1bmN0aW9uIChhU2VudGVuY2UpIHtcbiAgICAgICAgdmFyIGhhc0NhdGVnb3J5ID0ge307XG4gICAgICAgIHZhciBtaXNtYXRjaGVkID0ge307XG4gICAgICAgIHZhciBtYXRjaGVkID0ge307XG4gICAgICAgIHZhciBjbnRSZWxldmFudFdvcmRzID0gYVNlbnRlbmNlLmNudFJlbGV2YW50V29yZHM7XG4gICAgICAgIGFTZW50ZW5jZS5yV29yZHMuZm9yRWFjaChmdW5jdGlvbiAob1dvcmQpIHtcbiAgICAgICAgICBpZiAob1dvcmQuY2F0ZWdvcnkgJiYgKHJlY29yZFtvV29yZC5jYXRlZ29yeV0gIT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgICAgIGlmIChvV29yZC5tYXRjaGVkU3RyaW5nID09PSByZWNvcmRbb1dvcmQuY2F0ZWdvcnldKSB7XG4gICAgICAgICAgICAgIG1hdGNoZWRbb1dvcmQuY2F0ZWdvcnldID0gb1dvcmQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgbWlzbWF0Y2hlZFtvV29yZC5jYXRlZ29yeV0gPSBvV29yZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoV29yZC5Xb3JkLmlzQ2F0ZWdvcnkob1dvcmQpICYmIHJlY29yZFtvV29yZC5tYXRjaGVkU3RyaW5nXSkge1xuICAgICAgICAgICAgaGFzQ2F0ZWdvcnlbb1dvcmQubWF0Y2hlZFN0cmluZ10gPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICBpZiAoKE9iamVjdC5rZXlzKG1hdGNoZWQpLmxlbmd0aCArIE9iamVjdC5rZXlzKGhhc0NhdGVnb3J5KS5sZW5ndGgpID4gT2JqZWN0LmtleXMobWlzbWF0Y2hlZCkubGVuZ3RoKSB7XG4gICAgICAgICAgcmVzLnB1c2goe1xuICAgICAgICAgICAgc2VudGVuY2U6IGFTZW50ZW5jZS5vU2VudGVuY2UsXG4gICAgICAgICAgICByZWNvcmQ6IHJlY29yZCxcbiAgICAgICAgICAgIGNhdGVnb3JpZXM6IGNhdGVnb3JpZXMsXG4gICAgICAgICAgICByZXN1bHQ6IGV4dHJhY3RSZXN1bHQoY2F0ZWdvcmllcywgcmVjb3JkKSxcbiAgICAgICAgICAgIF9yYW5raW5nOiBjYWxjUmFua2luZ0hhdmluZ0NhdGVnb3J5KG1hdGNoZWQsIGhhc0NhdGVnb3J5LCBtaXNtYXRjaGVkLCBjbnRSZWxldmFudFdvcmRzKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHJlbGV2YW50UmVjb3Jkcy5mb3JFYWNoKGZ1bmN0aW9uIChyZWNvcmQpIHtcbiAgICAgIC8vIGNvdW50IG1hdGNoZXMgaW4gcmVjb3JkIHdoaWNoIGFyZSAqbm90KiB0aGUgY2F0ZWdvcnlcbiAgICAgIHBTZW50ZW5jZXMuc2VudGVuY2VzLmZvckVhY2goZnVuY3Rpb24gKGFTZW50ZW5jZSkge1xuICAgICAgICB2YXIgaGFzQ2F0ZWdvcnkgPSB7fTtcbiAgICAgICAgdmFyIG1pc21hdGNoZWQgPSB7fTtcbiAgICAgICAgdmFyIG1hdGNoZWQgPSB7fTtcbiAgICAgICAgdmFyIGNudFJlbGV2YW50V29yZHMgPSAwO1xuICAgICAgICBhU2VudGVuY2UuZm9yRWFjaChmdW5jdGlvbiAob1dvcmQpIHtcbiAgICAgICAgICBpZiAoIVdvcmQuV29yZC5pc0ZpbGxlcihvV29yZCkpIHtcbiAgICAgICAgICAgIGNudFJlbGV2YW50V29yZHMgPSBjbnRSZWxldmFudFdvcmRzICsgMTtcbiAgICAgICAgICAgIGlmIChvV29yZC5jYXRlZ29yeSAmJiAocmVjb3JkW29Xb3JkLmNhdGVnb3J5XSAhPT0gdW5kZWZpbmVkKSkge1xuICAgICAgICAgICAgICBpZiAob1dvcmQubWF0Y2hlZFN0cmluZyA9PT0gcmVjb3JkW29Xb3JkLmNhdGVnb3J5XSkge1xuICAgICAgICAgICAgICAgIG1hdGNoZWRbb1dvcmQuY2F0ZWdvcnldID0gb1dvcmQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbWlzbWF0Y2hlZFtvV29yZC5jYXRlZ29yeV0gPSBvV29yZDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoV29yZC5Xb3JkLmlzQ2F0ZWdvcnkob1dvcmQpICYmIHJlY29yZFtvV29yZC5tYXRjaGVkU3RyaW5nXSkge1xuICAgICAgICAgICAgICBoYXNDYXRlZ29yeVtvV29yZC5tYXRjaGVkU3RyaW5nXSA9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKChPYmplY3Qua2V5cyhtYXRjaGVkKS5sZW5ndGggKyBPYmplY3Qua2V5cyhoYXNDYXRlZ29yeSkubGVuZ3RoKSA+IE9iamVjdC5rZXlzKG1pc21hdGNoZWQpLmxlbmd0aCkge1xuICAgICAgICAgIHJlcy5wdXNoKHtcbiAgICAgICAgICAgIHNlbnRlbmNlOiBhU2VudGVuY2UsXG4gICAgICAgICAgICByZWNvcmQ6IHJlY29yZCxcbiAgICAgICAgICAgIGNhdGVnb3JpZXM6IGNhdGVnb3JpZXMsXG4gICAgICAgICAgICByZXN1bHQ6IGV4dHJhY3RSZXN1bHQoY2F0ZWdvcmllcywgcmVjb3JkKSxcbiAgICAgICAgICAgIF9yYW5raW5nOiBjYWxjUmFua2luZ0hhdmluZ0NhdGVnb3J5KG1hdGNoZWQsIGhhc0NhdGVnb3J5LCBtaXNtYXRjaGVkLCBjbnRSZWxldmFudFdvcmRzKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0pO1xuICB9XG4gIHJlcy5zb3J0KGNtcEJ5UmVzdWx0VGhlblJhbmtpbmdUdXBlbCk7XG4gIHZhciByZXN1bHQxID0gT2JqZWN0LmFzc2lnbih7IHR1cGVsYW5zd2VycyA6IHJlc30sIHBTZW50ZW5jZXMpO1xuICByZXR1cm4gZmlsdGVyUmV0YWluVG9wUmFua2VkUmVzdWx0VHVwZWwocmVzdWx0MSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtYXRjaFJlY29yZHMoYVNlbnRlbmNlczogSU1hdGNoLklQcm9jZXNzZWRTZW50ZW5jZXMsIGNhdGVnb3J5OiBzdHJpbmcsIHJlY29yZHM6IEFycmF5PElNYXRjaC5JUmVjb3JkPilcbiAgOiBJTWF0Y2guSVByb2Nlc3NlZFdoYXRJc0Fuc3dlcnMge1xuICAvLyBpZiAoZGVidWdsb2cuZW5hYmxlZCkge1xuICAvLyAgIGRlYnVnbG9nKEpTT04uc3RyaW5naWZ5KHJlY29yZHMsIHVuZGVmaW5lZCwgMikpO1xuICAvLyB9XG4gIHZhciByZWxldmFudFJlY29yZHMgPSByZWNvcmRzLmZpbHRlcihmdW5jdGlvbiAocmVjb3JkOiBJTWF0Y2guSVJlY29yZCkge1xuICAgIHJldHVybiAocmVjb3JkW2NhdGVnb3J5XSAhPT0gdW5kZWZpbmVkKSAmJiAocmVjb3JkW2NhdGVnb3J5XSAhPT0gbnVsbCk7XG4gIH0pO1xuICB2YXIgcmVzID0gW107XG4gIGRlYnVnbG9nKFwicmVsZXZhbnQgcmVjb3JkcyBucjpcIiArIHJlbGV2YW50UmVjb3Jkcy5sZW5ndGgpO1xuICByZWxldmFudFJlY29yZHMuZm9yRWFjaChmdW5jdGlvbiAocmVjb3JkKSB7XG4gICAgYVNlbnRlbmNlcy5zZW50ZW5jZXMuZm9yRWFjaChmdW5jdGlvbiAoYVNlbnRlbmNlKSB7XG4gICAgICAvLyBjb3VudCBtYXRjaGVzIGluIHJlY29yZCB3aGljaCBhcmUgKm5vdCogdGhlIGNhdGVnb3J5XG4gICAgICB2YXIgbWlzbWF0Y2hlZCA9IHt9XG4gICAgICB2YXIgbWF0Y2hlZCA9IHt9O1xuICAgICAgdmFyIGNudFJlbGV2YW50V29yZHMgPSAwO1xuICAgICAgYVNlbnRlbmNlLmZvckVhY2goZnVuY3Rpb24gKG9Xb3JkKSB7XG4gICAgICAgIGlmICghV29yZC5Xb3JkLmlzRmlsbGVyKG9Xb3JkKSkge1xuICAgICAgICAgIGNudFJlbGV2YW50V29yZHMgPSBjbnRSZWxldmFudFdvcmRzICsgMTtcbiAgICAgICAgICBpZiAob1dvcmQuY2F0ZWdvcnkgJiYgKHJlY29yZFtvV29yZC5jYXRlZ29yeV0gIT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgICAgIGlmIChvV29yZC5tYXRjaGVkU3RyaW5nID09PSByZWNvcmRbb1dvcmQuY2F0ZWdvcnldKSB7XG4gICAgICAgICAgICAgIG1hdGNoZWRbb1dvcmQuY2F0ZWdvcnldID0gb1dvcmQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBtaXNtYXRjaGVkW29Xb3JkLmNhdGVnb3J5XSA9IG9Xb3JkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpZiAoT2JqZWN0LmtleXMobWF0Y2hlZCkubGVuZ3RoID4gT2JqZWN0LmtleXMobWlzbWF0Y2hlZCkubGVuZ3RoKSB7XG4gICAgICAgIHJlcy5wdXNoKHtcbiAgICAgICAgICBzZW50ZW5jZTogYVNlbnRlbmNlLFxuICAgICAgICAgIHJlY29yZDogcmVjb3JkLFxuICAgICAgICAgIGNhdGVnb3J5OiBjYXRlZ29yeSxcbiAgICAgICAgICByZXN1bHQ6IHJlY29yZFtjYXRlZ29yeV0sXG4gICAgICAgICAgX3Jhbmtpbmc6IGNhbGNSYW5raW5nKG1hdGNoZWQsIG1pc21hdGNoZWQsIGNudFJlbGV2YW50V29yZHMpXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pXG4gIH0pO1xuICByZXMuc29ydChjbXBCeVJlc3VsdFRoZW5SYW5raW5nKTtcbiAgdmFyIHJlc3VsdCA9IE9iamVjdC5hc3NpZ24oe30sIGFTZW50ZW5jZXMsIHthbnN3ZXJzIDogcmVzfSk7XG4gIHJldHVybiBmaWx0ZXJSZXRhaW5Ub3BSYW5rZWRSZXN1bHQocmVzdWx0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1hdGNoUmVjb3Jkc1F1aWNrKGFTZW50ZW5jZXM6IElNYXRjaC5JUHJvY2Vzc2VkU2VudGVuY2VzLCBjYXRlZ29yeTogc3RyaW5nLCByZWNvcmRzOiBBcnJheTxJTWF0Y2guSVJlY29yZD4sIGNhdGVnb3J5U2V0PzogeyBba2V5OiBzdHJpbmddOiBib29sZWFuIH0pXG4gIDogSU1hdGNoLklQcm9jZXNzZWRXaGF0SXNBbnN3ZXJzIHtcbiAgLy9pZiAoZGVidWdsb2cuZW5hYmxlZCkge1xuICAvLyAgZGVidWdsb2coSlNPTi5zdHJpbmdpZnkocmVjb3JkcywgdW5kZWZpbmVkLCAyKSk7XG4gIC8vfVxuICBPYmplY3QuZnJlZXplKGNhdGVnb3J5U2V0KTtcbiAgcGVyZmxvZyhcIm1hdGNoUmVjb3Jkc1F1aWNrIC4uLihyPVwiICsgcmVjb3Jkcy5sZW5ndGggKyBcIiBzPVwiICsgYVNlbnRlbmNlcy5zZW50ZW5jZXMubGVuZ3RoICsgXCIpXCIpO1xuICB2YXIgcmVsZXZhbnRSZWNvcmRzID0gcmVjb3Jkcy5maWx0ZXIoZnVuY3Rpb24gKHJlY29yZDogSU1hdGNoLklSZWNvcmQpIHtcbiAgICByZXR1cm4gKHJlY29yZFtjYXRlZ29yeV0gIT09IHVuZGVmaW5lZCkgJiYgKHJlY29yZFtjYXRlZ29yeV0gIT09IG51bGwpO1xuICB9KTtcbiAgdmFyIHJlcyA9IFtdO1xuICBkZWJ1Z2xvZyhcIm1hdGNoUmVjb3Jkc1F1aWNrOiByZWxldmFudCByZWNvcmRzIChyPVwiICsgcmVsZXZhbnRSZWNvcmRzLmxlbmd0aCArIFwiKSBzZW50ZW5jZXMgXCIgKyBhU2VudGVuY2VzLnNlbnRlbmNlcy5sZW5ndGgpO1xuICBwZXJmbG9nKFwicmVsZXZhbnQgcmVjb3JkcyBucjpcIiArIHJlbGV2YW50UmVjb3Jkcy5sZW5ndGggKyBcIiBzZW50ZW5jZXMgXCIgKyBhU2VudGVuY2VzLnNlbnRlbmNlcy5sZW5ndGgpO1xuICBpZiAocHJvY2Vzcy5lbnYuQUJPVF9GQVNUICYmIGNhdGVnb3J5U2V0KSB7XG4gICAgLy8gd2UgYXJlIG9ubHkgaW50ZXJlc3RlZCBpbiBjYXRlZ29yaWVzIHByZXNlbnQgaW4gcmVjb3JkcyBmb3IgZG9tYWlucyB3aGljaCBjb250YWluIHRoZSBjYXRlZ29yeVxuICAgIC8vIHZhciBjYXRlZ29yeXNldCA9IE1vZGVsLmNhbGN1bGF0ZVJlbGV2YW50UmVjb3JkQ2F0ZWdvcmllcyh0aGVNb2RlbCxjYXRlZ29yeSk7XG4gICAgLy9rbm93aW5nIHRoZSB0YXJnZXRcbiAgICBwZXJmbG9nKFwiZ290IGNhdGVnb3J5c2V0IHdpdGggXCIgKyBPYmplY3Qua2V5cyhjYXRlZ29yeVNldCkubGVuZ3RoKTtcbiAgICB2YXIgZmwgPSAwO1xuICAgIHZhciBsZiA9IDA7XG4gICAgdmFyIGFTaW1wbGlmaWVkU2VudGVuY2VzID0gYVNlbnRlbmNlcy5zZW50ZW5jZXMubWFwKGZ1bmN0aW9uIChvU2VudGVuY2UpIHtcbiAgICAgIHZhciByV29yZHMgPSBvU2VudGVuY2UuZmlsdGVyKGZ1bmN0aW9uIChvV29yZCkge1xuICAgICAgICByZXR1cm4gISFjYXRlZ29yeVNldFtvV29yZC5jYXRlZ29yeV07XG4gICAgICB9KTtcbiAgICAgIGZsID0gZmwgKyBvU2VudGVuY2UubGVuZ3RoO1xuICAgICAgbGYgPSBsZiArIHJXb3Jkcy5sZW5ndGg7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBvU2VudGVuY2U6IG9TZW50ZW5jZSxcbiAgICAgICAgY250UmVsZXZhbnRXb3JkczogcldvcmRzLmxlbmd0aCxcbiAgICAgICAgcldvcmRzOiByV29yZHNcbiAgICAgIH07XG4gICAgfSk7XG4gICAgcGVyZmxvZyhcInBvc3Qgc2ltcGxpZnkgKHI9XCIgKyByZWxldmFudFJlY29yZHMubGVuZ3RoICsgXCIgcz1cIiArIGFTZW50ZW5jZXMuc2VudGVuY2VzLmxlbmd0aCArIFwiIGZsIFwiICsgZmwgKyBcIi0+XCIgKyBsZiArIFwiKVwiKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgZmwgPSAwO1xuICAgIHZhciBsZiA9IDA7XG4gICAgdmFyIGFTaW1wbGlmaWVkU2VudGVuY2VzID0gYVNlbnRlbmNlcy5zZW50ZW5jZXMubWFwKGZ1bmN0aW9uIChvU2VudGVuY2UpIHtcbiAgICAgIHZhciByV29yZHMgPSBvU2VudGVuY2UuZmlsdGVyKGZ1bmN0aW9uIChvV29yZCkge1xuICAgICAgICByZXR1cm4gIVdvcmQuV29yZC5pc0ZpbGxlcihvV29yZCk7XG4gICAgICB9KTtcbiAgICAgIGZsID0gZmwgKyBvU2VudGVuY2UubGVuZ3RoO1xuICAgICAgbGYgPSBsZiArIHJXb3Jkcy5sZW5ndGg7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBvU2VudGVuY2U6IG9TZW50ZW5jZSxcbiAgICAgICAgY250UmVsZXZhbnRXb3JkczogcldvcmRzLmxlbmd0aCxcbiAgICAgICAgcldvcmRzOiByV29yZHNcbiAgICAgIH07XG4gICAgfSk7XG4gICAgcGVyZmxvZyhcInBvc3Qgc2ltcGxpZnkgKHI9XCIgKyByZWxldmFudFJlY29yZHMubGVuZ3RoICsgXCIgcz1cIiArIGFTZW50ZW5jZXMuc2VudGVuY2VzLmxlbmd0aCArIFwiIGZsIFwiICsgZmwgKyBcIi0+XCIgKyBsZiArIFwiKVwiKTtcbiAgfVxuXG4gIHJlbGV2YW50UmVjb3Jkcy5mb3JFYWNoKGZ1bmN0aW9uIChyZWNvcmQpIHtcbiAgICBhU2ltcGxpZmllZFNlbnRlbmNlcy5mb3JFYWNoKGZ1bmN0aW9uIChhU2VudGVuY2UpIHtcbiAgICAgIC8vIGNvdW50IG1hdGNoZXMgaW4gcmVjb3JkIHdoaWNoIGFyZSAqbm90KiB0aGUgY2F0ZWdvcnlcbiAgICAgIHZhciBtaXNtYXRjaGVkID0gMDtcbiAgICAgIHZhciBtYXRjaGVkID0gMDtcbiAgICAgIHZhciBub3VzZSA9IDA7XG4gICAgICB2YXIgbWlzc2luZ2NhdCA9IDA7XG4gICAgICBhU2VudGVuY2UucldvcmRzLmZvckVhY2goZnVuY3Rpb24gKG9Xb3JkKSB7XG4gICAgICAgIGlmIChyZWNvcmRbb1dvcmQuY2F0ZWdvcnldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAob1dvcmQubWF0Y2hlZFN0cmluZyA9PT0gcmVjb3JkW29Xb3JkLmNhdGVnb3J5XSkge1xuICAgICAgICAgICAgKyttYXRjaGVkO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICArK21pc21hdGNoZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChvV29yZC5jYXRlZ29yeSAhPT0gXCJjYXRlZ29yeVwiKSB7XG4gICAgICAgICAgICBub3VzZSArPSAxO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIXJlY29yZFtvV29yZC5tYXRjaGVkU3RyaW5nXSkge1xuICAgICAgICAgICAgICBtaXNzaW5nY2F0ICs9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIC8vIGlmKG1hdGNoZWQgPiAwIHx8IG1pc21hdGNoZWQgPiAwICkge1xuICAgICAgLy8gICBjb25zb2xlLmxvZyhcIiBtXCIgKyBtYXRjaGVkICsgXCIgbWlzbWF0Y2hlZFwiICsgbWlzbWF0Y2hlZCk7XG4gICAgICAvLyB9XG4gICAgICAvL2NvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KGFTZW50ZW5jZS5vU2VudGVuY2UpKTtcbiAgICAgIGlmIChtYXRjaGVkID4gbWlzbWF0Y2hlZCkge1xuICAgICAgICByZXMucHVzaCh7XG4gICAgICAgICAgc2VudGVuY2U6IGFTZW50ZW5jZS5vU2VudGVuY2UsXG4gICAgICAgICAgcmVjb3JkOiByZWNvcmQsXG4gICAgICAgICAgY2F0ZWdvcnk6IGNhdGVnb3J5LFxuICAgICAgICAgIHJlc3VsdDogcmVjb3JkW2NhdGVnb3J5XSxcbiAgICAgICAgICBfcmFua2luZzogY2FsY1JhbmtpbmdTaW1wbGUobWF0Y2hlZCwgbWlzbWF0Y2hlZCwgKG5vdXNlICsgbWlzc2luZ2NhdCksIGFTZW50ZW5jZS5jbnRSZWxldmFudFdvcmRzKVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KVxuICB9KTtcbiAgcGVyZmxvZyhcInNvcnQgKGE9XCIgKyByZXMubGVuZ3RoICsgXCIpXCIpO1xuICByZXMuc29ydChjbXBCeVJlc3VsdFRoZW5SYW5raW5nKTtcbiAgcGVyZmxvZyhcImZpbHRlclJldGFpbiAuLi5cIik7XG4gIHZhciByZXN1bHQyID0gT2JqZWN0LmFzc2lnbih7IGFuc3dlcnMgOiByZXMgfSwgYVNlbnRlbmNlcyk7XG4gIHZhciByZXN1bHQgPSBmaWx0ZXJSZXRhaW5Ub3BSYW5rZWRSZXN1bHQocmVzdWx0Mik7XG5cbiAgZGVidWdsb2coXCJtYXRjaFJlY29yZHNRdWljayBkb25lOiAocj1cIiArIHJlbGV2YW50UmVjb3Jkcy5sZW5ndGggKyBcIiBzPVwiICsgYVNlbnRlbmNlcy5zZW50ZW5jZXMubGVuZ3RoICsgXCIgYT1cIiArIHJlc3VsdC5hbnN3ZXJzLmxlbmd0aCArIFwiKVwiKTtcbiAgcGVyZmxvZyhcIm1hdGNoUmVjb3Jkc1F1aWNrIGRvbmU6IChyPVwiICsgcmVsZXZhbnRSZWNvcmRzLmxlbmd0aCArIFwiIHM9XCIgKyBhU2VudGVuY2VzLnNlbnRlbmNlcy5sZW5ndGggKyBcIiBhPVwiICsgcmVzdWx0LmFuc3dlcnMubGVuZ3RoICsgXCIpXCIpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBleHRyYWN0UmVzdWx0KGNhdGVnb3JpZXM6IHN0cmluZ1tdLCByZWNvcmQ6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH0pOiBzdHJpbmdbXSB7XG4gIHJldHVybiBjYXRlZ29yaWVzLm1hcChmdW5jdGlvbiAoY2F0ZWdvcnkpIHsgcmV0dXJuIHJlY29yZFtjYXRlZ29yeV0gfHwgXCJuL2FcIjsgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtYXRjaFJlY29yZHNRdWlja011bHRpcGxlQ2F0ZWdvcmllcyhwU2VudGVuY2VzOiBJTWF0Y2guSVByb2Nlc3NlZFNlbnRlbmNlcywgY2F0ZWdvcmllczogc3RyaW5nW10sIHJlY29yZHM6IEFycmF5PElNYXRjaC5JUmVjb3JkPiwgY2F0ZWdvcnlTZXQ/OiB7IFtrZXk6IHN0cmluZ106IGJvb2xlYW4gfSlcbiAgOklNYXRjaC5JUHJvY2Vzc2VkV2hhdElzVHVwZWxBbnN3ZXJzIHtcbiAgLy8gaWYgKGRlYnVnbG9nLmVuYWJsZWQpIHtcbiAgLy8gIGRlYnVnbG9nKEpTT04uc3RyaW5naWZ5KHJlY29yZHMsIHVuZGVmaW5lZCwgMikpO1xuICAvLyB9XG4gIE9iamVjdC5mcmVlemUoY2F0ZWdvcnlTZXQpO1xuICB2YXIgY2F0ZWdvcnlGID0gY2F0ZWdvcmllc1swXTtcbiAgZGVidWdsb2coXCJtYXRjaFJlY29yZHNRdWlja011bHRpcGxlQ2F0ZWdvcmllcyAocj1cIiArIHJlY29yZHMubGVuZ3RoICsgXCIgcz1cIiArIHBTZW50ZW5jZXMuc2VudGVuY2VzLmxlbmd0aCArIFwiKVxcbiBjYXRlZ29yaWVzOlwiICsgY2F0ZWdvcmllcy5qb2luKFwiXFxuXCIpKTtcbiAgcGVyZmxvZyhcIm1hdGNoUmVjb3Jkc1F1aWNrTXVsdCAuLi4ocj1cIiArIHJlY29yZHMubGVuZ3RoICsgXCIgcz1cIiArIHBTZW50ZW5jZXMuc2VudGVuY2VzLmxlbmd0aCArIFwiKVwiKTtcbiAgdmFyIHJlbGV2YW50UmVjb3JkcyA9IHJlY29yZHMuZmlsdGVyKGZ1bmN0aW9uIChyZWNvcmQ6IElNYXRjaC5JUmVjb3JkKSB7XG4gICAgcmV0dXJuIChyZWNvcmRbY2F0ZWdvcnlGXSAhPT0gdW5kZWZpbmVkKSAmJiAocmVjb3JkW2NhdGVnb3J5Rl0gIT09IG51bGwpO1xuICB9KTtcbiAgdmFyIHJlcyA9IFtdIGFzIEFycmF5PElNYXRjaC5JV2hhdElzVHVwZWxBbnN3ZXI+O1xuICBkZWJ1Z2xvZyhcInJlbGV2YW50IHJlY29yZHMgd2l0aCBmaXJzdCAocj1cIiArIHJlbGV2YW50UmVjb3Jkcy5sZW5ndGggKyBcIilcIik7XG4gIHBlcmZsb2coXCJyZWxldmFudCByZWNvcmRzIHdpdGggZmlyc3QgbnI6XCIgKyByZWxldmFudFJlY29yZHMubGVuZ3RoICsgXCIgc2VudGVuY2VzIFwiICsgcFNlbnRlbmNlcy5zZW50ZW5jZXMubGVuZ3RoKTtcbiAgaWYgKHByb2Nlc3MuZW52LkFCT1RfRkFTVCAmJiBjYXRlZ29yeVNldCkge1xuICAgIC8vIHdlIGFyZSBvbmx5IGludGVyZXN0ZWQgaW4gY2F0ZWdvcmllcyBwcmVzZW50IGluIHJlY29yZHMgZm9yIGRvbWFpbnMgd2hpY2ggY29udGFpbiB0aGUgY2F0ZWdvcnlcbiAgICAvLyB2YXIgY2F0ZWdvcnlzZXQgPSBNb2RlbC5jYWxjdWxhdGVSZWxldmFudFJlY29yZENhdGVnb3JpZXModGhlTW9kZWwsY2F0ZWdvcnkpO1xuICAgIC8va25vd2luZyB0aGUgdGFyZ2V0XG4gICAgcGVyZmxvZyhcImdvdCBjYXRlZ29yeXNldCB3aXRoIFwiICsgT2JqZWN0LmtleXMoY2F0ZWdvcnlTZXQpLmxlbmd0aCk7XG4gICAgdmFyIGZsID0gMDtcbiAgICB2YXIgbGYgPSAwO1xuICAgIHZhciBhU2ltcGxpZmllZFNlbnRlbmNlcyA9IHBTZW50ZW5jZXMuc2VudGVuY2VzLm1hcChmdW5jdGlvbiAob1NlbnRlbmNlKSB7XG4gICAgICB2YXIgcldvcmRzID0gb1NlbnRlbmNlLmZpbHRlcihmdW5jdGlvbiAob1dvcmQpIHtcbiAgICAgICAgcmV0dXJuICEhY2F0ZWdvcnlTZXRbb1dvcmQuY2F0ZWdvcnldO1xuICAgICAgfSk7XG4gICAgICBmbCA9IGZsICsgb1NlbnRlbmNlLmxlbmd0aDtcbiAgICAgIGxmID0gbGYgKyByV29yZHMubGVuZ3RoO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgb1NlbnRlbmNlOiBvU2VudGVuY2UsXG4gICAgICAgIGNudFJlbGV2YW50V29yZHM6IHJXb3Jkcy5sZW5ndGgsXG4gICAgICAgIHJXb3JkczogcldvcmRzXG4gICAgICB9O1xuICAgIH0pO1xuICAgIHBlcmZsb2coXCJwb3N0IHNpbXBsaWZ5IChyPVwiICsgcmVsZXZhbnRSZWNvcmRzLmxlbmd0aCArIFwiIHM9XCIgKyBwU2VudGVuY2VzLnNlbnRlbmNlcy5sZW5ndGggKyBcIiBmbCBcIiArIGZsICsgXCItPlwiICsgbGYgKyBcIilcIik7XG4gIH0gZWxzZSB7XG4gICAgZGVidWdsb2coXCJub3QgYWJvdF9mYXN0ICFcIik7XG4gICAgdmFyIGZsID0gMDtcbiAgICB2YXIgbGYgPSAwO1xuICAgIHZhciBhU2ltcGxpZmllZFNlbnRlbmNlcyA9IHBTZW50ZW5jZXMuc2VudGVuY2VzLm1hcChmdW5jdGlvbiAob1NlbnRlbmNlKSB7XG4gICAgICB2YXIgcldvcmRzID0gb1NlbnRlbmNlLmZpbHRlcihmdW5jdGlvbiAob1dvcmQpIHtcbiAgICAgICAgcmV0dXJuICFXb3JkLldvcmQuaXNGaWxsZXIob1dvcmQpO1xuICAgICAgfSk7XG4gICAgICBmbCA9IGZsICsgb1NlbnRlbmNlLmxlbmd0aDtcbiAgICAgIGxmID0gbGYgKyByV29yZHMubGVuZ3RoO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgb1NlbnRlbmNlOiBvU2VudGVuY2UsXG4gICAgICAgIGNudFJlbGV2YW50V29yZHM6IHJXb3Jkcy5sZW5ndGgsXG4gICAgICAgIHJXb3JkczogcldvcmRzXG4gICAgICB9O1xuICAgIH0pO1xuICAgIGRlYnVnbG9nKFwicG9zdCBzaW1wbGlmeSAocj1cIiArIHJlbGV2YW50UmVjb3Jkcy5sZW5ndGggKyBcIiBzPVwiICsgcFNlbnRlbmNlcy5zZW50ZW5jZXMubGVuZ3RoICsgXCIgZmwgXCIgKyBmbCArIFwiLT5cIiArIGxmICsgXCIpXCIpO1xuICAgIHBlcmZsb2coXCJwb3N0IHNpbXBsaWZ5IChyPVwiICsgcmVsZXZhbnRSZWNvcmRzLmxlbmd0aCArIFwiIHM9XCIgKyBwU2VudGVuY2VzLnNlbnRlbmNlcy5sZW5ndGggKyBcIiBmbCBcIiArIGZsICsgXCItPlwiICsgbGYgKyBcIilcIik7XG4gIH1cblxuICByZWxldmFudFJlY29yZHMuZm9yRWFjaChmdW5jdGlvbiAocmVjb3JkKSB7XG4gICAgYVNpbXBsaWZpZWRTZW50ZW5jZXMuZm9yRWFjaChmdW5jdGlvbiAoYVNlbnRlbmNlKSB7XG4gICAgICAvLyBjb3VudCBtYXRjaGVzIGluIHJlY29yZCB3aGljaCBhcmUgKm5vdCogdGhlIGNhdGVnb3J5XG4gICAgICB2YXIgbWlzbWF0Y2hlZCA9IDA7XG4gICAgICB2YXIgbWF0Y2hlZCA9IDA7XG4gICAgICB2YXIgbm91c2UgPSAwO1xuICAgICAgdmFyIG1pc3NpbmdjYXQgPSAwO1xuICAgICAgYVNlbnRlbmNlLnJXb3Jkcy5mb3JFYWNoKGZ1bmN0aW9uIChvV29yZCkge1xuICAgICAgICBpZiAocmVjb3JkW29Xb3JkLmNhdGVnb3J5XSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKG9Xb3JkLm1hdGNoZWRTdHJpbmcgPT09IHJlY29yZFtvV29yZC5jYXRlZ29yeV0pIHtcbiAgICAgICAgICAgICsrbWF0Y2hlZDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgKyttaXNtYXRjaGVkO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAob1dvcmQuY2F0ZWdvcnkgIT09IFwiY2F0ZWdvcnlcIikge1xuICAgICAgICAgICAgbm91c2UgKz0gMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFyZWNvcmRbb1dvcmQubWF0Y2hlZFN0cmluZ10pIHtcbiAgICAgICAgICAgICAgbWlzc2luZ2NhdCArPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICAvLyBpZihtYXRjaGVkID4gMCB8fCBtaXNtYXRjaGVkID4gMCApIHtcbiAgICAgIC8vICAgY29uc29sZS5sb2coXCIgbVwiICsgbWF0Y2hlZCArIFwiIG1pc21hdGNoZWRcIiArIG1pc21hdGNoZWQpO1xuICAgICAgLy8gfVxuICAgICAgLy9jb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShhU2VudGVuY2Uub1NlbnRlbmNlKSk7XG4gICAgICBpZiAobWF0Y2hlZCA+IG1pc21hdGNoZWQpIHtcbiAgICAgICAgdmFyIHJlYyA9IHtcbiAgICAgICAgICBzZW50ZW5jZTogYVNlbnRlbmNlLm9TZW50ZW5jZSxcbiAgICAgICAgICByZWNvcmQ6IHJlY29yZCxcbiAgICAgICAgICBjYXRlZ29yaWVzOiBjYXRlZ29yaWVzLFxuICAgICAgICAgIHJlc3VsdDogZXh0cmFjdFJlc3VsdChjYXRlZ29yaWVzLCByZWNvcmQpLFxuICAgICAgICAgIF9yYW5raW5nOiBjYWxjUmFua2luZ1NpbXBsZShtYXRjaGVkLCBtaXNtYXRjaGVkLCAobm91c2UgKyBtaXNzaW5nY2F0KSwgYVNlbnRlbmNlLmNudFJlbGV2YW50V29yZHMpXG4gICAgICAgIH1cbiAgICAgICAgLyogICBpZihyZWNvcmRbXCJhcHBJZFwiXSA9PT1cIkYxNTY2XCIpIHtcbiAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImhlcmUgRjE1NjZcIiArIEpTT04uc3RyaW5naWZ5KHJlYykpO1xuICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiaGVyZSBtYXRjaGVkXCIgKyBtYXRjaGVkICsgXCIgbWlzbWF0Y2hlZFwiICsgbWlzbWF0Y2hlZCArIFwiIG5vdXNlIFwiICsgKG5vdXNlICsgbWlzc2luZ2NhdCkpO1xuICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiaGVyZSBjbnRSZWxldmFudCA6XCIgKyBhU2VudGVuY2UuY250UmVsZXZhbnRXb3Jkcyk7XG4gICAgICAgICAgIH1cbiAgICAgICAgICAgaWYocmVjb3JkW1wiYXBwSWRcIl0gPT09XCJGMDczMUFcIikge1xuICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiaGVyZSBGMDczMUFcIiArIEpTT04uc3RyaW5naWZ5KHJlYykpO1xuICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiaGVyZSBtYXRjaGVkXCIgKyBtYXRjaGVkICsgXCIgbWlzbWF0Y2hlZFwiICsgbWlzbWF0Y2hlZCArIFwiIG5vdXNlIFwiICsgKG5vdXNlICsgbWlzc2luZ2NhdCkpO1xuICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiaGVyZSBjbnRSZWxldmFudCA6XCIgKyBhU2VudGVuY2UuY250UmVsZXZhbnRXb3Jkcyk7XG4gICAgICAgICAgIH1cbiAgICAgICAgICAgKi9cbiAgICAgICAgcmVzLnB1c2gocmVjKTtcbiAgICAgIH1cbiAgICB9KVxuICB9KTtcbiAgcGVyZmxvZyhcInNvcnQgKGE9XCIgKyByZXMubGVuZ3RoICsgXCIpXCIpO1xuICByZXMuc29ydChjbXBCeVJlc3VsdFRoZW5SYW5raW5nVHVwZWwpO1xuICBwZXJmbG9nKFwiZmlsdGVyUmV0YWluIC4uLlwiKTtcbiAgdmFyIHJlc3VsdDEgPSBPYmplY3QuYXNzaWduKHsgdHVwZWxhbnN3ZXJzIDogcmVzfSwgIHBTZW50ZW5jZXMpXG4gIHZhciByZXN1bHQyID0gZmlsdGVyUmV0YWluVG9wUmFua2VkUmVzdWx0VHVwZWwocmVzdWx0MSk7XG4gIHBlcmZsb2coXCJtYXRjaFJlY29yZHNRdWljayBkb25lOiAocj1cIiArIHJlbGV2YW50UmVjb3Jkcy5sZW5ndGggKyBcIiBzPVwiICsgcFNlbnRlbmNlcy5zZW50ZW5jZXMubGVuZ3RoICsgXCIgYT1cIiArIHJlcy5sZW5ndGggKyBcIilcIik7XG4gIHJldHVybiByZXN1bHQyO1xufVxuXG5cbmZ1bmN0aW9uIGNsYXNzaWZ5V29yZFdpdGhUYXJnZXRDYXRlZ29yeSh3b3JkOiBzdHJpbmcsIHRhcmdldGNhdGVnb3J5OiBzdHJpbmcsIHJ1bGVzOiBJTWF0Y2guU3BsaXRSdWxlcyxcbiAgd2hvbGVzZW50ZW5jZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgLy9jb25zb2xlLmxvZyhcImNsYXNzaWZ5IFwiICsgd29yZCArIFwiIFwiICArIHRhcmdldGNhdGVnb3J5KTtcbiAgdmFyIGNhdHMgPSBJbnB1dEZpbHRlci5jYXRlZ29yaXplQVdvcmQod29yZCwgcnVsZXMsIHdob2xlc2VudGVuY2UsIHt9KTtcbiAgLy8gVE9ETyBxdWFsaWZ5XG4gIGNhdHMgPSBjYXRzLmZpbHRlcihmdW5jdGlvbiAoY2F0KSB7XG4gICAgcmV0dXJuIGNhdC5jYXRlZ29yeSA9PT0gdGFyZ2V0Y2F0ZWdvcnk7XG4gIH0pXG4gIGRlYnVnbG9nKEpTT04uc3RyaW5naWZ5KGNhdHMpKTtcbiAgaWYgKGNhdHMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGNhdHNbMF0ubWF0Y2hlZFN0cmluZztcbiAgfVxufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBhbmFseXplQ2F0ZWdvcnkoY2F0ZWdvcnl3b3JkOiBzdHJpbmcsIHJ1bGVzOiBJTWF0Y2guU3BsaXRSdWxlcywgd2hvbGVzZW50ZW5jZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIGNsYXNzaWZ5V29yZFdpdGhUYXJnZXRDYXRlZ29yeShjYXRlZ29yeXdvcmQsICdjYXRlZ29yeScsIHJ1bGVzLCB3aG9sZXNlbnRlbmNlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNwbGl0QXRDb21tYUFuZChzdHI6IHN0cmluZyk6IHN0cmluZ1tdIHtcbiAgdmFyIHIgPSBzdHIuc3BsaXQoLyhcXGJhbmRcXGIpfFssXS8pO1xuICByID0gci5maWx0ZXIoZnVuY3Rpb24gKG8sIGluZGV4KSB7XG4gICAgaWYgKGluZGV4ICUgMiA+IDApIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH0pO1xuICB2YXIgcnRyaW1tZWQgPSByLm1hcChmdW5jdGlvbiAobykge1xuICAgIHJldHVybiBuZXcgU3RyaW5nKG8pLnRyaW0oKTtcbiAgfSk7XG4gIHJldHVybiBydHJpbW1lZDtcbn1cbi8qKlxuICogQSBzaW1wbGUgaW1wbGVtZW50YXRpb24sIHNwbGl0dGluZyBhdCBhbmQgYW5kICxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFuYWx5emVDYXRlZ29yeU11bHRPbmx5QW5kQ29tbWEoY2F0ZWdvcnlsaXN0OiBzdHJpbmcsIHJ1bGVzOiBJTWF0Y2guU3BsaXRSdWxlcywgd2hvbGVzZW50ZW5jZTogc3RyaW5nKTogc3RyaW5nW10ge1xuICB2YXIgcnRyaW1tZWQgPSBzcGxpdEF0Q29tbWFBbmQoY2F0ZWdvcnlsaXN0KTtcbiAgdmFyIHJjYXQgPSBydHJpbW1lZC5tYXAoZnVuY3Rpb24gKG8pIHtcbiAgICByZXR1cm4gYW5hbHl6ZUNhdGVnb3J5KG8sIHJ1bGVzLCB3aG9sZXNlbnRlbmNlKTtcbiAgfSk7XG4gIGlmIChyY2F0LmluZGV4T2YodW5kZWZpbmVkKSA+PSAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdcIicgKyBydHJpbW1lZFtyY2F0LmluZGV4T2YodW5kZWZpbmVkKV0gKyAnXCIgaXMgbm90IGEgY2F0ZWdvcnkhJyk7XG4gIH1cbiAgcmV0dXJuIHJjYXQ7XG59XG5cblxuXG5leHBvcnQgZnVuY3Rpb24gZmlsdGVyQWNjZXB0aW5nT25seShyZXM6IElNYXRjaC5JQ2F0ZWdvcml6ZWRTdHJpbmdbXVtdLCBjYXRlZ29yaWVzOiBzdHJpbmdbXSk6XG4gIElNYXRjaC5JQ2F0ZWdvcml6ZWRTdHJpbmdbXVtdIHtcbiAgcmV0dXJuIHJlcy5maWx0ZXIoZnVuY3Rpb24gKGFTZW50ZW5jZSwgaUluZGV4KSB7XG4gICAgcmV0dXJuIGFTZW50ZW5jZS5ldmVyeShmdW5jdGlvbiAob1dvcmQpIHtcbiAgICAgIHJldHVybiBjYXRlZ29yaWVzLmluZGV4T2Yob1dvcmQuY2F0ZWdvcnkpID49IDA7XG4gICAgfSk7XG4gIH0pXG59XG5cblxuaW1wb3J0ICogYXMgRXJiYXNlIGZyb20gJy4vZXJiYXNlJztcblxudmFyIHNXb3JkcyA9IHt9O1xuXG5leHBvcnQgZnVuY3Rpb24gcHJvY2Vzc1N0cmluZyhxdWVyeTogc3RyaW5nLCBydWxlczogSU1hdGNoLlNwbGl0UnVsZXMpOiBJTWF0Y2guSVByb2Nlc3NlZFNlbnRlbmNlcyB7XG5cbiAgaWYgKCFwcm9jZXNzLmVudi5BQk9UX09MRE1BVENIKSB7XG4gICAgcmV0dXJuIEVyYmFzZS5wcm9jZXNzU3RyaW5nKHF1ZXJ5LCBydWxlcyk7XG4gIH1cblxuICB2YXIgbWF0Y2hlZCA9IElucHV0RmlsdGVyLmFuYWx5emVTdHJpbmcocXVlcnksIHJ1bGVzLCBzV29yZHMpO1xuICBpZiAoZGVidWdsb2cuZW5hYmxlZCkge1xuICAgIGRlYnVnbG9nKFwiQWZ0ZXIgbWF0Y2hlZCBcIiArIEpTT04uc3RyaW5naWZ5KG1hdGNoZWQpKTtcbiAgfVxuICB2YXIgYVNlbnRlbmNlcyA9IElucHV0RmlsdGVyLmV4cGFuZE1hdGNoQXJyKG1hdGNoZWQpO1xuICBpZiAoZGVidWdsb2cuZW5hYmxlZCkge1xuICAgIGRlYnVnbG9nKFwiYWZ0ZXIgZXhwYW5kXCIgKyBhU2VudGVuY2VzLm1hcChmdW5jdGlvbiAob1NlbnRlbmNlKSB7XG4gICAgICByZXR1cm4gU2VudGVuY2UucmFua2luZ1Byb2R1Y3Qob1NlbnRlbmNlKSArIFwiOlwiICsgSlNPTi5zdHJpbmdpZnkob1NlbnRlbmNlKTtcbiAgICB9KS5qb2luKFwiXFxuXCIpKTtcbiAgfVxuICB2YXIgYVNlbnRlbmNlc1JlaW5mb3JjZWQgPSBJbnB1dEZpbHRlci5yZWluRm9yY2UoYVNlbnRlbmNlcyk7XG4gIGlmIChkZWJ1Z2xvZy5lbmFibGVkKSB7XG4gICAgZGVidWdsb2coXCJhZnRlciByZWluZm9yY2VcIiArIGFTZW50ZW5jZXNSZWluZm9yY2VkLm1hcChmdW5jdGlvbiAob1NlbnRlbmNlKSB7XG4gICAgICByZXR1cm4gU2VudGVuY2UucmFua2luZ1Byb2R1Y3Qob1NlbnRlbmNlKSArIFwiOlwiICsgSlNPTi5zdHJpbmdpZnkob1NlbnRlbmNlKTtcbiAgICB9KS5qb2luKFwiXFxuXCIpKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGVycm9yczogW10sXG4gICAgc2VudGVuY2VzOiBhU2VudGVuY2VzUmVpbmZvcmNlZFxuICB9IGFzIElNYXRjaC5JUHJvY2Vzc2VkU2VudGVuY2VzO1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBhbmFseXplQ29udGV4dFN0cmluZyhjb250ZXh0UXVlcnlTdHJpbmc6IHN0cmluZywgcnVsZXM6IElNYXRjaC5TcGxpdFJ1bGVzKTpcbiAgSU1hdGNoLklQcm9jZXNzZWRTZW50ZW5jZXMge1xuXG4gIHZhciBhU2VudGVuY2VzUmVpbmZvcmNlZCA9IHByb2Nlc3NTdHJpbmcoY29udGV4dFF1ZXJ5U3RyaW5nLCBydWxlcylcbiAgLy8gd2UgbGltaXQgYW5hbHlzaXMgdG8gbiBzZW50ZW5jZXNcbiAgYVNlbnRlbmNlc1JlaW5mb3JjZWQuc2VudGVuY2VzID0gYVNlbnRlbmNlc1JlaW5mb3JjZWQuc2VudGVuY2VzLnNsaWNlKDAsIEFsZ29sLkN1dG9mZl9TZW50ZW5jZXMpO1xuICBpZiAoZGVidWdsb2cuZW5hYmxlZCkge1xuICAgIGRlYnVnbG9nKFwiYWZ0ZXIgcmVpbmZvcmNlIGFuZCBjdXRvZmZcIiArIGFTZW50ZW5jZXNSZWluZm9yY2VkLnNlbnRlbmNlcy5sZW5ndGggKyBcIlxcblwiICsgYVNlbnRlbmNlc1JlaW5mb3JjZWQuc2VudGVuY2VzLm1hcChmdW5jdGlvbiAob1NlbnRlbmNlKSB7XG4gICAgICByZXR1cm4gU2VudGVuY2UucmFua2luZ1Byb2R1Y3Qob1NlbnRlbmNlKSArIFwiOlwiICsgSlNPTi5zdHJpbmdpZnkob1NlbnRlbmNlKTtcbiAgICB9KS5qb2luKFwiXFxuXCIpKTtcbiAgfVxuICByZXR1cm4gYVNlbnRlbmNlc1JlaW5mb3JjZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjbXBCeU5yQ2F0ZWdvcmllc0FuZFNhbWVEb21haW4oYTogSU1hdGNoLklTZW50ZW5jZSwgYjogSU1hdGNoLklTZW50ZW5jZSk6IG51bWJlciB7XG4gIC8vY29uc29sZS5sb2coXCJjb21wYXJlIGFcIiArIGEgKyBcIiBjbnRiIFwiICsgYik7XG4gIHZhciBjbnRhID0gU2VudGVuY2UuZ2V0RGlzdGluY3RDYXRlZ29yaWVzSW5TZW50ZW5jZShhKS5sZW5ndGg7XG4gIHZhciBjbnRiID0gU2VudGVuY2UuZ2V0RGlzdGluY3RDYXRlZ29yaWVzSW5TZW50ZW5jZShiKS5sZW5ndGg7XG4gIC8qXG4gICAgdmFyIGNudGEgPSBhLnJlZHVjZShmdW5jdGlvbihwcmV2LCBvV29yZCkge1xuICAgICAgcmV0dXJuIHByZXYgKyAoKG9Xb3JkLmNhdGVnb3J5ID09PSBcImNhdGVnb3J5XCIpPyAxIDogMCk7XG4gICAgfSwwKTtcbiAgICB2YXIgY250YiA9IGIucmVkdWNlKGZ1bmN0aW9uKHByZXYsIG9Xb3JkKSB7XG4gICAgICByZXR1cm4gcHJldiArICgob1dvcmQuY2F0ZWdvcnkgPT09IFwiY2F0ZWdvcnlcIik/IDEgOiAwKTtcbiAgICB9LDApO1xuICAgLy8gY29uc29sZS5sb2coXCJjbnQgYVwiICsgY250YSArIFwiIGNudGIgXCIgKyBjbnRiKTtcbiAgICovXG4gIHJldHVybiBjbnRiIC0gY250YTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFuYWx5emVDYXRlZ29yeU11bHQoY2F0ZWdvcnlsaXN0OiBzdHJpbmcsIHJ1bGVzOiBJTWF0Y2guU3BsaXRSdWxlcywgd2hvbGVzZW50ZW5jZTogc3RyaW5nLCBnV29yZHM6XG4gIHsgW2tleTogc3RyaW5nXTogSU1hdGNoLklDYXRlZ29yaXplZFN0cmluZ1tdIH0pOiBzdHJpbmdbXSB7XG4gIHZhciByZXMgPSBhbmFseXplQ29udGV4dFN0cmluZyhjYXRlZ29yeWxpc3QsIHJ1bGVzKTtcbiAgLy8gIGRlYnVnbG9nKFwicmVzdWx0aW5nIGNhdGVnb3J5IHNlbnRlbmNlc1wiLCBKU09OLnN0cmluZ2lmeShyZXMpKTtcbiAgdmFyIHJlczIgPSBmaWx0ZXJBY2NlcHRpbmdPbmx5KHJlcy5zZW50ZW5jZXMsIFtcImNhdGVnb3J5XCIsIFwiZmlsbGVyXCJdKTtcbiAgcmVzMi5zb3J0KFNlbnRlbmNlLmNtcFJhbmtpbmdQcm9kdWN0KTtcbiAgZGVidWdsb2coXCJyZXN1bHRpbmcgY2F0ZWdvcnkgc2VudGVuY2VzOiBcXG5cIiwgZGVidWdsb2cuZW5hYmxlZCA/IChTZW50ZW5jZS5kdW1wTmljZUFycihyZXMyLnNsaWNlKDAsIDMpLCBTZW50ZW5jZS5yYW5raW5nUHJvZHVjdCkpIDogJy0nKTtcbiAgLy8gVE9ETzogICByZXMyID0gZmlsdGVyQWNjZXB0aW5nT25seVNhbWVEb21haW4ocmVzMik7XG4gIC8vZGVidWdsb2coXCJyZXN1bHRpbmcgY2F0ZWdvcnkgc2VudGVuY2VzXCIsIEpTT04uc3RyaW5naWZ5KHJlczIsIHVuZGVmaW5lZCwgMikpO1xuICAvLyBleHBlY3Qgb25seSBjYXRlZ29yaWVzXG4gIC8vIHdlIGNvdWxkIHJhbmsgbm93IGJ5IGNvbW1vbiBkb21haW5zICwgYnV0IGZvciBub3cgd2Ugb25seSB0YWtlIHRoZSBmaXJzdCBvbmVcbiAgaWYgKCFyZXMuc2VudGVuY2VzLmxlbmd0aCkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbiAgLy9yZXMuc29ydChjbXBCeU5yQ2F0ZWdvcmllc0FuZFNhbWVEb21haW4pO1xuICB2YXIgcmVzY2F0ID0gU2VudGVuY2UuZ2V0RGlzdGluY3RDYXRlZ29yaWVzSW5TZW50ZW5jZShyZXMyWzBdKTtcbiAgcmV0dXJuIHJlc2NhdDtcbiAgLy8gXCJcIiByZXR1cm4gcmVzWzBdLmZpbHRlcigpXG4gIC8vIHJldHVybiBjbGFzc2lmeVdvcmRXaXRoVGFyZ2V0Q2F0ZWdvcnkoY2F0ZWdvcnlsaXN0LCAnY2F0ZWdvcnknLCBydWxlcywgd2hvbGVzZW50ZW5jZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhbmFseXplT3BlcmF0b3Iob3B3b3JkOiBzdHJpbmcsIHJ1bGVzOiBJTWF0Y2guU3BsaXRSdWxlcywgd2hvbGVzZW50ZW5jZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIGNsYXNzaWZ5V29yZFdpdGhUYXJnZXRDYXRlZ29yeShvcHdvcmQsICdvcGVyYXRvcicsIHJ1bGVzLCB3aG9sZXNlbnRlbmNlKTtcbn1cblxuXG5pbXBvcnQgKiBhcyBFckVycm9yIGZyb20gJy4vZXJlcnJvcic7XG5cbi8vIGNvbnN0IHJlc3VsdCA9IFdoYXRJcy5yZXNvbHZlQ2F0ZWdvcnkoY2F0LCBhMS5lbnRpdHksXG4vLyAgIHRoZU1vZGVsLm1SdWxlcywgdGhlTW9kZWwudG9vbHMsIHRoZU1vZGVsLnJlY29yZHMpO1xuXG5leHBvcnQgZnVuY3Rpb24gcmVzb2x2ZUNhdGVnb3J5KGNhdGVnb3J5OiBzdHJpbmcsIGNvbnRleHRRdWVyeVN0cmluZzogc3RyaW5nLFxuICBydWxlczogSU1hdGNoLlNwbGl0UnVsZXMsIHJlY29yZHM6IEFycmF5PElNYXRjaC5JUmVjb3JkPik6IElNYXRjaC5JUHJvY2Vzc2VkV2hhdElzQW5zd2VycyB7XG4gIGlmIChjb250ZXh0UXVlcnlTdHJpbmcubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIHsgZXJyb3JzOiBbIEVyRXJyb3IubWFrZUVycm9yX0VNUFRZX0lOUFVUKCldICwgdG9rZW5zIDogW10sIGFuc3dlcnMgOiBbXSB9O1xuICB9IGVsc2Uge1xuICAgIC8qXG4gICAgICAgIHZhciBtYXRjaGVkID0gSW5wdXRGaWx0ZXIuYW5hbHl6ZVN0cmluZyhjb250ZXh0UXVlcnlTdHJpbmcsIHJ1bGVzKTtcbiAgICAgICAgZGVidWdsb2coZGVidWdsb2cuZW5hYmxlZCA/IChcImFmdGVyIG1hdGNoZWQgXCIgKyBKU09OLnN0cmluZ2lmeShtYXRjaGVkKSk6ICctJyk7XG4gICAgICAgIHZhciBhU2VudGVuY2VzID0gSW5wdXRGaWx0ZXIuZXhwYW5kTWF0Y2hBcnIobWF0Y2hlZCk7XG4gICAgICAgIGlmKGRlYnVnbG9nLmVuYWJsZWQpIHtcbiAgICAgICAgICBkZWJ1Z2xvZyhcImFmdGVyIGV4cGFuZFwiICsgYVNlbnRlbmNlcy5tYXAoZnVuY3Rpb24gKG9TZW50ZW5jZSkge1xuICAgICAgICAgICAgcmV0dXJuIFNlbnRlbmNlLnJhbmtpbmdQcm9kdWN0KG9TZW50ZW5jZSkgKyBcIjpcIiArIEpTT04uc3RyaW5naWZ5KG9TZW50ZW5jZSk7XG4gICAgICAgICAgfSkuam9pbihcIlxcblwiKSk7XG4gICAgICB9ICovXG4gICAgdmFyIGFTZW50ZW5jZXNSZWluZm9yY2VkID0gcHJvY2Vzc1N0cmluZyhjb250ZXh0UXVlcnlTdHJpbmcsIHJ1bGVzKTtcbiAgICAvL2FTZW50ZW5jZXMubWFwKGZ1bmN0aW9uKG9TZW50ZW5jZSkgeyByZXR1cm4gSW5wdXRGaWx0ZXIucmVpbkZvcmNlKG9TZW50ZW5jZSk7IH0pO1xuICAgIGRlYnVnbG9nKGRlYnVnbG9nLmVuYWJsZWQgPyAoXCJhZnRlciByZWluZm9yY2VcIiArIGFTZW50ZW5jZXNSZWluZm9yY2VkLnNlbnRlbmNlcy5tYXAoZnVuY3Rpb24gKG9TZW50ZW5jZSkge1xuICAgICAgcmV0dXJuIFNlbnRlbmNlLnJhbmtpbmdQcm9kdWN0KG9TZW50ZW5jZSkgKyBcIjpcIiArIEpTT04uc3RyaW5naWZ5KG9TZW50ZW5jZSk7XG4gICAgfSkuam9pbihcIlxcblwiKSkgOiAnLScpO1xuICAgIHZhciBtYXRjaGVkQW5zd2VycyA9IG1hdGNoUmVjb3JkcyhhU2VudGVuY2VzUmVpbmZvcmNlZCwgY2F0ZWdvcnksIHJlY29yZHMpOyAvL2FUb29sOiBBcnJheTxJTWF0Y2guSVRvb2w+KTogYW55IC8qIG9iamVjdHN0cmVhbSovIHtcbiAgICBkZWJ1Z2xvZyhkZWJ1Z2xvZy5lbmFibGVkID8gKFwiIG1hdGNoZWRBbnN3ZXJzXCIgKyBKU09OLnN0cmluZ2lmeShtYXRjaGVkQW5zd2VycywgdW5kZWZpbmVkLCAyKSkgOiAnLScpO1xuICAgIHJldHVybiBtYXRjaGVkQW5zd2VycztcbiAgfVxufVxuXG5pbXBvcnQgKiBhcyBNb2RlbCBmcm9tICcuLi9tb2RlbC9tb2RlbCc7XG5cbmV4cG9ydCBmdW5jdGlvbiByZXNvbHZlQ2F0ZWdvcmllcyhjYXRlZ29yaWVzOiBzdHJpbmdbXSwgY29udGV4dFF1ZXJ5U3RyaW5nOiBzdHJpbmcsXG4gIHRoZU1vZGVsOiBJTWF0Y2guSU1vZGVscyk6IElNYXRjaC5JUHJvY2Vzc2VkV2hhdElzVHVwZWxBbnN3ZXJzIHtcbiAgdmFyIHJlY29yZHMgPSB0aGVNb2RlbC5yZWNvcmRzO1xuICB2YXIgcnVsZXMgPSB0aGVNb2RlbC5ydWxlcztcbiAgaWYgKGNvbnRleHRRdWVyeVN0cmluZy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4ge1xuICAgICAgZXJyb3JzIDogWyBFckVycm9yLm1ha2VFcnJvcl9FTVBUWV9JTlBVVCgpXSxcbiAgICAgIHR1cGVsYW5zd2VycyA6IFtdLFxuICAgICAgdG9rZW5zIDpbXVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvKlxuICAgIHZhciBtYXRjaGVkID0gSW5wdXRGaWx0ZXIuYW5hbHl6ZVN0cmluZyhjb250ZXh0UXVlcnlTdHJpbmcsIHJ1bGVzKTtcbiAgICBkZWJ1Z2xvZyhkZWJ1Z2xvZy5lbmFibGVkPyAoXCJhZnRlciBtYXRjaGVkIFwiICsgSlNPTi5zdHJpbmdpZnkobWF0Y2hlZCkpOiAnLScpO1xuICAgIHZhciBhU2VudGVuY2VzID0gSW5wdXRGaWx0ZXIuZXhwYW5kTWF0Y2hBcnIobWF0Y2hlZCk7XG4gICAgaWYoZGVidWdsb2cuZW5hYmxlZCkge1xuICAgICAgZGVidWdsb2coZGVidWdsb2cuZW5hYmxlZCA/IChcImFmdGVyIGV4cGFuZFwiICsgYVNlbnRlbmNlcy5tYXAoZnVuY3Rpb24gKG9TZW50ZW5jZSkge1xuICAgICAgICByZXR1cm4gU2VudGVuY2UucmFua2luZ1Byb2R1Y3Qob1NlbnRlbmNlKSArIFwiOlwiICsgSlNPTi5zdHJpbmdpZnkob1NlbnRlbmNlKTtcbiAgICAgIH0pLmpvaW4oXCJcXG5cIikpOiAnLScpO1xuICB9ICovXG4gICAgdmFyIGFTZW50ZW5jZXNSZWluZm9yY2VkID0gcHJvY2Vzc1N0cmluZyhjb250ZXh0UXVlcnlTdHJpbmcsIHRoZU1vZGVsLnJ1bGVzKTtcbiAgICAvL2FTZW50ZW5jZXMubWFwKGZ1bmN0aW9uKG9TZW50ZW5jZSkgeyByZXR1cm4gSW5wdXRGaWx0ZXIucmVpbkZvcmNlKG9TZW50ZW5jZSk7IH0pO1xuICAgIGRlYnVnbG9nKGRlYnVnbG9nLmVuYWJsZWQgPyAoXCJhZnRlciByZWluZm9yY2VcIiArIGFTZW50ZW5jZXNSZWluZm9yY2VkLnNlbnRlbmNlcy5tYXAoZnVuY3Rpb24gKG9TZW50ZW5jZSkge1xuICAgICAgcmV0dXJuIFNlbnRlbmNlLnJhbmtpbmdQcm9kdWN0KG9TZW50ZW5jZSkgKyBcIjpcIiArIEpTT04uc3RyaW5naWZ5KG9TZW50ZW5jZSk7XG4gICAgfSkuam9pbihcIlxcblwiKSkgOiAnLScpO1xuICAgIC8vdmFyIG1hdGNoZWRBbnN3ZXJzID0gbWF0Y2hSZWNvcmRzUXVpY2soYVNlbnRlbmNlcywgY2F0ZWdvcnksIHJlY29yZHMpOyAvL2FUb29sOiBBcnJheTxJTWF0Y2guSVRvb2w+KTogYW55IC8qIG9iamVjdHN0cmVhbSovIHtcbiAgICB2YXIgY2F0ZWdvcnlTZXQgPSB7fTtcbiAgICBjYXRlZ29yaWVzLmZvckVhY2goZnVuY3Rpb24gKGNhdGVnb3J5KSB7XG4gICAgICBjYXRlZ29yeVNldFtjYXRlZ29yeV0gPSB0cnVlO1xuICAgICAgdmFyIGNhdGVnb3J5U2V0TG9jYWwgPSBNb2RlbC5nZXRBbGxSZWNvcmRDYXRlZ29yaWVzRm9yVGFyZ2V0Q2F0ZWdvcnkodGhlTW9kZWwsIGNhdGVnb3J5LCB0cnVlKTtcbiAgICAgIE9iamVjdC5hc3NpZ24oY2F0ZWdvcnlTZXQsIGNhdGVnb3J5U2V0TG9jYWwpO1xuICAgIH0pO1xuXG4gICAgdmFyIG1hdGNoZWRBbnN3ZXJzID0gbWF0Y2hSZWNvcmRzUXVpY2tNdWx0aXBsZUNhdGVnb3JpZXMoYVNlbnRlbmNlc1JlaW5mb3JjZWQsIGNhdGVnb3JpZXMsIHJlY29yZHMsIGNhdGVnb3J5U2V0KTsgLy9hVG9vbDogQXJyYXk8SU1hdGNoLklUb29sPik6IGFueSAvKiBvYmplY3RzdHJlYW0qLyB7XG4gICAgaWYgKGRlYnVnbG9nLmVuYWJsZWQpIHtcbiAgICAgIGRlYnVnbG9nKFwiIG1hdGNoZWQgQW5zd2Vyc1wiICsgSlNPTi5zdHJpbmdpZnkobWF0Y2hlZEFuc3dlcnMsIHVuZGVmaW5lZCwgMikpO1xuICAgIH1cbiAgICBwZXJmbG9nKFwiZmlsdGVyaW5nIHRvcFJhbmtlZCAoYT1cIiArIG1hdGNoZWRBbnN3ZXJzLnR1cGVsYW5zd2Vycy5sZW5ndGggKyBcIikuLi5cIik7XG4gICAgdmFyIG1hdGNoZWRGaWx0ZXJlZCA9IE9iamVjdC5hc3NpZ24oe30sIG1hdGNoZWRBbnN3ZXJzKTtcbiAgICBtYXRjaGVkRmlsdGVyZWQudHVwZWxhbnN3ZXJzID0gZmlsdGVyT25seVRvcFJhbmtlZFR1cGVsKG1hdGNoZWRBbnN3ZXJzLnR1cGVsYW5zd2Vycyk7XG5cbiAgICBpZiAoZGVidWdsb2cuZW5hYmxlZCkge1xuICAgICAgZGVidWdsb2coXCIgbWF0Y2hlZCB0b3AtcmFua2VkIEFuc3dlcnNcIiArIEpTT04uc3RyaW5naWZ5KG1hdGNoZWRGaWx0ZXJlZCwgdW5kZWZpbmVkLCAyKSk7XG4gICAgfVxuICAgIHBlcmZsb2coXCJ0b3RhbFdoYXRpc1dpdGhDb250ZXh0IChhPVwiICsgbWF0Y2hlZEZpbHRlcmVkLnR1cGVsYW5zd2Vycy5sZW5ndGggKyBcIilcIik7XG4gICAgcmV0dXJuIG1hdGNoZWRGaWx0ZXJlZDsgLy8gPz8/IEFuc3dlcnM7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpbHRlck9ubHlUb3BSYW5rZWQocmVzdWx0czogQXJyYXk8SU1hdGNoLklXaGF0SXNBbnN3ZXI+KTogQXJyYXk8SU1hdGNoLklXaGF0SXNBbnN3ZXI+IHtcbiAgdmFyIHJlcyA9IHJlc3VsdHMuZmlsdGVyKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICBpZiAocmVzdWx0Ll9yYW5raW5nID09PSByZXN1bHRzWzBdLl9yYW5raW5nKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHJlc3VsdC5fcmFua2luZyA+PSByZXN1bHRzWzBdLl9yYW5raW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJMaXN0IHRvIGZpbHRlciBtdXN0IGJlIG9yZGVyZWRcIik7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfSk7XG4gIHJldHVybiByZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaWx0ZXJPbmx5VG9wUmFua2VkVHVwZWwocmVzdWx0czogQXJyYXk8SU1hdGNoLklXaGF0SXNUdXBlbEFuc3dlcj4pOiBBcnJheTxJTWF0Y2guSVdoYXRJc1R1cGVsQW5zd2VyPiB7XG4gIHZhciByZXMgPSByZXN1bHRzLmZpbHRlcihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgaWYgKHJlc3VsdC5fcmFua2luZyA9PT0gcmVzdWx0c1swXS5fcmFua2luZykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmIChyZXN1bHQuX3JhbmtpbmcgPj0gcmVzdWx0c1swXS5fcmFua2luZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTGlzdCB0byBmaWx0ZXIgbXVzdCBiZSBvcmRlcmVkXCIpO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0pO1xuICByZXR1cm4gcmVzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNJbmRpc2NyaW1pbmF0ZVJlc3VsdChyZXN1bHRzOiBBcnJheTxJTWF0Y2guSVdoYXRJc0Fuc3dlcj4pOiBzdHJpbmcge1xuICB2YXIgY250ID0gcmVzdWx0cy5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIHJlc3VsdCkge1xuICAgIGlmIChyZXN1bHQuX3JhbmtpbmcgPT09IHJlc3VsdHNbMF0uX3JhbmtpbmcpIHtcbiAgICAgIHJldHVybiBwcmV2ICsgMTtcbiAgICB9XG4gIH0sIDApO1xuICBpZiAoY250ID4gMSkge1xuICAgIC8vIHNlYXJjaCBmb3IgYSBkaXNjcmltaW5hdGluZyBjYXRlZ29yeSB2YWx1ZVxuICAgIHZhciBkaXNjcmltaW5hdGluZyA9IE9iamVjdC5rZXlzKHJlc3VsdHNbMF0ucmVjb3JkKS5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIGNhdGVnb3J5KSB7XG4gICAgICBpZiAoKGNhdGVnb3J5LmNoYXJBdCgwKSAhPT0gJ18nICYmIGNhdGVnb3J5ICE9PSByZXN1bHRzWzBdLmNhdGVnb3J5KVxuICAgICAgICAmJiAocmVzdWx0c1swXS5yZWNvcmRbY2F0ZWdvcnldICE9PSByZXN1bHRzWzFdLnJlY29yZFtjYXRlZ29yeV0pKSB7XG4gICAgICAgIHByZXYucHVzaChjYXRlZ29yeSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcHJldjtcbiAgICB9LCBbXSk7XG4gICAgaWYgKGRpc2NyaW1pbmF0aW5nLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIFwiTWFueSBjb21wYXJhYmxlIHJlc3VsdHMsIHBlcmhhcHMgeW91IHdhbnQgdG8gc3BlY2lmeSBhIGRpc2NyaW1pbmF0aW5nIFwiICsgZGlzY3JpbWluYXRpbmcuam9pbignLCcpO1xuICAgIH1cbiAgICByZXR1cm4gJ1lvdXIgcXVlc3Rpb24gZG9lcyBub3QgaGF2ZSBhIHNwZWNpZmljIGFuc3dlcic7XG4gIH1cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzSW5kaXNjcmltaW5hdGVSZXN1bHRUdXBlbChyZXN1bHRzOiBBcnJheTxJTWF0Y2guSVdoYXRJc1R1cGVsQW5zd2VyPik6IHN0cmluZyB7XG4gIHZhciBjbnQgPSByZXN1bHRzLnJlZHVjZShmdW5jdGlvbiAocHJldiwgcmVzdWx0KSB7XG4gICAgaWYgKHJlc3VsdC5fcmFua2luZyA9PT0gcmVzdWx0c1swXS5fcmFua2luZykge1xuICAgICAgcmV0dXJuIHByZXYgKyAxO1xuICAgIH1cbiAgfSwgMCk7XG4gIGlmIChjbnQgPiAxKSB7XG4gICAgLy8gc2VhcmNoIGZvciBhIGRpc2NyaW1pbmF0aW5nIGNhdGVnb3J5IHZhbHVlXG4gICAgdmFyIGRpc2NyaW1pbmF0aW5nID0gT2JqZWN0LmtleXMocmVzdWx0c1swXS5yZWNvcmQpLnJlZHVjZShmdW5jdGlvbiAocHJldiwgY2F0ZWdvcnkpIHtcbiAgICAgIGlmICgoY2F0ZWdvcnkuY2hhckF0KDApICE9PSAnXycgJiYgcmVzdWx0c1swXS5jYXRlZ29yaWVzLmluZGV4T2YoY2F0ZWdvcnkpIDwgMClcbiAgICAgICAgJiYgKHJlc3VsdHNbMF0ucmVjb3JkW2NhdGVnb3J5XSAhPT0gcmVzdWx0c1sxXS5yZWNvcmRbY2F0ZWdvcnldKSkge1xuICAgICAgICBwcmV2LnB1c2goY2F0ZWdvcnkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHByZXY7XG4gICAgfSwgW10pO1xuICAgIGlmIChkaXNjcmltaW5hdGluZy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBcIk1hbnkgY29tcGFyYWJsZSByZXN1bHRzLCBwZXJoYXBzIHlvdSB3YW50IHRvIHNwZWNpZnkgYSBkaXNjcmltaW5hdGluZyBcIiArIGRpc2NyaW1pbmF0aW5nLmpvaW4oJywnKSArICcgb3IgdXNlIFwibGlzdCBhbGwgLi4uXCInO1xuICAgIH1cbiAgICByZXR1cm4gJ1lvdXIgcXVlc3Rpb24gZG9lcyBub3QgaGF2ZSBhIHNwZWNpZmljIGFuc3dlcic7XG4gIH1cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cbiIsIi8qKlxuICpcbiAqIEBtb2R1bGUgamZzZWIuZmRldnN0YXJ0LmFuYWx5emVcbiAqIEBmaWxlIGFuYWx5emUudHNcbiAqIEBjb3B5cmlnaHQgKGMpIDIwMTYgR2VyZCBGb3JzdG1hbm5cbiAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgSW5wdXRGaWx0ZXIgPSByZXF1aXJlKFwiLi9pbnB1dEZpbHRlclwiKTtcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoXCJkZWJ1Z1wiKTtcbnZhciBkZWJ1Z2xvZyA9IGRlYnVnKCd3aGF0aXMnKTtcbnZhciBkZWJ1Z2xvZ1YgPSBkZWJ1Zygnd2hhdFZpcycpO1xudmFyIHBlcmZsb2cgPSBkZWJ1ZygncGVyZicpO1xudmFyIFNlbnRlbmNlID0gcmVxdWlyZShcIi4vc2VudGVuY2VcIik7XG52YXIgV29yZCA9IHJlcXVpcmUoXCIuL3dvcmRcIik7XG52YXIgQWxnb2wgPSByZXF1aXJlKFwiLi9hbGdvbFwiKTtcbmZ1bmN0aW9uIGNtcEJ5UmVzdWx0VGhlblJhbmtpbmcoYSwgYikge1xuICAgIHZhciBjbXAgPSBhLnJlc3VsdC5sb2NhbGVDb21wYXJlKGIucmVzdWx0KTtcbiAgICBpZiAoY21wKSB7XG4gICAgICAgIHJldHVybiBjbXA7XG4gICAgfVxuICAgIHJldHVybiAtKGEuX3JhbmtpbmcgLSBiLl9yYW5raW5nKTtcbn1cbmV4cG9ydHMuY21wQnlSZXN1bHRUaGVuUmFua2luZyA9IGNtcEJ5UmVzdWx0VGhlblJhbmtpbmc7XG5mdW5jdGlvbiBsb2NhbGVDb21wYXJlQXJycyhhYXJlc3VsdCwgYmJyZXN1bHQpIHtcbiAgICB2YXIgY21wID0gMDtcbiAgICB2YXIgYmxlbiA9IGJicmVzdWx0Lmxlbmd0aDtcbiAgICBhYXJlc3VsdC5ldmVyeShmdW5jdGlvbiAoYSwgaW5kZXgpIHtcbiAgICAgICAgaWYgKGJsZW4gPD0gaW5kZXgpIHtcbiAgICAgICAgICAgIGNtcCA9IC0xO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGNtcCA9IGEubG9jYWxlQ29tcGFyZShiYnJlc3VsdFtpbmRleF0pO1xuICAgICAgICBpZiAoY21wKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSk7XG4gICAgaWYgKGNtcCkge1xuICAgICAgICByZXR1cm4gY21wO1xuICAgIH1cbiAgICBpZiAoYmxlbiA+IGFhcmVzdWx0Lmxlbmd0aCkge1xuICAgICAgICBjbXAgPSArMTtcbiAgICB9XG4gICAgcmV0dXJuIDA7XG59XG5mdW5jdGlvbiBjbXBCeVJlc3VsdFRoZW5SYW5raW5nVHVwZWwoYWEsIGJiKSB7XG4gICAgdmFyIGNtcCA9IGxvY2FsZUNvbXBhcmVBcnJzKGFhLnJlc3VsdCwgYmIucmVzdWx0KTtcbiAgICBpZiAoY21wKSB7XG4gICAgICAgIHJldHVybiBjbXA7XG4gICAgfVxuICAgIHJldHVybiAtKGFhLl9yYW5raW5nIC0gYmIuX3JhbmtpbmcpO1xufVxuZXhwb3J0cy5jbXBCeVJlc3VsdFRoZW5SYW5raW5nVHVwZWwgPSBjbXBCeVJlc3VsdFRoZW5SYW5raW5nVHVwZWw7XG5mdW5jdGlvbiBjbXBCeVJhbmtpbmcoYSwgYikge1xuICAgIHZhciBjbXAgPSAtKGEuX3JhbmtpbmcgLSBiLl9yYW5raW5nKTtcbiAgICBpZiAoY21wKSB7XG4gICAgICAgIHJldHVybiBjbXA7XG4gICAgfVxuICAgIGNtcCA9IGEucmVzdWx0LmxvY2FsZUNvbXBhcmUoYi5yZXN1bHQpO1xuICAgIGlmIChjbXApIHtcbiAgICAgICAgcmV0dXJuIGNtcDtcbiAgICB9XG4gICAgLy8gYXJlIHJlY29yZHMgZGlmZmVyZW50P1xuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoYS5yZWNvcmQpLmNvbmNhdChPYmplY3Qua2V5cyhiLnJlY29yZCkpLnNvcnQoKTtcbiAgICB2YXIgcmVzID0ga2V5cy5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIHNLZXkpIHtcbiAgICAgICAgaWYgKHByZXYpIHtcbiAgICAgICAgICAgIHJldHVybiBwcmV2O1xuICAgICAgICB9XG4gICAgICAgIGlmIChiLnJlY29yZFtzS2V5XSAhPT0gYS5yZWNvcmRbc0tleV0pIHtcbiAgICAgICAgICAgIGlmICghYi5yZWNvcmRbc0tleV0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWEucmVjb3JkW3NLZXldKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICsxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGEucmVjb3JkW3NLZXldLmxvY2FsZUNvbXBhcmUoYi5yZWNvcmRbc0tleV0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAwO1xuICAgIH0sIDApO1xuICAgIHJldHVybiByZXM7XG59XG5leHBvcnRzLmNtcEJ5UmFua2luZyA9IGNtcEJ5UmFua2luZztcbmZ1bmN0aW9uIGNtcEJ5UmFua2luZ1R1cGVsKGEsIGIpIHtcbiAgICB2YXIgY21wID0gLShhLl9yYW5raW5nIC0gYi5fcmFua2luZyk7XG4gICAgaWYgKGNtcCkge1xuICAgICAgICByZXR1cm4gY21wO1xuICAgIH1cbiAgICBjbXAgPSBsb2NhbGVDb21wYXJlQXJycyhhLnJlc3VsdCwgYi5yZXN1bHQpO1xuICAgIGlmIChjbXApIHtcbiAgICAgICAgcmV0dXJuIGNtcDtcbiAgICB9XG4gICAgLy8gYXJlIHJlY29yZHMgZGlmZmVyZW50P1xuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoYS5yZWNvcmQpLmNvbmNhdChPYmplY3Qua2V5cyhiLnJlY29yZCkpLnNvcnQoKTtcbiAgICB2YXIgcmVzID0ga2V5cy5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIHNLZXkpIHtcbiAgICAgICAgaWYgKHByZXYpIHtcbiAgICAgICAgICAgIHJldHVybiBwcmV2O1xuICAgICAgICB9XG4gICAgICAgIGlmIChiLnJlY29yZFtzS2V5XSAhPT0gYS5yZWNvcmRbc0tleV0pIHtcbiAgICAgICAgICAgIGlmICghYi5yZWNvcmRbc0tleV0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWEucmVjb3JkW3NLZXldKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICsxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGEucmVjb3JkW3NLZXldLmxvY2FsZUNvbXBhcmUoYi5yZWNvcmRbc0tleV0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAwO1xuICAgIH0sIDApO1xuICAgIHJldHVybiByZXM7XG59XG5leHBvcnRzLmNtcEJ5UmFua2luZ1R1cGVsID0gY21wQnlSYW5raW5nVHVwZWw7XG5mdW5jdGlvbiBkdW1wTmljZShhbnN3ZXIpIHtcbiAgICB2YXIgcmVzdWx0ID0ge1xuICAgICAgICBzOiBcIlwiLFxuICAgICAgICBwdXNoOiBmdW5jdGlvbiAocykgeyB0aGlzLnMgPSB0aGlzLnMgKyBzOyB9XG4gICAgfTtcbiAgICB2YXIgcyA9IFwiKipSZXN1bHQgZm9yIGNhdGVnb3J5OiBcIiArIGFuc3dlci5jYXRlZ29yeSArIFwiIGlzIFwiICsgYW5zd2VyLnJlc3VsdCArIFwiXFxuIHJhbms6IFwiICsgYW5zd2VyLl9yYW5raW5nICsgXCJcXG5cIjtcbiAgICByZXN1bHQucHVzaChzKTtcbiAgICBPYmplY3Qua2V5cyhhbnN3ZXIucmVjb3JkKS5mb3JFYWNoKGZ1bmN0aW9uIChzUmVxdWlyZXMsIGluZGV4KSB7XG4gICAgICAgIGlmIChzUmVxdWlyZXMuY2hhckF0KDApICE9PSAnXycpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKFwicmVjb3JkOiBcIiArIHNSZXF1aXJlcyArIFwiIC0+IFwiICsgYW5zd2VyLnJlY29yZFtzUmVxdWlyZXNdKTtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQucHVzaCgnXFxuJyk7XG4gICAgfSk7XG4gICAgdmFyIG9TZW50ZW5jZSA9IGFuc3dlci5zZW50ZW5jZTtcbiAgICBvU2VudGVuY2UuZm9yRWFjaChmdW5jdGlvbiAob1dvcmQsIGluZGV4KSB7XG4gICAgICAgIHZhciBzV29yZCA9IFwiW1wiICsgaW5kZXggKyBcIl0gOiBcIiArIG9Xb3JkLmNhdGVnb3J5ICsgXCIgXFxcIlwiICsgb1dvcmQuc3RyaW5nICsgXCJcXFwiID0+IFxcXCJcIiArIG9Xb3JkLm1hdGNoZWRTdHJpbmcgKyBcIlxcXCJcIjtcbiAgICAgICAgcmVzdWx0LnB1c2goc1dvcmQgKyBcIlxcblwiKTtcbiAgICB9KTtcbiAgICByZXN1bHQucHVzaChcIi5cXG5cIik7XG4gICAgcmV0dXJuIHJlc3VsdC5zO1xufVxuZXhwb3J0cy5kdW1wTmljZSA9IGR1bXBOaWNlO1xuZnVuY3Rpb24gZHVtcE5pY2VUdXBlbChhbnN3ZXIpIHtcbiAgICB2YXIgcmVzdWx0ID0ge1xuICAgICAgICBzOiBcIlwiLFxuICAgICAgICBwdXNoOiBmdW5jdGlvbiAocykgeyB0aGlzLnMgPSB0aGlzLnMgKyBzOyB9XG4gICAgfTtcbiAgICB2YXIgcyA9IFwiKipSZXN1bHQgZm9yIGNhdGVnb3JpZXM6IFwiICsgYW5zd2VyLmNhdGVnb3JpZXMuam9pbihcIjtcIikgKyBcIiBpcyBcIiArIGFuc3dlci5yZXN1bHQgKyBcIlxcbiByYW5rOiBcIiArIGFuc3dlci5fcmFua2luZyArIFwiXFxuXCI7XG4gICAgcmVzdWx0LnB1c2gocyk7XG4gICAgT2JqZWN0LmtleXMoYW5zd2VyLnJlY29yZCkuZm9yRWFjaChmdW5jdGlvbiAoc1JlcXVpcmVzLCBpbmRleCkge1xuICAgICAgICBpZiAoc1JlcXVpcmVzLmNoYXJBdCgwKSAhPT0gJ18nKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChcInJlY29yZDogXCIgKyBzUmVxdWlyZXMgKyBcIiAtPiBcIiArIGFuc3dlci5yZWNvcmRbc1JlcXVpcmVzXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0LnB1c2goJ1xcbicpO1xuICAgIH0pO1xuICAgIHZhciBvU2VudGVuY2UgPSBhbnN3ZXIuc2VudGVuY2U7XG4gICAgb1NlbnRlbmNlLmZvckVhY2goZnVuY3Rpb24gKG9Xb3JkLCBpbmRleCkge1xuICAgICAgICB2YXIgc1dvcmQgPSBcIltcIiArIGluZGV4ICsgXCJdIDogXCIgKyBvV29yZC5jYXRlZ29yeSArIFwiIFxcXCJcIiArIG9Xb3JkLnN0cmluZyArIFwiXFxcIiA9PiBcXFwiXCIgKyBvV29yZC5tYXRjaGVkU3RyaW5nICsgXCJcXFwiXCI7XG4gICAgICAgIHJlc3VsdC5wdXNoKHNXb3JkICsgXCJcXG5cIik7XG4gICAgfSk7XG4gICAgcmVzdWx0LnB1c2goXCIuXFxuXCIpO1xuICAgIHJldHVybiByZXN1bHQucztcbn1cbmV4cG9ydHMuZHVtcE5pY2VUdXBlbCA9IGR1bXBOaWNlVHVwZWw7XG5mdW5jdGlvbiBkdW1wV2VpZ2h0c1RvcCh0b29sbWF0Y2hlcywgb3B0aW9ucykge1xuICAgIHZhciBzID0gJyc7XG4gICAgdG9vbG1hdGNoZXMuZm9yRWFjaChmdW5jdGlvbiAob01hdGNoLCBpbmRleCkge1xuICAgICAgICBpZiAoaW5kZXggPCBvcHRpb25zLnRvcCkge1xuICAgICAgICAgICAgcyA9IHMgKyBcIldoYXRJc0Fuc3dlcltcIiArIGluZGV4ICsgXCJdLi4uXFxuXCI7XG4gICAgICAgICAgICBzID0gcyArIGR1bXBOaWNlKG9NYXRjaCk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcztcbn1cbmV4cG9ydHMuZHVtcFdlaWdodHNUb3AgPSBkdW1wV2VpZ2h0c1RvcDtcbmZ1bmN0aW9uIGZpbHRlclJldGFpblRvcFJhbmtlZFJlc3VsdChyZXMpIHtcbiAgICB2YXIgcmVzdWx0ID0gcmVzLmFuc3dlcnMuZmlsdGVyKGZ1bmN0aW9uIChpUmVzLCBpbmRleCkge1xuICAgICAgICBpZiAoZGVidWdsb2cuZW5hYmxlZCkge1xuICAgICAgICAgICAgZGVidWdsb2coJ3JldGFpbiB0b3BSYW5rZWQ6ICcgKyBpbmRleCArICcgJyArIEpTT04uc3RyaW5naWZ5KGlSZXMpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaVJlcy5yZXN1bHQgPT09IChyZXMuYW5zd2Vyc1tpbmRleCAtIDFdICYmIHJlcy5hbnN3ZXJzW2luZGV4IC0gMV0ucmVzdWx0KSkge1xuICAgICAgICAgICAgZGVidWdsb2coJ3NraXAnKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KTtcbiAgICByZXN1bHQuc29ydChjbXBCeVJhbmtpbmcpO1xuICAgIHZhciBhID0gT2JqZWN0LmFzc2lnbih7IGFuc3dlcnM6IHJlc3VsdCB9LCByZXMsIHsgYW5zd2VyczogcmVzdWx0IH0pO1xuICAgIGEuYW5zd2VycyA9IHJlc3VsdDtcbiAgICByZXR1cm4gYTtcbn1cbmV4cG9ydHMuZmlsdGVyUmV0YWluVG9wUmFua2VkUmVzdWx0ID0gZmlsdGVyUmV0YWluVG9wUmFua2VkUmVzdWx0O1xuZnVuY3Rpb24gZmlsdGVyUmV0YWluVG9wUmFua2VkUmVzdWx0VHVwZWwocmVzKSB7XG4gICAgdmFyIHJlc3VsdCA9IHJlcy50dXBlbGFuc3dlcnMuZmlsdGVyKGZ1bmN0aW9uIChpUmVzLCBpbmRleCkge1xuICAgICAgICBpZiAoZGVidWdsb2cuZW5hYmxlZCkge1xuICAgICAgICAgICAgZGVidWdsb2coJyByZXRhaW4gdHVwZWwgJyArIGluZGV4ICsgJyAnICsgSlNPTi5zdHJpbmdpZnkoaVJlcykpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpUmVzLnJlc3VsdCA9PT0gKHJlc1tpbmRleCAtIDFdICYmIHJlc1tpbmRleCAtIDFdLnJlc3VsdCkpIHtcbiAgICAgICAgICAgIGRlYnVnbG9nKCdza2lwJyk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSk7XG4gICAgcmVzdWx0LnNvcnQoY21wQnlSYW5raW5nVHVwZWwpO1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKHsgdHVwZWxhbnN3ZXJzOiByZXN1bHQgfSwgcmVzKTtcbn1cbmV4cG9ydHMuZmlsdGVyUmV0YWluVG9wUmFua2VkUmVzdWx0VHVwZWwgPSBmaWx0ZXJSZXRhaW5Ub3BSYW5rZWRSZXN1bHRUdXBlbDtcbnZhciBNYXRjaCA9IHJlcXVpcmUoXCIuL21hdGNoXCIpO1xuZnVuY3Rpb24gY2FsY1JhbmtpbmcobWF0Y2hlZCwgbWlzbWF0Y2hlZCwgcmVsZXZhbnRDb3VudCkge1xuICAgIHZhciBsZW5NYXRjaGVkID0gT2JqZWN0LmtleXMobWF0Y2hlZCkubGVuZ3RoO1xuICAgIHZhciBmYWN0b3IgPSBNYXRjaC5jYWxjUmFua2luZ1Byb2R1Y3QobWF0Y2hlZCk7XG4gICAgZmFjdG9yICo9IE1hdGgucG93KDEuNSwgbGVuTWF0Y2hlZCk7XG4gICAgdmFyIGxlbk1pc01hdGNoZWQgPSBPYmplY3Qua2V5cyhtaXNtYXRjaGVkKS5sZW5ndGg7XG4gICAgdmFyIGZhY3RvcjIgPSBNYXRjaC5jYWxjUmFua2luZ1Byb2R1Y3QobWlzbWF0Y2hlZCk7XG4gICAgZmFjdG9yMiAqPSBNYXRoLnBvdygwLjQsIGxlbk1pc01hdGNoZWQpO1xuICAgIHJldHVybiBNYXRoLnBvdyhmYWN0b3IyICogZmFjdG9yLCAxIC8gKGxlbk1pc01hdGNoZWQgKyBsZW5NYXRjaGVkKSk7XG59XG5leHBvcnRzLmNhbGNSYW5raW5nID0gY2FsY1Jhbmtpbmc7XG5mdW5jdGlvbiBjYWxjUmFua2luZ1NpbXBsZShtYXRjaGVkLCBtaXNtYXRjaGVkLCBub3VzZSwgcmVsZXZhbnRDb3VudCkge1xuICAgIC8vIDIgOiAwXG4gICAgLy8gMSA6IDBcbiAgICB2YXIgZmFjdG9yID0gbWF0Y2hlZCAqIE1hdGgucG93KDEuNSwgbWF0Y2hlZCkgKiBNYXRoLnBvdygxLjUsIG1hdGNoZWQpO1xuICAgIHZhciBmYWN0b3IyID0gTWF0aC5wb3coMC40LCBtaXNtYXRjaGVkKTtcbiAgICB2YXIgZmFjdG9yMyA9IE1hdGgucG93KDAuNCwgbm91c2UpO1xuICAgIHJldHVybiBNYXRoLnBvdyhmYWN0b3IyICogZmFjdG9yICogZmFjdG9yMywgMSAvIChtaXNtYXRjaGVkICsgbWF0Y2hlZCArIG5vdXNlKSk7XG59XG5leHBvcnRzLmNhbGNSYW5raW5nU2ltcGxlID0gY2FsY1JhbmtpbmdTaW1wbGU7XG5mdW5jdGlvbiBjYWxjUmFua2luZ0hhdmluZ0NhdGVnb3J5KG1hdGNoZWQsIGhhc0NhdGVnb3J5LCBtaXNtYXRjaGVkLCByZWxldmFudENvdW50KSB7XG4gICAgdmFyIGxlbk1hdGNoZWQgPSBPYmplY3Qua2V5cyhtYXRjaGVkKS5sZW5ndGg7XG4gICAgdmFyIGZhY3RvciA9IE1hdGNoLmNhbGNSYW5raW5nUHJvZHVjdChtYXRjaGVkKTtcbiAgICBmYWN0b3IgKj0gTWF0aC5wb3coMS41LCBsZW5NYXRjaGVkKTtcbiAgICB2YXIgbGVuSGFzQ2F0ZWdvcnkgPSBPYmplY3Qua2V5cyhoYXNDYXRlZ29yeSkubGVuZ3RoO1xuICAgIHZhciBmYWN0b3JIID0gTWF0aC5wb3coMS4xLCBsZW5IYXNDYXRlZ29yeSk7XG4gICAgdmFyIGxlbk1pc01hdGNoZWQgPSBPYmplY3Qua2V5cyhtaXNtYXRjaGVkKS5sZW5ndGg7XG4gICAgdmFyIGZhY3RvcjIgPSBNYXRjaC5jYWxjUmFua2luZ1Byb2R1Y3QobWlzbWF0Y2hlZCk7XG4gICAgZmFjdG9yMiAqPSBNYXRoLnBvdygwLjQsIGxlbk1pc01hdGNoZWQpO1xuICAgIHJldHVybiBNYXRoLnBvdyhmYWN0b3IyICogZmFjdG9ySCAqIGZhY3RvciwgMSAvIChsZW5NaXNNYXRjaGVkICsgbGVuSGFzQ2F0ZWdvcnkgKyBsZW5NYXRjaGVkKSk7XG59XG5leHBvcnRzLmNhbGNSYW5raW5nSGF2aW5nQ2F0ZWdvcnkgPSBjYWxjUmFua2luZ0hhdmluZ0NhdGVnb3J5O1xuLyoqXG4gKiBsaXN0IGFsbCB0b3AgbGV2ZWwgcmFua2luZ3NcbiAqL1xuZnVuY3Rpb24gbWF0Y2hSZWNvcmRzSGF2aW5nQ29udGV4dChwU2VudGVuY2VzLCBjYXRlZ29yeSwgcmVjb3JkcywgY2F0ZWdvcnlTZXQpIHtcbiAgICAvL2RlYnVnbG9nKEpTT04uc3RyaW5naWZ5KHJlY29yZHMsIHVuZGVmaW5lZCwgMikpO1xuICAgIHZhciByZWxldmFudFJlY29yZHMgPSByZWNvcmRzLmZpbHRlcihmdW5jdGlvbiAocmVjb3JkKSB7XG4gICAgICAgIHJldHVybiAocmVjb3JkW2NhdGVnb3J5XSAhPT0gdW5kZWZpbmVkKSAmJiAocmVjb3JkW2NhdGVnb3J5XSAhPT0gbnVsbCk7XG4gICAgfSk7XG4gICAgdmFyIHJlcyA9IFtdO1xuICAgIGRlYnVnbG9nKFwiTWF0Y2hSZWNvcmRzSGF2aW5nQ29udGV4dCA6IHJlbGV2YW50IHJlY29yZHMgbnI6XCIgKyByZWxldmFudFJlY29yZHMubGVuZ3RoKTtcbiAgICBkZWJ1Z2xvZyhkZWJ1Z2xvZy5lbmFibGVkID8gKFwic2VudGVuY2VzIGFyZSA6IFwiICsgSlNPTi5zdHJpbmdpZnkocFNlbnRlbmNlcywgdW5kZWZpbmVkLCAyKSkgOiBcIi1cIik7XG4gICAgZGVidWdsb2coZGVidWdsb2cuZW5hYmxlZCA/IChcImNhdGVnb3J5IFwiICsgY2F0ZWdvcnkgKyBcIiBhbmQgY2F0ZWdvcnlzZXQgaXM6IFwiICsgSlNPTi5zdHJpbmdpZnkoY2F0ZWdvcnlTZXQsIHVuZGVmaW5lZCwgMikpIDogXCItXCIpO1xuICAgIGlmIChwcm9jZXNzLmVudi5BQk9UX0ZBU1QgJiYgY2F0ZWdvcnlTZXQpIHtcbiAgICAgICAgLy8gd2UgYXJlIG9ubHkgaW50ZXJlc3RlZCBpbiBjYXRlZ29yaWVzIHByZXNlbnQgaW4gcmVjb3JkcyBmb3IgZG9tYWlucyB3aGljaCBjb250YWluIHRoZSBjYXRlZ29yeVxuICAgICAgICAvLyB2YXIgY2F0ZWdvcnlzZXQgPSBNb2RlbC5jYWxjdWxhdGVSZWxldmFudFJlY29yZENhdGVnb3JpZXModGhlTW9kZWwsY2F0ZWdvcnkpO1xuICAgICAgICAvL2tub3dpbmcgdGhlIHRhcmdldFxuICAgICAgICBwZXJmbG9nKFwiZ290IGNhdGVnb3J5c2V0IHdpdGggXCIgKyBPYmplY3Qua2V5cyhjYXRlZ29yeVNldCkubGVuZ3RoKTtcbiAgICAgICAgdmFyIGZsID0gMDtcbiAgICAgICAgdmFyIGxmID0gMDtcbiAgICAgICAgdmFyIGFTaW1wbGlmaWVkU2VudGVuY2VzID0gcFNlbnRlbmNlcy5zZW50ZW5jZXMubWFwKGZ1bmN0aW9uIChvU2VudGVuY2UpIHtcbiAgICAgICAgICAgIHZhciBmV29yZHMgPSBvU2VudGVuY2UuZmlsdGVyKGZ1bmN0aW9uIChvV29yZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAhV29yZC5Xb3JkLmlzRmlsbGVyKG9Xb3JkKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdmFyIHJXb3JkcyA9IG9TZW50ZW5jZS5maWx0ZXIoZnVuY3Rpb24gKG9Xb3JkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICEhY2F0ZWdvcnlTZXRbb1dvcmQuY2F0ZWdvcnldIHx8IFdvcmQuV29yZC5pc0NhdGVnb3J5KG9Xb3JkKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZmwgPSBmbCArIG9TZW50ZW5jZS5sZW5ndGg7XG4gICAgICAgICAgICBsZiA9IGxmICsgcldvcmRzLmxlbmd0aDtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgb1NlbnRlbmNlOiBvU2VudGVuY2UsXG4gICAgICAgICAgICAgICAgY250UmVsZXZhbnRXb3JkczogcldvcmRzLmxlbmd0aCxcbiAgICAgICAgICAgICAgICByV29yZHM6IHJXb3Jkc1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5mcmVlemUoYVNpbXBsaWZpZWRTZW50ZW5jZXMpO1xuICAgICAgICBkZWJ1Z2xvZyhcInBvc3Qgc2ltcGxpZnkgKHI9XCIgKyByZWxldmFudFJlY29yZHMubGVuZ3RoICsgXCIgcz1cIiArIHBTZW50ZW5jZXMuc2VudGVuY2VzLmxlbmd0aCArIFwiIGZsIFwiICsgZmwgKyBcIi0+XCIgKyBsZiArIFwiKVwiKTtcbiAgICAgICAgcGVyZmxvZyhcInBvc3Qgc2ltcGxpZnkgKHI9XCIgKyByZWxldmFudFJlY29yZHMubGVuZ3RoICsgXCIgcz1cIiArIHBTZW50ZW5jZXMuc2VudGVuY2VzLmxlbmd0aCArIFwiIGZsIFwiICsgZmwgKyBcIi0+XCIgKyBsZiArIFwiKVwiKTtcbiAgICAgICAgcmVsZXZhbnRSZWNvcmRzLmZvckVhY2goZnVuY3Rpb24gKHJlY29yZCkge1xuICAgICAgICAgICAgLy8gY291bnQgbWF0Y2hlcyBpbiByZWNvcmQgd2hpY2ggYXJlICpub3QqIHRoZSBjYXRlZ29yeVxuICAgICAgICAgICAgYVNpbXBsaWZpZWRTZW50ZW5jZXMuZm9yRWFjaChmdW5jdGlvbiAoYVNlbnRlbmNlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGhhc0NhdGVnb3J5ID0ge307XG4gICAgICAgICAgICAgICAgdmFyIG1pc21hdGNoZWQgPSB7fTtcbiAgICAgICAgICAgICAgICB2YXIgbWF0Y2hlZCA9IHt9O1xuICAgICAgICAgICAgICAgIHZhciBjbnRSZWxldmFudFdvcmRzID0gYVNlbnRlbmNlLmNudFJlbGV2YW50V29yZHM7XG4gICAgICAgICAgICAgICAgYVNlbnRlbmNlLnJXb3Jkcy5mb3JFYWNoKGZ1bmN0aW9uIChvV29yZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAob1dvcmQuY2F0ZWdvcnkgJiYgKHJlY29yZFtvV29yZC5jYXRlZ29yeV0gIT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvV29yZC5tYXRjaGVkU3RyaW5nID09PSByZWNvcmRbb1dvcmQuY2F0ZWdvcnldKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlZFtvV29yZC5jYXRlZ29yeV0gPSBvV29yZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pc21hdGNoZWRbb1dvcmQuY2F0ZWdvcnldID0gb1dvcmQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoV29yZC5Xb3JkLmlzQ2F0ZWdvcnkob1dvcmQpICYmIHJlY29yZFtvV29yZC5tYXRjaGVkU3RyaW5nXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaGFzQ2F0ZWdvcnlbb1dvcmQubWF0Y2hlZFN0cmluZ10gPSAxO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKChPYmplY3Qua2V5cyhtYXRjaGVkKS5sZW5ndGggKyBPYmplY3Qua2V5cyhoYXNDYXRlZ29yeSkubGVuZ3RoKSA+IE9iamVjdC5rZXlzKG1pc21hdGNoZWQpLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICByZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZW50ZW5jZTogYVNlbnRlbmNlLm9TZW50ZW5jZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlY29yZDogcmVjb3JkLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcnk6IGNhdGVnb3J5LFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0OiByZWNvcmRbY2F0ZWdvcnldLFxuICAgICAgICAgICAgICAgICAgICAgICAgX3Jhbmtpbmc6IGNhbGNSYW5raW5nSGF2aW5nQ2F0ZWdvcnkobWF0Y2hlZCwgaGFzQ2F0ZWdvcnksIG1pc21hdGNoZWQsIGNudFJlbGV2YW50V29yZHMpXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgZGVidWdsb2coXCJoZXJlIGluIHdlaXJkXCIpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmVsZXZhbnRSZWNvcmRzLmZvckVhY2goZnVuY3Rpb24gKHJlY29yZCkge1xuICAgICAgICAgICAgLy8gY291bnQgbWF0Y2hlcyBpbiByZWNvcmQgd2hpY2ggYXJlICpub3QqIHRoZSBjYXRlZ29yeVxuICAgICAgICAgICAgcFNlbnRlbmNlcy5zZW50ZW5jZXMuZm9yRWFjaChmdW5jdGlvbiAoYVNlbnRlbmNlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGhhc0NhdGVnb3J5ID0ge307XG4gICAgICAgICAgICAgICAgdmFyIG1pc21hdGNoZWQgPSB7fTtcbiAgICAgICAgICAgICAgICB2YXIgbWF0Y2hlZCA9IHt9O1xuICAgICAgICAgICAgICAgIHZhciBjbnRSZWxldmFudFdvcmRzID0gMDtcbiAgICAgICAgICAgICAgICBhU2VudGVuY2UuZm9yRWFjaChmdW5jdGlvbiAob1dvcmQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFXb3JkLldvcmQuaXNGaWxsZXIob1dvcmQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbnRSZWxldmFudFdvcmRzID0gY250UmVsZXZhbnRXb3JkcyArIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob1dvcmQuY2F0ZWdvcnkgJiYgKHJlY29yZFtvV29yZC5jYXRlZ29yeV0gIT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob1dvcmQubWF0Y2hlZFN0cmluZyA9PT0gcmVjb3JkW29Xb3JkLmNhdGVnb3J5XSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaGVkW29Xb3JkLmNhdGVnb3J5XSA9IG9Xb3JkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWlzbWF0Y2hlZFtvV29yZC5jYXRlZ29yeV0gPSBvV29yZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChXb3JkLldvcmQuaXNDYXRlZ29yeShvV29yZCkgJiYgcmVjb3JkW29Xb3JkLm1hdGNoZWRTdHJpbmddKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzQ2F0ZWdvcnlbb1dvcmQubWF0Y2hlZFN0cmluZ10gPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKChPYmplY3Qua2V5cyhtYXRjaGVkKS5sZW5ndGggKyBPYmplY3Qua2V5cyhoYXNDYXRlZ29yeSkubGVuZ3RoKSA+IE9iamVjdC5rZXlzKG1pc21hdGNoZWQpLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICByZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZW50ZW5jZTogYVNlbnRlbmNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVjb3JkOiByZWNvcmQsXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRlZ29yeTogY2F0ZWdvcnksXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQ6IHJlY29yZFtjYXRlZ29yeV0sXG4gICAgICAgICAgICAgICAgICAgICAgICBfcmFua2luZzogY2FsY1JhbmtpbmdIYXZpbmdDYXRlZ29yeShtYXRjaGVkLCBoYXNDYXRlZ29yeSwgbWlzbWF0Y2hlZCwgY250UmVsZXZhbnRXb3JkcylcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXMuc29ydChjbXBCeVJlc3VsdFRoZW5SYW5raW5nKTtcbiAgICBkZWJ1Z2xvZyhcIiBhZnRlciBzb3J0XCIgKyByZXMubGVuZ3RoKTtcbiAgICB2YXIgcmVzdWx0ID0gT2JqZWN0LmFzc2lnbih7fSwgcFNlbnRlbmNlcywgeyBhbnN3ZXJzOiByZXMgfSk7XG4gICAgcmV0dXJuIGZpbHRlclJldGFpblRvcFJhbmtlZFJlc3VsdChyZXN1bHQpO1xufVxuZXhwb3J0cy5tYXRjaFJlY29yZHNIYXZpbmdDb250ZXh0ID0gbWF0Y2hSZWNvcmRzSGF2aW5nQ29udGV4dDtcbi8qKlxuICogbGlzdCBhbGwgdG9wIGxldmVsIHJhbmtpbmdzXG4gKi9cbmZ1bmN0aW9uIG1hdGNoUmVjb3Jkc1R1cGVsSGF2aW5nQ29udGV4dChwU2VudGVuY2VzLCBjYXRlZ29yaWVzLCByZWNvcmRzLCBjYXRlZ29yeVNldCkge1xuICAgIC8vIGRlYnVnbG9nKEpTT04uc3RyaW5naWZ5KHJlY29yZHMsIHVuZGVmaW5lZCwgMikpO1xuICAgIHZhciBjYXRlZ29yeUYgPSBjYXRlZ29yaWVzWzBdO1xuICAgIHZhciByZWxldmFudFJlY29yZHMgPSByZWNvcmRzLmZpbHRlcihmdW5jdGlvbiAocmVjb3JkKSB7XG4gICAgICAgIHJldHVybiAocmVjb3JkW2NhdGVnb3J5Rl0gIT09IHVuZGVmaW5lZCkgJiYgKHJlY29yZFtjYXRlZ29yeUZdICE9PSBudWxsKTtcbiAgICB9KTtcbiAgICB2YXIgcmVzID0gW107XG4gICAgZGVidWdsb2coXCJyZWxldmFudCByZWNvcmRzIG5yOlwiICsgcmVsZXZhbnRSZWNvcmRzLmxlbmd0aCk7XG4gICAgZGVidWdsb2coZGVidWdsb2cuZW5hYmxlZCA/IChcInNlbnRlbmNlcyBhcmUgOiBcIiArIEpTT04uc3RyaW5naWZ5KHBTZW50ZW5jZXMsIHVuZGVmaW5lZCwgMikpIDogXCItXCIpO1xuICAgIGlmIChwcm9jZXNzLmVudi5BQk9UX0ZBU1QgJiYgY2F0ZWdvcnlTZXQpIHtcbiAgICAgICAgLy8gd2UgYXJlIG9ubHkgaW50ZXJlc3RlZCBpbiBjYXRlZ29yaWVzIHByZXNlbnQgaW4gcmVjb3JkcyBmb3IgZG9tYWlucyB3aGljaCBjb250YWluIHRoZSBjYXRlZ29yeVxuICAgICAgICAvLyB2YXIgY2F0ZWdvcnlzZXQgPSBNb2RlbC5jYWxjdWxhdGVSZWxldmFudFJlY29yZENhdGVnb3JpZXModGhlTW9kZWwsY2F0ZWdvcnkpO1xuICAgICAgICAvL2tub3dpbmcgdGhlIHRhcmdldFxuICAgICAgICBwZXJmbG9nKFwiZ290IGNhdGVnb3J5c2V0IHdpdGggXCIgKyBPYmplY3Qua2V5cyhjYXRlZ29yeVNldCkubGVuZ3RoKTtcbiAgICAgICAgdmFyIGZsID0gMDtcbiAgICAgICAgdmFyIGxmID0gMDtcbiAgICAgICAgdmFyIGFTaW1wbGlmaWVkU2VudGVuY2VzID0gcFNlbnRlbmNlcy5zZW50ZW5jZXMubWFwKGZ1bmN0aW9uIChvU2VudGVuY2UpIHtcbiAgICAgICAgICAgIHZhciBmV29yZHMgPSBvU2VudGVuY2UuZmlsdGVyKGZ1bmN0aW9uIChvV29yZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAhV29yZC5Xb3JkLmlzRmlsbGVyKG9Xb3JkKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdmFyIHJXb3JkcyA9IG9TZW50ZW5jZS5maWx0ZXIoZnVuY3Rpb24gKG9Xb3JkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICEhY2F0ZWdvcnlTZXRbb1dvcmQuY2F0ZWdvcnldIHx8IFdvcmQuV29yZC5pc0NhdGVnb3J5KG9Xb3JkKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZmwgPSBmbCArIG9TZW50ZW5jZS5sZW5ndGg7XG4gICAgICAgICAgICBsZiA9IGxmICsgcldvcmRzLmxlbmd0aDtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgb1NlbnRlbmNlOiBvU2VudGVuY2UsXG4gICAgICAgICAgICAgICAgY250UmVsZXZhbnRXb3JkczogcldvcmRzLmxlbmd0aCxcbiAgICAgICAgICAgICAgICByV29yZHM6IHJXb3Jkc1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5mcmVlemUoYVNpbXBsaWZpZWRTZW50ZW5jZXMpO1xuICAgICAgICBwZXJmbG9nKFwicG9zdCBzaW1wbGlmeSAocj1cIiArIHJlbGV2YW50UmVjb3Jkcy5sZW5ndGggKyBcIiBzPVwiICsgcFNlbnRlbmNlcy5zZW50ZW5jZXMubGVuZ3RoICsgXCIgZmwgXCIgKyBmbCArIFwiLT5cIiArIGxmICsgXCIpXCIpO1xuICAgICAgICByZWxldmFudFJlY29yZHMuZm9yRWFjaChmdW5jdGlvbiAocmVjb3JkKSB7XG4gICAgICAgICAgICAvLyBjb3VudCBtYXRjaGVzIGluIHJlY29yZCB3aGljaCBhcmUgKm5vdCogdGhlIGNhdGVnb3J5XG4gICAgICAgICAgICBhU2ltcGxpZmllZFNlbnRlbmNlcy5mb3JFYWNoKGZ1bmN0aW9uIChhU2VudGVuY2UpIHtcbiAgICAgICAgICAgICAgICB2YXIgaGFzQ2F0ZWdvcnkgPSB7fTtcbiAgICAgICAgICAgICAgICB2YXIgbWlzbWF0Y2hlZCA9IHt9O1xuICAgICAgICAgICAgICAgIHZhciBtYXRjaGVkID0ge307XG4gICAgICAgICAgICAgICAgdmFyIGNudFJlbGV2YW50V29yZHMgPSBhU2VudGVuY2UuY250UmVsZXZhbnRXb3JkcztcbiAgICAgICAgICAgICAgICBhU2VudGVuY2UucldvcmRzLmZvckVhY2goZnVuY3Rpb24gKG9Xb3JkKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvV29yZC5jYXRlZ29yeSAmJiAocmVjb3JkW29Xb3JkLmNhdGVnb3J5XSAhPT0gdW5kZWZpbmVkKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9Xb3JkLm1hdGNoZWRTdHJpbmcgPT09IHJlY29yZFtvV29yZC5jYXRlZ29yeV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaGVkW29Xb3JkLmNhdGVnb3J5XSA9IG9Xb3JkO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWlzbWF0Y2hlZFtvV29yZC5jYXRlZ29yeV0gPSBvV29yZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChXb3JkLldvcmQuaXNDYXRlZ29yeShvV29yZCkgJiYgcmVjb3JkW29Xb3JkLm1hdGNoZWRTdHJpbmddKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBoYXNDYXRlZ29yeVtvV29yZC5tYXRjaGVkU3RyaW5nXSA9IDE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAoKE9iamVjdC5rZXlzKG1hdGNoZWQpLmxlbmd0aCArIE9iamVjdC5rZXlzKGhhc0NhdGVnb3J5KS5sZW5ndGgpID4gT2JqZWN0LmtleXMobWlzbWF0Y2hlZCkubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbnRlbmNlOiBhU2VudGVuY2Uub1NlbnRlbmNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVjb3JkOiByZWNvcmQsXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRlZ29yaWVzOiBjYXRlZ29yaWVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0OiBleHRyYWN0UmVzdWx0KGNhdGVnb3JpZXMsIHJlY29yZCksXG4gICAgICAgICAgICAgICAgICAgICAgICBfcmFua2luZzogY2FsY1JhbmtpbmdIYXZpbmdDYXRlZ29yeShtYXRjaGVkLCBoYXNDYXRlZ29yeSwgbWlzbWF0Y2hlZCwgY250UmVsZXZhbnRXb3JkcylcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmVsZXZhbnRSZWNvcmRzLmZvckVhY2goZnVuY3Rpb24gKHJlY29yZCkge1xuICAgICAgICAgICAgLy8gY291bnQgbWF0Y2hlcyBpbiByZWNvcmQgd2hpY2ggYXJlICpub3QqIHRoZSBjYXRlZ29yeVxuICAgICAgICAgICAgcFNlbnRlbmNlcy5zZW50ZW5jZXMuZm9yRWFjaChmdW5jdGlvbiAoYVNlbnRlbmNlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGhhc0NhdGVnb3J5ID0ge307XG4gICAgICAgICAgICAgICAgdmFyIG1pc21hdGNoZWQgPSB7fTtcbiAgICAgICAgICAgICAgICB2YXIgbWF0Y2hlZCA9IHt9O1xuICAgICAgICAgICAgICAgIHZhciBjbnRSZWxldmFudFdvcmRzID0gMDtcbiAgICAgICAgICAgICAgICBhU2VudGVuY2UuZm9yRWFjaChmdW5jdGlvbiAob1dvcmQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFXb3JkLldvcmQuaXNGaWxsZXIob1dvcmQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbnRSZWxldmFudFdvcmRzID0gY250UmVsZXZhbnRXb3JkcyArIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob1dvcmQuY2F0ZWdvcnkgJiYgKHJlY29yZFtvV29yZC5jYXRlZ29yeV0gIT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob1dvcmQubWF0Y2hlZFN0cmluZyA9PT0gcmVjb3JkW29Xb3JkLmNhdGVnb3J5XSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaGVkW29Xb3JkLmNhdGVnb3J5XSA9IG9Xb3JkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWlzbWF0Y2hlZFtvV29yZC5jYXRlZ29yeV0gPSBvV29yZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChXb3JkLldvcmQuaXNDYXRlZ29yeShvV29yZCkgJiYgcmVjb3JkW29Xb3JkLm1hdGNoZWRTdHJpbmddKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzQ2F0ZWdvcnlbb1dvcmQubWF0Y2hlZFN0cmluZ10gPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKChPYmplY3Qua2V5cyhtYXRjaGVkKS5sZW5ndGggKyBPYmplY3Qua2V5cyhoYXNDYXRlZ29yeSkubGVuZ3RoKSA+IE9iamVjdC5rZXlzKG1pc21hdGNoZWQpLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICByZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZW50ZW5jZTogYVNlbnRlbmNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVjb3JkOiByZWNvcmQsXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRlZ29yaWVzOiBjYXRlZ29yaWVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0OiBleHRyYWN0UmVzdWx0KGNhdGVnb3JpZXMsIHJlY29yZCksXG4gICAgICAgICAgICAgICAgICAgICAgICBfcmFua2luZzogY2FsY1JhbmtpbmdIYXZpbmdDYXRlZ29yeShtYXRjaGVkLCBoYXNDYXRlZ29yeSwgbWlzbWF0Y2hlZCwgY250UmVsZXZhbnRXb3JkcylcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXMuc29ydChjbXBCeVJlc3VsdFRoZW5SYW5raW5nVHVwZWwpO1xuICAgIHZhciByZXN1bHQxID0gT2JqZWN0LmFzc2lnbih7IHR1cGVsYW5zd2VyczogcmVzIH0sIHBTZW50ZW5jZXMpO1xuICAgIHJldHVybiBmaWx0ZXJSZXRhaW5Ub3BSYW5rZWRSZXN1bHRUdXBlbChyZXN1bHQxKTtcbn1cbmV4cG9ydHMubWF0Y2hSZWNvcmRzVHVwZWxIYXZpbmdDb250ZXh0ID0gbWF0Y2hSZWNvcmRzVHVwZWxIYXZpbmdDb250ZXh0O1xuZnVuY3Rpb24gbWF0Y2hSZWNvcmRzKGFTZW50ZW5jZXMsIGNhdGVnb3J5LCByZWNvcmRzKSB7XG4gICAgLy8gaWYgKGRlYnVnbG9nLmVuYWJsZWQpIHtcbiAgICAvLyAgIGRlYnVnbG9nKEpTT04uc3RyaW5naWZ5KHJlY29yZHMsIHVuZGVmaW5lZCwgMikpO1xuICAgIC8vIH1cbiAgICB2YXIgcmVsZXZhbnRSZWNvcmRzID0gcmVjb3Jkcy5maWx0ZXIoZnVuY3Rpb24gKHJlY29yZCkge1xuICAgICAgICByZXR1cm4gKHJlY29yZFtjYXRlZ29yeV0gIT09IHVuZGVmaW5lZCkgJiYgKHJlY29yZFtjYXRlZ29yeV0gIT09IG51bGwpO1xuICAgIH0pO1xuICAgIHZhciByZXMgPSBbXTtcbiAgICBkZWJ1Z2xvZyhcInJlbGV2YW50IHJlY29yZHMgbnI6XCIgKyByZWxldmFudFJlY29yZHMubGVuZ3RoKTtcbiAgICByZWxldmFudFJlY29yZHMuZm9yRWFjaChmdW5jdGlvbiAocmVjb3JkKSB7XG4gICAgICAgIGFTZW50ZW5jZXMuc2VudGVuY2VzLmZvckVhY2goZnVuY3Rpb24gKGFTZW50ZW5jZSkge1xuICAgICAgICAgICAgLy8gY291bnQgbWF0Y2hlcyBpbiByZWNvcmQgd2hpY2ggYXJlICpub3QqIHRoZSBjYXRlZ29yeVxuICAgICAgICAgICAgdmFyIG1pc21hdGNoZWQgPSB7fTtcbiAgICAgICAgICAgIHZhciBtYXRjaGVkID0ge307XG4gICAgICAgICAgICB2YXIgY250UmVsZXZhbnRXb3JkcyA9IDA7XG4gICAgICAgICAgICBhU2VudGVuY2UuZm9yRWFjaChmdW5jdGlvbiAob1dvcmQpIHtcbiAgICAgICAgICAgICAgICBpZiAoIVdvcmQuV29yZC5pc0ZpbGxlcihvV29yZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY250UmVsZXZhbnRXb3JkcyA9IGNudFJlbGV2YW50V29yZHMgKyAxO1xuICAgICAgICAgICAgICAgICAgICBpZiAob1dvcmQuY2F0ZWdvcnkgJiYgKHJlY29yZFtvV29yZC5jYXRlZ29yeV0gIT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvV29yZC5tYXRjaGVkU3RyaW5nID09PSByZWNvcmRbb1dvcmQuY2F0ZWdvcnldKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlZFtvV29yZC5jYXRlZ29yeV0gPSBvV29yZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pc21hdGNoZWRbb1dvcmQuY2F0ZWdvcnldID0gb1dvcmQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhtYXRjaGVkKS5sZW5ndGggPiBPYmplY3Qua2V5cyhtaXNtYXRjaGVkKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICByZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHNlbnRlbmNlOiBhU2VudGVuY2UsXG4gICAgICAgICAgICAgICAgICAgIHJlY29yZDogcmVjb3JkLFxuICAgICAgICAgICAgICAgICAgICBjYXRlZ29yeTogY2F0ZWdvcnksXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdDogcmVjb3JkW2NhdGVnb3J5XSxcbiAgICAgICAgICAgICAgICAgICAgX3Jhbmtpbmc6IGNhbGNSYW5raW5nKG1hdGNoZWQsIG1pc21hdGNoZWQsIGNudFJlbGV2YW50V29yZHMpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJlcy5zb3J0KGNtcEJ5UmVzdWx0VGhlblJhbmtpbmcpO1xuICAgIHZhciByZXN1bHQgPSBPYmplY3QuYXNzaWduKHt9LCBhU2VudGVuY2VzLCB7IGFuc3dlcnM6IHJlcyB9KTtcbiAgICByZXR1cm4gZmlsdGVyUmV0YWluVG9wUmFua2VkUmVzdWx0KHJlc3VsdCk7XG59XG5leHBvcnRzLm1hdGNoUmVjb3JkcyA9IG1hdGNoUmVjb3JkcztcbmZ1bmN0aW9uIG1hdGNoUmVjb3Jkc1F1aWNrKGFTZW50ZW5jZXMsIGNhdGVnb3J5LCByZWNvcmRzLCBjYXRlZ29yeVNldCkge1xuICAgIC8vaWYgKGRlYnVnbG9nLmVuYWJsZWQpIHtcbiAgICAvLyAgZGVidWdsb2coSlNPTi5zdHJpbmdpZnkocmVjb3JkcywgdW5kZWZpbmVkLCAyKSk7XG4gICAgLy99XG4gICAgT2JqZWN0LmZyZWV6ZShjYXRlZ29yeVNldCk7XG4gICAgcGVyZmxvZyhcIm1hdGNoUmVjb3Jkc1F1aWNrIC4uLihyPVwiICsgcmVjb3Jkcy5sZW5ndGggKyBcIiBzPVwiICsgYVNlbnRlbmNlcy5zZW50ZW5jZXMubGVuZ3RoICsgXCIpXCIpO1xuICAgIHZhciByZWxldmFudFJlY29yZHMgPSByZWNvcmRzLmZpbHRlcihmdW5jdGlvbiAocmVjb3JkKSB7XG4gICAgICAgIHJldHVybiAocmVjb3JkW2NhdGVnb3J5XSAhPT0gdW5kZWZpbmVkKSAmJiAocmVjb3JkW2NhdGVnb3J5XSAhPT0gbnVsbCk7XG4gICAgfSk7XG4gICAgdmFyIHJlcyA9IFtdO1xuICAgIGRlYnVnbG9nKFwibWF0Y2hSZWNvcmRzUXVpY2s6IHJlbGV2YW50IHJlY29yZHMgKHI9XCIgKyByZWxldmFudFJlY29yZHMubGVuZ3RoICsgXCIpIHNlbnRlbmNlcyBcIiArIGFTZW50ZW5jZXMuc2VudGVuY2VzLmxlbmd0aCk7XG4gICAgcGVyZmxvZyhcInJlbGV2YW50IHJlY29yZHMgbnI6XCIgKyByZWxldmFudFJlY29yZHMubGVuZ3RoICsgXCIgc2VudGVuY2VzIFwiICsgYVNlbnRlbmNlcy5zZW50ZW5jZXMubGVuZ3RoKTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuQUJPVF9GQVNUICYmIGNhdGVnb3J5U2V0KSB7XG4gICAgICAgIC8vIHdlIGFyZSBvbmx5IGludGVyZXN0ZWQgaW4gY2F0ZWdvcmllcyBwcmVzZW50IGluIHJlY29yZHMgZm9yIGRvbWFpbnMgd2hpY2ggY29udGFpbiB0aGUgY2F0ZWdvcnlcbiAgICAgICAgLy8gdmFyIGNhdGVnb3J5c2V0ID0gTW9kZWwuY2FsY3VsYXRlUmVsZXZhbnRSZWNvcmRDYXRlZ29yaWVzKHRoZU1vZGVsLGNhdGVnb3J5KTtcbiAgICAgICAgLy9rbm93aW5nIHRoZSB0YXJnZXRcbiAgICAgICAgcGVyZmxvZyhcImdvdCBjYXRlZ29yeXNldCB3aXRoIFwiICsgT2JqZWN0LmtleXMoY2F0ZWdvcnlTZXQpLmxlbmd0aCk7XG4gICAgICAgIHZhciBmbCA9IDA7XG4gICAgICAgIHZhciBsZiA9IDA7XG4gICAgICAgIHZhciBhU2ltcGxpZmllZFNlbnRlbmNlcyA9IGFTZW50ZW5jZXMuc2VudGVuY2VzLm1hcChmdW5jdGlvbiAob1NlbnRlbmNlKSB7XG4gICAgICAgICAgICB2YXIgcldvcmRzID0gb1NlbnRlbmNlLmZpbHRlcihmdW5jdGlvbiAob1dvcmQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gISFjYXRlZ29yeVNldFtvV29yZC5jYXRlZ29yeV07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGZsID0gZmwgKyBvU2VudGVuY2UubGVuZ3RoO1xuICAgICAgICAgICAgbGYgPSBsZiArIHJXb3Jkcy5sZW5ndGg7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG9TZW50ZW5jZTogb1NlbnRlbmNlLFxuICAgICAgICAgICAgICAgIGNudFJlbGV2YW50V29yZHM6IHJXb3Jkcy5sZW5ndGgsXG4gICAgICAgICAgICAgICAgcldvcmRzOiByV29yZHNcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgICBwZXJmbG9nKFwicG9zdCBzaW1wbGlmeSAocj1cIiArIHJlbGV2YW50UmVjb3Jkcy5sZW5ndGggKyBcIiBzPVwiICsgYVNlbnRlbmNlcy5zZW50ZW5jZXMubGVuZ3RoICsgXCIgZmwgXCIgKyBmbCArIFwiLT5cIiArIGxmICsgXCIpXCIpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdmFyIGZsID0gMDtcbiAgICAgICAgdmFyIGxmID0gMDtcbiAgICAgICAgdmFyIGFTaW1wbGlmaWVkU2VudGVuY2VzID0gYVNlbnRlbmNlcy5zZW50ZW5jZXMubWFwKGZ1bmN0aW9uIChvU2VudGVuY2UpIHtcbiAgICAgICAgICAgIHZhciByV29yZHMgPSBvU2VudGVuY2UuZmlsdGVyKGZ1bmN0aW9uIChvV29yZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAhV29yZC5Xb3JkLmlzRmlsbGVyKG9Xb3JkKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZmwgPSBmbCArIG9TZW50ZW5jZS5sZW5ndGg7XG4gICAgICAgICAgICBsZiA9IGxmICsgcldvcmRzLmxlbmd0aDtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgb1NlbnRlbmNlOiBvU2VudGVuY2UsXG4gICAgICAgICAgICAgICAgY250UmVsZXZhbnRXb3JkczogcldvcmRzLmxlbmd0aCxcbiAgICAgICAgICAgICAgICByV29yZHM6IHJXb3Jkc1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICAgIHBlcmZsb2coXCJwb3N0IHNpbXBsaWZ5IChyPVwiICsgcmVsZXZhbnRSZWNvcmRzLmxlbmd0aCArIFwiIHM9XCIgKyBhU2VudGVuY2VzLnNlbnRlbmNlcy5sZW5ndGggKyBcIiBmbCBcIiArIGZsICsgXCItPlwiICsgbGYgKyBcIilcIik7XG4gICAgfVxuICAgIHJlbGV2YW50UmVjb3Jkcy5mb3JFYWNoKGZ1bmN0aW9uIChyZWNvcmQpIHtcbiAgICAgICAgYVNpbXBsaWZpZWRTZW50ZW5jZXMuZm9yRWFjaChmdW5jdGlvbiAoYVNlbnRlbmNlKSB7XG4gICAgICAgICAgICAvLyBjb3VudCBtYXRjaGVzIGluIHJlY29yZCB3aGljaCBhcmUgKm5vdCogdGhlIGNhdGVnb3J5XG4gICAgICAgICAgICB2YXIgbWlzbWF0Y2hlZCA9IDA7XG4gICAgICAgICAgICB2YXIgbWF0Y2hlZCA9IDA7XG4gICAgICAgICAgICB2YXIgbm91c2UgPSAwO1xuICAgICAgICAgICAgdmFyIG1pc3NpbmdjYXQgPSAwO1xuICAgICAgICAgICAgYVNlbnRlbmNlLnJXb3Jkcy5mb3JFYWNoKGZ1bmN0aW9uIChvV29yZCkge1xuICAgICAgICAgICAgICAgIGlmIChyZWNvcmRbb1dvcmQuY2F0ZWdvcnldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9Xb3JkLm1hdGNoZWRTdHJpbmcgPT09IHJlY29yZFtvV29yZC5jYXRlZ29yeV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICsrbWF0Y2hlZDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICsrbWlzbWF0Y2hlZDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9Xb3JkLmNhdGVnb3J5ICE9PSBcImNhdGVnb3J5XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vdXNlICs9IDE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXJlY29yZFtvV29yZC5tYXRjaGVkU3RyaW5nXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pc3NpbmdjYXQgKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gaWYobWF0Y2hlZCA+IDAgfHwgbWlzbWF0Y2hlZCA+IDAgKSB7XG4gICAgICAgICAgICAvLyAgIGNvbnNvbGUubG9nKFwiIG1cIiArIG1hdGNoZWQgKyBcIiBtaXNtYXRjaGVkXCIgKyBtaXNtYXRjaGVkKTtcbiAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkoYVNlbnRlbmNlLm9TZW50ZW5jZSkpO1xuICAgICAgICAgICAgaWYgKG1hdGNoZWQgPiBtaXNtYXRjaGVkKSB7XG4gICAgICAgICAgICAgICAgcmVzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBzZW50ZW5jZTogYVNlbnRlbmNlLm9TZW50ZW5jZSxcbiAgICAgICAgICAgICAgICAgICAgcmVjb3JkOiByZWNvcmQsXG4gICAgICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBjYXRlZ29yeSxcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0OiByZWNvcmRbY2F0ZWdvcnldLFxuICAgICAgICAgICAgICAgICAgICBfcmFua2luZzogY2FsY1JhbmtpbmdTaW1wbGUobWF0Y2hlZCwgbWlzbWF0Y2hlZCwgKG5vdXNlICsgbWlzc2luZ2NhdCksIGFTZW50ZW5jZS5jbnRSZWxldmFudFdvcmRzKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICBwZXJmbG9nKFwic29ydCAoYT1cIiArIHJlcy5sZW5ndGggKyBcIilcIik7XG4gICAgcmVzLnNvcnQoY21wQnlSZXN1bHRUaGVuUmFua2luZyk7XG4gICAgcGVyZmxvZyhcImZpbHRlclJldGFpbiAuLi5cIik7XG4gICAgdmFyIHJlc3VsdDIgPSBPYmplY3QuYXNzaWduKHsgYW5zd2VyczogcmVzIH0sIGFTZW50ZW5jZXMpO1xuICAgIHZhciByZXN1bHQgPSBmaWx0ZXJSZXRhaW5Ub3BSYW5rZWRSZXN1bHQocmVzdWx0Mik7XG4gICAgZGVidWdsb2coXCJtYXRjaFJlY29yZHNRdWljayBkb25lOiAocj1cIiArIHJlbGV2YW50UmVjb3Jkcy5sZW5ndGggKyBcIiBzPVwiICsgYVNlbnRlbmNlcy5zZW50ZW5jZXMubGVuZ3RoICsgXCIgYT1cIiArIHJlc3VsdC5hbnN3ZXJzLmxlbmd0aCArIFwiKVwiKTtcbiAgICBwZXJmbG9nKFwibWF0Y2hSZWNvcmRzUXVpY2sgZG9uZTogKHI9XCIgKyByZWxldmFudFJlY29yZHMubGVuZ3RoICsgXCIgcz1cIiArIGFTZW50ZW5jZXMuc2VudGVuY2VzLmxlbmd0aCArIFwiIGE9XCIgKyByZXN1bHQuYW5zd2Vycy5sZW5ndGggKyBcIilcIik7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydHMubWF0Y2hSZWNvcmRzUXVpY2sgPSBtYXRjaFJlY29yZHNRdWljaztcbmZ1bmN0aW9uIGV4dHJhY3RSZXN1bHQoY2F0ZWdvcmllcywgcmVjb3JkKSB7XG4gICAgcmV0dXJuIGNhdGVnb3JpZXMubWFwKGZ1bmN0aW9uIChjYXRlZ29yeSkgeyByZXR1cm4gcmVjb3JkW2NhdGVnb3J5XSB8fCBcIm4vYVwiOyB9KTtcbn1cbmZ1bmN0aW9uIG1hdGNoUmVjb3Jkc1F1aWNrTXVsdGlwbGVDYXRlZ29yaWVzKHBTZW50ZW5jZXMsIGNhdGVnb3JpZXMsIHJlY29yZHMsIGNhdGVnb3J5U2V0KSB7XG4gICAgLy8gaWYgKGRlYnVnbG9nLmVuYWJsZWQpIHtcbiAgICAvLyAgZGVidWdsb2coSlNPTi5zdHJpbmdpZnkocmVjb3JkcywgdW5kZWZpbmVkLCAyKSk7XG4gICAgLy8gfVxuICAgIE9iamVjdC5mcmVlemUoY2F0ZWdvcnlTZXQpO1xuICAgIHZhciBjYXRlZ29yeUYgPSBjYXRlZ29yaWVzWzBdO1xuICAgIGRlYnVnbG9nKFwibWF0Y2hSZWNvcmRzUXVpY2tNdWx0aXBsZUNhdGVnb3JpZXMgKHI9XCIgKyByZWNvcmRzLmxlbmd0aCArIFwiIHM9XCIgKyBwU2VudGVuY2VzLnNlbnRlbmNlcy5sZW5ndGggKyBcIilcXG4gY2F0ZWdvcmllczpcIiArIGNhdGVnb3JpZXMuam9pbihcIlxcblwiKSk7XG4gICAgcGVyZmxvZyhcIm1hdGNoUmVjb3Jkc1F1aWNrTXVsdCAuLi4ocj1cIiArIHJlY29yZHMubGVuZ3RoICsgXCIgcz1cIiArIHBTZW50ZW5jZXMuc2VudGVuY2VzLmxlbmd0aCArIFwiKVwiKTtcbiAgICB2YXIgcmVsZXZhbnRSZWNvcmRzID0gcmVjb3Jkcy5maWx0ZXIoZnVuY3Rpb24gKHJlY29yZCkge1xuICAgICAgICByZXR1cm4gKHJlY29yZFtjYXRlZ29yeUZdICE9PSB1bmRlZmluZWQpICYmIChyZWNvcmRbY2F0ZWdvcnlGXSAhPT0gbnVsbCk7XG4gICAgfSk7XG4gICAgdmFyIHJlcyA9IFtdO1xuICAgIGRlYnVnbG9nKFwicmVsZXZhbnQgcmVjb3JkcyB3aXRoIGZpcnN0IChyPVwiICsgcmVsZXZhbnRSZWNvcmRzLmxlbmd0aCArIFwiKVwiKTtcbiAgICBwZXJmbG9nKFwicmVsZXZhbnQgcmVjb3JkcyB3aXRoIGZpcnN0IG5yOlwiICsgcmVsZXZhbnRSZWNvcmRzLmxlbmd0aCArIFwiIHNlbnRlbmNlcyBcIiArIHBTZW50ZW5jZXMuc2VudGVuY2VzLmxlbmd0aCk7XG4gICAgaWYgKHByb2Nlc3MuZW52LkFCT1RfRkFTVCAmJiBjYXRlZ29yeVNldCkge1xuICAgICAgICAvLyB3ZSBhcmUgb25seSBpbnRlcmVzdGVkIGluIGNhdGVnb3JpZXMgcHJlc2VudCBpbiByZWNvcmRzIGZvciBkb21haW5zIHdoaWNoIGNvbnRhaW4gdGhlIGNhdGVnb3J5XG4gICAgICAgIC8vIHZhciBjYXRlZ29yeXNldCA9IE1vZGVsLmNhbGN1bGF0ZVJlbGV2YW50UmVjb3JkQ2F0ZWdvcmllcyh0aGVNb2RlbCxjYXRlZ29yeSk7XG4gICAgICAgIC8va25vd2luZyB0aGUgdGFyZ2V0XG4gICAgICAgIHBlcmZsb2coXCJnb3QgY2F0ZWdvcnlzZXQgd2l0aCBcIiArIE9iamVjdC5rZXlzKGNhdGVnb3J5U2V0KS5sZW5ndGgpO1xuICAgICAgICB2YXIgZmwgPSAwO1xuICAgICAgICB2YXIgbGYgPSAwO1xuICAgICAgICB2YXIgYVNpbXBsaWZpZWRTZW50ZW5jZXMgPSBwU2VudGVuY2VzLnNlbnRlbmNlcy5tYXAoZnVuY3Rpb24gKG9TZW50ZW5jZSkge1xuICAgICAgICAgICAgdmFyIHJXb3JkcyA9IG9TZW50ZW5jZS5maWx0ZXIoZnVuY3Rpb24gKG9Xb3JkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICEhY2F0ZWdvcnlTZXRbb1dvcmQuY2F0ZWdvcnldO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBmbCA9IGZsICsgb1NlbnRlbmNlLmxlbmd0aDtcbiAgICAgICAgICAgIGxmID0gbGYgKyByV29yZHMubGVuZ3RoO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBvU2VudGVuY2U6IG9TZW50ZW5jZSxcbiAgICAgICAgICAgICAgICBjbnRSZWxldmFudFdvcmRzOiByV29yZHMubGVuZ3RoLFxuICAgICAgICAgICAgICAgIHJXb3JkczogcldvcmRzXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICAgICAgcGVyZmxvZyhcInBvc3Qgc2ltcGxpZnkgKHI9XCIgKyByZWxldmFudFJlY29yZHMubGVuZ3RoICsgXCIgcz1cIiArIHBTZW50ZW5jZXMuc2VudGVuY2VzLmxlbmd0aCArIFwiIGZsIFwiICsgZmwgKyBcIi0+XCIgKyBsZiArIFwiKVwiKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGRlYnVnbG9nKFwibm90IGFib3RfZmFzdCAhXCIpO1xuICAgICAgICB2YXIgZmwgPSAwO1xuICAgICAgICB2YXIgbGYgPSAwO1xuICAgICAgICB2YXIgYVNpbXBsaWZpZWRTZW50ZW5jZXMgPSBwU2VudGVuY2VzLnNlbnRlbmNlcy5tYXAoZnVuY3Rpb24gKG9TZW50ZW5jZSkge1xuICAgICAgICAgICAgdmFyIHJXb3JkcyA9IG9TZW50ZW5jZS5maWx0ZXIoZnVuY3Rpb24gKG9Xb3JkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICFXb3JkLldvcmQuaXNGaWxsZXIob1dvcmQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBmbCA9IGZsICsgb1NlbnRlbmNlLmxlbmd0aDtcbiAgICAgICAgICAgIGxmID0gbGYgKyByV29yZHMubGVuZ3RoO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBvU2VudGVuY2U6IG9TZW50ZW5jZSxcbiAgICAgICAgICAgICAgICBjbnRSZWxldmFudFdvcmRzOiByV29yZHMubGVuZ3RoLFxuICAgICAgICAgICAgICAgIHJXb3JkczogcldvcmRzXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICAgICAgZGVidWdsb2coXCJwb3N0IHNpbXBsaWZ5IChyPVwiICsgcmVsZXZhbnRSZWNvcmRzLmxlbmd0aCArIFwiIHM9XCIgKyBwU2VudGVuY2VzLnNlbnRlbmNlcy5sZW5ndGggKyBcIiBmbCBcIiArIGZsICsgXCItPlwiICsgbGYgKyBcIilcIik7XG4gICAgICAgIHBlcmZsb2coXCJwb3N0IHNpbXBsaWZ5IChyPVwiICsgcmVsZXZhbnRSZWNvcmRzLmxlbmd0aCArIFwiIHM9XCIgKyBwU2VudGVuY2VzLnNlbnRlbmNlcy5sZW5ndGggKyBcIiBmbCBcIiArIGZsICsgXCItPlwiICsgbGYgKyBcIilcIik7XG4gICAgfVxuICAgIHJlbGV2YW50UmVjb3Jkcy5mb3JFYWNoKGZ1bmN0aW9uIChyZWNvcmQpIHtcbiAgICAgICAgYVNpbXBsaWZpZWRTZW50ZW5jZXMuZm9yRWFjaChmdW5jdGlvbiAoYVNlbnRlbmNlKSB7XG4gICAgICAgICAgICAvLyBjb3VudCBtYXRjaGVzIGluIHJlY29yZCB3aGljaCBhcmUgKm5vdCogdGhlIGNhdGVnb3J5XG4gICAgICAgICAgICB2YXIgbWlzbWF0Y2hlZCA9IDA7XG4gICAgICAgICAgICB2YXIgbWF0Y2hlZCA9IDA7XG4gICAgICAgICAgICB2YXIgbm91c2UgPSAwO1xuICAgICAgICAgICAgdmFyIG1pc3NpbmdjYXQgPSAwO1xuICAgICAgICAgICAgYVNlbnRlbmNlLnJXb3Jkcy5mb3JFYWNoKGZ1bmN0aW9uIChvV29yZCkge1xuICAgICAgICAgICAgICAgIGlmIChyZWNvcmRbb1dvcmQuY2F0ZWdvcnldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9Xb3JkLm1hdGNoZWRTdHJpbmcgPT09IHJlY29yZFtvV29yZC5jYXRlZ29yeV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICsrbWF0Y2hlZDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICsrbWlzbWF0Y2hlZDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9Xb3JkLmNhdGVnb3J5ICE9PSBcImNhdGVnb3J5XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vdXNlICs9IDE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXJlY29yZFtvV29yZC5tYXRjaGVkU3RyaW5nXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pc3NpbmdjYXQgKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gaWYobWF0Y2hlZCA+IDAgfHwgbWlzbWF0Y2hlZCA+IDAgKSB7XG4gICAgICAgICAgICAvLyAgIGNvbnNvbGUubG9nKFwiIG1cIiArIG1hdGNoZWQgKyBcIiBtaXNtYXRjaGVkXCIgKyBtaXNtYXRjaGVkKTtcbiAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkoYVNlbnRlbmNlLm9TZW50ZW5jZSkpO1xuICAgICAgICAgICAgaWYgKG1hdGNoZWQgPiBtaXNtYXRjaGVkKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlYyA9IHtcbiAgICAgICAgICAgICAgICAgICAgc2VudGVuY2U6IGFTZW50ZW5jZS5vU2VudGVuY2UsXG4gICAgICAgICAgICAgICAgICAgIHJlY29yZDogcmVjb3JkLFxuICAgICAgICAgICAgICAgICAgICBjYXRlZ29yaWVzOiBjYXRlZ29yaWVzLFxuICAgICAgICAgICAgICAgICAgICByZXN1bHQ6IGV4dHJhY3RSZXN1bHQoY2F0ZWdvcmllcywgcmVjb3JkKSxcbiAgICAgICAgICAgICAgICAgICAgX3Jhbmtpbmc6IGNhbGNSYW5raW5nU2ltcGxlKG1hdGNoZWQsIG1pc21hdGNoZWQsIChub3VzZSArIG1pc3NpbmdjYXQpLCBhU2VudGVuY2UuY250UmVsZXZhbnRXb3JkcylcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIC8qICAgaWYocmVjb3JkW1wiYXBwSWRcIl0gPT09XCJGMTU2NlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImhlcmUgRjE1NjZcIiArIEpTT04uc3RyaW5naWZ5KHJlYykpO1xuICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJoZXJlIG1hdGNoZWRcIiArIG1hdGNoZWQgKyBcIiBtaXNtYXRjaGVkXCIgKyBtaXNtYXRjaGVkICsgXCIgbm91c2UgXCIgKyAobm91c2UgKyBtaXNzaW5nY2F0KSk7XG4gICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImhlcmUgY250UmVsZXZhbnQgOlwiICsgYVNlbnRlbmNlLmNudFJlbGV2YW50V29yZHMpO1xuICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICBpZihyZWNvcmRbXCJhcHBJZFwiXSA9PT1cIkYwNzMxQVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImhlcmUgRjA3MzFBXCIgKyBKU09OLnN0cmluZ2lmeShyZWMpKTtcbiAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiaGVyZSBtYXRjaGVkXCIgKyBtYXRjaGVkICsgXCIgbWlzbWF0Y2hlZFwiICsgbWlzbWF0Y2hlZCArIFwiIG5vdXNlIFwiICsgKG5vdXNlICsgbWlzc2luZ2NhdCkpO1xuICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJoZXJlIGNudFJlbGV2YW50IDpcIiArIGFTZW50ZW5jZS5jbnRSZWxldmFudFdvcmRzKTtcbiAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICByZXMucHVzaChyZWMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICBwZXJmbG9nKFwic29ydCAoYT1cIiArIHJlcy5sZW5ndGggKyBcIilcIik7XG4gICAgcmVzLnNvcnQoY21wQnlSZXN1bHRUaGVuUmFua2luZ1R1cGVsKTtcbiAgICBwZXJmbG9nKFwiZmlsdGVyUmV0YWluIC4uLlwiKTtcbiAgICB2YXIgcmVzdWx0MSA9IE9iamVjdC5hc3NpZ24oeyB0dXBlbGFuc3dlcnM6IHJlcyB9LCBwU2VudGVuY2VzKTtcbiAgICB2YXIgcmVzdWx0MiA9IGZpbHRlclJldGFpblRvcFJhbmtlZFJlc3VsdFR1cGVsKHJlc3VsdDEpO1xuICAgIHBlcmZsb2coXCJtYXRjaFJlY29yZHNRdWljayBkb25lOiAocj1cIiArIHJlbGV2YW50UmVjb3Jkcy5sZW5ndGggKyBcIiBzPVwiICsgcFNlbnRlbmNlcy5zZW50ZW5jZXMubGVuZ3RoICsgXCIgYT1cIiArIHJlcy5sZW5ndGggKyBcIilcIik7XG4gICAgcmV0dXJuIHJlc3VsdDI7XG59XG5leHBvcnRzLm1hdGNoUmVjb3Jkc1F1aWNrTXVsdGlwbGVDYXRlZ29yaWVzID0gbWF0Y2hSZWNvcmRzUXVpY2tNdWx0aXBsZUNhdGVnb3JpZXM7XG5mdW5jdGlvbiBjbGFzc2lmeVdvcmRXaXRoVGFyZ2V0Q2F0ZWdvcnkod29yZCwgdGFyZ2V0Y2F0ZWdvcnksIHJ1bGVzLCB3aG9sZXNlbnRlbmNlKSB7XG4gICAgLy9jb25zb2xlLmxvZyhcImNsYXNzaWZ5IFwiICsgd29yZCArIFwiIFwiICArIHRhcmdldGNhdGVnb3J5KTtcbiAgICB2YXIgY2F0cyA9IElucHV0RmlsdGVyLmNhdGVnb3JpemVBV29yZCh3b3JkLCBydWxlcywgd2hvbGVzZW50ZW5jZSwge30pO1xuICAgIC8vIFRPRE8gcXVhbGlmeVxuICAgIGNhdHMgPSBjYXRzLmZpbHRlcihmdW5jdGlvbiAoY2F0KSB7XG4gICAgICAgIHJldHVybiBjYXQuY2F0ZWdvcnkgPT09IHRhcmdldGNhdGVnb3J5O1xuICAgIH0pO1xuICAgIGRlYnVnbG9nKEpTT04uc3RyaW5naWZ5KGNhdHMpKTtcbiAgICBpZiAoY2F0cy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGNhdHNbMF0ubWF0Y2hlZFN0cmluZztcbiAgICB9XG59XG5mdW5jdGlvbiBhbmFseXplQ2F0ZWdvcnkoY2F0ZWdvcnl3b3JkLCBydWxlcywgd2hvbGVzZW50ZW5jZSkge1xuICAgIHJldHVybiBjbGFzc2lmeVdvcmRXaXRoVGFyZ2V0Q2F0ZWdvcnkoY2F0ZWdvcnl3b3JkLCAnY2F0ZWdvcnknLCBydWxlcywgd2hvbGVzZW50ZW5jZSk7XG59XG5leHBvcnRzLmFuYWx5emVDYXRlZ29yeSA9IGFuYWx5emVDYXRlZ29yeTtcbmZ1bmN0aW9uIHNwbGl0QXRDb21tYUFuZChzdHIpIHtcbiAgICB2YXIgciA9IHN0ci5zcGxpdCgvKFxcYmFuZFxcYil8WyxdLyk7XG4gICAgciA9IHIuZmlsdGVyKGZ1bmN0aW9uIChvLCBpbmRleCkge1xuICAgICAgICBpZiAoaW5kZXggJSAyID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pO1xuICAgIHZhciBydHJpbW1lZCA9IHIubWFwKGZ1bmN0aW9uIChvKSB7XG4gICAgICAgIHJldHVybiBuZXcgU3RyaW5nKG8pLnRyaW0oKTtcbiAgICB9KTtcbiAgICByZXR1cm4gcnRyaW1tZWQ7XG59XG5leHBvcnRzLnNwbGl0QXRDb21tYUFuZCA9IHNwbGl0QXRDb21tYUFuZDtcbi8qKlxuICogQSBzaW1wbGUgaW1wbGVtZW50YXRpb24sIHNwbGl0dGluZyBhdCBhbmQgYW5kICxcbiAqL1xuZnVuY3Rpb24gYW5hbHl6ZUNhdGVnb3J5TXVsdE9ubHlBbmRDb21tYShjYXRlZ29yeWxpc3QsIHJ1bGVzLCB3aG9sZXNlbnRlbmNlKSB7XG4gICAgdmFyIHJ0cmltbWVkID0gc3BsaXRBdENvbW1hQW5kKGNhdGVnb3J5bGlzdCk7XG4gICAgdmFyIHJjYXQgPSBydHJpbW1lZC5tYXAoZnVuY3Rpb24gKG8pIHtcbiAgICAgICAgcmV0dXJuIGFuYWx5emVDYXRlZ29yeShvLCBydWxlcywgd2hvbGVzZW50ZW5jZSk7XG4gICAgfSk7XG4gICAgaWYgKHJjYXQuaW5kZXhPZih1bmRlZmluZWQpID49IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdcIicgKyBydHJpbW1lZFtyY2F0LmluZGV4T2YodW5kZWZpbmVkKV0gKyAnXCIgaXMgbm90IGEgY2F0ZWdvcnkhJyk7XG4gICAgfVxuICAgIHJldHVybiByY2F0O1xufVxuZXhwb3J0cy5hbmFseXplQ2F0ZWdvcnlNdWx0T25seUFuZENvbW1hID0gYW5hbHl6ZUNhdGVnb3J5TXVsdE9ubHlBbmRDb21tYTtcbmZ1bmN0aW9uIGZpbHRlckFjY2VwdGluZ09ubHkocmVzLCBjYXRlZ29yaWVzKSB7XG4gICAgcmV0dXJuIHJlcy5maWx0ZXIoZnVuY3Rpb24gKGFTZW50ZW5jZSwgaUluZGV4KSB7XG4gICAgICAgIHJldHVybiBhU2VudGVuY2UuZXZlcnkoZnVuY3Rpb24gKG9Xb3JkKSB7XG4gICAgICAgICAgICByZXR1cm4gY2F0ZWdvcmllcy5pbmRleE9mKG9Xb3JkLmNhdGVnb3J5KSA+PSAwO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuZmlsdGVyQWNjZXB0aW5nT25seSA9IGZpbHRlckFjY2VwdGluZ09ubHk7XG52YXIgRXJiYXNlID0gcmVxdWlyZShcIi4vZXJiYXNlXCIpO1xudmFyIHNXb3JkcyA9IHt9O1xuZnVuY3Rpb24gcHJvY2Vzc1N0cmluZyhxdWVyeSwgcnVsZXMpIHtcbiAgICBpZiAoIXByb2Nlc3MuZW52LkFCT1RfT0xETUFUQ0gpIHtcbiAgICAgICAgcmV0dXJuIEVyYmFzZS5wcm9jZXNzU3RyaW5nKHF1ZXJ5LCBydWxlcyk7XG4gICAgfVxuICAgIHZhciBtYXRjaGVkID0gSW5wdXRGaWx0ZXIuYW5hbHl6ZVN0cmluZyhxdWVyeSwgcnVsZXMsIHNXb3Jkcyk7XG4gICAgaWYgKGRlYnVnbG9nLmVuYWJsZWQpIHtcbiAgICAgICAgZGVidWdsb2coXCJBZnRlciBtYXRjaGVkIFwiICsgSlNPTi5zdHJpbmdpZnkobWF0Y2hlZCkpO1xuICAgIH1cbiAgICB2YXIgYVNlbnRlbmNlcyA9IElucHV0RmlsdGVyLmV4cGFuZE1hdGNoQXJyKG1hdGNoZWQpO1xuICAgIGlmIChkZWJ1Z2xvZy5lbmFibGVkKSB7XG4gICAgICAgIGRlYnVnbG9nKFwiYWZ0ZXIgZXhwYW5kXCIgKyBhU2VudGVuY2VzLm1hcChmdW5jdGlvbiAob1NlbnRlbmNlKSB7XG4gICAgICAgICAgICByZXR1cm4gU2VudGVuY2UucmFua2luZ1Byb2R1Y3Qob1NlbnRlbmNlKSArIFwiOlwiICsgSlNPTi5zdHJpbmdpZnkob1NlbnRlbmNlKTtcbiAgICAgICAgfSkuam9pbihcIlxcblwiKSk7XG4gICAgfVxuICAgIHZhciBhU2VudGVuY2VzUmVpbmZvcmNlZCA9IElucHV0RmlsdGVyLnJlaW5Gb3JjZShhU2VudGVuY2VzKTtcbiAgICBpZiAoZGVidWdsb2cuZW5hYmxlZCkge1xuICAgICAgICBkZWJ1Z2xvZyhcImFmdGVyIHJlaW5mb3JjZVwiICsgYVNlbnRlbmNlc1JlaW5mb3JjZWQubWFwKGZ1bmN0aW9uIChvU2VudGVuY2UpIHtcbiAgICAgICAgICAgIHJldHVybiBTZW50ZW5jZS5yYW5raW5nUHJvZHVjdChvU2VudGVuY2UpICsgXCI6XCIgKyBKU09OLnN0cmluZ2lmeShvU2VudGVuY2UpO1xuICAgICAgICB9KS5qb2luKFwiXFxuXCIpKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZXJyb3JzOiBbXSxcbiAgICAgICAgc2VudGVuY2VzOiBhU2VudGVuY2VzUmVpbmZvcmNlZFxuICAgIH07XG59XG5leHBvcnRzLnByb2Nlc3NTdHJpbmcgPSBwcm9jZXNzU3RyaW5nO1xuZnVuY3Rpb24gYW5hbHl6ZUNvbnRleHRTdHJpbmcoY29udGV4dFF1ZXJ5U3RyaW5nLCBydWxlcykge1xuICAgIHZhciBhU2VudGVuY2VzUmVpbmZvcmNlZCA9IHByb2Nlc3NTdHJpbmcoY29udGV4dFF1ZXJ5U3RyaW5nLCBydWxlcyk7XG4gICAgLy8gd2UgbGltaXQgYW5hbHlzaXMgdG8gbiBzZW50ZW5jZXNcbiAgICBhU2VudGVuY2VzUmVpbmZvcmNlZC5zZW50ZW5jZXMgPSBhU2VudGVuY2VzUmVpbmZvcmNlZC5zZW50ZW5jZXMuc2xpY2UoMCwgQWxnb2wuQ3V0b2ZmX1NlbnRlbmNlcyk7XG4gICAgaWYgKGRlYnVnbG9nLmVuYWJsZWQpIHtcbiAgICAgICAgZGVidWdsb2coXCJhZnRlciByZWluZm9yY2UgYW5kIGN1dG9mZlwiICsgYVNlbnRlbmNlc1JlaW5mb3JjZWQuc2VudGVuY2VzLmxlbmd0aCArIFwiXFxuXCIgKyBhU2VudGVuY2VzUmVpbmZvcmNlZC5zZW50ZW5jZXMubWFwKGZ1bmN0aW9uIChvU2VudGVuY2UpIHtcbiAgICAgICAgICAgIHJldHVybiBTZW50ZW5jZS5yYW5raW5nUHJvZHVjdChvU2VudGVuY2UpICsgXCI6XCIgKyBKU09OLnN0cmluZ2lmeShvU2VudGVuY2UpO1xuICAgICAgICB9KS5qb2luKFwiXFxuXCIpKTtcbiAgICB9XG4gICAgcmV0dXJuIGFTZW50ZW5jZXNSZWluZm9yY2VkO1xufVxuZXhwb3J0cy5hbmFseXplQ29udGV4dFN0cmluZyA9IGFuYWx5emVDb250ZXh0U3RyaW5nO1xuZnVuY3Rpb24gY21wQnlOckNhdGVnb3JpZXNBbmRTYW1lRG9tYWluKGEsIGIpIHtcbiAgICAvL2NvbnNvbGUubG9nKFwiY29tcGFyZSBhXCIgKyBhICsgXCIgY250YiBcIiArIGIpO1xuICAgIHZhciBjbnRhID0gU2VudGVuY2UuZ2V0RGlzdGluY3RDYXRlZ29yaWVzSW5TZW50ZW5jZShhKS5sZW5ndGg7XG4gICAgdmFyIGNudGIgPSBTZW50ZW5jZS5nZXREaXN0aW5jdENhdGVnb3JpZXNJblNlbnRlbmNlKGIpLmxlbmd0aDtcbiAgICAvKlxuICAgICAgdmFyIGNudGEgPSBhLnJlZHVjZShmdW5jdGlvbihwcmV2LCBvV29yZCkge1xuICAgICAgICByZXR1cm4gcHJldiArICgob1dvcmQuY2F0ZWdvcnkgPT09IFwiY2F0ZWdvcnlcIik/IDEgOiAwKTtcbiAgICAgIH0sMCk7XG4gICAgICB2YXIgY250YiA9IGIucmVkdWNlKGZ1bmN0aW9uKHByZXYsIG9Xb3JkKSB7XG4gICAgICAgIHJldHVybiBwcmV2ICsgKChvV29yZC5jYXRlZ29yeSA9PT0gXCJjYXRlZ29yeVwiKT8gMSA6IDApO1xuICAgICAgfSwwKTtcbiAgICAgLy8gY29uc29sZS5sb2coXCJjbnQgYVwiICsgY250YSArIFwiIGNudGIgXCIgKyBjbnRiKTtcbiAgICAgKi9cbiAgICByZXR1cm4gY250YiAtIGNudGE7XG59XG5leHBvcnRzLmNtcEJ5TnJDYXRlZ29yaWVzQW5kU2FtZURvbWFpbiA9IGNtcEJ5TnJDYXRlZ29yaWVzQW5kU2FtZURvbWFpbjtcbmZ1bmN0aW9uIGFuYWx5emVDYXRlZ29yeU11bHQoY2F0ZWdvcnlsaXN0LCBydWxlcywgd2hvbGVzZW50ZW5jZSwgZ1dvcmRzKSB7XG4gICAgdmFyIHJlcyA9IGFuYWx5emVDb250ZXh0U3RyaW5nKGNhdGVnb3J5bGlzdCwgcnVsZXMpO1xuICAgIC8vICBkZWJ1Z2xvZyhcInJlc3VsdGluZyBjYXRlZ29yeSBzZW50ZW5jZXNcIiwgSlNPTi5zdHJpbmdpZnkocmVzKSk7XG4gICAgdmFyIHJlczIgPSBmaWx0ZXJBY2NlcHRpbmdPbmx5KHJlcy5zZW50ZW5jZXMsIFtcImNhdGVnb3J5XCIsIFwiZmlsbGVyXCJdKTtcbiAgICByZXMyLnNvcnQoU2VudGVuY2UuY21wUmFua2luZ1Byb2R1Y3QpO1xuICAgIGRlYnVnbG9nKFwicmVzdWx0aW5nIGNhdGVnb3J5IHNlbnRlbmNlczogXFxuXCIsIGRlYnVnbG9nLmVuYWJsZWQgPyAoU2VudGVuY2UuZHVtcE5pY2VBcnIocmVzMi5zbGljZSgwLCAzKSwgU2VudGVuY2UucmFua2luZ1Byb2R1Y3QpKSA6ICctJyk7XG4gICAgLy8gVE9ETzogICByZXMyID0gZmlsdGVyQWNjZXB0aW5nT25seVNhbWVEb21haW4ocmVzMik7XG4gICAgLy9kZWJ1Z2xvZyhcInJlc3VsdGluZyBjYXRlZ29yeSBzZW50ZW5jZXNcIiwgSlNPTi5zdHJpbmdpZnkocmVzMiwgdW5kZWZpbmVkLCAyKSk7XG4gICAgLy8gZXhwZWN0IG9ubHkgY2F0ZWdvcmllc1xuICAgIC8vIHdlIGNvdWxkIHJhbmsgbm93IGJ5IGNvbW1vbiBkb21haW5zICwgYnV0IGZvciBub3cgd2Ugb25seSB0YWtlIHRoZSBmaXJzdCBvbmVcbiAgICBpZiAoIXJlcy5zZW50ZW5jZXMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIC8vcmVzLnNvcnQoY21wQnlOckNhdGVnb3JpZXNBbmRTYW1lRG9tYWluKTtcbiAgICB2YXIgcmVzY2F0ID0gU2VudGVuY2UuZ2V0RGlzdGluY3RDYXRlZ29yaWVzSW5TZW50ZW5jZShyZXMyWzBdKTtcbiAgICByZXR1cm4gcmVzY2F0O1xuICAgIC8vIFwiXCIgcmV0dXJuIHJlc1swXS5maWx0ZXIoKVxuICAgIC8vIHJldHVybiBjbGFzc2lmeVdvcmRXaXRoVGFyZ2V0Q2F0ZWdvcnkoY2F0ZWdvcnlsaXN0LCAnY2F0ZWdvcnknLCBydWxlcywgd2hvbGVzZW50ZW5jZSk7XG59XG5leHBvcnRzLmFuYWx5emVDYXRlZ29yeU11bHQgPSBhbmFseXplQ2F0ZWdvcnlNdWx0O1xuZnVuY3Rpb24gYW5hbHl6ZU9wZXJhdG9yKG9wd29yZCwgcnVsZXMsIHdob2xlc2VudGVuY2UpIHtcbiAgICByZXR1cm4gY2xhc3NpZnlXb3JkV2l0aFRhcmdldENhdGVnb3J5KG9wd29yZCwgJ29wZXJhdG9yJywgcnVsZXMsIHdob2xlc2VudGVuY2UpO1xufVxuZXhwb3J0cy5hbmFseXplT3BlcmF0b3IgPSBhbmFseXplT3BlcmF0b3I7XG52YXIgRXJFcnJvciA9IHJlcXVpcmUoXCIuL2VyZXJyb3JcIik7XG4vLyBjb25zdCByZXN1bHQgPSBXaGF0SXMucmVzb2x2ZUNhdGVnb3J5KGNhdCwgYTEuZW50aXR5LFxuLy8gICB0aGVNb2RlbC5tUnVsZXMsIHRoZU1vZGVsLnRvb2xzLCB0aGVNb2RlbC5yZWNvcmRzKTtcbmZ1bmN0aW9uIHJlc29sdmVDYXRlZ29yeShjYXRlZ29yeSwgY29udGV4dFF1ZXJ5U3RyaW5nLCBydWxlcywgcmVjb3Jkcykge1xuICAgIGlmIChjb250ZXh0UXVlcnlTdHJpbmcubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiB7IGVycm9yczogW0VyRXJyb3IubWFrZUVycm9yX0VNUFRZX0lOUFVUKCldLCB0b2tlbnM6IFtdLCBhbnN3ZXJzOiBbXSB9O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLypcbiAgICAgICAgICAgIHZhciBtYXRjaGVkID0gSW5wdXRGaWx0ZXIuYW5hbHl6ZVN0cmluZyhjb250ZXh0UXVlcnlTdHJpbmcsIHJ1bGVzKTtcbiAgICAgICAgICAgIGRlYnVnbG9nKGRlYnVnbG9nLmVuYWJsZWQgPyAoXCJhZnRlciBtYXRjaGVkIFwiICsgSlNPTi5zdHJpbmdpZnkobWF0Y2hlZCkpOiAnLScpO1xuICAgICAgICAgICAgdmFyIGFTZW50ZW5jZXMgPSBJbnB1dEZpbHRlci5leHBhbmRNYXRjaEFycihtYXRjaGVkKTtcbiAgICAgICAgICAgIGlmKGRlYnVnbG9nLmVuYWJsZWQpIHtcbiAgICAgICAgICAgICAgZGVidWdsb2coXCJhZnRlciBleHBhbmRcIiArIGFTZW50ZW5jZXMubWFwKGZ1bmN0aW9uIChvU2VudGVuY2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gU2VudGVuY2UucmFua2luZ1Byb2R1Y3Qob1NlbnRlbmNlKSArIFwiOlwiICsgSlNPTi5zdHJpbmdpZnkob1NlbnRlbmNlKTtcbiAgICAgICAgICAgICAgfSkuam9pbihcIlxcblwiKSk7XG4gICAgICAgICAgfSAqL1xuICAgICAgICB2YXIgYVNlbnRlbmNlc1JlaW5mb3JjZWQgPSBwcm9jZXNzU3RyaW5nKGNvbnRleHRRdWVyeVN0cmluZywgcnVsZXMpO1xuICAgICAgICAvL2FTZW50ZW5jZXMubWFwKGZ1bmN0aW9uKG9TZW50ZW5jZSkgeyByZXR1cm4gSW5wdXRGaWx0ZXIucmVpbkZvcmNlKG9TZW50ZW5jZSk7IH0pO1xuICAgICAgICBkZWJ1Z2xvZyhkZWJ1Z2xvZy5lbmFibGVkID8gKFwiYWZ0ZXIgcmVpbmZvcmNlXCIgKyBhU2VudGVuY2VzUmVpbmZvcmNlZC5zZW50ZW5jZXMubWFwKGZ1bmN0aW9uIChvU2VudGVuY2UpIHtcbiAgICAgICAgICAgIHJldHVybiBTZW50ZW5jZS5yYW5raW5nUHJvZHVjdChvU2VudGVuY2UpICsgXCI6XCIgKyBKU09OLnN0cmluZ2lmeShvU2VudGVuY2UpO1xuICAgICAgICB9KS5qb2luKFwiXFxuXCIpKSA6ICctJyk7XG4gICAgICAgIHZhciBtYXRjaGVkQW5zd2VycyA9IG1hdGNoUmVjb3JkcyhhU2VudGVuY2VzUmVpbmZvcmNlZCwgY2F0ZWdvcnksIHJlY29yZHMpOyAvL2FUb29sOiBBcnJheTxJTWF0Y2guSVRvb2w+KTogYW55IC8qIG9iamVjdHN0cmVhbSovIHtcbiAgICAgICAgZGVidWdsb2coZGVidWdsb2cuZW5hYmxlZCA/IChcIiBtYXRjaGVkQW5zd2Vyc1wiICsgSlNPTi5zdHJpbmdpZnkobWF0Y2hlZEFuc3dlcnMsIHVuZGVmaW5lZCwgMikpIDogJy0nKTtcbiAgICAgICAgcmV0dXJuIG1hdGNoZWRBbnN3ZXJzO1xuICAgIH1cbn1cbmV4cG9ydHMucmVzb2x2ZUNhdGVnb3J5ID0gcmVzb2x2ZUNhdGVnb3J5O1xudmFyIE1vZGVsID0gcmVxdWlyZShcIi4uL21vZGVsL21vZGVsXCIpO1xuZnVuY3Rpb24gcmVzb2x2ZUNhdGVnb3JpZXMoY2F0ZWdvcmllcywgY29udGV4dFF1ZXJ5U3RyaW5nLCB0aGVNb2RlbCkge1xuICAgIHZhciByZWNvcmRzID0gdGhlTW9kZWwucmVjb3JkcztcbiAgICB2YXIgcnVsZXMgPSB0aGVNb2RlbC5ydWxlcztcbiAgICBpZiAoY29udGV4dFF1ZXJ5U3RyaW5nLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZXJyb3JzOiBbRXJFcnJvci5tYWtlRXJyb3JfRU1QVFlfSU5QVVQoKV0sXG4gICAgICAgICAgICB0dXBlbGFuc3dlcnM6IFtdLFxuICAgICAgICAgICAgdG9rZW5zOiBbXVxuICAgICAgICB9O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLypcbiAgICAgICAgdmFyIG1hdGNoZWQgPSBJbnB1dEZpbHRlci5hbmFseXplU3RyaW5nKGNvbnRleHRRdWVyeVN0cmluZywgcnVsZXMpO1xuICAgICAgICBkZWJ1Z2xvZyhkZWJ1Z2xvZy5lbmFibGVkPyAoXCJhZnRlciBtYXRjaGVkIFwiICsgSlNPTi5zdHJpbmdpZnkobWF0Y2hlZCkpOiAnLScpO1xuICAgICAgICB2YXIgYVNlbnRlbmNlcyA9IElucHV0RmlsdGVyLmV4cGFuZE1hdGNoQXJyKG1hdGNoZWQpO1xuICAgICAgICBpZihkZWJ1Z2xvZy5lbmFibGVkKSB7XG4gICAgICAgICAgZGVidWdsb2coZGVidWdsb2cuZW5hYmxlZCA/IChcImFmdGVyIGV4cGFuZFwiICsgYVNlbnRlbmNlcy5tYXAoZnVuY3Rpb24gKG9TZW50ZW5jZSkge1xuICAgICAgICAgICAgcmV0dXJuIFNlbnRlbmNlLnJhbmtpbmdQcm9kdWN0KG9TZW50ZW5jZSkgKyBcIjpcIiArIEpTT04uc3RyaW5naWZ5KG9TZW50ZW5jZSk7XG4gICAgICAgICAgfSkuam9pbihcIlxcblwiKSk6ICctJyk7XG4gICAgICB9ICovXG4gICAgICAgIHZhciBhU2VudGVuY2VzUmVpbmZvcmNlZCA9IHByb2Nlc3NTdHJpbmcoY29udGV4dFF1ZXJ5U3RyaW5nLCB0aGVNb2RlbC5ydWxlcyk7XG4gICAgICAgIC8vYVNlbnRlbmNlcy5tYXAoZnVuY3Rpb24ob1NlbnRlbmNlKSB7IHJldHVybiBJbnB1dEZpbHRlci5yZWluRm9yY2Uob1NlbnRlbmNlKTsgfSk7XG4gICAgICAgIGRlYnVnbG9nKGRlYnVnbG9nLmVuYWJsZWQgPyAoXCJhZnRlciByZWluZm9yY2VcIiArIGFTZW50ZW5jZXNSZWluZm9yY2VkLnNlbnRlbmNlcy5tYXAoZnVuY3Rpb24gKG9TZW50ZW5jZSkge1xuICAgICAgICAgICAgcmV0dXJuIFNlbnRlbmNlLnJhbmtpbmdQcm9kdWN0KG9TZW50ZW5jZSkgKyBcIjpcIiArIEpTT04uc3RyaW5naWZ5KG9TZW50ZW5jZSk7XG4gICAgICAgIH0pLmpvaW4oXCJcXG5cIikpIDogJy0nKTtcbiAgICAgICAgLy92YXIgbWF0Y2hlZEFuc3dlcnMgPSBtYXRjaFJlY29yZHNRdWljayhhU2VudGVuY2VzLCBjYXRlZ29yeSwgcmVjb3Jkcyk7IC8vYVRvb2w6IEFycmF5PElNYXRjaC5JVG9vbD4pOiBhbnkgLyogb2JqZWN0c3RyZWFtKi8ge1xuICAgICAgICB2YXIgY2F0ZWdvcnlTZXQgPSB7fTtcbiAgICAgICAgY2F0ZWdvcmllcy5mb3JFYWNoKGZ1bmN0aW9uIChjYXRlZ29yeSkge1xuICAgICAgICAgICAgY2F0ZWdvcnlTZXRbY2F0ZWdvcnldID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBjYXRlZ29yeVNldExvY2FsID0gTW9kZWwuZ2V0QWxsUmVjb3JkQ2F0ZWdvcmllc0ZvclRhcmdldENhdGVnb3J5KHRoZU1vZGVsLCBjYXRlZ29yeSwgdHJ1ZSk7XG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKGNhdGVnb3J5U2V0LCBjYXRlZ29yeVNldExvY2FsKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBtYXRjaGVkQW5zd2VycyA9IG1hdGNoUmVjb3Jkc1F1aWNrTXVsdGlwbGVDYXRlZ29yaWVzKGFTZW50ZW5jZXNSZWluZm9yY2VkLCBjYXRlZ29yaWVzLCByZWNvcmRzLCBjYXRlZ29yeVNldCk7IC8vYVRvb2w6IEFycmF5PElNYXRjaC5JVG9vbD4pOiBhbnkgLyogb2JqZWN0c3RyZWFtKi8ge1xuICAgICAgICBpZiAoZGVidWdsb2cuZW5hYmxlZCkge1xuICAgICAgICAgICAgZGVidWdsb2coXCIgbWF0Y2hlZCBBbnN3ZXJzXCIgKyBKU09OLnN0cmluZ2lmeShtYXRjaGVkQW5zd2VycywgdW5kZWZpbmVkLCAyKSk7XG4gICAgICAgIH1cbiAgICAgICAgcGVyZmxvZyhcImZpbHRlcmluZyB0b3BSYW5rZWQgKGE9XCIgKyBtYXRjaGVkQW5zd2Vycy50dXBlbGFuc3dlcnMubGVuZ3RoICsgXCIpLi4uXCIpO1xuICAgICAgICB2YXIgbWF0Y2hlZEZpbHRlcmVkID0gT2JqZWN0LmFzc2lnbih7fSwgbWF0Y2hlZEFuc3dlcnMpO1xuICAgICAgICBtYXRjaGVkRmlsdGVyZWQudHVwZWxhbnN3ZXJzID0gZmlsdGVyT25seVRvcFJhbmtlZFR1cGVsKG1hdGNoZWRBbnN3ZXJzLnR1cGVsYW5zd2Vycyk7XG4gICAgICAgIGlmIChkZWJ1Z2xvZy5lbmFibGVkKSB7XG4gICAgICAgICAgICBkZWJ1Z2xvZyhcIiBtYXRjaGVkIHRvcC1yYW5rZWQgQW5zd2Vyc1wiICsgSlNPTi5zdHJpbmdpZnkobWF0Y2hlZEZpbHRlcmVkLCB1bmRlZmluZWQsIDIpKTtcbiAgICAgICAgfVxuICAgICAgICBwZXJmbG9nKFwidG90YWxXaGF0aXNXaXRoQ29udGV4dCAoYT1cIiArIG1hdGNoZWRGaWx0ZXJlZC50dXBlbGFuc3dlcnMubGVuZ3RoICsgXCIpXCIpO1xuICAgICAgICByZXR1cm4gbWF0Y2hlZEZpbHRlcmVkOyAvLyA/Pz8gQW5zd2VycztcbiAgICB9XG59XG5leHBvcnRzLnJlc29sdmVDYXRlZ29yaWVzID0gcmVzb2x2ZUNhdGVnb3JpZXM7XG5mdW5jdGlvbiBmaWx0ZXJPbmx5VG9wUmFua2VkKHJlc3VsdHMpIHtcbiAgICB2YXIgcmVzID0gcmVzdWx0cy5maWx0ZXIoZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICBpZiAocmVzdWx0Ll9yYW5raW5nID09PSByZXN1bHRzWzBdLl9yYW5raW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzdWx0Ll9yYW5raW5nID49IHJlc3VsdHNbMF0uX3JhbmtpbmcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkxpc3QgdG8gZmlsdGVyIG11c3QgYmUgb3JkZXJlZFwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlcztcbn1cbmV4cG9ydHMuZmlsdGVyT25seVRvcFJhbmtlZCA9IGZpbHRlck9ubHlUb3BSYW5rZWQ7XG5mdW5jdGlvbiBmaWx0ZXJPbmx5VG9wUmFua2VkVHVwZWwocmVzdWx0cykge1xuICAgIHZhciByZXMgPSByZXN1bHRzLmZpbHRlcihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgIGlmIChyZXN1bHQuX3JhbmtpbmcgPT09IHJlc3VsdHNbMF0uX3JhbmtpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXN1bHQuX3JhbmtpbmcgPj0gcmVzdWx0c1swXS5fcmFua2luZykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTGlzdCB0byBmaWx0ZXIgbXVzdCBiZSBvcmRlcmVkXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzO1xufVxuZXhwb3J0cy5maWx0ZXJPbmx5VG9wUmFua2VkVHVwZWwgPSBmaWx0ZXJPbmx5VG9wUmFua2VkVHVwZWw7XG5mdW5jdGlvbiBpc0luZGlzY3JpbWluYXRlUmVzdWx0KHJlc3VsdHMpIHtcbiAgICB2YXIgY250ID0gcmVzdWx0cy5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIHJlc3VsdCkge1xuICAgICAgICBpZiAocmVzdWx0Ll9yYW5raW5nID09PSByZXN1bHRzWzBdLl9yYW5raW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gcHJldiArIDE7XG4gICAgICAgIH1cbiAgICB9LCAwKTtcbiAgICBpZiAoY250ID4gMSkge1xuICAgICAgICAvLyBzZWFyY2ggZm9yIGEgZGlzY3JpbWluYXRpbmcgY2F0ZWdvcnkgdmFsdWVcbiAgICAgICAgdmFyIGRpc2NyaW1pbmF0aW5nID0gT2JqZWN0LmtleXMocmVzdWx0c1swXS5yZWNvcmQpLnJlZHVjZShmdW5jdGlvbiAocHJldiwgY2F0ZWdvcnkpIHtcbiAgICAgICAgICAgIGlmICgoY2F0ZWdvcnkuY2hhckF0KDApICE9PSAnXycgJiYgY2F0ZWdvcnkgIT09IHJlc3VsdHNbMF0uY2F0ZWdvcnkpXG4gICAgICAgICAgICAgICAgJiYgKHJlc3VsdHNbMF0ucmVjb3JkW2NhdGVnb3J5XSAhPT0gcmVzdWx0c1sxXS5yZWNvcmRbY2F0ZWdvcnldKSkge1xuICAgICAgICAgICAgICAgIHByZXYucHVzaChjYXRlZ29yeSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcHJldjtcbiAgICAgICAgfSwgW10pO1xuICAgICAgICBpZiAoZGlzY3JpbWluYXRpbmcubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJNYW55IGNvbXBhcmFibGUgcmVzdWx0cywgcGVyaGFwcyB5b3Ugd2FudCB0byBzcGVjaWZ5IGEgZGlzY3JpbWluYXRpbmcgXCIgKyBkaXNjcmltaW5hdGluZy5qb2luKCcsJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICdZb3VyIHF1ZXN0aW9uIGRvZXMgbm90IGhhdmUgYSBzcGVjaWZpYyBhbnN3ZXInO1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xufVxuZXhwb3J0cy5pc0luZGlzY3JpbWluYXRlUmVzdWx0ID0gaXNJbmRpc2NyaW1pbmF0ZVJlc3VsdDtcbmZ1bmN0aW9uIGlzSW5kaXNjcmltaW5hdGVSZXN1bHRUdXBlbChyZXN1bHRzKSB7XG4gICAgdmFyIGNudCA9IHJlc3VsdHMucmVkdWNlKGZ1bmN0aW9uIChwcmV2LCByZXN1bHQpIHtcbiAgICAgICAgaWYgKHJlc3VsdC5fcmFua2luZyA9PT0gcmVzdWx0c1swXS5fcmFua2luZykge1xuICAgICAgICAgICAgcmV0dXJuIHByZXYgKyAxO1xuICAgICAgICB9XG4gICAgfSwgMCk7XG4gICAgaWYgKGNudCA+IDEpIHtcbiAgICAgICAgLy8gc2VhcmNoIGZvciBhIGRpc2NyaW1pbmF0aW5nIGNhdGVnb3J5IHZhbHVlXG4gICAgICAgIHZhciBkaXNjcmltaW5hdGluZyA9IE9iamVjdC5rZXlzKHJlc3VsdHNbMF0ucmVjb3JkKS5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIGNhdGVnb3J5KSB7XG4gICAgICAgICAgICBpZiAoKGNhdGVnb3J5LmNoYXJBdCgwKSAhPT0gJ18nICYmIHJlc3VsdHNbMF0uY2F0ZWdvcmllcy5pbmRleE9mKGNhdGVnb3J5KSA8IDApXG4gICAgICAgICAgICAgICAgJiYgKHJlc3VsdHNbMF0ucmVjb3JkW2NhdGVnb3J5XSAhPT0gcmVzdWx0c1sxXS5yZWNvcmRbY2F0ZWdvcnldKSkge1xuICAgICAgICAgICAgICAgIHByZXYucHVzaChjYXRlZ29yeSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcHJldjtcbiAgICAgICAgfSwgW10pO1xuICAgICAgICBpZiAoZGlzY3JpbWluYXRpbmcubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJNYW55IGNvbXBhcmFibGUgcmVzdWx0cywgcGVyaGFwcyB5b3Ugd2FudCB0byBzcGVjaWZ5IGEgZGlzY3JpbWluYXRpbmcgXCIgKyBkaXNjcmltaW5hdGluZy5qb2luKCcsJykgKyAnIG9yIHVzZSBcImxpc3QgYWxsIC4uLlwiJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJ1lvdXIgcXVlc3Rpb24gZG9lcyBub3QgaGF2ZSBhIHNwZWNpZmljIGFuc3dlcic7XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG59XG5leHBvcnRzLmlzSW5kaXNjcmltaW5hdGVSZXN1bHRUdXBlbCA9IGlzSW5kaXNjcmltaW5hdGVSZXN1bHRUdXBlbDtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
