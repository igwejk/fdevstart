/**
 *
 * @module jfseb.fdevstart.analyze
 * @file erbase
 * @copyright (c) 2016 Gerd Forstmann
 *
 * Basic domain based entity recognition
 */
"use strict";

var debug = require("debug");
var debuglog = debug('erbase');
var debuglogV = debug('erbase');
var perflog = debug('perf');
var AnyObject = Object;
var IMatch = require("./ifmatch");
function makeError_NO_KNOWN_WORD(index, tokens) {
    if (index < 0 || index >= tokens.length) {
        throw Error("invalid index in Error construction " + index + "tokens.lenth=" + tokens.length);
    }
    return {
        err_code: IMatch.ERR_NO_KNOWN_WORD,
        text: "I do not understand \"" + tokens[index] + "\".",
        context: {
            tokens: tokens,
            token: tokens[index],
            index: index
        }
    };
}
exports.makeError_NO_KNOWN_WORD = makeError_NO_KNOWN_WORD;
function makeError_EMPTY_INPUT() {
    return {
        err_code: IMatch.ERR_EMPTY_INPUT,
        text: "I did not get an input."
    };
}
exports.makeError_EMPTY_INPUT = makeError_EMPTY_INPUT;
function explainError(errors) {
    if (errors.length) {
        return "\n" + errors.map(function (err) {
            return err.text;
        }).join("\n");
    }
    return;
}
exports.explainError = explainError;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tYXRjaC9lcmVycm9yLnRzIiwibWF0Y2gvZXJlcnJvci5qcyJdLCJuYW1lcyI6WyJkZWJ1ZyIsInJlcXVpcmUiLCJkZWJ1Z2xvZyIsImRlYnVnbG9nViIsInBlcmZsb2ciLCJBbnlPYmplY3QiLCJPYmplY3QiLCJJTWF0Y2giLCJtYWtlRXJyb3JfTk9fS05PV05fV09SRCIsImluZGV4IiwidG9rZW5zIiwibGVuZ3RoIiwiRXJyb3IiLCJlcnJfY29kZSIsIkVSUl9OT19LTk9XTl9XT1JEIiwidGV4dCIsImNvbnRleHQiLCJ0b2tlbiIsImV4cG9ydHMiLCJtYWtlRXJyb3JfRU1QVFlfSU5QVVQiLCJFUlJfRU1QVFlfSU5QVVQiLCJleHBsYWluRXJyb3IiLCJlcnJvcnMiLCJtYXAiLCJlcnIiLCJqb2luIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7QUNRQTs7QURJQSxJQUFBQSxRQUFBQyxRQUFBLE9BQUEsQ0FBQTtBQUVBLElBQU1DLFdBQVdGLE1BQU0sUUFBTixDQUFqQjtBQUNBLElBQU1HLFlBQVlILE1BQU0sUUFBTixDQUFsQjtBQUNBLElBQU1JLFVBQVVKLE1BQU0sTUFBTixDQUFoQjtBQUlBLElBQU1LLFlBQWlCQyxNQUF2QjtBQUtBLElBQUFDLFNBQUFOLFFBQUEsV0FBQSxDQUFBO0FBRUEsU0FBQU8sdUJBQUEsQ0FBd0NDLEtBQXhDLEVBQXdEQyxNQUF4RCxFQUF5RTtBQUNyRSxRQUFHRCxRQUFRLENBQVIsSUFBYUEsU0FBU0MsT0FBT0MsTUFBaEMsRUFBd0M7QUFDdEMsY0FBTUMsTUFBTSx5Q0FBeUNILEtBQXpDLEdBQWlELGVBQWpELEdBQW1FQyxPQUFPQyxNQUFoRixDQUFOO0FBQ0Q7QUFDSCxXQUFPO0FBQ0xFLGtCQUFVTixPQUFPTyxpQkFEWjtBQUVMQyxjQUFPLDJCQUF3QkwsT0FBT0QsS0FBUCxDQUF4QixHQUFxQyxLQUZ2QztBQUdMTyxpQkFBVTtBQUNSTixvQkFBUUEsTUFEQTtBQUVSTyxtQkFBUVAsT0FBT0QsS0FBUCxDQUZBO0FBR1JBLG1CQUFRQTtBQUhBO0FBSEwsS0FBUDtBQVNEO0FBYkRTLFFBQUFWLHVCQUFBLEdBQUFBLHVCQUFBO0FBZ0JBLFNBQUFXLHFCQUFBLEdBQUE7QUFDRSxXQUFPO0FBQ0xOLGtCQUFVTixPQUFPYSxlQURaO0FBRUxMLGNBQU87QUFGRixLQUFQO0FBSUQ7QUFMREcsUUFBQUMscUJBQUEsR0FBQUEscUJBQUE7QUFPQSxTQUFBRSxZQUFBLENBQTZCQyxNQUE3QixFQUF1RDtBQUNyRCxRQUFHQSxPQUFPWCxNQUFWLEVBQWtCO0FBQ2hCLGVBQU8sT0FBT1csT0FBT0MsR0FBUCxDQUFXLFVBQUFDLEdBQUEsRUFBRztBQUFJLG1CQUFBQSxJQUFJVCxJQUFKO0FBQVEsU0FBMUIsRUFBNEJVLElBQTVCLENBQWlDLElBQWpDLENBQWQ7QUFDRDtBQUNEO0FBQ0Q7QUFMRFAsUUFBQUcsWUFBQSxHQUFBQSxZQUFBIiwiZmlsZSI6Im1hdGNoL2VyZXJyb3IuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqXG4gKiBAbW9kdWxlIGpmc2ViLmZkZXZzdGFydC5hbmFseXplXG4gKiBAZmlsZSBlcmJhc2VcbiAqIEBjb3B5cmlnaHQgKGMpIDIwMTYgR2VyZCBGb3JzdG1hbm5cbiAqXG4gKiBCYXNpYyBkb21haW4gYmFzZWQgZW50aXR5IHJlY29nbml0aW9uXG4gKi9cblxuXG5pbXBvcnQgKiBhcyBJbnB1dEZpbHRlciBmcm9tICcuL2lucHV0RmlsdGVyJztcblxuaW1wb3J0ICogYXMgZGVidWcgZnJvbSAnZGVidWcnO1xuXG5jb25zdCBkZWJ1Z2xvZyA9IGRlYnVnKCdlcmJhc2UnKTtcbmNvbnN0IGRlYnVnbG9nViA9IGRlYnVnKCdlcmJhc2UnKTtcbmNvbnN0IHBlcmZsb2cgPSBkZWJ1ZygncGVyZicpO1xuXG5pbXBvcnQgKiBhcyBicmVha2Rvd24gZnJvbSAnLi9icmVha2Rvd24nO1xuXG5jb25zdCBBbnlPYmplY3QgPSA8YW55Pk9iamVjdDtcblxuXG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tICcuLi91dGlscy91dGlscyc7XG5cbmltcG9ydCAqIGFzIElNYXRjaCBmcm9tICcuL2lmbWF0Y2gnO1xuXG5leHBvcnQgZnVuY3Rpb24gbWFrZUVycm9yX05PX0tOT1dOX1dPUkQoaW5kZXggOiBudW1iZXIsIHRva2VucyA6IHN0cmluZ1tdKSA6SU1hdGNoLklFUkVycm9yTk9fS05PV05fV09SRCB7XG4gICAgaWYoaW5kZXggPCAwIHx8IGluZGV4ID49IHRva2Vucy5sZW5ndGgpIHtcbiAgICAgIHRocm93IEVycm9yKFwiaW52YWxpZCBpbmRleCBpbiBFcnJvciBjb25zdHJ1Y3Rpb24gXCIgKyBpbmRleCArIFwidG9rZW5zLmxlbnRoPVwiICsgdG9rZW5zLmxlbmd0aCk7XG4gICAgfVxuICByZXR1cm4ge1xuICAgIGVycl9jb2RlOiBJTWF0Y2guRVJSX05PX0tOT1dOX1dPUkQsXG4gICAgdGV4dCA6IGBJIGRvIG5vdCB1bmRlcnN0YW5kIFwiJHt0b2tlbnNbaW5kZXhdfVwiLmAsXG4gICAgY29udGV4dCA6IHtcbiAgICAgIHRva2VuczogdG9rZW5zLFxuICAgICAgdG9rZW4gOiB0b2tlbnNbaW5kZXhdLFxuICAgICAgaW5kZXggOiBpbmRleFxuICAgIH1cbiAgfSBhcyBJTWF0Y2guSUVSRXJyb3JOT19LTk9XTl9XT1JEO1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBtYWtlRXJyb3JfRU1QVFlfSU5QVVQoICkgOklNYXRjaC5JRVJFcnJvciB7XG4gIHJldHVybiB7XG4gICAgZXJyX2NvZGU6IElNYXRjaC5FUlJfRU1QVFlfSU5QVVQsXG4gICAgdGV4dCA6IGBJIGRpZCBub3QgZ2V0IGFuIGlucHV0LmAsXG4gIH0gYXMgSU1hdGNoLklFUkVycm9yO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXhwbGFpbkVycm9yKGVycm9ycyA6IElNYXRjaC5JRVJFcnJvcltdKSB7XG4gIGlmKGVycm9ycy5sZW5ndGgpIHtcbiAgICByZXR1cm4gXCJcXG5cIiArIGVycm9ycy5tYXAoZXJyID0+IGVyci50ZXh0KS5qb2luKFwiXFxuXCIpO1xuICB9XG4gIHJldHVybjtcbn0iLCIvKipcbiAqXG4gKiBAbW9kdWxlIGpmc2ViLmZkZXZzdGFydC5hbmFseXplXG4gKiBAZmlsZSBlcmJhc2VcbiAqIEBjb3B5cmlnaHQgKGMpIDIwMTYgR2VyZCBGb3JzdG1hbm5cbiAqXG4gKiBCYXNpYyBkb21haW4gYmFzZWQgZW50aXR5IHJlY29nbml0aW9uXG4gKi9cblwidXNlIHN0cmljdFwiO1xudmFyIGRlYnVnID0gcmVxdWlyZShcImRlYnVnXCIpO1xudmFyIGRlYnVnbG9nID0gZGVidWcoJ2VyYmFzZScpO1xudmFyIGRlYnVnbG9nViA9IGRlYnVnKCdlcmJhc2UnKTtcbnZhciBwZXJmbG9nID0gZGVidWcoJ3BlcmYnKTtcbnZhciBBbnlPYmplY3QgPSBPYmplY3Q7XG52YXIgSU1hdGNoID0gcmVxdWlyZShcIi4vaWZtYXRjaFwiKTtcbmZ1bmN0aW9uIG1ha2VFcnJvcl9OT19LTk9XTl9XT1JEKGluZGV4LCB0b2tlbnMpIHtcbiAgICBpZiAoaW5kZXggPCAwIHx8IGluZGV4ID49IHRva2Vucy5sZW5ndGgpIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoXCJpbnZhbGlkIGluZGV4IGluIEVycm9yIGNvbnN0cnVjdGlvbiBcIiArIGluZGV4ICsgXCJ0b2tlbnMubGVudGg9XCIgKyB0b2tlbnMubGVuZ3RoKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZXJyX2NvZGU6IElNYXRjaC5FUlJfTk9fS05PV05fV09SRCxcbiAgICAgICAgdGV4dDogXCJJIGRvIG5vdCB1bmRlcnN0YW5kIFxcXCJcIiArIHRva2Vuc1tpbmRleF0gKyBcIlxcXCIuXCIsXG4gICAgICAgIGNvbnRleHQ6IHtcbiAgICAgICAgICAgIHRva2VuczogdG9rZW5zLFxuICAgICAgICAgICAgdG9rZW46IHRva2Vuc1tpbmRleF0sXG4gICAgICAgICAgICBpbmRleDogaW5kZXhcbiAgICAgICAgfVxuICAgIH07XG59XG5leHBvcnRzLm1ha2VFcnJvcl9OT19LTk9XTl9XT1JEID0gbWFrZUVycm9yX05PX0tOT1dOX1dPUkQ7XG5mdW5jdGlvbiBtYWtlRXJyb3JfRU1QVFlfSU5QVVQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZXJyX2NvZGU6IElNYXRjaC5FUlJfRU1QVFlfSU5QVVQsXG4gICAgICAgIHRleHQ6IFwiSSBkaWQgbm90IGdldCBhbiBpbnB1dC5cIixcbiAgICB9O1xufVxuZXhwb3J0cy5tYWtlRXJyb3JfRU1QVFlfSU5QVVQgPSBtYWtlRXJyb3JfRU1QVFlfSU5QVVQ7XG5mdW5jdGlvbiBleHBsYWluRXJyb3IoZXJyb3JzKSB7XG4gICAgaWYgKGVycm9ycy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFwiXFxuXCIgKyBlcnJvcnMubWFwKGZ1bmN0aW9uIChlcnIpIHsgcmV0dXJuIGVyci50ZXh0OyB9KS5qb2luKFwiXFxuXCIpO1xuICAgIH1cbiAgICByZXR1cm47XG59XG5leHBvcnRzLmV4cGxhaW5FcnJvciA9IGV4cGxhaW5FcnJvcjtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
