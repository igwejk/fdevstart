"use strict";

var inputFilter = require('./ifmatch');
exports.oKeyOrder = ["systemObjectCategory", "systemId", "systemObjectId"];
/* @covignore */
function getRuleMap() {
    var systemObjectCategory = [{
        type: 0 /* WORD */
        , key: "systemObjectCategory",
        word: "unit test",
        follows: {
            systemObjectCategory: "unit test"
        }
    }, {
        type: 0 /* WORD */
        , key: "systemObjectCategory",
        word: "unit",
        follows: {
            systemObjectCategory: "unit test"
        }
    }];
    /* @covignore */
    var systemObjectCategory2 = [["unit test", "unit"], ["wiki", "web page"], ["fiori catalog", "flp catalog", "catalog"], ["fiori group", "flp group", "group"], ["flp", "fiori launchpad", "lauchpage", "launchpad"], ["flpd"]].map(function (aArr) {
        // console.log(JSON.stringify(aArr));
        var bestSynonym = aArr[0];
        return aArr.map(function (sEntry) {
            return {
                type: 0 /* WORD */
                , key: "systemObjectCategory",
                word: sEntry,
                follows: {
                    systemObjectCategory: bestSynonym
                }
            };
        });
    });
    systemObjectCategory2 = systemObjectCategory2.reduce(function (a, b) {
        return a.concat(b);
    }, []);
    var systemObjectCategory = systemObjectCategory.concat(systemObjectCategory2);
    var oRuleMap = {
        "systemObjectCategory": systemObjectCategory,
        "systemId": [{
            regexp: /^([a-z0-9_]{3,3})CLNT(\d{3,3})$/i,
            key: 'systemId',
            argsMap: {
                1: 'systemId',
                2: 'client'
            },
            type: 1 /* REGEXP */
            , follows: {}
        }, {
            regexp: /^([a-z0-9_]{3,3})$/i,
            key: 'systemId',
            argsMap: {
                1: 'systemId'
            },
            type: 1 /* REGEXP */
            , follows: {}
        }]
    };
    var UnitTestList = [
    // alphabetic order please
    'test-resources/sap/ushell/qunit/adapters/cdm/ClientSideTargetResolutionAdapter.qunit.html', 'test-resources/sap/ushell/qunit/adapters/cdm/CommonDataModelAdapter.qunit.html', 'test-resources/sap/ushell/qunit/adapters/cdm/LaunchPageAdapter.qunit.html', 'test-resources/sap/ushell/qunit/adapters/local/AppStateAdapter.qunit.html', 'test-resources/sap/ushell/qunit/adapters/local/ClientSideTargetResolutionAdapter.qunit.html', 'test-resources/sap/ushell/qunit/adapters/local/ContainerAdapter.qunit.html', 'test-resources/sap/ushell/qunit/adapters/local/EndUserFeedbackAdapter.qunit.html', 'test-resources/sap/ushell/qunit/adapters/local/NavTargetResolutionAdapter.qunit.html', 'test-resources/sap/ushell/qunit/adapters/local/PersonalizationAdapter.qunit.html', 'test-resources/sap/ushell/qunit/adapters/local/SupportTicketAdapterTest.qunit.html', 'test-resources/sap/ushell/qunit/adapters/local/UserDefaultParameterPersistenceAdapter.qunit.html', 'test-resources/sap/ushell/qunit/adapters/local/UserInfoAdapter.qunit.html', 'test-resources/sap/ushell/qunit/bootstrap/sandbox.qunit.html', 'test-resources/sap/ushell/qunit/CanvasShapesManager.qunit.html', 'test-resources/sap/ushell/qunit/components/container/ApplicationContainer.qunit.html', 'test-resources/sap/ushell/qunit/components/factsheet/annotation/ODataURLTemplating.qunit.html', 'test-resources/sap/ushell/qunit/components/flp/ComponentKeysHandler.qunit.html', 'test-resources/sap/ushell/qunit/components/flp/FlpApp.qunit.html', 'test-resources/sap/ushell/qunit/components/flp/launchpad/appfinder/EasyAccess.qunit.html', 'test-resources/sap/ushell/qunit/components/flp/launchpad/DashboardManager.qunit.html', 'test-resources/sap/ushell/qunit/components/flp/launchpad/PagingManager.qunit.html', 'test-resources/sap/ushell/qunit/components/flp/launchpad/appfinder/AppFinder.qunit.html', 'test-resources/sap/ushell/qunit/components/flp/launchpad/appfinder/GroupListPopover.qunit.html', 'test-resources/sap/ushell/qunit/components/flp/launchpad/appfinder/HierarchyApps.qunit.html', 'test-resources/sap/ushell/qunit/components/flp/launchpad/appfinder/HierarchyFolders.qunit.html', 'test-resources/sap/ushell/qunit/renderers/fiori2/userPreferences/LanguageRegionSelector.qunit.html', 'test-resources/sap/ushell/qunit/components/flp/launchpad/dashboard/DashboardContent.qunit.html', 'test-resources/sap/ushell/qunit/components/flp/launchpad/dashboard/DashboardUIActions.qunit.html', 'test-resources/sap/ushell/qunit/components/flp/settings/FlpSettings.qunit.html', 'test-resources/sap/ushell/qunit/components/tiles/applauncher/StaticTile.qunit.html', 'test-resources/sap/ushell/qunit/components/tiles/applauncherdynamic/DynamicTile.qunit.html', 'test-resources/sap/ushell/qunit/components/tiles/cdm/applauncher/StaticTile.qunit.html', 'test-resources/sap/ushell/qunit/components/tiles/cdm/applauncherdynamic/DynamicTile.qunit.html', 'test-resources/sap/ushell/qunit/components/tiles/utils.qunit.html', 'test-resources/sap/ushell/qunit/components/tiles/utilsRT.qunit.html', 'test-resources/sap/ushell/qunit/components/userActivity/userActivityLog.qunit.html',
    // "test-resources/sap/ushell/qunit/demoapps/UserDefaultPluginSample/UserDefaultPluginSample.qunit.html", // Currently not run inside the QUnit Test Loader for ushell-lib
    'test-resources/sap/ushell/qunit/FLPAnalytics.qunit.html', 'test-resources/sap/ushell/qunit/Layout.qunit.html', 'test-resources/sap/ushell/qunit/renderers/fiori2/AccessKeysHandler.qunit.html', 'test-resources/sap/ushell/qunit/renderers/fiori2/DefaultParameters/DefaultParameters.qunit.html', 'test-resources/sap/ushell/qunit/renderers/fiori2/Lifecycle.qunit.html', 'test-resources/sap/ushell/qunit/renderers/fiori2/meArea/MeArea.qunit.html', 'test-resources/sap/ushell/qunit/renderers/fiori2/meArea/UserSettings.qunit.html', 'test-resources/sap/ushell/qunit/renderers/fiori2/notifications/Notifications.qunit.html', 'test-resources/sap/ushell/qunit/renderers/fiori2/notifications/Settings.qunit.html', 'test-resources/sap/ushell/qunit/renderers/fiori2/Renderer.qunit.html', 'test-resources/sap/ushell/qunit/renderers/fiori2/RendererExtensions.qunit.html', 'test-resources/sap/ushell/qunit/renderers/fiori2/Shell.qunit.html', 'test-resources/sap/ushell/qunit/renderers/fiori2/UIActions.qunit.html', 'test-resources/sap/ushell/qunit/services/AppConfiguration.qunit.html', 'test-resources/sap/ushell/qunit/services/AppContext.qunit.html', 'test-resources/sap/ushell/qunit/services/AppLifeCycle.qunit.html', 'test-resources/sap/ushell/qunit/services/AppState.qunit.html', 'test-resources/sap/ushell/qunit/services/Bookmark.qunit.html', 'test-resources/sap/ushell/qunit/services/ClientSideTargetResolution.qunit.html', 'test-resources/sap/ushell/qunit/services/CommonDataModel.qunit.html', 'test-resources/sap/ushell/qunit/services/CommonDataModel/PersonalizationProcessor.qunit.html', 'test-resources/sap/ushell/qunit/services/CommonDataModel/PersonalizationProcessorCDMBlackbox.qunit.html', 'test-resources/sap/ushell/qunit/services/Container.qunit.html', 'test-resources/sap/ushell/qunit/services/CrossApplicationNavigation.qunit.html', 'test-resources/sap/ushell/qunit/services/EndUserFeedback.qunit.html', 'test-resources/sap/ushell/qunit/services/LaunchPage.qunit.html', 'test-resources/sap/ushell/qunit/services/Message.qunit.html', 'test-resources/sap/ushell/qunit/services/NavTargetResolution.qunit.html', 'test-resources/sap/ushell/qunit/services/NavTargetResolutionCDMBlackbox.qunit.html', 'test-resources/sap/ushell/qunit/services/Notifications.qunit.html', 'test-resources/sap/ushell/qunit/services/Personalization.qunit.html', 'test-resources/sap/ushell/qunit/services/PluginManager.qunit.html', 'test-resources/sap/ushell/qunit/services/ReferenceResolver.qunit.html', 'test-resources/sap/ushell/qunit/services/ShellNavigation.History.qunit.html', 'test-resources/sap/ushell/qunit/services/ShellNavigation.qunit.html', 'test-resources/sap/ushell/qunit/services/SupportTicket.qunit.html', 'test-resources/sap/ushell/qunit/services/URLParsing.qunit.html', 'test-resources/sap/ushell/qunit/services/URLShortening.qunit.html', 'test-resources/sap/ushell/qunit/services/Ui5ComponentLoader.qunit.html', 'test-resources/sap/ushell/qunit/services/UsageAnalytics.qunit.html', 'test-resources/sap/ushell/qunit/services/UserDefaultParameterPersistence.qunit.html', 'test-resources/sap/ushell/qunit/services/UserDefaultParameters.qunit.html', 'test-resources/sap/ushell/qunit/services/UserInfo.qunit.html', 'test-resources/sap/ushell/qunit/services/UserRecents.qunit.html', 'test-resources/sap/ushell/qunit/services/SmartNavigation.qunit.html', 'test-resources/sap/ushell/qunit/System.qunit.html', 'test-resources/sap/ushell/qunit/ui/footerbar/AboutButton.qunit.html', 'test-resources/sap/ushell/qunit/ui/footerbar/AddBookmarkButton.qunit.html', 'test-resources/sap/ushell/qunit/ui/footerbar/ContactSupportButton.qunit.html', 'test-resources/sap/ushell/qunit/ui/footerbar/EndUserFeedback.qunit.html', 'test-resources/sap/ushell/qunit/ui/footerbar/JamDiscussButton.qunit.html', 'test-resources/sap/ushell/qunit/ui/footerbar/JamShareButton.qunit.html', 'test-resources/sap/ushell/qunit/ui/footerbar/LogoutButton.qunit.html', 'test-resources/sap/ushell/qunit/ui/footerbar/SettingsButton.qunit.html', 'test-resources/sap/ushell/qunit/ui/footerbar/UserPreferencesButton.qunit.html', 'test-resources/sap/ushell/qunit/ui/launchpad/AccessibilityCustomData.qunit.html', 'test-resources/sap/ushell/qunit/ui/launchpad/ActionItem.qunit.html', 'test-resources/sap/ushell/qunit/ui/launchpad/AnchorItem.qunit.html', 'test-resources/sap/ushell/qunit/ui/launchpad/AnchorNavigationBar.qunit.html', 'test-resources/sap/ushell/qunit/ui/launchpad/EmbeddedSupportErrorMessage.qunit.html', 'test-resources/sap/ushell/qunit/ui/launchpad/Fiori2LoadingDialog.qunit.html', 'test-resources/sap/ushell/qunit/ui/launchpad/GroupListItem.qunit.html', 'test-resources/sap/ushell/qunit/ui/launchpad/LinkTileWrapper.qunit.html', 'test-resources/sap/ushell/qunit/ui/launchpad/LoadingDialog.qunit.html', 'test-resources/sap/ushell/qunit/ui/launchpad/TileContainer.qunit.html', 'test-resources/sap/ushell/qunit/ui/launchpad/ViewPortContainer.qunit.html', 'test-resources/sap/ushell/qunit/ui/shell/FloatingContainer.qunit.html', 'test-resources/sap/ushell/qunit/ui/shell/RightFloatingContainer.qunit.html', 'test-resources/sap/ushell/qunit/ui/shell/ShellAppTitle.qunit.html', 'test-resources/sap/ushell/qunit/ui/shell/ShellLayout.qunit.html', 'test-resources/sap/ushell/qunit/ui/shell/ShellTitle.qunit.html', 'test-resources/sap/ushell/qunit/ui/shell/SplitContainer.qunit.html', 'test-resources/sap/ushell/qunit/ui/tile/DynamicTile.qunit.html', 'test-resources/sap/ushell/qunit/ui/tile/ImageTile.qunit.html', 'test-resources/sap/ushell/qunit/ui/tile/StaticTile.qunit.html', 'test-resources/sap/ushell/qunit/ui/tile/TileBase.qunit.html', 'test-resources/sap/ushell/qunit/ui5service/ShellUIService.qunit.html'];
    var aregex = /\/([^/]*).qunit.html/;
    var systemObjectId = UnitTestList.map(function (sEntry) {
        var sString = aregex.exec(sEntry)[1]; //.match('/([^/]*).qunit.html')[1]
        return {
            key: "systemObjectId",
            word: sString,
            type: 0 /* WORD */
            , follows: {
                systemObjectCategory: "unit test",
                systemObjectId: sString
            }
        };
    }); // map
    var systemObjectId2 = [
    // wiki aliases, this is an old legacy foramt
    {
        key: 'Support page',
        res: 'CA-UI2-INT-FE support'
    }, { key: 'FCC ABAP Alignment' }, { key: 'UI2 test links' }, { key: 'Support schedule', res: 'TIP Core UI Integration support' }, { key: 'UII Support schedule', res: 'TIP Core UI Integration support' }, {
        key: 'UI2 Support page',
        res: 'CA-UI2-INT-FE support'
    }, {
        key: 'Backend Sprint Reviews',
        res: 'Backend Sprint Review'
    }, {
        key: 'UI5 patch schedule',
        res: 'UI5 UI2 Patch plan'
    }].map(function (oEntry) {
        return {
            word: oEntry.key,
            key: "systemObjectId",
            type: 0 /* WORD */
            , follows: {
                systemObjectCategory: "wiki",
                systemObjectId: (oEntry.res || oEntry.key).toLowerCase()
            }
        };
    }); // map
    systemObjectId = systemObjectId.concat(systemObjectId2);
    systemObjectId = systemObjectId.concat([{
        type: 0 /* WORD */
        , key: "systemObjectId",
        word: "flpd",
        follows: {}
    }, {
        type: 1 /* REGEXP */
        , key: "systemObjectId",
        regexp: /\S+/i,
        follows: {
            _ranking: 0.9
        }
    }]);
    oRuleMap["systemObjectId"] = systemObjectId;
    return oRuleMap;
}
exports.getRuleMap = getRuleMap;
var mRuleArray;
function getMRulesSample() {
    var mRules = [];
    mRules = mRules.concat([
    // a generic rule for any id
    {
        type: 1 /* REGEXP */
        , category: "systemObjectId",
        regexp: /\S+/i,
        _ranking: 0.5
    }, {
        type: 1 /* REGEXP */
        , category: "fiori catalog",
        regexp: /^[A-Z0-9a-z_\/]+$/i,
        _ranking: 0.5
    }, {
        type: 1 /* REGEXP */
        , category: "client",
        regexp: /^\d{3,3}$/i,
        _ranking: 0.8
    }, {
        type: 1 /* REGEXP */
        , category: "systemId",
        regexp: /^[A-Z][A-Z0-9][A-Z0-9]$/i,
        _ranking: 0.7
    }, {
        type: 0 /* WORD */
        , category: "systemId",
        word: "UV2",
        matchedString: "UV2"
    }, {
        type: 1 /* REGEXP */
        , category: "transaction",
        regexp: /^[A-Z][A-Z0-9_]{3,3}$/i,
        _ranking: 0.7
    }, {
        type: 1 /* REGEXP */
        , category: "fiori catalog",
        regexp: /^SAP_BC[A-Z][A-Z0-9_]*$/,
        _ranking: 0.85
    }, {
        type: 1 /* REGEXP */
        , category: "fiori catalog",
        regexp: /^SAP_TC[A-Z][A-Z0-9_]*$/,
        _ranking: 0.85
    },
    // a few unit tests
    {
        category: "unit test",
        matchedString: "NavTargetResolution",
        type: 0,
        word: "NavTargetResolution"
    }, {
        category: "unit test",
        matchedString: "NavTargetResolutionAdapter",
        type: 0,
        word: "NavTargetResolutionAdapter"
    },
    // a few unit tests
    {
        category: "wiki",
        matchedString: "UI2 Integration",
        type: 0,
        word: "UI2 Integration"
    }, {
        category: "wiki",
        matchedString: "UI2 Support pages",
        type: 0,
        word: "UI2 Support pages"
    },
    // categories of this model
    {
        category: "category",
        matchedString: "wiki",
        type: 0,
        word: "wiki"
    }, {
        category: "category",
        matchedString: "unit test",
        type: 0,
        word: "unit test"
    }, {
        category: "category",
        matchedString: "transaction",
        type: 0,
        word: "transaction"
    }, {
        category: "category",
        matchedString: "transaction",
        type: 0,
        word: "ta"
    }, {
        category: "category",
        matchedString: "fiori catalog",
        type: 0,
        word: "fiori catalog"
    }, {
        category: "category",
        matchedString: "fiori catalog",
        type: 0,
        _ranking: 0.8,
        word: "catalog"
    }, {
        category: "category",
        matchedString: "systemId",
        type: 0,
        word: "system"
    }, {
        category: "category",
        matchedString: "client",
        type: 0,
        word: "client"
    },
    // tools of the sample model
    {
        category: "tool",
        matchedString: "FLPD",
        type: 0,
        word: "flpd"
    }, {
        category: "tool",
        matchedString: "FLP",
        type: 0,
        word: "flp"
    }, {
        category: "tool",
        matchedString: "FLP",
        type: 0,
        word: "Fiori Launchpad"
    }, {
        category: "tool",
        matchedString: "wiki",
        type: 0,
        word: "wiki"
    },
    // fillers
    // tools of the sample model
    {
        category: "filler",
        type: 1,
        regexp: /^((start)|(show)|(from)|(in))$/i,
        matchedString: "filler",
        _ranking: 0.9
    }]);
    return mRules;
}
exports.getMRulesSample = getMRulesSample;
function getMRulesOld() {
    var o = getRuleMap();
    var categories = {};
    var res = [];
    Object.keys(o).forEach(function (sKey) {
        o[sKey].forEach(function (oRule) {
            var category = oRule.follows && oRule.follows["systemObjectCategory"] || sKey;
            switch (oRule.type) {
                case 0 /* WORD */:
                    {
                        var matchedString = oRule.follows && oRule.follows[sKey] || oRule.word;
                        res.push({
                            type: oRule.type,
                            word: oRule.word,
                            matchedString: matchedString,
                            category: category
                        });
                        categories[category] = true;
                    }
                    break;
                case 1 /* REGEXP */:
                    {
                        var mRule = {
                            type: oRule.type,
                            regexp: oRule.regexp,
                            matchedString: oRule.follows && oRule.follows[sKey],
                            category: category
                        };
                        if (!(mRule.regexp instanceof RegExp)) {
                            throw new Error(JSON.stringify(oRule, undefined, 2));
                        }
                        if (oRule.argsMap) {
                            Object.keys(oRule.argsMap).forEach(function (iIndex) {
                                if (oRule.argsMap[iIndex] === sKey) {
                                    mRule.matchIndex = parseInt(iIndex);
                                }
                            });
                        }
                        res.push(mRule);
                        categories[category] = true;
                    }
                    break;
                default:
                    throw new Error('unknown rule' + JSON.stringify(oRule));
            } // switch
        });
        // append categories
        Object.keys(categories).forEach(function (sCategory) {
            res.push({
                type: 0 /* WORD */
                , word: sCategory,
                matchedString: sCategory,
                category: "category"
            });
        });
    });
    return res;
}
exports.getMRulesOld = getMRulesOld;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1hdGNoL2lucHV0RmlsdGVyUnVsZXMuanMiLCIuLi9zcmMvbWF0Y2gvaW5wdXRGaWx0ZXJSdWxlcy50cyJdLCJuYW1lcyI6WyJpbnB1dEZpbHRlciIsInJlcXVpcmUiLCJleHBvcnRzIiwib0tleU9yZGVyIiwiZ2V0UnVsZU1hcCIsInN5c3RlbU9iamVjdENhdGVnb3J5IiwidHlwZSIsImtleSIsIndvcmQiLCJmb2xsb3dzIiwic3lzdGVtT2JqZWN0Q2F0ZWdvcnkyIiwibWFwIiwiYUFyciIsImJlc3RTeW5vbnltIiwic0VudHJ5IiwicmVkdWNlIiwiYSIsImIiLCJjb25jYXQiLCJvUnVsZU1hcCIsInJlZ2V4cCIsImFyZ3NNYXAiLCJVbml0VGVzdExpc3QiLCJhcmVnZXgiLCJzeXN0ZW1PYmplY3RJZCIsInNTdHJpbmciLCJleGVjIiwic3lzdGVtT2JqZWN0SWQyIiwicmVzIiwib0VudHJ5IiwidG9Mb3dlckNhc2UiLCJfcmFua2luZyIsIm1SdWxlQXJyYXkiLCJnZXRNUnVsZXNTYW1wbGUiLCJtUnVsZXMiLCJjYXRlZ29yeSIsIm1hdGNoZWRTdHJpbmciLCJnZXRNUnVsZXNPbGQiLCJvIiwiY2F0ZWdvcmllcyIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwic0tleSIsIm9SdWxlIiwicHVzaCIsIm1SdWxlIiwiUmVnRXhwIiwiRXJyb3IiLCJKU09OIiwic3RyaW5naWZ5IiwidW5kZWZpbmVkIiwiaUluZGV4IiwibWF0Y2hJbmRleCIsInBhcnNlSW50Iiwic0NhdGVnb3J5Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUNHQSxJQUFZQSxjQUFXQyxRQUFNLFdBQU4sQ0FBdkI7QUFJYUMsUUFBQUMsU0FBQSxHQUEyQixDQUFDLHNCQUFELEVBQXlCLFVBQXpCLEVBQXFDLGdCQUFyQyxDQUEzQjtBQUViO0FBQ0EsU0FBQUMsVUFBQSxHQUFBO0FBR0UsUUFBSUMsdUJBQXVCLENBQ3pCO0FBQ0VDLGNBQU0sQ0FEUixDQUNRO0FBRFIsVUFFRUMsS0FBSyxzQkFGUDtB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ckMsa0NBQU0sSUFBSUMsS0FBSixDQUFVQyxLQUFLQyxTQUFMLENBQWVOLEtBQWYsRUFBc0JPLFNBQXRCLEVBQWlDLENBQWpDLENBQVYsQ0FBTjtBQUNEO0FBQ0QsNEJBQUlQLE1BQU12QixPQUFWLEVBQW1CO0FBQ2pCbUIsbUNBQU9DLElBQVAsQ0FBWUcsTUFBTXZCLE9BQWxCLEVBQTJCcUIsT0FBM0IsQ0FBbUMsVUFBVVUsTUFBVixFQUFnQjtBQUNqRCxvQ0FBSVIsTUFBTXZCLE9BQU4sQ0FBYytCLE1BQWQsTUFBMEJULElBQTlCLEVBQW9DO0FBQ2xDRywwQ0FBTU8sVUFBTixHQUFtQkMsU0FBU0YsTUFBVCxDQUFuQjtBQUNEO0FBQ0YsNkJBSkQ7QUFLRDtBQUNEeEIsNEJBQUlpQixJQUFKLENBQVNDLEtBQVQ7QUFDQVAsbUNBQVdKLFFBQVgsSUFBdUIsSUFBdkI7QUFDRDtBQUNDO0FBQ0Y7QUFDRSwwQkFBTSxJQUFJYSxLQUFKLENBQVUsaUJBQWlCQyxLQUFLQyxTQUFMLENBQWVOLEtBQWYsQ0FBM0IsQ0FBTjtBQWxDSixhQUZnRCxDQXFDOUM7QUFDSCxTQXRDRDtBQXVDQTtBQUNBSixlQUFPQyxJQUFQLENBQVlGLFVBQVosRUFBd0JHLE9BQXhCLENBQWdDLFVBQVVhLFNBQVYsRUFBbUI7QUFDakQzQixnQkFBSWlCLElBQUosQ0FBUztBQUNQdkMsc0JBQU0sQ0FEQyxDQUNEO0FBREMsa0JBRVBFLE1BQU0rQyxTQUZDO0FBR1BuQiwrQkFBZW1CLFNBSFI7QUFJUHBCLDBCQUFVO0FBSkgsYUFBVDtBQU1ELFNBUEQ7QUFRRCxLQWpERDtBQWtEQSxXQUFPUCxHQUFQO0FBRUQ7QUF4RGUxQixRQUFBbUMsWUFBQSxHQUFZQSxZQUFaIiwiZmlsZSI6Im1hdGNoL2lucHV0RmlsdGVyUnVsZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBpbnB1dEZpbHRlciA9IHJlcXVpcmUoJy4vaWZtYXRjaCcpO1xuZXhwb3J0cy5vS2V5T3JkZXIgPSBbXCJzeXN0ZW1PYmplY3RDYXRlZ29yeVwiLCBcInN5c3RlbUlkXCIsIFwic3lzdGVtT2JqZWN0SWRcIl07XG4vKiBAY292aWdub3JlICovXG5mdW5jdGlvbiBnZXRSdWxlTWFwKCkge1xuICAgIHZhciBzeXN0ZW1PYmplY3RDYXRlZ29yeSA9IFtcbiAgICAgICAge1xuICAgICAgICAgICAgdHlwZTogMCAvKiBXT1JEICovLFxuICAgICAgICAgICAga2V5OiBcInN5c3RlbU9iamVjdENhdGVnb3J5XCIsXG4gICAgICAgICAgICB3b3JkOiBcInVuaXQgdGVzdFwiLFxuICAgICAgICAgICAgZm9sbG93czoge1xuICAgICAgICAgICAgICAgIHN5c3RlbU9iamVjdENhdGVnb3J5OiBcInVuaXQgdGVzdFwiXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIHR5cGU6IDAgLyogV09SRCAqLyxcbiAgICAgICAgICAgIGtleTogXCJzeXN0ZW1PYmplY3RDYXRlZ29yeVwiLFxuICAgICAgICAgICAgd29yZDogXCJ1bml0XCIsXG4gICAgICAgICAgICBmb2xsb3dzOiB7XG4gICAgICAgICAgICAgICAgc3lzdGVtT2JqZWN0Q2F0ZWdvcnk6IFwidW5pdCB0ZXN0XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF07XG4gICAgLyogQGNvdmlnbm9yZSAqL1xuICAgIHZhciBzeXN0ZW1PYmplY3RDYXRlZ29yeTIgPSBbW1widW5pdCB0ZXN0XCIsIFwidW5pdFwiXSxcbiAgICAgICAgW1wid2lraVwiLCBcIndlYiBwYWdlXCJdLFxuICAgICAgICBbXCJmaW9yaSBjYXRhbG9nXCIsIFwiZmxwIGNhdGFsb2dcIiwgXCJjYXRhbG9nXCJdLFxuICAgICAgICBbXCJmaW9yaSBncm91cFwiLCBcImZscCBncm91cFwiLCBcImdyb3VwXCJdLFxuICAgICAgICBbXCJmbHBcIiwgXCJmaW9yaSBsYXVuY2hwYWRcIiwgXCJsYXVjaHBhZ2VcIiwgXCJsYXVuY2hwYWRcIl0sXG4gICAgICAgIFtcImZscGRcIl1cbiAgICBdLm1hcChmdW5jdGlvbiAoYUFycikge1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShhQXJyKSk7XG4gICAgICAgIHZhciBiZXN0U3lub255bSA9IGFBcnJbMF07XG4gICAgICAgIHJldHVybiBhQXJyLm1hcChmdW5jdGlvbiAoc0VudHJ5KSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6IDAgLyogV09SRCAqLyxcbiAgICAgICAgICAgICAgICBrZXk6IFwic3lzdGVtT2JqZWN0Q2F0ZWdvcnlcIixcbiAgICAgICAgICAgICAgICB3b3JkOiBzRW50cnksXG4gICAgICAgICAgICAgICAgZm9sbG93czoge1xuICAgICAgICAgICAgICAgICAgICBzeXN0ZW1PYmplY3RDYXRlZ29yeTogYmVzdFN5bm9ueW1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICBzeXN0ZW1PYmplY3RDYXRlZ29yeTIgPSBzeXN0ZW1PYmplY3RDYXRlZ29yeTIucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBhLmNvbmNhdChiKTsgfSwgW10pO1xuICAgIHZhciBzeXN0ZW1PYmplY3RDYXRlZ29yeSA9IHN5c3RlbU9iamVjdENhdGVnb3J5LmNvbmNhdChzeXN0ZW1PYmplY3RDYXRlZ29yeTIpO1xuICAgIHZhciBvUnVsZU1hcCA9IHtcbiAgICAgICAgXCJzeXN0ZW1PYmplY3RDYXRlZ29yeVwiOiBzeXN0ZW1PYmplY3RDYXRlZ29yeSxcbiAgICAgICAgXCJzeXN0ZW1JZFwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmVnZXhwOiAvXihbYS16MC05X117MywzfSlDTE5UKFxcZHszLDN9KSQvaSxcbiAgICAgICAgICAgICAgICBrZXk6ICdzeXN0ZW1JZCcsXG4gICAgICAgICAgICAgICAgYXJnc01hcDoge1xuICAgICAgICAgICAgICAgICAgICAxOiAnc3lzdGVtSWQnLFxuICAgICAgICAgICAgICAgICAgICAyOiAnY2xpZW50J1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdHlwZTogMSAvKiBSRUdFWFAgKi8sXG4gICAgICAgICAgICAgICAgZm9sbG93czoge31cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmVnZXhwOiAvXihbYS16MC05X117MywzfSkkL2ksXG4gICAgICAgICAgICAgICAga2V5OiAnc3lzdGVtSWQnLFxuICAgICAgICAgICAgICAgIGFyZ3NNYXA6IHtcbiAgICAgICAgICAgICAgICAgICAgMTogJ3N5c3RlbUlkJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdHlwZTogMSAvKiBSRUdFWFAgKi8sXG4gICAgICAgICAgICAgICAgZm9sbG93czoge31cbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICB9O1xuICAgIHZhciBVbml0VGVzdExpc3QgPSBbXG4gICAgICAgIC8vIGFscGhhYmV0aWMgb3JkZXIgcGxlYXNlXG4gICAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L2FkYXB0ZXJzL2NkbS9DbGllbnRTaWRlVGFyZ2V0UmVzb2x1dGlvbkFkYXB0ZXIucXVuaXQuaHRtbCcsXG4gICAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L2FkYXB0ZXJzL2NkbS9Db21tb25EYXRhTW9kZWxBZGFwdGVyLnF1bml0Lmh0bWwnLFxuICAgICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9hZGFwdGVycy9jZG0vTGF1bmNoUGFnZUFkYXB0ZXIucXVuaXQuaHRtbCcsXG4gICAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L2FkYXB0ZXJzL2xvY2FsL0FwcFN0YXRlQWRhcHRlci5xdW5pdC5odG1sJyxcbiAgICAgICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvYWRhcHRlcnMvbG9jYWwvQ2xpZW50U2lkZVRhcmdldFJlc29sdXRpb25BZGFwdGVyLnF1bml0Lmh0bWwnLFxuICAgICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9hZGFwdGVycy9sb2NhbC9Db250YWluZXJBZGFwdGVyLnF1bml0Lmh0bWwnLFxuICAgICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9hZGFwdGVycy9sb2NhbC9FbmRVc2VyRmVlZGJhY2tBZGFwdGVyLnF1bml0Lmh0bWwnLFxuICAgICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9hZGFwdGVycy9sb2NhbC9OYXZUYXJnZXRSZXNvbHV0aW9uQWRhcHRlci5xdW5pdC5odG1sJyxcbiAgICAgICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvYWRhcHRlcnMvbG9jYWwvUGVyc29uYWxpemF0aW9uQWRhcHRlci5xdW5pdC5odG1sJyxcbiAgICAgICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvYWRhcHRlcnMvbG9jYWwvU3VwcG9ydFRpY2tldEFkYXB0ZXJUZXN0LnF1bml0Lmh0bWwnLFxuICAgICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9hZGFwdGVycy9sb2NhbC9Vc2VyRGVmYXVsdFBhcmFtZXRlclBlcnNpc3RlbmNlQWRhcHRlci5xdW5pdC5odG1sJyxcbiAgICAgICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvYWRhcHRlcnMvbG9jYWwvVXNlckluZm9BZGFwdGVyLnF1bml0Lmh0bWwnLFxuICAgICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9ib290c3RyYXAvc2FuZGJveC5xdW5pdC5odG1sJyxcbiAgICAgICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvQ2FudmFzU2hhcGVzTWFuYWdlci5xdW5pdC5odG1sJyxcbiAgICAgICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvY29tcG9uZW50cy9jb250YWluZXIvQXBwbGljYXRpb25Db250YWluZXIucXVuaXQuaHRtbCcsXG4gICAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L2NvbXBvbmVudHMvZmFjdHNoZWV0L2Fubm90YXRpb24vT0RhdGFVUkxUZW1wbGF0aW5nLnF1bml0Lmh0bWwnLFxuICAgICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9jb21wb25lbnRzL2ZscC9Db21wb25lbnRLZXlzSGFuZGxlci5xdW5pdC5odG1sJyxcbiAgICAgICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvY29tcG9uZW50cy9mbHAvRmxwQXBwLnF1bml0Lmh0bWwnLFxuICAgICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9jb21wb25lbnRzL2ZscC9sYXVuY2hwYWQvYXBwZmluZGVyL0Vhc3lBY2Nlc3MucXVuaXQuaHRtbCcsXG4gICAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L2NvbXBvbmVudHMvZmxwL2xhdW5jaHBhZC9EYXNoYm9hcmRNYW5hZ2VyLnF1bml0Lmh0bWwnLFxuICAgICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9jb21wb25lbnRzL2ZscC9sYXVuY2hwYWQvUGFnaW5nTWFuYWdlci5xdW5pdC5odG1sJyxcbiAgICAgICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvY29tcG9uZW50cy9mbHAvbGF1bmNocGFkL2FwcGZpbmRlci9BcHBGaW5kZXIucXVuaXQuaHRtbCcsXG4gICAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L2NvbXBvbmVudHMvZmxwL2xhdW5jaHBhZC9hcHBmaW5kZXIvR3JvdXBMaXN0UG9wb3Zlci5xdW5pdC5odG1sJyxcbiAgICAgICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvY29tcG9uZW50cy9mbHAvbGF1bmNocGFkL2FwcGZpbmRlci9IaWVyYXJjaHlBcHBzLnF1bml0Lmh0bWwnLFxuICAgICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9jb21wb25lbnRzL2ZscC9sYXVuY2hwYWQvYXBwZmluZGVyL0hpZXJhcmNoeUZvbGRlcnMucXVuaXQuaHRtbCcsXG4gICAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3JlbmRlcmVycy9maW9yaTIvdXNlclByZWZlcmVuY2VzL0xhbmd1YWdlUmVnaW9uU2VsZWN0b3IucXVuaXQuaHRtbCcsXG4gICAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L2NvbXBvbmVudHMvZmxwL2xhdW5jaHBhZC9kYXNoYm9hcmQvRGFzaGJvYXJkQ29udGVudC5xdW5pdC5odG1sJyxcbiAgICAgICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvY29tcG9uZW50cy9mbHAvbGF1bmNocGFkL2Rhc2hib2FyZC9EYXNoYm9hcmRVSUFjdGlvbnMucXVuaXQuaHRtbCcsXG4gICAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L2NvbXBvbmVudHMvZmxwL3NldHRpbmdzL0ZscFNldHRpbmdzLnF1bml0Lmh0bWwnLFxuICAgICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9jb21wb25lbnRzL3RpbGVzL2FwcGxhdW5jaGVyL1N0YXRpY1RpbGUucXVuaXQuaHRtbCcsXG4gICAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L2NvbXBvbmVudHMvdGlsZXMvYXBwbGF1bmNoZXJkeW5hbWljL0R5bmFtaWNUaWxlLnF1bml0Lmh0bWwnLFxuICAgICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9jb21wb25lbnRzL3RpbGVzL2NkbS9hcHBsYXVuY2hlci9TdGF0aWNUaWxlLnF1bml0Lmh0bWwnLFxuICAgICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9jb21wb25lbnRzL3RpbGVzL2NkbS9hcHBsYXVuY2hlcmR5bmFtaWMvRHluYW1pY1RpbGUucXVuaXQuaHRtbCcsXG4gICAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L2NvbXBvbmVudHMvdGlsZXMvdXRpbHMucXVuaXQuaHRtbCcsXG4gICAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L2NvbXBvbmVudHMvdGlsZXMvdXRpbHNSVC5xdW5pdC5odG1sJyxcbiAgICAgICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvY29tcG9uZW50cy91c2VyQWN0aXZpdHkvdXNlckFjdGl2aXR5TG9nLnF1bml0Lmh0bWwnLFxuICAgICAgICAvLyBcInRlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvZGVtb2FwcHMvVXNlckRlZmF1bHRQbHVnaW5TYW1wbGUvVXNlckRlZmF1bHRQbHVnaW5TYW1wbGUucXVuaXQuaHRtbFwiLCAvLyBDdXJyZW50bHkgbm90IHJ1biBpbnNpZGUgdGhlIFFVbml0IFRlc3QgTG9hZGVyIGZvciB1c2hlbGwtbGliXG4gICAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L0ZMUEFuYWx5dGljcy5xdW5pdC5odG1sJyxcbiAgICAgICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvTGF5b3V0LnF1bml0Lmh0bWwnLFxuICAgICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9yZW5kZXJlcnMvZmlvcmkyL0FjY2Vzc0tleXNIYW5kbGVyLnF1bml0Lmh0bWwnLFxuICAgICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9yZW5kZXJlcnMvZmlvcmkyL0RlZmF1bHRQYXJhbWV0ZXJzL0RlZmF1bHRQYXJhbWV0ZXJzLnF1bml0Lmh0bWwnLFxuICAgICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9yZW5kZXJlcnMvZmlvcmkyL0xpZmVjeWNsZS5xdW5pdC5odG1sJyxcbiAgICAgICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvcmVuZGVyZXJzL2Zpb3JpMi9tZUFyZWEvTWVBcmVhLnF1bml0Lmh0bWwnLFxuICAgICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9yZW5kZXJlcnMvZmlvcmkyL21lQXJlYS9Vc2VyU2V0dGluZ3MucXVuaXQuaHRtbCcsXG4gICAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3JlbmRlcmVycy9maW9yaTIvbm90aWZpY2F0aW9ucy9Ob3RpZmljYXRpb25zLnF1bml0Lmh0bWwnLFxuICAgICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9yZW5kZXJlcnMvZmlvcmkyL25vdGlmaWNhdGlvbnMvU2V0dGluZ3MucXVuaXQuaHRtbCcsXG4gICAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3JlbmRlcmVycy9maW9yaTIvUmVuZGVyZXIucXVuaXQuaHRtbCcsXG4gICAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3JlbmRlcmVycy9maW9yaTIvUmVuZGVyZXJFeHRlbnNpb25zLnF1bml0Lmh0bWwnLFxuICAgICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9yZW5kZXJlcnMvZmlvcmkyL1NoZWxsLnF1bml0Lmh0bWwnLFxuICAgICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9yZW5kZXJlcnMvZmlvcmkyL1VJQWN0aW9ucy5xdW5pdC5odG1sJyxcbiAgICAgICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvc2VydmljZXMvQXBwQ29uZmlndXJhdGlvbi5xdW5pdC5odG1sJyxcbiAgICAgICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvc2VydmljZXMvQXBwQ29udGV4dC5xdW5pdC5odG1sJyxcbiAgICAgICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvc2VydmljZXMvQXBwTGlmZUN5Y2xlLnF1bml0Lmh0bWwnLFxuICAgICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9zZXJ2aWNlcy9BcHBTdGF0ZS5xdW5pdC5odG1sJyxcbiAgICAgICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvc2VydmljZXMvQm9va21hcmsucXVuaXQuaHRtbCcsXG4gICAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3NlcnZpY2VzL0NsaWVudFNpZGVUYXJnZXRSZXNvbHV0aW9uLnF1bml0Lmh0bWwnLFxuICAgICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9zZXJ2aWNlcy9Db21tb25EYXRhTW9kZWwucXVuaXQuaHRtbCcsXG4gICAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3NlcnZpY2VzL0NvbW1vbkRhdGFNb2RlbC9QZXJzb25hbGl6YXRpb25Qcm9jZXNzb3IucXVuaXQuaHRtbCcsXG4gICAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3NlcnZpY2VzL0NvbW1vbkRhdGFNb2RlbC9QZXJzb25hbGl6YXRpb25Qcm9jZXNzb3JDRE1CbGFja2JveC5xdW5pdC5odG1sJyxcbiAgICAgICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvc2VydmljZXMvQ29udGFpbmVyLnF1bml0Lmh0bWwnLFxuICAgICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9zZXJ2aWNlcy9Dcm9zc0FwcGxpY2F0aW9uTmF2aWdhdGlvbi5xdW5pdC5odG1sJyxcbiAgICAgICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvc2VydmljZXMvRW5kVXNlckZlZWRiYWNrLnF1bml0Lmh0bWwnLFxuICAgICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9zZXJ2aWNlcy9MYXVuY2hQYWdlLnF1bml0Lmh0bWwnLFxuICAgICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9zZXJ2aWNlcy9NZXNzYWdlLnF1bml0Lmh0bWwnLFxuICAgICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9zZXJ2aWNlcy9OYXZUYXJnZXRSZXNvbHV0aW9uLnF1bml0Lmh0bWwnLFxuICAgICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9zZXJ2aWNlcy9OYXZUYXJnZXRSZXNvbHV0aW9uQ0RNQmxhY2tib3gucXVuaXQuaHRtbCcsXG4gICAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3NlcnZpY2VzL05vdGlmaWNhdGlvbnMucXVuaXQuaHRtbCcsXG4gICAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3NlcnZpY2VzL1BlcnNvbmFsaXphdGlvbi5xdW5pdC5odG1sJyxcbiAgICAgICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvc2VydmljZXMvUGx1Z2luTWFuYWdlci5xdW5pdC5odG1sJyxcbiAgICAgICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvc2VydmljZXMvUmVmZXJlbmNlUmVzb2x2ZXIucXVuaXQuaHRtbCcsXG4gICAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3NlcnZpY2VzL1NoZWxsTmF2aWdhdGlvbi5IaXN0b3J5LnF1bml0Lmh0bWwnLFxuICAgICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9zZXJ2aWNlcy9TaGVsbE5hdmlnYXRpb24ucXVuaXQuaHRtbCcsXG4gICAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3NlcnZpY2VzL1N1cHBvcnRUaWNrZXQucXVuaXQuaHRtbCcsXG4gICAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3NlcnZpY2VzL1VSTFBhcnNpbmcucXVuaXQuaHRtbCcsXG4gICAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3NlcnZpY2VzL1VSTFNob3J0ZW5pbmcucXVuaXQuaHRtbCcsXG4gICAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3NlcnZpY2VzL1VpNUNvbXBvbmVudExvYWRlci5xdW5pdC5odG1sJyxcbiAgICAgICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvc2VydmljZXMvVXNhZ2VBbmFseXRpY3MucXVuaXQuaHRtbCcsXG4gICAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3NlcnZpY2VzL1VzZXJEZWZhdWx0UGFyYW1ldGVyUGVyc2lzdGVuY2UucXVuaXQuaHRtbCcsXG4gICAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3NlcnZpY2VzL1VzZXJEZWZhdWx0UGFyYW1ldGVycy5xdW5pdC5odG1sJyxcbiAgICAgICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvc2VydmljZXMvVXNlckluZm8ucXVuaXQuaHRtbCcsXG4gICAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3NlcnZpY2VzL1VzZXJSZWNlbnRzLnF1bml0Lmh0bWwnLFxuICAgICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9zZXJ2aWNlcy9TbWFydE5hdmlnYXRpb24ucXVuaXQuaHRtbCcsXG4gICAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L1N5c3RlbS5xdW5pdC5odG1sJyxcbiAgICAgICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvdWkvZm9vdGVyYmFyL0Fib3V0QnV0dG9uLnF1bml0Lmh0bWwnLFxuICAgICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC91aS9mb290ZXJiYXIvQWRkQm9va21hcmtCdXR0b24ucXVuaXQuaHRtbCcsXG4gICAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3VpL2Zvb3RlcmJhci9Db250YWN0U3VwcG9ydEJ1dHRvbi5xdW5pdC5odG1sJyxcbiAgICAgICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvdWkvZm9vdGVyYmFyL0VuZFVzZXJGZWVkYmFjay5xdW5pdC5odG1sJyxcbiAgICAgICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvdWkvZm9vdGVyYmFyL0phbURpc2N1c3NCdXR0b24ucXVuaXQuaHRtbCcsXG4gICAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3VpL2Zvb3RlcmJhci9KYW1TaGFyZUJ1dHRvbi5xdW5pdC5odG1sJyxcbiAgICAgICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvdWkvZm9vdGVyYmFyL0xvZ291dEJ1dHRvbi5xdW5pdC5odG1sJyxcbiAgICAgICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvdWkvZm9vdGVyYmFyL1NldHRpbmdzQnV0dG9uLnF1bml0Lmh0bWwnLFxuICAgICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC91aS9mb290ZXJiYXIvVXNlclByZWZlcmVuY2VzQnV0dG9uLnF1bml0Lmh0bWwnLFxuICAgICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC91aS9sYXVuY2hwYWQvQWNjZXNzaWJpbGl0eUN1c3RvbURhdGEucXVuaXQuaHRtbCcsXG4gICAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3VpL2xhdW5jaHBhZC9BY3Rpb25JdGVtLnF1bml0Lmh0bWwnLFxuICAgICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC91aS9sYXVuY2hwYWQvQW5jaG9ySXRlbS5xdW5pdC5odG1sJyxcbiAgICAgICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvdWkvbGF1bmNocGFkL0FuY2hvck5hdmlnYXRpb25CYXIucXVuaXQuaHRtbCcsXG4gICAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3VpL2xhdW5jaHBhZC9FbWJlZGRlZFN1cHBvcnRFcnJvck1lc3NhZ2UucXVuaXQuaHRtbCcsXG4gICAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3VpL2xhdW5jaHBhZC9GaW9yaTJMb2FkaW5nRGlhbG9nLnF1bml0Lmh0bWwnLFxuICAgICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC91aS9sYXVuY2hwYWQvR3JvdXBMaXN0SXRlbS5xdW5pdC5odG1sJyxcbiAgICAgICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvdWkvbGF1bmNocGFkL0xpbmtUaWxlV3JhcHBlci5xdW5pdC5odG1sJyxcbiAgICAgICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvdWkvbGF1bmNocGFkL0xvYWRpbmdEaWFsb2cucXVuaXQuaHRtbCcsXG4gICAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3VpL2xhdW5jaHBhZC9UaWxlQ29udGFpbmVyLnF1bml0Lmh0bWwnLFxuICAgICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC91aS9sYXVuY2hwYWQvVmlld1BvcnRDb250YWluZXIucXVuaXQuaHRtbCcsXG4gICAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3VpL3NoZWxsL0Zsb2F0aW5nQ29udGFpbmVyLnF1bml0Lmh0bWwnLFxuICAgICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC91aS9zaGVsbC9SaWdodEZsb2F0aW5nQ29udGFpbmVyLnF1bml0Lmh0bWwnLFxuICAgICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC91aS9zaGVsbC9TaGVsbEFwcFRpdGxlLnF1bml0Lmh0bWwnLFxuICAgICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC91aS9zaGVsbC9TaGVsbExheW91dC5xdW5pdC5odG1sJyxcbiAgICAgICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvdWkvc2hlbGwvU2hlbGxUaXRsZS5xdW5pdC5odG1sJyxcbiAgICAgICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvdWkvc2hlbGwvU3BsaXRDb250YWluZXIucXVuaXQuaHRtbCcsXG4gICAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3VpL3RpbGUvRHluYW1pY1RpbGUucXVuaXQuaHRtbCcsXG4gICAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3VpL3RpbGUvSW1hZ2VUaWxlLnF1bml0Lmh0bWwnLFxuICAgICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC91aS90aWxlL1N0YXRpY1RpbGUucXVuaXQuaHRtbCcsXG4gICAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3VpL3RpbGUvVGlsZUJhc2UucXVuaXQuaHRtbCcsXG4gICAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3VpNXNlcnZpY2UvU2hlbGxVSVNlcnZpY2UucXVuaXQuaHRtbCdcbiAgICBdO1xuICAgIHZhciBhcmVnZXggPSAvXFwvKFteL10qKS5xdW5pdC5odG1sLztcbiAgICB2YXIgc3lzdGVtT2JqZWN0SWQgPSBVbml0VGVzdExpc3QubWFwKGZ1bmN0aW9uIChzRW50cnkpIHtcbiAgICAgICAgdmFyIHNTdHJpbmcgPSBhcmVnZXguZXhlYyhzRW50cnkpWzFdOyAvLy5tYXRjaCgnLyhbXi9dKikucXVuaXQuaHRtbCcpWzFdXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBrZXk6IFwic3lzdGVtT2JqZWN0SWRcIixcbiAgICAgICAgICAgIHdvcmQ6IHNTdHJpbmcsXG4gICAgICAgICAgICB0eXBlOiAwIC8qIFdPUkQgKi8sXG4gICAgICAgICAgICBmb2xsb3dzOiB7XG4gICAgICAgICAgICAgICAgc3lzdGVtT2JqZWN0Q2F0ZWdvcnk6IFwidW5pdCB0ZXN0XCIsXG4gICAgICAgICAgICAgICAgc3lzdGVtT2JqZWN0SWQ6IHNTdHJpbmdcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9KTsgLy8gbWFwXG4gICAgdmFyIHN5c3RlbU9iamVjdElkMiA9IFtcbiAgICAgICAgLy8gd2lraSBhbGlhc2VzLCB0aGlzIGlzIGFuIG9sZCBsZWdhY3kgZm9yYW10XG4gICAgICAgIHtcbiAgICAgICAgICAgIGtleTogJ1N1cHBvcnQgcGFnZScsXG4gICAgICAgICAgICByZXM6ICdDQS1VSTItSU5ULUZFIHN1cHBvcnQnLFxuICAgICAgICB9LFxuICAgICAgICB7IGtleTogJ0ZDQyBBQkFQIEFsaWdubWVudCcgfSxcbiAgICAgICAgeyBrZXk6ICdVSTIgdGVzdCBsaW5rcycgfSxcbiAgICAgICAgeyBrZXk6ICdTdXBwb3J0IHNjaGVkdWxlJywgcmVzOiAnVElQIENvcmUgVUkgSW50ZWdyYXRpb24gc3VwcG9ydCcgfSxcbiAgICAgICAgeyBrZXk6ICdVSUkgU3VwcG9ydCBzY2hlZHVsZScsIHJlczogJ1RJUCBDb3JlIFVJIEludGVncmF0aW9uIHN1cHBvcnQnIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGtleTogJ1VJMiBTdXBwb3J0IHBhZ2UnLFxuICAgICAgICAgICAgcmVzOiAnQ0EtVUkyLUlOVC1GRSBzdXBwb3J0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBrZXk6ICdCYWNrZW5kIFNwcmludCBSZXZpZXdzJyxcbiAgICAgICAgICAgIHJlczogJ0JhY2tlbmQgU3ByaW50IFJldmlldydcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAga2V5OiAnVUk1IHBhdGNoIHNjaGVkdWxlJyxcbiAgICAgICAgICAgIHJlczogJ1VJNSBVSTIgUGF0Y2ggcGxhbidcbiAgICAgICAgfVxuICAgIF0ubWFwKGZ1bmN0aW9uIChvRW50cnkpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHdvcmQ6IG9FbnRyeS5rZXksXG4gICAgICAgICAgICBrZXk6IFwic3lzdGVtT2JqZWN0SWRcIixcbiAgICAgICAgICAgIHR5cGU6IDAgLyogV09SRCAqLyxcbiAgICAgICAgICAgIGZvbGxvd3M6IHtcbiAgICAgICAgICAgICAgICBzeXN0ZW1PYmplY3RDYXRlZ29yeTogXCJ3aWtpXCIsXG4gICAgICAgICAgICAgICAgc3lzdGVtT2JqZWN0SWQ6IChvRW50cnkucmVzIHx8IG9FbnRyeS5rZXkpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9KTsgLy8gbWFwXG4gICAgc3lzdGVtT2JqZWN0SWQgPSBzeXN0ZW1PYmplY3RJZC5jb25jYXQoc3lzdGVtT2JqZWN0SWQyKTtcbiAgICBzeXN0ZW1PYmplY3RJZCA9IHN5c3RlbU9iamVjdElkLmNvbmNhdChbXG4gICAgICAgIHtcbiAgICAgICAgICAgIHR5cGU6IDAgLyogV09SRCAqLyxcbiAgICAgICAgICAgIGtleTogXCJzeXN0ZW1PYmplY3RJZFwiLFxuICAgICAgICAgICAgd29yZDogXCJmbHBkXCIsXG4gICAgICAgICAgICBmb2xsb3dzOiB7fVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICB0eXBlOiAxIC8qIFJFR0VYUCAqLyxcbiAgICAgICAgICAgIGtleTogXCJzeXN0ZW1PYmplY3RJZFwiLFxuICAgICAgICAgICAgcmVnZXhwOiAvXFxTKy9pLFxuICAgICAgICAgICAgZm9sbG93czoge1xuICAgICAgICAgICAgICAgIF9yYW5raW5nOiAwLjlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF0pO1xuICAgIG9SdWxlTWFwW1wic3lzdGVtT2JqZWN0SWRcIl0gPSBzeXN0ZW1PYmplY3RJZDtcbiAgICByZXR1cm4gb1J1bGVNYXA7XG59XG5leHBvcnRzLmdldFJ1bGVNYXAgPSBnZXRSdWxlTWFwO1xudmFyIG1SdWxlQXJyYXk7XG5mdW5jdGlvbiBnZXRNUnVsZXNTYW1wbGUoKSB7XG4gICAgdmFyIG1SdWxlcyA9IFtdO1xuICAgIG1SdWxlcyA9IG1SdWxlcy5jb25jYXQoW1xuICAgICAgICAvLyBhIGdlbmVyaWMgcnVsZSBmb3IgYW55IGlkXG4gICAgICAgIHtcbiAgICAgICAgICAgIHR5cGU6IDEgLyogUkVHRVhQICovLFxuICAgICAgICAgICAgY2F0ZWdvcnk6IFwic3lzdGVtT2JqZWN0SWRcIixcbiAgICAgICAgICAgIHJlZ2V4cDogL1xcUysvaSxcbiAgICAgICAgICAgIF9yYW5raW5nOiAwLjVcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgdHlwZTogMSAvKiBSRUdFWFAgKi8sXG4gICAgICAgICAgICBjYXRlZ29yeTogXCJmaW9yaSBjYXRhbG9nXCIsXG4gICAgICAgICAgICByZWdleHA6IC9eW0EtWjAtOWEtel9cXC9dKyQvaSxcbiAgICAgICAgICAgIF9yYW5raW5nOiAwLjVcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgdHlwZTogMSAvKiBSRUdFWFAgKi8sXG4gICAgICAgICAgICBjYXRlZ29yeTogXCJjbGllbnRcIixcbiAgICAgICAgICAgIHJlZ2V4cDogL15cXGR7MywzfSQvaSxcbiAgICAgICAgICAgIF9yYW5raW5nOiAwLjhcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgdHlwZTogMSAvKiBSRUdFWFAgKi8sXG4gICAgICAgICAgICBjYXRlZ29yeTogXCJzeXN0ZW1JZFwiLFxuICAgICAgICAgICAgcmVnZXhwOiAvXltBLVpdW0EtWjAtOV1bQS1aMC05XSQvaSxcbiAgICAgICAgICAgIF9yYW5raW5nOiAwLjdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgdHlwZTogMCAvKiBXT1JEICovLFxuICAgICAgICAgICAgY2F0ZWdvcnk6IFwic3lzdGVtSWRcIixcbiAgICAgICAgICAgIHdvcmQ6IFwiVVYyXCIsXG4gICAgICAgICAgICBtYXRjaGVkU3RyaW5nOiBcIlVWMlwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIHR5cGU6IDEgLyogUkVHRVhQICovLFxuICAgICAgICAgICAgY2F0ZWdvcnk6IFwidHJhbnNhY3Rpb25cIixcbiAgICAgICAgICAgIHJlZ2V4cDogL15bQS1aXVtBLVowLTlfXXszLDN9JC9pLFxuICAgICAgICAgICAgX3Jhbmtpbmc6IDAuN1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICB0eXBlOiAxIC8qIFJFR0VYUCAqLyxcbiAgICAgICAgICAgIGNhdGVnb3J5OiBcImZpb3JpIGNhdGFsb2dcIixcbiAgICAgICAgICAgIHJlZ2V4cDogL15TQVBfQkNbQS1aXVtBLVowLTlfXSokLyxcbiAgICAgICAgICAgIF9yYW5raW5nOiAwLjg1XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIHR5cGU6IDEgLyogUkVHRVhQICovLFxuICAgICAgICAgICAgY2F0ZWdvcnk6IFwiZmlvcmkgY2F0YWxvZ1wiLFxuICAgICAgICAgICAgcmVnZXhwOiAvXlNBUF9UQ1tBLVpdW0EtWjAtOV9dKiQvLFxuICAgICAgICAgICAgX3Jhbmtpbmc6IDAuODVcbiAgICAgICAgfSxcbiAgICAgICAgLy8gYSBmZXcgdW5pdCB0ZXN0c1xuICAgICAgICB7XG4gICAgICAgICAgICBjYXRlZ29yeTogXCJ1bml0IHRlc3RcIixcbiAgICAgICAgICAgIG1hdGNoZWRTdHJpbmc6IFwiTmF2VGFyZ2V0UmVzb2x1dGlvblwiLFxuICAgICAgICAgICAgdHlwZTogMCxcbiAgICAgICAgICAgIHdvcmQ6IFwiTmF2VGFyZ2V0UmVzb2x1dGlvblwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGNhdGVnb3J5OiBcInVuaXQgdGVzdFwiLFxuICAgICAgICAgICAgbWF0Y2hlZFN0cmluZzogXCJOYXZUYXJnZXRSZXNvbHV0aW9uQWRhcHRlclwiLFxuICAgICAgICAgICAgdHlwZTogMCxcbiAgICAgICAgICAgIHdvcmQ6IFwiTmF2VGFyZ2V0UmVzb2x1dGlvbkFkYXB0ZXJcIlxuICAgICAgICB9LFxuICAgICAgICAvLyBhIGZldyB1bml0IHRlc3RzXG4gICAgICAgIHtcbiAgICAgICAgICAgIGNhdGVnb3J5OiBcIndpa2lcIixcbiAgICAgICAgICAgIG1hdGNoZWRTdHJpbmc6IFwiVUkyIEludGVncmF0aW9uXCIsXG4gICAgICAgICAgICB0eXBlOiAwLFxuICAgICAgICAgICAgd29yZDogXCJVSTIgSW50ZWdyYXRpb25cIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBjYXRlZ29yeTogXCJ3aWtpXCIsXG4gICAgICAgICAgICBtYXRjaGVkU3RyaW5nOiBcIlVJMiBTdXBwb3J0IHBhZ2VzXCIsXG4gICAgICAgICAgICB0eXBlOiAwLFxuICAgICAgICAgICAgd29yZDogXCJVSTIgU3VwcG9ydCBwYWdlc1wiXG4gICAgICAgIH0sXG4gICAgICAgIC8vIGNhdGVnb3JpZXMgb2YgdGhpcyBtb2RlbFxuICAgICAgICB7XG4gICAgICAgICAgICBjYXRlZ29yeTogXCJjYXRlZ29yeVwiLFxuICAgICAgICAgICAgbWF0Y2hlZFN0cmluZzogXCJ3aWtpXCIsXG4gICAgICAgICAgICB0eXBlOiAwLFxuICAgICAgICAgICAgd29yZDogXCJ3aWtpXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGNhdGVnb3J5OiBcImNhdGVnb3J5XCIsXG4gICAgICAgICAgICBtYXRjaGVkU3RyaW5nOiBcInVuaXQgdGVzdFwiLFxuICAgICAgICAgICAgdHlwZTogMCxcbiAgICAgICAgICAgIHdvcmQ6IFwidW5pdCB0ZXN0XCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGNhdGVnb3J5OiBcImNhdGVnb3J5XCIsXG4gICAgICAgICAgICBtYXRjaGVkU3RyaW5nOiBcInRyYW5zYWN0aW9uXCIsXG4gICAgICAgICAgICB0eXBlOiAwLFxuICAgICAgICAgICAgd29yZDogXCJ0cmFuc2FjdGlvblwiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBjYXRlZ29yeTogXCJjYXRlZ29yeVwiLFxuICAgICAgICAgICAgbWF0Y2hlZFN0cmluZzogXCJ0cmFuc2FjdGlvblwiLFxuICAgICAgICAgICAgdHlwZTogMCxcbiAgICAgICAgICAgIHdvcmQ6IFwidGFcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgY2F0ZWdvcnk6IFwiY2F0ZWdvcnlcIixcbiAgICAgICAgICAgIG1hdGNoZWRTdHJpbmc6IFwiZmlvcmkgY2F0YWxvZ1wiLFxuICAgICAgICAgICAgdHlwZTogMCxcbiAgICAgICAgICAgIHdvcmQ6IFwiZmlvcmkgY2F0YWxvZ1wiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBjYXRlZ29yeTogXCJjYXRlZ29yeVwiLFxuICAgICAgICAgICAgbWF0Y2hlZFN0cmluZzogXCJmaW9yaSBjYXRhbG9nXCIsXG4gICAgICAgICAgICB0eXBlOiAwLFxuICAgICAgICAgICAgX3Jhbmtpbmc6IDAuOCxcbiAgICAgICAgICAgIHdvcmQ6IFwiY2F0YWxvZ1wiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBjYXRlZ29yeTogXCJjYXRlZ29yeVwiLFxuICAgICAgICAgICAgbWF0Y2hlZFN0cmluZzogXCJzeXN0ZW1JZFwiLFxuICAgICAgICAgICAgdHlwZTogMCxcbiAgICAgICAgICAgIHdvcmQ6IFwic3lzdGVtXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGNhdGVnb3J5OiBcImNhdGVnb3J5XCIsXG4gICAgICAgICAgICBtYXRjaGVkU3RyaW5nOiBcImNsaWVudFwiLFxuICAgICAgICAgICAgdHlwZTogMCxcbiAgICAgICAgICAgIHdvcmQ6IFwiY2xpZW50XCIsXG4gICAgICAgIH0sXG4gICAgICAgIC8vIHRvb2xzIG9mIHRoZSBzYW1wbGUgbW9kZWxcbiAgICAgICAge1xuICAgICAgICAgICAgY2F0ZWdvcnk6IFwidG9vbFwiLFxuICAgICAgICAgICAgbWF0Y2hlZFN0cmluZzogXCJGTFBEXCIsXG4gICAgICAgICAgICB0eXBlOiAwLFxuICAgICAgICAgICAgd29yZDogXCJmbHBkXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGNhdGVnb3J5OiBcInRvb2xcIixcbiAgICAgICAgICAgIG1hdGNoZWRTdHJpbmc6IFwiRkxQXCIsXG4gICAgICAgICAgICB0eXBlOiAwLFxuICAgICAgICAgICAgd29yZDogXCJmbHBcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgY2F0ZWdvcnk6IFwidG9vbFwiLFxuICAgICAgICAgICAgbWF0Y2hlZFN0cmluZzogXCJGTFBcIixcbiAgICAgICAgICAgIHR5cGU6IDAsXG4gICAgICAgICAgICB3b3JkOiBcIkZpb3JpIExhdW5jaHBhZFwiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBjYXRlZ29yeTogXCJ0b29sXCIsXG4gICAgICAgICAgICBtYXRjaGVkU3RyaW5nOiBcIndpa2lcIixcbiAgICAgICAgICAgIHR5cGU6IDAsXG4gICAgICAgICAgICB3b3JkOiBcIndpa2lcIixcbiAgICAgICAgfSxcbiAgICAgICAgLy8gZmlsbGVyc1xuICAgICAgICAvLyB0b29scyBvZiB0aGUgc2FtcGxlIG1vZGVsXG4gICAgICAgIHtcbiAgICAgICAgICAgIGNhdGVnb3J5OiBcImZpbGxlclwiLFxuICAgICAgICAgICAgdHlwZTogMSxcbiAgICAgICAgICAgIHJlZ2V4cDogL14oKHN0YXJ0KXwoc2hvdyl8KGZyb20pfChpbikpJC9pLFxuICAgICAgICAgICAgbWF0Y2hlZFN0cmluZzogXCJmaWxsZXJcIixcbiAgICAgICAgICAgIF9yYW5raW5nOiAwLjlcbiAgICAgICAgfSxcbiAgICBdKTtcbiAgICByZXR1cm4gbVJ1bGVzO1xufVxuZXhwb3J0cy5nZXRNUnVsZXNTYW1wbGUgPSBnZXRNUnVsZXNTYW1wbGU7XG5mdW5jdGlvbiBnZXRNUnVsZXNPbGQoKSB7XG4gICAgdmFyIG8gPSBnZXRSdWxlTWFwKCk7XG4gICAgdmFyIGNhdGVnb3JpZXMgPSB7fTtcbiAgICB2YXIgcmVzID0gW107XG4gICAgT2JqZWN0LmtleXMobykuZm9yRWFjaChmdW5jdGlvbiAoc0tleSkge1xuICAgICAgICBvW3NLZXldLmZvckVhY2goZnVuY3Rpb24gKG9SdWxlKSB7XG4gICAgICAgICAgICB2YXIgY2F0ZWdvcnkgPSBvUnVsZS5mb2xsb3dzICYmIG9SdWxlLmZvbGxvd3NbXCJzeXN0ZW1PYmplY3RDYXRlZ29yeVwiXSB8fCBzS2V5O1xuICAgICAgICAgICAgc3dpdGNoIChvUnVsZS50eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwIC8qIFdPUkQgKi86XG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtYXRjaGVkU3RyaW5nID0gb1J1bGUuZm9sbG93cyAmJiBvUnVsZS5mb2xsb3dzW3NLZXldIHx8IG9SdWxlLndvcmQ7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogb1J1bGUudHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3b3JkOiBvUnVsZS53b3JkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoZWRTdHJpbmc6IG1hdGNoZWRTdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcnk6IGNhdGVnb3J5XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhdGVnb3JpZXNbY2F0ZWdvcnldID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDEgLyogUkVHRVhQICovOlxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbVJ1bGUgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogb1J1bGUudHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWdleHA6IG9SdWxlLnJlZ2V4cCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaGVkU3RyaW5nOiBvUnVsZS5mb2xsb3dzICYmIG9SdWxlLmZvbGxvd3Nbc0tleV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcnk6IGNhdGVnb3J5XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEobVJ1bGUucmVnZXhwIGluc3RhbmNlb2YgUmVnRXhwKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihKU09OLnN0cmluZ2lmeShvUnVsZSwgdW5kZWZpbmVkLCAyKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob1J1bGUuYXJnc01hcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKG9SdWxlLmFyZ3NNYXApLmZvckVhY2goZnVuY3Rpb24gKGlJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob1J1bGUuYXJnc01hcFtpSW5kZXhdID09PSBzS2V5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtUnVsZS5tYXRjaEluZGV4ID0gcGFyc2VJbnQoaUluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzLnB1c2gobVJ1bGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcmllc1tjYXRlZ29yeV0gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigndW5rbm93biBydWxlJyArIEpTT04uc3RyaW5naWZ5KG9SdWxlKSk7XG4gICAgICAgICAgICB9IC8vIHN3aXRjaFxuICAgICAgICB9KTtcbiAgICAgICAgLy8gYXBwZW5kIGNhdGVnb3JpZXNcbiAgICAgICAgT2JqZWN0LmtleXMoY2F0ZWdvcmllcykuZm9yRWFjaChmdW5jdGlvbiAoc0NhdGVnb3J5KSB7XG4gICAgICAgICAgICByZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgdHlwZTogMCAvKiBXT1JEICovLFxuICAgICAgICAgICAgICAgIHdvcmQ6IHNDYXRlZ29yeSxcbiAgICAgICAgICAgICAgICBtYXRjaGVkU3RyaW5nOiBzQ2F0ZWdvcnksXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IFwiY2F0ZWdvcnlcIlxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiByZXM7XG59XG5leHBvcnRzLmdldE1SdWxlc09sZCA9IGdldE1SdWxlc09sZDtcbiIsIlxuXG5pbXBvcnQgKiBhcyB4aW5wdXRGaWx0ZXIgZnJvbSAnLi9pbnB1dEZpbHRlcic7XG5pbXBvcnQgKiBhcyBpbnB1dEZpbHRlciBmcm9tICcuL2lmbWF0Y2gnO1xuXG5cblxuZXhwb3J0IGNvbnN0IG9LZXlPcmRlcjogQXJyYXk8U3RyaW5nPiA9IFtcInN5c3RlbU9iamVjdENhdGVnb3J5XCIsIFwic3lzdGVtSWRcIiwgXCJzeXN0ZW1PYmplY3RJZFwiXTtcblxuLyogQGNvdmlnbm9yZSAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFJ1bGVNYXAoKSB7XG5cblxuICB2YXIgc3lzdGVtT2JqZWN0Q2F0ZWdvcnkgPSBbXG4gICAge1xuICAgICAgdHlwZTogaW5wdXRGaWx0ZXIuRW51bVJ1bGVUeXBlLldPUkQsXG4gICAgICBrZXk6IFwic3lzdGVtT2JqZWN0Q2F0ZWdvcnlcIixcbiAgICAgIHdvcmQ6IFwidW5pdCB0ZXN0XCIsXG4gICAgICBmb2xsb3dzOiB7XG4gICAgICAgIHN5c3RlbU9iamVjdENhdGVnb3J5OiBcInVuaXQgdGVzdFwiXG4gICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICB0eXBlOiBpbnB1dEZpbHRlci5FbnVtUnVsZVR5cGUuV09SRCxcbiAgICAgIGtleTogXCJzeXN0ZW1PYmplY3RDYXRlZ29yeVwiLFxuICAgICAgd29yZDogXCJ1bml0XCIsXG4gICAgICBmb2xsb3dzOiB7XG4gICAgICAgIHN5c3RlbU9iamVjdENhdGVnb3J5OiBcInVuaXQgdGVzdFwiXG4gICAgICB9XG4gICAgfVxuICBdO1xuICAvKiBAY292aWdub3JlICovXG4gIHZhciBzeXN0ZW1PYmplY3RDYXRlZ29yeTIgPSBbW1widW5pdCB0ZXN0XCIsIFwidW5pdFwiXSxcbiAgW1wid2lraVwiLCBcIndlYiBwYWdlXCJdLFxuICBbXCJmaW9yaSBjYXRhbG9nXCIsIFwiZmxwIGNhdGFsb2dcIiwgXCJjYXRhbG9nXCJdLFxuICBbXCJmaW9yaSBncm91cFwiLCBcImZscCBncm91cFwiLCBcImdyb3VwXCJdLFxuICBbXCJmbHBcIiwgXCJmaW9yaSBsYXVuY2hwYWRcIiwgXCJsYXVjaHBhZ2VcIiwgXCJsYXVuY2hwYWRcIl0sXG4gIFtcImZscGRcIl1cbiAgXS5tYXAoZnVuY3Rpb24gKGFBcnIpIHtcbiAgICAvLyBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShhQXJyKSk7XG4gICAgdmFyIGJlc3RTeW5vbnltID0gYUFyclswXTtcbiAgICByZXR1cm4gYUFyci5tYXAoZnVuY3Rpb24gKHNFbnRyeSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogaW5wdXRGaWx0ZXIuRW51bVJ1bGVUeXBlLldPUkQsXG4gICAgICAgIGtleTogXCJzeXN0ZW1PYmplY3RDYXRlZ29yeVwiLFxuICAgICAgICB3b3JkOiBzRW50cnksXG4gICAgICAgIGZvbGxvd3M6IHtcbiAgICAgICAgICBzeXN0ZW1PYmplY3RDYXRlZ29yeTogYmVzdFN5bm9ueW1cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KTtcbiAgfSk7XG4gIHN5c3RlbU9iamVjdENhdGVnb3J5MiA9IHN5c3RlbU9iamVjdENhdGVnb3J5Mi5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGEuY29uY2F0KGIpOyB9LCBbXSkgYXMgYW55O1xuXG4gIHZhciBzeXN0ZW1PYmplY3RDYXRlZ29yeSA9IHN5c3RlbU9iamVjdENhdGVnb3J5LmNvbmNhdChzeXN0ZW1PYmplY3RDYXRlZ29yeTIgYXMgYW55KVxuXG4gIHZhciBvUnVsZU1hcCA9IHtcblxuICAgIFwic3lzdGVtT2JqZWN0Q2F0ZWdvcnlcIjogc3lzdGVtT2JqZWN0Q2F0ZWdvcnlcbiAgICAsXG4gICAgXCJzeXN0ZW1JZFwiOiBbXG4gICAgICB7XG4gICAgICAgIHJlZ2V4cDogL14oW2EtejAtOV9dezMsM30pQ0xOVChcXGR7MywzfSkkL2ksXG4gICAgICAgIGtleTogJ3N5c3RlbUlkJyxcbiAgICAgICAgYXJnc01hcDoge1xuICAgICAgICAgIDE6ICdzeXN0ZW1JZCcsXG4gICAgICAgICAgMjogJ2NsaWVudCdcbiAgICAgICAgfSxcbiAgICAgICAgdHlwZTogaW5wdXRGaWx0ZXIuRW51bVJ1bGVUeXBlLlJFR0VYUCxcbiAgICAgICAgZm9sbG93czoge31cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHJlZ2V4cDogL14oW2EtejAtOV9dezMsM30pJC9pLFxuICAgICAgICBrZXk6ICdzeXN0ZW1JZCcsXG4gICAgICAgIGFyZ3NNYXA6IHtcbiAgICAgICAgICAxOiAnc3lzdGVtSWQnXG4gICAgICAgIH0sXG4gICAgICAgIHR5cGU6IGlucHV0RmlsdGVyLkVudW1SdWxlVHlwZS5SRUdFWFAsXG4gICAgICAgIGZvbGxvd3M6IHt9XG4gICAgICB9XG4gICAgXSxcbiAgfTtcblxuXG5cbiAgdmFyIFVuaXRUZXN0TGlzdCA9XG4gICAgW1xuICAgICAgLy8gYWxwaGFiZXRpYyBvcmRlciBwbGVhc2VcblxuICAgICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvYWRhcHRlcnMvY2RtL0NsaWVudFNpZGVUYXJnZXRSZXNvbHV0aW9uQWRhcHRlci5xdW5pdC5odG1sJyxcbiAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L2FkYXB0ZXJzL2NkbS9Db21tb25EYXRhTW9kZWxBZGFwdGVyLnF1bml0Lmh0bWwnLFxuICAgICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvYWRhcHRlcnMvY2RtL0xhdW5jaFBhZ2VBZGFwdGVyLnF1bml0Lmh0bWwnLFxuXG4gICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9hZGFwdGVycy9sb2NhbC9BcHBTdGF0ZUFkYXB0ZXIucXVuaXQuaHRtbCcsXG4gICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9hZGFwdGVycy9sb2NhbC9DbGllbnRTaWRlVGFyZ2V0UmVzb2x1dGlvbkFkYXB0ZXIucXVuaXQuaHRtbCcsXG4gICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9hZGFwdGVycy9sb2NhbC9Db250YWluZXJBZGFwdGVyLnF1bml0Lmh0bWwnLFxuICAgICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvYWRhcHRlcnMvbG9jYWwvRW5kVXNlckZlZWRiYWNrQWRhcHRlci5xdW5pdC5odG1sJyxcbiAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L2FkYXB0ZXJzL2xvY2FsL05hdlRhcmdldFJlc29sdXRpb25BZGFwdGVyLnF1bml0Lmh0bWwnLFxuICAgICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvYWRhcHRlcnMvbG9jYWwvUGVyc29uYWxpemF0aW9uQWRhcHRlci5xdW5pdC5odG1sJyxcbiAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L2FkYXB0ZXJzL2xvY2FsL1N1cHBvcnRUaWNrZXRBZGFwdGVyVGVzdC5xdW5pdC5odG1sJyxcbiAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L2FkYXB0ZXJzL2xvY2FsL1VzZXJEZWZhdWx0UGFyYW1ldGVyUGVyc2lzdGVuY2VBZGFwdGVyLnF1bml0Lmh0bWwnLFxuICAgICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvYWRhcHRlcnMvbG9jYWwvVXNlckluZm9BZGFwdGVyLnF1bml0Lmh0bWwnLFxuXG4gICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9ib290c3RyYXAvc2FuZGJveC5xdW5pdC5odG1sJyxcbiAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L0NhbnZhc1NoYXBlc01hbmFnZXIucXVuaXQuaHRtbCcsXG5cbiAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L2NvbXBvbmVudHMvY29udGFpbmVyL0FwcGxpY2F0aW9uQ29udGFpbmVyLnF1bml0Lmh0bWwnLFxuICAgICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvY29tcG9uZW50cy9mYWN0c2hlZXQvYW5ub3RhdGlvbi9PRGF0YVVSTFRlbXBsYXRpbmcucXVuaXQuaHRtbCcsXG4gICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9jb21wb25lbnRzL2ZscC9Db21wb25lbnRLZXlzSGFuZGxlci5xdW5pdC5odG1sJyxcbiAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L2NvbXBvbmVudHMvZmxwL0ZscEFwcC5xdW5pdC5odG1sJyxcbiAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L2NvbXBvbmVudHMvZmxwL2xhdW5jaHBhZC9hcHBmaW5kZXIvRWFzeUFjY2Vzcy5xdW5pdC5odG1sJyxcbiAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L2NvbXBvbmVudHMvZmxwL2xhdW5jaHBhZC9EYXNoYm9hcmRNYW5hZ2VyLnF1bml0Lmh0bWwnLFxuICAgICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvY29tcG9uZW50cy9mbHAvbGF1bmNocGFkL1BhZ2luZ01hbmFnZXIucXVuaXQuaHRtbCcsXG4gICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9jb21wb25lbnRzL2ZscC9sYXVuY2hwYWQvYXBwZmluZGVyL0FwcEZpbmRlci5xdW5pdC5odG1sJyxcbiAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L2NvbXBvbmVudHMvZmxwL2xhdW5jaHBhZC9hcHBmaW5kZXIvR3JvdXBMaXN0UG9wb3Zlci5xdW5pdC5odG1sJyxcbiAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L2NvbXBvbmVudHMvZmxwL2xhdW5jaHBhZC9hcHBmaW5kZXIvSGllcmFyY2h5QXBwcy5xdW5pdC5odG1sJyxcbiAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L2NvbXBvbmVudHMvZmxwL2xhdW5jaHBhZC9hcHBmaW5kZXIvSGllcmFyY2h5Rm9sZGVycy5xdW5pdC5odG1sJyxcbiAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3JlbmRlcmVycy9maW9yaTIvdXNlclByZWZlcmVuY2VzL0xhbmd1YWdlUmVnaW9uU2VsZWN0b3IucXVuaXQuaHRtbCcsXG4gICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9jb21wb25lbnRzL2ZscC9sYXVuY2hwYWQvZGFzaGJvYXJkL0Rhc2hib2FyZENvbnRlbnQucXVuaXQuaHRtbCcsXG4gICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9jb21wb25lbnRzL2ZscC9sYXVuY2hwYWQvZGFzaGJvYXJkL0Rhc2hib2FyZFVJQWN0aW9ucy5xdW5pdC5odG1sJyxcbiAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L2NvbXBvbmVudHMvZmxwL3NldHRpbmdzL0ZscFNldHRpbmdzLnF1bml0Lmh0bWwnLFxuXG4gICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9jb21wb25lbnRzL3RpbGVzL2FwcGxhdW5jaGVyL1N0YXRpY1RpbGUucXVuaXQuaHRtbCcsXG4gICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9jb21wb25lbnRzL3RpbGVzL2FwcGxhdW5jaGVyZHluYW1pYy9EeW5hbWljVGlsZS5xdW5pdC5odG1sJyxcbiAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L2NvbXBvbmVudHMvdGlsZXMvY2RtL2FwcGxhdW5jaGVyL1N0YXRpY1RpbGUucXVuaXQuaHRtbCcsXG4gICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9jb21wb25lbnRzL3RpbGVzL2NkbS9hcHBsYXVuY2hlcmR5bmFtaWMvRHluYW1pY1RpbGUucXVuaXQuaHRtbCcsXG4gICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9jb21wb25lbnRzL3RpbGVzL3V0aWxzLnF1bml0Lmh0bWwnLFxuICAgICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvY29tcG9uZW50cy90aWxlcy91dGlsc1JULnF1bml0Lmh0bWwnLFxuICAgICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvY29tcG9uZW50cy91c2VyQWN0aXZpdHkvdXNlckFjdGl2aXR5TG9nLnF1bml0Lmh0bWwnLFxuXG4gICAgICAvLyBcInRlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvZGVtb2FwcHMvVXNlckRlZmF1bHRQbHVnaW5TYW1wbGUvVXNlckRlZmF1bHRQbHVnaW5TYW1wbGUucXVuaXQuaHRtbFwiLCAvLyBDdXJyZW50bHkgbm90IHJ1biBpbnNpZGUgdGhlIFFVbml0IFRlc3QgTG9hZGVyIGZvciB1c2hlbGwtbGliXG4gICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9GTFBBbmFseXRpY3MucXVuaXQuaHRtbCcsXG4gICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9MYXlvdXQucXVuaXQuaHRtbCcsXG5cbiAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3JlbmRlcmVycy9maW9yaTIvQWNjZXNzS2V5c0hhbmRsZXIucXVuaXQuaHRtbCcsXG4gICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9yZW5kZXJlcnMvZmlvcmkyL0RlZmF1bHRQYXJhbWV0ZXJzL0RlZmF1bHRQYXJhbWV0ZXJzLnF1bml0Lmh0bWwnLFxuICAgICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvcmVuZGVyZXJzL2Zpb3JpMi9MaWZlY3ljbGUucXVuaXQuaHRtbCcsXG4gICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9yZW5kZXJlcnMvZmlvcmkyL21lQXJlYS9NZUFyZWEucXVuaXQuaHRtbCcsXG4gICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9yZW5kZXJlcnMvZmlvcmkyL21lQXJlYS9Vc2VyU2V0dGluZ3MucXVuaXQuaHRtbCcsXG4gICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9yZW5kZXJlcnMvZmlvcmkyL25vdGlmaWNhdGlvbnMvTm90aWZpY2F0aW9ucy5xdW5pdC5odG1sJyxcbiAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3JlbmRlcmVycy9maW9yaTIvbm90aWZpY2F0aW9ucy9TZXR0aW5ncy5xdW5pdC5odG1sJyxcbiAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3JlbmRlcmVycy9maW9yaTIvUmVuZGVyZXIucXVuaXQuaHRtbCcsXG4gICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9yZW5kZXJlcnMvZmlvcmkyL1JlbmRlcmVyRXh0ZW5zaW9ucy5xdW5pdC5odG1sJyxcbiAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3JlbmRlcmVycy9maW9yaTIvU2hlbGwucXVuaXQuaHRtbCcsXG4gICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9yZW5kZXJlcnMvZmlvcmkyL1VJQWN0aW9ucy5xdW5pdC5odG1sJyxcblxuICAgICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvc2VydmljZXMvQXBwQ29uZmlndXJhdGlvbi5xdW5pdC5odG1sJyxcbiAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3NlcnZpY2VzL0FwcENvbnRleHQucXVuaXQuaHRtbCcsXG4gICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9zZXJ2aWNlcy9BcHBMaWZlQ3ljbGUucXVuaXQuaHRtbCcsXG4gICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9zZXJ2aWNlcy9BcHBTdGF0ZS5xdW5pdC5odG1sJyxcbiAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3NlcnZpY2VzL0Jvb2ttYXJrLnF1bml0Lmh0bWwnLFxuICAgICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvc2VydmljZXMvQ2xpZW50U2lkZVRhcmdldFJlc29sdXRpb24ucXVuaXQuaHRtbCcsXG4gICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9zZXJ2aWNlcy9Db21tb25EYXRhTW9kZWwucXVuaXQuaHRtbCcsXG4gICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9zZXJ2aWNlcy9Db21tb25EYXRhTW9kZWwvUGVyc29uYWxpemF0aW9uUHJvY2Vzc29yLnF1bml0Lmh0bWwnLFxuICAgICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvc2VydmljZXMvQ29tbW9uRGF0YU1vZGVsL1BlcnNvbmFsaXphdGlvblByb2Nlc3NvckNETUJsYWNrYm94LnF1bml0Lmh0bWwnLFxuICAgICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvc2VydmljZXMvQ29udGFpbmVyLnF1bml0Lmh0bWwnLFxuICAgICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvc2VydmljZXMvQ3Jvc3NBcHBsaWNhdGlvbk5hdmlnYXRpb24ucXVuaXQuaHRtbCcsXG4gICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9zZXJ2aWNlcy9FbmRVc2VyRmVlZGJhY2sucXVuaXQuaHRtbCcsXG4gICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9zZXJ2aWNlcy9MYXVuY2hQYWdlLnF1bml0Lmh0bWwnLFxuICAgICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvc2VydmljZXMvTWVzc2FnZS5xdW5pdC5odG1sJyxcbiAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3NlcnZpY2VzL05hdlRhcmdldFJlc29sdXRpb24ucXVuaXQuaHRtbCcsXG4gICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9zZXJ2aWNlcy9OYXZUYXJnZXRSZXNvbHV0aW9uQ0RNQmxhY2tib3gucXVuaXQuaHRtbCcsXG5cbiAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3NlcnZpY2VzL05vdGlmaWNhdGlvbnMucXVuaXQuaHRtbCcsXG4gICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9zZXJ2aWNlcy9QZXJzb25hbGl6YXRpb24ucXVuaXQuaHRtbCcsXG4gICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9zZXJ2aWNlcy9QbHVnaW5NYW5hZ2VyLnF1bml0Lmh0bWwnLFxuICAgICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvc2VydmljZXMvUmVmZXJlbmNlUmVzb2x2ZXIucXVuaXQuaHRtbCcsXG4gICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9zZXJ2aWNlcy9TaGVsbE5hdmlnYXRpb24uSGlzdG9yeS5xdW5pdC5odG1sJyxcbiAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3NlcnZpY2VzL1NoZWxsTmF2aWdhdGlvbi5xdW5pdC5odG1sJyxcblxuICAgICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvc2VydmljZXMvU3VwcG9ydFRpY2tldC5xdW5pdC5odG1sJyxcbiAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3NlcnZpY2VzL1VSTFBhcnNpbmcucXVuaXQuaHRtbCcsXG4gICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9zZXJ2aWNlcy9VUkxTaG9ydGVuaW5nLnF1bml0Lmh0bWwnLFxuICAgICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvc2VydmljZXMvVWk1Q29tcG9uZW50TG9hZGVyLnF1bml0Lmh0bWwnLFxuICAgICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvc2VydmljZXMvVXNhZ2VBbmFseXRpY3MucXVuaXQuaHRtbCcsXG4gICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9zZXJ2aWNlcy9Vc2VyRGVmYXVsdFBhcmFtZXRlclBlcnNpc3RlbmNlLnF1bml0Lmh0bWwnLFxuICAgICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvc2VydmljZXMvVXNlckRlZmF1bHRQYXJhbWV0ZXJzLnF1bml0Lmh0bWwnLFxuICAgICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvc2VydmljZXMvVXNlckluZm8ucXVuaXQuaHRtbCcsXG4gICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC9zZXJ2aWNlcy9Vc2VyUmVjZW50cy5xdW5pdC5odG1sJyxcbiAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3NlcnZpY2VzL1NtYXJ0TmF2aWdhdGlvbi5xdW5pdC5odG1sJyxcblxuICAgICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvU3lzdGVtLnF1bml0Lmh0bWwnLFxuXG4gICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC91aS9mb290ZXJiYXIvQWJvdXRCdXR0b24ucXVuaXQuaHRtbCcsXG4gICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC91aS9mb290ZXJiYXIvQWRkQm9va21hcmtCdXR0b24ucXVuaXQuaHRtbCcsXG4gICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC91aS9mb290ZXJiYXIvQ29udGFjdFN1cHBvcnRCdXR0b24ucXVuaXQuaHRtbCcsXG4gICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC91aS9mb290ZXJiYXIvRW5kVXNlckZlZWRiYWNrLnF1bml0Lmh0bWwnLFxuICAgICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvdWkvZm9vdGVyYmFyL0phbURpc2N1c3NCdXR0b24ucXVuaXQuaHRtbCcsXG4gICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC91aS9mb290ZXJiYXIvSmFtU2hhcmVCdXR0b24ucXVuaXQuaHRtbCcsXG4gICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC91aS9mb290ZXJiYXIvTG9nb3V0QnV0dG9uLnF1bml0Lmh0bWwnLFxuICAgICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvdWkvZm9vdGVyYmFyL1NldHRpbmdzQnV0dG9uLnF1bml0Lmh0bWwnLFxuICAgICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvdWkvZm9vdGVyYmFyL1VzZXJQcmVmZXJlbmNlc0J1dHRvbi5xdW5pdC5odG1sJyxcblxuICAgICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvdWkvbGF1bmNocGFkL0FjY2Vzc2liaWxpdHlDdXN0b21EYXRhLnF1bml0Lmh0bWwnLFxuICAgICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvdWkvbGF1bmNocGFkL0FjdGlvbkl0ZW0ucXVuaXQuaHRtbCcsXG4gICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC91aS9sYXVuY2hwYWQvQW5jaG9ySXRlbS5xdW5pdC5odG1sJyxcbiAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3VpL2xhdW5jaHBhZC9BbmNob3JOYXZpZ2F0aW9uQmFyLnF1bml0Lmh0bWwnLFxuICAgICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvdWkvbGF1bmNocGFkL0VtYmVkZGVkU3VwcG9ydEVycm9yTWVzc2FnZS5xdW5pdC5odG1sJyxcbiAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3VpL2xhdW5jaHBhZC9GaW9yaTJMb2FkaW5nRGlhbG9nLnF1bml0Lmh0bWwnLFxuICAgICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvdWkvbGF1bmNocGFkL0dyb3VwTGlzdEl0ZW0ucXVuaXQuaHRtbCcsXG4gICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC91aS9sYXVuY2hwYWQvTGlua1RpbGVXcmFwcGVyLnF1bml0Lmh0bWwnLFxuICAgICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvdWkvbGF1bmNocGFkL0xvYWRpbmdEaWFsb2cucXVuaXQuaHRtbCcsXG4gICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC91aS9sYXVuY2hwYWQvVGlsZUNvbnRhaW5lci5xdW5pdC5odG1sJyxcbiAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3VpL2xhdW5jaHBhZC9WaWV3UG9ydENvbnRhaW5lci5xdW5pdC5odG1sJyxcblxuICAgICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvdWkvc2hlbGwvRmxvYXRpbmdDb250YWluZXIucXVuaXQuaHRtbCcsXG4gICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC91aS9zaGVsbC9SaWdodEZsb2F0aW5nQ29udGFpbmVyLnF1bml0Lmh0bWwnLFxuICAgICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvdWkvc2hlbGwvU2hlbGxBcHBUaXRsZS5xdW5pdC5odG1sJyxcbiAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3VpL3NoZWxsL1NoZWxsTGF5b3V0LnF1bml0Lmh0bWwnLFxuICAgICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvdWkvc2hlbGwvU2hlbGxUaXRsZS5xdW5pdC5odG1sJyxcbiAgICAgICd0ZXN0LXJlc291cmNlcy9zYXAvdXNoZWxsL3F1bml0L3VpL3NoZWxsL1NwbGl0Q29udGFpbmVyLnF1bml0Lmh0bWwnLFxuXG4gICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC91aS90aWxlL0R5bmFtaWNUaWxlLnF1bml0Lmh0bWwnLFxuICAgICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvdWkvdGlsZS9JbWFnZVRpbGUucXVuaXQuaHRtbCcsXG4gICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC91aS90aWxlL1N0YXRpY1RpbGUucXVuaXQuaHRtbCcsXG4gICAgICAndGVzdC1yZXNvdXJjZXMvc2FwL3VzaGVsbC9xdW5pdC91aS90aWxlL1RpbGVCYXNlLnF1bml0Lmh0bWwnLFxuICAgICAgJ3Rlc3QtcmVzb3VyY2VzL3NhcC91c2hlbGwvcXVuaXQvdWk1c2VydmljZS9TaGVsbFVJU2VydmljZS5xdW5pdC5odG1sJ1xuICAgIF07XG5cbiAgdmFyIGFyZWdleCA9IC9cXC8oW14vXSopLnF1bml0Lmh0bWwvO1xuICB2YXIgc3lzdGVtT2JqZWN0SWQgPSBVbml0VGVzdExpc3QubWFwKGZ1bmN0aW9uIChzRW50cnkpIHtcbiAgICB2YXIgc1N0cmluZyA9IGFyZWdleC5leGVjKHNFbnRyeSlbMV07IC8vLm1hdGNoKCcvKFteL10qKS5xdW5pdC5odG1sJylbMV1cbiAgICByZXR1cm4ge1xuICAgICAga2V5OiBcInN5c3RlbU9iamVjdElkXCIsXG4gICAgICB3b3JkOiBzU3RyaW5nLFxuICAgICAgdHlwZTogaW5wdXRGaWx0ZXIuRW51bVJ1bGVUeXBlLldPUkQsXG4gICAgICBmb2xsb3dzOiB7XG4gICAgICAgIHN5c3RlbU9iamVjdENhdGVnb3J5OiBcInVuaXQgdGVzdFwiLFxuICAgICAgICBzeXN0ZW1PYmplY3RJZDogc1N0cmluZ1xuICAgICAgfVxuICAgIH1cbiAgfSk7IC8vIG1hcFxuXG5cbiAgdmFyIHN5c3RlbU9iamVjdElkMiA9IFtcbiAgICAvLyB3aWtpIGFsaWFzZXMsIHRoaXMgaXMgYW4gb2xkIGxlZ2FjeSBmb3JhbXRcbiAgICB7XG4gICAgICBrZXk6ICdTdXBwb3J0IHBhZ2UnLFxuICAgICAgcmVzOiAnQ0EtVUkyLUlOVC1GRSBzdXBwb3J0JyxcbiAgICB9LFxuICAgIHsga2V5OiAnRkNDIEFCQVAgQWxpZ25tZW50JyB9LFxuICAgIHsga2V5OiAnVUkyIHRlc3QgbGlua3MnIH0sXG4gICAgeyBrZXk6ICdTdXBwb3J0IHNjaGVkdWxlJywgcmVzOiAnVElQIENvcmUgVUkgSW50ZWdyYXRpb24gc3VwcG9ydCcgfSxcbiAgICB7IGtleTogJ1VJSSBTdXBwb3J0IHNjaGVkdWxlJywgcmVzOiAnVElQIENvcmUgVUkgSW50ZWdyYXRpb24gc3VwcG9ydCcgfSxcbiAgICB7XG4gICAgICBrZXk6ICdVSTIgU3VwcG9ydCBwYWdlJyxcbiAgICAgIHJlczogJ0NBLVVJMi1JTlQtRkUgc3VwcG9ydCdcbiAgICB9LFxuICAgIHtcbiAgICAgIGtleTogJ0JhY2tlbmQgU3ByaW50IFJldmlld3MnLFxuICAgICAgcmVzOiAnQmFja2VuZCBTcHJpbnQgUmV2aWV3J1xuICAgIH0sXG4gICAge1xuICAgICAga2V5OiAnVUk1IHBhdGNoIHNjaGVkdWxlJyxcbiAgICAgIHJlczogJ1VJNSBVSTIgUGF0Y2ggcGxhbidcbiAgICB9XG4gIF0ubWFwKGZ1bmN0aW9uIChvRW50cnk6IHsga2V5OiBzdHJpbmcsIHJlcz86IHN0cmluZyB9KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHdvcmQ6IG9FbnRyeS5rZXksXG4gICAgICBrZXk6IFwic3lzdGVtT2JqZWN0SWRcIixcbiAgICAgIHR5cGU6IGlucHV0RmlsdGVyLkVudW1SdWxlVHlwZS5XT1JELFxuICAgICAgZm9sbG93czoge1xuICAgICAgICBzeXN0ZW1PYmplY3RDYXRlZ29yeTogXCJ3aWtpXCIsXG4gICAgICAgIHN5c3RlbU9iamVjdElkOiAob0VudHJ5LnJlcyB8fCBvRW50cnkua2V5KS50b0xvd2VyQ2FzZSgpXG4gICAgICB9XG4gICAgfTtcbiAgfVxuICAgICk7IC8vIG1hcFxuXG5cbiAgc3lzdGVtT2JqZWN0SWQgPSBzeXN0ZW1PYmplY3RJZC5jb25jYXQoc3lzdGVtT2JqZWN0SWQyIGFzIGFueSk7XG5cbiAgc3lzdGVtT2JqZWN0SWQgPSBzeXN0ZW1PYmplY3RJZC5jb25jYXQoW1xuICAgIHtcbiAgICAgIHR5cGU6IGlucHV0RmlsdGVyLkVudW1SdWxlVHlwZS5XT1JELFxuICAgICAga2V5OiBcInN5c3RlbU9iamVjdElkXCIsXG4gICAgICB3b3JkOiBcImZscGRcIixcbiAgICAgIGZvbGxvd3M6IHtcbiAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgIHR5cGU6IGlucHV0RmlsdGVyLkVudW1SdWxlVHlwZS5SRUdFWFAsXG4gICAgICBrZXk6IFwic3lzdGVtT2JqZWN0SWRcIixcbiAgICAgIHJlZ2V4cDogL1xcUysvaSxcbiAgICAgIGZvbGxvd3M6IHtcbiAgICAgICAgX3Jhbmtpbmc6IDAuOVxuICAgICAgfVxuICAgIH1cbiAgXSBhcyBhbnkpXG5cbiAgb1J1bGVNYXBbXCJzeXN0ZW1PYmplY3RJZFwiXSA9IHN5c3RlbU9iamVjdElkO1xuXG4gIHJldHVybiBvUnVsZU1hcDtcblxufVxuXG52YXIgbVJ1bGVBcnJheTogQXJyYXk8aW5wdXRGaWx0ZXIubVJ1bGU+O1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRNUnVsZXNTYW1wbGUoKTogQXJyYXk8aW5wdXRGaWx0ZXIubVJ1bGU+IHtcbiAgdmFyIG1SdWxlcyA9IFtdIGFzIEFycmF5PGlucHV0RmlsdGVyLm1SdWxlPjtcbiAgbVJ1bGVzID0gbVJ1bGVzLmNvbmNhdChbXG4gICAgLy8gYSBnZW5lcmljIHJ1bGUgZm9yIGFueSBpZFxuICAgIHtcbiAgICAgIHR5cGU6IGlucHV0RmlsdGVyLkVudW1SdWxlVHlwZS5SRUdFWFAsXG4gICAgICBjYXRlZ29yeSA6IFwic3lzdGVtT2JqZWN0SWRcIixcbiAgICAgIHJlZ2V4cDogL1xcUysvaSxcbiAgICAgIF9yYW5raW5nOiAwLjVcbiAgICB9LFxuICAgIHtcbiAgICAgIHR5cGU6IGlucHV0RmlsdGVyLkVudW1SdWxlVHlwZS5SRUdFWFAsXG4gICAgICBjYXRlZ29yeSA6IFwiZmlvcmkgY2F0YWxvZ1wiLFxuICAgICAgcmVnZXhwOiAvXltBLVowLTlhLXpfXFwvXSskL2ksXG4gICAgICBfcmFua2luZzogMC41XG4gICAgfSxcbiAgICB7XG4gICAgICB0eXBlOiBpbnB1dEZpbHRlci5FbnVtUnVsZVR5cGUuUkVHRVhQLFxuICAgICAgY2F0ZWdvcnkgOiBcImNsaWVudFwiLFxuICAgICAgcmVnZXhwOiAvXlxcZHszLDN9JC9pLFxuICAgICAgX3Jhbmtpbmc6IDAuOFxuICAgIH0sXG4gICAge1xuICAgICAgdHlwZTogaW5wdXRGaWx0ZXIuRW51bVJ1bGVUeXBlLlJFR0VYUCxcbiAgICAgIGNhdGVnb3J5IDogXCJzeXN0ZW1JZFwiLFxuICAgICAgcmVnZXhwOiAvXltBLVpdW0EtWjAtOV1bQS1aMC05XSQvaSxcbiAgICAgIF9yYW5raW5nOiAwLjdcbiAgICB9LFxuICAgIHtcbiAgICAgIHR5cGU6IGlucHV0RmlsdGVyLkVudW1SdWxlVHlwZS5XT1JELFxuICAgICAgY2F0ZWdvcnkgOiBcInN5c3RlbUlkXCIsXG4gICAgICB3b3JkIDogXCJVVjJcIixcbiAgICAgIG1hdGNoZWRTdHJpbmc6IFwiVVYyXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIHR5cGU6IGlucHV0RmlsdGVyLkVudW1SdWxlVHlwZS5SRUdFWFAsXG4gICAgICBjYXRlZ29yeSA6IFwidHJhbnNhY3Rpb25cIixcbiAgICAgIHJlZ2V4cDogL15bQS1aXVtBLVowLTlfXXszLDN9JC9pLFxuICAgICAgX3Jhbmtpbmc6IDAuN1xuICAgIH0sXG4gICAge1xuICAgICAgdHlwZTogaW5wdXRGaWx0ZXIuRW51bVJ1bGVUeXBlLlJFR0VYUCxcbiAgICAgIGNhdGVnb3J5IDogXCJmaW9yaSBjYXRhbG9nXCIsXG4gICAgICByZWdleHA6IC9eU0FQX0JDW0EtWl1bQS1aMC05X10qJC8sXG4gICAgICBfcmFua2luZzogMC44NVxuICAgIH0sXG4gICAge1xuICAgICAgdHlwZTogaW5wdXRGaWx0ZXIuRW51bVJ1bGVUeXBlLlJFR0VYUCxcbiAgICAgIGNhdGVnb3J5IDogXCJmaW9yaSBjYXRhbG9nXCIsXG4gICAgICByZWdleHA6IC9eU0FQX1RDW0EtWl1bQS1aMC05X10qJC8sXG4gICAgICBfcmFua2luZzogMC44NVxuICAgIH0sXG4gICAgLy8gYSBmZXcgdW5pdCB0ZXN0c1xuICAgIHtcbiAgICAgIGNhdGVnb3J5OiBcInVuaXQgdGVzdFwiLFxuICAgICAgbWF0Y2hlZFN0cmluZzogXCJOYXZUYXJnZXRSZXNvbHV0aW9uXCIsXG4gICAgICB0eXBlOiAwLFxuICAgICAgd29yZDogXCJOYXZUYXJnZXRSZXNvbHV0aW9uXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIGNhdGVnb3J5OiBcInVuaXQgdGVzdFwiLFxuICAgICAgbWF0Y2hlZFN0cmluZzogXCJOYXZUYXJnZXRSZXNvbHV0aW9uQWRhcHRlclwiLFxuICAgICAgdHlwZTogMCxcbiAgICAgIHdvcmQ6IFwiTmF2VGFyZ2V0UmVzb2x1dGlvbkFkYXB0ZXJcIlxuICAgIH0sXG4gICAgLy8gYSBmZXcgdW5pdCB0ZXN0c1xuICAgIHtcbiAgICAgIGNhdGVnb3J5OiBcIndpa2lcIixcbiAgICAgIG1hdGNoZWRTdHJpbmc6IFwiVUkyIEludGVncmF0aW9uXCIsXG4gICAgICB0eXBlOiAwLFxuICAgICAgd29yZDogXCJVSTIgSW50ZWdyYXRpb25cIlxuICAgIH0sXG4gICAge1xuICAgICAgY2F0ZWdvcnk6IFwid2lraVwiLFxuICAgICAgbWF0Y2hlZFN0cmluZzogXCJVSTIgU3VwcG9ydCBwYWdlc1wiLFxuICAgICAgdHlwZTogMCxcbiAgICAgIHdvcmQ6IFwiVUkyIFN1cHBvcnQgcGFnZXNcIlxuICAgIH0sXG4gICAgLy8gY2F0ZWdvcmllcyBvZiB0aGlzIG1vZGVsXG4gICAge1xuICAgICAgY2F0ZWdvcnk6IFwiY2F0ZWdvcnlcIixcbiAgICAgIG1hdGNoZWRTdHJpbmc6IFwid2lraVwiLFxuICAgICAgdHlwZTogMCxcbiAgICAgIHdvcmQ6IFwid2lraVwiLFxuICAgIH0sXG4gICAge1xuICAgICAgY2F0ZWdvcnk6IFwiY2F0ZWdvcnlcIixcbiAgICAgIG1hdGNoZWRTdHJpbmc6IFwidW5pdCB0ZXN0XCIsXG4gICAgICB0eXBlOiAwLFxuICAgICAgd29yZDogXCJ1bml0IHRlc3RcIixcbiAgICB9LFxuICAgIHtcbiAgICAgIGNhdGVnb3J5OiBcImNhdGVnb3J5XCIsXG4gICAgICBtYXRjaGVkU3RyaW5nOiBcInRyYW5zYWN0aW9uXCIsXG4gICAgICB0eXBlOiAwLFxuICAgICAgd29yZDogXCJ0cmFuc2FjdGlvblwiLFxuICAgIH0sXG4gICAge1xuICAgICAgY2F0ZWdvcnk6IFwiY2F0ZWdvcnlcIixcbiAgICAgIG1hdGNoZWRTdHJpbmc6IFwidHJhbnNhY3Rpb25cIixcbiAgICAgIHR5cGU6IDAsXG4gICAgICB3b3JkOiBcInRhXCIsXG4gICAgfSxcbiAgICB7XG4gICAgICBjYXRlZ29yeTogXCJjYXRlZ29yeVwiLFxuICAgICAgbWF0Y2hlZFN0cmluZzogXCJmaW9yaSBjYXRhbG9nXCIsXG4gICAgICB0eXBlOiAwLFxuICAgICAgd29yZDogXCJmaW9yaSBjYXRhbG9nXCIsXG4gICAgfSxcbiAgICB7XG4gICAgICBjYXRlZ29yeTogXCJjYXRlZ29yeVwiLFxuICAgICAgbWF0Y2hlZFN0cmluZzogXCJmaW9yaSBjYXRhbG9nXCIsXG4gICAgICB0eXBlOiAwLFxuICAgICAgX3JhbmtpbmcgOiAwLjgsXG4gICAgICB3b3JkOiBcImNhdGFsb2dcIixcbiAgICB9LFxuICAgIHtcbiAgICAgIGNhdGVnb3J5OiBcImNhdGVnb3J5XCIsXG4gICAgICBtYXRjaGVkU3RyaW5nOiBcInN5c3RlbUlkXCIsXG4gICAgICB0eXBlOiAwLFxuICAgICAgd29yZDogXCJzeXN0ZW1cIixcbiAgICB9LFxuICAgIHtcbiAgICAgIGNhdGVnb3J5OiBcImNhdGVnb3J5XCIsXG4gICAgICBtYXRjaGVkU3RyaW5nOiBcImNsaWVudFwiLFxuICAgICAgdHlwZTogMCxcbiAgICAgIHdvcmQ6IFwiY2xpZW50XCIsXG4gICAgfSxcbiAgICAvLyB0b29scyBvZiB0aGUgc2FtcGxlIG1vZGVsXG4gICAge1xuICAgICAgY2F0ZWdvcnk6IFwidG9vbFwiLFxuICAgICAgbWF0Y2hlZFN0cmluZzogXCJGTFBEXCIsXG4gICAgICB0eXBlOiAwLFxuICAgICAgd29yZDogXCJmbHBkXCIsXG4gICAgfSxcbiAgICB7XG4gICAgICBjYXRlZ29yeTogXCJ0b29sXCIsXG4gICAgICBtYXRjaGVkU3RyaW5nOiBcIkZMUFwiLFxuICAgICAgdHlwZTogMCxcbiAgICAgIHdvcmQ6IFwiZmxwXCIsXG4gICAgfSxcbiAgICB7XG4gICAgICBjYXRlZ29yeTogXCJ0b29sXCIsXG4gICAgICBtYXRjaGVkU3RyaW5nOiBcIkZMUFwiLFxuICAgICAgdHlwZTogMCxcbiAgICAgIHdvcmQ6IFwiRmlvcmkgTGF1bmNocGFkXCIsXG4gICAgfSxcbiAgICB7XG4gICAgICBjYXRlZ29yeTogXCJ0b29sXCIsXG4gICAgICBtYXRjaGVkU3RyaW5nOiBcIndpa2lcIixcbiAgICAgIHR5cGU6IDAsXG4gICAgICB3b3JkOiBcIndpa2lcIixcbiAgICB9LFxuXG4gICAgLy8gZmlsbGVyc1xuICAgIC8vIHRvb2xzIG9mIHRoZSBzYW1wbGUgbW9kZWxcbiAgICB7XG4gICAgICBjYXRlZ29yeTogXCJmaWxsZXJcIixcbiAgICAgIHR5cGU6IDEsXG4gICAgICByZWdleHAgOiAvXigoc3RhcnQpfChzaG93KXwoZnJvbSl8KGluKSkkL2ksXG4gICAgICBtYXRjaGVkU3RyaW5nIDogXCJmaWxsZXJcIixcbiAgICAgIF9yYW5raW5nIDogMC45XG4gICAgfSxcbiAgXVxuICApO1xuICByZXR1cm4gbVJ1bGVzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TVJ1bGVzT2xkKCk6IEFycmF5PGlucHV0RmlsdGVyLm1SdWxlPiB7XG4gIHZhciBvID0gZ2V0UnVsZU1hcCgpO1xuICB2YXIgY2F0ZWdvcmllcyA9IHt9XG4gIHZhciByZXM6IEFycmF5PGlucHV0RmlsdGVyLm1SdWxlPiA9IFtdO1xuICBPYmplY3Qua2V5cyhvKS5mb3JFYWNoKGZ1bmN0aW9uIChzS2V5KSB7XG4gICAgb1tzS2V5XS5mb3JFYWNoKGZ1bmN0aW9uIChvUnVsZTogaW5wdXRGaWx0ZXIuSVJ1bGUpIHtcbiAgICAgIHZhciBjYXRlZ29yeSA9IG9SdWxlLmZvbGxvd3MgJiYgb1J1bGUuZm9sbG93c1tcInN5c3RlbU9iamVjdENhdGVnb3J5XCJdIHx8IHNLZXk7XG4gICAgICBzd2l0Y2ggKG9SdWxlLnR5cGUpIHtcbiAgICAgICAgY2FzZSBpbnB1dEZpbHRlci5FbnVtUnVsZVR5cGUuV09SRDoge1xuICAgICAgICAgIHZhciBtYXRjaGVkU3RyaW5nID0gb1J1bGUuZm9sbG93cyAmJiBvUnVsZS5mb2xsb3dzW3NLZXldIHx8IG9SdWxlLndvcmRcbiAgICAgICAgICByZXMucHVzaCh7XG4gICAgICAgICAgICB0eXBlOiBvUnVsZS50eXBlLFxuICAgICAgICAgICAgd29yZDogb1J1bGUud29yZCxcbiAgICAgICAgICAgIG1hdGNoZWRTdHJpbmc6IG1hdGNoZWRTdHJpbmcsXG4gICAgICAgICAgICBjYXRlZ29yeTogY2F0ZWdvcnlcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBjYXRlZ29yaWVzW2NhdGVnb3J5XSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBpbnB1dEZpbHRlci5FbnVtUnVsZVR5cGUuUkVHRVhQOiB7XG4gICAgICAgICAgdmFyIG1SdWxlOiBpbnB1dEZpbHRlci5tUnVsZSA9IHtcbiAgICAgICAgICAgIHR5cGU6IG9SdWxlLnR5cGUsXG4gICAgICAgICAgICByZWdleHA6IG9SdWxlLnJlZ2V4cCxcbiAgICAgICAgICAgIG1hdGNoZWRTdHJpbmc6IG9SdWxlLmZvbGxvd3MgJiYgb1J1bGUuZm9sbG93c1tzS2V5XSxcbiAgICAgICAgICAgIGNhdGVnb3J5OiBjYXRlZ29yeVxuICAgICAgICAgIH07XG4gICAgICAgICAgaWYgKCEobVJ1bGUucmVnZXhwIGluc3RhbmNlb2YgUmVnRXhwKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKEpTT04uc3RyaW5naWZ5KG9SdWxlLCB1bmRlZmluZWQsIDIpKVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAob1J1bGUuYXJnc01hcCkge1xuICAgICAgICAgICAgT2JqZWN0LmtleXMob1J1bGUuYXJnc01hcCkuZm9yRWFjaChmdW5jdGlvbiAoaUluZGV4KSB7XG4gICAgICAgICAgICAgIGlmIChvUnVsZS5hcmdzTWFwW2lJbmRleF0gPT09IHNLZXkpIHtcbiAgICAgICAgICAgICAgICBtUnVsZS5tYXRjaEluZGV4ID0gcGFyc2VJbnQoaUluZGV4KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlcy5wdXNoKG1SdWxlKTtcbiAgICAgICAgICBjYXRlZ29yaWVzW2NhdGVnb3J5XSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24gcnVsZScgKyBKU09OLnN0cmluZ2lmeShvUnVsZSkpXG4gICAgICB9IC8vIHN3aXRjaFxuICAgIH0pXG4gICAgLy8gYXBwZW5kIGNhdGVnb3JpZXNcbiAgICBPYmplY3Qua2V5cyhjYXRlZ29yaWVzKS5mb3JFYWNoKGZ1bmN0aW9uIChzQ2F0ZWdvcnkpIHtcbiAgICAgIHJlcy5wdXNoKHtcbiAgICAgICAgdHlwZTogaW5wdXRGaWx0ZXIuRW51bVJ1bGVUeXBlLldPUkQsXG4gICAgICAgIHdvcmQ6IHNDYXRlZ29yeSxcbiAgICAgICAgbWF0Y2hlZFN0cmluZzogc0NhdGVnb3J5LFxuICAgICAgICBjYXRlZ29yeTogXCJjYXRlZ29yeVwiXG4gICAgICB9KTtcbiAgICB9KVxuICB9KVxuICByZXR1cm4gcmVzO1xuXG59XG5cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
