/**
 * @file toolmatcher
 * @module jfseb.fdevstart.toolmatcher
 * @copyright (c) Gerd Forstmann
 *
 * Match a tool record on a sentence,
 *
 * This will unify matching required and optional category words
 * with the requirements of the tool.
 *
 */
"use strict";

var oToolFLPD = { 'name': 'FLPD',
    'requires': { 'systemId': {}, 'client': {} },
    'optional': { 'fiori catalog': {}, 'fiori group': {} }
};
var oToolFLP = { 'name': 'FLP',
    'requires': { 'systemId': {}, 'client': {} },
    'optional': { 'intent': {} }
};
var oToolTA = { 'name': 'StartTA',
    'requires': { 'transaction': {}, 'systemId': {}, 'client': {} },
    'optional': {}
};
var oToolWiki = { 'name': 'wiki',
    'requires': { 'wiki': {} },
    'optional': { 'wikipage': {} }
};
var oToolUnitTest = { 'name': 'unit test',
    'requires': { 'unit test': {} },
    optional: {}
};
var oToolWikiPage = { 'name': 'WikiPage',
    'requires': { 'wikipage': {} },
    optoinal: {}
};
var tools = [oToolWiki, oToolTA, oToolUnitTest, oToolFLPD, oToolWikiPage, oToolFLP];
function getTools() {
    return tools;
}
exports.getTools = getTools;
;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tYXRjaC90b29scy50cyIsIm1hdGNoL3Rvb2xzLmpzIl0sIm5hbWVzIjpbIm9Ub29sRkxQRCIsIm9Ub29sRkxQIiwib1Rvb2xUQSIsIm9Ub29sV2lraSIsIm9Ub29sVW5pdFRlc3QiLCJvcHRpb25hbCIsIm9Ub29sV2lraVBhZ2UiLCJvcHRvaW5hbCIsInRvb2xzIiwiZ2V0VG9vbHMiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7QUNXQTs7QURRQSxJQUFJQSxZQUFZLEVBQUUsUUFBUyxNQUFYO0FBQ2QsZ0JBQWEsRUFBRSxZQUFhLEVBQWYsRUFBbUIsVUFBVSxFQUE3QixFQURDO0FBRWQsZ0JBQWEsRUFBRSxpQkFBa0IsRUFBcEIsRUFBd0IsZUFBZSxFQUF2QztBQUZDLENBQWhCO0FBS0EsSUFBSUMsV0FBVyxFQUFFLFFBQVMsS0FBWDtBQUNiLGdCQUFhLEVBQUUsWUFBYSxFQUFmLEVBQW1CLFVBQVUsRUFBN0IsRUFEQTtBQUViLGdCQUFhLEVBQUUsVUFBVyxFQUFiO0FBRkEsQ0FBZjtBQUtBLElBQUlDLFVBQVUsRUFBRSxRQUFTLFNBQVg7QUFDWixnQkFBYSxFQUFFLGVBQWdCLEVBQWxCLEVBQXNCLFlBQWEsRUFBbkMsRUFBdUMsVUFBVSxFQUFqRCxFQUREO0FBRVosZ0JBQWE7QUFGRCxDQUFkO0FBS0EsSUFBSUMsWUFBWSxFQUFFLFFBQVMsTUFBWDtBQUNkLGdCQUFhLEVBQUUsUUFBUyxFQUFYLEVBREM7QUFFZCxnQkFBYSxFQUFFLFlBQWEsRUFBZjtBQUZDLENBQWhCO0FBTUEsSUFBSUMsZ0JBQWdCLEVBQUUsUUFBUyxXQUFYO0FBQ2xCLGdCQUFhLEVBQUUsYUFBYyxFQUFoQixFQURLO0FBRWxCQyxjQUFXO0FBRk8sQ0FBcEI7QUFLQSxJQUFJQyxnQkFBZ0IsRUFBRSxRQUFTLFVBQVg7QUFDbEIsZ0JBQWEsRUFBRSxZQUFhLEVBQWYsRUFESztBQUVsQkMsY0FBVztBQUZPLENBQXBCO0FBTUEsSUFBTUMsUUFBUSxDQUFDTCxTQUFELEVBQVlELE9BQVosRUFBcUJFLGFBQXJCLEVBQW9DSixTQUFwQyxFQUErQ00sYUFBL0MsRUFBOERMLFFBQTlELENBQWQ7QUFFQSxTQUFBUSxRQUFBLEdBQUE7QUFDRSxXQUFPRCxLQUFQO0FBQ0Q7QUFGZUUsUUFBQUQsUUFBQSxHQUFRQSxRQUFSO0FBRWYiLCJmaWxlIjoibWF0Y2gvdG9vbHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQGZpbGUgdG9vbG1hdGNoZXJcclxuICogQG1vZHVsZSBqZnNlYi5mZGV2c3RhcnQudG9vbG1hdGNoZXJcclxuICogQGNvcHlyaWdodCAoYykgR2VyZCBGb3JzdG1hbm5cclxuICpcclxuICogTWF0Y2ggYSB0b29sIHJlY29yZCBvbiBhIHNlbnRlbmNlLFxyXG4gKlxyXG4gKiBUaGlzIHdpbGwgdW5pZnkgbWF0Y2hpbmcgcmVxdWlyZWQgYW5kIG9wdGlvbmFsIGNhdGVnb3J5IHdvcmRzXHJcbiAqIHdpdGggdGhlIHJlcXVpcmVtZW50cyBvZiB0aGUgdG9vbC5cclxuICpcclxuICovXHJcblxyXG4vLyAvIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL2xpYi9ub2RlLTQuZC50c1wiIC8+XHJcblxyXG5pbXBvcnQgKiBhcyBkZWJ1ZyBmcm9tICdkZWJ1Zyc7XHJcbmltcG9ydCAqIGFzIElNYXRjaCBmcm9tICcuL2lmbWF0Y2gnO1xyXG5cclxuXHJcblxyXG52YXIgb1Rvb2xGTFBEID0geyAnbmFtZScgOiAnRkxQRCcsXHJcbiAgJ3JlcXVpcmVzJyA6IHsgJ3N5c3RlbUlkJyA6IHt9LCAnY2xpZW50JyA6e319LFxyXG4gICdvcHRpb25hbCcgOiB7ICdmaW9yaSBjYXRhbG9nJyA6IHt9LCAnZmlvcmkgZ3JvdXAnIDp7fX1cclxufTtcclxuXHJcbnZhciBvVG9vbEZMUCA9IHsgJ25hbWUnIDogJ0ZMUCcsXHJcbiAgJ3JlcXVpcmVzJyA6IHsgJ3N5c3RlbUlkJyA6IHt9LCAnY2xpZW50JyA6e319LFxyXG4gICdvcHRpb25hbCcgOiB7ICdpbnRlbnQnIDoge30gfVxyXG59O1xyXG5cclxudmFyIG9Ub29sVEEgPSB7ICduYW1lJyA6ICdTdGFydFRBJyxcclxuICAncmVxdWlyZXMnIDogeyAndHJhbnNhY3Rpb24nIDoge30sICdzeXN0ZW1JZCcgOiB7fSwgJ2NsaWVudCcgOnt9fSxcclxuICAnb3B0aW9uYWwnIDogeyB9XHJcbn07XHJcblxyXG52YXIgb1Rvb2xXaWtpID0geyAnbmFtZScgOiAnd2lraScsXHJcbiAgJ3JlcXVpcmVzJyA6IHsgJ3dpa2knIDoge30gfSxcclxuICAnb3B0aW9uYWwnIDogeyAnd2lraXBhZ2UnIDoge30gfVxyXG59O1xyXG5cclxuXHJcbnZhciBvVG9vbFVuaXRUZXN0ID0geyAnbmFtZScgOiAndW5pdCB0ZXN0JyxcclxuICAncmVxdWlyZXMnIDogeyAndW5pdCB0ZXN0JyA6IHt9IH0sXHJcbiAgb3B0aW9uYWwgOiB7fVxyXG59O1xyXG5cclxudmFyIG9Ub29sV2lraVBhZ2UgPSB7ICduYW1lJyA6ICdXaWtpUGFnZScsXHJcbiAgJ3JlcXVpcmVzJyA6IHsgJ3dpa2lwYWdlJyA6IHt9IH0sXHJcbiAgb3B0b2luYWwgOiB7fVxyXG59O1xyXG5cclxuXHJcbmNvbnN0IHRvb2xzID0gW29Ub29sV2lraSwgb1Rvb2xUQSwgb1Rvb2xVbml0VGVzdCwgb1Rvb2xGTFBELCBvVG9vbFdpa2lQYWdlLCBvVG9vbEZMUF07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0VG9vbHMoKSB7XHJcbiAgcmV0dXJuIHRvb2xzO1xyXG59O1xyXG4iLCIvKipcbiAqIEBmaWxlIHRvb2xtYXRjaGVyXG4gKiBAbW9kdWxlIGpmc2ViLmZkZXZzdGFydC50b29sbWF0Y2hlclxuICogQGNvcHlyaWdodCAoYykgR2VyZCBGb3JzdG1hbm5cbiAqXG4gKiBNYXRjaCBhIHRvb2wgcmVjb3JkIG9uIGEgc2VudGVuY2UsXG4gKlxuICogVGhpcyB3aWxsIHVuaWZ5IG1hdGNoaW5nIHJlcXVpcmVkIGFuZCBvcHRpb25hbCBjYXRlZ29yeSB3b3Jkc1xuICogd2l0aCB0aGUgcmVxdWlyZW1lbnRzIG9mIHRoZSB0b29sLlxuICpcbiAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgb1Rvb2xGTFBEID0geyAnbmFtZSc6ICdGTFBEJyxcbiAgICAncmVxdWlyZXMnOiB7ICdzeXN0ZW1JZCc6IHt9LCAnY2xpZW50Jzoge30gfSxcbiAgICAnb3B0aW9uYWwnOiB7ICdmaW9yaSBjYXRhbG9nJzoge30sICdmaW9yaSBncm91cCc6IHt9IH1cbn07XG52YXIgb1Rvb2xGTFAgPSB7ICduYW1lJzogJ0ZMUCcsXG4gICAgJ3JlcXVpcmVzJzogeyAnc3lzdGVtSWQnOiB7fSwgJ2NsaWVudCc6IHt9IH0sXG4gICAgJ29wdGlvbmFsJzogeyAnaW50ZW50Jzoge30gfVxufTtcbnZhciBvVG9vbFRBID0geyAnbmFtZSc6ICdTdGFydFRBJyxcbiAgICAncmVxdWlyZXMnOiB7ICd0cmFuc2FjdGlvbic6IHt9LCAnc3lzdGVtSWQnOiB7fSwgJ2NsaWVudCc6IHt9IH0sXG4gICAgJ29wdGlvbmFsJzoge31cbn07XG52YXIgb1Rvb2xXaWtpID0geyAnbmFtZSc6ICd3aWtpJyxcbiAgICAncmVxdWlyZXMnOiB7ICd3aWtpJzoge30gfSxcbiAgICAnb3B0aW9uYWwnOiB7ICd3aWtpcGFnZSc6IHt9IH1cbn07XG52YXIgb1Rvb2xVbml0VGVzdCA9IHsgJ25hbWUnOiAndW5pdCB0ZXN0JyxcbiAgICAncmVxdWlyZXMnOiB7ICd1bml0IHRlc3QnOiB7fSB9LFxuICAgIG9wdGlvbmFsOiB7fVxufTtcbnZhciBvVG9vbFdpa2lQYWdlID0geyAnbmFtZSc6ICdXaWtpUGFnZScsXG4gICAgJ3JlcXVpcmVzJzogeyAnd2lraXBhZ2UnOiB7fSB9LFxuICAgIG9wdG9pbmFsOiB7fVxufTtcbnZhciB0b29scyA9IFtvVG9vbFdpa2ksIG9Ub29sVEEsIG9Ub29sVW5pdFRlc3QsIG9Ub29sRkxQRCwgb1Rvb2xXaWtpUGFnZSwgb1Rvb2xGTFBdO1xuZnVuY3Rpb24gZ2V0VG9vbHMoKSB7XG4gICAgcmV0dXJuIHRvb2xzO1xufVxuZXhwb3J0cy5nZXRUb29scyA9IGdldFRvb2xzO1xuO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
