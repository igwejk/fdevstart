/**
 * @file toolmatcher
 * @module jfseb.fdevstart.toolmatcher
 * @copyright (c) Gerd Forstmann
 *
 * Match a tool record on a sentence,
 *
 * This will unify matching required and optional category words
 * with the requirements of the tool.
 *
 */
"use strict";

var oToolFLPD = {
    'name': 'FLPD',
    'requires': { 'systemId': {}, 'client': {} },
    'optional': { 'fiori catalog': {}, 'fiori group': {} }
};
var oToolFLP = {
    'name': 'FLP',
    'requires': { 'systemId': {}, 'client': {} },
    "optional": {
        "fiori intent": {}
    },
    "sets": {
        "intent": {
            "set": ["systemId", "client", "fiori intent"],
            "response": "_urlpattern1"
        },
        "none": {
            "set": ["systemId", "client"],
            "response": "_urlpattern2"
        }
    }
};
var oToolTA = {
    'name': 'StartTA',
    'requires': { 'transaction': {}, 'systemId': {}, 'client': {} },
    'optional': {}
};
var oToolWiki = {
    'name': 'wiki',
    'requires': { 'wiki': {} },
    'optional': { 'wikipage': {} }
};
var oToolUnitTest = {
    'name': 'unit test',
    'requires': { 'unit test': {} },
    optional: {}
};
var tools = [oToolWiki, oToolTA, oToolUnitTest, oToolFLPD, oToolFLP];
function cmpTools(a, b) {
    return a.name.localeCompare(b.name);
}
exports.cmpTools = cmpTools;
function getTools() {
    return tools.sort(cmpTools);
}
exports.getTools = getTools;
;
function findMatchingSet(a) {}
exports.findMatchingSet = findMatchingSet;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tYXRjaC90b29scy50cyIsIm1hdGNoL3Rvb2xzLmpzIl0sIm5hbWVzIjpbIm9Ub29sRkxQRCIsIm9Ub29sRkxQIiwib1Rvb2xUQSIsIm9Ub29sV2lraSIsIm9Ub29sVW5pdFRlc3QiLCJvcHRpb25hbCIsInRvb2xzIiwiY21wVG9vbHMiLCJhIiwiYiIsIm5hbWUiLCJsb2NhbGVDb21wYXJlIiwiZXhwb3J0cyIsImdldFRvb2xzIiwic29ydCIsImZpbmRNYXRjaGluZ1NldCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0FDV0E7O0FEUUEsSUFBSUEsWUFBWTtBQUNkLFlBQVEsTUFETTtBQUVkLGdCQUFZLEVBQUUsWUFBWSxFQUFkLEVBQWtCLFVBQVUsRUFBNUIsRUFGRTtBQUdkLGdCQUFZLEVBQUUsaUJBQWlCLEVBQW5CLEVBQXVCLGVBQWUsRUFBdEM7QUFIRSxDQUFoQjtBQU1BLElBQUlDLFdBQVc7QUFDYixZQUFRLEtBREs7QUFFYixnQkFBWSxFQUFFLFlBQVksRUFBZCxFQUFrQixVQUFVLEVBQTVCLEVBRkM7QUFHYixnQkFBWTtBQUNWLHdCQUFnQjtBQUROLEtBSEM7QUFNYixZQUFRO0FBQ04sa0JBQVU7QUFDUixtQkFBTyxDQUNMLFVBREssRUFFTCxRQUZLLEVBR0wsY0FISyxDQURDO0FBTVIsd0JBQVk7QUFOSixTQURKO0FBU04sZ0JBQVE7QUFDTixtQkFBTyxDQUNMLFVBREssRUFFTCxRQUZLLENBREQ7QUFLTix3QkFBWTtBQUxOO0FBVEY7QUFOSyxDQUFmO0FBeUJBLElBQUlDLFVBQVU7QUFDWixZQUFRLFNBREk7QUFFWixnQkFBWSxFQUFFLGVBQWUsRUFBakIsRUFBcUIsWUFBWSxFQUFqQyxFQUFxQyxVQUFVLEVBQS9DLEVBRkE7QUFHWixnQkFBWTtBQUhBLENBQWQ7QUFNQSxJQUFJQyxZQUFZO0FBQ2QsWUFBUSxNQURNO0FBRWQsZ0JBQVksRUFBRSxRQUFRLEVBQVYsRUFGRTtBQUdkLGdCQUFZLEVBQUUsWUFBWSxFQUFkO0FBSEUsQ0FBaEI7QUFPQSxJQUFJQyxnQkFBZ0I7QUFDbEIsWUFBUSxXQURVO0FBRWxCLGdCQUFZLEVBQUUsYUFBYSxFQUFmLEVBRk07QUFHbEJDLGNBQVU7QUFIUSxDQUFwQjtBQU9BLElBQU1DLFFBQVEsQ0FBQ0gsU0FBRCxFQUFZRCxPQUFaLEVBQXFCRSxhQUFyQixFQUFvQ0osU0FBcEMsRUFBK0NDLFFBQS9DLENBQWQ7QUFFQSxTQUFBTSxRQUFBLENBQXlCQyxDQUF6QixFQUEwQ0MsQ0FBMUMsRUFBeUQ7QUFDdkQsV0FBT0QsRUFBRUUsSUFBRixDQUFPQyxhQUFQLENBQXFCRixFQUFFQyxJQUF2QixDQUFQO0FBQ0Q7QUFGREUsUUFBQUwsUUFBQSxHQUFBQSxRQUFBO0FBSUEsU0FBQU0sUUFBQSxHQUFBO0FBQ0UsV0FBT1AsTUFBTVEsSUFBTixDQUFXUCxRQUFYLENBQVA7QUFDRDtBQUZESyxRQUFBQyxRQUFBLEdBQUFBLFFBQUE7QUFFQztBQUdELFNBQUFFLGVBQUEsQ0FBZ0NQLENBQWhDLEVBQTRELENBRTNEO0FBRkRJLFFBQUFHLGVBQUEsR0FBQUEsZUFBQSIsImZpbGUiOiJtYXRjaC90b29scy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBAZmlsZSB0b29sbWF0Y2hlclxyXG4gKiBAbW9kdWxlIGpmc2ViLmZkZXZzdGFydC50b29sbWF0Y2hlclxyXG4gKiBAY29weXJpZ2h0IChjKSBHZXJkIEZvcnN0bWFublxyXG4gKlxyXG4gKiBNYXRjaCBhIHRvb2wgcmVjb3JkIG9uIGEgc2VudGVuY2UsXHJcbiAqXHJcbiAqIFRoaXMgd2lsbCB1bmlmeSBtYXRjaGluZyByZXF1aXJlZCBhbmQgb3B0aW9uYWwgY2F0ZWdvcnkgd29yZHNcclxuICogd2l0aCB0aGUgcmVxdWlyZW1lbnRzIG9mIHRoZSB0b29sLlxyXG4gKlxyXG4gKi9cclxuXHJcbi8vIC8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vbGliL25vZGUtNC5kLnRzXCIgLz5cclxuXHJcbmltcG9ydCAqIGFzIGRlYnVnIGZyb20gJ2RlYnVnJztcclxuaW1wb3J0ICogYXMgSU1hdGNoIGZyb20gJy4vaWZtYXRjaCc7XHJcblxyXG5cclxuXHJcbnZhciBvVG9vbEZMUEQgPSB7XHJcbiAgJ25hbWUnOiAnRkxQRCcsXHJcbiAgJ3JlcXVpcmVzJzogeyAnc3lzdGVtSWQnOiB7fSwgJ2NsaWVudCc6IHt9IH0sXHJcbiAgJ29wdGlvbmFsJzogeyAnZmlvcmkgY2F0YWxvZyc6IHt9LCAnZmlvcmkgZ3JvdXAnOiB7fSB9XHJcbn07XHJcblxyXG52YXIgb1Rvb2xGTFAgPSB7XHJcbiAgJ25hbWUnOiAnRkxQJyxcclxuICAncmVxdWlyZXMnOiB7ICdzeXN0ZW1JZCc6IHt9LCAnY2xpZW50Jzoge30gfSxcclxuICBcIm9wdGlvbmFsXCI6IHtcclxuICAgIFwiZmlvcmkgaW50ZW50XCI6IHt9XHJcbiAgfSxcclxuICBcInNldHNcIjoge1xyXG4gICAgXCJpbnRlbnRcIjoge1xyXG4gICAgICBcInNldFwiOiBbXHJcbiAgICAgICAgXCJzeXN0ZW1JZFwiLFxyXG4gICAgICAgIFwiY2xpZW50XCIsXHJcbiAgICAgICAgXCJmaW9yaSBpbnRlbnRcIlxyXG4gICAgICBdLFxyXG4gICAgICBcInJlc3BvbnNlXCI6IFwiX3VybHBhdHRlcm4xXCJcclxuICAgIH0sXHJcbiAgICBcIm5vbmVcIjoge1xyXG4gICAgICBcInNldFwiOiBbXHJcbiAgICAgICAgXCJzeXN0ZW1JZFwiLFxyXG4gICAgICAgIFwiY2xpZW50XCJcclxuICAgICAgXSxcclxuICAgICAgXCJyZXNwb25zZVwiOiBcIl91cmxwYXR0ZXJuMlwiXHJcbiAgICB9XHJcbiAgfVxyXG59O1xyXG5cclxudmFyIG9Ub29sVEEgPSB7XHJcbiAgJ25hbWUnOiAnU3RhcnRUQScsXHJcbiAgJ3JlcXVpcmVzJzogeyAndHJhbnNhY3Rpb24nOiB7fSwgJ3N5c3RlbUlkJzoge30sICdjbGllbnQnOiB7fSB9LFxyXG4gICdvcHRpb25hbCc6IHt9XHJcbn07XHJcblxyXG52YXIgb1Rvb2xXaWtpID0ge1xyXG4gICduYW1lJzogJ3dpa2knLFxyXG4gICdyZXF1aXJlcyc6IHsgJ3dpa2knOiB7fSB9LFxyXG4gICdvcHRpb25hbCc6IHsgJ3dpa2lwYWdlJzoge30gfVxyXG59O1xyXG5cclxuXHJcbnZhciBvVG9vbFVuaXRUZXN0ID0ge1xyXG4gICduYW1lJzogJ3VuaXQgdGVzdCcsXHJcbiAgJ3JlcXVpcmVzJzogeyAndW5pdCB0ZXN0Jzoge30gfSxcclxuICBvcHRpb25hbDoge31cclxufTtcclxuXHJcblxyXG5jb25zdCB0b29scyA9IFtvVG9vbFdpa2ksIG9Ub29sVEEsIG9Ub29sVW5pdFRlc3QsIG9Ub29sRkxQRCwgb1Rvb2xGTFBdO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNtcFRvb2xzKGE6IElNYXRjaC5JVG9vbCwgYjogSU1hdGNoLklUb29sKSB7XHJcbiAgcmV0dXJuIGEubmFtZS5sb2NhbGVDb21wYXJlKGIubmFtZSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRUb29scygpIHtcclxuICByZXR1cm4gdG9vbHMuc29ydChjbXBUb29scyk7XHJcbn07XHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGZpbmRNYXRjaGluZ1NldChhIDogQXJyYXk8SU1hdGNoLklUb29sTWF0Y2g+ICkge1xyXG5cclxufSIsIi8qKlxuICogQGZpbGUgdG9vbG1hdGNoZXJcbiAqIEBtb2R1bGUgamZzZWIuZmRldnN0YXJ0LnRvb2xtYXRjaGVyXG4gKiBAY29weXJpZ2h0IChjKSBHZXJkIEZvcnN0bWFublxuICpcbiAqIE1hdGNoIGEgdG9vbCByZWNvcmQgb24gYSBzZW50ZW5jZSxcbiAqXG4gKiBUaGlzIHdpbGwgdW5pZnkgbWF0Y2hpbmcgcmVxdWlyZWQgYW5kIG9wdGlvbmFsIGNhdGVnb3J5IHdvcmRzXG4gKiB3aXRoIHRoZSByZXF1aXJlbWVudHMgb2YgdGhlIHRvb2wuXG4gKlxuICovXG5cInVzZSBzdHJpY3RcIjtcbnZhciBvVG9vbEZMUEQgPSB7XG4gICAgJ25hbWUnOiAnRkxQRCcsXG4gICAgJ3JlcXVpcmVzJzogeyAnc3lzdGVtSWQnOiB7fSwgJ2NsaWVudCc6IHt9IH0sXG4gICAgJ29wdGlvbmFsJzogeyAnZmlvcmkgY2F0YWxvZyc6IHt9LCAnZmlvcmkgZ3JvdXAnOiB7fSB9XG59O1xudmFyIG9Ub29sRkxQID0ge1xuICAgICduYW1lJzogJ0ZMUCcsXG4gICAgJ3JlcXVpcmVzJzogeyAnc3lzdGVtSWQnOiB7fSwgJ2NsaWVudCc6IHt9IH0sXG4gICAgXCJvcHRpb25hbFwiOiB7XG4gICAgICAgIFwiZmlvcmkgaW50ZW50XCI6IHt9XG4gICAgfSxcbiAgICBcInNldHNcIjoge1xuICAgICAgICBcImludGVudFwiOiB7XG4gICAgICAgICAgICBcInNldFwiOiBbXG4gICAgICAgICAgICAgICAgXCJzeXN0ZW1JZFwiLFxuICAgICAgICAgICAgICAgIFwiY2xpZW50XCIsXG4gICAgICAgICAgICAgICAgXCJmaW9yaSBpbnRlbnRcIlxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwicmVzcG9uc2VcIjogXCJfdXJscGF0dGVybjFcIlxuICAgICAgICB9LFxuICAgICAgICBcIm5vbmVcIjoge1xuICAgICAgICAgICAgXCJzZXRcIjogW1xuICAgICAgICAgICAgICAgIFwic3lzdGVtSWRcIixcbiAgICAgICAgICAgICAgICBcImNsaWVudFwiXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJyZXNwb25zZVwiOiBcIl91cmxwYXR0ZXJuMlwiXG4gICAgICAgIH1cbiAgICB9XG59O1xudmFyIG9Ub29sVEEgPSB7XG4gICAgJ25hbWUnOiAnU3RhcnRUQScsXG4gICAgJ3JlcXVpcmVzJzogeyAndHJhbnNhY3Rpb24nOiB7fSwgJ3N5c3RlbUlkJzoge30sICdjbGllbnQnOiB7fSB9LFxuICAgICdvcHRpb25hbCc6IHt9XG59O1xudmFyIG9Ub29sV2lraSA9IHtcbiAgICAnbmFtZSc6ICd3aWtpJyxcbiAgICAncmVxdWlyZXMnOiB7ICd3aWtpJzoge30gfSxcbiAgICAnb3B0aW9uYWwnOiB7ICd3aWtpcGFnZSc6IHt9IH1cbn07XG52YXIgb1Rvb2xVbml0VGVzdCA9IHtcbiAgICAnbmFtZSc6ICd1bml0IHRlc3QnLFxuICAgICdyZXF1aXJlcyc6IHsgJ3VuaXQgdGVzdCc6IHt9IH0sXG4gICAgb3B0aW9uYWw6IHt9XG59O1xudmFyIHRvb2xzID0gW29Ub29sV2lraSwgb1Rvb2xUQSwgb1Rvb2xVbml0VGVzdCwgb1Rvb2xGTFBELCBvVG9vbEZMUF07XG5mdW5jdGlvbiBjbXBUb29scyhhLCBiKSB7XG4gICAgcmV0dXJuIGEubmFtZS5sb2NhbGVDb21wYXJlKGIubmFtZSk7XG59XG5leHBvcnRzLmNtcFRvb2xzID0gY21wVG9vbHM7XG5mdW5jdGlvbiBnZXRUb29scygpIHtcbiAgICByZXR1cm4gdG9vbHMuc29ydChjbXBUb29scyk7XG59XG5leHBvcnRzLmdldFRvb2xzID0gZ2V0VG9vbHM7XG47XG5mdW5jdGlvbiBmaW5kTWF0Y2hpbmdTZXQoYSkge1xufVxuZXhwb3J0cy5maW5kTWF0Y2hpbmdTZXQgPSBmaW5kTWF0Y2hpbmdTZXQ7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
