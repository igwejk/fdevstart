/**
 * @file toolmatcher
 * @module jfseb.fdevstart.toolmatcher
 * @copyright (c) Gerd Forstmann
 *
 * Match a tool record on a sentence,
 *
 * This will unify matching required and optional category words
 * with the requirements of the tool.
 *
 */
"use strict";

var oToolFLPD = { 'name': 'FLPD',
    'requires': { 'systemId': {}, 'client': {} },
    'optional': { 'fiori catalog': {}, 'fiori group': {} }
};
var oToolFLP = { 'name': 'FLP',
    'requires': { 'systemId': {}, 'client': {} },
    'optional': { 'intent': {} }
};
var oToolTA = { 'name': 'StartTA',
    'requires': { 'transaction': {}, 'systemId': {}, 'client': {} },
    'optional': {}
};
var oToolWiki = { 'name': 'wiki',
    'requires': { 'wiki': {} },
    'optional': { 'wikipage': {} }
};
var oToolWikiPage = { 'name': 'WikiPage',
    'requires': { 'wikipage': {} }
};
var tools = [oToolWiki, oToolTA, oToolFLPD, oToolWikiPage, oToolFLP];
function getTools() {
    return tools;
}
exports.getTools = getTools;
;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tYXRjaC90b29scy50cyIsIm1hdGNoL3Rvb2xzLmpzIl0sIm5hbWVzIjpbIm9Ub29sRkxQRCIsIm9Ub29sRkxQIiwib1Rvb2xUQSIsIm9Ub29sV2lraSIsIm9Ub29sV2lraVBhZ2UiLCJ0b29scyIsImdldFRvb2xzIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0FDV0E7O0FEUUEsSUFBSUEsWUFBWSxFQUFFLFFBQVMsTUFBWDtBQUNkLGdCQUFhLEVBQUUsWUFBYSxFQUFmLEVBQW1CLFVBQVUsRUFBN0IsRUFEQztBQUVkLGdCQUFhLEVBQUUsaUJBQWtCLEVBQXBCLEVBQXdCLGVBQWUsRUFBdkM7QUFGQyxDQUFoQjtBQUtBLElBQUlDLFdBQVcsRUFBRSxRQUFTLEtBQVg7QUFDYixnQkFBYSxFQUFFLFlBQWEsRUFBZixFQUFtQixVQUFVLEVBQTdCLEVBREE7QUFFYixnQkFBYSxFQUFFLFVBQVcsRUFBYjtBQUZBLENBQWY7QUFLQSxJQUFJQyxVQUFVLEVBQUUsUUFBUyxTQUFYO0FBQ1osZ0JBQWEsRUFBRSxlQUFnQixFQUFsQixFQUFzQixZQUFhLEVBQW5DLEVBQXVDLFVBQVUsRUFBakQsRUFERDtBQUVaLGdCQUFhO0FBRkQsQ0FBZDtBQUtBLElBQUlDLFlBQVksRUFBRSxRQUFTLE1BQVg7QUFDZCxnQkFBYSxFQUFFLFFBQVMsRUFBWCxFQURDO0FBRWQsZ0JBQWEsRUFBRSxZQUFhLEVBQWY7QUFGQyxDQUFoQjtBQUtBLElBQUlDLGdCQUFnQixFQUFFLFFBQVMsVUFBWDtBQUNsQixnQkFBYSxFQUFFLFlBQWEsRUFBZjtBQURLLENBQXBCO0FBS0EsSUFBTUMsUUFBUSxDQUFDRixTQUFELEVBQVlELE9BQVosRUFBcUJGLFNBQXJCLEVBQWdDSSxhQUFoQyxFQUErQ0gsUUFBL0MsQ0FBZDtBQUVBLFNBQUFLLFFBQUEsR0FBQTtBQUNFLFdBQU9ELEtBQVA7QUFDRDtBQUZlRSxRQUFBRCxRQUFBLEdBQVFBLFFBQVI7QUFFZiIsImZpbGUiOiJtYXRjaC90b29scy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBAZmlsZSB0b29sbWF0Y2hlclxyXG4gKiBAbW9kdWxlIGpmc2ViLmZkZXZzdGFydC50b29sbWF0Y2hlclxyXG4gKiBAY29weXJpZ2h0IChjKSBHZXJkIEZvcnN0bWFublxyXG4gKlxyXG4gKiBNYXRjaCBhIHRvb2wgcmVjb3JkIG9uIGEgc2VudGVuY2UsXHJcbiAqXHJcbiAqIFRoaXMgd2lsbCB1bmlmeSBtYXRjaGluZyByZXF1aXJlZCBhbmQgb3B0aW9uYWwgY2F0ZWdvcnkgd29yZHNcclxuICogd2l0aCB0aGUgcmVxdWlyZW1lbnRzIG9mIHRoZSB0b29sLlxyXG4gKlxyXG4gKi9cclxuXHJcbi8vIC8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vbGliL25vZGUtNC5kLnRzXCIgLz5cclxuXHJcbmltcG9ydCAqIGFzIGRlYnVnIGZyb20gJ2RlYnVnJztcclxuaW1wb3J0ICogYXMgSU1hdGNoIGZyb20gJy4vaWZtYXRjaCc7XHJcblxyXG5cclxuXHJcbnZhciBvVG9vbEZMUEQgPSB7ICduYW1lJyA6ICdGTFBEJyxcclxuICAncmVxdWlyZXMnIDogeyAnc3lzdGVtSWQnIDoge30sICdjbGllbnQnIDp7fX0sXHJcbiAgJ29wdGlvbmFsJyA6IHsgJ2Zpb3JpIGNhdGFsb2cnIDoge30sICdmaW9yaSBncm91cCcgOnt9fVxyXG59O1xyXG5cclxudmFyIG9Ub29sRkxQID0geyAnbmFtZScgOiAnRkxQJyxcclxuICAncmVxdWlyZXMnIDogeyAnc3lzdGVtSWQnIDoge30sICdjbGllbnQnIDp7fX0sXHJcbiAgJ29wdGlvbmFsJyA6IHsgJ2ludGVudCcgOiB7fSB9XHJcbn07XHJcblxyXG52YXIgb1Rvb2xUQSA9IHsgJ25hbWUnIDogJ1N0YXJ0VEEnLFxyXG4gICdyZXF1aXJlcycgOiB7ICd0cmFuc2FjdGlvbicgOiB7fSwgJ3N5c3RlbUlkJyA6IHt9LCAnY2xpZW50JyA6e319LFxyXG4gICdvcHRpb25hbCcgOiB7IH1cclxufTtcclxuXHJcbnZhciBvVG9vbFdpa2kgPSB7ICduYW1lJyA6ICd3aWtpJyxcclxuICAncmVxdWlyZXMnIDogeyAnd2lraScgOiB7fSB9LFxyXG4gICdvcHRpb25hbCcgOiB7ICd3aWtpcGFnZScgOiB7fSB9XHJcbn07XHJcblxyXG52YXIgb1Rvb2xXaWtpUGFnZSA9IHsgJ25hbWUnIDogJ1dpa2lQYWdlJyxcclxuICAncmVxdWlyZXMnIDogeyAnd2lraXBhZ2UnIDoge30gfVxyXG59O1xyXG5cclxuXHJcbmNvbnN0IHRvb2xzID0gW29Ub29sV2lraSwgb1Rvb2xUQSwgb1Rvb2xGTFBELCBvVG9vbFdpa2lQYWdlLCBvVG9vbEZMUF07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0VG9vbHMoKSB7XHJcbiAgcmV0dXJuIHRvb2xzO1xyXG59O1xyXG4iLCIvKipcbiAqIEBmaWxlIHRvb2xtYXRjaGVyXG4gKiBAbW9kdWxlIGpmc2ViLmZkZXZzdGFydC50b29sbWF0Y2hlclxuICogQGNvcHlyaWdodCAoYykgR2VyZCBGb3JzdG1hbm5cbiAqXG4gKiBNYXRjaCBhIHRvb2wgcmVjb3JkIG9uIGEgc2VudGVuY2UsXG4gKlxuICogVGhpcyB3aWxsIHVuaWZ5IG1hdGNoaW5nIHJlcXVpcmVkIGFuZCBvcHRpb25hbCBjYXRlZ29yeSB3b3Jkc1xuICogd2l0aCB0aGUgcmVxdWlyZW1lbnRzIG9mIHRoZSB0b29sLlxuICpcbiAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgb1Rvb2xGTFBEID0geyAnbmFtZSc6ICdGTFBEJyxcbiAgICAncmVxdWlyZXMnOiB7ICdzeXN0ZW1JZCc6IHt9LCAnY2xpZW50Jzoge30gfSxcbiAgICAnb3B0aW9uYWwnOiB7ICdmaW9yaSBjYXRhbG9nJzoge30sICdmaW9yaSBncm91cCc6IHt9IH1cbn07XG52YXIgb1Rvb2xGTFAgPSB7ICduYW1lJzogJ0ZMUCcsXG4gICAgJ3JlcXVpcmVzJzogeyAnc3lzdGVtSWQnOiB7fSwgJ2NsaWVudCc6IHt9IH0sXG4gICAgJ29wdGlvbmFsJzogeyAnaW50ZW50Jzoge30gfVxufTtcbnZhciBvVG9vbFRBID0geyAnbmFtZSc6ICdTdGFydFRBJyxcbiAgICAncmVxdWlyZXMnOiB7ICd0cmFuc2FjdGlvbic6IHt9LCAnc3lzdGVtSWQnOiB7fSwgJ2NsaWVudCc6IHt9IH0sXG4gICAgJ29wdGlvbmFsJzoge31cbn07XG52YXIgb1Rvb2xXaWtpID0geyAnbmFtZSc6ICd3aWtpJyxcbiAgICAncmVxdWlyZXMnOiB7ICd3aWtpJzoge30gfSxcbiAgICAnb3B0aW9uYWwnOiB7ICd3aWtpcGFnZSc6IHt9IH1cbn07XG52YXIgb1Rvb2xXaWtpUGFnZSA9IHsgJ25hbWUnOiAnV2lraVBhZ2UnLFxuICAgICdyZXF1aXJlcyc6IHsgJ3dpa2lwYWdlJzoge30gfVxufTtcbnZhciB0b29scyA9IFtvVG9vbFdpa2ksIG9Ub29sVEEsIG9Ub29sRkxQRCwgb1Rvb2xXaWtpUGFnZSwgb1Rvb2xGTFBdO1xuZnVuY3Rpb24gZ2V0VG9vbHMoKSB7XG4gICAgcmV0dXJuIHRvb2xzO1xufVxuZXhwb3J0cy5nZXRUb29scyA9IGdldFRvb2xzO1xuO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
