/**
 *
 * @module jfseb.fdevstart.analyze
 * @file analyze.ts
 * @copyright (c) 2016 Gerd Forstmann
 */
"use strict";

var InputFilter = require('./inputFilter');
var Algol = require('./algol');
var debug = require('debug');
var debuglog = debug('listall');
var logger = require('../utils/logger');
var logPerf = logger.perf("perflistall");
var perflog = debug('perf');
var Sentence = require('./sentence');
var WhatIs = require('./whatis');
var Model = require('../model/model');
function matchRecordHavingCategory(category, records) {
    debuglog(JSON.stringify(records, undefined, 2));
    var relevantRecords = records.filter(function (record) {
        return record[category] !== undefined && record[category] !== null;
    });
    var res = [];
    debuglog("relevant records nr:" + relevantRecords.length);
    return relevantRecords;
}
exports.matchRecordHavingCategory = matchRecordHavingCategory;
function analyzeContextString(contextQueryString, aRules) {
    var matched = InputFilter.analyzeString(contextQueryString, aRules);
    if (debuglog.enabled) {
        debuglog("After matched " + JSON.stringify(matched));
    }
    var aSentences = InputFilter.expandMatchArr(matched);
    if (debuglog.enabled) {
        debuglog("after expand" + aSentences.map(function (oSentence) {
            return Sentence.rankingProduct(oSentence) + ":" + JSON.stringify(oSentence);
        }).join("\n"));
    }
    var aSentencesReinforced = InputFilter.reinForce(aSentences);
    if (debuglog.enabled) {
        debuglog("after reinforce" + aSentencesReinforced.map(function (oSentence) {
            return Sentence.rankingProduct(oSentence) + ":" + JSON.stringify(oSentence);
        }).join("\n"));
    }
    // we limit analysis to n sentences
    var aSentencesReinforced = aSentencesReinforced.slice(0, Algol.Cutoff_Sentences);
    return aSentencesReinforced;
}
exports.analyzeContextString = analyzeContextString;
// const result = WhatIs.resolveCategory(cat, a1.entity,
//   theModel.mRules, theModel.tools, theModel.records);
function listAllWithContext(category, contextQueryString, aRules, records) {
    if (contextQueryString.length === 0) {
        return [];
    } else {
        logPerf('listAllWithContext');
        perflog("totalListAllWithContext");
        /*
        var matched = InputFilter.analyzeString(contextQueryString, aRules);
        if(debuglog.enabled) {
          debuglog("After matched " + JSON.stringify(matched));
        }
        var aSentences = InputFilter.expandMatchArr(matched);
        if(debuglog.enabled) {
          debuglog("after expand" + aSentences.map(function (oSentence) {
            return Sentence.rankingProduct(oSentence) + ":" + JSON.stringify(oSentence);
          }).join("\n"));
        }
        var aSentencesReinforced = InputFilter.reinForce(aSentences);
        if(debuglog.enabled) {
          debuglog("after reinforce" + aSentencesReinforced.map(function (oSentence) {
            return Sentence.rankingProduct(oSentence) + ":" + JSON.stringify(oSentence);
          }).join("\n"));
        }
        // we limit analysis to n sentences
        */
        var aSentencesReinforced = analyzeContextString(contextQueryString, aRules);
        perflog("matching records ...");
        var matchedAnswers = WhatIs.matchRecordsQuick(aSentencesReinforced, category, records); //aTool: Array<IMatch.ITool>): any /* objectstream*/ {
        if (debuglog.enabled) {
            debuglog(" matched Answers" + JSON.stringify(matchedAnswers, undefined, 2));
        }
        perflog("match records");
        var matchedFiltered = WhatIs.filterOnlyTopRanked(matchedAnswers);
        if (debuglog.enabled) {
            debuglog(" matched top-ranked Answers" + JSON.stringify(matchedFiltered, undefined, 2));
        }
        perflog("totalListAllWithContext");
        logPerf('listAllWithContext');
        return matchedAnswers;
    }
}
exports.listAllWithContext = listAllWithContext;
function listAllHavingContext(category, contextQueryString, aRules, records) {
    if (contextQueryString.length === 0) {
        return [];
    } else {
        perflog("matching records ...");
        var aSentencesReinforced = analyzeContextString(contextQueryString, aRules);
        perflog("matching records ...");
        var matchedAnswers = WhatIs.matchRecordsHavingContext(aSentencesReinforced, category, records); //aTool: Array<IMatch.ITool>): any /* objectstream*/ {
        if (debuglog.enabled) {
            debuglog(" matched Answers" + JSON.stringify(matchedAnswers, undefined, 2));
        }
        var matchedFiltered = WhatIs.filterOnlyTopRanked(matchedAnswers);
        if (debuglog.enabled) {
            debuglog(" matched top-ranked Answers" + JSON.stringify(matchedFiltered, undefined, 2));
        }
        perflog("total listAllHavingContext");
        return matchedFiltered;
    }
}
exports.listAllHavingContext = listAllHavingContext;
function listAllWithCategory(category, records) {
    var matchedAnswers = matchRecordHavingCategory(category, records); //aTool: Array<IMatch.ITool>): any /* objectstream*/ {
    debuglog(" listAllWithCategory:" + JSON.stringify(matchedAnswers, undefined, 2));
    return matchedAnswers;
}
exports.listAllWithCategory = listAllWithCategory;
function joinSortedQuoted(strings) {
    if (strings.length === 0) {
        return "";
    }
    return '"' + strings.sort().join('"; "') + '"';
}
exports.joinSortedQuoted = joinSortedQuoted;
function joinDistinct(category, records) {
    var res = records.reduce(function (prev, oRecord) {
        prev[oRecord[category]] = 1;
        return prev;
    }, {});
    return joinSortedQuoted(Object.keys(res));
}
exports.joinDistinct = joinDistinct;
function formatDistinctFromWhatIfResult(answers) {
    return joinSortedQuoted(answers.map(function (oAnswer) {
        return oAnswer.result;
    }));
}
exports.formatDistinctFromWhatIfResult = formatDistinctFromWhatIfResult;
function joinResults(results) {
    var res = [];
    var cnt = results.reduce(function (prev, result) {
        if (result._ranking === results[0]._ranking) {
            if (res.indexOf(result.result) < 0) {
                res.push(result.result);
            }
            return prev + 1;
        }
    }, 0);
    return res;
}
exports.joinResults = joinResults;
function inferDomain(theModel, contextQueryString) {
    // console.log("here the string" + contextQueryString);
    //  console.log("here the rules" + JSON.stringify(theModel.mRules));
    var res = analyzeContextString(contextQueryString, theModel.mRules);
    //console.log(JSON.stringify(res,undefined,2));
    // run through the string, search for a category
    if (!res.length) {
        return undefined;
    }
    var domains = [];
    // do we have a domain ?
    res[0].forEach(function (oWordGroup) {
        if (oWordGroup.category === "domain") {
            domains.push(oWordGroup.matchedString);
        }
    });
    if (domains.length === 1) {
        return domains[0];
    }
    if (domains.length > 0) {
        return undefined;
    }
    // try a category reverse map
    res[0].forEach(function (oWordGroup) {
        if (oWordGroup.category === "category") {
            var sCat = oWordGroup.matchedString;
            var doms = Model.getDomainsForCategory(theModel, sCat);
            doms.forEach(function (sDom) {
                if (domains.indexOf(sDom) < 0) {
                    domains.push(sDom);
                }
            });
        }
    });
    if (domains.length === 1) {
        return domains[0];
    }
    return undefined;
}
exports.inferDomain = inferDomain;
;
//# sourceMappingURL=data:application/json;base64,
