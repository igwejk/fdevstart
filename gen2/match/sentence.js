/**
 * @file sentence
 * @module jfseb.fdevstart.sentence
 * @copyright (c) Gerd Forstmann
 *
 * Match a tool record on a sentence,
 *
 * This will unify matching required and optional category words
 * with the requirements of the tool.
 *
 */
"use strict";
// const debuglog = debug('toolmatcher')

function findWordByCategory(oSentence, sCategory) {
    var res = {};
    oSentence.every(function (oWord, iIndex) {
        if (oWord.category === sCategory) {
            res = { word: oWord,
                index: iIndex };
            return false;
        }
        return true;
    });
    return res;
}
exports.findWordByCategory = findWordByCategory;
function getDistinctCategoriesInSentence(oSentence) {
    var res = [];
    var resm = {};
    oSentence.forEach(function (oWord) {
        if (oWord.category === "category") {
            if (!resm[oWord.matchedString]) {
                res.push(oWord.matchedString);
                resm[oWord.matchedString] = 1;
            }
        }
    });
    return res;
}
exports.getDistinctCategoriesInSentence = getDistinctCategoriesInSentence;
function rankingGeometricMean(oSentence) {
    var length = oSentence.length;
    if (length === 0) {
        return 1.0;
    }
    var prod = oSentence.reduce(function (prev, oWord) {
        return prev * (oWord._ranking || 1.0);
    }, 1.0);
    // TODO: find somethign faster ;-)
    return Math.pow(prod, 1 / length);
}
exports.rankingGeometricMean = rankingGeometricMean;
function rankingProduct(oSentence) {
    return rankingGeometricMean(oSentence);
}
exports.rankingProduct = rankingProduct;
function cmpRankingProduct(a, b) {
    return -(rankingProduct(a) - rankingProduct(b));
}
exports.cmpRankingProduct = cmpRankingProduct;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tYXRjaC9zZW50ZW5jZS50cyIsIm1hdGNoL3NlbnRlbmNlLmpzIl0sIm5hbWVzIjpbImZpbmRXb3JkQnlDYXRlZ29yeSIsIm9TZW50ZW5jZSIsInNDYXRlZ29yeSIsInJlcyIsImV2ZXJ5Iiwib1dvcmQiLCJpSW5kZXgiLCJjYXRlZ29yeSIsIndvcmQiLCJpbmRleCIsImV4cG9ydHMiLCJnZXREaXN0aW5jdENhdGVnb3JpZXNJblNlbnRlbmNlIiwicmVzbSIsImZvckVhY2giLCJtYXRjaGVkU3RyaW5nIiwicHVzaCIsInJhbmtpbmdHZW9tZXRyaWNNZWFuIiwibGVuZ3RoIiwicHJvZCIsInJlZHVjZSIsInByZXYiLCJfcmFua2luZyIsIk1hdGgiLCJwb3ciLCJyYW5raW5nUHJvZHVjdCIsImNtcFJhbmtpbmdQcm9kdWN0IiwiYSIsImIiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztBQ1dBO0FEU0E7O0FBRUEsU0FBQUEsa0JBQUEsQ0FBbUNDLFNBQW5DLEVBQThDQyxTQUE5QyxFQUFnRTtBQUM3RCxRQUFJQyxNQUFNLEVBQVY7QUFDQ0YsY0FBVUcsS0FBVixDQUFnQixVQUFTQyxLQUFULEVBQWdCQyxNQUFoQixFQUFzQjtBQUNwQyxZQUFHRCxNQUFNRSxRQUFOLEtBQW1CTCxTQUF0QixFQUFpQztBQUMvQkMsa0JBQU0sRUFBRUssTUFBTUgsS0FBUjtBQUNFSSx1QkFBUUgsTUFEVixFQUFOO0FBRUEsbUJBQU8sS0FBUDtBQUNEO0FBQ0QsZUFBTyxJQUFQO0FBQ0QsS0FQRDtBQVFBLFdBQU9ILEdBQVA7QUFDSDtBQVhlTyxRQUFBVixrQkFBQSxHQUFrQkEsa0JBQWxCO0FBYWhCLFNBQUFXLCtCQUFBLENBQWdEVixTQUFoRCxFQUE0RTtBQUMxRSxRQUFJRSxNQUFNLEVBQVY7QUFDQSxRQUFJUyxPQUFPLEVBQVg7QUFDQVgsY0FBVVksT0FBVixDQUFrQixVQUFTUixLQUFULEVBQWM7QUFDOUIsWUFBR0EsTUFBTUUsUUFBTixLQUFtQixVQUF0QixFQUFrQztBQUNoQyxnQkFBRyxDQUFDSyxLQUFLUCxNQUFNUyxhQUFYLENBQUosRUFBK0I7QUFDN0JYLG9CQUFJWSxJQUFKLENBQVNWLE1BQU1TLGFBQWY7QUFDQUYscUJBQUtQLE1BQU1TLGFBQVgsSUFBNEIsQ0FBNUI7QUFDRDtBQUNGO0FBQ0YsS0FQRDtBQVFBLFdBQU9YLEdBQVA7QUFDRDtBQVplTyxRQUFBQywrQkFBQSxHQUErQkEsK0JBQS9CO0FBY2hCLFNBQUFLLG9CQUFBLENBQXFDZixTQUFyQyxFQUFpRTtBQUMvRCxRQUFNZ0IsU0FBU2hCLFVBQVVnQixNQUF6QjtBQUNBLFFBQUdBLFdBQVcsQ0FBZCxFQUFpQjtBQUNmLGVBQU8sR0FBUDtBQUNEO0FBQ0QsUUFBSUMsT0FBUWpCLFVBQVVrQixNQUFWLENBQWlCLFVBQVNDLElBQVQsRUFBZWYsS0FBZixFQUFvQjtBQUMvQyxlQUFPZSxRQUFRZixNQUFNZ0IsUUFBTixJQUFrQixHQUExQixDQUFQO0FBQ0QsS0FGVyxFQUVWLEdBRlUsQ0FBWjtBQUdBO0FBQ0EsV0FBT0MsS0FBS0MsR0FBTCxDQUFTTCxJQUFULEVBQWUsSUFBRUQsTUFBakIsQ0FBUDtBQUNEO0FBVmVQLFFBQUFNLG9CQUFBLEdBQW9CQSxvQkFBcEI7QUFZaEIsU0FBQVEsY0FBQSxDQUErQnZCLFNBQS9CLEVBQTBEO0FBQ3hELFdBQU9lLHFCQUFxQmYsU0FBckIsQ0FBUDtBQUNEO0FBRmVTLFFBQUFjLGNBQUEsR0FBY0EsY0FBZDtBQUloQixTQUFBQyxpQkFBQSxDQUFrQ0MsQ0FBbEMsRUFBd0RDLENBQXhELEVBQTRFO0FBQzFFLFdBQU8sRUFBR0gsZUFBZUUsQ0FBZixJQUFvQkYsZUFBZUcsQ0FBZixDQUF2QixDQUFQO0FBQ0Q7QUFGZWpCLFFBQUFlLGlCQUFBLEdBQWlCQSxpQkFBakIiLCJmaWxlIjoibWF0Y2gvc2VudGVuY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlIHNlbnRlbmNlXG4gKiBAbW9kdWxlIGpmc2ViLmZkZXZzdGFydC5zZW50ZW5jZVxuICogQGNvcHlyaWdodCAoYykgR2VyZCBGb3JzdG1hbm5cbiAqXG4gKiBNYXRjaCBhIHRvb2wgcmVjb3JkIG9uIGEgc2VudGVuY2UsXG4gKlxuICogVGhpcyB3aWxsIHVuaWZ5IG1hdGNoaW5nIHJlcXVpcmVkIGFuZCBvcHRpb25hbCBjYXRlZ29yeSB3b3Jkc1xuICogd2l0aCB0aGUgcmVxdWlyZW1lbnRzIG9mIHRoZSB0b29sLlxuICpcbiAqL1xuXG4vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9saWIvbm9kZS00LmQudHNcIiAvPlxuXG4vLyBpbXBvcnQgKiBhcyBkZWJ1ZyBmcm9tICdkZWJ1Zyc7XG5cbi8vIGltcG9ydCAqIGFzIHV0aWxzIGZyb20gJy4uL3V0aWxzL3V0aWxzJztcblxuaW1wb3J0ICogYXMgSU1hdGNoIGZyb20gJy4vaWZtYXRjaCc7XG5cbi8vIGNvbnN0IGRlYnVnbG9nID0gZGVidWcoJ3Rvb2xtYXRjaGVyJylcblxuZXhwb3J0IGZ1bmN0aW9uIGZpbmRXb3JkQnlDYXRlZ29yeShvU2VudGVuY2UsIHNDYXRlZ29yeSA6IHN0cmluZykgOiB7IHdvcmQgOiBJTWF0Y2guSVdvcmQsIGluZGV4IDogbnVtYmVyfSB7XG4gIFx0dmFyIHJlcyA9IHt9IGFzIHsgd29yZCA6IElNYXRjaC5JV29yZCwgaW5kZXggOiBudW1iZXJ9O1xuICAgIG9TZW50ZW5jZS5ldmVyeShmdW5jdGlvbihvV29yZCwgaUluZGV4KSB7XG4gICAgICBpZihvV29yZC5jYXRlZ29yeSA9PT0gc0NhdGVnb3J5KSB7XG4gICAgICAgIHJlcyA9IHsgd29yZDogb1dvcmQsXG4gICAgICAgICAgICAgICAgaW5kZXggOiBpSW5kZXggfTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSlcbiAgICByZXR1cm4gcmVzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGlzdGluY3RDYXRlZ29yaWVzSW5TZW50ZW5jZShvU2VudGVuY2UgOiBJTWF0Y2guSVNlbnRlbmNlKSA6IHN0cmluZ1tdIHtcbiAgdmFyIHJlcyA9IFtdO1xuICB2YXIgcmVzbSA9IHt9O1xuICBvU2VudGVuY2UuZm9yRWFjaChmdW5jdGlvbihvV29yZCkge1xuICAgIGlmKG9Xb3JkLmNhdGVnb3J5ID09PSBcImNhdGVnb3J5XCIpIHtcbiAgICAgIGlmKCFyZXNtW29Xb3JkLm1hdGNoZWRTdHJpbmddKSB7XG4gICAgICAgIHJlcy5wdXNoKG9Xb3JkLm1hdGNoZWRTdHJpbmcpO1xuICAgICAgICByZXNtW29Xb3JkLm1hdGNoZWRTdHJpbmddID0gMTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmFua2luZ0dlb21ldHJpY01lYW4ob1NlbnRlbmNlIDogSU1hdGNoLklTZW50ZW5jZSkgOiBudW1iZXIge1xuICBjb25zdCBsZW5ndGggPSBvU2VudGVuY2UubGVuZ3RoO1xuICBpZihsZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gMS4wO1xuICB9XG4gIHZhciBwcm9kID0gIG9TZW50ZW5jZS5yZWR1Y2UoZnVuY3Rpb24ocHJldiwgb1dvcmQpIHtcbiAgICByZXR1cm4gcHJldiAqIChvV29yZC5fcmFua2luZyB8fCAxLjApO1xuICB9LDEuMCk7XG4gIC8vIFRPRE86IGZpbmQgc29tZXRoaWduIGZhc3RlciA7LSlcbiAgcmV0dXJuIE1hdGgucG93KHByb2QsIDEvbGVuZ3RoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJhbmtpbmdQcm9kdWN0KG9TZW50ZW5jZTogSU1hdGNoLklTZW50ZW5jZSkgOiBudW1iZXIge1xuICByZXR1cm4gcmFua2luZ0dlb21ldHJpY01lYW4ob1NlbnRlbmNlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNtcFJhbmtpbmdQcm9kdWN0KGEgOiBJTWF0Y2guSVNlbnRlbmNlLCBiIDogSU1hdGNoLklTZW50ZW5jZSkge1xuICByZXR1cm4gLSAocmFua2luZ1Byb2R1Y3QoYSkgLSByYW5raW5nUHJvZHVjdChiKSk7XG59IiwiLyoqXG4gKiBAZmlsZSBzZW50ZW5jZVxuICogQG1vZHVsZSBqZnNlYi5mZGV2c3RhcnQuc2VudGVuY2VcbiAqIEBjb3B5cmlnaHQgKGMpIEdlcmQgRm9yc3RtYW5uXG4gKlxuICogTWF0Y2ggYSB0b29sIHJlY29yZCBvbiBhIHNlbnRlbmNlLFxuICpcbiAqIFRoaXMgd2lsbCB1bmlmeSBtYXRjaGluZyByZXF1aXJlZCBhbmQgb3B0aW9uYWwgY2F0ZWdvcnkgd29yZHNcbiAqIHdpdGggdGhlIHJlcXVpcmVtZW50cyBvZiB0aGUgdG9vbC5cbiAqXG4gKi9cblwidXNlIHN0cmljdFwiO1xuLy8gY29uc3QgZGVidWdsb2cgPSBkZWJ1ZygndG9vbG1hdGNoZXInKVxuZnVuY3Rpb24gZmluZFdvcmRCeUNhdGVnb3J5KG9TZW50ZW5jZSwgc0NhdGVnb3J5KSB7XG4gICAgdmFyIHJlcyA9IHt9O1xuICAgIG9TZW50ZW5jZS5ldmVyeShmdW5jdGlvbiAob1dvcmQsIGlJbmRleCkge1xuICAgICAgICBpZiAob1dvcmQuY2F0ZWdvcnkgPT09IHNDYXRlZ29yeSkge1xuICAgICAgICAgICAgcmVzID0geyB3b3JkOiBvV29yZCxcbiAgICAgICAgICAgICAgICBpbmRleDogaUluZGV4IH07XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlcztcbn1cbmV4cG9ydHMuZmluZFdvcmRCeUNhdGVnb3J5ID0gZmluZFdvcmRCeUNhdGVnb3J5O1xuZnVuY3Rpb24gZ2V0RGlzdGluY3RDYXRlZ29yaWVzSW5TZW50ZW5jZShvU2VudGVuY2UpIHtcbiAgICB2YXIgcmVzID0gW107XG4gICAgdmFyIHJlc20gPSB7fTtcbiAgICBvU2VudGVuY2UuZm9yRWFjaChmdW5jdGlvbiAob1dvcmQpIHtcbiAgICAgICAgaWYgKG9Xb3JkLmNhdGVnb3J5ID09PSBcImNhdGVnb3J5XCIpIHtcbiAgICAgICAgICAgIGlmICghcmVzbVtvV29yZC5tYXRjaGVkU3RyaW5nXSkge1xuICAgICAgICAgICAgICAgIHJlcy5wdXNoKG9Xb3JkLm1hdGNoZWRTdHJpbmcpO1xuICAgICAgICAgICAgICAgIHJlc21bb1dvcmQubWF0Y2hlZFN0cmluZ10gPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlcztcbn1cbmV4cG9ydHMuZ2V0RGlzdGluY3RDYXRlZ29yaWVzSW5TZW50ZW5jZSA9IGdldERpc3RpbmN0Q2F0ZWdvcmllc0luU2VudGVuY2U7XG5mdW5jdGlvbiByYW5raW5nR2VvbWV0cmljTWVhbihvU2VudGVuY2UpIHtcbiAgICB2YXIgbGVuZ3RoID0gb1NlbnRlbmNlLmxlbmd0aDtcbiAgICBpZiAobGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiAxLjA7XG4gICAgfVxuICAgIHZhciBwcm9kID0gb1NlbnRlbmNlLnJlZHVjZShmdW5jdGlvbiAocHJldiwgb1dvcmQpIHtcbiAgICAgICAgcmV0dXJuIHByZXYgKiAob1dvcmQuX3JhbmtpbmcgfHwgMS4wKTtcbiAgICB9LCAxLjApO1xuICAgIC8vIFRPRE86IGZpbmQgc29tZXRoaWduIGZhc3RlciA7LSlcbiAgICByZXR1cm4gTWF0aC5wb3cocHJvZCwgMSAvIGxlbmd0aCk7XG59XG5leHBvcnRzLnJhbmtpbmdHZW9tZXRyaWNNZWFuID0gcmFua2luZ0dlb21ldHJpY01lYW47XG5mdW5jdGlvbiByYW5raW5nUHJvZHVjdChvU2VudGVuY2UpIHtcbiAgICByZXR1cm4gcmFua2luZ0dlb21ldHJpY01lYW4ob1NlbnRlbmNlKTtcbn1cbmV4cG9ydHMucmFua2luZ1Byb2R1Y3QgPSByYW5raW5nUHJvZHVjdDtcbmZ1bmN0aW9uIGNtcFJhbmtpbmdQcm9kdWN0KGEsIGIpIHtcbiAgICByZXR1cm4gLShyYW5raW5nUHJvZHVjdChhKSAtIHJhbmtpbmdQcm9kdWN0KGIpKTtcbn1cbmV4cG9ydHMuY21wUmFua2luZ1Byb2R1Y3QgPSBjbXBSYW5raW5nUHJvZHVjdDtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
