/**
 * @file sentence
 * @module jfseb.fdevstart.sentence
 * @copyright (c) Gerd Forstmann
 *
 * Match a tool record on a sentence,
 *
 * This will unify matching required and optional category words
 * with the requirements of the tool.
 *
 */
"use strict";
// const debuglog = debug('toolmatcher')

function findWordByCategory(oSentence, sCategory) {
    var res = {};
    oSentence.every(function (oWord, iIndex) {
        if (oWord.category === sCategory) {
            res = { word: oWord,
                index: iIndex };
            return false;
        }
        return true;
    });
    return res;
}
exports.findWordByCategory = findWordByCategory;
function rankingGeometricMean(oSentence) {
    var length = oSentence.length;
    if (length === 0) {
        return 1.0;
    }
    var prod = oSentence.reduce(function (prev, oWord) {
        return prev * (oWord._ranking || 1.0);
    }, 1.0);
    // TODO: find somethign faster ;-)
    return Math.pow(prod, 1 / length);
}
exports.rankingGeometricMean = rankingGeometricMean;
function rankingProduct(oSentence) {
    return rankingGeometricMean(oSentence);
}
exports.rankingProduct = rankingProduct;
function cmpRankingProduct(a, b) {
    return -(rankingProduct(a) - rankingProduct(b));
}
exports.cmpRankingProduct = cmpRankingProduct;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tYXRjaC9zZW50ZW5jZS50cyIsIm1hdGNoL3NlbnRlbmNlLmpzIl0sIm5hbWVzIjpbImZpbmRXb3JkQnlDYXRlZ29yeSIsIm9TZW50ZW5jZSIsInNDYXRlZ29yeSIsInJlcyIsImV2ZXJ5Iiwib1dvcmQiLCJpSW5kZXgiLCJjYXRlZ29yeSIsIndvcmQiLCJpbmRleCIsImV4cG9ydHMiLCJyYW5raW5nR2VvbWV0cmljTWVhbiIsImxlbmd0aCIsInByb2QiLCJyZWR1Y2UiLCJwcmV2IiwiX3JhbmtpbmciLCJNYXRoIiwicG93IiwicmFua2luZ1Byb2R1Y3QiLCJjbXBSYW5raW5nUHJvZHVjdCIsImEiLCJiIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7QUNXQTtBRFNBOztBQUVBLFNBQUFBLGtCQUFBLENBQW1DQyxTQUFuQyxFQUE4Q0MsU0FBOUMsRUFBZ0U7QUFDN0QsUUFBSUMsTUFBTSxFQUFWO0FBQ0NGLGNBQVVHLEtBQVYsQ0FBZ0IsVUFBU0MsS0FBVCxFQUFnQkMsTUFBaEIsRUFBc0I7QUFDcEMsWUFBR0QsTUFBTUUsUUFBTixLQUFtQkwsU0FBdEIsRUFBaUM7QUFDL0JDLGtCQUFNLEVBQUVLLE1BQU1ILEtBQVI7QUFDRUksdUJBQVFILE1BRFYsRUFBTjtBQUVBLG1CQUFPLEtBQVA7QUFDRDtBQUNELGVBQU8sSUFBUDtBQUNELEtBUEQ7QUFRQSxXQUFPSCxHQUFQO0FBQ0g7QUFYZU8sUUFBQVYsa0JBQUEsR0FBa0JBLGtCQUFsQjtBQWFoQixTQUFBVyxvQkFBQSxDQUFxQ1YsU0FBckMsRUFBaUU7QUFDL0QsUUFBTVcsU0FBU1gsVUFBVVcsTUFBekI7QUFDQSxRQUFHQSxXQUFXLENBQWQsRUFBaUI7QUFDZixlQUFPLEdBQVA7QUFDRDtBQUNELFFBQUlDLE9BQVFaLFVBQVVhLE1BQVYsQ0FBaUIsVUFBU0MsSUFBVCxFQUFlVixLQUFmLEVBQW9CO0FBQy9DLGVBQU9VLFFBQVFWLE1BQU1XLFFBQU4sSUFBa0IsR0FBMUIsQ0FBUDtBQUNELEtBRlcsRUFFVixHQUZVLENBQVo7QUFHQTtBQUNBLFdBQU9DLEtBQUtDLEdBQUwsQ0FBU0wsSUFBVCxFQUFlLElBQUVELE1BQWpCLENBQVA7QUFDRDtBQVZlRixRQUFBQyxvQkFBQSxHQUFvQkEsb0JBQXBCO0FBWWhCLFNBQUFRLGNBQUEsQ0FBK0JsQixTQUEvQixFQUEwRDtBQUN4RCxXQUFPVSxxQkFBcUJWLFNBQXJCLENBQVA7QUFDRDtBQUZlUyxRQUFBUyxjQUFBLEdBQWNBLGNBQWQ7QUFJaEIsU0FBQUMsaUJBQUEsQ0FBa0NDLENBQWxDLEVBQXdEQyxDQUF4RCxFQUE0RTtBQUMxRSxXQUFPLEVBQUdILGVBQWVFLENBQWYsSUFBb0JGLGVBQWVHLENBQWYsQ0FBdkIsQ0FBUDtBQUNEO0FBRmVaLFFBQUFVLGlCQUFBLEdBQWlCQSxpQkFBakIiLCJmaWxlIjoibWF0Y2gvc2VudGVuY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlIHNlbnRlbmNlXG4gKiBAbW9kdWxlIGpmc2ViLmZkZXZzdGFydC5zZW50ZW5jZVxuICogQGNvcHlyaWdodCAoYykgR2VyZCBGb3JzdG1hbm5cbiAqXG4gKiBNYXRjaCBhIHRvb2wgcmVjb3JkIG9uIGEgc2VudGVuY2UsXG4gKlxuICogVGhpcyB3aWxsIHVuaWZ5IG1hdGNoaW5nIHJlcXVpcmVkIGFuZCBvcHRpb25hbCBjYXRlZ29yeSB3b3Jkc1xuICogd2l0aCB0aGUgcmVxdWlyZW1lbnRzIG9mIHRoZSB0b29sLlxuICpcbiAqL1xuXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vbGliL25vZGUtNC5kLnRzXCIgLz5cblxuLy8gaW1wb3J0ICogYXMgZGVidWcgZnJvbSAnZGVidWcnO1xuXG4vLyBpbXBvcnQgKiBhcyB1dGlscyBmcm9tICcuLi91dGlscy91dGlscyc7XG5cbmltcG9ydCAqIGFzIElNYXRjaCBmcm9tICcuL2lmbWF0Y2gnO1xuXG4vLyBjb25zdCBkZWJ1Z2xvZyA9IGRlYnVnKCd0b29sbWF0Y2hlcicpXG5cbmV4cG9ydCBmdW5jdGlvbiBmaW5kV29yZEJ5Q2F0ZWdvcnkob1NlbnRlbmNlLCBzQ2F0ZWdvcnkgOiBzdHJpbmcpIDogeyB3b3JkIDogSU1hdGNoLklXb3JkLCBpbmRleCA6IG51bWJlcn0ge1xuICBcdHZhciByZXMgPSB7fSBhcyB7IHdvcmQgOiBJTWF0Y2guSVdvcmQsIGluZGV4IDogbnVtYmVyfTtcbiAgICBvU2VudGVuY2UuZXZlcnkoZnVuY3Rpb24ob1dvcmQsIGlJbmRleCkge1xuICAgICAgaWYob1dvcmQuY2F0ZWdvcnkgPT09IHNDYXRlZ29yeSkge1xuICAgICAgICByZXMgPSB7IHdvcmQ6IG9Xb3JkLFxuICAgICAgICAgICAgICAgIGluZGV4IDogaUluZGV4IH07XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pXG4gICAgcmV0dXJuIHJlcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJhbmtpbmdHZW9tZXRyaWNNZWFuKG9TZW50ZW5jZSA6IElNYXRjaC5JU2VudGVuY2UpIDogbnVtYmVyIHtcbiAgY29uc3QgbGVuZ3RoID0gb1NlbnRlbmNlLmxlbmd0aDtcbiAgaWYobGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIDEuMDtcbiAgfVxuICB2YXIgcHJvZCA9ICBvU2VudGVuY2UucmVkdWNlKGZ1bmN0aW9uKHByZXYsIG9Xb3JkKSB7XG4gICAgcmV0dXJuIHByZXYgKiAob1dvcmQuX3JhbmtpbmcgfHwgMS4wKTtcbiAgfSwxLjApO1xuICAvLyBUT0RPOiBmaW5kIHNvbWV0aGlnbiBmYXN0ZXIgOy0pXG4gIHJldHVybiBNYXRoLnBvdyhwcm9kLCAxL2xlbmd0aCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByYW5raW5nUHJvZHVjdChvU2VudGVuY2U6IElNYXRjaC5JU2VudGVuY2UpIDogbnVtYmVyIHtcbiAgcmV0dXJuIHJhbmtpbmdHZW9tZXRyaWNNZWFuKG9TZW50ZW5jZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjbXBSYW5raW5nUHJvZHVjdChhIDogSU1hdGNoLklTZW50ZW5jZSwgYiA6IElNYXRjaC5JU2VudGVuY2UpIHtcbiAgcmV0dXJuIC0gKHJhbmtpbmdQcm9kdWN0KGEpIC0gcmFua2luZ1Byb2R1Y3QoYikpO1xufSIsIi8qKlxuICogQGZpbGUgc2VudGVuY2VcbiAqIEBtb2R1bGUgamZzZWIuZmRldnN0YXJ0LnNlbnRlbmNlXG4gKiBAY29weXJpZ2h0IChjKSBHZXJkIEZvcnN0bWFublxuICpcbiAqIE1hdGNoIGEgdG9vbCByZWNvcmQgb24gYSBzZW50ZW5jZSxcbiAqXG4gKiBUaGlzIHdpbGwgdW5pZnkgbWF0Y2hpbmcgcmVxdWlyZWQgYW5kIG9wdGlvbmFsIGNhdGVnb3J5IHdvcmRzXG4gKiB3aXRoIHRoZSByZXF1aXJlbWVudHMgb2YgdGhlIHRvb2wuXG4gKlxuICovXG5cInVzZSBzdHJpY3RcIjtcbi8vIGNvbnN0IGRlYnVnbG9nID0gZGVidWcoJ3Rvb2xtYXRjaGVyJylcbmZ1bmN0aW9uIGZpbmRXb3JkQnlDYXRlZ29yeShvU2VudGVuY2UsIHNDYXRlZ29yeSkge1xuICAgIHZhciByZXMgPSB7fTtcbiAgICBvU2VudGVuY2UuZXZlcnkoZnVuY3Rpb24gKG9Xb3JkLCBpSW5kZXgpIHtcbiAgICAgICAgaWYgKG9Xb3JkLmNhdGVnb3J5ID09PSBzQ2F0ZWdvcnkpIHtcbiAgICAgICAgICAgIHJlcyA9IHsgd29yZDogb1dvcmQsXG4gICAgICAgICAgICAgICAgaW5kZXg6IGlJbmRleCB9O1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pO1xuICAgIHJldHVybiByZXM7XG59XG5leHBvcnRzLmZpbmRXb3JkQnlDYXRlZ29yeSA9IGZpbmRXb3JkQnlDYXRlZ29yeTtcbmZ1bmN0aW9uIHJhbmtpbmdHZW9tZXRyaWNNZWFuKG9TZW50ZW5jZSkge1xuICAgIHZhciBsZW5ndGggPSBvU2VudGVuY2UubGVuZ3RoO1xuICAgIGlmIChsZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIDEuMDtcbiAgICB9XG4gICAgdmFyIHByb2QgPSBvU2VudGVuY2UucmVkdWNlKGZ1bmN0aW9uIChwcmV2LCBvV29yZCkge1xuICAgICAgICByZXR1cm4gcHJldiAqIChvV29yZC5fcmFua2luZyB8fCAxLjApO1xuICAgIH0sIDEuMCk7XG4gICAgLy8gVE9ETzogZmluZCBzb21ldGhpZ24gZmFzdGVyIDstKVxuICAgIHJldHVybiBNYXRoLnBvdyhwcm9kLCAxIC8gbGVuZ3RoKTtcbn1cbmV4cG9ydHMucmFua2luZ0dlb21ldHJpY01lYW4gPSByYW5raW5nR2VvbWV0cmljTWVhbjtcbmZ1bmN0aW9uIHJhbmtpbmdQcm9kdWN0KG9TZW50ZW5jZSkge1xuICAgIHJldHVybiByYW5raW5nR2VvbWV0cmljTWVhbihvU2VudGVuY2UpO1xufVxuZXhwb3J0cy5yYW5raW5nUHJvZHVjdCA9IHJhbmtpbmdQcm9kdWN0O1xuZnVuY3Rpb24gY21wUmFua2luZ1Byb2R1Y3QoYSwgYikge1xuICAgIHJldHVybiAtKHJhbmtpbmdQcm9kdWN0KGEpIC0gcmFua2luZ1Byb2R1Y3QoYikpO1xufVxuZXhwb3J0cy5jbXBSYW5raW5nUHJvZHVjdCA9IGNtcFJhbmtpbmdQcm9kdWN0O1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
