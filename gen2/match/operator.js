/**
 * @file operator
 * @module jfseb.fdevstart.sentence
 * @copyright (c) Gerd Forstmann
 *
 * Operator implementation
 *
 * These functions expose parf the underlying model,
 *
 */
"use strict";
/**
 * Note: both arguments are expected to be lowercased
 */

function matches(operator, fragmentLC, strLC) {
    if (!strLC) {
        return false;
    }
    switch (operator.operator) {
        case "starting with":
            return strLC.indexOf(fragmentLC) === 0;
        case "containing":
            return strLC.indexOf(fragmentLC) >= 0;
        case "ending with":
            return strLC.length >= fragmentLC.length && strLC.substring(strLC.length - fragmentLC.length) === fragmentLC;
        default:
            throw new Error('Unknown operator or illegal operator usage: ' + operator.operator);
    }
    //return false;
}
exports.matches = matches;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tYXRjaC9vcGVyYXRvci50cyIsIm1hdGNoL29wZXJhdG9yLmpzIl0sIm5hbWVzIjpbIm1hdGNoZXMiLCJvcGVyYXRvciIsImZyYWdtZW50TEMiLCJzdHJMQyIsImluZGV4T2YiLCJsZW5ndGgiLCJzdWJzdHJpbmciLCJFcnJvciIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7O0FDVUE7QURhQTs7OztBQUdBLFNBQUFBLE9BQUEsQ0FBd0JDLFFBQXhCLEVBQXFEQyxVQUFyRCxFQUEwRUMsS0FBMUUsRUFBd0Y7QUFDdEYsUUFBRyxDQUFDQSxLQUFKLEVBQVc7QUFDVCxlQUFPLEtBQVA7QUFDRDtBQUNELFlBQU9GLFNBQVNBLFFBQWhCO0FBQ0UsYUFBSyxlQUFMO0FBQ0UsbUJBQU9FLE1BQU1DLE9BQU4sQ0FBY0YsVUFBZCxNQUE4QixDQUFyQztBQUNGLGFBQUssWUFBTDtBQUNFLG1CQUFPQyxNQUFNQyxPQUFOLENBQWNGLFVBQWQsS0FBNkIsQ0FBcEM7QUFDRixhQUFLLGFBQUw7QUFDRSxtQkFBT0MsTUFBTUUsTUFBTixJQUFnQkgsV0FBV0csTUFBM0IsSUFDTEYsTUFBTUcsU0FBTixDQUFnQkgsTUFBTUUsTUFBTixHQUFlSCxXQUFXRyxNQUExQyxNQUFzREgsVUFEeEQ7QUFFRjtBQUNFLGtCQUFNLElBQUlLLEtBQUosQ0FBVSxpREFBaUROLFNBQVNBLFFBQXBFLENBQU47QUFUSjtBQVdBO0FBQ0Q7QUFoQkRPLFFBQUFSLE9BQUEsR0FBQUEsT0FBQSIsImZpbGUiOiJtYXRjaC9vcGVyYXRvci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGUgb3BlcmF0b3JcbiAqIEBtb2R1bGUgamZzZWIuZmRldnN0YXJ0LnNlbnRlbmNlXG4gKiBAY29weXJpZ2h0IChjKSBHZXJkIEZvcnN0bWFublxuICpcbiAqIE9wZXJhdG9yIGltcGxlbWVudGF0aW9uXG4gKlxuICogVGhlc2UgZnVuY3Rpb25zIGV4cG9zZSBwYXJmIHRoZSB1bmRlcmx5aW5nIG1vZGVsLFxuICpcbiAqL1xuXG4vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9saWIvbm9kZS00LmQudHNcIiAvPlxuXG4vLyBpbXBvcnQgKiBhcyBkZWJ1ZyBmcm9tICdkZWJ1Zyc7XG5cbi8vIGltcG9ydCAqIGFzIHV0aWxzIGZyb20gJy4uL3V0aWxzL3V0aWxzJztcblxuaW1wb3J0ICogYXMgSU1hdGNoIGZyb20gJy4vaWZtYXRjaCc7XG5cblxuXG5cblxuLyoqXG4gKiBOb3RlOiBib3RoIGFyZ3VtZW50cyBhcmUgZXhwZWN0ZWQgdG8gYmUgbG93ZXJjYXNlZFxuICovXG5leHBvcnQgZnVuY3Rpb24gbWF0Y2hlcyhvcGVyYXRvciA6IElNYXRjaC5JT3BlcmF0b3IsIGZyYWdtZW50TEMgOiBzdHJpbmcsIHN0ckxDIDogc3RyaW5nKSAgOiBib29sZWFuIHtcbiAgaWYoIXN0ckxDKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHN3aXRjaChvcGVyYXRvci5vcGVyYXRvcikge1xuICAgIGNhc2UgXCJzdGFydGluZyB3aXRoXCI6XG4gICAgICByZXR1cm4gc3RyTEMuaW5kZXhPZihmcmFnbWVudExDKSA9PT0gMDtcbiAgICBjYXNlIFwiY29udGFpbmluZ1wiOlxuICAgICAgcmV0dXJuIHN0ckxDLmluZGV4T2YoZnJhZ21lbnRMQykgPj0gMDtcbiAgICBjYXNlIFwiZW5kaW5nIHdpdGhcIjpcbiAgICAgIHJldHVybiBzdHJMQy5sZW5ndGggPj0gZnJhZ21lbnRMQy5sZW5ndGggJiZcbiAgICAgICAgc3RyTEMuc3Vic3RyaW5nKHN0ckxDLmxlbmd0aCAtIGZyYWdtZW50TEMubGVuZ3RoKSA9PT0gZnJhZ21lbnRMQztcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIG9wZXJhdG9yIG9yIGlsbGVnYWwgb3BlcmF0b3IgdXNhZ2U6ICcgKyBvcGVyYXRvci5vcGVyYXRvcik7XG4gIH1cbiAgLy9yZXR1cm4gZmFsc2U7XG59XG4iLCIvKipcbiAqIEBmaWxlIG9wZXJhdG9yXG4gKiBAbW9kdWxlIGpmc2ViLmZkZXZzdGFydC5zZW50ZW5jZVxuICogQGNvcHlyaWdodCAoYykgR2VyZCBGb3JzdG1hbm5cbiAqXG4gKiBPcGVyYXRvciBpbXBsZW1lbnRhdGlvblxuICpcbiAqIFRoZXNlIGZ1bmN0aW9ucyBleHBvc2UgcGFyZiB0aGUgdW5kZXJseWluZyBtb2RlbCxcbiAqXG4gKi9cblwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBOb3RlOiBib3RoIGFyZ3VtZW50cyBhcmUgZXhwZWN0ZWQgdG8gYmUgbG93ZXJjYXNlZFxuICovXG5mdW5jdGlvbiBtYXRjaGVzKG9wZXJhdG9yLCBmcmFnbWVudExDLCBzdHJMQykge1xuICAgIGlmICghc3RyTEMpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBzd2l0Y2ggKG9wZXJhdG9yLm9wZXJhdG9yKSB7XG4gICAgICAgIGNhc2UgXCJzdGFydGluZyB3aXRoXCI6XG4gICAgICAgICAgICByZXR1cm4gc3RyTEMuaW5kZXhPZihmcmFnbWVudExDKSA9PT0gMDtcbiAgICAgICAgY2FzZSBcImNvbnRhaW5pbmdcIjpcbiAgICAgICAgICAgIHJldHVybiBzdHJMQy5pbmRleE9mKGZyYWdtZW50TEMpID49IDA7XG4gICAgICAgIGNhc2UgXCJlbmRpbmcgd2l0aFwiOlxuICAgICAgICAgICAgcmV0dXJuIHN0ckxDLmxlbmd0aCA+PSBmcmFnbWVudExDLmxlbmd0aCAmJlxuICAgICAgICAgICAgICAgIHN0ckxDLnN1YnN0cmluZyhzdHJMQy5sZW5ndGggLSBmcmFnbWVudExDLmxlbmd0aCkgPT09IGZyYWdtZW50TEM7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gb3BlcmF0b3Igb3IgaWxsZWdhbCBvcGVyYXRvciB1c2FnZTogJyArIG9wZXJhdG9yLm9wZXJhdG9yKTtcbiAgICB9XG4gICAgLy9yZXR1cm4gZmFsc2U7XG59XG5leHBvcnRzLm1hdGNoZXMgPSBtYXRjaGVzO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
