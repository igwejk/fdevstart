/**
 * @file
 * @module jfseb.fdevstart.breakdown
 * @copyright (c) 2016 Gerd Forstmann
 */
"use strict";

var debug = require("debug");
var debuglog = debug('dispatcher');
function cleanseString(sString) {
    var len = 0;
    while (len !== sString.length) {
        len = sString.length;
        sString = sString.replace(/\s+/g, ' ');
        sString = sString.replace(/^\s+/, '');
        sString = sString.replace(/\s+$/, '');
        sString = sString.replace(/^[,;.]+/, '');
        sString = sString.replace(/[,;.]+$/, '');
    }
    return sString;
}
exports.cleanseString = cleanseString;
function cleanseStringLeaveDots(sString) {
    var len = 0;
    while (len !== sString.length) {
        len = sString.length;
        sString = sString.replace(/\s+/g, ' ');
        sString = sString.replace(/^\s+/, '');
        sString = sString.replace(/\s+$/, '');
        sString = sString.replace(/^[,;!?]+/, '');
        sString = sString.replace(/[,;!?]+$/, '');
    }
    return sString;
}
exports.cleanseStringLeaveDots = cleanseStringLeaveDots;
function cleanseQuotedString(sString) {
    var len = 0;
    while (len !== sString.length) {
        len = sString.length;
        sString = sString.replace(/\s\s+/g, ' ');
        sString = sString.replace(/\s+/g, ' ');
        sString = sString.replace(/^\s+/, '');
        sString = sString.replace(/\s+$/, '');
        sString = sString.replace(/^[,;.]+/, '');
        sString = sString.replace(/[,;.]+$/, '');
    }
    return sString;
}
exports.cleanseQuotedString = cleanseQuotedString;
var regexpRemoveDouble = new RegExp(/^\"(\".*\")\"$/);
var striptail = new RegExp(/^\"([^\"]+)"$/);
function trimQuoted(sString) {
    var skipUntil = 0;
    var stripped = sString;
    var m = regexpRemoveDouble.exec(sString);
    while (m) {
        stripped = m[1];
        m = regexpRemoveDouble.exec(stripped);
    }
    debuglog("stripped " + stripped);
    m = striptail.exec(stripped);
    if (m) {
        return m[1];
    }
    return cleanseString(sString);
}
exports.trimQuoted = trimQuoted;
function trimQuotedSpaced(sString) {
    var skipUntil = 0;
    sString = sString.replace(/^"\s+/g, '"');
    sString = sString.replace(/\s+\"$/g, '"');
    return sString;
}
exports.trimQuotedSpaced = trimQuotedSpaced;
function recombineQuoted(aArr) {
    var skipUntil = 0;
    aArr = aArr.map(function (s, index) {
        if (index < skipUntil) {
            debuglog("skipping >" + s + "<");
            return undefined;
        }
        if (/^"/.exec(s)) {
            var i = index;
            while (i < aArr.length && (!/"$/.exec(aArr[i]) || index === i && s === '"')) {
                i = i + 1;
            }
            if (i === aArr.length) {
                debuglog("Unterminated quoted string");
                return s;
            } else {
                skipUntil = i + 1;
                var res = aArr.slice(index, i + 1).join(" ");
            }
            return res;
        }
        return s;
    }).filter(function (s) {
        return s !== undefined;
    }).map(function (s) {
        return trimQuotedSpaced(s);
    });
    return aArr;
}
exports.recombineQuoted = recombineQuoted;
function isQuoted(sString) {
    return !!/^".*"$/.exec(sString);
}
exports.isQuoted = isQuoted;
function countSpaces(sString) {
    var r = 0;
    for (var i = 0; i < sString.length; ++i) {
        if (sString.charAt(i) === ' ') {
            r = r + 1;
        }
    }
    return r;
}
exports.countSpaces = countSpaces;
var Quotes = /^"([^"]+)"/;
function swallowQuote(str, i) {
    var m = Quotes.exec(str.substring(i));
    if (!m) {
        return { token: undefined,
            nextpos: i
        };
    }
    return {
        token: cleanseStringLeaveDots(m[1]),
        nextpos: i + m[0].length
    };
}
exports.swallowQuote = swallowQuote;
var Word2 = /^([.]?([-#A-Z_a-z0-9\/\\\%\$&]([\'.][-#A-Z_a-z0-9\/\\\%\$&])*)+)/;
var Word = /^(([^.,;\'\"]|(\.[^ ,;\'\"]))([^. ,;?!\"']|(\.[^ ,;?!\"'])|(\'[^. ,;?!\"\'])*)+)/;
function swallowWord(str, i) {
    var m = Word.exec(str.substring(i));
    if (!m) {
        return { token: undefined,
            nextpos: i
        };
    }
    return {
        token: m[1],
        nextpos: i + m[0].length
    };
}
exports.swallowWord = swallowWord;
function pushToken(res, token) {
    res.tokens.push(token);
    res.fusable[res.tokens.length] = true;
}
/**
 * Returns true iff tokenized represents multiple words, which
 * can potenially be added together;
 */
function isCombinableSplit(tokenized) {
    if (tokenized.tokens.length <= 1) {
        return false;
    }
    for (var i = 1; i < tokenized.tokens.length; ++i) {
        if (!tokenized.fusable[i]) {
            return false;
        }
    }
    return true;
}
exports.isCombinableSplit = isCombinableSplit;
/**
 * return true iff  range @ index is a suitable combinable overlap
 *
 * (typically in the parsed real string)
 * return the targetindex or -1 if impossible
 */
function isCombinableRangeReturnIndex(range, fusable, index) {
    var start = index + range.low;
    var end = index + range.high;
    // example range = -1, 0             index = 1  => start = 0, end = 1, test fusable[1]
    for (var i = start; i < end; ++i) {
        if (!fusable[i + 1]) {
            return -1;
        }
    }
    return start;
}
exports.isCombinableRangeReturnIndex = isCombinableRangeReturnIndex;
function combineTokens(range, index, tokens) {
    var start = index + range.low;
    var end = index + range.high;
    var res = [];
    for (var i = start; i <= end; ++i) {
        res.push(tokens[i]);
    }
    return res.join(" ");
}
exports.combineTokens = combineTokens;
/**
 *
 * Note: this tokenizer recognized .gitigore or .a.b.c as one token
 * trailing . is stripped!
 *@param {string} sString , e.g. "a,b c;d O'Hara and "murph'ys"
 *@return {Array<String>} broken down array, e.g.
 * [["a b c"], ["a", "b c"], ["a b", "c"], ....["a", "b", "c"]]
 */
function tokenizeString(sString, spacesLimit) {
    var res = {
        tokens: [],
        fusable: [false]
    };
    var i = 0;
    var seenSep = false;
    while (i < sString.length) {
        switch (sString.charAt(i)) {
            case '"':
                var _a = swallowQuote(sString, i),
                    token = _a.token,
                    nextpos = _a.nextpos;
                if (nextpos === i) {
                    // unterminated quote, treat like separator
                    res.fusable[res.tokens.length] = false;
                    seenSep = true;
                    ++i;
                } else if (token === "") {
                    res.fusable[res.tokens.length] = false;
                    seenSep = true;
                    i = nextpos;
                } else {
                    res.fusable[res.tokens.length] = false;
                    pushToken(res, token);
                    res.fusable[res.tokens.length] = false;
                    i = nextpos;
                }
                break;
            case '\t':
            case '\n':
            case '\r':
            case ' ':
                i++;
                break;
            case ':':
            case ',':
            case '?':
            case '!':
            case ';':
                res.fusable[res.tokens.length] = false;
                seenSep = true;
                ++i;
                break;
            case '.':
            default:
                var _b = swallowWord(sString, i),
                    token = _b.token,
                    nextpos = _b.nextpos;
                if (token) {
                    pushToken(res, token);
                    i = nextpos;
                } else {
                    res.fusable[res.tokens.length] = false;
                    i++;
                }
                break;
        }
    }
    res.fusable[res.tokens.length] = false;
    return res;
}
exports.tokenizeString = tokenizeString;
function makeMatchPattern(str) {
    var tokens = tokenizeString(str);
    var bestlen = 0;
    if (!isCombinableSplit(tokens)) {
        return undefined;
    }
    var best = {
        longestToken: "",
        span: { low: 0, high: 0 }
    };
    if (tokens.tokens.length > 1) {
        tokens.tokens.forEach(function (token, index) {
            var len = token.length;
            if (len > bestlen) {
                bestlen = len;
                best.longestToken = token;
                best.span.low = -index;
            }
        });
        best.span.high = tokens.tokens.length + best.span.low - 1;
        return best;
    }
    return undefined;
}
exports.makeMatchPattern = makeMatchPattern;
/**
 *@param {string} sString , e.g. "a b c"
 *@return {Array<Array<String>>} broken down array, e.g.
 *[["a b c"], ["a", "b c"], ["a b", "c"], ....["a", "b", "c"]]
 */
function breakdownString(sString, spacesLimit) {
    var rString = cleanseString(sString);
    if (spacesLimit === undefined) {
        spacesLimit = -1;
    }
    var u = rString.split(" ");
    u = recombineQuoted(u);
    var k = 0;
    if (u.length === 0) {
        return [[]];
    }
    var w = [[u[0]]];
    while (k < u.length - 1) {
        k = k + 1;
        var r1 = w.map(function (entry) {
            debuglog(JSON.stringify(entry));
            var entry = entry.slice(0);
            debuglog(JSON.stringify(entry));
            var preventry = entry[entry.length - 1];
            // do not combine quoted strings!
            if (preventry === null) {} else if (isQuoted(u[k]) || isQuoted(preventry)) {
                entry[entry.length - 1] = null;
            } else {
                var combined = preventry + " " + u[k];
                if (spacesLimit > 0 && countSpaces(combined) > spacesLimit) {
                    combined = null;
                }
                entry[entry.length - 1] = combined;
            }
            return entry;
        });
        var r2 = w.map(function (entry) {
            debuglog("2 >" + JSON.stringify(entry));
            var entry = entry.slice(0);
            entry.push(u[k]);
            return entry;
        });
        debuglog(JSON.stringify(r1));
        debuglog(JSON.stringify(r2));
        w = r1.concat(r2);
    }
    w = w.filter(function (oMap) {
        return oMap.every(function (sWord) {
            return sWord !== null;
        });
    });
    return w.map(function (oMap) {
        return oMap.map(function (sWord) {
            return trimQuoted(sWord);
        });
    });
}
exports.breakdownString = breakdownString;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tYXRjaC9icmVha2Rvd24udHMiLCJtYXRjaC9icmVha2Rvd24uanMiXSwibmFtZXMiOlsiZGVidWciLCJyZXF1aXJlIiwiZGVidWdsb2ciLCJjbGVhbnNlU3RyaW5nIiwic1N0cmluZyIsImxlbiIsImxlbmd0aCIsInJlcGxhY2UiLCJleHBvcnRzIiwiY2xlYW5zZVN0cmluZ0xlYXZlRG90cyIsImNsZWFuc2VRdW90ZWRTdHJpbmciLCJyZWdleHBSZW1vdmVEb3VibGUiLCJSZWdFeHAiLCJzdHJpcHRhaWwiLCJ0cmltUXVvdGVkIiwic2tpcFVudGlsIiwic3RyaXBwZWQiLCJtIiwiZXhlYyIsInRyaW1RdW90ZWRTcGFjZWQiLCJyZWNvbWJpbmVRdW90ZWQiLCJhQXJyIiwibWFwIiwicyIsImluZGV4IiwidW5kZWZpbmVkIiwiaSIsInJlcyIsInNsaWNlIiwiam9pbiIsImZpbHRlciIsImlzUXVvdGVkIiwiY291bnRTcGFjZXMiLCJyIiwiY2hhckF0IiwiUXVvdGVzIiwic3dhbGxvd1F1b3RlIiwic3RyIiwic3Vic3RyaW5nIiwidG9rZW4iLCJuZXh0cG9zIiwiV29yZDIiLCJXb3JkIiwic3dhbGxvd1dvcmQiLCJwdXNoVG9rZW4iLCJ0b2tlbnMiLCJwdXNoIiwiZnVzYWJsZSIsImlzQ29tYmluYWJsZVNwbGl0IiwidG9rZW5pemVkIiwiaXNDb21iaW5hYmxlUmFuZ2VSZXR1cm5JbmRleCIsInJhbmdlIiwic3RhcnQiLCJsb3ciLCJlbmQiLCJoaWdoIiwiY29tYmluZVRva2VucyIsInRva2VuaXplU3RyaW5nIiwic3BhY2VzTGltaXQiLCJzZWVuU2VwIiwiX2EiLCJfYiIsIm1ha2VNYXRjaFBhdHRlcm4iLCJiZXN0bGVuIiwiYmVzdCIsImxvbmdlc3RUb2tlbiIsInNwYW4iLCJmb3JFYWNoIiwiYnJlYWtkb3duU3RyaW5nIiwiclN0cmluZyIsInUiLCJzcGxpdCIsImsiLCJ3IiwicjEiLCJlbnRyeSIsIkpTT04iLCJzdHJpbmdpZnkiLCJwcmV2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LEtBQUtDLFNBQUwsQ0FBZUgsRUFBZixDQUFUO0FBQ0F4RSxpQkFBUzBFLEtBQUtDLFNBQUwsQ0FBZUcsRUFBZixDQUFUO0FBQ0FQLFlBQUlDLEdBQUdPLE1BQUgsQ0FBVUQsRUFBVixDQUFKO0FBQ0g7QUFDRFAsUUFBSUEsRUFBRTNDLE1BQUYsQ0FBUyxVQUFTb0QsSUFBVCxFQUFhO0FBQ3RCLGVBQU9BLEtBQUtDLEtBQUwsQ0FBVyxVQUFTQyxLQUFULEVBQWM7QUFDNUIsbUJBQU9BLFVBQVUsSUFBakI7QUFDSCxTQUZNLENBQVA7QUFHSCxLQUpHLENBQUo7QUFLQSxXQUFPWCxFQUFFbkQsR0FBRixDQUFNLFVBQVU0RCxJQUFWLEVBQWM7QUFDdkIsZUFBT0EsS0FBSzVELEdBQUwsQ0FBUyxVQUFVOEQsS0FBVixFQUFlO0FBQzNCLG1CQUFPdEUsV0FBV3NFLEtBQVgsQ0FBUDtBQUNILFNBRk0sQ0FBUDtBQUdILEtBSk0sQ0FBUDtBQUtIO0FBckRENUUsUUFBQTRELGVBQUEsR0FBQUEsZUFBQSIsImZpbGUiOiJtYXRjaC9icmVha2Rvd24uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQGZpbGVcclxuICogQG1vZHVsZSBqZnNlYi5mZGV2c3RhcnQuYnJlYWtkb3duXHJcbiAqIEBjb3B5cmlnaHQgKGMpIDIwMTYgR2VyZCBGb3JzdG1hbm5cclxuICovXHJcblxyXG5pbXBvcnQgKiBhcyBkZWJ1ZyBmcm9tICdkZWJ1Zyc7XHJcbmNvbnN0IGRlYnVnbG9nID0gZGVidWcoJ2Rpc3BhdGNoZXInKVxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjbGVhbnNlU3RyaW5nKHNTdHJpbmc6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICB2YXIgbGVuID0gMDtcclxuICAgIHdoaWxlIChsZW4gIT09IHNTdHJpbmcubGVuZ3RoKSB7XHJcbiAgICAgICAgbGVuID0gc1N0cmluZy5sZW5ndGg7XHJcbiAgICAgICAgc1N0cmluZyA9IHNTdHJpbmcucmVwbGFjZSgvXFxzKy9nLCAnICcpO1xyXG4gICAgICAgIHNTdHJpbmcgPSBzU3RyaW5nLnJlcGxhY2UoL15cXHMrLywgJycpO1xyXG4gICAgICAgIHNTdHJpbmcgPSBzU3RyaW5nLnJlcGxhY2UoL1xccyskLywgJycpO1xyXG4gICAgICAgIHNTdHJpbmcgPSBzU3RyaW5nLnJlcGxhY2UoL15bLDsuXSsvLCAnJyk7XHJcbiAgICAgICAgc1N0cmluZyA9IHNTdHJpbmcucmVwbGFjZSgvWyw7Ll0rJC8sICcnKTtcclxuICAgIH1cclxuICAgIHJldHVybiBzU3RyaW5nXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjbGVhbnNlU3RyaW5nTGVhdmVEb3RzKHNTdHJpbmc6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICB2YXIgbGVuID0gMDtcclxuICAgIHdoaWxlIChsZW4gIT09IHNTdHJpbmcubGVuZ3RoKSB7XHJcbiAgICAgICAgbGVuID0gc1N0cmluZy5sZW5ndGg7XHJcbiAgICAgICAgc1N0cmluZyA9IHNTdHJpbmcucmVwbGFjZSgvXFxzKy9nLCAnICcpO1xyXG4gICAgICAgIHNTdHJpbmcgPSBzU3RyaW5nLnJlcGxhY2UoL15cXHMrLywgJycpO1xyXG4gICAgICAgIHNTdHJpbmcgPSBzU3RyaW5nLnJlcGxhY2UoL1xccyskLywgJycpO1xyXG4gICAgICAgIHNTdHJpbmcgPSBzU3RyaW5nLnJlcGxhY2UoL15bLDshP10rLywgJycpO1xyXG4gICAgICAgIHNTdHJpbmcgPSBzU3RyaW5nLnJlcGxhY2UoL1ssOyE/XSskLywgJycpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHNTdHJpbmdcclxufVxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjbGVhbnNlUXVvdGVkU3RyaW5nKHNTdHJpbmc6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICB2YXIgbGVuID0gMDtcclxuICAgIHdoaWxlIChsZW4gIT09IHNTdHJpbmcubGVuZ3RoKSB7XHJcbiAgICAgICAgbGVuID0gc1N0cmluZy5sZW5ndGg7XHJcbiAgICAgICAgc1N0cmluZyA9IHNTdHJpbmcucmVwbGFjZSgvXFxzXFxzKy9nLCAnICcpO1xyXG4gICAgICAgIHNTdHJpbmcgPSBzU3RyaW5nLnJlcGxhY2UoL1xccysvZywgJyAnKTtcclxuICAgICAgICBzU3RyaW5nID0gc1N0cmluZy5yZXBsYWNlKC9eXFxzKy8sICcnKTtcclxuICAgICAgICBzU3RyaW5nID0gc1N0cmluZy5yZXBsYWNlKC9cXHMrJC8sICcnKTtcclxuICAgICAgICBzU3RyaW5nID0gc1N0cmluZy5yZXBsYWNlKC9eWyw7Ll0rLywgJycpO1xyXG4gICAgICAgIHNTdHJpbmcgPSBzU3RyaW5nLnJlcGxhY2UoL1ssOy5dKyQvLCAnJyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gc1N0cmluZ1xyXG59XHJcblxyXG5jb25zdCByZWdleHBSZW1vdmVEb3VibGUgPSBuZXcgUmVnRXhwKC9eXFxcIihcXFwiLipcXFwiKVxcXCIkLyk7XHJcbmNvbnN0IHN0cmlwdGFpbCA9IG5ldyBSZWdFeHAoL15cXFwiKFteXFxcIl0rKVwiJC8pXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdHJpbVF1b3RlZChzU3RyaW5nOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgdmFyIHNraXBVbnRpbCA9IDA7XHJcbiAgICB2YXIgc3RyaXBwZWQgPSBzU3RyaW5nO1xyXG4gICAgdmFyIG0gPSByZWdleHBSZW1vdmVEb3VibGUuZXhlYyhzU3RyaW5nKTtcclxuICAgIHdoaWxlIChtKSB7XHJcbiAgICAgICAgc3RyaXBwZWQgPSBtWzFdO1xyXG4gICAgICAgIG0gPSByZWdleHBSZW1vdmVEb3VibGUuZXhlYyhzdHJpcHBlZCk7XHJcbiAgICB9XHJcbiAgICBkZWJ1Z2xvZyhcInN0cmlwcGVkIFwiICsgc3RyaXBwZWQpO1xyXG4gICAgbSA9IHN0cmlwdGFpbC5leGVjKHN0cmlwcGVkKTtcclxuICAgIGlmIChtKSB7XHJcbiAgICAgICAgcmV0dXJuIG1bMV07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY2xlYW5zZVN0cmluZyhzU3RyaW5nKTtcclxufVxyXG5cclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdHJpbVF1b3RlZFNwYWNlZChzU3RyaW5nOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgdmFyIHNraXBVbnRpbCA9IDA7XHJcbiAgICBzU3RyaW5nID0gc1N0cmluZy5yZXBsYWNlKC9eXCJcXHMrL2csICdcIicpO1xyXG4gICAgc1N0cmluZyA9IHNTdHJpbmcucmVwbGFjZSgvXFxzK1xcXCIkL2csICdcIicpO1xyXG4gICAgcmV0dXJuIHNTdHJpbmc7XHJcbn1cclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmVjb21iaW5lUXVvdGVkKGFBcnI6IEFycmF5PHN0cmluZz4pOiBBcnJheTxzdHJpbmc+IHtcclxuICAgIHZhciBza2lwVW50aWwgPSAwO1xyXG4gICAgYUFyciA9IGFBcnIubWFwKGZ1bmN0aW9uIChzLCBpbmRleCkge1xyXG4gICAgICAgIGlmIChpbmRleCA8IHNraXBVbnRpbCkge1xyXG4gICAgICAgICAgICBkZWJ1Z2xvZyhcInNraXBwaW5nID5cIiArIHMgKyBcIjxcIik7XHJcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICgvXlwiLy5leGVjKHMpKSB7XHJcbiAgICAgICAgICAgIHZhciBpID0gaW5kZXg7XHJcbiAgICAgICAgICAgIHdoaWxlIChpIDwgYUFyci5sZW5ndGggJiYgKCEvXCIkLy5leGVjKGFBcnJbaV0pIHx8IChpbmRleCA9PT0gaSAmJiBzID09PSAnXCInKSkpIHtcclxuICAgICAgICAgICAgICAgIGkgPSBpICsgMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoaSA9PT0gYUFyci5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIGRlYnVnbG9nKFwiVW50ZXJtaW5hdGVkIHF1b3RlZCBzdHJpbmdcIik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHNraXBVbnRpbCA9IGkgKyAxO1xyXG4gICAgICAgICAgICAgICAgdmFyIHJlcyA9IGFBcnIuc2xpY2UoaW5kZXgsIGkgKyAxKS5qb2luKFwiIFwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcztcclxuICAgIH0pLmZpbHRlcihmdW5jdGlvbiAocykge1xyXG4gICAgICAgIHJldHVybiBzICE9PSB1bmRlZmluZWQ7XHJcbiAgICB9KS5tYXAoZnVuY3Rpb24gKHMpIHtcclxuICAgICAgICByZXR1cm4gdHJpbVF1b3RlZFNwYWNlZChzKTtcclxuICAgIH0pXHJcbiAgICByZXR1cm4gYUFycjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzUXVvdGVkKHNTdHJpbmcpIHtcclxuICAgIHJldHVybiAhIS9eXCIuKlwiJC8uZXhlYyhzU3RyaW5nKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNvdW50U3BhY2VzKHNTdHJpbmc6IHN0cmluZykge1xyXG4gICAgdmFyIHIgPSAwO1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzU3RyaW5nLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgaWYgKHNTdHJpbmcuY2hhckF0KGkpID09PSAnICcpIHtcclxuICAgICAgICAgICAgciA9IHIgKyAxO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiByO1xyXG59XHJcblxyXG5pbnRlcmZhY2UgSVRva2VuaXplZFN0cmluZyB7XHJcbiAgICB0b2tlbnMgOiBzdHJpbmdbXSxcclxuICAgIGZ1c2FibGUgOiBib29sZWFuW107XHJcbiAgICAvL2luZGV4TWFwIDogeyBba2V5Om51bWJlcl0gOiB7IGZ1c2U6IGJvb2xlYW59fTtcclxufVxyXG5cclxudmFyIFF1b3RlcyA9IC9eXCIoW15cIl0rKVwiLztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzd2FsbG93UXVvdGUoc3RyIDogc3RyaW5nLCBpIDogbnVtYmVyKSA6IHsgdG9rZW4gOiBzdHJpbmcsIG5leHRwb3MgOiBudW1iZXJ9IHtcclxuICAgICB2YXIgbSA9IFF1b3Rlcy5leGVjKHN0ci5zdWJzdHJpbmcoaSkpO1xyXG4gICAgIGlmKCFtKSB7XHJcbiAgICAgICAgICByZXR1cm4geyB0b2tlbjogdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICAgICAgbmV4dHBvcyA6IGlcclxuICAgICAgICAgfVxyXG4gICAgIH1cclxuICAgICByZXR1cm4ge1xyXG4gICAgICAgICB0b2tlbiA6IGNsZWFuc2VTdHJpbmdMZWF2ZURvdHMobVsxXSksXHJcbiAgICAgICAgIG5leHRwb3MgOiAoaSArIG1bMF0ubGVuZ3RoKVxyXG4gICAgIH1cclxufVxyXG5cclxudmFyIFdvcmQyID0gL14oWy5dPyhbLSNBLVpfYS16MC05XFwvXFxcXFxcJVxcJCZdKFtcXCcuXVstI0EtWl9hLXowLTlcXC9cXFxcXFwlXFwkJl0pKikrKS87XHJcbnZhciBXb3JkID0gL14oKFteLiw7XFwnXFxcIl18KFxcLlteICw7XFwnXFxcIl0pKShbXi4gLDs/IVxcXCInXXwoXFwuW14gLDs/IVxcXCInXSl8KFxcJ1teLiAsOz8hXFxcIlxcJ10pKikrKS87XHJcbmV4cG9ydCBmdW5jdGlvbiBzd2FsbG93V29yZChzdHIgOiBzdHJpbmcsIGkgOiBudW1iZXIpIDogeyB0b2tlbiA6IHN0cmluZywgbmV4dHBvcyA6IG51bWJlcn0ge1xyXG4gICAgIHZhciBtID0gV29yZC5leGVjKHN0ci5zdWJzdHJpbmcoaSkpO1xyXG4gICAgIGlmKCFtKSB7XHJcbiAgICAgICAgIHJldHVybiB7IHRva2VuOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICBuZXh0cG9zIDogaVxyXG4gICAgICAgICB9XHJcbiAgICAgfVxyXG4gICAgIHJldHVybiB7XHJcbiAgICAgICAgIHRva2VuIDogbVsxXSxcclxuICAgICAgICAgbmV4dHBvcyA6IChpICsgbVswXS5sZW5ndGgpXHJcbiAgICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBwdXNoVG9rZW4ocmVzIDogSVRva2VuaXplZFN0cmluZywgdG9rZW4gOiBzdHJpbmcpIHtcclxuICAgIHJlcy50b2tlbnMucHVzaCh0b2tlbik7XHJcbiAgICByZXMuZnVzYWJsZVtyZXMudG9rZW5zLmxlbmd0aF0gPSB0cnVlO1xyXG59XHJcblxyXG4vKipcclxuICogUmV0dXJucyB0cnVlIGlmZiB0b2tlbml6ZWQgcmVwcmVzZW50cyBtdWx0aXBsZSB3b3Jkcywgd2hpY2hcclxuICogY2FuIHBvdGVuaWFsbHkgYmUgYWRkZWQgdG9nZXRoZXI7XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaXNDb21iaW5hYmxlU3BsaXQodG9rZW5pemVkIDogSVRva2VuaXplZFN0cmluZykge1xyXG4gICBpZih0b2tlbml6ZWQudG9rZW5zLmxlbmd0aCA8PSAxKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgfVxyXG4gICBmb3IodmFyIGkgPSAxOyBpIDwgdG9rZW5pemVkLnRva2Vucy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgaWYoIXRva2VuaXplZC5mdXNhYmxlW2ldKSB7XHJcbiAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgfVxyXG4gICB9XHJcbiAgIHJldHVybiB0cnVlO1xyXG59XHJcblxyXG4vKipcclxuICogcmV0dXJuIHRydWUgaWZmICByYW5nZSBAIGluZGV4IGlzIGEgc3VpdGFibGUgY29tYmluYWJsZSBvdmVybGFwXHJcbiAqXHJcbiAqICh0eXBpY2FsbHkgaW4gdGhlIHBhcnNlZCByZWFsIHN0cmluZylcclxuICogcmV0dXJuIHRoZSB0YXJnZXRpbmRleCBvciAtMSBpZiBpbXBvc3NpYmxlXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaXNDb21iaW5hYmxlUmFuZ2VSZXR1cm5JbmRleChyYW5nZSA6IElNYXRjaC5JUmFuZ2UgLCBmdXNhYmxlOiBib29sZWFuW10sIGluZGV4OiBudW1iZXIpIHtcclxuICAgIHZhciBzdGFydCA9IGluZGV4ICsgcmFuZ2UubG93O1xyXG4gICAgdmFyIGVuZCA9IGluZGV4ICsgcmFuZ2UuaGlnaDtcclxuICAgIC8vIGV4YW1wbGUgcmFuZ2UgPSAtMSwgMCAgICAgICAgICAgICBpbmRleCA9IDEgID0+IHN0YXJ0ID0gMCwgZW5kID0gMSwgdGVzdCBmdXNhYmxlWzFdXHJcbiAgICBmb3IodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XHJcbiAgICAgICAgaWYoIWZ1c2FibGVbaSsxXSkge1xyXG4gICAgICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHN0YXJ0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY29tYmluZVRva2VucyhyYW5nZSA6IElNYXRjaC5JUmFuZ2UgLCBpbmRleDogbnVtYmVyLCB0b2tlbnMgOiBzdHJpbmdbXSkge1xyXG4gICAgdmFyIHN0YXJ0ID0gaW5kZXggKyByYW5nZS5sb3c7XHJcbiAgICB2YXIgZW5kID0gaW5kZXggKyByYW5nZS5oaWdoO1xyXG4gICAgdmFyIHJlcyA9IFtdO1xyXG4gICAgZm9yKHZhciBpID0gc3RhcnQ7IGkgPD0gZW5kOyArK2kpIHtcclxuICAgICAgICByZXMucHVzaCh0b2tlbnNbaV0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlcy5qb2luKFwiIFwiKTtcclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKlxyXG4gKiBOb3RlOiB0aGlzIHRva2VuaXplciByZWNvZ25pemVkIC5naXRpZ29yZSBvciAuYS5iLmMgYXMgb25lIHRva2VuXHJcbiAqIHRyYWlsaW5nIC4gaXMgc3RyaXBwZWQhXHJcbiAqQHBhcmFtIHtzdHJpbmd9IHNTdHJpbmcgLCBlLmcuIFwiYSxiIGM7ZCBPJ0hhcmEgYW5kIFwibXVycGgneXNcIlxyXG4gKkByZXR1cm4ge0FycmF5PFN0cmluZz59IGJyb2tlbiBkb3duIGFycmF5LCBlLmcuXHJcbiAqIFtbXCJhIGIgY1wiXSwgW1wiYVwiLCBcImIgY1wiXSwgW1wiYSBiXCIsIFwiY1wiXSwgLi4uLltcImFcIiwgXCJiXCIsIFwiY1wiXV1cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB0b2tlbml6ZVN0cmluZyhzU3RyaW5nOiBzdHJpbmcsIHNwYWNlc0xpbWl0PzogbnVtYmVyKTogSVRva2VuaXplZFN0cmluZyB7XHJcbiAgICB2YXIgcmVzID0ge1xyXG4gICAgICAgIHRva2VuczogW10sXHJcbiAgICAgICAgZnVzYWJsZSA6W2ZhbHNlXVxyXG4gICAgfSBhcyBJVG9rZW5pemVkU3RyaW5nO1xyXG4gICAgdmFyIGkgPSAwO1xyXG4gICAgdmFyIHNlZW5TZXA9IGZhbHNlO1xyXG4gICAgd2hpbGUgKGkgPHNTdHJpbmcubGVuZ3RoICkge1xyXG4gICAgICAgIHN3aXRjaChzU3RyaW5nLmNoYXJBdChpKSkge1xyXG4gICAgICAgICAgICBjYXNlICdcIic6XHJcbiAgICAgICAgICAgICAgICB2YXIgeyB0b2tlbiwgbmV4dHBvcyB9ID0gc3dhbGxvd1F1b3RlKHNTdHJpbmcsaSk7XHJcbiAgICAgICAgICAgICAgICBpZihuZXh0cG9zID09PSBpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdW50ZXJtaW5hdGVkIHF1b3RlLCB0cmVhdCBsaWtlIHNlcGFyYXRvclxyXG4gICAgICAgICAgICAgICAgICAgIHJlcy5mdXNhYmxlW3Jlcy50b2tlbnMubGVuZ3RoXSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHNlZW5TZXAgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICsraTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZih0b2tlbiA9PT0gXCJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlcy5mdXNhYmxlW3Jlcy50b2tlbnMubGVuZ3RoXSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHNlZW5TZXAgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGkgPSBuZXh0cG9zO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXMuZnVzYWJsZVtyZXMudG9rZW5zLmxlbmd0aF0gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBwdXNoVG9rZW4ocmVzLHRva2VuKTtcclxuICAgICAgICAgICAgICAgICAgICByZXMuZnVzYWJsZVtyZXMudG9rZW5zLmxlbmd0aF0gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBpID0gbmV4dHBvcztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ1xcdCc6XHJcbiAgICAgICAgICAgIGNhc2UgJ1xcbic6XHJcbiAgICAgICAgICAgIGNhc2UgJ1xccic6XHJcbiAgICAgICAgICAgIGNhc2UgJyAnOlxyXG4gICAgICAgICAgICAgICAgaSsrO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnOic6XHJcbiAgICAgICAgICAgIGNhc2UgJywnOlxyXG4gICAgICAgICAgICBjYXNlICc/JzpcclxuICAgICAgICAgICAgY2FzZSAnISc6XHJcbiAgICAgICAgICAgIGNhc2UgJzsnOlxyXG4gICAgICAgICAgICAgICAgcmVzLmZ1c2FibGVbcmVzLnRva2Vucy5sZW5ndGhdID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBzZWVuU2VwID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICsraTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJy4nOlxyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgdmFyIHt0b2tlbiwgbmV4dHBvc30gPSBzd2FsbG93V29yZChzU3RyaW5nLGkpO1xyXG4gICAgICAgICAgICAgICAgaWYodG9rZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICBwdXNoVG9rZW4ocmVzLHRva2VuKTtcclxuICAgICAgICAgICAgICAgICAgICBpID0gbmV4dHBvcztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzLmZ1c2FibGVbcmVzLnRva2Vucy5sZW5ndGhdID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgaSsrXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJlcy5mdXNhYmxlW3Jlcy50b2tlbnMubGVuZ3RoXSA9IGZhbHNlO1xyXG4gICAgcmV0dXJuIHJlcztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VNYXRjaFBhdHRlcm4oc3RyOiBzdHJpbmcpIHtcclxuICAgIHZhciB0b2tlbnMgPSB0b2tlbml6ZVN0cmluZyhzdHIpO1xyXG4gICAgdmFyIGJlc3RsZW4gPSAwO1xyXG4gICAgaWYoIWlzQ29tYmluYWJsZVNwbGl0KHRva2VucykpIHtcclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG4gICAgdmFyIGJlc3QgPSB7XHJcbiAgICAgICAgbG9uZ2VzdFRva2VuIDogXCJcIixcclxuICAgICAgICBzcGFuOiB7bG93OiAwLCBoaWdoOiAwfVxyXG4gICAgfTtcclxuXHJcbiAgICBpZih0b2tlbnMudG9rZW5zLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICB0b2tlbnMudG9rZW5zLmZvckVhY2goZnVuY3Rpb24odG9rZW4saW5kZXgpIHtcclxuICAgICAgICAgICAgdmFyIGxlbiA9IHRva2VuLmxlbmd0aDtcclxuICAgICAgICAgICAgaWYgKGxlbiA+IGJlc3RsZW4pIHtcclxuICAgICAgICAgICAgICAgIGJlc3RsZW4gPSBsZW47XHJcbiAgICAgICAgICAgICAgICBiZXN0Lmxvbmdlc3RUb2tlbiA9IHRva2VuO1xyXG4gICAgICAgICAgICAgICAgYmVzdC5zcGFuLmxvdyA9IC1pbmRleDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGJlc3Quc3Bhbi5oaWdoID0gdG9rZW5zLnRva2Vucy5sZW5ndGggKyBiZXN0LnNwYW4ubG93IC0gMTtcclxuICAgICAgICByZXR1cm4gYmVzdDtcclxuICAgIH1cclxuICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKkBwYXJhbSB7c3RyaW5nfSBzU3RyaW5nICwgZS5nLiBcImEgYiBjXCJcclxuICpAcmV0dXJuIHtBcnJheTxBcnJheTxTdHJpbmc+Pn0gYnJva2VuIGRvd24gYXJyYXksIGUuZy5cclxuICpbW1wiYSBiIGNcIl0sIFtcImFcIiwgXCJiIGNcIl0sIFtcImEgYlwiLCBcImNcIl0sIC4uLi5bXCJhXCIsIFwiYlwiLCBcImNcIl1dXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gYnJlYWtkb3duU3RyaW5nKHNTdHJpbmc6IHN0cmluZywgc3BhY2VzTGltaXQ/OiBudW1iZXIpOiBBcnJheTxBcnJheTxTdHJpbmc+PiB7XHJcbiAgICB2YXIgclN0cmluZyA9IGNsZWFuc2VTdHJpbmcoc1N0cmluZyk7XHJcbiAgICBpZiAoc3BhY2VzTGltaXQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHNwYWNlc0xpbWl0ID0gLTE7XHJcbiAgICB9XHJcbiAgICB2YXIgdSA9IHJTdHJpbmcuc3BsaXQoXCIgXCIpO1xyXG4gICAgdSA9IHJlY29tYmluZVF1b3RlZCh1KTtcclxuICAgIHZhciBrID0gMDtcclxuICAgIGlmICh1Lmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIHJldHVybiBbW11dO1xyXG4gICAgfVxyXG4gICAgdmFyIHcgPSBbW3VbMF1dXTtcclxuICAgIHdoaWxlIChrIDwgdS5sZW5ndGggLSAxKSB7XHJcbiAgICAgICAgayA9IGsgKyAxO1xyXG4gICAgICAgIHZhciByMSA9IHcubWFwKGZ1bmN0aW9uIChlbnRyeSkge1xyXG4gICAgICAgICAgICBkZWJ1Z2xvZyhKU09OLnN0cmluZ2lmeShlbnRyeSkpO1xyXG4gICAgICAgICAgICB2YXIgZW50cnkgPSBlbnRyeS5zbGljZSgwKTtcclxuICAgICAgICAgICAgZGVidWdsb2coSlNPTi5zdHJpbmdpZnkoZW50cnkpKTtcclxuICAgICAgICAgICAgdmFyIHByZXZlbnRyeSA9IGVudHJ5W2VudHJ5Lmxlbmd0aCAtMV07XHJcbiAgICAgICAgICAgIC8vIGRvIG5vdCBjb21iaW5lIHF1b3RlZCBzdHJpbmdzIVxyXG4gICAgICAgICAgICBpZiAocHJldmVudHJ5ID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAvKiBkbyBub3RoaW5nICovIC8vcmV0dXJuIGVudHJ5O1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzUXVvdGVkKHVba10pIHx8IGlzUXVvdGVkKHByZXZlbnRyeSkpIHtcclxuICAgICAgICAgICAgICAgIGVudHJ5W2VudHJ5Lmxlbmd0aCAtIDFdID0gbnVsbDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZhciBjb21iaW5lZCA9IHByZXZlbnRyeSArIFwiIFwiICsgdVtrXTtcclxuICAgICAgICAgICAgICAgIGlmIChzcGFjZXNMaW1pdCA+IDAgJiYgY291bnRTcGFjZXMoY29tYmluZWQpID4gc3BhY2VzTGltaXQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb21iaW5lZCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbnRyeVtlbnRyeS5sZW5ndGggLSAxXSA9IGNvbWJpbmVkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBlbnRyeTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB2YXIgcjIgPSB3Lm1hcChmdW5jdGlvbiAoZW50cnkpIHtcclxuICAgICAgICAgICAgZGVidWdsb2coXCIyID5cIiArIEpTT04uc3RyaW5naWZ5KGVudHJ5KSk7XHJcbiAgICAgICAgICAgIHZhciBlbnRyeSA9IGVudHJ5LnNsaWNlKDApO1xyXG4gICAgICAgICAgICBlbnRyeS5wdXNoKHVba10pO1xyXG4gICAgICAgICAgICByZXR1cm4gZW50cnlcclxuICAgICAgICB9KTtcclxuICAgICAgICBkZWJ1Z2xvZyhKU09OLnN0cmluZ2lmeShyMSkpO1xyXG4gICAgICAgIGRlYnVnbG9nKEpTT04uc3RyaW5naWZ5KHIyKSk7XHJcbiAgICAgICAgdyA9IHIxLmNvbmNhdChyMik7XHJcbiAgICB9XHJcbiAgICB3ID0gdy5maWx0ZXIoZnVuY3Rpb24ob01hcCkge1xyXG4gICAgICAgIHJldHVybiBvTWFwLmV2ZXJ5KGZ1bmN0aW9uKHNXb3JkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzV29yZCAhPT0gbnVsbDtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHcubWFwKGZ1bmN0aW9uIChvTWFwKSB7XHJcbiAgICAgICAgcmV0dXJuIG9NYXAubWFwKGZ1bmN0aW9uIChzV29yZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJpbVF1b3RlZChzV29yZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuaW1wb3J0ICogYXMgSU1hdGNoIGZyb20gJy4vaWZtYXRjaCdcclxuXHJcbiIsIi8qKlxuICogQGZpbGVcbiAqIEBtb2R1bGUgamZzZWIuZmRldnN0YXJ0LmJyZWFrZG93blxuICogQGNvcHlyaWdodCAoYykgMjAxNiBHZXJkIEZvcnN0bWFublxuICovXG5cInVzZSBzdHJpY3RcIjtcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoXCJkZWJ1Z1wiKTtcbnZhciBkZWJ1Z2xvZyA9IGRlYnVnKCdkaXNwYXRjaGVyJyk7XG5mdW5jdGlvbiBjbGVhbnNlU3RyaW5nKHNTdHJpbmcpIHtcbiAgICB2YXIgbGVuID0gMDtcbiAgICB3aGlsZSAobGVuICE9PSBzU3RyaW5nLmxlbmd0aCkge1xuICAgICAgICBsZW4gPSBzU3RyaW5nLmxlbmd0aDtcbiAgICAgICAgc1N0cmluZyA9IHNTdHJpbmcucmVwbGFjZSgvXFxzKy9nLCAnICcpO1xuICAgICAgICBzU3RyaW5nID0gc1N0cmluZy5yZXBsYWNlKC9eXFxzKy8sICcnKTtcbiAgICAgICAgc1N0cmluZyA9IHNTdHJpbmcucmVwbGFjZSgvXFxzKyQvLCAnJyk7XG4gICAgICAgIHNTdHJpbmcgPSBzU3RyaW5nLnJlcGxhY2UoL15bLDsuXSsvLCAnJyk7XG4gICAgICAgIHNTdHJpbmcgPSBzU3RyaW5nLnJlcGxhY2UoL1ssOy5dKyQvLCAnJyk7XG4gICAgfVxuICAgIHJldHVybiBzU3RyaW5nO1xufVxuZXhwb3J0cy5jbGVhbnNlU3RyaW5nID0gY2xlYW5zZVN0cmluZztcbmZ1bmN0aW9uIGNsZWFuc2VTdHJpbmdMZWF2ZURvdHMoc1N0cmluZykge1xuICAgIHZhciBsZW4gPSAwO1xuICAgIHdoaWxlIChsZW4gIT09IHNTdHJpbmcubGVuZ3RoKSB7XG4gICAgICAgIGxlbiA9IHNTdHJpbmcubGVuZ3RoO1xuICAgICAgICBzU3RyaW5nID0gc1N0cmluZy5yZXBsYWNlKC9cXHMrL2csICcgJyk7XG4gICAgICAgIHNTdHJpbmcgPSBzU3RyaW5nLnJlcGxhY2UoL15cXHMrLywgJycpO1xuICAgICAgICBzU3RyaW5nID0gc1N0cmluZy5yZXBsYWNlKC9cXHMrJC8sICcnKTtcbiAgICAgICAgc1N0cmluZyA9IHNTdHJpbmcucmVwbGFjZSgvXlssOyE/XSsvLCAnJyk7XG4gICAgICAgIHNTdHJpbmcgPSBzU3RyaW5nLnJlcGxhY2UoL1ssOyE/XSskLywgJycpO1xuICAgIH1cbiAgICByZXR1cm4gc1N0cmluZztcbn1cbmV4cG9ydHMuY2xlYW5zZVN0cmluZ0xlYXZlRG90cyA9IGNsZWFuc2VTdHJpbmdMZWF2ZURvdHM7XG5mdW5jdGlvbiBjbGVhbnNlUXVvdGVkU3RyaW5nKHNTdHJpbmcpIHtcbiAgICB2YXIgbGVuID0gMDtcbiAgICB3aGlsZSAobGVuICE9PSBzU3RyaW5nLmxlbmd0aCkge1xuICAgICAgICBsZW4gPSBzU3RyaW5nLmxlbmd0aDtcbiAgICAgICAgc1N0cmluZyA9IHNTdHJpbmcucmVwbGFjZSgvXFxzXFxzKy9nLCAnICcpO1xuICAgICAgICBzU3RyaW5nID0gc1N0cmluZy5yZXBsYWNlKC9cXHMrL2csICcgJyk7XG4gICAgICAgIHNTdHJpbmcgPSBzU3RyaW5nLnJlcGxhY2UoL15cXHMrLywgJycpO1xuICAgICAgICBzU3RyaW5nID0gc1N0cmluZy5yZXBsYWNlKC9cXHMrJC8sICcnKTtcbiAgICAgICAgc1N0cmluZyA9IHNTdHJpbmcucmVwbGFjZSgvXlssOy5dKy8sICcnKTtcbiAgICAgICAgc1N0cmluZyA9IHNTdHJpbmcucmVwbGFjZSgvWyw7Ll0rJC8sICcnKTtcbiAgICB9XG4gICAgcmV0dXJuIHNTdHJpbmc7XG59XG5leHBvcnRzLmNsZWFuc2VRdW90ZWRTdHJpbmcgPSBjbGVhbnNlUXVvdGVkU3RyaW5nO1xudmFyIHJlZ2V4cFJlbW92ZURvdWJsZSA9IG5ldyBSZWdFeHAoL15cXFwiKFxcXCIuKlxcXCIpXFxcIiQvKTtcbnZhciBzdHJpcHRhaWwgPSBuZXcgUmVnRXhwKC9eXFxcIihbXlxcXCJdKylcIiQvKTtcbmZ1bmN0aW9uIHRyaW1RdW90ZWQoc1N0cmluZykge1xuICAgIHZhciBza2lwVW50aWwgPSAwO1xuICAgIHZhciBzdHJpcHBlZCA9IHNTdHJpbmc7XG4gICAgdmFyIG0gPSByZWdleHBSZW1vdmVEb3VibGUuZXhlYyhzU3RyaW5nKTtcbiAgICB3aGlsZSAobSkge1xuICAgICAgICBzdHJpcHBlZCA9IG1bMV07XG4gICAgICAgIG0gPSByZWdleHBSZW1vdmVEb3VibGUuZXhlYyhzdHJpcHBlZCk7XG4gICAgfVxuICAgIGRlYnVnbG9nKFwic3RyaXBwZWQgXCIgKyBzdHJpcHBlZCk7XG4gICAgbSA9IHN0cmlwdGFpbC5leGVjKHN0cmlwcGVkKTtcbiAgICBpZiAobSkge1xuICAgICAgICByZXR1cm4gbVsxXTtcbiAgICB9XG4gICAgcmV0dXJuIGNsZWFuc2VTdHJpbmcoc1N0cmluZyk7XG59XG5leHBvcnRzLnRyaW1RdW90ZWQgPSB0cmltUXVvdGVkO1xuZnVuY3Rpb24gdHJpbVF1b3RlZFNwYWNlZChzU3RyaW5nKSB7XG4gICAgdmFyIHNraXBVbnRpbCA9IDA7XG4gICAgc1N0cmluZyA9IHNTdHJpbmcucmVwbGFjZSgvXlwiXFxzKy9nLCAnXCInKTtcbiAgICBzU3RyaW5nID0gc1N0cmluZy5yZXBsYWNlKC9cXHMrXFxcIiQvZywgJ1wiJyk7XG4gICAgcmV0dXJuIHNTdHJpbmc7XG59XG5leHBvcnRzLnRyaW1RdW90ZWRTcGFjZWQgPSB0cmltUXVvdGVkU3BhY2VkO1xuZnVuY3Rpb24gcmVjb21iaW5lUXVvdGVkKGFBcnIpIHtcbiAgICB2YXIgc2tpcFVudGlsID0gMDtcbiAgICBhQXJyID0gYUFyci5tYXAoZnVuY3Rpb24gKHMsIGluZGV4KSB7XG4gICAgICAgIGlmIChpbmRleCA8IHNraXBVbnRpbCkge1xuICAgICAgICAgICAgZGVidWdsb2coXCJza2lwcGluZyA+XCIgKyBzICsgXCI8XCIpO1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoL15cIi8uZXhlYyhzKSkge1xuICAgICAgICAgICAgdmFyIGkgPSBpbmRleDtcbiAgICAgICAgICAgIHdoaWxlIChpIDwgYUFyci5sZW5ndGggJiYgKCEvXCIkLy5leGVjKGFBcnJbaV0pIHx8IChpbmRleCA9PT0gaSAmJiBzID09PSAnXCInKSkpIHtcbiAgICAgICAgICAgICAgICBpID0gaSArIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaSA9PT0gYUFyci5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBkZWJ1Z2xvZyhcIlVudGVybWluYXRlZCBxdW90ZWQgc3RyaW5nXCIpO1xuICAgICAgICAgICAgICAgIHJldHVybiBzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc2tpcFVudGlsID0gaSArIDE7XG4gICAgICAgICAgICAgICAgdmFyIHJlcyA9IGFBcnIuc2xpY2UoaW5kZXgsIGkgKyAxKS5qb2luKFwiIFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHM7XG4gICAgfSkuZmlsdGVyKGZ1bmN0aW9uIChzKSB7XG4gICAgICAgIHJldHVybiBzICE9PSB1bmRlZmluZWQ7XG4gICAgfSkubWFwKGZ1bmN0aW9uIChzKSB7XG4gICAgICAgIHJldHVybiB0cmltUXVvdGVkU3BhY2VkKHMpO1xuICAgIH0pO1xuICAgIHJldHVybiBhQXJyO1xufVxuZXhwb3J0cy5yZWNvbWJpbmVRdW90ZWQgPSByZWNvbWJpbmVRdW90ZWQ7XG5mdW5jdGlvbiBpc1F1b3RlZChzU3RyaW5nKSB7XG4gICAgcmV0dXJuICEhL15cIi4qXCIkLy5leGVjKHNTdHJpbmcpO1xufVxuZXhwb3J0cy5pc1F1b3RlZCA9IGlzUXVvdGVkO1xuZnVuY3Rpb24gY291bnRTcGFjZXMoc1N0cmluZykge1xuICAgIHZhciByID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNTdHJpbmcubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgaWYgKHNTdHJpbmcuY2hhckF0KGkpID09PSAnICcpIHtcbiAgICAgICAgICAgIHIgPSByICsgMTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcjtcbn1cbmV4cG9ydHMuY291bnRTcGFjZXMgPSBjb3VudFNwYWNlcztcbnZhciBRdW90ZXMgPSAvXlwiKFteXCJdKylcIi87XG5mdW5jdGlvbiBzd2FsbG93UXVvdGUoc3RyLCBpKSB7XG4gICAgdmFyIG0gPSBRdW90ZXMuZXhlYyhzdHIuc3Vic3RyaW5nKGkpKTtcbiAgICBpZiAoIW0pIHtcbiAgICAgICAgcmV0dXJuIHsgdG9rZW46IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIG5leHRwb3M6IGlcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdG9rZW46IGNsZWFuc2VTdHJpbmdMZWF2ZURvdHMobVsxXSksXG4gICAgICAgIG5leHRwb3M6IChpICsgbVswXS5sZW5ndGgpXG4gICAgfTtcbn1cbmV4cG9ydHMuc3dhbGxvd1F1b3RlID0gc3dhbGxvd1F1b3RlO1xudmFyIFdvcmQyID0gL14oWy5dPyhbLSNBLVpfYS16MC05XFwvXFxcXFxcJVxcJCZdKFtcXCcuXVstI0EtWl9hLXowLTlcXC9cXFxcXFwlXFwkJl0pKikrKS87XG52YXIgV29yZCA9IC9eKChbXi4sO1xcJ1xcXCJdfChcXC5bXiAsO1xcJ1xcXCJdKSkoW14uICw7PyFcXFwiJ118KFxcLlteICw7PyFcXFwiJ10pfChcXCdbXi4gLDs/IVxcXCJcXCddKSopKykvO1xuZnVuY3Rpb24gc3dhbGxvd1dvcmQoc3RyLCBpKSB7XG4gICAgdmFyIG0gPSBXb3JkLmV4ZWMoc3RyLnN1YnN0cmluZyhpKSk7XG4gICAgaWYgKCFtKSB7XG4gICAgICAgIHJldHVybiB7IHRva2VuOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBuZXh0cG9zOiBpXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHRva2VuOiBtWzFdLFxuICAgICAgICBuZXh0cG9zOiAoaSArIG1bMF0ubGVuZ3RoKVxuICAgIH07XG59XG5leHBvcnRzLnN3YWxsb3dXb3JkID0gc3dhbGxvd1dvcmQ7XG5mdW5jdGlvbiBwdXNoVG9rZW4ocmVzLCB0b2tlbikge1xuICAgIHJlcy50b2tlbnMucHVzaCh0b2tlbik7XG4gICAgcmVzLmZ1c2FibGVbcmVzLnRva2Vucy5sZW5ndGhdID0gdHJ1ZTtcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmZiB0b2tlbml6ZWQgcmVwcmVzZW50cyBtdWx0aXBsZSB3b3Jkcywgd2hpY2hcbiAqIGNhbiBwb3RlbmlhbGx5IGJlIGFkZGVkIHRvZ2V0aGVyO1xuICovXG5mdW5jdGlvbiBpc0NvbWJpbmFibGVTcGxpdCh0b2tlbml6ZWQpIHtcbiAgICBpZiAodG9rZW5pemVkLnRva2Vucy5sZW5ndGggPD0gMSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgdG9rZW5pemVkLnRva2Vucy5sZW5ndGg7ICsraSkge1xuICAgICAgICBpZiAoIXRva2VuaXplZC5mdXNhYmxlW2ldKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5leHBvcnRzLmlzQ29tYmluYWJsZVNwbGl0ID0gaXNDb21iaW5hYmxlU3BsaXQ7XG4vKipcbiAqIHJldHVybiB0cnVlIGlmZiAgcmFuZ2UgQCBpbmRleCBpcyBhIHN1aXRhYmxlIGNvbWJpbmFibGUgb3ZlcmxhcFxuICpcbiAqICh0eXBpY2FsbHkgaW4gdGhlIHBhcnNlZCByZWFsIHN0cmluZylcbiAqIHJldHVybiB0aGUgdGFyZ2V0aW5kZXggb3IgLTEgaWYgaW1wb3NzaWJsZVxuICovXG5mdW5jdGlvbiBpc0NvbWJpbmFibGVSYW5nZVJldHVybkluZGV4KHJhbmdlLCBmdXNhYmxlLCBpbmRleCkge1xuICAgIHZhciBzdGFydCA9IGluZGV4ICsgcmFuZ2UubG93O1xuICAgIHZhciBlbmQgPSBpbmRleCArIHJhbmdlLmhpZ2g7XG4gICAgLy8gZXhhbXBsZSByYW5nZSA9IC0xLCAwICAgICAgICAgICAgIGluZGV4ID0gMSAgPT4gc3RhcnQgPSAwLCBlbmQgPSAxLCB0ZXN0IGZ1c2FibGVbMV1cbiAgICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgICAgICBpZiAoIWZ1c2FibGVbaSArIDFdKSB7XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHN0YXJ0O1xufVxuZXhwb3J0cy5pc0NvbWJpbmFibGVSYW5nZVJldHVybkluZGV4ID0gaXNDb21iaW5hYmxlUmFuZ2VSZXR1cm5JbmRleDtcbmZ1bmN0aW9uIGNvbWJpbmVUb2tlbnMocmFuZ2UsIGluZGV4LCB0b2tlbnMpIHtcbiAgICB2YXIgc3RhcnQgPSBpbmRleCArIHJhbmdlLmxvdztcbiAgICB2YXIgZW5kID0gaW5kZXggKyByYW5nZS5oaWdoO1xuICAgIHZhciByZXMgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPD0gZW5kOyArK2kpIHtcbiAgICAgICAgcmVzLnB1c2godG9rZW5zW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcy5qb2luKFwiIFwiKTtcbn1cbmV4cG9ydHMuY29tYmluZVRva2VucyA9IGNvbWJpbmVUb2tlbnM7XG4vKipcbiAqXG4gKiBOb3RlOiB0aGlzIHRva2VuaXplciByZWNvZ25pemVkIC5naXRpZ29yZSBvciAuYS5iLmMgYXMgb25lIHRva2VuXG4gKiB0cmFpbGluZyAuIGlzIHN0cmlwcGVkIVxuICpAcGFyYW0ge3N0cmluZ30gc1N0cmluZyAsIGUuZy4gXCJhLGIgYztkIE8nSGFyYSBhbmQgXCJtdXJwaCd5c1wiXG4gKkByZXR1cm4ge0FycmF5PFN0cmluZz59IGJyb2tlbiBkb3duIGFycmF5LCBlLmcuXG4gKiBbW1wiYSBiIGNcIl0sIFtcImFcIiwgXCJiIGNcIl0sIFtcImEgYlwiLCBcImNcIl0sIC4uLi5bXCJhXCIsIFwiYlwiLCBcImNcIl1dXG4gKi9cbmZ1bmN0aW9uIHRva2VuaXplU3RyaW5nKHNTdHJpbmcsIHNwYWNlc0xpbWl0KSB7XG4gICAgdmFyIHJlcyA9IHtcbiAgICAgICAgdG9rZW5zOiBbXSxcbiAgICAgICAgZnVzYWJsZTogW2ZhbHNlXVxuICAgIH07XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBzZWVuU2VwID0gZmFsc2U7XG4gICAgd2hpbGUgKGkgPCBzU3RyaW5nLmxlbmd0aCkge1xuICAgICAgICBzd2l0Y2ggKHNTdHJpbmcuY2hhckF0KGkpKSB7XG4gICAgICAgICAgICBjYXNlICdcIic6XG4gICAgICAgICAgICAgICAgdmFyIF9hID0gc3dhbGxvd1F1b3RlKHNTdHJpbmcsIGkpLCB0b2tlbiA9IF9hLnRva2VuLCBuZXh0cG9zID0gX2EubmV4dHBvcztcbiAgICAgICAgICAgICAgICBpZiAobmV4dHBvcyA9PT0gaSkge1xuICAgICAgICAgICAgICAgICAgICAvLyB1bnRlcm1pbmF0ZWQgcXVvdGUsIHRyZWF0IGxpa2Ugc2VwYXJhdG9yXG4gICAgICAgICAgICAgICAgICAgIHJlcy5mdXNhYmxlW3Jlcy50b2tlbnMubGVuZ3RoXSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBzZWVuU2VwID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgKytpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0b2tlbiA9PT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICByZXMuZnVzYWJsZVtyZXMudG9rZW5zLmxlbmd0aF0gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgc2VlblNlcCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGkgPSBuZXh0cG9zO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzLmZ1c2FibGVbcmVzLnRva2Vucy5sZW5ndGhdID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHB1c2hUb2tlbihyZXMsIHRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzLmZ1c2FibGVbcmVzLnRva2Vucy5sZW5ndGhdID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGkgPSBuZXh0cG9zO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ1xcdCc6XG4gICAgICAgICAgICBjYXNlICdcXG4nOlxuICAgICAgICAgICAgY2FzZSAnXFxyJzpcbiAgICAgICAgICAgIGNhc2UgJyAnOlxuICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJzonOlxuICAgICAgICAgICAgY2FzZSAnLCc6XG4gICAgICAgICAgICBjYXNlICc/JzpcbiAgICAgICAgICAgIGNhc2UgJyEnOlxuICAgICAgICAgICAgY2FzZSAnOyc6XG4gICAgICAgICAgICAgICAgcmVzLmZ1c2FibGVbcmVzLnRva2Vucy5sZW5ndGhdID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgc2VlblNlcCA9IHRydWU7XG4gICAgICAgICAgICAgICAgKytpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnLic6XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHZhciBfYiA9IHN3YWxsb3dXb3JkKHNTdHJpbmcsIGkpLCB0b2tlbiA9IF9iLnRva2VuLCBuZXh0cG9zID0gX2IubmV4dHBvcztcbiAgICAgICAgICAgICAgICBpZiAodG9rZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgcHVzaFRva2VuKHJlcywgdG9rZW4pO1xuICAgICAgICAgICAgICAgICAgICBpID0gbmV4dHBvcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcy5mdXNhYmxlW3Jlcy50b2tlbnMubGVuZ3RoXSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJlcy5mdXNhYmxlW3Jlcy50b2tlbnMubGVuZ3RoXSA9IGZhbHNlO1xuICAgIHJldHVybiByZXM7XG59XG5leHBvcnRzLnRva2VuaXplU3RyaW5nID0gdG9rZW5pemVTdHJpbmc7XG5mdW5jdGlvbiBtYWtlTWF0Y2hQYXR0ZXJuKHN0cikge1xuICAgIHZhciB0b2tlbnMgPSB0b2tlbml6ZVN0cmluZyhzdHIpO1xuICAgIHZhciBiZXN0bGVuID0gMDtcbiAgICBpZiAoIWlzQ29tYmluYWJsZVNwbGl0KHRva2VucykpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgdmFyIGJlc3QgPSB7XG4gICAgICAgIGxvbmdlc3RUb2tlbjogXCJcIixcbiAgICAgICAgc3BhbjogeyBsb3c6IDAsIGhpZ2g6IDAgfVxuICAgIH07XG4gICAgaWYgKHRva2Vucy50b2tlbnMubGVuZ3RoID4gMSkge1xuICAgICAgICB0b2tlbnMudG9rZW5zLmZvckVhY2goZnVuY3Rpb24gKHRva2VuLCBpbmRleCkge1xuICAgICAgICAgICAgdmFyIGxlbiA9IHRva2VuLmxlbmd0aDtcbiAgICAgICAgICAgIGlmIChsZW4gPiBiZXN0bGVuKSB7XG4gICAgICAgICAgICAgICAgYmVzdGxlbiA9IGxlbjtcbiAgICAgICAgICAgICAgICBiZXN0Lmxvbmdlc3RUb2tlbiA9IHRva2VuO1xuICAgICAgICAgICAgICAgIGJlc3Quc3Bhbi5sb3cgPSAtaW5kZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBiZXN0LnNwYW4uaGlnaCA9IHRva2Vucy50b2tlbnMubGVuZ3RoICsgYmVzdC5zcGFuLmxvdyAtIDE7XG4gICAgICAgIHJldHVybiBiZXN0O1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xufVxuZXhwb3J0cy5tYWtlTWF0Y2hQYXR0ZXJuID0gbWFrZU1hdGNoUGF0dGVybjtcbi8qKlxuICpAcGFyYW0ge3N0cmluZ30gc1N0cmluZyAsIGUuZy4gXCJhIGIgY1wiXG4gKkByZXR1cm4ge0FycmF5PEFycmF5PFN0cmluZz4+fSBicm9rZW4gZG93biBhcnJheSwgZS5nLlxuICpbW1wiYSBiIGNcIl0sIFtcImFcIiwgXCJiIGNcIl0sIFtcImEgYlwiLCBcImNcIl0sIC4uLi5bXCJhXCIsIFwiYlwiLCBcImNcIl1dXG4gKi9cbmZ1bmN0aW9uIGJyZWFrZG93blN0cmluZyhzU3RyaW5nLCBzcGFjZXNMaW1pdCkge1xuICAgIHZhciByU3RyaW5nID0gY2xlYW5zZVN0cmluZyhzU3RyaW5nKTtcbiAgICBpZiAoc3BhY2VzTGltaXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBzcGFjZXNMaW1pdCA9IC0xO1xuICAgIH1cbiAgICB2YXIgdSA9IHJTdHJpbmcuc3BsaXQoXCIgXCIpO1xuICAgIHUgPSByZWNvbWJpbmVRdW90ZWQodSk7XG4gICAgdmFyIGsgPSAwO1xuICAgIGlmICh1Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gW1tdXTtcbiAgICB9XG4gICAgdmFyIHcgPSBbW3VbMF1dXTtcbiAgICB3aGlsZSAoayA8IHUubGVuZ3RoIC0gMSkge1xuICAgICAgICBrID0gayArIDE7XG4gICAgICAgIHZhciByMSA9IHcubWFwKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgICAgICAgICAgZGVidWdsb2coSlNPTi5zdHJpbmdpZnkoZW50cnkpKTtcbiAgICAgICAgICAgIHZhciBlbnRyeSA9IGVudHJ5LnNsaWNlKDApO1xuICAgICAgICAgICAgZGVidWdsb2coSlNPTi5zdHJpbmdpZnkoZW50cnkpKTtcbiAgICAgICAgICAgIHZhciBwcmV2ZW50cnkgPSBlbnRyeVtlbnRyeS5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgIC8vIGRvIG5vdCBjb21iaW5lIHF1b3RlZCBzdHJpbmdzIVxuICAgICAgICAgICAgaWYgKHByZXZlbnRyeSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaXNRdW90ZWQodVtrXSkgfHwgaXNRdW90ZWQocHJldmVudHJ5KSkge1xuICAgICAgICAgICAgICAgIGVudHJ5W2VudHJ5Lmxlbmd0aCAtIDFdID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBjb21iaW5lZCA9IHByZXZlbnRyeSArIFwiIFwiICsgdVtrXTtcbiAgICAgICAgICAgICAgICBpZiAoc3BhY2VzTGltaXQgPiAwICYmIGNvdW50U3BhY2VzKGNvbWJpbmVkKSA+IHNwYWNlc0xpbWl0KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbWJpbmVkID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZW50cnlbZW50cnkubGVuZ3RoIC0gMV0gPSBjb21iaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBlbnRyeTtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciByMiA9IHcubWFwKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgICAgICAgICAgZGVidWdsb2coXCIyID5cIiArIEpTT04uc3RyaW5naWZ5KGVudHJ5KSk7XG4gICAgICAgICAgICB2YXIgZW50cnkgPSBlbnRyeS5zbGljZSgwKTtcbiAgICAgICAgICAgIGVudHJ5LnB1c2godVtrXSk7XG4gICAgICAgICAgICByZXR1cm4gZW50cnk7XG4gICAgICAgIH0pO1xuICAgICAgICBkZWJ1Z2xvZyhKU09OLnN0cmluZ2lmeShyMSkpO1xuICAgICAgICBkZWJ1Z2xvZyhKU09OLnN0cmluZ2lmeShyMikpO1xuICAgICAgICB3ID0gcjEuY29uY2F0KHIyKTtcbiAgICB9XG4gICAgdyA9IHcuZmlsdGVyKGZ1bmN0aW9uIChvTWFwKSB7XG4gICAgICAgIHJldHVybiBvTWFwLmV2ZXJ5KGZ1bmN0aW9uIChzV29yZCkge1xuICAgICAgICAgICAgcmV0dXJuIHNXb3JkICE9PSBudWxsO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gdy5tYXAoZnVuY3Rpb24gKG9NYXApIHtcbiAgICAgICAgcmV0dXJuIG9NYXAubWFwKGZ1bmN0aW9uIChzV29yZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRyaW1RdW90ZWQoc1dvcmQpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuYnJlYWtkb3duU3RyaW5nID0gYnJlYWtkb3duU3RyaW5nO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
