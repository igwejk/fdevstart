/**
 * @file
 * @module jfseb.fdevstart.breakdown
 * @copyright (c) 2016 Gerd Forstmann
 */
"use strict";

var debug = require('debug');
var debuglog = debug('dispatcher');
function cleanseString(sString) {
    var len = 0;
    while (len !== sString.length) {
        len = sString.length;
        sString = sString.replace(/\s\s+/g, ' ');
        sString = sString.replace(/\s\s+/g, ' ');
        sString = sString.replace(/^\s+/, '');
        sString = sString.replace(/\s+$/, '');
    }
    return sString;
}
exports.cleanseString = cleanseString;
var regexpRemoveDouble = new RegExp(/^\"(\".*\")\"$/);
var striptail = new RegExp(/^\"([^\"]+)"$/);
function trimQuoted(sString) {
    var skipUntil = 0;
    var stripped = sString;
    var m = regexpRemoveDouble.exec(sString);
    while (m) {
        stripped = m[1];
        m = regexpRemoveDouble.exec(stripped);
    }
    debuglog("stripped " + stripped);
    m = striptail.exec(stripped);
    if (m) {
        return m[1];
    }
    return sString;
}
exports.trimQuoted = trimQuoted;
function trimQuotedSpaced(sString) {
    var skipUntil = 0;
    sString = sString.replace(/^"\s+/g, '"');
    sString = sString.replace(/\s+\"$/g, '"');
    return sString;
}
exports.trimQuotedSpaced = trimQuotedSpaced;
function recombineQuoted(aArr) {
    var skipUntil = 0;
    aArr = aArr.map(function (s, index) {
        if (index < skipUntil) {
            debuglog("skipping >" + s + "<");
            return undefined;
        }
        if (/^"/.exec(s)) {
            var i = index;
            while (i < aArr.length && (!/"$/.exec(aArr[i]) || index === i && s === '"')) {
                i = i + 1;
            }
            if (i === aArr.length) {
                debuglog("Unterminated quoted string");
                return s;
            } else {
                skipUntil = i + 1;
                var res = aArr.slice(index, i + 1).join(" ");
            }
            return res;
        }
        return s;
    }).filter(function (s) {
        return s !== undefined;
    }).map(function (s) {
        return trimQuotedSpaced(s);
    });
    return aArr;
}
exports.recombineQuoted = recombineQuoted;
function isQuoted(sString) {
    return !!/^".*"$/.exec(sString);
}
exports.isQuoted = isQuoted;
function countSpaces(sString) {
    var r = 0;
    for (var i = 0; i < sString.length; ++i) {
        if (sString.charAt(i) === ' ') {
            r = r + 1;
        }
    }
    return r;
}
exports.countSpaces = countSpaces;
/**
 *@param {string} sString , e.g. "a b c"
 *@return {Array<Array<String>>} broken down array, e.g.
 *[["a b c"], ["a", "b c"], ["a b", "c"], ....["a", "b", "c"]]
 */
function breakdownString(sString, spacesLimit) {
    var rString = cleanseString(sString);
    if (spacesLimit === undefined) {
        spacesLimit = -1;
    }
    var u = rString.split(" ");
    u = recombineQuoted(u);
    var k = 0;
    if (u.length === 0) {
        return [[]];
    }
    var w = [[u[0]]];
    while (k < u.length - 1) {
        k = k + 1;
        var r1 = w.map(function (entry) {
            debuglog(JSON.stringify(entry));
            var entry = entry.slice(0);
            debuglog(JSON.stringify(entry));
            var preventry = entry[entry.length - 1];
            // do not combine quoted strings!
            if (preventry === null) {} else if (isQuoted(u[k]) || isQuoted(preventry)) {
                entry[entry.length - 1] = null;
            } else {
                var combined = preventry + " " + u[k];
                if (spacesLimit > 0 && countSpaces(combined) > spacesLimit) {
                    combined = null;
                }
                entry[entry.length - 1] = combined;
            }
            return entry;
        });
        var r2 = w.map(function (entry) {
            debuglog("2 >" + JSON.stringify(entry));
            var entry = entry.slice(0);
            entry.push(u[k]);
            return entry;
        });
        debuglog(JSON.stringify(r1));
        debuglog(JSON.stringify(r2));
        w = r1.concat(r2);
    }
    w = w.filter(function (oMap) {
        return oMap.every(function (sWord) {
            return sWord !== null;
        });
    });
    return w.map(function (oMap) {
        return oMap.map(function (sWord) {
            return trimQuoted(sWord);
        });
    });
}
exports.breakdownString = breakdownString;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tYXRjaC9icmVha2Rvd24udHMiLCJtYXRjaC9icmVha2Rvd24uanMiXSwibmFtZXMiOlsiZGVidWciLCJyZXF1aXJlIiwiZGVidWdsb2ciLCJjbGVhbnNlU3RyaW5nIiwic1N0cmluZyIsImxlbiIsImxlbmd0aCIsInJlcGxhY2UiLCJleHBvcnRzIiwicmVnZXhwUmVtb3ZlRG91YmxlIiwiUmVnRXhwIiwic3RyaXB0YWlsIiwidHJpbVF1b3RlZCIsInNraXBVbnRpbCIsInN0cmlwcGVkIiwibSIsImV4ZWMiLCJ0cmltUXVvdGVkU3BhY2VkIiwicmVjb21iaW5lUXVvdGVkIiwiYUFyciIsIm1hcCIsInMiLCJpbmRleCIsInVuZGVmaW5lZCIsImkiLCJyZXMiLCJzbGljZSIsImpvaW4iLCJmaWx0ZXIiLCJpc1F1b3RlZCIsImNvdW50U3BhY2VzIiwiciIsImNoYXJBdCIsImJyZWFrZG93blN0cmluZyIsInNwYWNlc0xpbWl0IiwiclN0cmluZyIsInUiLCJzcGxpdCIsImsiLCJ3IiwicjEiLCJlbnRyeSIsIkpTT04iLCJzdHJpbmdpZnkiLCJwcmV2ZW50cnkiLCJjb21iaW5lZCIsInIyIiwicHVzaCIsImNvbmNhdCIsIm9NYXAiLCJldmVyeSIsInNXb3JkIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7QUNLQTs7QURDQSxJQUFZQSxRQUFLQyxRQUFNLE9BQU4sQ0FBakI7QUFDQSxJQUFNQyxXQUFXRixNQUFNLFlBQU4sQ0FBakI7QUFHQSxTQUFBRyxhQUFBLENBQThCQyxPQUE5QixFQUE2QztBQUN6QyxRQUFJQyxNQUFNLENBQVY7QUFDQSxXQUFPQSxRQUFRRCxRQUFRRSxNQUF2QixFQUErQjtBQUMzQkQsY0FBTUQsUUFBUUUsTUFBZDtBQUNBRixrQkFBVUEsUUFBUUcsT0FBUixDQUFnQixRQUFoQixFQUEwQixHQUExQixDQUFWO0FBQ0FILGtCQUFVQSxRQUFRRyxPQUFSLENBQWdCLFFBQWhCLEVBQTBCLEdBQTFCLENBQVY7QUFDQUgsa0JBQVVBLFFBQVFHLE9BQVIsQ0FBZ0IsTUFBaEIsRUFBd0IsRUFBeEIsQ0FBVjtBQUNBSCxrQkFBVUEsUUFBUUcsT0FBUixDQUFnQixNQUFoQixFQUF3QixFQUF4QixDQUFWO0FBQ0g7QUFDRCxXQUFPSCxPQUFQO0FBQ0g7QUFWZUksUUFBQUwsYUFBQSxHQUFhQSxhQUFiO0FBYWhCLElBQU1NLHFCQUFxQixJQUFJQyxNQUFKLENBQVcsZ0JBQVgsQ0FBM0I7QUFDQSxJQUFNQyxZQUFZLElBQUlELE1BQUosQ0FBVyxlQUFYLENBQWxCO0FBRUEsU0FBQUUsVUFBQSxDQUEyQlIsT0FBM0IsRUFBMEM7QUFDdEMsUUFBSVMsWUFBWSxDQUFoQjtBQUNBLFFBQUlDLFdBQVdWLE9BQWY7QUFDQSxRQUFJVyxJQUFJTixtQkFBbUJPLElBQW5CLENBQXdCWixPQUF4QixDQUFSO0FBQ0EsV0FBT1csQ0FBUCxFQUFVO0FBQ05ELG1CQUFXQyxFQUFFLENBQUYsQ0FBWDtBQUNBQSxZQUFJTixtQkFBbUJPLElBQW5CLENBQXdCRixRQUF4QixDQUFKO0FBQ0g7QUFDRFosYUFBUyxjQUFjWSxRQUF2QjtBQUNBQyxRQUFJSixVQUFVSyxJQUFWLENBQWVGLFFBQWYsQ0FBSjtBQUNBLFFBQUlDLENBQUosRUFBTztBQUNILGVBQU9BLEVBQUUsQ0FBRixDQUFQO0FBQ0g7QUFDRCxXQUFPWCxPQUFQO0FBQ0g7QUFkZUksUUFBQUksVUFBQSxHQUFVQSxVQUFWO0FBaUJoQixTQUFBSyxnQkFBQSxDQUFpQ2IsT0FBakMsRUFBZ0Q7QUFDNUMsUUFBSVMsWUFBWSxDQUFoQjtBQUNBVCxjQUFVQSxRQUFRRyxPQUFSLENBQWdCLFFBQWhCLEVBQTBCLEdBQTFCLENBQVY7QUFDQUgsY0FBVUEsUUFBUUcsT0FBUixDQUFnQixTQUFoQixFQUEyQixHQUEzQixDQUFWO0FBQ0EsV0FBT0gsT0FBUDtBQUNIO0FBTGVJLFFBQUFTLGdCQUFBLEdBQWdCQSxnQkFBaEI7QUFRaEIsU0FBQUMsZUFBQSxDQUFnQ0MsSUFBaEMsRUFBbUQ7QUFDL0MsUUFBSU4sWUFBWSxDQUFoQjtBQUNBTSxXQUFPQSxLQUFLQyxHQUFMLENBQVMsVUFBVUMsQ0FBVixFQUFhQyxLQUFiLEVBQWtCO0FBQzlCLFlBQUlBLFFBQVFULFNBQVosRUFBdUI7QUFDbkJYLHFCQUFTLGVBQWVtQixDQUFmLEdBQW1CLEdBQTVCO0FBQ0EsbUJBQU9FLFNBQVA7QUFDSDtBQUNELFlBQUksS0FBS1AsSUFBTCxDQUFVSyxDQUFWLENBQUosRUFBa0I7QUFDZCxnQkFBSUcsSUFBSUYsS0FBUjtBQUNBLG1CQUFPRSxJQUFJTCxLQUFLYixNQUFULEtBQW9CLENBQUMsS0FBS1UsSUFBTCxDQUFVRyxLQUFLSyxDQUFMLENBQVYsQ0FBRCxJQUF3QkYsVUFBVUUsQ0FBVixJQUFlSCxNQUFNLEdBQWpFLENBQVAsRUFBK0U7QUFDM0VHLG9CQUFJQSxJQUFJLENBQVI7QUFDSDtBQUNELGdCQUFJQSxNQUFNTCxLQUFLYixNQUFmLEVBQXVCO0FBQ25CSix5QkFBUyw0QkFBVDtBQUNBLHVCQUFPbUIsQ0FBUDtBQUNILGFBSEQsTUFHTztBQUNIUiw0QkFBWVcsSUFBSSxDQUFoQjtBQUNBLG9CQUFJQyxNQUFNTixLQUFLTyxLQUFMLENBQVdKLEtBQVgsRUFBa0JFLElBQUksQ0FBdEIsRUFBeUJHLElBQXpCLENBQThCLEdBQTlCLENBQVY7QUFDSDtBQUNELG1CQUFPRixHQUFQO0FBQ0g7QUFDRCxlQUFPSixDQUFQO0FBQ0gsS0FwQk0sRUFvQkpPLE1BcEJJLENBb0JHLFVBQVVQLENBQVYsRUFBVztBQUNqQixlQUFPQSxNQUFNRSxTQUFiO0FBQ0gsS0F0Qk0sRUFzQkpILEdBdEJJLENBc0JBLFVBQVVDLENBQVYsRUFBVztBQUNkLGVBQU9KLGlCQUFpQkksQ0FBakIsQ0FBUDtBQUNILEtBeEJNLENBQVA7QUF5QkEsV0FBT0YsSUFBUDtBQUNIO0FBNUJlWCxRQUFBVSxlQUFBLEdBQWVBLGVBQWY7QUE4QmhCLFNBQUFXLFFBQUEsQ0FBeUJ6QixPQUF6QixFQUFnQztBQUM1QixXQUFPLENBQUMsQ0FBQyxTQUFTWSxJQUFULENBQWNaLE9BQWQsQ0FBVDtBQUNIO0FBRmVJLFFBQUFxQixRQUFBLEdBQVFBLFFBQVI7QUFJaEIsU0FBQUMsV0FBQSxDQUE0QjFCLE9BQTVCLEVBQTJDO0FBQ3ZDLFFBQUkyQixJQUFJLENBQVI7QUFDQSxTQUFLLElBQUlQLElBQUksQ0FBYixFQUFnQkEsSUFBSXBCLFFBQVFFLE1BQTVCLEVBQW9DLEVBQUVrQixDQUF0QyxFQUF5QztBQUNyQyxZQUFJcEIsUUFBUTRCLE1BQVIsQ0FBZVIsQ0FBZixNQUFzQixHQUExQixFQUErQjtBQUMzQk8sZ0JBQUlBLElBQUksQ0FBUjtBQUNIO0FBQ0o7QUFDRCxXQUFPQSxDQUFQO0FBQ0g7QUFSZXZCLFFBQUFzQixXQUFBLEdBQVdBLFdBQVg7QUFXaEI7Ozs7O0FBS0EsU0FBQUcsZUFBQSxDQUFnQzdCLE9BQWhDLEVBQWlEOEIsV0FBakQsRUFBcUU7QUFDakUsUUFBSUMsVUFBVWhDLGNBQWNDLE9BQWQsQ0FBZDtBQUNBLFFBQUk4QixnQkFBZ0JYLFNBQXBCLEVBQStCO0FBQzNCVyxzQkFBYyxDQUFDLENBQWY7QUFDSDtBQUNELFFBQUlFLElBQUlELFFBQVFFLEtBQVIsQ0FBYyxHQUFkLENBQVI7QUFDQUQsUUFBSWxCLGdCQUFnQmtCLENBQWhCLENBQUo7QUFDQSxRQUFJRSxJQUFJLENBQVI7QUFDQSxRQUFJRixFQUFFOUIsTUFBRixLQUFhLENBQWpCLEVBQW9CO0FBQ2hCLGVBQU8sQ0FBQyxFQUFELENBQVA7QUFDSDtBQUNELFFBQUlpQyxJQUFJLENBQUMsQ0FBQ0gsRUFBRSxDQUFGLENBQUQsQ0FBRCxDQUFSO0FBQ0EsV0FBT0UsSUFBSUYsRUFBRTlCLE1BQUYsR0FBVyxDQUF0QixFQUF5QjtBQUNyQmdDLFlBQUlBLElBQUksQ0FBUjtBQUNBLFlBQUlFLEtBQUtELEVBQUVuQixHQUFGLENBQU0sVUFBVXFCLEtBQVYsRUFBZTtBQUMxQnZDLHFCQUFTd0MsS0FBS0MsU0FBTCxDQUFlRixLQUFmLENBQVQ7QUFDQSxnQkFBSUEsUUFBUUEsTUFBTWYsS0FBTixDQUFZLENBQVosQ0FBWjtBQUNBeEIscUJBQVN3QyxLQUFLQyxTQUFMLENBQWVGLEtBQWYsQ0FBVDtBQUNBLGdCQUFJRyxZQUFZSCxNQUFNQSxNQUFNbkMsTUFBTixHQUFjLENBQXBCLENBQWhCO0FBQ0E7QUFDQSxnQkFBSXNDLGNBQWMsSUFBbEIsRUFBd0IsQ0FFdkIsQ0FGRCxNQUVPLElBQUlmLFNBQVNPLEVBQUVFLENBQUYsQ0FBVCxLQUFrQlQsU0FBU2UsU0FBVCxDQUF0QixFQUEyQztBQUM5Q0gsc0JBQU1BLE1BQU1uQyxNQUFOLEdBQWUsQ0FBckIsSUFBMEIsSUFBMUI7QUFDSCxhQUZNLE1BRUE7QUFDSCxvQkFBSXVDLFdBQVdELFlBQVksR0FBWixHQUFrQlIsRUFBRUUsQ0FBRixDQUFqQztBQUNBLG9CQUFJSixjQUFjLENBQWQsSUFBbUJKLFlBQVllLFFBQVosSUFBd0JYLFdBQS9DLEVBQTREO0FBQ3hEVywrQkFBVyxJQUFYO0FBQ0g7QUFDREosc0JBQU1BLE1BQU1uQyxNQUFOLEdBQWUsQ0FBckIsSUFBMEJ1QyxRQUExQjtBQUNIO0FBQ0QsbUJBQU9KLEtBQVA7QUFDSCxTQWxCUSxDQUFUO0FBbUJBLFlBQUlLLEtBQUtQLEVBQUVuQixHQUFGLENBQU0sVUFBVXFCLEtBQVYsRUFBZTtBQUMxQnZDLHFCQUFTLFFBQVF3QyxLQUFLQyxTQUFMLENBQWVGLEtBQWYsQ0FBakI7QUFDQSxnQkFBSUEsUUFBUUEsTUFBTWYsS0FBTixDQUFZLENBQVosQ0FBWjtBQUNBZSxrQkFBTU0sSUFBTixDQUFXWCxFQUFFRSxDQUFGLENBQVg7QUFDQSxtQkFBT0csS0FBUDtBQUNILFNBTFEsQ0FBVDtBQU1BdkMsaUJBQVN3QyxLQUFLQyxTQUFMLENBQWVILEVBQWYsQ0FBVDtBQUNBdEMsaUJBQVN3QyxLQUFLQyxTQUFMLENBQWVHLEVBQWYsQ0FBVDtBQUNBUCxZQUFJQyxHQUFHUSxNQUFILENBQVVGLEVBQVYsQ0FBSjtBQUNIO0FBQ0RQLFFBQUlBLEVBQUVYLE1BQUYsQ0FBUyxVQUFTcUIsSUFBVCxFQUFhO0FBQ3RCLGVBQU9BLEtBQUtDLEtBQUwsQ0FBVyxVQUFTQyxLQUFULEVBQWM7QUFDNUIsbUJBQU9BLFVBQVUsSUFBakI7QUFDSCxTQUZNLENBQVA7QUFHSCxLQUpHLENBQUo7QUFLQSxXQUFPWixFQUFFbkIsR0FBRixDQUFNLFVBQVU2QixJQUFWLEVBQWM7QUFDdkIsZUFBT0EsS0FBSzdCLEdBQUwsQ0FBUyxVQUFVK0IsS0FBVixFQUFlO0FBQzNCLG1CQUFPdkMsV0FBV3VDLEtBQVgsQ0FBUDtBQUNILFNBRk0sQ0FBUDtBQUdILEtBSk0sQ0FBUDtBQUtIO0FBckRlM0MsUUFBQXlCLGVBQUEsR0FBZUEsZUFBZiIsImZpbGUiOiJtYXRjaC9icmVha2Rvd24uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQGZpbGVcclxuICogQG1vZHVsZSBqZnNlYi5mZGV2c3RhcnQuYnJlYWtkb3duXHJcbiAqIEBjb3B5cmlnaHQgKGMpIDIwMTYgR2VyZCBGb3JzdG1hbm5cclxuICovXHJcblxyXG5pbXBvcnQgKiBhcyBkZWJ1ZyBmcm9tICdkZWJ1Zyc7XHJcbmNvbnN0IGRlYnVnbG9nID0gZGVidWcoJ2Rpc3BhdGNoZXInKVxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjbGVhbnNlU3RyaW5nKHNTdHJpbmc6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICB2YXIgbGVuID0gMDtcclxuICAgIHdoaWxlIChsZW4gIT09IHNTdHJpbmcubGVuZ3RoKSB7XHJcbiAgICAgICAgbGVuID0gc1N0cmluZy5sZW5ndGg7XHJcbiAgICAgICAgc1N0cmluZyA9IHNTdHJpbmcucmVwbGFjZSgvXFxzXFxzKy9nLCAnICcpO1xyXG4gICAgICAgIHNTdHJpbmcgPSBzU3RyaW5nLnJlcGxhY2UoL1xcc1xccysvZywgJyAnKTtcclxuICAgICAgICBzU3RyaW5nID0gc1N0cmluZy5yZXBsYWNlKC9eXFxzKy8sICcnKTtcclxuICAgICAgICBzU3RyaW5nID0gc1N0cmluZy5yZXBsYWNlKC9cXHMrJC8sICcnKTtcclxuICAgIH1cclxuICAgIHJldHVybiBzU3RyaW5nXHJcbn1cclxuXHJcblxyXG5jb25zdCByZWdleHBSZW1vdmVEb3VibGUgPSBuZXcgUmVnRXhwKC9eXFxcIihcXFwiLipcXFwiKVxcXCIkLyk7XHJcbmNvbnN0IHN0cmlwdGFpbCA9IG5ldyBSZWdFeHAoL15cXFwiKFteXFxcIl0rKVwiJC8pXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdHJpbVF1b3RlZChzU3RyaW5nOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgdmFyIHNraXBVbnRpbCA9IDA7XHJcbiAgICB2YXIgc3RyaXBwZWQgPSBzU3RyaW5nO1xyXG4gICAgdmFyIG0gPSByZWdleHBSZW1vdmVEb3VibGUuZXhlYyhzU3RyaW5nKTtcclxuICAgIHdoaWxlIChtKSB7XHJcbiAgICAgICAgc3RyaXBwZWQgPSBtWzFdO1xyXG4gICAgICAgIG0gPSByZWdleHBSZW1vdmVEb3VibGUuZXhlYyhzdHJpcHBlZCk7XHJcbiAgICB9XHJcbiAgICBkZWJ1Z2xvZyhcInN0cmlwcGVkIFwiICsgc3RyaXBwZWQpO1xyXG4gICAgbSA9IHN0cmlwdGFpbC5leGVjKHN0cmlwcGVkKTtcclxuICAgIGlmIChtKSB7XHJcbiAgICAgICAgcmV0dXJuIG1bMV07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gc1N0cmluZztcclxufVxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB0cmltUXVvdGVkU3BhY2VkKHNTdHJpbmc6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICB2YXIgc2tpcFVudGlsID0gMDtcclxuICAgIHNTdHJpbmcgPSBzU3RyaW5nLnJlcGxhY2UoL15cIlxccysvZywgJ1wiJyk7XHJcbiAgICBzU3RyaW5nID0gc1N0cmluZy5yZXBsYWNlKC9cXHMrXFxcIiQvZywgJ1wiJyk7XHJcbiAgICByZXR1cm4gc1N0cmluZztcclxufVxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZWNvbWJpbmVRdW90ZWQoYUFycjogQXJyYXk8c3RyaW5nPik6IEFycmF5PHN0cmluZz4ge1xyXG4gICAgdmFyIHNraXBVbnRpbCA9IDA7XHJcbiAgICBhQXJyID0gYUFyci5tYXAoZnVuY3Rpb24gKHMsIGluZGV4KSB7XHJcbiAgICAgICAgaWYgKGluZGV4IDwgc2tpcFVudGlsKSB7XHJcbiAgICAgICAgICAgIGRlYnVnbG9nKFwic2tpcHBpbmcgPlwiICsgcyArIFwiPFwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKC9eXCIvLmV4ZWMocykpIHtcclxuICAgICAgICAgICAgdmFyIGkgPSBpbmRleDtcclxuICAgICAgICAgICAgd2hpbGUgKGkgPCBhQXJyLmxlbmd0aCAmJiAoIS9cIiQvLmV4ZWMoYUFycltpXSkgfHwgKGluZGV4ID09PSBpICYmIHMgPT09ICdcIicpKSkge1xyXG4gICAgICAgICAgICAgICAgaSA9IGkgKyAxO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChpID09PSBhQXJyLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgZGVidWdsb2coXCJVbnRlcm1pbmF0ZWQgcXVvdGVkIHN0cmluZ1wiKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgc2tpcFVudGlsID0gaSArIDE7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVzID0gYUFyci5zbGljZShpbmRleCwgaSArIDEpLmpvaW4oXCIgXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzO1xyXG4gICAgfSkuZmlsdGVyKGZ1bmN0aW9uIChzKSB7XHJcbiAgICAgICAgcmV0dXJuIHMgIT09IHVuZGVmaW5lZDtcclxuICAgIH0pLm1hcChmdW5jdGlvbiAocykge1xyXG4gICAgICAgIHJldHVybiB0cmltUXVvdGVkU3BhY2VkKHMpO1xyXG4gICAgfSlcclxuICAgIHJldHVybiBhQXJyO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNRdW90ZWQoc1N0cmluZykge1xyXG4gICAgcmV0dXJuICEhL15cIi4qXCIkLy5leGVjKHNTdHJpbmcpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY291bnRTcGFjZXMoc1N0cmluZzogc3RyaW5nKSB7XHJcbiAgICB2YXIgciA9IDA7XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNTdHJpbmcubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICBpZiAoc1N0cmluZy5jaGFyQXQoaSkgPT09ICcgJykge1xyXG4gICAgICAgICAgICByID0gciArIDE7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHI7XHJcbn1cclxuXHJcblxyXG4vKipcclxuICpAcGFyYW0ge3N0cmluZ30gc1N0cmluZyAsIGUuZy4gXCJhIGIgY1wiXHJcbiAqQHJldHVybiB7QXJyYXk8QXJyYXk8U3RyaW5nPj59IGJyb2tlbiBkb3duIGFycmF5LCBlLmcuXHJcbiAqW1tcImEgYiBjXCJdLCBbXCJhXCIsIFwiYiBjXCJdLCBbXCJhIGJcIiwgXCJjXCJdLCAuLi4uW1wiYVwiLCBcImJcIiwgXCJjXCJdXVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGJyZWFrZG93blN0cmluZyhzU3RyaW5nOiBzdHJpbmcsIHNwYWNlc0xpbWl0PzogbnVtYmVyKTogQXJyYXk8QXJyYXk8U3RyaW5nPj4ge1xyXG4gICAgdmFyIHJTdHJpbmcgPSBjbGVhbnNlU3RyaW5nKHNTdHJpbmcpO1xyXG4gICAgaWYgKHNwYWNlc0xpbWl0ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBzcGFjZXNMaW1pdCA9IC0xO1xyXG4gICAgfVxyXG4gICAgdmFyIHUgPSByU3RyaW5nLnNwbGl0KFwiIFwiKTtcclxuICAgIHUgPSByZWNvbWJpbmVRdW90ZWQodSk7XHJcbiAgICB2YXIgayA9IDA7XHJcbiAgICBpZiAodS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICByZXR1cm4gW1tdXTtcclxuICAgIH1cclxuICAgIHZhciB3ID0gW1t1WzBdXV07XHJcbiAgICB3aGlsZSAoayA8IHUubGVuZ3RoIC0gMSkge1xyXG4gICAgICAgIGsgPSBrICsgMTtcclxuICAgICAgICB2YXIgcjEgPSB3Lm1hcChmdW5jdGlvbiAoZW50cnkpIHtcclxuICAgICAgICAgICAgZGVidWdsb2coSlNPTi5zdHJpbmdpZnkoZW50cnkpKTtcclxuICAgICAgICAgICAgdmFyIGVudHJ5ID0gZW50cnkuc2xpY2UoMCk7XHJcbiAgICAgICAgICAgIGRlYnVnbG9nKEpTT04uc3RyaW5naWZ5KGVudHJ5KSk7XHJcbiAgICAgICAgICAgIHZhciBwcmV2ZW50cnkgPSBlbnRyeVtlbnRyeS5sZW5ndGggLTFdO1xyXG4gICAgICAgICAgICAvLyBkbyBub3QgY29tYmluZSBxdW90ZWQgc3RyaW5ncyFcclxuICAgICAgICAgICAgaWYgKHByZXZlbnRyeSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgLyogZG8gbm90aGluZyAqLyAvL3JldHVybiBlbnRyeTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChpc1F1b3RlZCh1W2tdKSB8fCBpc1F1b3RlZChwcmV2ZW50cnkpKSB7XHJcbiAgICAgICAgICAgICAgICBlbnRyeVtlbnRyeS5sZW5ndGggLSAxXSA9IG51bGw7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgY29tYmluZWQgPSBwcmV2ZW50cnkgKyBcIiBcIiArIHVba107XHJcbiAgICAgICAgICAgICAgICBpZiAoc3BhY2VzTGltaXQgPiAwICYmIGNvdW50U3BhY2VzKGNvbWJpbmVkKSA+IHNwYWNlc0xpbWl0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29tYmluZWQgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZW50cnlbZW50cnkubGVuZ3RoIC0gMV0gPSBjb21iaW5lZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZW50cnk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdmFyIHIyID0gdy5tYXAoZnVuY3Rpb24gKGVudHJ5KSB7XHJcbiAgICAgICAgICAgIGRlYnVnbG9nKFwiMiA+XCIgKyBKU09OLnN0cmluZ2lmeShlbnRyeSkpO1xyXG4gICAgICAgICAgICB2YXIgZW50cnkgPSBlbnRyeS5zbGljZSgwKTtcclxuICAgICAgICAgICAgZW50cnkucHVzaCh1W2tdKTtcclxuICAgICAgICAgICAgcmV0dXJuIGVudHJ5XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgZGVidWdsb2coSlNPTi5zdHJpbmdpZnkocjEpKTtcclxuICAgICAgICBkZWJ1Z2xvZyhKU09OLnN0cmluZ2lmeShyMikpO1xyXG4gICAgICAgIHcgPSByMS5jb25jYXQocjIpO1xyXG4gICAgfVxyXG4gICAgdyA9IHcuZmlsdGVyKGZ1bmN0aW9uKG9NYXApIHtcclxuICAgICAgICByZXR1cm4gb01hcC5ldmVyeShmdW5jdGlvbihzV29yZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gc1dvcmQgIT09IG51bGw7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiB3Lm1hcChmdW5jdGlvbiAob01hcCkge1xyXG4gICAgICAgIHJldHVybiBvTWFwLm1hcChmdW5jdGlvbiAoc1dvcmQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRyaW1RdW90ZWQoc1dvcmQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmltcG9ydCAqIGFzIElNYXRjaCBmcm9tICcuL2lmbWF0Y2gnXHJcblxyXG4iLCIvKipcbiAqIEBmaWxlXG4gKiBAbW9kdWxlIGpmc2ViLmZkZXZzdGFydC5icmVha2Rvd25cbiAqIEBjb3B5cmlnaHQgKGMpIDIwMTYgR2VyZCBGb3JzdG1hbm5cbiAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpO1xudmFyIGRlYnVnbG9nID0gZGVidWcoJ2Rpc3BhdGNoZXInKTtcbmZ1bmN0aW9uIGNsZWFuc2VTdHJpbmcoc1N0cmluZykge1xuICAgIHZhciBsZW4gPSAwO1xuICAgIHdoaWxlIChsZW4gIT09IHNTdHJpbmcubGVuZ3RoKSB7XG4gICAgICAgIGxlbiA9IHNTdHJpbmcubGVuZ3RoO1xuICAgICAgICBzU3RyaW5nID0gc1N0cmluZy5yZXBsYWNlKC9cXHNcXHMrL2csICcgJyk7XG4gICAgICAgIHNTdHJpbmcgPSBzU3RyaW5nLnJlcGxhY2UoL1xcc1xccysvZywgJyAnKTtcbiAgICAgICAgc1N0cmluZyA9IHNTdHJpbmcucmVwbGFjZSgvXlxccysvLCAnJyk7XG4gICAgICAgIHNTdHJpbmcgPSBzU3RyaW5nLnJlcGxhY2UoL1xccyskLywgJycpO1xuICAgIH1cbiAgICByZXR1cm4gc1N0cmluZztcbn1cbmV4cG9ydHMuY2xlYW5zZVN0cmluZyA9IGNsZWFuc2VTdHJpbmc7XG52YXIgcmVnZXhwUmVtb3ZlRG91YmxlID0gbmV3IFJlZ0V4cCgvXlxcXCIoXFxcIi4qXFxcIilcXFwiJC8pO1xudmFyIHN0cmlwdGFpbCA9IG5ldyBSZWdFeHAoL15cXFwiKFteXFxcIl0rKVwiJC8pO1xuZnVuY3Rpb24gdHJpbVF1b3RlZChzU3RyaW5nKSB7XG4gICAgdmFyIHNraXBVbnRpbCA9IDA7XG4gICAgdmFyIHN0cmlwcGVkID0gc1N0cmluZztcbiAgICB2YXIgbSA9IHJlZ2V4cFJlbW92ZURvdWJsZS5leGVjKHNTdHJpbmcpO1xuICAgIHdoaWxlIChtKSB7XG4gICAgICAgIHN0cmlwcGVkID0gbVsxXTtcbiAgICAgICAgbSA9IHJlZ2V4cFJlbW92ZURvdWJsZS5leGVjKHN0cmlwcGVkKTtcbiAgICB9XG4gICAgZGVidWdsb2coXCJzdHJpcHBlZCBcIiArIHN0cmlwcGVkKTtcbiAgICBtID0gc3RyaXB0YWlsLmV4ZWMoc3RyaXBwZWQpO1xuICAgIGlmIChtKSB7XG4gICAgICAgIHJldHVybiBtWzFdO1xuICAgIH1cbiAgICByZXR1cm4gc1N0cmluZztcbn1cbmV4cG9ydHMudHJpbVF1b3RlZCA9IHRyaW1RdW90ZWQ7XG5mdW5jdGlvbiB0cmltUXVvdGVkU3BhY2VkKHNTdHJpbmcpIHtcbiAgICB2YXIgc2tpcFVudGlsID0gMDtcbiAgICBzU3RyaW5nID0gc1N0cmluZy5yZXBsYWNlKC9eXCJcXHMrL2csICdcIicpO1xuICAgIHNTdHJpbmcgPSBzU3RyaW5nLnJlcGxhY2UoL1xccytcXFwiJC9nLCAnXCInKTtcbiAgICByZXR1cm4gc1N0cmluZztcbn1cbmV4cG9ydHMudHJpbVF1b3RlZFNwYWNlZCA9IHRyaW1RdW90ZWRTcGFjZWQ7XG5mdW5jdGlvbiByZWNvbWJpbmVRdW90ZWQoYUFycikge1xuICAgIHZhciBza2lwVW50aWwgPSAwO1xuICAgIGFBcnIgPSBhQXJyLm1hcChmdW5jdGlvbiAocywgaW5kZXgpIHtcbiAgICAgICAgaWYgKGluZGV4IDwgc2tpcFVudGlsKSB7XG4gICAgICAgICAgICBkZWJ1Z2xvZyhcInNraXBwaW5nID5cIiArIHMgKyBcIjxcIik7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGlmICgvXlwiLy5leGVjKHMpKSB7XG4gICAgICAgICAgICB2YXIgaSA9IGluZGV4O1xuICAgICAgICAgICAgd2hpbGUgKGkgPCBhQXJyLmxlbmd0aCAmJiAoIS9cIiQvLmV4ZWMoYUFycltpXSkgfHwgKGluZGV4ID09PSBpICYmIHMgPT09ICdcIicpKSkge1xuICAgICAgICAgICAgICAgIGkgPSBpICsgMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpID09PSBhQXJyLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGRlYnVnbG9nKFwiVW50ZXJtaW5hdGVkIHF1b3RlZCBzdHJpbmdcIik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBza2lwVW50aWwgPSBpICsgMTtcbiAgICAgICAgICAgICAgICB2YXIgcmVzID0gYUFyci5zbGljZShpbmRleCwgaSArIDEpLmpvaW4oXCIgXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcztcbiAgICB9KS5maWx0ZXIoZnVuY3Rpb24gKHMpIHtcbiAgICAgICAgcmV0dXJuIHMgIT09IHVuZGVmaW5lZDtcbiAgICB9KS5tYXAoZnVuY3Rpb24gKHMpIHtcbiAgICAgICAgcmV0dXJuIHRyaW1RdW90ZWRTcGFjZWQocyk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGFBcnI7XG59XG5leHBvcnRzLnJlY29tYmluZVF1b3RlZCA9IHJlY29tYmluZVF1b3RlZDtcbmZ1bmN0aW9uIGlzUXVvdGVkKHNTdHJpbmcpIHtcbiAgICByZXR1cm4gISEvXlwiLipcIiQvLmV4ZWMoc1N0cmluZyk7XG59XG5leHBvcnRzLmlzUXVvdGVkID0gaXNRdW90ZWQ7XG5mdW5jdGlvbiBjb3VudFNwYWNlcyhzU3RyaW5nKSB7XG4gICAgdmFyIHIgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc1N0cmluZy5sZW5ndGg7ICsraSkge1xuICAgICAgICBpZiAoc1N0cmluZy5jaGFyQXQoaSkgPT09ICcgJykge1xuICAgICAgICAgICAgciA9IHIgKyAxO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByO1xufVxuZXhwb3J0cy5jb3VudFNwYWNlcyA9IGNvdW50U3BhY2VzO1xuLyoqXG4gKkBwYXJhbSB7c3RyaW5nfSBzU3RyaW5nICwgZS5nLiBcImEgYiBjXCJcbiAqQHJldHVybiB7QXJyYXk8QXJyYXk8U3RyaW5nPj59IGJyb2tlbiBkb3duIGFycmF5LCBlLmcuXG4gKltbXCJhIGIgY1wiXSwgW1wiYVwiLCBcImIgY1wiXSwgW1wiYSBiXCIsIFwiY1wiXSwgLi4uLltcImFcIiwgXCJiXCIsIFwiY1wiXV1cbiAqL1xuZnVuY3Rpb24gYnJlYWtkb3duU3RyaW5nKHNTdHJpbmcsIHNwYWNlc0xpbWl0KSB7XG4gICAgdmFyIHJTdHJpbmcgPSBjbGVhbnNlU3RyaW5nKHNTdHJpbmcpO1xuICAgIGlmIChzcGFjZXNMaW1pdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHNwYWNlc0xpbWl0ID0gLTE7XG4gICAgfVxuICAgIHZhciB1ID0gclN0cmluZy5zcGxpdChcIiBcIik7XG4gICAgdSA9IHJlY29tYmluZVF1b3RlZCh1KTtcbiAgICB2YXIgayA9IDA7XG4gICAgaWYgKHUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBbW11dO1xuICAgIH1cbiAgICB2YXIgdyA9IFtbdVswXV1dO1xuICAgIHdoaWxlIChrIDwgdS5sZW5ndGggLSAxKSB7XG4gICAgICAgIGsgPSBrICsgMTtcbiAgICAgICAgdmFyIHIxID0gdy5tYXAoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgICAgICAgICBkZWJ1Z2xvZyhKU09OLnN0cmluZ2lmeShlbnRyeSkpO1xuICAgICAgICAgICAgdmFyIGVudHJ5ID0gZW50cnkuc2xpY2UoMCk7XG4gICAgICAgICAgICBkZWJ1Z2xvZyhKU09OLnN0cmluZ2lmeShlbnRyeSkpO1xuICAgICAgICAgICAgdmFyIHByZXZlbnRyeSA9IGVudHJ5W2VudHJ5Lmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgLy8gZG8gbm90IGNvbWJpbmUgcXVvdGVkIHN0cmluZ3MhXG4gICAgICAgICAgICBpZiAocHJldmVudHJ5ID09PSBudWxsKSB7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpc1F1b3RlZCh1W2tdKSB8fCBpc1F1b3RlZChwcmV2ZW50cnkpKSB7XG4gICAgICAgICAgICAgICAgZW50cnlbZW50cnkubGVuZ3RoIC0gMV0gPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvbWJpbmVkID0gcHJldmVudHJ5ICsgXCIgXCIgKyB1W2tdO1xuICAgICAgICAgICAgICAgIGlmIChzcGFjZXNMaW1pdCA+IDAgJiYgY291bnRTcGFjZXMoY29tYmluZWQpID4gc3BhY2VzTGltaXQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29tYmluZWQgPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbnRyeVtlbnRyeS5sZW5ndGggLSAxXSA9IGNvbWJpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGVudHJ5O1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIHIyID0gdy5tYXAoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgICAgICAgICBkZWJ1Z2xvZyhcIjIgPlwiICsgSlNPTi5zdHJpbmdpZnkoZW50cnkpKTtcbiAgICAgICAgICAgIHZhciBlbnRyeSA9IGVudHJ5LnNsaWNlKDApO1xuICAgICAgICAgICAgZW50cnkucHVzaCh1W2tdKTtcbiAgICAgICAgICAgIHJldHVybiBlbnRyeTtcbiAgICAgICAgfSk7XG4gICAgICAgIGRlYnVnbG9nKEpTT04uc3RyaW5naWZ5KHIxKSk7XG4gICAgICAgIGRlYnVnbG9nKEpTT04uc3RyaW5naWZ5KHIyKSk7XG4gICAgICAgIHcgPSByMS5jb25jYXQocjIpO1xuICAgIH1cbiAgICB3ID0gdy5maWx0ZXIoZnVuY3Rpb24gKG9NYXApIHtcbiAgICAgICAgcmV0dXJuIG9NYXAuZXZlcnkoZnVuY3Rpb24gKHNXb3JkKSB7XG4gICAgICAgICAgICByZXR1cm4gc1dvcmQgIT09IG51bGw7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiB3Lm1hcChmdW5jdGlvbiAob01hcCkge1xuICAgICAgICByZXR1cm4gb01hcC5tYXAoZnVuY3Rpb24gKHNXb3JkKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJpbVF1b3RlZChzV29yZCk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuZXhwb3J0cy5icmVha2Rvd25TdHJpbmcgPSBicmVha2Rvd25TdHJpbmc7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
