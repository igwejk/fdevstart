/**
 * Functionality managing the match models
 *
 * @file
 */
"use strict";

var debug = require("debug");
var debuglog = debug('model');
var logger = require("../utils/logger");
var loadlog = logger.logger('modelload', '');
var IMatch = require("../match/ifmatch");
var InputFilterRules = require("../match/inputFilterRules");
var Tools = require("../match/tools");
var fs = require("fs");
var Meta = require("./meta");
var Utils = require("../utils/utils");
var CircularSer = require("../utils/circularser");
var process = require("process");
var _ = require("lodash");
/**
 * the model path, may be controlled via environment variable
 */
var envModelPath = process.env["ABOT_MODELPATH"] || "testmodel";
var ARR_MODEL_PROPERTIES = ["domain", "bitindex", "defaultkeycolumn", "defaulturi", "categoryDescribed", "columns", "description", "tool", "toolhidden", "synonyms", "category", "wordindex", "exactmatch", "hidden"];
function addSynonyms(synonyms, category, synonymFor, bitindex, mRules, seen) {
    synonyms.forEach(function (syn) {
        var oRule = {
            category: category,
            matchedString: synonymFor,
            type: 0 /* WORD */
            , word: syn,
            bitindex: bitindex,
            _ranking: 0.95
        };
        debuglog(debuglog.enabled ? "inserting synonym" + JSON.stringify(oRule) : '-');
        insertRuleIfNotPresent(mRules, oRule, seen);
    });
}
function getRuleKey(rule) {
    var r1 = rule.matchedString + "-|-" + rule.category + " -|- " + rule.type + " -|- " + rule.word + " ";
    if (rule.range) {
        var r2 = getRuleKey(rule.range.rule);
        r1 += " -|- " + rule.range.low + "/" + rule.range.high + " -|- " + r2;
    }
    return r1;
}
var Breakdown = require("../match/breakdown");
/* given a rule which represents a word sequence which is split during tokenization */
function addBestSplit(mRules, rule, seenRules) {
    //if(!global_AddSplits) {
    //    return;
    //}
    if (rule.type !== 0 /* WORD */) {
            return;
        }
    var best = Breakdown.makeMatchPattern(rule.lowercaseword);
    if (!best) {
        return;
    }
    var newRule = {
        category: rule.category,
        matchedString: rule.matchedString,
        bitindex: rule.bitindex,
        word: best.longestToken,
        type: 0,
        lowercaseword: best.longestToken,
        _ranking: 0.95,
        //    exactOnly : rule.exactOnly,
        range: best.span
    };
    if (rule.exactOnly) {
        newRule.exactOnly = rule.exactOnly;
    }
    ;
    newRule.range.rule = rule;
    insertRuleIfNotPresent(mRules, newRule, seenRules);
}
exports.addBestSplit = addBestSplit;
function insertRuleIfNotPresent(mRules, rule, seenRules) {
    if (rule.type !== 0 /* WORD */) {
            mRules.push(rule);
            return;
        }
    if (rule.word === undefined || rule.matchedString === undefined) {
        throw new Error('illegal rule' + JSON.stringify(rule, undefined, 2));
    }
    var r = getRuleKey(rule);
    /* if( (rule.word === "service" || rule.word=== "services") && r.indexOf('OData') >= 0) {
         console.log("rulekey is" + r);
         console.log("presence is " + JSON.stringify(seenRules[r]));
     }*/
    rule.lowercaseword = rule.word.toLowerCase();
    if (seenRules[r]) {
        debuglog(debuglog.enabled ? "Attempting to insert duplicate" + JSON.stringify(rule, undefined, 2) : "-");
        var duplicates = seenRules[r].filter(function (oEntry) {
            return 0 === InputFilterRules.compareMRuleFull(oEntry, rule);
        });
        if (duplicates.length > 0) {
            return;
        }
    }
    seenRules[r] = seenRules[r] || [];
    seenRules[r].push(rule);
    if (rule.word === "") {
        debuglog(debuglog.enabled ? 'Skipping rule with emtpy word ' + JSON.stringify(rule, undefined, 2) : '-');
        loadlog('Skipping rule with emtpy word ' + JSON.stringify(rule, undefined, 2));
        return;
    }
    mRules.push(rule);
    addBestSplit(mRules, rule, seenRules);
    return;
}
function readFileAsJSON(filename) {
    var data = fs.readFileSync(filename, 'utf-8');
    try {
        return JSON.parse(data);
    } catch (e) {
        console.log("Content of file " + filename + " is no json" + e);
        process.exit(-1);
    }
    return undefined;
}
function loadModelData(modelPath, oMdl, sModelName, oModel) {
    // read the data ->
    // data is processed into mRules directly,
    var bitindex = oMdl.bitindex;
    var sFileName = './' + modelPath + '/' + sModelName + ".data.json";
    var oMdlData = readFileAsJSON(sFileName);
    oMdlData.forEach(function (oEntry) {
        if (!oEntry.domain) {
            oEntry._domain = oMdl.domain;
        }
        if (!oEntry.tool && oMdl.tool.name) {
            oEntry.tool = oMdl.tool.name;
        }
        oModel.records.push(oEntry);
        oMdl.category.forEach(function (cat) {
            if (oEntry[cat] === 'undefined') {
                oEntry[cat] = "n/a";
                var bug = "INCONSISTENT*> ModelData " + sFileName + " does not contain category " + cat + " with value 'undefined', undefined is illegal value, use n/a " + JSON.stringify(oEntry) + "";
                debuglog(bug);
            }
        });
        oMdl.wordindex.forEach(function (category) {
            if (oEntry[category] === undefined) {
                debuglog("INCONSISTENT*> ModelData " + sFileName + " does not contain category " + category + " of wordindex" + JSON.stringify(oEntry) + "");
                return;
            }
            if (oEntry[category] !== "*") {
                var sString = oEntry[category];
                debuglog("pushing rule with " + category + " -> " + sString);
                var oRule = {
                    category: category,
                    matchedString: sString,
                    type: 0 /* WORD */
                    , word: sString,
                    bitindex: bitindex,
                    _ranking: 0.95
                };
                if (oMdl.exactmatch && oMdl.exactmatch.indexOf(category) >= 0) {
                    oRule.exactOnly = true;
                }
                insertRuleIfNotPresent(oModel.mRules, oRule, oModel.seenRules);
                if (oMdlData.synonyms && oMdlData.synonyms[category]) {
                    addSynonyms(oMdlData.synonyms[category], category, sString, bitindex, oModel.mRules, oModel.seenRules);
                }
                if (oEntry.synonyms && oEntry.synonyms[category]) {
                    addSynonyms(oEntry.synonyms[category], category, sString, bitindex, oModel.mRules, oModel.seenRules);
                }
            }
        });
    });
}
function loadModel(modelPath, sModelName, oModel) {
    debuglog(" loading " + sModelName + " ....");
    var oMdl = readFileAsJSON('./' + modelPath + '/' + sModelName + ".model.json");
    mergeModelJson(sModelName, oMdl, oModel);
    loadModelData(modelPath, oMdl, sModelName, oModel);
}
function getDomainBitIndex(domain, oModel) {
    var index = oModel.domains.indexOf(domain);
    if (index < 0) {
        index = oModel.domains.length;
    }
    if (index >= 32) {
        throw new Error("too many domain for single 32 bit index");
    }
    return 0x0001 << index;
}
exports.getDomainBitIndex = getDomainBitIndex;
function mergeModelJson(sModelName, oMdl, oModel) {
    var categoryDescribedMap = {};
    oMdl.bitindex = getDomainBitIndex(oMdl.domain, oModel);
    oMdl.categoryDescribed = [];
    // rectify category
    oMdl.category = oMdl.category.map(function (cat) {
        if (typeof cat === "string") {
            return cat;
        }
        if (typeof cat.name !== "string") {
            console.log("Missing name in object typed category in " + JSON.stringify(cat) + " in model " + sModelName);
            process.exit(-1);
        }
        categoryDescribedMap[cat.name] = cat;
        oMdl.categoryDescribed.push(cat);
        return cat.name;
    });
    // add the categories to the model:
    oMdl.category.forEach(function (category) {
        insertRuleIfNotPresent(oModel.mRules, {
            category: "category",
            matchedString: category,
            type: 0 /* WORD */
            , word: category,
            lowercaseword: category.toLowerCase(),
            bitindex: oMdl.bitindex,
            _ranking: 0.95
        }, oModel.seenRules);
    });
    if (oModel.domains.indexOf(oMdl.domain) >= 0) {
        debuglog("***********here mdl" + JSON.stringify(oMdl, undefined, 2));
        throw new Error('Domain ' + oMdl.domain + ' already loaded while loading ' + sModelName + '?');
    }
    // check properties of model
    Object.keys(oMdl).sort().forEach(function (sProperty) {
        if (ARR_MODEL_PROPERTIES.indexOf(sProperty) < 0) {
            throw new Error('Model property "' + sProperty + '" not a known model property in model of domain ' + oMdl.domain + ' ');
        }
    });
    // consider streamlining the categories
    oModel.rawModels[oMdl.domain] = oMdl;
    oModel.full.domain[oMdl.domain] = {
        description: oMdl.description,
        categories: categoryDescribedMap,
        bitindex: oMdl.bitindex
    };
    // check that
    // check that members of wordindex are in categories,
    oMdl.wordindex = oMdl.wordindex || [];
    oMdl.wordindex.forEach(function (sWordIndex) {
        if (oMdl.category.indexOf(sWordIndex) < 0) {
            throw new Error('Model wordindex "' + sWordIndex + '" not a category of domain ' + oMdl.domain + ' ');
        }
    });
    oMdl.exactmatch = oMdl.exactmatch || [];
    oMdl.exactmatch.forEach(function (sExactMatch) {
        if (oMdl.category.indexOf(sExactMatch) < 0) {
            throw new Error('Model exactmatch "' + sExactMatch + '" not a category of domain ' + oMdl.domain + ' ');
        }
    });
    oMdl.columns = oMdl.columns || [];
    oMdl.columns.forEach(function (sExactMatch) {
        if (oMdl.category.indexOf(sExactMatch) < 0) {
            throw new Error('Model column "' + sExactMatch + '" not a category of domain ' + oMdl.domain + ' ');
        }
    });
    // add relation domain -> category
    var domainStr = MetaF.Domain(oMdl.domain).toFullString();
    var relationStr = MetaF.Relation(Meta.RELATION_hasCategory).toFullString();
    var reverseRelationStr = MetaF.Relation(Meta.RELATION_isCategoryOf).toFullString();
    oMdl.category.forEach(function (sCategory) {
        var CategoryString = MetaF.Category(sCategory).toFullString();
        oModel.meta.t3[domainStr] = oModel.meta.t3[domainStr] || {};
        oModel.meta.t3[domainStr][relationStr] = oModel.meta.t3[domainStr][relationStr] || {};
        oModel.meta.t3[domainStr][relationStr][CategoryString] = {};
        oModel.meta.t3[CategoryString] = oModel.meta.t3[CategoryString] || {};
        oModel.meta.t3[CategoryString][reverseRelationStr] = oModel.meta.t3[CategoryString][reverseRelationStr] || {};
        oModel.meta.t3[CategoryString][reverseRelationStr][domainStr] = {};
    });
    // add a precice domain matchrule
    insertRuleIfNotPresent(oModel.mRules, {
        category: "domain",
        matchedString: oMdl.domain,
        type: 0 /* WORD */
        , word: oMdl.domain,
        bitindex: oMdl.bitindex,
        _ranking: 0.95
    }, oModel.seenRules);
    // check the tool
    if (oMdl.tool && oMdl.tool.requires) {
        var requires = Object.keys(oMdl.tool.requires || {});
        var diff = _.difference(requires, oMdl.category);
        if (diff.length > 0) {
            console.log(" " + oMdl.domain + " : Unkown category in requires of tool: \"" + diff.join('"') + '"');
            process.exit(-1);
        }
        var optional = Object.keys(oMdl.tool.optional);
        diff = _.difference(optional, oMdl.category);
        if (diff.length > 0) {
            console.log(" " + oMdl.domain + " : Unkown category optional of tool: \"" + diff.join('"') + '"');
            process.exit(-1);
        }
        Object.keys(oMdl.tool.sets || {}).forEach(function (setID) {
            var diff = _.difference(oMdl.tool.sets[setID].set, oMdl.category);
            if (diff.length > 0) {
                console.log(" " + oMdl.domain + " : Unkown category in setId " + setID + " of tool: \"" + diff.join('"') + '"');
                process.exit(-1);
            }
        });
        // extract tools an add to tools:
        oModel.tools.filter(function (oEntry) {
            if (oEntry.name === (oMdl.tool && oMdl.tool.name)) {
                console.log("Tool " + oMdl.tool.name + " already present when loading " + sModelName);
                //throw new Error('Domain already loaded?');
                process.exit(-1);
            }
        });
    } else {
        oMdl.toolhidden = true;
        oMdl.tool.requires = { "impossible": {} };
    }
    // add the tool name as rule unless hidden
    if (!oMdl.toolhidden && oMdl.tool && oMdl.tool.name) {
        insertRuleIfNotPresent(oModel.mRules, {
            category: "tool",
            matchedString: oMdl.tool.name,
            type: 0 /* WORD */
            , word: oMdl.tool.name,
            bitindex: oMdl.bitindex,
            _ranking: 0.95
        }, oModel.seenRules);
    }
    ;
    if (oMdl.synonyms && oMdl.synonyms["tool"]) {
        addSynonyms(oMdl.synonyms["tool"], "tool", oMdl.tool.name, oMdl.bitindex, oModel.mRules, oModel.seenRules);
    }
    ;
    if (oMdl.synonyms) {
        Object.keys(oMdl.synonyms).forEach(function (ssynkey) {
            if (oMdl.category.indexOf(ssynkey) >= 0 && ssynkey !== "tool") {
                if (oModel.full.domain[oMdl.domain].categories[ssynkey]) {
                    oModel.full.domain[oMdl.domain].categories[ssynkey].synonyms = oMdl.synonyms[ssynkey];
                }
                addSynonyms(oMdl.synonyms[ssynkey], "category", ssynkey, oMdl.bitindex, oModel.mRules, oModel.seenRules);
            }
        });
    }
    oModel.domains.push(oMdl.domain);
    if (oMdl.tool.name) {
        oModel.tools.push(oMdl.tool);
    }
    oModel.category = oModel.category.concat(oMdl.category);
    oModel.category.sort();
    oModel.category = oModel.category.filter(function (string, index) {
        return oModel.category[index] !== oModel.category[index + 1];
    });
} // loadmodel
function splitRules(rules) {
    var res = {};
    var nonWordRules = [];
    rules.forEach(function (rule) {
        if (rule.type === 0 /* WORD */) {
                if (!rule.lowercaseword) {
                    throw new Error("Rule has no member lowercaseword" + JSON.stringify(rule));
                }
                res[rule.lowercaseword] = res[rule.lowercaseword] || { bitindex: 0, rules: [] };
                res[rule.lowercaseword].bitindex = res[rule.lowercaseword].bitindex | rule.bitindex;
                res[rule.lowercaseword].rules.push(rule);
            } else {
            nonWordRules.push(rule);
        }
    });
    return {
        wordMap: res,
        nonWordRules: nonWordRules,
        allRules: rules,
        wordCache: {}
    };
}
exports.splitRules = splitRules;
function cmpLengthSort(a, b) {
    var d = a.length - b.length;
    if (d) {
        return d;
    }
    return a.localeCompare(b);
}
var Distance = require("../utils/damerauLevenshtein");
var Algol = require("../match/algol");
// offset[0] : len-2
//             len -1
//             len
//             len +1
//             len +2
//             len +3
function findNextLen(targetLen, arr, offsets) {
    offsets.shift();
    for (var i = offsets[4]; i < arr.length && arr[i].length <= targetLen; ++i) {}
    //console.log("pushing " + i);
    offsets.push(i);
}
exports.findNextLen = findNextLen;
function addRangeRulesUnlessPresent(rules, lcword, rangeRules, presentRulesForKey, seenRules) {
    rangeRules.forEach(function (rangeRule) {
        var newRule = Object.assign({}, rangeRule);
        newRule.lowercaseword = lcword;
        newRule.word = lcword;
        //if((lcword === 'services' || lcword === 'service') && newRule.range.rule.lowercaseword.indexOf('odata')>=0) {
        //    console.log("adding "+ JSON.stringify(newRule) + "\n");
        //}
        //todo: check whether an equivalent rule is already present?
        var cnt = rules.length;
        insertRuleIfNotPresent(rules, newRule, seenRules);
    });
}
exports.addRangeRulesUnlessPresent = addRangeRulesUnlessPresent;
function addCloseExactRangeRules(rules, seenRules) {
    var keysMap = {};
    var rangeKeysMap = {};
    rules.forEach(function (rule) {
        if (rule.type === 0 /* WORD */) {
                //keysMap[rule.lowercaseword] = 1;
                keysMap[rule.lowercaseword] = keysMap[rule.lowercaseword] || [];
                keysMap[rule.lowercaseword].push(rule);
                if (!rule.exactOnly && rule.range) {
                    rangeKeysMap[rule.lowercaseword] = rangeKeysMap[rule.lowercaseword] || [];
                    rangeKeysMap[rule.lowercaseword].push(rule);
                }
            }
    });
    var keys = Object.keys(keysMap);
    keys.sort(cmpLengthSort);
    var len = 0;
    keys.forEach(function (key, index) {
        if (key.length != len) {}
        len = key.length;
    });
    //   keys = keys.slice(0,2000);
    var rangeKeys = Object.keys(rangeKeysMap);
    rangeKeys.sort(cmpLengthSort);
    //console.log(` ${keys.length} keys and ${rangeKeys.length} rangekeys `);
    var low = 0;
    var high = 0;
    var lastlen = 0;
    var offsets = [0, 0, 0, 0, 0, 0];
    var len = rangeKeys.length;
    findNextLen(0, keys, offsets);
    findNextLen(1, keys, offsets);
    findNextLen(2, keys, offsets);
    rangeKeys.forEach(function (rangeKey) {
        if (rangeKey.length !== lastlen) {
            for (i = lastlen + 1; i <= rangeKey.length; ++i) {
                findNextLen(i + 2, keys, offsets);
            }
            //   console.log(` shifted to ${rangeKey.length} with offsets beeing ${offsets.join(' ')}`);
            //   console.log(` here 0 ${offsets[0]} : ${keys[Math.min(keys.length-1, offsets[0])].length}  ${keys[Math.min(keys.length-1, offsets[0])]} `);
            //  console.log(` here 5-1  ${keys[offsets[5]-1].length}  ${keys[offsets[5]-1]} `);
            //   console.log(` here 5 ${offsets[5]} : ${keys[Math.min(keys.length-1, offsets[5])].length}  ${keys[Math.min(keys.length-1, offsets[5])]} `);
            lastlen = rangeKey.length;
        }
        for (var i = offsets[0]; i < offsets[5]; ++i) {
            var d = Distance.calcDistanceAdjusted(rangeKey, keys[i]);
            // console.log(`${rangeKey.length-keys[i].length} ${d} ${rangeKey} and ${keys[i]}  `);
            if (d !== 1.0 && d >= Algol.Cutoff_rangeCloseMatch) {
                //console.log(`would add ${rangeKey} for ${keys[i]} ${d}`);
                var cnt = rules.length;
                // we only have to add if there is not yet a match rule here which points to the same
                addRangeRulesUnlessPresent(rules, keys[i], rangeKeysMap[rangeKey], keysMap[keys[i]], seenRules);
                if (rules.length > cnt) {}
            }
        }
    });
    /*
    [
        ['aEFG','aEFGH'],
        ['aEFGH','aEFGHI'],
        ['Odata','ODatas'],
    ['Odata','Odatas'],
    ['Odata','Odatb'],
    ['Odata','UData'],
    ['service','services'],
    ['this isfunny and more','this isfunny and mores'],
    ].forEach(rec => {
        console.log(`distance ${rec[0]} ${rec[1]} : ${Distance.calcDistance(rec[0],rec[1])}  adf ${Distance.calcDistanceAdjusted(rec[0],rec[1])} `);
     });
    console.log("distance Odata Udata"+ Distance.calcDistance('OData','UData'));
    console.log("distance Odata Odatb"+ Distance.calcDistance('OData','ODatb'));
    console.log("distance Odatas Odata"+ Distance.calcDistance('OData','ODataa'));
    console.log("distance Odatas abcde"+ Distance.calcDistance('abcde','abcdef'));
    console.log("distance services "+ Distance.calcDistance('services','service'));
    */
}
exports.addCloseExactRangeRules = addCloseExactRangeRules;
var n = 0;
function loadModels(modelPath) {
    var oModel;
    oModel = {
        full: { domain: {} },
        rawModels: {},
        domains: [],
        tools: [],
        rules: undefined,
        category: [],
        operators: {},
        mRules: [],
        seenRules: {},
        records: [],
        meta: { t3: {} }
    };
    var t = Date.now();
    modelPath = modelPath || envModelPath;
    try {
        var a = CircularSer.load('./' + modelPath + '/_cachefalse.js');
        //console.log("found a cache ?  " + !!a);
        //a = undefined;
        if (a) {
            debuglog(" return preparese model ");
            if (process.env.ABOT_EMAIL_USER) {
                console.log("loaded models from cache in " + (Date.now() - t) + " ");
            }
            return a;
        }
    } catch (e) {}
    var mdls = readFileAsJSON('./' + modelPath + '/models.json');
    mdls.forEach(function (sModelName) {
        loadModel(modelPath, sModelName, oModel);
    });
    // add the categories to the model:
    /*
    oModel.category.forEach(function (category) {
        insertRuleIfNotPresent(oModel.mRules, {
            category: "category",
            matchedString: category,
            type: IMatch.EnumRuleType.WORD,
            word: category,
            lowercaseword: category.toLowerCase(),
            bitindex : oMdl.
            _ranking: 0.95
        }, oModel.seenRules);
    });
    */
    var metaBitIndex = getDomainBitIndex('meta', oModel);
    // add the domain meta rule
    insertRuleIfNotPresent(oModel.mRules, {
        category: "meta",
        matchedString: "domain",
        type: 0 /* WORD */
        , word: "domain",
        bitindex: metaBitIndex,
        _ranking: 0.95
    }, oModel.seenRules);
    var fillerBitIndex = getDomainBitIndex('meta', oModel);
    //add a filler rule
    var fillers = readFileAsJSON('./' + modelPath + '/filler.json');
    var re = "^((" + fillers.join(")|(") + "))$";
    oModel.mRules.push({
        category: "filler",
        type: 1 /* REGEXP */
        , regexp: new RegExp(re, "i"),
        matchedString: "filler",
        bitindex: fillerBitIndex,
        _ranking: 0.9
    });
    //add operators
    var operators = readFileAsJSON('./resources/model/operators.json');
    var operatorBitIndex = getDomainBitIndex('operators', oModel);
    Object.keys(operators.operators).forEach(function (operator) {
        if (IMatch.aOperatorNames.indexOf(operator) < 0) {
            debuglog("unknown operator " + operator);
            throw new Error("unknown operator " + operator);
        }
        oModel.operators[operator] = operators.operators[operator];
        oModel.operators[operator].operator = operator;
        Object.freeze(oModel.operators[operator]);
        var word = operator;
        insertRuleIfNotPresent(oModel.mRules, {
            category: "operator",
            word: word.toLowerCase(),
            lowercaseword: word.toLowerCase(),
            type: 0 /* WORD */
            , matchedString: word,
            bitindex: operatorBitIndex,
            _ranking: 0.9
        }, oModel.seenRules);
        // add all synonyms
        if (operators.synonyms[operator]) {
            Object.keys(operators.synonyms[operator]).forEach(function (synonym) {
                insertRuleIfNotPresent(oModel.mRules, {
                    category: "operator",
                    word: synonym.toLowerCase(),
                    lowercaseword: synonym.toLowerCase(),
                    type: 0 /* WORD */
                    , matchedString: operator,
                    bitindex: operatorBitIndex,
                    _ranking: 0.9
                }, oModel.seenRules);
            });
        }
    });
    /*
        })
            {
          category: "filler",
          type: 1,
          regexp: /^((start)|(show)|(from)|(in))$/i,
          matchedString: "filler",
          _ranking: 0.9
        },
    */
    oModel.mRules = oModel.mRules.sort(InputFilterRules.cmpMRule);
    addCloseExactRangeRules(oModel.mRules, oModel.seenRules);
    oModel.mRules = oModel.mRules.sort(InputFilterRules.cmpMRule);
    if (global && global.gc) {
        global.gc();
    }
    oModel.rules = splitRules(oModel.mRules);
    if (global && global.gc) {
        global.gc();
    }
    oModel.tools = oModel.tools.sort(Tools.cmpTools);
    delete oModel.seenRules;
    debuglog('saving');
    if (global && global.gc) {
        global.gc();
    }
    CircularSer.save('./' + modelPath + '/_cachefalse.js', oModel);
    if (global && global.gc) {
        global.gc();
    }
    if (process.env.ABOT_EMAIL_USER) {
        console.log("loaded models by calculation in " + (Date.now() - t) + " ");
    }
    return oModel;
}
exports.loadModels = loadModels;
function sortCategoriesByImportance(map, cats) {
    var res = cats.slice(0);
    res.sort(rankCategoryByImportance.bind(undefined, map));
    return res;
}
exports.sortCategoriesByImportance = sortCategoriesByImportance;
function rankCategoryByImportance(map, cata, catb) {
    var catADesc = map[cata];
    var catBDesc = map[catb];
    if (cata === catb) {
        return 0;
    }
    // if a is before b, return -1
    if (catADesc && !catBDesc) {
        return -1;
    }
    if (!catADesc && catBDesc) {
        return +1;
    }
    var prioA = catADesc && catADesc.importance || 99;
    var prioB = catBDesc && catBDesc.importance || 99;
    // lower prio goes to front
    var r = prioA - prioB;
    if (r) {
        return r;
    }
    return cata.localeCompare(catb);
}
exports.rankCategoryByImportance = rankCategoryByImportance;
var MetaF = Meta.getMetaFactory();
function getOperator(mdl, operator) {
    return mdl.operators[operator];
}
exports.getOperator = getOperator;
function getResultAsArray(mdl, a, rel) {
    if (rel.toType() !== 'relation') {
        throw new Error("expect relation as 2nd arg");
    }
    var res = mdl.meta.t3[a.toFullString()] && mdl.meta.t3[a.toFullString()][rel.toFullString()];
    if (!res) {
        return [];
    }
    return Object.getOwnPropertyNames(res).sort().map(MetaF.parseIMeta);
}
exports.getResultAsArray = getResultAsArray;
function getCategoriesForDomain(theModel, domain) {
    if (theModel.domains.indexOf(domain) < 0) {
        throw new Error("Domain \"" + domain + "\" not part of model");
    }
    var res = getResultAsArray(theModel, MetaF.Domain(domain), MetaF.Relation(Meta.RELATION_hasCategory));
    return Meta.getStringArray(res);
}
exports.getCategoriesForDomain = getCategoriesForDomain;
function getTableColumns(theModel, domain) {
    if (theModel.domains.indexOf(domain) < 0) {
        throw new Error("Domain \"" + domain + "\" not part of model");
    }
    return theModel.rawModels[domain].columns.slice(0);
}
exports.getTableColumns = getTableColumns;
/**
 * Return all categories of a domain which can appear on a word,
 * these are typically the wordindex domains + entries generated by generic rules
 *
 * The current implementation is a simplification
 */
function getPotentialWordCategoriesForDomain(theModel, domain) {
    // this is a simplified version
    return getCategoriesForDomain(theModel, domain);
}
exports.getPotentialWordCategoriesForDomain = getPotentialWordCategoriesForDomain;
function getDomainsForCategory(theModel, category) {
    if (theModel.category.indexOf(category) < 0) {
        throw new Error("Category \"" + category + "\" not part of model");
    }
    var res = getResultAsArray(theModel, MetaF.Category(category), MetaF.Relation(Meta.RELATION_isCategoryOf));
    return Meta.getStringArray(res);
}
exports.getDomainsForCategory = getDomainsForCategory;
function getAllRecordCategoriesForTargetCategory(model, category, wordsonly) {
    var res = {};
    //
    var fn = wordsonly ? getPotentialWordCategoriesForDomain : getCategoriesForDomain;
    var domains = getDomainsForCategory(model, category);
    domains.forEach(function (domain) {
        fn(model, domain).forEach(function (wordcat) {
            res[wordcat] = true;
        });
    });
    Object.freeze(res);
    return res;
}
exports.getAllRecordCategoriesForTargetCategory = getAllRecordCategoriesForTargetCategory;
function getAllRecordCategoriesForTargetCategories(model, categories, wordsonly) {
    var res = {};
    //
    var fn = wordsonly ? getPotentialWordCategoriesForDomain : getCategoriesForDomain;
    var domains = undefined;
    categories.forEach(function (category) {
        var catdomains = getDomainsForCategory(model, category);
        if (!domains) {
            domains = catdomains;
        } else {
            domains = _.intersection(domains, catdomains);
        }
    });
    if (domains.length === 0) {
        throw new Error('categories ' + Utils.listToQuotedCommaAnd(categories) + ' have no common domain.');
    }
    domains.forEach(function (domain) {
        fn(model, domain).forEach(function (wordcat) {
            res[wordcat] = true;
        });
    });
    Object.freeze(res);
    return res;
}
exports.getAllRecordCategoriesForTargetCategories = getAllRecordCategoriesForTargetCategories;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tb2RlbC9tb2RlbC50cyIsIm1vZGVsL21vZGVsLmpzIl0sIm5hbWVzIjpbImRlYnVnIiwicmVxdWlyZSIsImRlYnVnbG9nIiwibG9nZ2VyIiwibG9hZGxvZyIsIklNYXRjaCIsIklucHV0RmlsdGVyUnVsZXMiLCJUb29scyIsImZzIiwiTWV0YSIsIlV0aWxzIiwiQ2lyY3VsYXJTZXIiLCJwcm9jZXNzIiwiXyIsImVudk1vZGVsUGF0aCIsImVudiIsIkFSUl9NT0RFTF9QUk9QRVJUSUVTIiwiYWRkU3lub255bXMiLCJzeW5vbnltcyIsImNhdGVnb3J5Iiwic3lub255bUZvciIsImJpdGluZGV4IiwibVJ1bGVzIiwic2VlbiIsImZvckVhY2giLCJzeW4iLCJvUnVsZSIsIm1hdGNoZWRTdHJpbmciLCJ0eXBlIiwid29yZCIsIl9yYW5raW5nIiwiZW5hYmxlZCIsIkpTT04iLCJzdHJpbmdpZnkiLCJpbnNlcnRSdWxlSWZOb3RQcmVzZW50IiwiZ2V0UnVsZUtleSIsInJ1bGUiLCJyMSIsInJhbmdlIiwicjIiLCJsb3ciLCJoaWdoIiwiQnJlYWtkb3duIiwiYWRkQmVzdFNwbGl0Iiwic2VlblJ1bGVzIiwiYmVzdCIsIm1ha2VNYXRjaFBhdHRlcm4iLCJsb3dlcmNhc2V3b3JkIiwibmV3UnVsZSIsImxvbmdlc3RUb2tlbiIsInNwYW4iLCJleGFjdE9ubHkiLCJleHBvcnRzIiwicHVzaCIsInVuZGVmaW5lZCIsIkVycm9yIiwiciIsInRvTG93ZXJDYXNlIiwiZHVwbGljYXRlcyIsImZpbHRlciIsIm9FbnRyeSIsImNvbXBhcmVNUnVsZUZ1bGwiLCJsZW5ndGgiLCJyZWFkRmlsZUFzSlNPTiIsImZpbGVuYW1lIiwiZGF0YSIsInJlYWRGaWxlU3luYyIsInBhcnNlIiwiZSIsImNvbnNvbGUiLCJsb2ciLCJleGl0IiwibG9hZE1vZGVsRGF0YSIsIm1vZGVsUGF0aCIsIm9NZGwiLCJzTW9kZWxOYW1lIiwib01vZGVsIiwic0ZpbGVOYW1lIiwib01kbERhdGEiLCJkb21haW4iLCJfZG9tYWluIiwidG9vbCIsIm5hbWUiLCJyZWNvcmRzIiwiY2F0IiwiYnVnIiwid29yZGluZGV4Iiwic1N0cmluZyIsImV4YWN0bWF0Y2giLCJpbmRleE9mIiwibG9hZE1vZGVsIiwibWVyZ2VNb2RlbEpzb24iLCJnZXREb21haW5CaXRJbmRleCIsImluZGV4IiwiZG9tYWlucyIsImNhdGVnb3J5RGVzY3JpYmVkTWFwIiwiY2F0ZWdvcnlEZXNjcmliZWQiLCJtYXAiLCJPYmplY3QiLCJrZXlzIiwic29ydCIsInNQcm9wZXJ0eSIsInJhd01vZGVscyIsImZ1bGwiLCJkZXNjcmlwdGlvbiIsImNhdGVnb3JpZXMiLCJzV29yZEluZGV4Iiwic0V4YWN0TWF0Y2giLCJjb2x1bW5zIiwiZG9tYWluU3RyIiwiTWV0YUYiLCJEb21haW4iLCJ0b0Z1bGxTdHJpbmciLCJyZWxhdGlvblN0ciIsIlJlbGF0aW9uIiwiUkVMQVRJT05faGFzQ2F0ZWdvcnkiLCJyZXZlcnNlUmVsYXRpb25TdHIiLCJSRUxBVElPTl9pc0NhdGVnb3J5T2YiLCJzQ2F0ZWdvcnkiLCJDYXRlZ29yeVN0cmluZyIsIkNhdGVnb3J5IiwibWV0YSIsInQzIiwicmVxdWlyZXMiLCJkaWZmIiwiZGlmZmVyZW5jZSIsImpvaW4iLCJvcHRpb25hbCIsInNldHMiLCJzZXRJRCIsInNldCIsInRvb2xzIiwidG9vbGhpZGRlbiIsInNzeW5rZXkiLCJjb25jYXQiLCJzdHJpbmciLCJzcGxpdFJ1bGVzIiwicnVsZXMiLCJyZXMiLCJub25Xb3JkUnVsZXMiLCJ3b3JkTWFwIiwiYWxsUnVsZXMiLCJ3b3JkQ2FjaGUiLCJjbXBMZW5ndGhTb3J0IiwiYSIsImIiLCJkIiwibG9jYWxlQ29tcGFyZSIsIkRpc3RhbmNlIiwiQWxnb2wiLCJmaW5kTmV4dExlbiIsInRhcmdldExlbiIsImFyciIsIm9mZnNldHMiLCJzaGlmdCIsImkiLCJhZGRSYW5nZVJ1bGVzVW5sZXNzUHJlc2VudCIsImxjd29yZCIsInJhbmdlUnVsZXMiLCJwcmVzZW50UnVsZXNGb3JLZXkiLCJyYW5nZVJ1bGUiLCJhc3NpZ24iLCJjbnQiLCJhZGRDbG9zZUV4YWN0UmFuZ2VSdWxlcyIsImtleXNNYXAiLCJyYW5nZUtleXNNYXAiLCJsZW4iLCJrZXkiLCJyYW5nZUtleXMiLCJsYXN0bGVuIiwicmFuZ2VLZXkiLCJjYWxjRGlzdGFuY2VBZGp1c3RlZCIsIkN1dG9mZl9yYW5nZUNsb3NlTWF0Y2giLCJuIiwibG9hZE1vZGVscyIsIm9wZXJhdG9ycyIsInQiLCJEYXRlIiwibm93IiwibG9hZCIsIkFCT1RfRU1BSUxfVVNFUiIsIm1kbHMiLCJtZXRhQml0SW5kZXgiLCJmaWxsZXJCaXRJbmRleCIsImZpbGxlcnMiLCJyZSIsInJlZ2V4cCIsIlJlZ0V4cCIsIm9wZXJhdG9yQml0SW5kZXgiLCJvcGVyYXRvciIsImFPcGVyYXRvck5hbWVzIiwiZnJlZXplIiwic3lub255bSIsImNtcE1SdWxlIiwiZ2xvYmFsIiwiZ2MiLCJjbXBUb29scyIsInNhdmUiLCJzb3J0Q2F0ZWdvcmllc0J5SW1wb3J0YW5jZSIsImNhdHMiLCJzbGljZSIsInJhbmtDYXRlZ29yeUJ5SW1wb3J0YW5jZSIsImJpbmQiLCJjYXRhIiwiY2F0YiIsImNhdEFEZXNjIiwiY2F0QkRlc2MiLCJwcmlvQSIsImltcG9ydGFuY2UiLCJwcmlvQiIsImdldE1ldGFGYWN0b3J5IiwiZ2V0T3BlcmF0b3IiLCJtZGwiLCJnZXRSZXN1bHRBc0FycmF5IiwicmVsIiwidG9UeXBlIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsInBhcnNlSU1ldGEiLCJnZXRDYXRlZ29yaWVzRm9yRG9tYWluIiwidGhlTW9kZWwiLCJnZXRTdHJpbmdBcnJheSIsImdldFRhYmxlQ29sdW1ucyIsImdldFBvdGVudGlhbFdvcmRDYXRlZ29yaWVzRm9yRG9tYWluIiwiZ2V0RG9tYWluc0ZvckNhdGVnb3J5IiwiZ2V0QWxsUmVjb3JkQ2F0ZWdvcmllc0ZvclRhcmdldENhdGVnb3J5IiwibW9kZWwiLCJ3b3Jkc29ubHkiLCJmbiIsIndvcmRjYXQiLCJnZXRBbGxSZWNvcmRDYXRlZ29yaWVzRm9yVGFyZ2V0Q2F0ZWdvcmllcyIsImNhdGRvbWFpbnMiLCJpbnRlcnNlY3Rpb24iLCJsaXN0VG9RdW90ZWRDb21tYUFuZCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0FDS0E7O0FERUEsSUFBQUEsUUFBQUMsUUFBQSxPQUFBLENBQUE7QUFFQSxJQUFJQyxXQUFXRixNQUFNLE9BQU4sQ0FBZjtBQUVBLElBQUFHLFNBQUFGLFFBQUEsaUJBQUEsQ0FBQTtBQUVBLElBQU1HLFVBQVVELE9BQU9BLE1BQVAsQ0FBYyxXQUFkLEVBQTJCLEVBQTNCLENBQWhCO0FBRUEsSUFBQUUsU0FBQUosUUFBQSxrQkFBQSxDQUFBO0FBRUEsSUFBQUssbUJBQUFMLFFBQUEsMkJBQUEsQ0FBQTtBQUNBLElBQUFNLFFBQUFOLFFBQUEsZ0JBQUEsQ0FBQTtBQUNBLElBQUFPLEtBQUFQLFFBQUEsSUFBQSxDQUFBO0FBQ0EsSUFBQVEsT0FBQVIsUUFBQSxRQUFBLENBQUE7QUFDQSxJQUFBUyxRQUFBVCxRQUFBLGdCQUFBLENBQUE7QUFDQSxJQUFBVSxjQUFBVixRQUFBLHNCQUFBLENBQUE7QUFFQSxJQUFBVyxVQUFBWCxRQUFBLFNBQUEsQ0FBQTtBQUNBLElBQUFZLElBQUFaLFFBQUEsUUFBQSxDQUFBO0FBQ0E7OztBQUdBLElBQUlhLGVBQWVGLFFBQVFHLEdBQVIsQ0FBWSxnQkFBWixLQUFpQyxXQUFwRDtBQW9CQSxJQUFNQyx1QkFBdUIsQ0FBQyxRQUFELEVBQVcsVUFBWCxFQUF1QixrQkFBdkIsRUFBMkMsWUFBM0MsRUFBeUQsbUJBQXpELEVBQThFLFNBQTlFLEVBQXlGLGFBQXpGLEVBQXdHLE1BQXhHLEVBQWdILFlBQWhILEVBQThILFVBQTlILEVBQTBJLFVBQTFJLEVBQXNKLFdBQXRKLEVBQW1LLFlBQW5LLEVBQWlMLFFBQWpMLENBQTdCO0FBRUEsU0FBQUMsV0FBQSxDQUFxQkMsUUFBckIsRUFBeUNDLFFBQXpDLEVBQTJEQyxVQUEzRCxFQUErRUMsUUFBL0UsRUFBaUdDLE1BQWpHLEVBQThIQyxJQUE5SCxFQUFxSztBQUNqS0wsYUFBU00sT0FBVCxDQUFpQixVQUFVQyxHQUFWLEVBQWE7QUFDMUIsWUFBSUMsUUFBUTtBQUNSUCxzQkFBVUEsUUFERjtBQUVSUSwyQkFBZVAsVUFGUDtBQUdSUSxrQkFBTSxDQUhFLENBR0Y7QUFIRSxjQUlSQyxNQUFNSixHQUpFO0FBS1JKLHNCQUFVQSxRQUxGO0FBTVJTLHNCQUFVO0FBTkYsU0FBWjtBQVFBNUIsaUJBQVNBLFNBQVM2QixPQUFULEdBQW9CLHNCQUFzQkMsS0FBS0MsU0FBTCxDQUFlUCxLQUFmLENBQTFDLEdBQW1FLEdBQTVFO0FBQ0FRLCtCQUF1QlosTUFBdkIsRUFBK0JJLEtBQS9CLEVBQXNDSCxJQUF0QztBQUNILEtBWEQ7QUFZSDtBQUVELFNBQUFZLFVBQUEsQ0FBb0JDLElBQXBCLEVBQXdCO0FBQ3BCLFFBQUlDLEtBQUtELEtBQUtULGFBQUwsR0FBcUIsS0FBckIsR0FBNkJTLEtBQUtqQixRQUFsQyxHQUE2QyxPQUE3QyxHQUF1RGlCLEtBQUtSLElBQTVELEdBQW1FLE9BQW5FLEdBQTZFUSxLQUFLUCxJQUFsRixHQUF5RixHQUFsRztBQUNBLFFBQUlPLEtBQUtFLEtBQVQsRUFBZ0I7QUFDWixZQUFJQyxLQUFLSixXQUFXQyxLQUFLRSxLQUFMLENBQVdGLElBQXRCLENBQVQ7QUFDQUMsY0FBTSxVQUFVRCxLQUFLRSxLQUFMLENBQVdFLEdBQXJCLEdBQTJCLEdBQTNCLEdBQWlDSixLQUFLRSxLQUFMLENBQVdHLElBQTVDLEdBQW1ELE9BQW5ELEdBQTZERixFQUFuRTtBQUNIO0FBQ0QsV0FBT0YsRUFBUDtBQUNIO0FBR0QsSUFBQUssWUFBQXpDLFFBQUEsb0JBQUEsQ0FBQTtBQUVBO0FBQ0EsU0FBQTBDLFlBQUEsQ0FBNkJyQixNQUE3QixFQUEwRGMsSUFBMUQsRUFBOEVRLFNBQTlFLEVBQTBIO0FBQ3RIO0FBQ0E7QUFDQTtBQUVBLFFBQUlSLEtBQUtSLElBQUwsS0FBYyxDQUFsQixDQUFrQixVQUFsQixFQUE0QztBQUN4QztBQUNIO0FBQ0QsUUFBSWlCLE9BQU9ILFVBQVVJLGdCQUFWLENBQTJCVixLQUFLVyxhQUFoQyxDQUFYO0FBQ0EsUUFBSSxDQUFDRixJQUFMLEVBQVc7QUFDUDtBQUNIO0FBQ0QsUUFBSUcsVUFBVTtBQUNWN0Isa0JBQVVpQixLQUFLakIsUUFETDtBQUVWUSx1QkFBZVMsS0FBS1QsYUFGVjtBQUdWTixrQkFBVWUsS0FBS2YsUUFITDtBQUlWUSxjQUFNZ0IsS0FBS0ksWUFKRDtBQUtWckIsY0FBTSxDQUxJO0FBTVZtQix1QkFBZUYsS0FBS0ksWUFOVjtBQU9WbkIsa0JBQVUsSUFQQTtBQVFWO0FBQ0FRLGVBQU9PLEtBQUtLO0FBVEYsS0FBZDtBQVdBLFFBQUlkLEtBQUtlLFNBQVQsRUFBb0I7QUFDaEJILGdCQUFRRyxTQUFSLEdBQW9CZixLQUFLZSxTQUF6QjtBQUNIO0FBQUE7QUFDREgsWUFBUVYsS0FBUixDQUFjRixJQUFkLEdBQXFCQSxJQUFyQjtBQUNBRiwyQkFBdUJaLE1BQXZCLEVBQStCMEIsT0FBL0IsRUFBd0NKLFNBQXhDO0FBQ0g7QUE1QkRRLFFBQUFULFlBQUEsR0FBQUEsWUFBQTtBQStCQSxTQUFBVCxzQkFBQSxDQUFnQ1osTUFBaEMsRUFBNkRjLElBQTdELEVBQ0lRLFNBREosRUFDZ0Q7QUFFNUMsUUFBSVIsS0FBS1IsSUFBTCxLQUFjLENBQWxCLENBQWtCLFVBQWxCLEVBQTRDO0FBQ3hDTixtQkFBTytCLElBQVAsQ0FBWWpCLElBQVo7QUFDQTtBQUNIO0FBQ0QsUUFBS0EsS0FBS1AsSUFBTCxLQUFjeUIsU0FBZixJQUE4QmxCLEtBQUtULGFBQUwsS0FBdUIyQixTQUF6RCxFQUFxRTtBQUNqRSxjQUFNLElBQUlDLEtBQUosQ0FBVSxpQkFBaUJ2QixLQUFLQyxTQUFMLENBQWVHLElBQWYsRUFBcUJrQixTQUFyQixFQUFnQyxDQUFoQyxDQUEzQixDQUFOO0FBQ0g7QUFDRCxRQUFJRSxJQUFJckIsV0FBV0MsSUFBWCxDQUFSO0FBQ0E7Ozs7QUFJQUEsU0FBS1csYUFBTCxHQUFxQlgsS0FBS1AsSUFBTCxDQUFVNEIsV0FBVixFQUFyQjtBQUNBLFFBQUliLFVBQVVZLENBQVYsQ0FBSixFQUFrQjtBQUNkdEQsaUJBQVNBLFNBQVM2QixPQUFULEdBQW9CLG1DQUFtQ0MsS0FBS0MsU0FBTCxDQUFlRyxJQUFmLEVBQXFCa0IsU0FBckIsRUFBZ0MsQ0FBaEMsQ0FBdkQsR0FBNkYsR0FBdEc7QUFDQSxZQUFJSSxhQUFhZCxVQUFVWSxDQUFWLEVBQWFHLE1BQWIsQ0FBb0IsVUFBVUMsTUFBVixFQUFnQjtBQUNqRCxtQkFBTyxNQUFNdEQsaUJBQWlCdUQsZ0JBQWpCLENBQWtDRCxNQUFsQyxFQUEwQ3hCLElBQTFDLENBQWI7QUFDSCxTQUZnQixDQUFqQjtBQUdBLFlBQUlzQixXQUFXSSxNQUFYLEdBQW9CLENBQXhCLEVBQTJCO0FBQ3ZCO0FBQ0g7QUFDSjtBQUNEbEIsY0FBVVksQ0FBVixJQUFnQlosVUFBVVksQ0FBVixLQUFnQixFQUFoQztBQUNBWixjQUFVWSxDQUFWLEVBQWFILElBQWIsQ0FBa0JqQixJQUFsQjtBQUNBLFFBQUlBLEtBQUtQLElBQUwsS0FBYyxFQUFsQixFQUFzQjtBQUNsQjNCLGlCQUFTQSxTQUFTNkIsT0FBVCxHQUFvQixtQ0FBbUNDLEtBQUtDLFNBQUwsQ0FBZUcsSUFBZixFQUFxQmtCLFNBQXJCLEVBQWdDLENBQWhDLENBQXZELEdBQTZGLEdBQXRHO0FBQ0FsRCxnQkFBUSxtQ0FBbUM0QixLQUFLQyxTQUFMLENBQWVHLElBQWYsRUFBcUJrQixTQUFyQixFQUFnQyxDQUFoQyxDQUEzQztBQUNBO0FBQ0g7QUFDRGhDLFdBQU8rQixJQUFQLENBQVlqQixJQUFaO0FBQ0FPLGlCQUFhckIsTUFBYixFQUFxQmMsSUFBckIsRUFBMkJRLFNBQTNCO0FBQ0E7QUFDSDtBQUVELFNBQUFtQixjQUFBLENBQXdCQyxRQUF4QixFQUF5QztBQUNyQyxRQUFJQyxPQUFPekQsR0FBRzBELFlBQUgsQ0FBZ0JGLFFBQWhCLEVBQTBCLE9BQTFCLENBQVg7QUFDQSxRQUFJO0FBQ0EsZUFBT2hDLEtBQUttQyxLQUFMLENBQVdGLElBQVgsQ0FBUDtBQUNILEtBRkQsQ0FFRSxPQUFNRyxDQUFOLEVBQVM7QUFDUEMsZ0JBQVFDLEdBQVIsQ0FBWSxxQkFBb0JOLFFBQXBCLEdBQStCLGFBQS9CLEdBQStDSSxDQUEzRDtBQUNBeEQsZ0JBQVEyRCxJQUFSLENBQWEsQ0FBQyxDQUFkO0FBQ0g7QUFDRCxXQUFPakIsU0FBUDtBQUNIO0FBRUQsU0FBQWtCLGFBQUEsQ0FBdUJDLFNBQXZCLEVBQTBDQyxJQUExQyxFQUF3REMsVUFBeEQsRUFBNEVDLE1BQTVFLEVBQWtHO0FBQzlGO0FBQ0E7QUFDQSxRQUFJdkQsV0FBV3FELEtBQUtyRCxRQUFwQjtBQUNBLFFBQU13RCxZQUFhLE9BQU9KLFNBQVAsR0FBbUIsR0FBbkIsR0FBeUJFLFVBQXpCLEdBQXNDLFlBQXpEO0FBQ0EsUUFBSUcsV0FBVWYsZUFBZWMsU0FBZixDQUFkO0FBQ0FDLGFBQVN0RCxPQUFULENBQWlCLFVBQVVvQyxNQUFWLEVBQWdCO0FBQzdCLFlBQUksQ0FBQ0EsT0FBT21CLE1BQVosRUFBb0I7QUFDaEJuQixtQkFBT29CLE9BQVAsR0FBaUJOLEtBQUtLLE1BQXRCO0FBQ0g7QUFDRCxZQUFJLENBQUNuQixPQUFPcUIsSUFBUixJQUFnQlAsS0FBS08sSUFBTCxDQUFVQyxJQUE5QixFQUFvQztBQUNoQ3RCLG1CQUFPcUIsSUFBUCxHQUFjUCxLQUFLTyxJQUFMLENBQVVDLElBQXhCO0FBQ0g7QUFDRE4sZUFBT08sT0FBUCxDQUFlOUIsSUFBZixDQUFvQk8sTUFBcEI7QUFDQWMsYUFBS3ZELFFBQUwsQ0FBY0ssT0FBZCxDQUFzQixVQUFVNEQsR0FBVixFQUFhO0FBQy9CLGdCQUFJeEIsT0FBT3dCLEdBQVAsTUFBZ0IsV0FBcEIsRUFBaUM7QUFDN0J4Qix1QkFBT3dCLEdBQVAsSUFBYyxLQUFkO0FBQ0Esb0JBQUlDLE1BQ0EsOEJBQThCUixTQUE5QixHQUEwQyw2QkFBMUMsR0FBMEVPLEdBQTFFLEdBQWdGLCtEQUFoRixHQUFrSnBELEtBQUtDLFNBQUwsQ0FBZTJCLE1BQWYsQ0FBbEosR0FBMkssRUFEL0s7QUFFQTFELHlCQUFTbUYsR0FBVDtBQUdIO0FBQ0osU0FURDtBQVdBWCxhQUFLWSxTQUFMLENBQWU5RCxPQUFmLENBQXVCLFVBQVVMLFFBQVYsRUFBa0I7QUFDckMsZ0JBQUl5QyxPQUFPekMsUUFBUCxNQUFxQm1DLFNBQXpCLEVBQW9DO0FBQ2hDcEQseUJBQVMsOEJBQThCMkUsU0FBOUIsR0FBMEMsNkJBQTFDLEdBQTBFMUQsUUFBMUUsR0FBcUYsZUFBckYsR0FBdUdhLEtBQUtDLFNBQUwsQ0FBZTJCLE1BQWYsQ0FBdkcsR0FBZ0ksRUFBekk7QUFDQTtBQUNIO0FBQ0QsZ0JBQUlBLE9BQU96QyxRQUFQLE1BQXFCLEdBQXpCLEVBQThCO0FBQzFCLG9CQUFJb0UsVUFBVTNCLE9BQU96QyxRQUFQLENBQWQ7QUFDQWpCLHlCQUFTLHVCQUF1QmlCLFFBQXZCLEdBQWtDLE1BQWxDLEdBQTJDb0UsT0FBcEQ7QUFDQSxvQkFBSTdELFFBQVE7QUFDUlAsOEJBQVVBLFFBREY7QUFFUlEsbUNBQWU0RCxPQUZQO0FBR1IzRCwwQkFBTSxDQUhFLENBR0Y7QUFIRSxzQkFJUkMsTUFBTTBELE9BSkU7QUFLUmxFLDhCQUFVQSxRQUxGO0FBTVJTLDhCQUFVO0FBTkYsaUJBQVo7QUFRQSxvQkFBSTRDLEtBQUtjLFVBQUwsSUFBbUJkLEtBQUtjLFVBQUwsQ0FBZ0JDLE9BQWhCLENBQXdCdEUsUUFBeEIsS0FBcUMsQ0FBNUQsRUFBK0Q7QUFDM0RPLDBCQUFNeUIsU0FBTixHQUFrQixJQUFsQjtBQUNIO0FBQ0RqQix1Q0FBdUIwQyxPQUFPdEQsTUFBOUIsRUFBc0NJLEtBQXRDLEVBQTZDa0QsT0FBT2hDLFNBQXBEO0FBQ0Esb0JBQUlrQyxTQUFTNUQsUUFBVCxJQUFxQjRELFNBQVM1RCxRQUFULENBQWtCQyxRQUFsQixDQUF6QixFQUFzRDtBQUNsREYsZ0NBQVk2RCxTQUFTNUQsUUFBVCxDQUFrQkMsUUFBbEIsQ0FBWixFQUF5Q0EsUUFBekMsRUFBbURvRSxPQUFuRCxFQUE0RGxFLFFBQTVELEVBQXNFdUQsT0FBT3RELE1BQTdFLEVBQXFGc0QsT0FBT2hDLFNBQTVGO0FBQ0g7QUFDRCxvQkFBSWdCLE9BQU8xQyxRQUFQLElBQW1CMEMsT0FBTzFDLFFBQVAsQ0FBZ0JDLFFBQWhCLENBQXZCLEVBQWtEO0FBQzlDRixnQ0FBWTJDLE9BQU8xQyxRQUFQLENBQWdCQyxRQUFoQixDQUFaLEVBQXVDQSxRQUF2QyxFQUFpRG9FLE9BQWpELEVBQTBEbEUsUUFBMUQsRUFBb0V1RCxPQUFPdEQsTUFBM0UsRUFBbUZzRCxPQUFPaEMsU0FBMUY7QUFDSDtBQUNKO0FBQ0osU0EzQkQ7QUE0QkgsS0EvQ0Q7QUFnREg7QUFLRCxTQUFBOEMsU0FBQSxDQUFtQmpCLFNBQW5CLEVBQXNDRSxVQUF0QyxFQUEwREMsTUFBMUQsRUFBZ0Y7QUFDNUUxRSxhQUFTLGNBQWN5RSxVQUFkLEdBQTJCLE9BQXBDO0FBQ0EsUUFBSUQsT0FBT1gsZUFBZSxPQUFPVSxTQUFQLEdBQW1CLEdBQW5CLEdBQXlCRSxVQUF6QixHQUFzQyxhQUFyRCxDQUFYO0FBQ0FnQixtQkFBZWhCLFVBQWYsRUFBMkJELElBQTNCLEVBQWlDRSxNQUFqQztBQUNBSixrQkFBY0MsU0FBZCxFQUF5QkMsSUFBekIsRUFBK0JDLFVBQS9CLEVBQTJDQyxNQUEzQztBQUNIO0FBRUQsU0FBQWdCLGlCQUFBLENBQWtDYixNQUFsQyxFQUFrREgsTUFBbEQsRUFBd0U7QUFDcEUsUUFBSWlCLFFBQVFqQixPQUFPa0IsT0FBUCxDQUFlTCxPQUFmLENBQXVCVixNQUF2QixDQUFaO0FBQ0EsUUFBSWMsUUFBUSxDQUFaLEVBQWU7QUFDWEEsZ0JBQVFqQixPQUFPa0IsT0FBUCxDQUFlaEMsTUFBdkI7QUFDSDtBQUNELFFBQUkrQixTQUFTLEVBQWIsRUFBaUI7QUFDYixjQUFNLElBQUl0QyxLQUFKLENBQVUseUNBQVYsQ0FBTjtBQUNIO0FBQ0QsV0FBTyxVQUFVc0MsS0FBakI7QUFDSDtBQVREekMsUUFBQXdDLGlCQUFBLEdBQUFBLGlCQUFBO0FBV0EsU0FBQUQsY0FBQSxDQUF3QmhCLFVBQXhCLEVBQTRDRCxJQUE1QyxFQUEwREUsTUFBMUQsRUFBZ0Y7QUFDNUUsUUFBSW1CLHVCQUF1QixFQUEzQjtBQUNBckIsU0FBS3JELFFBQUwsR0FBZ0J1RSxrQkFBa0JsQixLQUFLSyxNQUF2QixFQUErQkgsTUFBL0IsQ0FBaEI7QUFDQUYsU0FBS3NCLGlCQUFMLEdBQXlCLEVBQXpCO0FBQ0E7QUFDQXRCLFNBQUt2RCxRQUFMLEdBQWdCdUQsS0FBS3ZELFFBQUwsQ0FBYzhFLEdBQWQsQ0FBa0IsVUFBVWIsR0FBVixFQUFrQjtBQUNoRCxZQUFJLE9BQU9BLEdBQVAsS0FBZSxRQUFuQixFQUE2QjtBQUN6QixtQkFBT0EsR0FBUDtBQUNIO0FBQ0QsWUFBSSxPQUFPQSxJQUFJRixJQUFYLEtBQW9CLFFBQXhCLEVBQWtDO0FBQzlCYixvQkFBUUMsR0FBUixDQUFZLDhDQUE4Q3RDLEtBQUtDLFNBQUwsQ0FBZW1ELEdBQWYsQ0FBOUMsR0FBb0UsWUFBcEUsR0FBbUZULFVBQS9GO0FBQ0EvRCxvQkFBUTJELElBQVIsQ0FBYSxDQUFDLENBQWQ7QUFFSDtBQUNEd0IsNkJBQXFCWCxJQUFJRixJQUF6QixJQUFpQ0UsR0FBakM7QUFDQVYsYUFBS3NCLGlCQUFMLENBQXVCM0MsSUFBdkIsQ0FBNEIrQixHQUE1QjtBQUNBLGVBQU9BLElBQUlGLElBQVg7QUFDSCxLQVplLENBQWhCO0FBY0E7QUFDQVIsU0FBS3ZELFFBQUwsQ0FBY0ssT0FBZCxDQUFzQixVQUFVTCxRQUFWLEVBQWtCO0FBQ3BDZSwrQkFBdUIwQyxPQUFPdEQsTUFBOUIsRUFBc0M7QUFDbENILHNCQUFVLFVBRHdCO0FBRWxDUSwyQkFBZVIsUUFGbUI7QUFHbENTLGtCQUFNLENBSDRCLENBRzVCO0FBSDRCLGNBSWxDQyxNQUFNVixRQUo0QjtBQUtsQzRCLDJCQUFlNUIsU0FBU3NDLFdBQVQsRUFMbUI7QUFNbENwQyxzQkFBVXFELEtBQUtyRCxRQU5tQjtBQU9sQ1Msc0JBQVU7QUFQd0IsU0FBdEMsRUFRRzhDLE9BQU9oQyxTQVJWO0FBU0gsS0FWRDtBQVlBLFFBQUlnQyxPQUFPa0IsT0FBUCxDQUFlTCxPQUFmLENBQXVCZixLQUFLSyxNQUE1QixLQUF1QyxDQUEzQyxFQUE4QztBQUMxQzdFLGlCQUFTLHdCQUF3QjhCLEtBQUtDLFNBQUwsQ0FBZXlDLElBQWYsRUFBcUJwQixTQUFyQixFQUFnQyxDQUFoQyxDQUFqQztBQUNBLGNBQU0sSUFBSUMsS0FBSixDQUFVLFlBQVltQixLQUFLSyxNQUFqQixHQUEwQixnQ0FBMUIsR0FBNkRKLFVBQTdELEdBQTBFLEdBQXBGLENBQU47QUFDSDtBQUNEO0FBQ0F1QixXQUFPQyxJQUFQLENBQVl6QixJQUFaLEVBQWtCMEIsSUFBbEIsR0FBeUI1RSxPQUF6QixDQUFpQyxVQUFVNkUsU0FBVixFQUFtQjtBQUNoRCxZQUFJckYscUJBQXFCeUUsT0FBckIsQ0FBNkJZLFNBQTdCLElBQTBDLENBQTlDLEVBQWlEO0FBQzdDLGtCQUFNLElBQUk5QyxLQUFKLENBQVUscUJBQXFCOEMsU0FBckIsR0FBaUMsa0RBQWpDLEdBQXNGM0IsS0FBS0ssTUFBM0YsR0FBb0csR0FBOUcsQ0FBTjtBQUNIO0FBQ0osS0FKRDtBQUtBO0FBQ0FILFdBQU8wQixTQUFQLENBQWlCNUIsS0FBS0ssTUFBdEIsSUFBZ0NMLElBQWhDO0FBRUFFLFdBQU8yQixJQUFQLENBQVl4QixNQUFaLENBQW1CTCxLQUFLSyxNQUF4QixJQUFrQztBQUM5QnlCLHFCQUFhOUIsS0FBSzhCLFdBRFk7QUFFOUJDLG9CQUFZVixvQkFGa0I7QUFHOUIxRSxrQkFBVXFELEtBQUtyRDtBQUhlLEtBQWxDO0FBTUE7QUFHQTtBQUNBcUQsU0FBS1ksU0FBTCxHQUFpQlosS0FBS1ksU0FBTCxJQUFrQixFQUFuQztBQUNBWixTQUFLWSxTQUFMLENBQWU5RCxPQUFmLENBQXVCLFVBQVVrRixVQUFWLEVBQW9CO0FBQ3ZDLFlBQUloQyxLQUFLdkQsUUFBTCxDQUFjc0UsT0FBZCxDQUFzQmlCLFVBQXRCLElBQW9DLENBQXhDLEVBQTJDO0FBQ3ZDLGtCQUFNLElBQUluRCxLQUFKLENBQVUsc0JBQXNCbUQsVUFBdEIsR0FBbUMsNkJBQW5DLEdBQW1FaEMsS0FBS0ssTUFBeEUsR0FBaUYsR0FBM0YsQ0FBTjtBQUNIO0FBQ0osS0FKRDtBQUtBTCxTQUFLYyxVQUFMLEdBQWtCZCxLQUFLYyxVQUFMLElBQW1CLEVBQXJDO0FBQ0FkLFNBQUtjLFVBQUwsQ0FBZ0JoRSxPQUFoQixDQUF3QixVQUFVbUYsV0FBVixFQUFxQjtBQUN6QyxZQUFJakMsS0FBS3ZELFFBQUwsQ0FBY3NFLE9BQWQsQ0FBc0JrQixXQUF0QixJQUFxQyxDQUF6QyxFQUE0QztBQUN4QyxrQkFBTSxJQUFJcEQsS0FBSixDQUFVLHVCQUF1Qm9ELFdBQXZCLEdBQXFDLDZCQUFyQyxHQUFxRWpDLEtBQUtLLE1BQTFFLEdBQW1GLEdBQTdGLENBQU47QUFDSDtBQUNKLEtBSkQ7QUFLQUwsU0FBS2tDLE9BQUwsR0FBZWxDLEtBQUtrQyxPQUFMLElBQWdCLEVBQS9CO0FBQ0FsQyxTQUFLa0MsT0FBTCxDQUFhcEYsT0FBYixDQUFxQixVQUFVbUYsV0FBVixFQUFxQjtBQUN0QyxZQUFJakMsS0FBS3ZELFFBQUwsQ0FBY3NFLE9BQWQsQ0FBc0JrQixXQUF0QixJQUFxQyxDQUF6QyxFQUE0QztBQUN4QyxrQkFBTSxJQUFJcEQsS0FBSixDQUFVLG1CQUFtQm9ELFdBQW5CLEdBQWlDLDZCQUFqQyxHQUFpRWpDLEtBQUtLLE1BQXRFLEdBQStFLEdBQXpGLENBQU47QUFDSDtBQUNKLEtBSkQ7QUFPQTtBQUNBLFFBQUk4QixZQUFZQyxNQUFNQyxNQUFOLENBQWFyQyxLQUFLSyxNQUFsQixFQUEwQmlDLFlBQTFCLEVBQWhCO0FBQ0EsUUFBSUMsY0FBY0gsTUFBTUksUUFBTixDQUFlekcsS0FBSzBHLG9CQUFwQixFQUEwQ0gsWUFBMUMsRUFBbEI7QUFDQSxRQUFJSSxxQkFBcUJOLE1BQU1JLFFBQU4sQ0FBZXpHLEtBQUs0RyxxQkFBcEIsRUFBMkNMLFlBQTNDLEVBQXpCO0FBQ0F0QyxTQUFLdkQsUUFBTCxDQUFjSyxPQUFkLENBQXNCLFVBQVU4RixTQUFWLEVBQW1CO0FBRXJDLFlBQUlDLGlCQUFpQlQsTUFBTVUsUUFBTixDQUFlRixTQUFmLEVBQTBCTixZQUExQixFQUFyQjtBQUNBcEMsZUFBTzZDLElBQVAsQ0FBWUMsRUFBWixDQUFlYixTQUFmLElBQTRCakMsT0FBTzZDLElBQVAsQ0FBWUMsRUFBWixDQUFlYixTQUFmLEtBQTZCLEVBQXpEO0FBQ0FqQyxlQUFPNkMsSUFBUCxDQUFZQyxFQUFaLENBQWViLFNBQWYsRUFBMEJJLFdBQTFCLElBQXlDckMsT0FBTzZDLElBQVAsQ0FBWUMsRUFBWixDQUFlYixTQUFmLEVBQTBCSSxXQUExQixLQUEwQyxFQUFuRjtBQUNBckMsZUFBTzZDLElBQVAsQ0FBWUMsRUFBWixDQUFlYixTQUFmLEVBQTBCSSxXQUExQixFQUF1Q00sY0FBdkMsSUFBeUQsRUFBekQ7QUFFQTNDLGVBQU82QyxJQUFQLENBQVlDLEVBQVosQ0FBZUgsY0FBZixJQUFpQzNDLE9BQU82QyxJQUFQLENBQVlDLEVBQVosQ0FBZUgsY0FBZixLQUFrQyxFQUFuRTtBQUNBM0MsZUFBTzZDLElBQVAsQ0FBWUMsRUFBWixDQUFlSCxjQUFmLEVBQStCSCxrQkFBL0IsSUFBcUR4QyxPQUFPNkMsSUFBUCxDQUFZQyxFQUFaLENBQWVILGNBQWYsRUFBK0JILGtCQUEvQixLQUFzRCxFQUEzRztBQUNBeEMsZUFBTzZDLElBQVAsQ0FBWUMsRUFBWixDQUFlSCxjQUFmLEVBQStCSCxrQkFBL0IsRUFBbURQLFNBQW5ELElBQWdFLEVBQWhFO0FBRUgsS0FYRDtBQWFBO0FBQ0EzRSwyQkFBdUIwQyxPQUFPdEQsTUFBOUIsRUFBc0M7QUFDbENILGtCQUFVLFFBRHdCO0FBRWxDUSx1QkFBZStDLEtBQUtLLE1BRmM7QUFHbENuRCxjQUFNLENBSDRCLENBRzVCO0FBSDRCLFVBSWxDQyxNQUFNNkMsS0FBS0ssTUFKdUI7QUFLbEMxRCxrQkFBVXFELEtBQUtyRCxRQUxtQjtBQU1sQ1Msa0JBQVU7QUFOd0IsS0FBdEMsRUFPRzhDLE9BQU9oQyxTQVBWO0FBU0E7QUFDQSxRQUFJOEIsS0FBS08sSUFBTCxJQUFhUCxLQUFLTyxJQUFMLENBQVUwQyxRQUEzQixFQUFxQztBQUNqQyxZQUFJQSxXQUFXekIsT0FBT0MsSUFBUCxDQUFZekIsS0FBS08sSUFBTCxDQUFVMEMsUUFBVixJQUFzQixFQUFsQyxDQUFmO0FBQ0EsWUFBSUMsT0FBTy9HLEVBQUVnSCxVQUFGLENBQWFGLFFBQWIsRUFBdUJqRCxLQUFLdkQsUUFBNUIsQ0FBWDtBQUNBLFlBQUl5RyxLQUFLOUQsTUFBTCxHQUFjLENBQWxCLEVBQXFCO0FBQ2pCTyxvQkFBUUMsR0FBUixDQUFZLE1BQUlJLEtBQUtLLE1BQVQsR0FBZSw0Q0FBZixHQUE2RDZDLEtBQUtFLElBQUwsQ0FBVSxHQUFWLENBQTdELEdBQThFLEdBQTFGO0FBQ0FsSCxvQkFBUTJELElBQVIsQ0FBYSxDQUFDLENBQWQ7QUFDSDtBQUNELFlBQUl3RCxXQUFXN0IsT0FBT0MsSUFBUCxDQUFZekIsS0FBS08sSUFBTCxDQUFVOEMsUUFBdEIsQ0FBZjtBQUNBSCxlQUFPL0csRUFBRWdILFVBQUYsQ0FBYUUsUUFBYixFQUF1QnJELEtBQUt2RCxRQUE1QixDQUFQO0FBQ0EsWUFBSXlHLEtBQUs5RCxNQUFMLEdBQWMsQ0FBbEIsRUFBcUI7QUFDakJPLG9CQUFRQyxHQUFSLENBQVksTUFBSUksS0FBS0ssTUFBVCxHQUFlLHlDQUFmLEdBQTBENkMsS0FBS0UsSUFBTCxDQUFVLEdBQVYsQ0FBMUQsR0FBMkUsR0FBdkY7QUFDQWxILG9CQUFRMkQsSUFBUixDQUFhLENBQUMsQ0FBZDtBQUNIO0FBQ0QyQixlQUFPQyxJQUFQLENBQVl6QixLQUFLTyxJQUFMLENBQVUrQyxJQUFWLElBQWtCLEVBQTlCLEVBQWtDeEcsT0FBbEMsQ0FBMEMsVUFBVXlHLEtBQVYsRUFBZTtBQUNyRCxnQkFBSUwsT0FBTy9HLEVBQUVnSCxVQUFGLENBQWFuRCxLQUFLTyxJQUFMLENBQVUrQyxJQUFWLENBQWVDLEtBQWYsRUFBc0JDLEdBQW5DLEVBQXdDeEQsS0FBS3ZELFFBQTdDLENBQVg7QUFDQSxnQkFBSXlHLEtBQUs5RCxNQUFMLEdBQWMsQ0FBbEIsRUFBcUI7QUFDakJPLHdCQUFRQyxHQUFSLENBQVksTUFBSUksS0FBS0ssTUFBVCxHQUFlLDhCQUFmLEdBQThDa0QsS0FBOUMsR0FBbUQsY0FBbkQsR0FBbUVMLEtBQUtFLElBQUwsQ0FBVSxHQUFWLENBQW5FLEdBQW9GLEdBQWhHO0FBQ0FsSCx3QkFBUTJELElBQVIsQ0FBYSxDQUFDLENBQWQ7QUFDSDtBQUNKLFNBTkQ7QUFRQTtBQUNBSyxlQUFPdUQsS0FBUCxDQUFheEUsTUFBYixDQUFvQixVQUFVQyxNQUFWLEVBQWdCO0FBQ2hDLGdCQUFJQSxPQUFPc0IsSUFBUCxNQUFpQlIsS0FBS08sSUFBTCxJQUFhUCxLQUFLTyxJQUFMLENBQVVDLElBQXhDLENBQUosRUFBbUQ7QUFDL0NiLHdCQUFRQyxHQUFSLENBQVksVUFBVUksS0FBS08sSUFBTCxDQUFVQyxJQUFwQixHQUEyQixnQ0FBM0IsR0FBOERQLFVBQTFFO0FBQ0E7QUFDQS9ELHdCQUFRMkQsSUFBUixDQUFhLENBQUMsQ0FBZDtBQUNIO0FBQ0osU0FORDtBQU9ILEtBN0JELE1BNkJPO0FBQ0hHLGFBQUswRCxVQUFMLEdBQWtCLElBQWxCO0FBQ0ExRCxhQUFLTyxJQUFMLENBQVUwQyxRQUFWLEdBQXFCLEVBQUUsY0FBYyxFQUFoQixFQUFyQjtBQUNIO0FBQ0Q7QUFDQSxRQUFJLENBQUNqRCxLQUFLMEQsVUFBTixJQUFvQjFELEtBQUtPLElBQXpCLElBQWlDUCxLQUFLTyxJQUFMLENBQVVDLElBQS9DLEVBQXFEO0FBQ2pEaEQsK0JBQXVCMEMsT0FBT3RELE1BQTlCLEVBQXNDO0FBQ2xDSCxzQkFBVSxNQUR3QjtBQUVsQ1EsMkJBQWUrQyxLQUFLTyxJQUFMLENBQVVDLElBRlM7QUFHbEN0RCxrQkFBTSxDQUg0QixDQUc1QjtBQUg0QixjQUlsQ0MsTUFBTTZDLEtBQUtPLElBQUwsQ0FBVUMsSUFKa0I7QUFLbEM3RCxzQkFBVXFELEtBQUtyRCxRQUxtQjtBQU1sQ1Msc0JBQVU7QUFOd0IsU0FBdEMsRUFPRzhDLE9BQU9oQyxTQVBWO0FBUUg7QUFBQTtBQUNELFFBQUk4QixLQUFLeEQsUUFBTCxJQUFpQndELEtBQUt4RCxRQUFMLENBQWMsTUFBZCxDQUFyQixFQUE0QztBQUN4Q0Qsb0JBQVl5RCxLQUFLeEQsUUFBTCxDQUFjLE1BQWQsQ0FBWixFQUFtQyxNQUFuQyxFQUEyQ3dELEtBQUtPLElBQUwsQ0FBVUMsSUFBckQsRUFBMkRSLEtBQUtyRCxRQUFoRSxFQUEwRXVELE9BQU90RCxNQUFqRixFQUF5RnNELE9BQU9oQyxTQUFoRztBQUNIO0FBQUE7QUFDRCxRQUFJOEIsS0FBS3hELFFBQVQsRUFBbUI7QUFDZmdGLGVBQU9DLElBQVAsQ0FBWXpCLEtBQUt4RCxRQUFqQixFQUEyQk0sT0FBM0IsQ0FBbUMsVUFBVTZHLE9BQVYsRUFBaUI7QUFDaEQsZ0JBQUkzRCxLQUFLdkQsUUFBTCxDQUFjc0UsT0FBZCxDQUFzQjRDLE9BQXRCLEtBQWtDLENBQWxDLElBQXVDQSxZQUFZLE1BQXZELEVBQStEO0FBQzNELG9CQUFJekQsT0FBTzJCLElBQVAsQ0FBWXhCLE1BQVosQ0FBbUJMLEtBQUtLLE1BQXhCLEVBQWdDMEIsVUFBaEMsQ0FBMkM0QixPQUEzQyxDQUFKLEVBQXlEO0FBQ3JEekQsMkJBQU8yQixJQUFQLENBQVl4QixNQUFaLENBQW1CTCxLQUFLSyxNQUF4QixFQUFnQzBCLFVBQWhDLENBQTJDNEIsT0FBM0MsRUFBb0RuSCxRQUFwRCxHQUErRHdELEtBQUt4RCxRQUFMLENBQWNtSCxPQUFkLENBQS9EO0FBQ0g7QUFFRHBILDRCQUFZeUQsS0FBS3hELFFBQUwsQ0FBY21ILE9BQWQsQ0FBWixFQUFvQyxVQUFwQyxFQUFnREEsT0FBaEQsRUFBeUQzRCxLQUFLckQsUUFBOUQsRUFBd0V1RCxPQUFPdEQsTUFBL0UsRUFBdUZzRCxPQUFPaEMsU0FBOUY7QUFDSDtBQUNKLFNBUkQ7QUFTSDtBQUNEZ0MsV0FBT2tCLE9BQVAsQ0FBZXpDLElBQWYsQ0FBb0JxQixLQUFLSyxNQUF6QjtBQUNBLFFBQUlMLEtBQUtPLElBQUwsQ0FBVUMsSUFBZCxFQUFvQjtBQUNoQk4sZUFBT3VELEtBQVAsQ0FBYTlFLElBQWIsQ0FBa0JxQixLQUFLTyxJQUF2QjtBQUNIO0FBQ0RMLFdBQU96RCxRQUFQLEdBQWtCeUQsT0FBT3pELFFBQVAsQ0FBZ0JtSCxNQUFoQixDQUF1QjVELEtBQUt2RCxRQUE1QixDQUFsQjtBQUNBeUQsV0FBT3pELFFBQVAsQ0FBZ0JpRixJQUFoQjtBQUNBeEIsV0FBT3pELFFBQVAsR0FBa0J5RCxPQUFPekQsUUFBUCxDQUFnQndDLE1BQWhCLENBQXVCLFVBQVU0RSxNQUFWLEVBQWtCMUMsS0FBbEIsRUFBdUI7QUFDNUQsZUFBT2pCLE9BQU96RCxRQUFQLENBQWdCMEUsS0FBaEIsTUFBMkJqQixPQUFPekQsUUFBUCxDQUFnQjBFLFFBQVEsQ0FBeEIsQ0FBbEM7QUFDSCxLQUZpQixDQUFsQjtBQUlILEMsQ0FBQztBQUVGLFNBQUEyQyxVQUFBLENBQTJCQyxLQUEzQixFQUFnRDtBQUM1QyxRQUFJQyxNQUFNLEVBQVY7QUFDQSxRQUFJQyxlQUFlLEVBQW5CO0FBQ0FGLFVBQU1qSCxPQUFOLENBQWMsVUFBVVksSUFBVixFQUFjO0FBQ3hCLFlBQUlBLEtBQUtSLElBQUwsS0FBYyxDQUFsQixDQUFrQixVQUFsQixFQUE0QztBQUN4QyxvQkFBSSxDQUFDUSxLQUFLVyxhQUFWLEVBQXlCO0FBQ3JCLDBCQUFNLElBQUlRLEtBQUosQ0FBVSxxQ0FBcUN2QixLQUFLQyxTQUFMLENBQWVHLElBQWYsQ0FBL0MsQ0FBTjtBQUNIO0FBQ0RzRyxvQkFBSXRHLEtBQUtXLGFBQVQsSUFBMEIyRixJQUFJdEcsS0FBS1csYUFBVCxLQUEyQixFQUFFMUIsVUFBVSxDQUFaLEVBQWVvSCxPQUFPLEVBQXRCLEVBQXJEO0FBQ0FDLG9CQUFJdEcsS0FBS1csYUFBVCxFQUF3QjFCLFFBQXhCLEdBQW1DcUgsSUFBSXRHLEtBQUtXLGFBQVQsRUFBd0IxQixRQUF4QixHQUFtQ2UsS0FBS2YsUUFBM0U7QUFDQXFILG9CQUFJdEcsS0FBS1csYUFBVCxFQUF3QjBGLEtBQXhCLENBQThCcEYsSUFBOUIsQ0FBbUNqQixJQUFuQztBQUNILGFBUEQsTUFPTztBQUNIdUcseUJBQWF0RixJQUFiLENBQWtCakIsSUFBbEI7QUFDSDtBQUNKLEtBWEQ7QUFZQSxXQUFPO0FBQ0h3RyxpQkFBU0YsR0FETjtBQUVIQyxzQkFBY0EsWUFGWDtBQUdIRSxrQkFBVUosS0FIUDtBQUlISyxtQkFBWTtBQUpULEtBQVA7QUFNSDtBQXJCRDFGLFFBQUFvRixVQUFBLEdBQUFBLFVBQUE7QUF1QkEsU0FBQU8sYUFBQSxDQUF1QkMsQ0FBdkIsRUFBa0NDLENBQWxDLEVBQTJDO0FBQ3ZDLFFBQUlDLElBQUlGLEVBQUVsRixNQUFGLEdBQVdtRixFQUFFbkYsTUFBckI7QUFDQSxRQUFJb0YsQ0FBSixFQUFPO0FBQ0gsZUFBT0EsQ0FBUDtBQUNIO0FBQ0QsV0FBT0YsRUFBRUcsYUFBRixDQUFnQkYsQ0FBaEIsQ0FBUDtBQUNIO0FBRUQsSUFBQUcsV0FBQW5KLFFBQUEsNkJBQUEsQ0FBQTtBQUNBLElBQUFvSixRQUFBcEosUUFBQSxnQkFBQSxDQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUEsU0FBQXFKLFdBQUEsQ0FBNEJDLFNBQTVCLEVBQStDQyxHQUEvQyxFQUE4REMsT0FBOUQsRUFBK0U7QUFDM0VBLFlBQVFDLEtBQVI7QUFDQSxTQUFLLElBQUlDLElBQUlGLFFBQVEsQ0FBUixDQUFiLEVBQTBCRSxJQUFJSCxJQUFJMUYsTUFBVCxJQUFxQjBGLElBQUlHLENBQUosRUFBTzdGLE1BQVAsSUFBaUJ5RixTQUEvRCxFQUEyRSxFQUFFSSxDQUE3RSxFQUFnRixDQUUvRTtBQUNEO0FBQ0FGLFlBQVFwRyxJQUFSLENBQWFzRyxDQUFiO0FBQ0g7QUFQRHZHLFFBQUFrRyxXQUFBLEdBQUFBLFdBQUE7QUFTQSxTQUFBTSwwQkFBQSxDQUEyQ25CLEtBQTNDLEVBQWtFb0IsTUFBbEUsRUFBa0ZDLFVBQWxGLEVBQThHQyxrQkFBOUcsRUFBa0puSCxTQUFsSixFQUEySjtBQUN2SmtILGVBQVd0SSxPQUFYLENBQW1CLFVBQUF3SSxTQUFBLEVBQVM7QUFDeEIsWUFBSWhILFVBQVVrRCxPQUFPK0QsTUFBUCxDQUFjLEVBQWQsRUFBa0JELFNBQWxCLENBQWQ7QUFDQWhILGdCQUFRRCxhQUFSLEdBQXdCOEcsTUFBeEI7QUFDQTdHLGdCQUFRbkIsSUFBUixHQUFlZ0ksTUFBZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBSUssTUFBTXpCLE1BQU0zRSxNQUFoQjtBQUNBNUIsK0JBQXVCdUcsS0FBdkIsRUFBOEJ6RixPQUE5QixFQUF1Q0osU0FBdkM7QUFDSCxLQVZEO0FBV0g7QUFaRFEsUUFBQXdHLDBCQUFBLEdBQUFBLDBCQUFBO0FBZUEsU0FBQU8sdUJBQUEsQ0FBd0MxQixLQUF4QyxFQUErRDdGLFNBQS9ELEVBQXdFO0FBQ3BFLFFBQUl3SCxVQUFVLEVBQWQ7QUFDQSxRQUFJQyxlQUFlLEVBQW5CO0FBQ0E1QixVQUFNakgsT0FBTixDQUFjLFVBQUFZLElBQUEsRUFBSTtBQUNkLFlBQUlBLEtBQUtSLElBQUwsS0FBYyxDQUFsQixDQUFrQixVQUFsQixFQUE0QztBQUN4QztBQUNBd0ksd0JBQVFoSSxLQUFLVyxhQUFiLElBQThCcUgsUUFBUWhJLEtBQUtXLGFBQWIsS0FBK0IsRUFBN0Q7QUFDQXFILHdCQUFRaEksS0FBS1csYUFBYixFQUE0Qk0sSUFBNUIsQ0FBaUNqQixJQUFqQztBQUNBLG9CQUFJLENBQUNBLEtBQUtlLFNBQU4sSUFBbUJmLEtBQUtFLEtBQTVCLEVBQW1DO0FBQy9CK0gsaUNBQWFqSSxLQUFLVyxhQUFsQixJQUFtQ3NILGFBQWFqSSxLQUFLVyxhQUFsQixLQUFvQyxFQUF2RTtBQUNBc0gsaUNBQWFqSSxLQUFLVyxhQUFsQixFQUFpQ00sSUFBakMsQ0FBc0NqQixJQUF0QztBQUNIO0FBQ0o7QUFDSixLQVZEO0FBV0EsUUFBSStELE9BQU9ELE9BQU9DLElBQVAsQ0FBWWlFLE9BQVosQ0FBWDtBQUNBakUsU0FBS0MsSUFBTCxDQUFVMkMsYUFBVjtBQUNBLFFBQUl1QixNQUFNLENBQVY7QUFDQW5FLFNBQUszRSxPQUFMLENBQWEsVUFBQytJLEdBQUQsRUFBTTFFLEtBQU4sRUFBVztBQUNwQixZQUFJMEUsSUFBSXpHLE1BQUosSUFBY3dHLEdBQWxCLEVBQXVCLENBRXRCO0FBQ0RBLGNBQU1DLElBQUl6RyxNQUFWO0FBQ0gsS0FMRDtBQU1BO0FBQ0EsUUFBSTBHLFlBQVl0RSxPQUFPQyxJQUFQLENBQVlrRSxZQUFaLENBQWhCO0FBQ0FHLGNBQVVwRSxJQUFWLENBQWUyQyxhQUFmO0FBQ0E7QUFDQSxRQUFJdkcsTUFBTSxDQUFWO0FBQ0EsUUFBSUMsT0FBTyxDQUFYO0FBQ0EsUUFBSWdJLFVBQVUsQ0FBZDtBQUNBLFFBQUloQixVQUFVLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLEVBQVUsQ0FBVixFQUFhLENBQWIsRUFBZ0IsQ0FBaEIsQ0FBZDtBQUNBLFFBQUlhLE1BQU1FLFVBQVUxRyxNQUFwQjtBQUNBd0YsZ0JBQVksQ0FBWixFQUFlbkQsSUFBZixFQUFxQnNELE9BQXJCO0FBQ0FILGdCQUFZLENBQVosRUFBZW5ELElBQWYsRUFBcUJzRCxPQUFyQjtBQUNBSCxnQkFBWSxDQUFaLEVBQWVuRCxJQUFmLEVBQXFCc0QsT0FBckI7QUFFQWUsY0FBVWhKLE9BQVYsQ0FBa0IsVUFBVWtKLFFBQVYsRUFBa0I7QUFDaEMsWUFBSUEsU0FBUzVHLE1BQVQsS0FBb0IyRyxPQUF4QixFQUFpQztBQUM3QixpQkFBS2QsSUFBSWMsVUFBVSxDQUFuQixFQUFzQmQsS0FBS2UsU0FBUzVHLE1BQXBDLEVBQTRDLEVBQUU2RixDQUE5QyxFQUFpRDtBQUM3Q0wsNEJBQVlLLElBQUksQ0FBaEIsRUFBbUJ4RCxJQUFuQixFQUF5QnNELE9BQXpCO0FBQ0g7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBZ0Isc0JBQVVDLFNBQVM1RyxNQUFuQjtBQUNIO0FBQ0QsYUFBSyxJQUFJNkYsSUFBSUYsUUFBUSxDQUFSLENBQWIsRUFBeUJFLElBQUlGLFFBQVEsQ0FBUixDQUE3QixFQUF5QyxFQUFFRSxDQUEzQyxFQUE4QztBQUMxQyxnQkFBSVQsSUFBSUUsU0FBU3VCLG9CQUFULENBQThCRCxRQUE5QixFQUF3Q3ZFLEtBQUt3RCxDQUFMLENBQXhDLENBQVI7QUFDQTtBQUNBLGdCQUFLVCxNQUFNLEdBQVAsSUFBZ0JBLEtBQUtHLE1BQU11QixzQkFBL0IsRUFBd0Q7QUFDcEQ7QUFDQSxvQkFBSVYsTUFBTXpCLE1BQU0zRSxNQUFoQjtBQUNBO0FBQ0E4RiwyQ0FBMkJuQixLQUEzQixFQUFrQ3RDLEtBQUt3RCxDQUFMLENBQWxDLEVBQTJDVSxhQUFhSyxRQUFiLENBQTNDLEVBQW1FTixRQUFRakUsS0FBS3dELENBQUwsQ0FBUixDQUFuRSxFQUFxRi9HLFNBQXJGO0FBQ0Esb0JBQUk2RixNQUFNM0UsTUFBTixHQUFlb0csR0FBbkIsRUFBd0IsQ0FFdkI7QUFFSjtBQUNKO0FBQ0osS0F6QkQ7QUEwQkE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFvQkg7QUFsRkQ5RyxRQUFBK0csdUJBQUEsR0FBQUEsdUJBQUE7QUFtRkEsSUFBSVUsSUFBSSxDQUFSO0FBRUEsU0FBQUMsVUFBQSxDQUEyQnJHLFNBQTNCLEVBQTZDO0FBQ3pDLFFBQUlHLE1BQUo7QUFDQUEsYUFBUztBQUNMMkIsY0FBTSxFQUFFeEIsUUFBUSxFQUFWLEVBREQ7QUFFTHVCLG1CQUFXLEVBRk47QUFHTFIsaUJBQVMsRUFISjtBQUlMcUMsZUFBTyxFQUpGO0FBS0xNLGVBQU9uRixTQUxGO0FBTUxuQyxrQkFBVSxFQU5MO0FBT0w0SixtQkFBVyxFQVBOO0FBUUx6SixnQkFBUSxFQVJIO0FBU0xzQixtQkFBVyxFQVROO0FBVUx1QyxpQkFBUyxFQVZKO0FBV0xzQyxjQUFNLEVBQUVDLElBQUksRUFBTjtBQVhELEtBQVQ7QUFhQSxRQUFJc0QsSUFBSUMsS0FBS0MsR0FBTCxFQUFSO0FBQ0F6RyxnQkFBWUEsYUFBYTNELFlBQXpCO0FBRUEsUUFBSTtBQUNBLFlBQUlrSSxJQUFJckksWUFBWXdLLElBQVosQ0FBaUIsT0FBTzFHLFNBQVAsR0FBbUIsaUJBQXBDLENBQVI7QUFDQTtBQUNBO0FBQ0EsWUFBSXVFLENBQUosRUFBTztBQUNIOUkscUJBQVMsMEJBQVQ7QUFDQSxnQkFBSVUsUUFBUUcsR0FBUixDQUFZcUssZUFBaEIsRUFBaUM7QUFDN0IvRyx3QkFBUUMsR0FBUixDQUFZLGtDQUFrQzJHLEtBQUtDLEdBQUwsS0FBYUYsQ0FBL0MsSUFBb0QsR0FBaEU7QUFDSDtBQUNELG1CQUFPaEMsQ0FBUDtBQUNIO0FBQ0osS0FYRCxDQVdFLE9BQU81RSxDQUFQLEVBQVUsQ0FHWDtBQUNELFFBQUlpSCxPQUFPdEgsZUFBZSxPQUFPVSxTQUFQLEdBQW1CLGNBQWxDLENBQVg7QUFDQTRHLFNBQUs3SixPQUFMLENBQWEsVUFBVW1ELFVBQVYsRUFBb0I7QUFDN0JlLGtCQUFVakIsU0FBVixFQUFxQkUsVUFBckIsRUFBaUNDLE1BQWpDO0FBQ0gsS0FGRDtBQUlBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7QUFjQSxRQUFJMEcsZUFBZTFGLGtCQUFrQixNQUFsQixFQUEwQmhCLE1BQTFCLENBQW5CO0FBRUE7QUFDQTFDLDJCQUF1QjBDLE9BQU90RCxNQUE5QixFQUFzQztBQUNsQ0gsa0JBQVUsTUFEd0I7QUFFbENRLHVCQUFlLFFBRm1CO0FBR2xDQyxjQUFNLENBSDRCLENBRzVCO0FBSDRCLFVBSWxDQyxNQUFNLFFBSjRCO0FBS2xDUixrQkFBVWlLLFlBTHdCO0FBTWxDeEosa0JBQVU7QUFOd0IsS0FBdEMsRUFPRzhDLE9BQU9oQyxTQVBWO0FBVUEsUUFBSTJJLGlCQUFpQjNGLGtCQUFrQixNQUFsQixFQUEwQmhCLE1BQTFCLENBQXJCO0FBQ0E7QUFDQSxRQUFJNEcsVUFBV3pILGVBQWUsT0FBT1UsU0FBUCxHQUFtQixjQUFsQyxDQUFmO0FBQ0EsUUFBSWdILEtBQUssUUFBUUQsUUFBUTFELElBQVIsQ0FBYSxLQUFiLENBQVIsR0FBOEIsS0FBdkM7QUFDQWxELFdBQU90RCxNQUFQLENBQWMrQixJQUFkLENBQW1CO0FBQ2ZsQyxrQkFBVSxRQURLO0FBRWZTLGNBQU0sQ0FGUyxDQUVUO0FBRlMsVUFHZjhKLFFBQVEsSUFBSUMsTUFBSixDQUFXRixFQUFYLEVBQWUsR0FBZixDQUhPO0FBSWY5Six1QkFBZSxRQUpBO0FBS2ZOLGtCQUFVa0ssY0FMSztBQU1mekosa0JBQVU7QUFOSyxLQUFuQjtBQVNBO0FBQ0EsUUFBSWlKLFlBQVloSCxlQUFlLGtDQUFmLENBQWhCO0FBQ0EsUUFBSTZILG1CQUFtQmhHLGtCQUFrQixXQUFsQixFQUErQmhCLE1BQS9CLENBQXZCO0FBQ0FzQixXQUFPQyxJQUFQLENBQVk0RSxVQUFVQSxTQUF0QixFQUFpQ3ZKLE9BQWpDLENBQXlDLFVBQVVxSyxRQUFWLEVBQWtCO0FBQ3ZELFlBQUl4TCxPQUFPeUwsY0FBUCxDQUFzQnJHLE9BQXRCLENBQThCb0csUUFBOUIsSUFBMEMsQ0FBOUMsRUFBaUQ7QUFDN0MzTCxxQkFBUyxzQkFBc0IyTCxRQUEvQjtBQUNBLGtCQUFNLElBQUl0SSxLQUFKLENBQVUsc0JBQXNCc0ksUUFBaEMsQ0FBTjtBQUNIO0FBQ0RqSCxlQUFPbUcsU0FBUCxDQUFpQmMsUUFBakIsSUFBNkJkLFVBQVVBLFNBQVYsQ0FBb0JjLFFBQXBCLENBQTdCO0FBQ0FqSCxlQUFPbUcsU0FBUCxDQUFpQmMsUUFBakIsRUFBMkJBLFFBQTNCLEdBQTJEQSxRQUEzRDtBQUNBM0YsZUFBTzZGLE1BQVAsQ0FBY25ILE9BQU9tRyxTQUFQLENBQWlCYyxRQUFqQixDQUFkO0FBQ0EsWUFBSWhLLE9BQU9nSyxRQUFYO0FBQ0EzSiwrQkFBdUIwQyxPQUFPdEQsTUFBOUIsRUFBc0M7QUFDbENILHNCQUFVLFVBRHdCO0FBRWxDVSxrQkFBTUEsS0FBSzRCLFdBQUwsRUFGNEI7QUFHbENWLDJCQUFlbEIsS0FBSzRCLFdBQUwsRUFIbUI7QUFJbEM3QixrQkFBTSxDQUo0QixDQUk1QjtBQUo0QixjQUtsQ0QsZUFBZUUsSUFMbUI7QUFNbENSLHNCQUFVdUssZ0JBTndCO0FBT2xDOUosc0JBQVU7QUFQd0IsU0FBdEMsRUFRRzhDLE9BQU9oQyxTQVJWO0FBU0E7QUFDQSxZQUFJbUksVUFBVTdKLFFBQVYsQ0FBbUIySyxRQUFuQixDQUFKLEVBQWtDO0FBQzlCM0YsbUJBQU9DLElBQVAsQ0FBWTRFLFVBQVU3SixRQUFWLENBQW1CMkssUUFBbkIsQ0FBWixFQUEwQ3JLLE9BQTFDLENBQWtELFVBQVV3SyxPQUFWLEVBQWlCO0FBQy9EOUosdUNBQXVCMEMsT0FBT3RELE1BQTlCLEVBQXNDO0FBQ2xDSCw4QkFBVSxVQUR3QjtBQUVsQ1UsMEJBQU1tSyxRQUFRdkksV0FBUixFQUY0QjtBQUdsQ1YsbUNBQWVpSixRQUFRdkksV0FBUixFQUhtQjtBQUlsQzdCLDBCQUFNLENBSjRCLENBSTVCO0FBSjRCLHNCQUtsQ0QsZUFBZWtLLFFBTG1CO0FBTWxDeEssOEJBQVV1SyxnQkFOd0I7QUFPbEM5Siw4QkFBVTtBQVB3QixpQkFBdEMsRUFRRzhDLE9BQU9oQyxTQVJWO0FBU0gsYUFWRDtBQVdIO0FBQ0osS0FoQ0Q7QUFpQ0E7Ozs7Ozs7Ozs7QUFVQWdDLFdBQU90RCxNQUFQLEdBQWdCc0QsT0FBT3RELE1BQVAsQ0FBYzhFLElBQWQsQ0FBbUI5RixpQkFBaUIyTCxRQUFwQyxDQUFoQjtBQUNBOUIsNEJBQXdCdkYsT0FBT3RELE1BQS9CLEVBQXVDc0QsT0FBT2hDLFNBQTlDO0FBQ0FnQyxXQUFPdEQsTUFBUCxHQUFnQnNELE9BQU90RCxNQUFQLENBQWM4RSxJQUFkLENBQW1COUYsaUJBQWlCMkwsUUFBcEMsQ0FBaEI7QUFDQSxRQUFJQyxVQUFVQSxPQUFPQyxFQUFyQixFQUF5QjtBQUNyQkQsZUFBT0MsRUFBUDtBQUNIO0FBQ0R2SCxXQUFPNkQsS0FBUCxHQUFlRCxXQUFXNUQsT0FBT3RELE1BQWxCLENBQWY7QUFDQSxRQUFJNEssVUFBVUEsT0FBT0MsRUFBckIsRUFBeUI7QUFDckJELGVBQU9DLEVBQVA7QUFDSDtBQUNEdkgsV0FBT3VELEtBQVAsR0FBZXZELE9BQU91RCxLQUFQLENBQWEvQixJQUFiLENBQWtCN0YsTUFBTTZMLFFBQXhCLENBQWY7QUFDQSxXQUFPeEgsT0FBT2hDLFNBQWQ7QUFDQTFDLGFBQVMsUUFBVDtBQUNBLFFBQUlnTSxVQUFVQSxPQUFPQyxFQUFyQixFQUF5QjtBQUNyQkQsZUFBT0MsRUFBUDtBQUNIO0FBQ0R4TCxnQkFBWTBMLElBQVosQ0FBaUIsT0FBTzVILFNBQVAsR0FBbUIsaUJBQXBDLEVBQXVERyxNQUF2RDtBQUNBLFFBQUlzSCxVQUFVQSxPQUFPQyxFQUFyQixFQUF5QjtBQUNyQkQsZUFBT0MsRUFBUDtBQUNIO0FBQ0QsUUFBSXZMLFFBQVFHLEdBQVIsQ0FBWXFLLGVBQWhCLEVBQWlDO0FBQzdCL0csZ0JBQVFDLEdBQVIsQ0FBWSxzQ0FBc0MyRyxLQUFLQyxHQUFMLEtBQWFGLENBQW5ELElBQXdELEdBQXBFO0FBQ0g7QUFDRCxXQUFPcEcsTUFBUDtBQUNIO0FBckpEeEIsUUFBQTBILFVBQUEsR0FBQUEsVUFBQTtBQXVKQSxTQUFBd0IsMEJBQUEsQ0FBMkNyRyxHQUEzQyxFQUF5RnNHLElBQXpGLEVBQXVHO0FBQ25HLFFBQUk3RCxNQUFNNkQsS0FBS0MsS0FBTCxDQUFXLENBQVgsQ0FBVjtBQUNBOUQsUUFBSXRDLElBQUosQ0FBU3FHLHlCQUF5QkMsSUFBekIsQ0FBOEJwSixTQUE5QixFQUF5QzJDLEdBQXpDLENBQVQ7QUFDQSxXQUFPeUMsR0FBUDtBQUNIO0FBSkR0RixRQUFBa0osMEJBQUEsR0FBQUEsMEJBQUE7QUFNQSxTQUFBRyx3QkFBQSxDQUF5Q3hHLEdBQXpDLEVBQXVGMEcsSUFBdkYsRUFBcUdDLElBQXJHLEVBQWlIO0FBQzdHLFFBQUlDLFdBQVc1RyxJQUFJMEcsSUFBSixDQUFmO0FBQ0EsUUFBSUcsV0FBVzdHLElBQUkyRyxJQUFKLENBQWY7QUFDQSxRQUFJRCxTQUFTQyxJQUFiLEVBQW1CO0FBQ2YsZUFBTyxDQUFQO0FBQ0g7QUFDRDtBQUNBLFFBQUlDLFlBQVksQ0FBQ0MsUUFBakIsRUFBMkI7QUFDdkIsZUFBTyxDQUFDLENBQVI7QUFDSDtBQUNELFFBQUksQ0FBQ0QsUUFBRCxJQUFhQyxRQUFqQixFQUEyQjtBQUN2QixlQUFPLENBQUMsQ0FBUjtBQUNIO0FBRUQsUUFBSUMsUUFBU0YsWUFBWUEsU0FBU0csVUFBdEIsSUFBcUMsRUFBakQ7QUFDQSxRQUFJQyxRQUFTSCxZQUFZQSxTQUFTRSxVQUF0QixJQUFxQyxFQUFqRDtBQUNBO0FBQ0EsUUFBSXhKLElBQUl1SixRQUFRRSxLQUFoQjtBQUNBLFFBQUl6SixDQUFKLEVBQU87QUFDSCxlQUFPQSxDQUFQO0FBQ0g7QUFDRCxXQUFPbUosS0FBS3hELGFBQUwsQ0FBbUJ5RCxJQUFuQixDQUFQO0FBQ0g7QUF0QkR4SixRQUFBcUosd0JBQUEsR0FBQUEsd0JBQUE7QUF3QkEsSUFBTTNGLFFBQVFyRyxLQUFLeU0sY0FBTCxFQUFkO0FBRUEsU0FBQUMsV0FBQSxDQUE0QkMsR0FBNUIsRUFBaUR2QixRQUFqRCxFQUFpRTtBQUM3RCxXQUFPdUIsSUFBSXJDLFNBQUosQ0FBY2MsUUFBZCxDQUFQO0FBQ0g7QUFGRHpJLFFBQUErSixXQUFBLEdBQUFBLFdBQUE7QUFJQSxTQUFBRSxnQkFBQSxDQUFpQ0QsR0FBakMsRUFBc0RwRSxDQUF0RCxFQUFxRXNFLEdBQXJFLEVBQW9GO0FBQ2hGLFFBQUlBLElBQUlDLE1BQUosT0FBaUIsVUFBckIsRUFBaUM7QUFDN0IsY0FBTSxJQUFJaEssS0FBSixDQUFVLDRCQUFWLENBQU47QUFDSDtBQUVELFFBQUltRixNQUFNMEUsSUFBSTNGLElBQUosQ0FBU0MsRUFBVCxDQUFZc0IsRUFBRWhDLFlBQUYsRUFBWixLQUNOb0csSUFBSTNGLElBQUosQ0FBU0MsRUFBVCxDQUFZc0IsRUFBRWhDLFlBQUYsRUFBWixFQUE4QnNHLElBQUl0RyxZQUFKLEVBQTlCLENBREo7QUFFQSxRQUFJLENBQUMwQixHQUFMLEVBQVU7QUFDTixlQUFPLEVBQVA7QUFDSDtBQUNELFdBQU94QyxPQUFPc0gsbUJBQVAsQ0FBMkI5RSxHQUEzQixFQUFnQ3RDLElBQWhDLEdBQXVDSCxHQUF2QyxDQUEyQ2EsTUFBTTJHLFVBQWpELENBQVA7QUFDSDtBQVhEckssUUFBQWlLLGdCQUFBLEdBQUFBLGdCQUFBO0FBYUEsU0FBQUssc0JBQUEsQ0FBdUNDLFFBQXZDLEVBQWlFNUksTUFBakUsRUFBK0U7QUFDM0UsUUFBSTRJLFNBQVM3SCxPQUFULENBQWlCTCxPQUFqQixDQUF5QlYsTUFBekIsSUFBbUMsQ0FBdkMsRUFBMEM7QUFDdEMsY0FBTSxJQUFJeEIsS0FBSixDQUFVLGNBQWN3QixNQUFkLEdBQXVCLHNCQUFqQyxDQUFOO0FBQ0g7QUFDRCxRQUFJMkQsTUFBTTJFLGlCQUFpQk0sUUFBakIsRUFBMkI3RyxNQUFNQyxNQUFOLENBQWFoQyxNQUFiLENBQTNCLEVBQWlEK0IsTUFBTUksUUFBTixDQUFlekcsS0FBSzBHLG9CQUFwQixDQUFqRCxDQUFWO0FBQ0EsV0FBTzFHLEtBQUttTixjQUFMLENBQW9CbEYsR0FBcEIsQ0FBUDtBQUNIO0FBTkR0RixRQUFBc0ssc0JBQUEsR0FBQUEsc0JBQUE7QUFRQSxTQUFBRyxlQUFBLENBQWdDRixRQUFoQyxFQUEwRDVJLE1BQTFELEVBQXdFO0FBQ3BFLFFBQUk0SSxTQUFTN0gsT0FBVCxDQUFpQkwsT0FBakIsQ0FBeUJWLE1BQXpCLElBQW1DLENBQXZDLEVBQTBDO0FBQ3RDLGNBQU0sSUFBSXhCLEtBQUosQ0FBVSxjQUFjd0IsTUFBZCxHQUF1QixzQkFBakMsQ0FBTjtBQUNIO0FBQ0QsV0FBTzRJLFNBQVNySCxTQUFULENBQW1CdkIsTUFBbkIsRUFBMkI2QixPQUEzQixDQUFtQzRGLEtBQW5DLENBQXlDLENBQXpDLENBQVA7QUFDSDtBQUxEcEosUUFBQXlLLGVBQUEsR0FBQUEsZUFBQTtBQVFBOzs7Ozs7QUFNQSxTQUFBQyxtQ0FBQSxDQUFvREgsUUFBcEQsRUFBOEU1SSxNQUE5RSxFQUE0RjtBQUN4RjtBQUNBLFdBQU8ySSx1QkFBdUJDLFFBQXZCLEVBQWlDNUksTUFBakMsQ0FBUDtBQUNIO0FBSEQzQixRQUFBMEssbUNBQUEsR0FBQUEsbUNBQUE7QUFLQSxTQUFBQyxxQkFBQSxDQUFzQ0osUUFBdEMsRUFBZ0V4TSxRQUFoRSxFQUFnRjtBQUM1RSxRQUFJd00sU0FBU3hNLFFBQVQsQ0FBa0JzRSxPQUFsQixDQUEwQnRFLFFBQTFCLElBQXNDLENBQTFDLEVBQTZDO0FBQ3pDLGNBQU0sSUFBSW9DLEtBQUosQ0FBVSxnQkFBZ0JwQyxRQUFoQixHQUEyQixzQkFBckMsQ0FBTjtBQUNIO0FBQ0QsUUFBSXVILE1BQU0yRSxpQkFBaUJNLFFBQWpCLEVBQTJCN0csTUFBTVUsUUFBTixDQUFlckcsUUFBZixDQUEzQixFQUFxRDJGLE1BQU1JLFFBQU4sQ0FBZXpHLEtBQUs0RyxxQkFBcEIsQ0FBckQsQ0FBVjtBQUNBLFdBQU81RyxLQUFLbU4sY0FBTCxDQUFvQmxGLEdBQXBCLENBQVA7QUFDSDtBQU5EdEYsUUFBQTJLLHFCQUFBLEdBQUFBLHFCQUFBO0FBU0EsU0FBQUMsdUNBQUEsQ0FBd0RDLEtBQXhELEVBQStFOU0sUUFBL0UsRUFBaUcrTSxTQUFqRyxFQUFtSDtBQUMvRyxRQUFJeEYsTUFBTSxFQUFWO0FBQ0E7QUFDQSxRQUFJeUYsS0FBS0QsWUFBWUosbUNBQVosR0FBa0RKLHNCQUEzRDtBQUNBLFFBQUk1SCxVQUFVaUksc0JBQXNCRSxLQUF0QixFQUE2QjlNLFFBQTdCLENBQWQ7QUFDQTJFLFlBQVF0RSxPQUFSLENBQWdCLFVBQVV1RCxNQUFWLEVBQWdCO0FBQzVCb0osV0FBR0YsS0FBSCxFQUFVbEosTUFBVixFQUFrQnZELE9BQWxCLENBQTBCLFVBQVU0TSxPQUFWLEVBQWlCO0FBQ3ZDMUYsZ0JBQUkwRixPQUFKLElBQWUsSUFBZjtBQUNILFNBRkQ7QUFHSCxLQUpEO0FBS0FsSSxXQUFPNkYsTUFBUCxDQUFjckQsR0FBZDtBQUNBLFdBQU9BLEdBQVA7QUFDSDtBQVpEdEYsUUFBQTRLLHVDQUFBLEdBQUFBLHVDQUFBO0FBY0EsU0FBQUsseUNBQUEsQ0FBMERKLEtBQTFELEVBQWlGeEgsVUFBakYsRUFBdUd5SCxTQUF2RyxFQUF5SDtBQUNySCxRQUFJeEYsTUFBTSxFQUFWO0FBQ0E7QUFDQSxRQUFJeUYsS0FBS0QsWUFBWUosbUNBQVosR0FBa0RKLHNCQUEzRDtBQUNBLFFBQUk1SCxVQUFVeEMsU0FBZDtBQUNBbUQsZUFBV2pGLE9BQVgsQ0FBbUIsVUFBVUwsUUFBVixFQUFrQjtBQUNqQyxZQUFJbU4sYUFBYVAsc0JBQXNCRSxLQUF0QixFQUE2QjlNLFFBQTdCLENBQWpCO0FBQ0EsWUFBSSxDQUFDMkUsT0FBTCxFQUFjO0FBQ1ZBLHNCQUFVd0ksVUFBVjtBQUNILFNBRkQsTUFFTztBQUNIeEksc0JBQVVqRixFQUFFME4sWUFBRixDQUFlekksT0FBZixFQUF3QndJLFVBQXhCLENBQVY7QUFDSDtBQUNKLEtBUEQ7QUFRQSxRQUFJeEksUUFBUWhDLE1BQVIsS0FBbUIsQ0FBdkIsRUFBMEI7QUFDdEIsY0FBTSxJQUFJUCxLQUFKLENBQVUsZ0JBQWdCN0MsTUFBTThOLG9CQUFOLENBQTJCL0gsVUFBM0IsQ0FBaEIsR0FBeUQseUJBQW5FLENBQU47QUFDSDtBQUNEWCxZQUFRdEUsT0FBUixDQUFnQixVQUFVdUQsTUFBVixFQUFnQjtBQUM1Qm9KLFdBQUdGLEtBQUgsRUFBVWxKLE1BQVYsRUFBa0J2RCxPQUFsQixDQUEwQixVQUFVNE0sT0FBVixFQUFpQjtBQUN2QzFGLGdCQUFJMEYsT0FBSixJQUFlLElBQWY7QUFDSCxTQUZEO0FBR0gsS0FKRDtBQUtBbEksV0FBTzZGLE1BQVAsQ0FBY3JELEdBQWQ7QUFDQSxXQUFPQSxHQUFQO0FBQ0g7QUF2QkR0RixRQUFBaUwseUNBQUEsR0FBQUEseUNBQUEiLCJmaWxlIjoibW9kZWwvbW9kZWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogRnVuY3Rpb25hbGl0eSBtYW5hZ2luZyB0aGUgbWF0Y2ggbW9kZWxzXHJcbiAqXHJcbiAqIEBmaWxlXHJcbiAqL1xyXG5cclxuaW1wb3J0ICogYXMgaW50ZiBmcm9tICdjb25zdGFudHMnO1xyXG5pbXBvcnQgKiBhcyBkZWJ1ZyBmcm9tICdkZWJ1Zyc7XHJcblxyXG52YXIgZGVidWdsb2cgPSBkZWJ1ZygnbW9kZWwnKTtcclxuXHJcbmltcG9ydCAqIGFzIGxvZ2dlciBmcm9tICcuLi91dGlscy9sb2dnZXInO1xyXG5cclxuY29uc3QgbG9hZGxvZyA9IGxvZ2dlci5sb2dnZXIoJ21vZGVsbG9hZCcsICcnKTtcclxuXHJcbmltcG9ydCAqICBhcyBJTWF0Y2ggZnJvbSAnLi4vbWF0Y2gvaWZtYXRjaCc7XHJcbmltcG9ydCAqIGFzIE1hdGNoIGZyb20gJy4uL21hdGNoL21hdGNoJztcclxuaW1wb3J0ICogYXMgSW5wdXRGaWx0ZXJSdWxlcyBmcm9tICcuLi9tYXRjaC9pbnB1dEZpbHRlclJ1bGVzJztcclxuaW1wb3J0ICogYXMgVG9vbHMgZnJvbSAnLi4vbWF0Y2gvdG9vbHMnO1xyXG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7XHJcbmltcG9ydCAqIGFzIE1ldGEgZnJvbSAnLi9tZXRhJztcclxuaW1wb3J0ICogYXMgVXRpbHMgZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xyXG5pbXBvcnQgKiBhcyBDaXJjdWxhclNlciBmcm9tICcuLi91dGlscy9jaXJjdWxhcnNlcic7XHJcblxyXG5pbXBvcnQgKiBhcyBwcm9jZXNzIGZyb20gJ3Byb2Nlc3MnO1xyXG5pbXBvcnQgKiBhcyBfIGZyb20gJ2xvZGFzaCc7XHJcbi8qKlxyXG4gKiB0aGUgbW9kZWwgcGF0aCwgbWF5IGJlIGNvbnRyb2xsZWQgdmlhIGVudmlyb25tZW50IHZhcmlhYmxlXHJcbiAqL1xyXG52YXIgZW52TW9kZWxQYXRoID0gcHJvY2Vzcy5lbnZbXCJBQk9UX01PREVMUEFUSFwiXSB8fCBcInRlc3Rtb2RlbFwiO1xyXG5cclxuLy9leHBvcnQgaW50ZXJmYWNlIElNb2RlbHMgPSBNYXRjaC5JTW9kZWxzO1xyXG5cclxuLypcclxuZXhwb3J0IGludGVyZmFjZSBJTW9kZWxzIHtcclxuICAgIGRvbWFpbnM6IHN0cmluZ1tdLFxyXG4gICAgdG9vbHM6IElNYXRjaC5JVG9vbFtdLFxyXG4gICAgY2F0ZWdvcnk6IHN0cmluZ1tdLFxyXG4gICAgbVJ1bGVzOiBJTWF0Y2gubVJ1bGVbXSxcclxuICAgIHJlY29yZHM6IGFueVtdXHJcbiAgICBzZWVuUnVsZXM/OiB7IFtrZXk6IHN0cmluZ106IElNYXRjaC5tUnVsZSB9LFxyXG4gICAgbWV0YSA6IHtcclxuICAgICAgICAvLyBlbnRpdHkgLT4gcmVsYXRpb24gLT4gdGFyZ2V0XHJcbiAgICAgICAgdDMgOiB7IFtrZXk6IHN0cmluZ10gOiB7IFtrZXkgOiBzdHJpbmddIDogYW55IH19XHJcbiAgICB9XHJcbn0qL1xyXG5cclxudHlwZSBJTW9kZWwgPSBJTWF0Y2guSU1vZGVsO1xyXG5cclxuY29uc3QgQVJSX01PREVMX1BST1BFUlRJRVMgPSBbXCJkb21haW5cIiwgXCJiaXRpbmRleFwiLCBcImRlZmF1bHRrZXljb2x1bW5cIiwgXCJkZWZhdWx0dXJpXCIsIFwiY2F0ZWdvcnlEZXNjcmliZWRcIiwgXCJjb2x1bW5zXCIsIFwiZGVzY3JpcHRpb25cIiwgXCJ0b29sXCIsIFwidG9vbGhpZGRlblwiLCBcInN5bm9ueW1zXCIsIFwiY2F0ZWdvcnlcIiwgXCJ3b3JkaW5kZXhcIiwgXCJleGFjdG1hdGNoXCIsIFwiaGlkZGVuXCJdO1xyXG5cclxuZnVuY3Rpb24gYWRkU3lub255bXMoc3lub255bXM6IHN0cmluZ1tdLCBjYXRlZ29yeTogc3RyaW5nLCBzeW5vbnltRm9yOiBzdHJpbmcsIGJpdGluZGV4OiBudW1iZXIsIG1SdWxlczogQXJyYXk8SU1hdGNoLm1SdWxlPiwgc2VlbjogeyBba2V5OiBzdHJpbmddOiBJTWF0Y2gubVJ1bGVbXSB9KSB7XHJcbiAgICBzeW5vbnltcy5mb3JFYWNoKGZ1bmN0aW9uIChzeW4pIHtcclxuICAgICAgICB2YXIgb1J1bGUgPSB7XHJcbiAgICAgICAgICAgIGNhdGVnb3J5OiBjYXRlZ29yeSxcclxuICAgICAgICAgICAgbWF0Y2hlZFN0cmluZzogc3lub255bUZvcixcclxuICAgICAgICAgICAgdHlwZTogSU1hdGNoLkVudW1SdWxlVHlwZS5XT1JELFxyXG4gICAgICAgICAgICB3b3JkOiBzeW4sXHJcbiAgICAgICAgICAgIGJpdGluZGV4OiBiaXRpbmRleCxcclxuICAgICAgICAgICAgX3Jhbmtpbmc6IDAuOTVcclxuICAgICAgICB9O1xyXG4gICAgICAgIGRlYnVnbG9nKGRlYnVnbG9nLmVuYWJsZWQgPyAoXCJpbnNlcnRpbmcgc3lub255bVwiICsgSlNPTi5zdHJpbmdpZnkob1J1bGUpKSA6ICctJyk7XHJcbiAgICAgICAgaW5zZXJ0UnVsZUlmTm90UHJlc2VudChtUnVsZXMsIG9SdWxlLCBzZWVuKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRSdWxlS2V5KHJ1bGUpIHtcclxuICAgIHZhciByMSA9IHJ1bGUubWF0Y2hlZFN0cmluZyArIFwiLXwtXCIgKyBydWxlLmNhdGVnb3J5ICsgXCIgLXwtIFwiICsgcnVsZS50eXBlICsgXCIgLXwtIFwiICsgcnVsZS53b3JkICsgXCIgXCI7XHJcbiAgICBpZiAocnVsZS5yYW5nZSkge1xyXG4gICAgICAgIHZhciByMiA9IGdldFJ1bGVLZXkocnVsZS5yYW5nZS5ydWxlKTtcclxuICAgICAgICByMSArPSBcIiAtfC0gXCIgKyBydWxlLnJhbmdlLmxvdyArIFwiL1wiICsgcnVsZS5yYW5nZS5oaWdoICsgXCIgLXwtIFwiICsgcjI7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcjE7XHJcbn1cclxuXHJcblxyXG5pbXBvcnQgKiBhcyBCcmVha2Rvd24gZnJvbSAnLi4vbWF0Y2gvYnJlYWtkb3duJztcclxuXHJcbi8qIGdpdmVuIGEgcnVsZSB3aGljaCByZXByZXNlbnRzIGEgd29yZCBzZXF1ZW5jZSB3aGljaCBpcyBzcGxpdCBkdXJpbmcgdG9rZW5pemF0aW9uICovXHJcbmV4cG9ydCBmdW5jdGlvbiBhZGRCZXN0U3BsaXQobVJ1bGVzOiBBcnJheTxJTWF0Y2gubVJ1bGU+LCBydWxlOiBJTWF0Y2gubVJ1bGUsIHNlZW5SdWxlczogeyBba2V5OiBzdHJpbmddOiBJTWF0Y2gubVJ1bGVbXSB9KSB7XHJcbiAgICAvL2lmKCFnbG9iYWxfQWRkU3BsaXRzKSB7XHJcbiAgICAvLyAgICByZXR1cm47XHJcbiAgICAvL31cclxuXHJcbiAgICBpZiAocnVsZS50eXBlICE9PSBJTWF0Y2guRW51bVJ1bGVUeXBlLldPUkQpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB2YXIgYmVzdCA9IEJyZWFrZG93bi5tYWtlTWF0Y2hQYXR0ZXJuKHJ1bGUubG93ZXJjYXNld29yZCk7XHJcbiAgICBpZiAoIWJlc3QpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB2YXIgbmV3UnVsZSA9IHtcclxuICAgICAgICBjYXRlZ29yeTogcnVsZS5jYXRlZ29yeSxcclxuICAgICAgICBtYXRjaGVkU3RyaW5nOiBydWxlLm1hdGNoZWRTdHJpbmcsXHJcbiAgICAgICAgYml0aW5kZXg6IHJ1bGUuYml0aW5kZXgsXHJcbiAgICAgICAgd29yZDogYmVzdC5sb25nZXN0VG9rZW4sXHJcbiAgICAgICAgdHlwZTogMCxcclxuICAgICAgICBsb3dlcmNhc2V3b3JkOiBiZXN0Lmxvbmdlc3RUb2tlbixcclxuICAgICAgICBfcmFua2luZzogMC45NSxcclxuICAgICAgICAvLyAgICBleGFjdE9ubHkgOiBydWxlLmV4YWN0T25seSxcclxuICAgICAgICByYW5nZTogYmVzdC5zcGFuXHJcbiAgICB9IGFzIElNYXRjaC5tUnVsZTtcclxuICAgIGlmIChydWxlLmV4YWN0T25seSkge1xyXG4gICAgICAgIG5ld1J1bGUuZXhhY3RPbmx5ID0gcnVsZS5leGFjdE9ubHlcclxuICAgIH07XHJcbiAgICBuZXdSdWxlLnJhbmdlLnJ1bGUgPSBydWxlO1xyXG4gICAgaW5zZXJ0UnVsZUlmTm90UHJlc2VudChtUnVsZXMsIG5ld1J1bGUsIHNlZW5SdWxlcyk7XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBpbnNlcnRSdWxlSWZOb3RQcmVzZW50KG1SdWxlczogQXJyYXk8SU1hdGNoLm1SdWxlPiwgcnVsZTogSU1hdGNoLm1SdWxlLFxyXG4gICAgc2VlblJ1bGVzOiB7IFtrZXk6IHN0cmluZ106IElNYXRjaC5tUnVsZVtdIH0pIHtcclxuXHJcbiAgICBpZiAocnVsZS50eXBlICE9PSBJTWF0Y2guRW51bVJ1bGVUeXBlLldPUkQpIHtcclxuICAgICAgICBtUnVsZXMucHVzaChydWxlKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAoKHJ1bGUud29yZCA9PT0gdW5kZWZpbmVkKSB8fCAocnVsZS5tYXRjaGVkU3RyaW5nID09PSB1bmRlZmluZWQpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbGxlZ2FsIHJ1bGUnICsgSlNPTi5zdHJpbmdpZnkocnVsZSwgdW5kZWZpbmVkLCAyKSk7XHJcbiAgICB9XHJcbiAgICB2YXIgciA9IGdldFJ1bGVLZXkocnVsZSk7XHJcbiAgICAvKiBpZiggKHJ1bGUud29yZCA9PT0gXCJzZXJ2aWNlXCIgfHwgcnVsZS53b3JkPT09IFwic2VydmljZXNcIikgJiYgci5pbmRleE9mKCdPRGF0YScpID49IDApIHtcclxuICAgICAgICAgY29uc29sZS5sb2coXCJydWxla2V5IGlzXCIgKyByKTtcclxuICAgICAgICAgY29uc29sZS5sb2coXCJwcmVzZW5jZSBpcyBcIiArIEpTT04uc3RyaW5naWZ5KHNlZW5SdWxlc1tyXSkpO1xyXG4gICAgIH0qL1xyXG4gICAgcnVsZS5sb3dlcmNhc2V3b3JkID0gcnVsZS53b3JkLnRvTG93ZXJDYXNlKCk7XHJcbiAgICBpZiAoc2VlblJ1bGVzW3JdKSB7XHJcbiAgICAgICAgZGVidWdsb2coZGVidWdsb2cuZW5hYmxlZCA/IChcIkF0dGVtcHRpbmcgdG8gaW5zZXJ0IGR1cGxpY2F0ZVwiICsgSlNPTi5zdHJpbmdpZnkocnVsZSwgdW5kZWZpbmVkLCAyKSkgOiBcIi1cIik7XHJcbiAgICAgICAgdmFyIGR1cGxpY2F0ZXMgPSBzZWVuUnVsZXNbcl0uZmlsdGVyKGZ1bmN0aW9uIChvRW50cnkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIDAgPT09IElucHV0RmlsdGVyUnVsZXMuY29tcGFyZU1SdWxlRnVsbChvRW50cnksIHJ1bGUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmIChkdXBsaWNhdGVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHNlZW5SdWxlc1tyXSA9IChzZWVuUnVsZXNbcl0gfHwgW10pO1xyXG4gICAgc2VlblJ1bGVzW3JdLnB1c2gocnVsZSk7XHJcbiAgICBpZiAocnVsZS53b3JkID09PSBcIlwiKSB7XHJcbiAgICAgICAgZGVidWdsb2coZGVidWdsb2cuZW5hYmxlZCA/ICgnU2tpcHBpbmcgcnVsZSB3aXRoIGVtdHB5IHdvcmQgJyArIEpTT04uc3RyaW5naWZ5KHJ1bGUsIHVuZGVmaW5lZCwgMikpIDogJy0nKTtcclxuICAgICAgICBsb2FkbG9nKCdTa2lwcGluZyBydWxlIHdpdGggZW10cHkgd29yZCAnICsgSlNPTi5zdHJpbmdpZnkocnVsZSwgdW5kZWZpbmVkLCAyKSk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgbVJ1bGVzLnB1c2gocnVsZSk7XHJcbiAgICBhZGRCZXN0U3BsaXQobVJ1bGVzLCBydWxlLCBzZWVuUnVsZXMpO1xyXG4gICAgcmV0dXJuO1xyXG59XHJcblxyXG5mdW5jdGlvbiByZWFkRmlsZUFzSlNPTihmaWxlbmFtZSA6IHN0cmluZykgOiBhbnkge1xyXG4gICAgdmFyIGRhdGEgPSBmcy5yZWFkRmlsZVN5bmMoZmlsZW5hbWUsICd1dGYtOCcpO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShkYXRhKTtcclxuICAgIH0gY2F0Y2goZSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiQ29udGVudCBvZiBmaWxlIFwiKyBmaWxlbmFtZSArIFwiIGlzIG5vIGpzb25cIiArIGUpO1xyXG4gICAgICAgIHByb2Nlc3MuZXhpdCgtMSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG59XHJcblxyXG5mdW5jdGlvbiBsb2FkTW9kZWxEYXRhKG1vZGVsUGF0aDogc3RyaW5nLCBvTWRsOiBJTW9kZWwsIHNNb2RlbE5hbWU6IHN0cmluZywgb01vZGVsOiBJTWF0Y2guSU1vZGVscykge1xyXG4gICAgLy8gcmVhZCB0aGUgZGF0YSAtPlxyXG4gICAgLy8gZGF0YSBpcyBwcm9jZXNzZWQgaW50byBtUnVsZXMgZGlyZWN0bHksXHJcbiAgICB2YXIgYml0aW5kZXggPSBvTWRsLmJpdGluZGV4O1xyXG4gICAgY29uc3Qgc0ZpbGVOYW1lID0gKCcuLycgKyBtb2RlbFBhdGggKyAnLycgKyBzTW9kZWxOYW1lICsgXCIuZGF0YS5qc29uXCIpO1xyXG4gICAgdmFyIG9NZGxEYXRhPSByZWFkRmlsZUFzSlNPTihzRmlsZU5hbWUpO1xyXG4gICAgb01kbERhdGEuZm9yRWFjaChmdW5jdGlvbiAob0VudHJ5KSB7XHJcbiAgICAgICAgaWYgKCFvRW50cnkuZG9tYWluKSB7XHJcbiAgICAgICAgICAgIG9FbnRyeS5fZG9tYWluID0gb01kbC5kb21haW47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghb0VudHJ5LnRvb2wgJiYgb01kbC50b29sLm5hbWUpIHtcclxuICAgICAgICAgICAgb0VudHJ5LnRvb2wgPSBvTWRsLnRvb2wubmFtZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgb01vZGVsLnJlY29yZHMucHVzaChvRW50cnkpO1xyXG4gICAgICAgIG9NZGwuY2F0ZWdvcnkuZm9yRWFjaChmdW5jdGlvbiAoY2F0KSB7XHJcbiAgICAgICAgICAgIGlmIChvRW50cnlbY2F0XSA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgIG9FbnRyeVtjYXRdID0gXCJuL2FcIjtcclxuICAgICAgICAgICAgICAgIHZhciBidWcgPVxyXG4gICAgICAgICAgICAgICAgICAgIFwiSU5DT05TSVNURU5UKj4gTW9kZWxEYXRhIFwiICsgc0ZpbGVOYW1lICsgXCIgZG9lcyBub3QgY29udGFpbiBjYXRlZ29yeSBcIiArIGNhdCArIFwiIHdpdGggdmFsdWUgJ3VuZGVmaW5lZCcsIHVuZGVmaW5lZCBpcyBpbGxlZ2FsIHZhbHVlLCB1c2Ugbi9hIFwiICsgSlNPTi5zdHJpbmdpZnkob0VudHJ5KSArIFwiXCI7XHJcbiAgICAgICAgICAgICAgICBkZWJ1Z2xvZyhidWcpO1xyXG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhidWcpO1xyXG4gICAgICAgICAgICAgICAgLy9wcm9jZXNzLmV4aXQoLTEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuXHJcbiAgICAgICAgb01kbC53b3JkaW5kZXguZm9yRWFjaChmdW5jdGlvbiAoY2F0ZWdvcnkpIHtcclxuICAgICAgICAgICAgaWYgKG9FbnRyeVtjYXRlZ29yeV0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgZGVidWdsb2coXCJJTkNPTlNJU1RFTlQqPiBNb2RlbERhdGEgXCIgKyBzRmlsZU5hbWUgKyBcIiBkb2VzIG5vdCBjb250YWluIGNhdGVnb3J5IFwiICsgY2F0ZWdvcnkgKyBcIiBvZiB3b3JkaW5kZXhcIiArIEpTT04uc3RyaW5naWZ5KG9FbnRyeSkgKyBcIlwiKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChvRW50cnlbY2F0ZWdvcnldICE9PSBcIipcIikge1xyXG4gICAgICAgICAgICAgICAgdmFyIHNTdHJpbmcgPSBvRW50cnlbY2F0ZWdvcnldO1xyXG4gICAgICAgICAgICAgICAgZGVidWdsb2coXCJwdXNoaW5nIHJ1bGUgd2l0aCBcIiArIGNhdGVnb3J5ICsgXCIgLT4gXCIgKyBzU3RyaW5nKTtcclxuICAgICAgICAgICAgICAgIHZhciBvUnVsZSA9IHtcclxuICAgICAgICAgICAgICAgICAgICBjYXRlZ29yeTogY2F0ZWdvcnksXHJcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2hlZFN0cmluZzogc1N0cmluZyxcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBJTWF0Y2guRW51bVJ1bGVUeXBlLldPUkQsXHJcbiAgICAgICAgICAgICAgICAgICAgd29yZDogc1N0cmluZyxcclxuICAgICAgICAgICAgICAgICAgICBiaXRpbmRleDogYml0aW5kZXgsXHJcbiAgICAgICAgICAgICAgICAgICAgX3Jhbmtpbmc6IDAuOTVcclxuICAgICAgICAgICAgICAgIH0gYXMgSU1hdGNoLm1SdWxlO1xyXG4gICAgICAgICAgICAgICAgaWYgKG9NZGwuZXhhY3RtYXRjaCAmJiBvTWRsLmV4YWN0bWF0Y2guaW5kZXhPZihjYXRlZ29yeSkgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9SdWxlLmV4YWN0T25seSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpbnNlcnRSdWxlSWZOb3RQcmVzZW50KG9Nb2RlbC5tUnVsZXMsIG9SdWxlLCBvTW9kZWwuc2VlblJ1bGVzKTtcclxuICAgICAgICAgICAgICAgIGlmIChvTWRsRGF0YS5zeW5vbnltcyAmJiBvTWRsRGF0YS5zeW5vbnltc1tjYXRlZ29yeV0pIHtcclxuICAgICAgICAgICAgICAgICAgICBhZGRTeW5vbnltcyhvTWRsRGF0YS5zeW5vbnltc1tjYXRlZ29yeV0sIGNhdGVnb3J5LCBzU3RyaW5nLCBiaXRpbmRleCwgb01vZGVsLm1SdWxlcywgb01vZGVsLnNlZW5SdWxlcyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAob0VudHJ5LnN5bm9ueW1zICYmIG9FbnRyeS5zeW5vbnltc1tjYXRlZ29yeV0pIHtcclxuICAgICAgICAgICAgICAgICAgICBhZGRTeW5vbnltcyhvRW50cnkuc3lub255bXNbY2F0ZWdvcnldLCBjYXRlZ29yeSwgc1N0cmluZywgYml0aW5kZXgsIG9Nb2RlbC5tUnVsZXMsIG9Nb2RlbC5zZWVuUnVsZXMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuXHJcblxyXG5cclxuZnVuY3Rpb24gbG9hZE1vZGVsKG1vZGVsUGF0aDogc3RyaW5nLCBzTW9kZWxOYW1lOiBzdHJpbmcsIG9Nb2RlbDogSU1hdGNoLklNb2RlbHMpIHtcclxuICAgIGRlYnVnbG9nKFwiIGxvYWRpbmcgXCIgKyBzTW9kZWxOYW1lICsgXCIgLi4uLlwiKTtcclxuICAgIHZhciBvTWRsID0gcmVhZEZpbGVBc0pTT04oJy4vJyArIG1vZGVsUGF0aCArICcvJyArIHNNb2RlbE5hbWUgKyBcIi5tb2RlbC5qc29uXCIpIGFzIElNb2RlbDtcclxuICAgIG1lcmdlTW9kZWxKc29uKHNNb2RlbE5hbWUsIG9NZGwsIG9Nb2RlbCk7XHJcbiAgICBsb2FkTW9kZWxEYXRhKG1vZGVsUGF0aCwgb01kbCwgc01vZGVsTmFtZSwgb01vZGVsKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldERvbWFpbkJpdEluZGV4KGRvbWFpbjogc3RyaW5nLCBvTW9kZWw6IElNYXRjaC5JTW9kZWxzKTogbnVtYmVyIHtcclxuICAgIHZhciBpbmRleCA9IG9Nb2RlbC5kb21haW5zLmluZGV4T2YoZG9tYWluKTtcclxuICAgIGlmIChpbmRleCA8IDApIHtcclxuICAgICAgICBpbmRleCA9IG9Nb2RlbC5kb21haW5zLmxlbmd0aDtcclxuICAgIH1cclxuICAgIGlmIChpbmRleCA+PSAzMikge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcInRvbyBtYW55IGRvbWFpbiBmb3Igc2luZ2xlIDMyIGJpdCBpbmRleFwiKTtcclxuICAgIH1cclxuICAgIHJldHVybiAweDAwMDEgPDwgaW5kZXg7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG1lcmdlTW9kZWxKc29uKHNNb2RlbE5hbWU6IHN0cmluZywgb01kbDogSU1vZGVsLCBvTW9kZWw6IElNYXRjaC5JTW9kZWxzKSB7XHJcbiAgICB2YXIgY2F0ZWdvcnlEZXNjcmliZWRNYXAgPSB7fSBhcyB7IFtrZXk6IHN0cmluZ106IElNYXRjaC5JQ2F0ZWdvcnlEZXNjIH07XHJcbiAgICBvTWRsLmJpdGluZGV4ID0gZ2V0RG9tYWluQml0SW5kZXgob01kbC5kb21haW4sIG9Nb2RlbCk7XHJcbiAgICBvTWRsLmNhdGVnb3J5RGVzY3JpYmVkID0gW107XHJcbiAgICAvLyByZWN0aWZ5IGNhdGVnb3J5XHJcbiAgICBvTWRsLmNhdGVnb3J5ID0gb01kbC5jYXRlZ29yeS5tYXAoZnVuY3Rpb24gKGNhdDogYW55KSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBjYXQgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNhdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR5cGVvZiBjYXQubmFtZSAhPT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIk1pc3NpbmcgbmFtZSBpbiBvYmplY3QgdHlwZWQgY2F0ZWdvcnkgaW4gXCIgKyBKU09OLnN0cmluZ2lmeShjYXQpICsgXCIgaW4gbW9kZWwgXCIgKyBzTW9kZWxOYW1lKTtcclxuICAgICAgICAgICAgcHJvY2Vzcy5leGl0KC0xKTtcclxuICAgICAgICAgICAgLy90aHJvdyBuZXcgRXJyb3IoJ0RvbWFpbiAnICsgb01kbC5kb21haW4gKyAnIGFscmVhZHkgbG9hZGVkIHdoaWxlIGxvYWRpbmcgJyArIHNNb2RlbE5hbWUgKyAnPycpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRlZ29yeURlc2NyaWJlZE1hcFtjYXQubmFtZV0gPSBjYXQ7XHJcbiAgICAgICAgb01kbC5jYXRlZ29yeURlc2NyaWJlZC5wdXNoKGNhdCk7XHJcbiAgICAgICAgcmV0dXJuIGNhdC5uYW1lO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gYWRkIHRoZSBjYXRlZ29yaWVzIHRvIHRoZSBtb2RlbDpcclxuICAgIG9NZGwuY2F0ZWdvcnkuZm9yRWFjaChmdW5jdGlvbiAoY2F0ZWdvcnkpIHtcclxuICAgICAgICBpbnNlcnRSdWxlSWZOb3RQcmVzZW50KG9Nb2RlbC5tUnVsZXMsIHtcclxuICAgICAgICAgICAgY2F0ZWdvcnk6IFwiY2F0ZWdvcnlcIixcclxuICAgICAgICAgICAgbWF0Y2hlZFN0cmluZzogY2F0ZWdvcnksXHJcbiAgICAgICAgICAgIHR5cGU6IElNYXRjaC5FbnVtUnVsZVR5cGUuV09SRCxcclxuICAgICAgICAgICAgd29yZDogY2F0ZWdvcnksXHJcbiAgICAgICAgICAgIGxvd2VyY2FzZXdvcmQ6IGNhdGVnb3J5LnRvTG93ZXJDYXNlKCksXHJcbiAgICAgICAgICAgIGJpdGluZGV4OiBvTWRsLmJpdGluZGV4LFxyXG4gICAgICAgICAgICBfcmFua2luZzogMC45NVxyXG4gICAgICAgIH0sIG9Nb2RlbC5zZWVuUnVsZXMpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaWYgKG9Nb2RlbC5kb21haW5zLmluZGV4T2Yob01kbC5kb21haW4pID49IDApIHtcclxuICAgICAgICBkZWJ1Z2xvZyhcIioqKioqKioqKioqaGVyZSBtZGxcIiArIEpTT04uc3RyaW5naWZ5KG9NZGwsIHVuZGVmaW5lZCwgMikpO1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRG9tYWluICcgKyBvTWRsLmRvbWFpbiArICcgYWxyZWFkeSBsb2FkZWQgd2hpbGUgbG9hZGluZyAnICsgc01vZGVsTmFtZSArICc/Jyk7XHJcbiAgICB9XHJcbiAgICAvLyBjaGVjayBwcm9wZXJ0aWVzIG9mIG1vZGVsXHJcbiAgICBPYmplY3Qua2V5cyhvTWRsKS5zb3J0KCkuZm9yRWFjaChmdW5jdGlvbiAoc1Byb3BlcnR5KSB7XHJcbiAgICAgICAgaWYgKEFSUl9NT0RFTF9QUk9QRVJUSUVTLmluZGV4T2Yoc1Byb3BlcnR5KSA8IDApIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNb2RlbCBwcm9wZXJ0eSBcIicgKyBzUHJvcGVydHkgKyAnXCIgbm90IGEga25vd24gbW9kZWwgcHJvcGVydHkgaW4gbW9kZWwgb2YgZG9tYWluICcgKyBvTWRsLmRvbWFpbiArICcgJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICAvLyBjb25zaWRlciBzdHJlYW1saW5pbmcgdGhlIGNhdGVnb3JpZXNcclxuICAgIG9Nb2RlbC5yYXdNb2RlbHNbb01kbC5kb21haW5dID0gb01kbDtcclxuXHJcbiAgICBvTW9kZWwuZnVsbC5kb21haW5bb01kbC5kb21haW5dID0ge1xyXG4gICAgICAgIGRlc2NyaXB0aW9uOiBvTWRsLmRlc2NyaXB0aW9uLFxyXG4gICAgICAgIGNhdGVnb3JpZXM6IGNhdGVnb3J5RGVzY3JpYmVkTWFwLFxyXG4gICAgICAgIGJpdGluZGV4OiBvTWRsLmJpdGluZGV4XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIGNoZWNrIHRoYXRcclxuXHJcblxyXG4gICAgLy8gY2hlY2sgdGhhdCBtZW1iZXJzIG9mIHdvcmRpbmRleCBhcmUgaW4gY2F0ZWdvcmllcyxcclxuICAgIG9NZGwud29yZGluZGV4ID0gb01kbC53b3JkaW5kZXggfHwgW107XHJcbiAgICBvTWRsLndvcmRpbmRleC5mb3JFYWNoKGZ1bmN0aW9uIChzV29yZEluZGV4KSB7XHJcbiAgICAgICAgaWYgKG9NZGwuY2F0ZWdvcnkuaW5kZXhPZihzV29yZEluZGV4KSA8IDApIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNb2RlbCB3b3JkaW5kZXggXCInICsgc1dvcmRJbmRleCArICdcIiBub3QgYSBjYXRlZ29yeSBvZiBkb21haW4gJyArIG9NZGwuZG9tYWluICsgJyAnKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIG9NZGwuZXhhY3RtYXRjaCA9IG9NZGwuZXhhY3RtYXRjaCB8fCBbXTtcclxuICAgIG9NZGwuZXhhY3RtYXRjaC5mb3JFYWNoKGZ1bmN0aW9uIChzRXhhY3RNYXRjaCkge1xyXG4gICAgICAgIGlmIChvTWRsLmNhdGVnb3J5LmluZGV4T2Yoc0V4YWN0TWF0Y2gpIDwgMCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01vZGVsIGV4YWN0bWF0Y2ggXCInICsgc0V4YWN0TWF0Y2ggKyAnXCIgbm90IGEgY2F0ZWdvcnkgb2YgZG9tYWluICcgKyBvTWRsLmRvbWFpbiArICcgJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBvTWRsLmNvbHVtbnMgPSBvTWRsLmNvbHVtbnMgfHwgW107XHJcbiAgICBvTWRsLmNvbHVtbnMuZm9yRWFjaChmdW5jdGlvbiAoc0V4YWN0TWF0Y2gpIHtcclxuICAgICAgICBpZiAob01kbC5jYXRlZ29yeS5pbmRleE9mKHNFeGFjdE1hdGNoKSA8IDApIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNb2RlbCBjb2x1bW4gXCInICsgc0V4YWN0TWF0Y2ggKyAnXCIgbm90IGEgY2F0ZWdvcnkgb2YgZG9tYWluICcgKyBvTWRsLmRvbWFpbiArICcgJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG5cclxuICAgIC8vIGFkZCByZWxhdGlvbiBkb21haW4gLT4gY2F0ZWdvcnlcclxuICAgIHZhciBkb21haW5TdHIgPSBNZXRhRi5Eb21haW4ob01kbC5kb21haW4pLnRvRnVsbFN0cmluZygpO1xyXG4gICAgdmFyIHJlbGF0aW9uU3RyID0gTWV0YUYuUmVsYXRpb24oTWV0YS5SRUxBVElPTl9oYXNDYXRlZ29yeSkudG9GdWxsU3RyaW5nKCk7XHJcbiAgICB2YXIgcmV2ZXJzZVJlbGF0aW9uU3RyID0gTWV0YUYuUmVsYXRpb24oTWV0YS5SRUxBVElPTl9pc0NhdGVnb3J5T2YpLnRvRnVsbFN0cmluZygpO1xyXG4gICAgb01kbC5jYXRlZ29yeS5mb3JFYWNoKGZ1bmN0aW9uIChzQ2F0ZWdvcnkpIHtcclxuXHJcbiAgICAgICAgdmFyIENhdGVnb3J5U3RyaW5nID0gTWV0YUYuQ2F0ZWdvcnkoc0NhdGVnb3J5KS50b0Z1bGxTdHJpbmcoKTtcclxuICAgICAgICBvTW9kZWwubWV0YS50M1tkb21haW5TdHJdID0gb01vZGVsLm1ldGEudDNbZG9tYWluU3RyXSB8fCB7fTtcclxuICAgICAgICBvTW9kZWwubWV0YS50M1tkb21haW5TdHJdW3JlbGF0aW9uU3RyXSA9IG9Nb2RlbC5tZXRhLnQzW2RvbWFpblN0cl1bcmVsYXRpb25TdHJdIHx8IHt9O1xyXG4gICAgICAgIG9Nb2RlbC5tZXRhLnQzW2RvbWFpblN0cl1bcmVsYXRpb25TdHJdW0NhdGVnb3J5U3RyaW5nXSA9IHt9O1xyXG5cclxuICAgICAgICBvTW9kZWwubWV0YS50M1tDYXRlZ29yeVN0cmluZ10gPSBvTW9kZWwubWV0YS50M1tDYXRlZ29yeVN0cmluZ10gfHwge307XHJcbiAgICAgICAgb01vZGVsLm1ldGEudDNbQ2F0ZWdvcnlTdHJpbmddW3JldmVyc2VSZWxhdGlvblN0cl0gPSBvTW9kZWwubWV0YS50M1tDYXRlZ29yeVN0cmluZ11bcmV2ZXJzZVJlbGF0aW9uU3RyXSB8fCB7fTtcclxuICAgICAgICBvTW9kZWwubWV0YS50M1tDYXRlZ29yeVN0cmluZ11bcmV2ZXJzZVJlbGF0aW9uU3RyXVtkb21haW5TdHJdID0ge307XHJcblxyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gYWRkIGEgcHJlY2ljZSBkb21haW4gbWF0Y2hydWxlXHJcbiAgICBpbnNlcnRSdWxlSWZOb3RQcmVzZW50KG9Nb2RlbC5tUnVsZXMsIHtcclxuICAgICAgICBjYXRlZ29yeTogXCJkb21haW5cIixcclxuICAgICAgICBtYXRjaGVkU3RyaW5nOiBvTWRsLmRvbWFpbixcclxuICAgICAgICB0eXBlOiBJTWF0Y2guRW51bVJ1bGVUeXBlLldPUkQsXHJcbiAgICAgICAgd29yZDogb01kbC5kb21haW4sXHJcbiAgICAgICAgYml0aW5kZXg6IG9NZGwuYml0aW5kZXgsXHJcbiAgICAgICAgX3Jhbmtpbmc6IDAuOTVcclxuICAgIH0sIG9Nb2RlbC5zZWVuUnVsZXMpO1xyXG5cclxuICAgIC8vIGNoZWNrIHRoZSB0b29sXHJcbiAgICBpZiAob01kbC50b29sICYmIG9NZGwudG9vbC5yZXF1aXJlcykge1xyXG4gICAgICAgIHZhciByZXF1aXJlcyA9IE9iamVjdC5rZXlzKG9NZGwudG9vbC5yZXF1aXJlcyB8fCB7fSk7XHJcbiAgICAgICAgdmFyIGRpZmYgPSBfLmRpZmZlcmVuY2UocmVxdWlyZXMsIG9NZGwuY2F0ZWdvcnkpO1xyXG4gICAgICAgIGlmIChkaWZmLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coYCAke29NZGwuZG9tYWlufSA6IFVua293biBjYXRlZ29yeSBpbiByZXF1aXJlcyBvZiB0b29sOiBcImAgKyBkaWZmLmpvaW4oJ1wiJykgKyAnXCInKTtcclxuICAgICAgICAgICAgcHJvY2Vzcy5leGl0KC0xKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIG9wdGlvbmFsID0gT2JqZWN0LmtleXMob01kbC50b29sLm9wdGlvbmFsKTtcclxuICAgICAgICBkaWZmID0gXy5kaWZmZXJlbmNlKG9wdGlvbmFsLCBvTWRsLmNhdGVnb3J5KTtcclxuICAgICAgICBpZiAoZGlmZi5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGAgJHtvTWRsLmRvbWFpbn0gOiBVbmtvd24gY2F0ZWdvcnkgb3B0aW9uYWwgb2YgdG9vbDogXCJgICsgZGlmZi5qb2luKCdcIicpICsgJ1wiJyk7XHJcbiAgICAgICAgICAgIHByb2Nlc3MuZXhpdCgtMSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIE9iamVjdC5rZXlzKG9NZGwudG9vbC5zZXRzIHx8IHt9KS5mb3JFYWNoKGZ1bmN0aW9uIChzZXRJRCkge1xyXG4gICAgICAgICAgICB2YXIgZGlmZiA9IF8uZGlmZmVyZW5jZShvTWRsLnRvb2wuc2V0c1tzZXRJRF0uc2V0LCBvTWRsLmNhdGVnb3J5KTtcclxuICAgICAgICAgICAgaWYgKGRpZmYubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYCAke29NZGwuZG9tYWlufSA6IFVua293biBjYXRlZ29yeSBpbiBzZXRJZCAke3NldElEfSBvZiB0b29sOiBcImAgKyBkaWZmLmpvaW4oJ1wiJykgKyAnXCInKTtcclxuICAgICAgICAgICAgICAgIHByb2Nlc3MuZXhpdCgtMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gZXh0cmFjdCB0b29scyBhbiBhZGQgdG8gdG9vbHM6XHJcbiAgICAgICAgb01vZGVsLnRvb2xzLmZpbHRlcihmdW5jdGlvbiAob0VudHJ5KSB7XHJcbiAgICAgICAgICAgIGlmIChvRW50cnkubmFtZSA9PT0gKG9NZGwudG9vbCAmJiBvTWRsLnRvb2wubmFtZSkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiVG9vbCBcIiArIG9NZGwudG9vbC5uYW1lICsgXCIgYWxyZWFkeSBwcmVzZW50IHdoZW4gbG9hZGluZyBcIiArIHNNb2RlbE5hbWUpO1xyXG4gICAgICAgICAgICAgICAgLy90aHJvdyBuZXcgRXJyb3IoJ0RvbWFpbiBhbHJlYWR5IGxvYWRlZD8nKTtcclxuICAgICAgICAgICAgICAgIHByb2Nlc3MuZXhpdCgtMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgb01kbC50b29saGlkZGVuID0gdHJ1ZTtcclxuICAgICAgICBvTWRsLnRvb2wucmVxdWlyZXMgPSB7IFwiaW1wb3NzaWJsZVwiOiB7fSB9O1xyXG4gICAgfVxyXG4gICAgLy8gYWRkIHRoZSB0b29sIG5hbWUgYXMgcnVsZSB1bmxlc3MgaGlkZGVuXHJcbiAgICBpZiAoIW9NZGwudG9vbGhpZGRlbiAmJiBvTWRsLnRvb2wgJiYgb01kbC50b29sLm5hbWUpIHtcclxuICAgICAgICBpbnNlcnRSdWxlSWZOb3RQcmVzZW50KG9Nb2RlbC5tUnVsZXMsIHtcclxuICAgICAgICAgICAgY2F0ZWdvcnk6IFwidG9vbFwiLFxyXG4gICAgICAgICAgICBtYXRjaGVkU3RyaW5nOiBvTWRsLnRvb2wubmFtZSxcclxuICAgICAgICAgICAgdHlwZTogSU1hdGNoLkVudW1SdWxlVHlwZS5XT1JELFxyXG4gICAgICAgICAgICB3b3JkOiBvTWRsLnRvb2wubmFtZSxcclxuICAgICAgICAgICAgYml0aW5kZXg6IG9NZGwuYml0aW5kZXgsXHJcbiAgICAgICAgICAgIF9yYW5raW5nOiAwLjk1XHJcbiAgICAgICAgfSwgb01vZGVsLnNlZW5SdWxlcyk7XHJcbiAgICB9O1xyXG4gICAgaWYgKG9NZGwuc3lub255bXMgJiYgb01kbC5zeW5vbnltc1tcInRvb2xcIl0pIHtcclxuICAgICAgICBhZGRTeW5vbnltcyhvTWRsLnN5bm9ueW1zW1widG9vbFwiXSwgXCJ0b29sXCIsIG9NZGwudG9vbC5uYW1lLCBvTWRsLmJpdGluZGV4LCBvTW9kZWwubVJ1bGVzLCBvTW9kZWwuc2VlblJ1bGVzKTtcclxuICAgIH07XHJcbiAgICBpZiAob01kbC5zeW5vbnltcykge1xyXG4gICAgICAgIE9iamVjdC5rZXlzKG9NZGwuc3lub255bXMpLmZvckVhY2goZnVuY3Rpb24gKHNzeW5rZXkpIHtcclxuICAgICAgICAgICAgaWYgKG9NZGwuY2F0ZWdvcnkuaW5kZXhPZihzc3lua2V5KSA+PSAwICYmIHNzeW5rZXkgIT09IFwidG9vbFwiKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAob01vZGVsLmZ1bGwuZG9tYWluW29NZGwuZG9tYWluXS5jYXRlZ29yaWVzW3NzeW5rZXldKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb01vZGVsLmZ1bGwuZG9tYWluW29NZGwuZG9tYWluXS5jYXRlZ29yaWVzW3NzeW5rZXldLnN5bm9ueW1zID0gb01kbC5zeW5vbnltc1tzc3lua2V5XTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBhZGRTeW5vbnltcyhvTWRsLnN5bm9ueW1zW3NzeW5rZXldLCBcImNhdGVnb3J5XCIsIHNzeW5rZXksIG9NZGwuYml0aW5kZXgsIG9Nb2RlbC5tUnVsZXMsIG9Nb2RlbC5zZWVuUnVsZXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBvTW9kZWwuZG9tYWlucy5wdXNoKG9NZGwuZG9tYWluKTtcclxuICAgIGlmIChvTWRsLnRvb2wubmFtZSkge1xyXG4gICAgICAgIG9Nb2RlbC50b29scy5wdXNoKG9NZGwudG9vbCk7XHJcbiAgICB9XHJcbiAgICBvTW9kZWwuY2F0ZWdvcnkgPSBvTW9kZWwuY2F0ZWdvcnkuY29uY2F0KG9NZGwuY2F0ZWdvcnkpO1xyXG4gICAgb01vZGVsLmNhdGVnb3J5LnNvcnQoKTtcclxuICAgIG9Nb2RlbC5jYXRlZ29yeSA9IG9Nb2RlbC5jYXRlZ29yeS5maWx0ZXIoZnVuY3Rpb24gKHN0cmluZywgaW5kZXgpIHtcclxuICAgICAgICByZXR1cm4gb01vZGVsLmNhdGVnb3J5W2luZGV4XSAhPT0gb01vZGVsLmNhdGVnb3J5W2luZGV4ICsgMV07XHJcbiAgICB9KTtcclxuXHJcbn0gLy8gbG9hZG1vZGVsXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc3BsaXRSdWxlcyhydWxlczogSU1hdGNoLm1SdWxlW10pOiBJTWF0Y2guU3BsaXRSdWxlcyB7XHJcbiAgICB2YXIgcmVzID0ge307XHJcbiAgICB2YXIgbm9uV29yZFJ1bGVzID0gW107XHJcbiAgICBydWxlcy5mb3JFYWNoKGZ1bmN0aW9uIChydWxlKSB7XHJcbiAgICAgICAgaWYgKHJ1bGUudHlwZSA9PT0gSU1hdGNoLkVudW1SdWxlVHlwZS5XT1JEKSB7XHJcbiAgICAgICAgICAgIGlmICghcnVsZS5sb3dlcmNhc2V3b3JkKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJSdWxlIGhhcyBubyBtZW1iZXIgbG93ZXJjYXNld29yZFwiICsgSlNPTi5zdHJpbmdpZnkocnVsZSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJlc1tydWxlLmxvd2VyY2FzZXdvcmRdID0gcmVzW3J1bGUubG93ZXJjYXNld29yZF0gfHwgeyBiaXRpbmRleDogMCwgcnVsZXM6IFtdIH07XHJcbiAgICAgICAgICAgIHJlc1tydWxlLmxvd2VyY2FzZXdvcmRdLmJpdGluZGV4ID0gcmVzW3J1bGUubG93ZXJjYXNld29yZF0uYml0aW5kZXggfCBydWxlLmJpdGluZGV4O1xyXG4gICAgICAgICAgICByZXNbcnVsZS5sb3dlcmNhc2V3b3JkXS5ydWxlcy5wdXNoKHJ1bGUpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIG5vbldvcmRSdWxlcy5wdXNoKHJ1bGUpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB3b3JkTWFwOiByZXMsXHJcbiAgICAgICAgbm9uV29yZFJ1bGVzOiBub25Xb3JkUnVsZXMsXHJcbiAgICAgICAgYWxsUnVsZXM6IHJ1bGVzLFxyXG4gICAgICAgIHdvcmRDYWNoZSA6IHt9XHJcbiAgICB9O1xyXG59XHJcblxyXG5mdW5jdGlvbiBjbXBMZW5ndGhTb3J0KGE6IHN0cmluZywgYjogc3RyaW5nKSB7XHJcbiAgICB2YXIgZCA9IGEubGVuZ3RoIC0gYi5sZW5ndGg7XHJcbiAgICBpZiAoZCkge1xyXG4gICAgICAgIHJldHVybiBkO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGEubG9jYWxlQ29tcGFyZShiKTtcclxufVxyXG5cclxuaW1wb3J0ICogYXMgRGlzdGFuY2UgZnJvbSAnLi4vdXRpbHMvZGFtZXJhdUxldmVuc2h0ZWluJztcclxuaW1wb3J0ICogYXMgQWxnb2wgZnJvbSAnLi4vbWF0Y2gvYWxnb2wnO1xyXG4vLyBvZmZzZXRbMF0gOiBsZW4tMlxyXG4vLyAgICAgICAgICAgICBsZW4gLTFcclxuLy8gICAgICAgICAgICAgbGVuXHJcbi8vICAgICAgICAgICAgIGxlbiArMVxyXG4vLyAgICAgICAgICAgICBsZW4gKzJcclxuLy8gICAgICAgICAgICAgbGVuICszXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZmluZE5leHRMZW4odGFyZ2V0TGVuOiBudW1iZXIsIGFycjogc3RyaW5nW10sIG9mZnNldHM6IG51bWJlcltdKSB7XHJcbiAgICBvZmZzZXRzLnNoaWZ0KCk7XHJcbiAgICBmb3IgKHZhciBpID0gb2Zmc2V0c1s0XTsgKGkgPCBhcnIubGVuZ3RoKSAmJiAoYXJyW2ldLmxlbmd0aCA8PSB0YXJnZXRMZW4pOyArK2kpIHtcclxuICAgICAgICAvKiBlbXB0eSovXHJcbiAgICB9XHJcbiAgICAvL2NvbnNvbGUubG9nKFwicHVzaGluZyBcIiArIGkpO1xyXG4gICAgb2Zmc2V0cy5wdXNoKGkpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYWRkUmFuZ2VSdWxlc1VubGVzc1ByZXNlbnQocnVsZXM6IElNYXRjaC5tUnVsZVtdLCBsY3dvcmQ6IHN0cmluZywgcmFuZ2VSdWxlczogSU1hdGNoLm1SdWxlW10sIHByZXNlbnRSdWxlc0ZvcktleTogSU1hdGNoLm1SdWxlW10sIHNlZW5SdWxlcykge1xyXG4gICAgcmFuZ2VSdWxlcy5mb3JFYWNoKHJhbmdlUnVsZSA9PiB7XHJcbiAgICAgICAgdmFyIG5ld1J1bGUgPSBPYmplY3QuYXNzaWduKHt9LCByYW5nZVJ1bGUpO1xyXG4gICAgICAgIG5ld1J1bGUubG93ZXJjYXNld29yZCA9IGxjd29yZDtcclxuICAgICAgICBuZXdSdWxlLndvcmQgPSBsY3dvcmQ7XHJcbiAgICAgICAgLy9pZigobGN3b3JkID09PSAnc2VydmljZXMnIHx8IGxjd29yZCA9PT0gJ3NlcnZpY2UnKSAmJiBuZXdSdWxlLnJhbmdlLnJ1bGUubG93ZXJjYXNld29yZC5pbmRleE9mKCdvZGF0YScpPj0wKSB7XHJcbiAgICAgICAgLy8gICAgY29uc29sZS5sb2coXCJhZGRpbmcgXCIrIEpTT04uc3RyaW5naWZ5KG5ld1J1bGUpICsgXCJcXG5cIik7XHJcbiAgICAgICAgLy99XHJcbiAgICAgICAgLy90b2RvOiBjaGVjayB3aGV0aGVyIGFuIGVxdWl2YWxlbnQgcnVsZSBpcyBhbHJlYWR5IHByZXNlbnQ/XHJcbiAgICAgICAgdmFyIGNudCA9IHJ1bGVzLmxlbmd0aDtcclxuICAgICAgICBpbnNlcnRSdWxlSWZOb3RQcmVzZW50KHJ1bGVzLCBuZXdSdWxlLCBzZWVuUnVsZXMpO1xyXG4gICAgfSlcclxufVxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBhZGRDbG9zZUV4YWN0UmFuZ2VSdWxlcyhydWxlczogSU1hdGNoLm1SdWxlW10sIHNlZW5SdWxlcykge1xyXG4gICAgdmFyIGtleXNNYXAgPSB7fSBhcyB7IFtrZXk6IHN0cmluZ106IElNYXRjaC5tUnVsZVtdIH07XHJcbiAgICB2YXIgcmFuZ2VLZXlzTWFwID0ge30gYXMgeyBba2V5OiBzdHJpbmddOiBJTWF0Y2gubVJ1bGVbXSB9O1xyXG4gICAgcnVsZXMuZm9yRWFjaChydWxlID0+IHtcclxuICAgICAgICBpZiAocnVsZS50eXBlID09PSBJTWF0Y2guRW51bVJ1bGVUeXBlLldPUkQpIHtcclxuICAgICAgICAgICAgLy9rZXlzTWFwW3J1bGUubG93ZXJjYXNld29yZF0gPSAxO1xyXG4gICAgICAgICAgICBrZXlzTWFwW3J1bGUubG93ZXJjYXNld29yZF0gPSBrZXlzTWFwW3J1bGUubG93ZXJjYXNld29yZF0gfHwgW107XHJcbiAgICAgICAgICAgIGtleXNNYXBbcnVsZS5sb3dlcmNhc2V3b3JkXS5wdXNoKHJ1bGUpO1xyXG4gICAgICAgICAgICBpZiAoIXJ1bGUuZXhhY3RPbmx5ICYmIHJ1bGUucmFuZ2UpIHtcclxuICAgICAgICAgICAgICAgIHJhbmdlS2V5c01hcFtydWxlLmxvd2VyY2FzZXdvcmRdID0gcmFuZ2VLZXlzTWFwW3J1bGUubG93ZXJjYXNld29yZF0gfHwgW107XHJcbiAgICAgICAgICAgICAgICByYW5nZUtleXNNYXBbcnVsZS5sb3dlcmNhc2V3b3JkXS5wdXNoKHJ1bGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGtleXNNYXApO1xyXG4gICAga2V5cy5zb3J0KGNtcExlbmd0aFNvcnQpO1xyXG4gICAgdmFyIGxlbiA9IDA7XHJcbiAgICBrZXlzLmZvckVhY2goKGtleSwgaW5kZXgpID0+IHtcclxuICAgICAgICBpZiAoa2V5Lmxlbmd0aCAhPSBsZW4pIHtcclxuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcInNoaWZ0IHRvIGxlblwiICsga2V5Lmxlbmd0aCArICcgYXQgJyArIGluZGV4ICsgJyAnICsga2V5ICk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxlbiA9IGtleS5sZW5ndGg7XHJcbiAgICB9KTtcclxuICAgIC8vICAga2V5cyA9IGtleXMuc2xpY2UoMCwyMDAwKTtcclxuICAgIHZhciByYW5nZUtleXMgPSBPYmplY3Qua2V5cyhyYW5nZUtleXNNYXApO1xyXG4gICAgcmFuZ2VLZXlzLnNvcnQoY21wTGVuZ3RoU29ydCk7XHJcbiAgICAvL2NvbnNvbGUubG9nKGAgJHtrZXlzLmxlbmd0aH0ga2V5cyBhbmQgJHtyYW5nZUtleXMubGVuZ3RofSByYW5nZWtleXMgYCk7XHJcbiAgICB2YXIgbG93ID0gMDtcclxuICAgIHZhciBoaWdoID0gMDtcclxuICAgIHZhciBsYXN0bGVuID0gMDtcclxuICAgIHZhciBvZmZzZXRzID0gWzAsIDAsIDAsIDAsIDAsIDBdO1xyXG4gICAgdmFyIGxlbiA9IHJhbmdlS2V5cy5sZW5ndGg7XHJcbiAgICBmaW5kTmV4dExlbigwLCBrZXlzLCBvZmZzZXRzKTtcclxuICAgIGZpbmROZXh0TGVuKDEsIGtleXMsIG9mZnNldHMpO1xyXG4gICAgZmluZE5leHRMZW4oMiwga2V5cywgb2Zmc2V0cyk7XHJcblxyXG4gICAgcmFuZ2VLZXlzLmZvckVhY2goZnVuY3Rpb24gKHJhbmdlS2V5KSB7XHJcbiAgICAgICAgaWYgKHJhbmdlS2V5Lmxlbmd0aCAhPT0gbGFzdGxlbikge1xyXG4gICAgICAgICAgICBmb3IgKGkgPSBsYXN0bGVuICsgMTsgaSA8PSByYW5nZUtleS5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgZmluZE5leHRMZW4oaSArIDIsIGtleXMsIG9mZnNldHMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vICAgY29uc29sZS5sb2coYCBzaGlmdGVkIHRvICR7cmFuZ2VLZXkubGVuZ3RofSB3aXRoIG9mZnNldHMgYmVlaW5nICR7b2Zmc2V0cy5qb2luKCcgJyl9YCk7XHJcbiAgICAgICAgICAgIC8vICAgY29uc29sZS5sb2coYCBoZXJlIDAgJHtvZmZzZXRzWzBdfSA6ICR7a2V5c1tNYXRoLm1pbihrZXlzLmxlbmd0aC0xLCBvZmZzZXRzWzBdKV0ubGVuZ3RofSAgJHtrZXlzW01hdGgubWluKGtleXMubGVuZ3RoLTEsIG9mZnNldHNbMF0pXX0gYCk7XHJcbiAgICAgICAgICAgIC8vICBjb25zb2xlLmxvZyhgIGhlcmUgNS0xICAke2tleXNbb2Zmc2V0c1s1XS0xXS5sZW5ndGh9ICAke2tleXNbb2Zmc2V0c1s1XS0xXX0gYCk7XHJcbiAgICAgICAgICAgIC8vICAgY29uc29sZS5sb2coYCBoZXJlIDUgJHtvZmZzZXRzWzVdfSA6ICR7a2V5c1tNYXRoLm1pbihrZXlzLmxlbmd0aC0xLCBvZmZzZXRzWzVdKV0ubGVuZ3RofSAgJHtrZXlzW01hdGgubWluKGtleXMubGVuZ3RoLTEsIG9mZnNldHNbNV0pXX0gYCk7XHJcbiAgICAgICAgICAgIGxhc3RsZW4gPSByYW5nZUtleS5sZW5ndGg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAodmFyIGkgPSBvZmZzZXRzWzBdOyBpIDwgb2Zmc2V0c1s1XTsgKytpKSB7XHJcbiAgICAgICAgICAgIHZhciBkID0gRGlzdGFuY2UuY2FsY0Rpc3RhbmNlQWRqdXN0ZWQocmFuZ2VLZXksIGtleXNbaV0pO1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhgJHtyYW5nZUtleS5sZW5ndGgta2V5c1tpXS5sZW5ndGh9ICR7ZH0gJHtyYW5nZUtleX0gYW5kICR7a2V5c1tpXX0gIGApO1xyXG4gICAgICAgICAgICBpZiAoKGQgIT09IDEuMCkgJiYgKGQgPj0gQWxnb2wuQ3V0b2ZmX3JhbmdlQ2xvc2VNYXRjaCkpIHtcclxuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coYHdvdWxkIGFkZCAke3JhbmdlS2V5fSBmb3IgJHtrZXlzW2ldfSAke2R9YCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgY250ID0gcnVsZXMubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgLy8gd2Ugb25seSBoYXZlIHRvIGFkZCBpZiB0aGVyZSBpcyBub3QgeWV0IGEgbWF0Y2ggcnVsZSBoZXJlIHdoaWNoIHBvaW50cyB0byB0aGUgc2FtZVxyXG4gICAgICAgICAgICAgICAgYWRkUmFuZ2VSdWxlc1VubGVzc1ByZXNlbnQocnVsZXMsIGtleXNbaV0sIHJhbmdlS2V5c01hcFtyYW5nZUtleV0sIGtleXNNYXBba2V5c1tpXV0sIHNlZW5SdWxlcyk7XHJcbiAgICAgICAgICAgICAgICBpZiAocnVsZXMubGVuZ3RoID4gY250KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhgIGFkZGVkICR7KHJ1bGVzLmxlbmd0aCAtIGNudCl9IHJlY29yZHMgYXQke3JhbmdlS2V5fSBmb3IgJHtrZXlzW2ldfSAke2R9YCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICAvKlxyXG4gICAgW1xyXG4gICAgICAgIFsnYUVGRycsJ2FFRkdIJ10sXHJcbiAgICAgICAgWydhRUZHSCcsJ2FFRkdISSddLFxyXG4gICAgICAgIFsnT2RhdGEnLCdPRGF0YXMnXSxcclxuICAgWydPZGF0YScsJ09kYXRhcyddLFxyXG4gICBbJ09kYXRhJywnT2RhdGInXSxcclxuICAgWydPZGF0YScsJ1VEYXRhJ10sXHJcbiAgIFsnc2VydmljZScsJ3NlcnZpY2VzJ10sXHJcbiAgIFsndGhpcyBpc2Z1bm55IGFuZCBtb3JlJywndGhpcyBpc2Z1bm55IGFuZCBtb3JlcyddLFxyXG4gICAgXS5mb3JFYWNoKHJlYyA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coYGRpc3RhbmNlICR7cmVjWzBdfSAke3JlY1sxXX0gOiAke0Rpc3RhbmNlLmNhbGNEaXN0YW5jZShyZWNbMF0scmVjWzFdKX0gIGFkZiAke0Rpc3RhbmNlLmNhbGNEaXN0YW5jZUFkanVzdGVkKHJlY1swXSxyZWNbMV0pfSBgKTtcclxuXHJcbiAgICB9KTtcclxuICAgIGNvbnNvbGUubG9nKFwiZGlzdGFuY2UgT2RhdGEgVWRhdGFcIisgRGlzdGFuY2UuY2FsY0Rpc3RhbmNlKCdPRGF0YScsJ1VEYXRhJykpO1xyXG4gICAgY29uc29sZS5sb2coXCJkaXN0YW5jZSBPZGF0YSBPZGF0YlwiKyBEaXN0YW5jZS5jYWxjRGlzdGFuY2UoJ09EYXRhJywnT0RhdGInKSk7XHJcbiAgICBjb25zb2xlLmxvZyhcImRpc3RhbmNlIE9kYXRhcyBPZGF0YVwiKyBEaXN0YW5jZS5jYWxjRGlzdGFuY2UoJ09EYXRhJywnT0RhdGFhJykpO1xyXG4gICAgY29uc29sZS5sb2coXCJkaXN0YW5jZSBPZGF0YXMgYWJjZGVcIisgRGlzdGFuY2UuY2FsY0Rpc3RhbmNlKCdhYmNkZScsJ2FiY2RlZicpKTtcclxuICAgIGNvbnNvbGUubG9nKFwiZGlzdGFuY2Ugc2VydmljZXMgXCIrIERpc3RhbmNlLmNhbGNEaXN0YW5jZSgnc2VydmljZXMnLCdzZXJ2aWNlJykpO1xyXG4gICAgKi9cclxufVxyXG52YXIgbiA9IDA7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbG9hZE1vZGVscyhtb2RlbFBhdGg/OiBzdHJpbmcpOiBJTWF0Y2guSU1vZGVscyB7XHJcbiAgICB2YXIgb01vZGVsOiBJTWF0Y2guSU1vZGVscztcclxuICAgIG9Nb2RlbCA9IHtcclxuICAgICAgICBmdWxsOiB7IGRvbWFpbjoge30gfSxcclxuICAgICAgICByYXdNb2RlbHM6IHt9LFxyXG4gICAgICAgIGRvbWFpbnM6IFtdLFxyXG4gICAgICAgIHRvb2xzOiBbXSxcclxuICAgICAgICBydWxlczogdW5kZWZpbmVkLFxyXG4gICAgICAgIGNhdGVnb3J5OiBbXSxcclxuICAgICAgICBvcGVyYXRvcnM6IHt9LFxyXG4gICAgICAgIG1SdWxlczogW10sXHJcbiAgICAgICAgc2VlblJ1bGVzOiB7fSxcclxuICAgICAgICByZWNvcmRzOiBbXSxcclxuICAgICAgICBtZXRhOiB7IHQzOiB7fSB9XHJcbiAgICB9XHJcbiAgICB2YXIgdCA9IERhdGUubm93KCk7XHJcbiAgICBtb2RlbFBhdGggPSBtb2RlbFBhdGggfHwgZW52TW9kZWxQYXRoO1xyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgICAgdmFyIGEgPSBDaXJjdWxhclNlci5sb2FkKCcuLycgKyBtb2RlbFBhdGggKyAnL19jYWNoZWZhbHNlLmpzJyk7XHJcbiAgICAgICAgLy9jb25zb2xlLmxvZyhcImZvdW5kIGEgY2FjaGUgPyAgXCIgKyAhIWEpO1xyXG4gICAgICAgIC8vYSA9IHVuZGVmaW5lZDtcclxuICAgICAgICBpZiAoYSkge1xyXG4gICAgICAgICAgICBkZWJ1Z2xvZyhcIiByZXR1cm4gcHJlcGFyZXNlIG1vZGVsIFwiKTtcclxuICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52LkFCT1RfRU1BSUxfVVNFUikge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJsb2FkZWQgbW9kZWxzIGZyb20gY2FjaGUgaW4gXCIgKyAoRGF0ZS5ub3coKSAtIHQpICsgXCIgXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBhO1xyXG4gICAgICAgIH1cclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAvL2NvbnNvbGUubG9nKCdlcnJvcicgKyBlKTtcclxuICAgICAgICAvLyBubyBjYWNoZSBmaWxlLFxyXG4gICAgfVxyXG4gICAgdmFyIG1kbHMgPSByZWFkRmlsZUFzSlNPTignLi8nICsgbW9kZWxQYXRoICsgJy9tb2RlbHMuanNvbicpO1xyXG4gICAgbWRscy5mb3JFYWNoKGZ1bmN0aW9uIChzTW9kZWxOYW1lKSB7XHJcbiAgICAgICAgbG9hZE1vZGVsKG1vZGVsUGF0aCwgc01vZGVsTmFtZSwgb01vZGVsKVxyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gYWRkIHRoZSBjYXRlZ29yaWVzIHRvIHRoZSBtb2RlbDpcclxuICAgIC8qXHJcbiAgICBvTW9kZWwuY2F0ZWdvcnkuZm9yRWFjaChmdW5jdGlvbiAoY2F0ZWdvcnkpIHtcclxuICAgICAgICBpbnNlcnRSdWxlSWZOb3RQcmVzZW50KG9Nb2RlbC5tUnVsZXMsIHtcclxuICAgICAgICAgICAgY2F0ZWdvcnk6IFwiY2F0ZWdvcnlcIixcclxuICAgICAgICAgICAgbWF0Y2hlZFN0cmluZzogY2F0ZWdvcnksXHJcbiAgICAgICAgICAgIHR5cGU6IElNYXRjaC5FbnVtUnVsZVR5cGUuV09SRCxcclxuICAgICAgICAgICAgd29yZDogY2F0ZWdvcnksXHJcbiAgICAgICAgICAgIGxvd2VyY2FzZXdvcmQ6IGNhdGVnb3J5LnRvTG93ZXJDYXNlKCksXHJcbiAgICAgICAgICAgIGJpdGluZGV4IDogb01kbC5cclxuICAgICAgICAgICAgX3Jhbmtpbmc6IDAuOTVcclxuICAgICAgICB9LCBvTW9kZWwuc2VlblJ1bGVzKTtcclxuICAgIH0pO1xyXG4gICAgKi9cclxuXHJcbiAgICB2YXIgbWV0YUJpdEluZGV4ID0gZ2V0RG9tYWluQml0SW5kZXgoJ21ldGEnLCBvTW9kZWwpO1xyXG5cclxuICAgIC8vIGFkZCB0aGUgZG9tYWluIG1ldGEgcnVsZVxyXG4gICAgaW5zZXJ0UnVsZUlmTm90UHJlc2VudChvTW9kZWwubVJ1bGVzLCB7XHJcbiAgICAgICAgY2F0ZWdvcnk6IFwibWV0YVwiLFxyXG4gICAgICAgIG1hdGNoZWRTdHJpbmc6IFwiZG9tYWluXCIsXHJcbiAgICAgICAgdHlwZTogSU1hdGNoLkVudW1SdWxlVHlwZS5XT1JELFxyXG4gICAgICAgIHdvcmQ6IFwiZG9tYWluXCIsXHJcbiAgICAgICAgYml0aW5kZXg6IG1ldGFCaXRJbmRleCxcclxuICAgICAgICBfcmFua2luZzogMC45NVxyXG4gICAgfSwgb01vZGVsLnNlZW5SdWxlcyk7XHJcblxyXG5cclxuICAgIHZhciBmaWxsZXJCaXRJbmRleCA9IGdldERvbWFpbkJpdEluZGV4KCdtZXRhJywgb01vZGVsKTtcclxuICAgIC8vYWRkIGEgZmlsbGVyIHJ1bGVcclxuICAgIHZhciBmaWxsZXJzID0gIHJlYWRGaWxlQXNKU09OKCcuLycgKyBtb2RlbFBhdGggKyAnL2ZpbGxlci5qc29uJyk7XHJcbiAgICB2YXIgcmUgPSBcIl4oKFwiICsgZmlsbGVycy5qb2luKFwiKXwoXCIpICsgXCIpKSRcIjtcclxuICAgIG9Nb2RlbC5tUnVsZXMucHVzaCh7XHJcbiAgICAgICAgY2F0ZWdvcnk6IFwiZmlsbGVyXCIsXHJcbiAgICAgICAgdHlwZTogSU1hdGNoLkVudW1SdWxlVHlwZS5SRUdFWFAsXHJcbiAgICAgICAgcmVnZXhwOiBuZXcgUmVnRXhwKHJlLCBcImlcIiksXHJcbiAgICAgICAgbWF0Y2hlZFN0cmluZzogXCJmaWxsZXJcIixcclxuICAgICAgICBiaXRpbmRleDogZmlsbGVyQml0SW5kZXgsXHJcbiAgICAgICAgX3Jhbmtpbmc6IDAuOVxyXG4gICAgfSk7XHJcblxyXG4gICAgLy9hZGQgb3BlcmF0b3JzXHJcbiAgICB2YXIgb3BlcmF0b3JzID0gcmVhZEZpbGVBc0pTT04oJy4vcmVzb3VyY2VzL21vZGVsL29wZXJhdG9ycy5qc29uJyk7XHJcbiAgICB2YXIgb3BlcmF0b3JCaXRJbmRleCA9IGdldERvbWFpbkJpdEluZGV4KCdvcGVyYXRvcnMnLCBvTW9kZWwpO1xyXG4gICAgT2JqZWN0LmtleXMob3BlcmF0b3JzLm9wZXJhdG9ycykuZm9yRWFjaChmdW5jdGlvbiAob3BlcmF0b3IpIHtcclxuICAgICAgICBpZiAoSU1hdGNoLmFPcGVyYXRvck5hbWVzLmluZGV4T2Yob3BlcmF0b3IpIDwgMCkge1xyXG4gICAgICAgICAgICBkZWJ1Z2xvZyhcInVua25vd24gb3BlcmF0b3IgXCIgKyBvcGVyYXRvcik7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInVua25vd24gb3BlcmF0b3IgXCIgKyBvcGVyYXRvcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG9Nb2RlbC5vcGVyYXRvcnNbb3BlcmF0b3JdID0gb3BlcmF0b3JzLm9wZXJhdG9yc1tvcGVyYXRvcl07XHJcbiAgICAgICAgb01vZGVsLm9wZXJhdG9yc1tvcGVyYXRvcl0ub3BlcmF0b3IgPSA8SU1hdGNoLk9wZXJhdG9yTmFtZT5vcGVyYXRvcjtcclxuICAgICAgICBPYmplY3QuZnJlZXplKG9Nb2RlbC5vcGVyYXRvcnNbb3BlcmF0b3JdKTtcclxuICAgICAgICB2YXIgd29yZCA9IG9wZXJhdG9yO1xyXG4gICAgICAgIGluc2VydFJ1bGVJZk5vdFByZXNlbnQob01vZGVsLm1SdWxlcywge1xyXG4gICAgICAgICAgICBjYXRlZ29yeTogXCJvcGVyYXRvclwiLFxyXG4gICAgICAgICAgICB3b3JkOiB3b3JkLnRvTG93ZXJDYXNlKCksXHJcbiAgICAgICAgICAgIGxvd2VyY2FzZXdvcmQ6IHdvcmQudG9Mb3dlckNhc2UoKSxcclxuICAgICAgICAgICAgdHlwZTogSU1hdGNoLkVudW1SdWxlVHlwZS5XT1JELFxyXG4gICAgICAgICAgICBtYXRjaGVkU3RyaW5nOiB3b3JkLFxyXG4gICAgICAgICAgICBiaXRpbmRleDogb3BlcmF0b3JCaXRJbmRleCxcclxuICAgICAgICAgICAgX3Jhbmtpbmc6IDAuOVxyXG4gICAgICAgIH0sIG9Nb2RlbC5zZWVuUnVsZXMpO1xyXG4gICAgICAgIC8vIGFkZCBhbGwgc3lub255bXNcclxuICAgICAgICBpZiAob3BlcmF0b3JzLnN5bm9ueW1zW29wZXJhdG9yXSkge1xyXG4gICAgICAgICAgICBPYmplY3Qua2V5cyhvcGVyYXRvcnMuc3lub255bXNbb3BlcmF0b3JdKS5mb3JFYWNoKGZ1bmN0aW9uIChzeW5vbnltKSB7XHJcbiAgICAgICAgICAgICAgICBpbnNlcnRSdWxlSWZOb3RQcmVzZW50KG9Nb2RlbC5tUnVsZXMsIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXRlZ29yeTogXCJvcGVyYXRvclwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHdvcmQ6IHN5bm9ueW0udG9Mb3dlckNhc2UoKSxcclxuICAgICAgICAgICAgICAgICAgICBsb3dlcmNhc2V3b3JkOiBzeW5vbnltLnRvTG93ZXJDYXNlKCksXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogSU1hdGNoLkVudW1SdWxlVHlwZS5XT1JELFxyXG4gICAgICAgICAgICAgICAgICAgIG1hdGNoZWRTdHJpbmc6IG9wZXJhdG9yLFxyXG4gICAgICAgICAgICAgICAgICAgIGJpdGluZGV4OiBvcGVyYXRvckJpdEluZGV4LFxyXG4gICAgICAgICAgICAgICAgICAgIF9yYW5raW5nOiAwLjlcclxuICAgICAgICAgICAgICAgIH0sIG9Nb2RlbC5zZWVuUnVsZXMpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIC8qXHJcbiAgICAgICAgfSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgY2F0ZWdvcnk6IFwiZmlsbGVyXCIsXHJcbiAgICAgICAgICB0eXBlOiAxLFxyXG4gICAgICAgICAgcmVnZXhwOiAvXigoc3RhcnQpfChzaG93KXwoZnJvbSl8KGluKSkkL2ksXHJcbiAgICAgICAgICBtYXRjaGVkU3RyaW5nOiBcImZpbGxlclwiLFxyXG4gICAgICAgICAgX3Jhbmtpbmc6IDAuOVxyXG4gICAgICAgIH0sXHJcbiAgICAqL1xyXG4gICAgb01vZGVsLm1SdWxlcyA9IG9Nb2RlbC5tUnVsZXMuc29ydChJbnB1dEZpbHRlclJ1bGVzLmNtcE1SdWxlKTtcclxuICAgIGFkZENsb3NlRXhhY3RSYW5nZVJ1bGVzKG9Nb2RlbC5tUnVsZXMsIG9Nb2RlbC5zZWVuUnVsZXMpO1xyXG4gICAgb01vZGVsLm1SdWxlcyA9IG9Nb2RlbC5tUnVsZXMuc29ydChJbnB1dEZpbHRlclJ1bGVzLmNtcE1SdWxlKTtcclxuICAgIGlmIChnbG9iYWwgJiYgZ2xvYmFsLmdjKSB7XHJcbiAgICAgICAgZ2xvYmFsLmdjKCk7XHJcbiAgICB9XHJcbiAgICBvTW9kZWwucnVsZXMgPSBzcGxpdFJ1bGVzKG9Nb2RlbC5tUnVsZXMpO1xyXG4gICAgaWYgKGdsb2JhbCAmJiBnbG9iYWwuZ2MpIHtcclxuICAgICAgICBnbG9iYWwuZ2MoKTtcclxuICAgIH1cclxuICAgIG9Nb2RlbC50b29scyA9IG9Nb2RlbC50b29scy5zb3J0KFRvb2xzLmNtcFRvb2xzKTtcclxuICAgIGRlbGV0ZSBvTW9kZWwuc2VlblJ1bGVzO1xyXG4gICAgZGVidWdsb2coJ3NhdmluZycpO1xyXG4gICAgaWYgKGdsb2JhbCAmJiBnbG9iYWwuZ2MpIHtcclxuICAgICAgICBnbG9iYWwuZ2MoKTtcclxuICAgIH1cclxuICAgIENpcmN1bGFyU2VyLnNhdmUoJy4vJyArIG1vZGVsUGF0aCArICcvX2NhY2hlZmFsc2UuanMnLCBvTW9kZWwpO1xyXG4gICAgaWYgKGdsb2JhbCAmJiBnbG9iYWwuZ2MpIHtcclxuICAgICAgICBnbG9iYWwuZ2MoKTtcclxuICAgIH1cclxuICAgIGlmIChwcm9jZXNzLmVudi5BQk9UX0VNQUlMX1VTRVIpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhcImxvYWRlZCBtb2RlbHMgYnkgY2FsY3VsYXRpb24gaW4gXCIgKyAoRGF0ZS5ub3coKSAtIHQpICsgXCIgXCIpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG9Nb2RlbDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNvcnRDYXRlZ29yaWVzQnlJbXBvcnRhbmNlKG1hcDogeyBba2V5OiBzdHJpbmddOiBJTWF0Y2guSUNhdGVnb3J5RGVzYyB9LCBjYXRzOiBzdHJpbmdbXSk6IHN0cmluZ1tdIHtcclxuICAgIHZhciByZXMgPSBjYXRzLnNsaWNlKDApO1xyXG4gICAgcmVzLnNvcnQocmFua0NhdGVnb3J5QnlJbXBvcnRhbmNlLmJpbmQodW5kZWZpbmVkLCBtYXApKTtcclxuICAgIHJldHVybiByZXM7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByYW5rQ2F0ZWdvcnlCeUltcG9ydGFuY2UobWFwOiB7IFtrZXk6IHN0cmluZ106IElNYXRjaC5JQ2F0ZWdvcnlEZXNjIH0sIGNhdGE6IHN0cmluZywgY2F0Yjogc3RyaW5nKTogbnVtYmVyIHtcclxuICAgIHZhciBjYXRBRGVzYyA9IG1hcFtjYXRhXTtcclxuICAgIHZhciBjYXRCRGVzYyA9IG1hcFtjYXRiXTtcclxuICAgIGlmIChjYXRhID09PSBjYXRiKSB7XHJcbiAgICAgICAgcmV0dXJuIDA7XHJcbiAgICB9XHJcbiAgICAvLyBpZiBhIGlzIGJlZm9yZSBiLCByZXR1cm4gLTFcclxuICAgIGlmIChjYXRBRGVzYyAmJiAhY2F0QkRlc2MpIHtcclxuICAgICAgICByZXR1cm4gLTE7XHJcbiAgICB9XHJcbiAgICBpZiAoIWNhdEFEZXNjICYmIGNhdEJEZXNjKSB7XHJcbiAgICAgICAgcmV0dXJuICsxO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBwcmlvQSA9IChjYXRBRGVzYyAmJiBjYXRBRGVzYy5pbXBvcnRhbmNlKSB8fCA5OTtcclxuICAgIHZhciBwcmlvQiA9IChjYXRCRGVzYyAmJiBjYXRCRGVzYy5pbXBvcnRhbmNlKSB8fCA5OTtcclxuICAgIC8vIGxvd2VyIHByaW8gZ29lcyB0byBmcm9udFxyXG4gICAgdmFyIHIgPSBwcmlvQSAtIHByaW9CO1xyXG4gICAgaWYgKHIpIHtcclxuICAgICAgICByZXR1cm4gcjtcclxuICAgIH1cclxuICAgIHJldHVybiBjYXRhLmxvY2FsZUNvbXBhcmUoY2F0Yik7XHJcbn1cclxuXHJcbmNvbnN0IE1ldGFGID0gTWV0YS5nZXRNZXRhRmFjdG9yeSgpO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldE9wZXJhdG9yKG1kbDogSU1hdGNoLklNb2RlbHMsIG9wZXJhdG9yOiBzdHJpbmcpOiBJTWF0Y2guSU9wZXJhdG9yIHtcclxuICAgIHJldHVybiBtZGwub3BlcmF0b3JzW29wZXJhdG9yXTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFJlc3VsdEFzQXJyYXkobWRsOiBJTWF0Y2guSU1vZGVscywgYTogTWV0YS5JTWV0YSwgcmVsOiBNZXRhLklNZXRhKTogTWV0YS5JTWV0YVtdIHtcclxuICAgIGlmIChyZWwudG9UeXBlKCkgIT09ICdyZWxhdGlvbicpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJleHBlY3QgcmVsYXRpb24gYXMgMm5kIGFyZ1wiKTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgcmVzID0gbWRsLm1ldGEudDNbYS50b0Z1bGxTdHJpbmcoKV0gJiZcclxuICAgICAgICBtZGwubWV0YS50M1thLnRvRnVsbFN0cmluZygpXVtyZWwudG9GdWxsU3RyaW5nKCldO1xyXG4gICAgaWYgKCFyZXMpIHtcclxuICAgICAgICByZXR1cm4gW107XHJcbiAgICB9XHJcbiAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMocmVzKS5zb3J0KCkubWFwKE1ldGFGLnBhcnNlSU1ldGEpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q2F0ZWdvcmllc0ZvckRvbWFpbih0aGVNb2RlbDogSU1hdGNoLklNb2RlbHMsIGRvbWFpbjogc3RyaW5nKTogc3RyaW5nW10ge1xyXG4gICAgaWYgKHRoZU1vZGVsLmRvbWFpbnMuaW5kZXhPZihkb21haW4pIDwgMCkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkRvbWFpbiBcXFwiXCIgKyBkb21haW4gKyBcIlxcXCIgbm90IHBhcnQgb2YgbW9kZWxcIik7XHJcbiAgICB9XHJcbiAgICB2YXIgcmVzID0gZ2V0UmVzdWx0QXNBcnJheSh0aGVNb2RlbCwgTWV0YUYuRG9tYWluKGRvbWFpbiksIE1ldGFGLlJlbGF0aW9uKE1ldGEuUkVMQVRJT05faGFzQ2F0ZWdvcnkpKTtcclxuICAgIHJldHVybiBNZXRhLmdldFN0cmluZ0FycmF5KHJlcyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRUYWJsZUNvbHVtbnModGhlTW9kZWw6IElNYXRjaC5JTW9kZWxzLCBkb21haW46IHN0cmluZyk6IHN0cmluZ1tdIHtcclxuICAgIGlmICh0aGVNb2RlbC5kb21haW5zLmluZGV4T2YoZG9tYWluKSA8IDApIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJEb21haW4gXFxcIlwiICsgZG9tYWluICsgXCJcXFwiIG5vdCBwYXJ0IG9mIG1vZGVsXCIpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoZU1vZGVsLnJhd01vZGVsc1tkb21haW5dLmNvbHVtbnMuc2xpY2UoMCk7XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogUmV0dXJuIGFsbCBjYXRlZ29yaWVzIG9mIGEgZG9tYWluIHdoaWNoIGNhbiBhcHBlYXIgb24gYSB3b3JkLFxyXG4gKiB0aGVzZSBhcmUgdHlwaWNhbGx5IHRoZSB3b3JkaW5kZXggZG9tYWlucyArIGVudHJpZXMgZ2VuZXJhdGVkIGJ5IGdlbmVyaWMgcnVsZXNcclxuICpcclxuICogVGhlIGN1cnJlbnQgaW1wbGVtZW50YXRpb24gaXMgYSBzaW1wbGlmaWNhdGlvblxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFBvdGVudGlhbFdvcmRDYXRlZ29yaWVzRm9yRG9tYWluKHRoZU1vZGVsOiBJTWF0Y2guSU1vZGVscywgZG9tYWluOiBzdHJpbmcpOiBzdHJpbmdbXSB7XHJcbiAgICAvLyB0aGlzIGlzIGEgc2ltcGxpZmllZCB2ZXJzaW9uXHJcbiAgICByZXR1cm4gZ2V0Q2F0ZWdvcmllc0ZvckRvbWFpbih0aGVNb2RlbCwgZG9tYWluKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldERvbWFpbnNGb3JDYXRlZ29yeSh0aGVNb2RlbDogSU1hdGNoLklNb2RlbHMsIGNhdGVnb3J5OiBzdHJpbmcpOiBzdHJpbmdbXSB7XHJcbiAgICBpZiAodGhlTW9kZWwuY2F0ZWdvcnkuaW5kZXhPZihjYXRlZ29yeSkgPCAwKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2F0ZWdvcnkgXFxcIlwiICsgY2F0ZWdvcnkgKyBcIlxcXCIgbm90IHBhcnQgb2YgbW9kZWxcIik7XHJcbiAgICB9XHJcbiAgICB2YXIgcmVzID0gZ2V0UmVzdWx0QXNBcnJheSh0aGVNb2RlbCwgTWV0YUYuQ2F0ZWdvcnkoY2F0ZWdvcnkpLCBNZXRhRi5SZWxhdGlvbihNZXRhLlJFTEFUSU9OX2lzQ2F0ZWdvcnlPZikpO1xyXG4gICAgcmV0dXJuIE1ldGEuZ2V0U3RyaW5nQXJyYXkocmVzKTtcclxufVxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRBbGxSZWNvcmRDYXRlZ29yaWVzRm9yVGFyZ2V0Q2F0ZWdvcnkobW9kZWw6IElNYXRjaC5JTW9kZWxzLCBjYXRlZ29yeTogc3RyaW5nLCB3b3Jkc29ubHk6IGJvb2xlYW4pOiB7IFtrZXk6IHN0cmluZ106IGJvb2xlYW4gfSB7XHJcbiAgICB2YXIgcmVzID0ge307XHJcbiAgICAvL1xyXG4gICAgdmFyIGZuID0gd29yZHNvbmx5ID8gZ2V0UG90ZW50aWFsV29yZENhdGVnb3JpZXNGb3JEb21haW4gOiBnZXRDYXRlZ29yaWVzRm9yRG9tYWluO1xyXG4gICAgdmFyIGRvbWFpbnMgPSBnZXREb21haW5zRm9yQ2F0ZWdvcnkobW9kZWwsIGNhdGVnb3J5KTtcclxuICAgIGRvbWFpbnMuZm9yRWFjaChmdW5jdGlvbiAoZG9tYWluKSB7XHJcbiAgICAgICAgZm4obW9kZWwsIGRvbWFpbikuZm9yRWFjaChmdW5jdGlvbiAod29yZGNhdCkge1xyXG4gICAgICAgICAgICByZXNbd29yZGNhdF0gPSB0cnVlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZnJlZXplKHJlcyk7XHJcbiAgICByZXR1cm4gcmVzO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0QWxsUmVjb3JkQ2F0ZWdvcmllc0ZvclRhcmdldENhdGVnb3JpZXMobW9kZWw6IElNYXRjaC5JTW9kZWxzLCBjYXRlZ29yaWVzOiBzdHJpbmdbXSwgd29yZHNvbmx5OiBib29sZWFuKTogeyBba2V5OiBzdHJpbmddOiBib29sZWFuIH0ge1xyXG4gICAgdmFyIHJlcyA9IHt9O1xyXG4gICAgLy9cclxuICAgIHZhciBmbiA9IHdvcmRzb25seSA/IGdldFBvdGVudGlhbFdvcmRDYXRlZ29yaWVzRm9yRG9tYWluIDogZ2V0Q2F0ZWdvcmllc0ZvckRvbWFpbjtcclxuICAgIHZhciBkb21haW5zID0gdW5kZWZpbmVkO1xyXG4gICAgY2F0ZWdvcmllcy5mb3JFYWNoKGZ1bmN0aW9uIChjYXRlZ29yeSkge1xyXG4gICAgICAgIHZhciBjYXRkb21haW5zID0gZ2V0RG9tYWluc0ZvckNhdGVnb3J5KG1vZGVsLCBjYXRlZ29yeSlcclxuICAgICAgICBpZiAoIWRvbWFpbnMpIHtcclxuICAgICAgICAgICAgZG9tYWlucyA9IGNhdGRvbWFpbnM7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZG9tYWlucyA9IF8uaW50ZXJzZWN0aW9uKGRvbWFpbnMsIGNhdGRvbWFpbnMpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgaWYgKGRvbWFpbnMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjYXRlZ29yaWVzICcgKyBVdGlscy5saXN0VG9RdW90ZWRDb21tYUFuZChjYXRlZ29yaWVzKSArICcgaGF2ZSBubyBjb21tb24gZG9tYWluLicpXHJcbiAgICB9XHJcbiAgICBkb21haW5zLmZvckVhY2goZnVuY3Rpb24gKGRvbWFpbikge1xyXG4gICAgICAgIGZuKG1vZGVsLCBkb21haW4pLmZvckVhY2goZnVuY3Rpb24gKHdvcmRjYXQpIHtcclxuICAgICAgICAgICAgcmVzW3dvcmRjYXRdID0gdHJ1ZTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmZyZWV6ZShyZXMpO1xyXG4gICAgcmV0dXJuIHJlcztcclxufVxyXG5cclxuXHJcbiIsIi8qKlxuICogRnVuY3Rpb25hbGl0eSBtYW5hZ2luZyB0aGUgbWF0Y2ggbW9kZWxzXG4gKlxuICogQGZpbGVcbiAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgZGVidWcgPSByZXF1aXJlKFwiZGVidWdcIik7XG52YXIgZGVidWdsb2cgPSBkZWJ1ZygnbW9kZWwnKTtcbnZhciBsb2dnZXIgPSByZXF1aXJlKFwiLi4vdXRpbHMvbG9nZ2VyXCIpO1xudmFyIGxvYWRsb2cgPSBsb2dnZXIubG9nZ2VyKCdtb2RlbGxvYWQnLCAnJyk7XG52YXIgSU1hdGNoID0gcmVxdWlyZShcIi4uL21hdGNoL2lmbWF0Y2hcIik7XG52YXIgSW5wdXRGaWx0ZXJSdWxlcyA9IHJlcXVpcmUoXCIuLi9tYXRjaC9pbnB1dEZpbHRlclJ1bGVzXCIpO1xudmFyIFRvb2xzID0gcmVxdWlyZShcIi4uL21hdGNoL3Rvb2xzXCIpO1xudmFyIGZzID0gcmVxdWlyZShcImZzXCIpO1xudmFyIE1ldGEgPSByZXF1aXJlKFwiLi9tZXRhXCIpO1xudmFyIFV0aWxzID0gcmVxdWlyZShcIi4uL3V0aWxzL3V0aWxzXCIpO1xudmFyIENpcmN1bGFyU2VyID0gcmVxdWlyZShcIi4uL3V0aWxzL2NpcmN1bGFyc2VyXCIpO1xudmFyIHByb2Nlc3MgPSByZXF1aXJlKFwicHJvY2Vzc1wiKTtcbnZhciBfID0gcmVxdWlyZShcImxvZGFzaFwiKTtcbi8qKlxuICogdGhlIG1vZGVsIHBhdGgsIG1heSBiZSBjb250cm9sbGVkIHZpYSBlbnZpcm9ubWVudCB2YXJpYWJsZVxuICovXG52YXIgZW52TW9kZWxQYXRoID0gcHJvY2Vzcy5lbnZbXCJBQk9UX01PREVMUEFUSFwiXSB8fCBcInRlc3Rtb2RlbFwiO1xudmFyIEFSUl9NT0RFTF9QUk9QRVJUSUVTID0gW1wiZG9tYWluXCIsIFwiYml0aW5kZXhcIiwgXCJkZWZhdWx0a2V5Y29sdW1uXCIsIFwiZGVmYXVsdHVyaVwiLCBcImNhdGVnb3J5RGVzY3JpYmVkXCIsIFwiY29sdW1uc1wiLCBcImRlc2NyaXB0aW9uXCIsIFwidG9vbFwiLCBcInRvb2xoaWRkZW5cIiwgXCJzeW5vbnltc1wiLCBcImNhdGVnb3J5XCIsIFwid29yZGluZGV4XCIsIFwiZXhhY3RtYXRjaFwiLCBcImhpZGRlblwiXTtcbmZ1bmN0aW9uIGFkZFN5bm9ueW1zKHN5bm9ueW1zLCBjYXRlZ29yeSwgc3lub255bUZvciwgYml0aW5kZXgsIG1SdWxlcywgc2Vlbikge1xuICAgIHN5bm9ueW1zLmZvckVhY2goZnVuY3Rpb24gKHN5bikge1xuICAgICAgICB2YXIgb1J1bGUgPSB7XG4gICAgICAgICAgICBjYXRlZ29yeTogY2F0ZWdvcnksXG4gICAgICAgICAgICBtYXRjaGVkU3RyaW5nOiBzeW5vbnltRm9yLFxuICAgICAgICAgICAgdHlwZTogMCAvKiBXT1JEICovLFxuICAgICAgICAgICAgd29yZDogc3luLFxuICAgICAgICAgICAgYml0aW5kZXg6IGJpdGluZGV4LFxuICAgICAgICAgICAgX3Jhbmtpbmc6IDAuOTVcbiAgICAgICAgfTtcbiAgICAgICAgZGVidWdsb2coZGVidWdsb2cuZW5hYmxlZCA/IChcImluc2VydGluZyBzeW5vbnltXCIgKyBKU09OLnN0cmluZ2lmeShvUnVsZSkpIDogJy0nKTtcbiAgICAgICAgaW5zZXJ0UnVsZUlmTm90UHJlc2VudChtUnVsZXMsIG9SdWxlLCBzZWVuKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGdldFJ1bGVLZXkocnVsZSkge1xuICAgIHZhciByMSA9IHJ1bGUubWF0Y2hlZFN0cmluZyArIFwiLXwtXCIgKyBydWxlLmNhdGVnb3J5ICsgXCIgLXwtIFwiICsgcnVsZS50eXBlICsgXCIgLXwtIFwiICsgcnVsZS53b3JkICsgXCIgXCI7XG4gICAgaWYgKHJ1bGUucmFuZ2UpIHtcbiAgICAgICAgdmFyIHIyID0gZ2V0UnVsZUtleShydWxlLnJhbmdlLnJ1bGUpO1xuICAgICAgICByMSArPSBcIiAtfC0gXCIgKyBydWxlLnJhbmdlLmxvdyArIFwiL1wiICsgcnVsZS5yYW5nZS5oaWdoICsgXCIgLXwtIFwiICsgcjI7XG4gICAgfVxuICAgIHJldHVybiByMTtcbn1cbnZhciBCcmVha2Rvd24gPSByZXF1aXJlKFwiLi4vbWF0Y2gvYnJlYWtkb3duXCIpO1xuLyogZ2l2ZW4gYSBydWxlIHdoaWNoIHJlcHJlc2VudHMgYSB3b3JkIHNlcXVlbmNlIHdoaWNoIGlzIHNwbGl0IGR1cmluZyB0b2tlbml6YXRpb24gKi9cbmZ1bmN0aW9uIGFkZEJlc3RTcGxpdChtUnVsZXMsIHJ1bGUsIHNlZW5SdWxlcykge1xuICAgIC8vaWYoIWdsb2JhbF9BZGRTcGxpdHMpIHtcbiAgICAvLyAgICByZXR1cm47XG4gICAgLy99XG4gICAgaWYgKHJ1bGUudHlwZSAhPT0gMCAvKiBXT1JEICovKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGJlc3QgPSBCcmVha2Rvd24ubWFrZU1hdGNoUGF0dGVybihydWxlLmxvd2VyY2FzZXdvcmQpO1xuICAgIGlmICghYmVzdCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBuZXdSdWxlID0ge1xuICAgICAgICBjYXRlZ29yeTogcnVsZS5jYXRlZ29yeSxcbiAgICAgICAgbWF0Y2hlZFN0cmluZzogcnVsZS5tYXRjaGVkU3RyaW5nLFxuICAgICAgICBiaXRpbmRleDogcnVsZS5iaXRpbmRleCxcbiAgICAgICAgd29yZDogYmVzdC5sb25nZXN0VG9rZW4sXG4gICAgICAgIHR5cGU6IDAsXG4gICAgICAgIGxvd2VyY2FzZXdvcmQ6IGJlc3QubG9uZ2VzdFRva2VuLFxuICAgICAgICBfcmFua2luZzogMC45NSxcbiAgICAgICAgLy8gICAgZXhhY3RPbmx5IDogcnVsZS5leGFjdE9ubHksXG4gICAgICAgIHJhbmdlOiBiZXN0LnNwYW5cbiAgICB9O1xuICAgIGlmIChydWxlLmV4YWN0T25seSkge1xuICAgICAgICBuZXdSdWxlLmV4YWN0T25seSA9IHJ1bGUuZXhhY3RPbmx5O1xuICAgIH1cbiAgICA7XG4gICAgbmV3UnVsZS5yYW5nZS5ydWxlID0gcnVsZTtcbiAgICBpbnNlcnRSdWxlSWZOb3RQcmVzZW50KG1SdWxlcywgbmV3UnVsZSwgc2VlblJ1bGVzKTtcbn1cbmV4cG9ydHMuYWRkQmVzdFNwbGl0ID0gYWRkQmVzdFNwbGl0O1xuZnVuY3Rpb24gaW5zZXJ0UnVsZUlmTm90UHJlc2VudChtUnVsZXMsIHJ1bGUsIHNlZW5SdWxlcykge1xuICAgIGlmIChydWxlLnR5cGUgIT09IDAgLyogV09SRCAqLykge1xuICAgICAgICBtUnVsZXMucHVzaChydWxlKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoKHJ1bGUud29yZCA9PT0gdW5kZWZpbmVkKSB8fCAocnVsZS5tYXRjaGVkU3RyaW5nID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignaWxsZWdhbCBydWxlJyArIEpTT04uc3RyaW5naWZ5KHJ1bGUsIHVuZGVmaW5lZCwgMikpO1xuICAgIH1cbiAgICB2YXIgciA9IGdldFJ1bGVLZXkocnVsZSk7XG4gICAgLyogaWYoIChydWxlLndvcmQgPT09IFwic2VydmljZVwiIHx8IHJ1bGUud29yZD09PSBcInNlcnZpY2VzXCIpICYmIHIuaW5kZXhPZignT0RhdGEnKSA+PSAwKSB7XG4gICAgICAgICBjb25zb2xlLmxvZyhcInJ1bGVrZXkgaXNcIiArIHIpO1xuICAgICAgICAgY29uc29sZS5sb2coXCJwcmVzZW5jZSBpcyBcIiArIEpTT04uc3RyaW5naWZ5KHNlZW5SdWxlc1tyXSkpO1xuICAgICB9Ki9cbiAgICBydWxlLmxvd2VyY2FzZXdvcmQgPSBydWxlLndvcmQudG9Mb3dlckNhc2UoKTtcbiAgICBpZiAoc2VlblJ1bGVzW3JdKSB7XG4gICAgICAgIGRlYnVnbG9nKGRlYnVnbG9nLmVuYWJsZWQgPyAoXCJBdHRlbXB0aW5nIHRvIGluc2VydCBkdXBsaWNhdGVcIiArIEpTT04uc3RyaW5naWZ5KHJ1bGUsIHVuZGVmaW5lZCwgMikpIDogXCItXCIpO1xuICAgICAgICB2YXIgZHVwbGljYXRlcyA9IHNlZW5SdWxlc1tyXS5maWx0ZXIoZnVuY3Rpb24gKG9FbnRyeSkge1xuICAgICAgICAgICAgcmV0dXJuIDAgPT09IElucHV0RmlsdGVyUnVsZXMuY29tcGFyZU1SdWxlRnVsbChvRW50cnksIHJ1bGUpO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGR1cGxpY2F0ZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNlZW5SdWxlc1tyXSA9IChzZWVuUnVsZXNbcl0gfHwgW10pO1xuICAgIHNlZW5SdWxlc1tyXS5wdXNoKHJ1bGUpO1xuICAgIGlmIChydWxlLndvcmQgPT09IFwiXCIpIHtcbiAgICAgICAgZGVidWdsb2coZGVidWdsb2cuZW5hYmxlZCA/ICgnU2tpcHBpbmcgcnVsZSB3aXRoIGVtdHB5IHdvcmQgJyArIEpTT04uc3RyaW5naWZ5KHJ1bGUsIHVuZGVmaW5lZCwgMikpIDogJy0nKTtcbiAgICAgICAgbG9hZGxvZygnU2tpcHBpbmcgcnVsZSB3aXRoIGVtdHB5IHdvcmQgJyArIEpTT04uc3RyaW5naWZ5KHJ1bGUsIHVuZGVmaW5lZCwgMikpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIG1SdWxlcy5wdXNoKHJ1bGUpO1xuICAgIGFkZEJlc3RTcGxpdChtUnVsZXMsIHJ1bGUsIHNlZW5SdWxlcyk7XG4gICAgcmV0dXJuO1xufVxuZnVuY3Rpb24gcmVhZEZpbGVBc0pTT04oZmlsZW5hbWUpIHtcbiAgICB2YXIgZGF0YSA9IGZzLnJlYWRGaWxlU3luYyhmaWxlbmFtZSwgJ3V0Zi04Jyk7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoZGF0YSk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiQ29udGVudCBvZiBmaWxlIFwiICsgZmlsZW5hbWUgKyBcIiBpcyBubyBqc29uXCIgKyBlKTtcbiAgICAgICAgcHJvY2Vzcy5leGl0KC0xKTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cbmZ1bmN0aW9uIGxvYWRNb2RlbERhdGEobW9kZWxQYXRoLCBvTWRsLCBzTW9kZWxOYW1lLCBvTW9kZWwpIHtcbiAgICAvLyByZWFkIHRoZSBkYXRhIC0+XG4gICAgLy8gZGF0YSBpcyBwcm9jZXNzZWQgaW50byBtUnVsZXMgZGlyZWN0bHksXG4gICAgdmFyIGJpdGluZGV4ID0gb01kbC5iaXRpbmRleDtcbiAgICB2YXIgc0ZpbGVOYW1lID0gKCcuLycgKyBtb2RlbFBhdGggKyAnLycgKyBzTW9kZWxOYW1lICsgXCIuZGF0YS5qc29uXCIpO1xuICAgIHZhciBvTWRsRGF0YSA9IHJlYWRGaWxlQXNKU09OKHNGaWxlTmFtZSk7XG4gICAgb01kbERhdGEuZm9yRWFjaChmdW5jdGlvbiAob0VudHJ5KSB7XG4gICAgICAgIGlmICghb0VudHJ5LmRvbWFpbikge1xuICAgICAgICAgICAgb0VudHJ5Ll9kb21haW4gPSBvTWRsLmRvbWFpbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIW9FbnRyeS50b29sICYmIG9NZGwudG9vbC5uYW1lKSB7XG4gICAgICAgICAgICBvRW50cnkudG9vbCA9IG9NZGwudG9vbC5uYW1lO1xuICAgICAgICB9XG4gICAgICAgIG9Nb2RlbC5yZWNvcmRzLnB1c2gob0VudHJ5KTtcbiAgICAgICAgb01kbC5jYXRlZ29yeS5mb3JFYWNoKGZ1bmN0aW9uIChjYXQpIHtcbiAgICAgICAgICAgIGlmIChvRW50cnlbY2F0XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBvRW50cnlbY2F0XSA9IFwibi9hXCI7XG4gICAgICAgICAgICAgICAgdmFyIGJ1ZyA9IFwiSU5DT05TSVNURU5UKj4gTW9kZWxEYXRhIFwiICsgc0ZpbGVOYW1lICsgXCIgZG9lcyBub3QgY29udGFpbiBjYXRlZ29yeSBcIiArIGNhdCArIFwiIHdpdGggdmFsdWUgJ3VuZGVmaW5lZCcsIHVuZGVmaW5lZCBpcyBpbGxlZ2FsIHZhbHVlLCB1c2Ugbi9hIFwiICsgSlNPTi5zdHJpbmdpZnkob0VudHJ5KSArIFwiXCI7XG4gICAgICAgICAgICAgICAgZGVidWdsb2coYnVnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIG9NZGwud29yZGluZGV4LmZvckVhY2goZnVuY3Rpb24gKGNhdGVnb3J5KSB7XG4gICAgICAgICAgICBpZiAob0VudHJ5W2NhdGVnb3J5XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgZGVidWdsb2coXCJJTkNPTlNJU1RFTlQqPiBNb2RlbERhdGEgXCIgKyBzRmlsZU5hbWUgKyBcIiBkb2VzIG5vdCBjb250YWluIGNhdGVnb3J5IFwiICsgY2F0ZWdvcnkgKyBcIiBvZiB3b3JkaW5kZXhcIiArIEpTT04uc3RyaW5naWZ5KG9FbnRyeSkgKyBcIlwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob0VudHJ5W2NhdGVnb3J5XSAhPT0gXCIqXCIpIHtcbiAgICAgICAgICAgICAgICB2YXIgc1N0cmluZyA9IG9FbnRyeVtjYXRlZ29yeV07XG4gICAgICAgICAgICAgICAgZGVidWdsb2coXCJwdXNoaW5nIHJ1bGUgd2l0aCBcIiArIGNhdGVnb3J5ICsgXCIgLT4gXCIgKyBzU3RyaW5nKTtcbiAgICAgICAgICAgICAgICB2YXIgb1J1bGUgPSB7XG4gICAgICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBjYXRlZ29yeSxcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2hlZFN0cmluZzogc1N0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogMCAvKiBXT1JEICovLFxuICAgICAgICAgICAgICAgICAgICB3b3JkOiBzU3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICBiaXRpbmRleDogYml0aW5kZXgsXG4gICAgICAgICAgICAgICAgICAgIF9yYW5raW5nOiAwLjk1XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBpZiAob01kbC5leGFjdG1hdGNoICYmIG9NZGwuZXhhY3RtYXRjaC5pbmRleE9mKGNhdGVnb3J5KSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIG9SdWxlLmV4YWN0T25seSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGluc2VydFJ1bGVJZk5vdFByZXNlbnQob01vZGVsLm1SdWxlcywgb1J1bGUsIG9Nb2RlbC5zZWVuUnVsZXMpO1xuICAgICAgICAgICAgICAgIGlmIChvTWRsRGF0YS5zeW5vbnltcyAmJiBvTWRsRGF0YS5zeW5vbnltc1tjYXRlZ29yeV0pIHtcbiAgICAgICAgICAgICAgICAgICAgYWRkU3lub255bXMob01kbERhdGEuc3lub255bXNbY2F0ZWdvcnldLCBjYXRlZ29yeSwgc1N0cmluZywgYml0aW5kZXgsIG9Nb2RlbC5tUnVsZXMsIG9Nb2RlbC5zZWVuUnVsZXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAob0VudHJ5LnN5bm9ueW1zICYmIG9FbnRyeS5zeW5vbnltc1tjYXRlZ29yeV0pIHtcbiAgICAgICAgICAgICAgICAgICAgYWRkU3lub255bXMob0VudHJ5LnN5bm9ueW1zW2NhdGVnb3J5XSwgY2F0ZWdvcnksIHNTdHJpbmcsIGJpdGluZGV4LCBvTW9kZWwubVJ1bGVzLCBvTW9kZWwuc2VlblJ1bGVzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gbG9hZE1vZGVsKG1vZGVsUGF0aCwgc01vZGVsTmFtZSwgb01vZGVsKSB7XG4gICAgZGVidWdsb2coXCIgbG9hZGluZyBcIiArIHNNb2RlbE5hbWUgKyBcIiAuLi4uXCIpO1xuICAgIHZhciBvTWRsID0gcmVhZEZpbGVBc0pTT04oJy4vJyArIG1vZGVsUGF0aCArICcvJyArIHNNb2RlbE5hbWUgKyBcIi5tb2RlbC5qc29uXCIpO1xuICAgIG1lcmdlTW9kZWxKc29uKHNNb2RlbE5hbWUsIG9NZGwsIG9Nb2RlbCk7XG4gICAgbG9hZE1vZGVsRGF0YShtb2RlbFBhdGgsIG9NZGwsIHNNb2RlbE5hbWUsIG9Nb2RlbCk7XG59XG5mdW5jdGlvbiBnZXREb21haW5CaXRJbmRleChkb21haW4sIG9Nb2RlbCkge1xuICAgIHZhciBpbmRleCA9IG9Nb2RlbC5kb21haW5zLmluZGV4T2YoZG9tYWluKTtcbiAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgIGluZGV4ID0gb01vZGVsLmRvbWFpbnMubGVuZ3RoO1xuICAgIH1cbiAgICBpZiAoaW5kZXggPj0gMzIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidG9vIG1hbnkgZG9tYWluIGZvciBzaW5nbGUgMzIgYml0IGluZGV4XCIpO1xuICAgIH1cbiAgICByZXR1cm4gMHgwMDAxIDw8IGluZGV4O1xufVxuZXhwb3J0cy5nZXREb21haW5CaXRJbmRleCA9IGdldERvbWFpbkJpdEluZGV4O1xuZnVuY3Rpb24gbWVyZ2VNb2RlbEpzb24oc01vZGVsTmFtZSwgb01kbCwgb01vZGVsKSB7XG4gICAgdmFyIGNhdGVnb3J5RGVzY3JpYmVkTWFwID0ge307XG4gICAgb01kbC5iaXRpbmRleCA9IGdldERvbWFpbkJpdEluZGV4KG9NZGwuZG9tYWluLCBvTW9kZWwpO1xuICAgIG9NZGwuY2F0ZWdvcnlEZXNjcmliZWQgPSBbXTtcbiAgICAvLyByZWN0aWZ5IGNhdGVnb3J5XG4gICAgb01kbC5jYXRlZ29yeSA9IG9NZGwuY2F0ZWdvcnkubWFwKGZ1bmN0aW9uIChjYXQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBjYXQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBjYXQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBjYXQubmFtZSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJNaXNzaW5nIG5hbWUgaW4gb2JqZWN0IHR5cGVkIGNhdGVnb3J5IGluIFwiICsgSlNPTi5zdHJpbmdpZnkoY2F0KSArIFwiIGluIG1vZGVsIFwiICsgc01vZGVsTmFtZSk7XG4gICAgICAgICAgICBwcm9jZXNzLmV4aXQoLTEpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGVnb3J5RGVzY3JpYmVkTWFwW2NhdC5uYW1lXSA9IGNhdDtcbiAgICAgICAgb01kbC5jYXRlZ29yeURlc2NyaWJlZC5wdXNoKGNhdCk7XG4gICAgICAgIHJldHVybiBjYXQubmFtZTtcbiAgICB9KTtcbiAgICAvLyBhZGQgdGhlIGNhdGVnb3JpZXMgdG8gdGhlIG1vZGVsOlxuICAgIG9NZGwuY2F0ZWdvcnkuZm9yRWFjaChmdW5jdGlvbiAoY2F0ZWdvcnkpIHtcbiAgICAgICAgaW5zZXJ0UnVsZUlmTm90UHJlc2VudChvTW9kZWwubVJ1bGVzLCB7XG4gICAgICAgICAgICBjYXRlZ29yeTogXCJjYXRlZ29yeVwiLFxuICAgICAgICAgICAgbWF0Y2hlZFN0cmluZzogY2F0ZWdvcnksXG4gICAgICAgICAgICB0eXBlOiAwIC8qIFdPUkQgKi8sXG4gICAgICAgICAgICB3b3JkOiBjYXRlZ29yeSxcbiAgICAgICAgICAgIGxvd2VyY2FzZXdvcmQ6IGNhdGVnb3J5LnRvTG93ZXJDYXNlKCksXG4gICAgICAgICAgICBiaXRpbmRleDogb01kbC5iaXRpbmRleCxcbiAgICAgICAgICAgIF9yYW5raW5nOiAwLjk1XG4gICAgICAgIH0sIG9Nb2RlbC5zZWVuUnVsZXMpO1xuICAgIH0pO1xuICAgIGlmIChvTW9kZWwuZG9tYWlucy5pbmRleE9mKG9NZGwuZG9tYWluKSA+PSAwKSB7XG4gICAgICAgIGRlYnVnbG9nKFwiKioqKioqKioqKipoZXJlIG1kbFwiICsgSlNPTi5zdHJpbmdpZnkob01kbCwgdW5kZWZpbmVkLCAyKSk7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRG9tYWluICcgKyBvTWRsLmRvbWFpbiArICcgYWxyZWFkeSBsb2FkZWQgd2hpbGUgbG9hZGluZyAnICsgc01vZGVsTmFtZSArICc/Jyk7XG4gICAgfVxuICAgIC8vIGNoZWNrIHByb3BlcnRpZXMgb2YgbW9kZWxcbiAgICBPYmplY3Qua2V5cyhvTWRsKS5zb3J0KCkuZm9yRWFjaChmdW5jdGlvbiAoc1Byb3BlcnR5KSB7XG4gICAgICAgIGlmIChBUlJfTU9ERUxfUFJPUEVSVElFUy5pbmRleE9mKHNQcm9wZXJ0eSkgPCAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01vZGVsIHByb3BlcnR5IFwiJyArIHNQcm9wZXJ0eSArICdcIiBub3QgYSBrbm93biBtb2RlbCBwcm9wZXJ0eSBpbiBtb2RlbCBvZiBkb21haW4gJyArIG9NZGwuZG9tYWluICsgJyAnKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIC8vIGNvbnNpZGVyIHN0cmVhbWxpbmluZyB0aGUgY2F0ZWdvcmllc1xuICAgIG9Nb2RlbC5yYXdNb2RlbHNbb01kbC5kb21haW5dID0gb01kbDtcbiAgICBvTW9kZWwuZnVsbC5kb21haW5bb01kbC5kb21haW5dID0ge1xuICAgICAgICBkZXNjcmlwdGlvbjogb01kbC5kZXNjcmlwdGlvbixcbiAgICAgICAgY2F0ZWdvcmllczogY2F0ZWdvcnlEZXNjcmliZWRNYXAsXG4gICAgICAgIGJpdGluZGV4OiBvTWRsLmJpdGluZGV4XG4gICAgfTtcbiAgICAvLyBjaGVjayB0aGF0XG4gICAgLy8gY2hlY2sgdGhhdCBtZW1iZXJzIG9mIHdvcmRpbmRleCBhcmUgaW4gY2F0ZWdvcmllcyxcbiAgICBvTWRsLndvcmRpbmRleCA9IG9NZGwud29yZGluZGV4IHx8IFtdO1xuICAgIG9NZGwud29yZGluZGV4LmZvckVhY2goZnVuY3Rpb24gKHNXb3JkSW5kZXgpIHtcbiAgICAgICAgaWYgKG9NZGwuY2F0ZWdvcnkuaW5kZXhPZihzV29yZEluZGV4KSA8IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTW9kZWwgd29yZGluZGV4IFwiJyArIHNXb3JkSW5kZXggKyAnXCIgbm90IGEgY2F0ZWdvcnkgb2YgZG9tYWluICcgKyBvTWRsLmRvbWFpbiArICcgJyk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBvTWRsLmV4YWN0bWF0Y2ggPSBvTWRsLmV4YWN0bWF0Y2ggfHwgW107XG4gICAgb01kbC5leGFjdG1hdGNoLmZvckVhY2goZnVuY3Rpb24gKHNFeGFjdE1hdGNoKSB7XG4gICAgICAgIGlmIChvTWRsLmNhdGVnb3J5LmluZGV4T2Yoc0V4YWN0TWF0Y2gpIDwgMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNb2RlbCBleGFjdG1hdGNoIFwiJyArIHNFeGFjdE1hdGNoICsgJ1wiIG5vdCBhIGNhdGVnb3J5IG9mIGRvbWFpbiAnICsgb01kbC5kb21haW4gKyAnICcpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgb01kbC5jb2x1bW5zID0gb01kbC5jb2x1bW5zIHx8IFtdO1xuICAgIG9NZGwuY29sdW1ucy5mb3JFYWNoKGZ1bmN0aW9uIChzRXhhY3RNYXRjaCkge1xuICAgICAgICBpZiAob01kbC5jYXRlZ29yeS5pbmRleE9mKHNFeGFjdE1hdGNoKSA8IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTW9kZWwgY29sdW1uIFwiJyArIHNFeGFjdE1hdGNoICsgJ1wiIG5vdCBhIGNhdGVnb3J5IG9mIGRvbWFpbiAnICsgb01kbC5kb21haW4gKyAnICcpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgLy8gYWRkIHJlbGF0aW9uIGRvbWFpbiAtPiBjYXRlZ29yeVxuICAgIHZhciBkb21haW5TdHIgPSBNZXRhRi5Eb21haW4ob01kbC5kb21haW4pLnRvRnVsbFN0cmluZygpO1xuICAgIHZhciByZWxhdGlvblN0ciA9IE1ldGFGLlJlbGF0aW9uKE1ldGEuUkVMQVRJT05faGFzQ2F0ZWdvcnkpLnRvRnVsbFN0cmluZygpO1xuICAgIHZhciByZXZlcnNlUmVsYXRpb25TdHIgPSBNZXRhRi5SZWxhdGlvbihNZXRhLlJFTEFUSU9OX2lzQ2F0ZWdvcnlPZikudG9GdWxsU3RyaW5nKCk7XG4gICAgb01kbC5jYXRlZ29yeS5mb3JFYWNoKGZ1bmN0aW9uIChzQ2F0ZWdvcnkpIHtcbiAgICAgICAgdmFyIENhdGVnb3J5U3RyaW5nID0gTWV0YUYuQ2F0ZWdvcnkoc0NhdGVnb3J5KS50b0Z1bGxTdHJpbmcoKTtcbiAgICAgICAgb01vZGVsLm1ldGEudDNbZG9tYWluU3RyXSA9IG9Nb2RlbC5tZXRhLnQzW2RvbWFpblN0cl0gfHwge307XG4gICAgICAgIG9Nb2RlbC5tZXRhLnQzW2RvbWFpblN0cl1bcmVsYXRpb25TdHJdID0gb01vZGVsLm1ldGEudDNbZG9tYWluU3RyXVtyZWxhdGlvblN0cl0gfHwge307XG4gICAgICAgIG9Nb2RlbC5tZXRhLnQzW2RvbWFpblN0cl1bcmVsYXRpb25TdHJdW0NhdGVnb3J5U3RyaW5nXSA9IHt9O1xuICAgICAgICBvTW9kZWwubWV0YS50M1tDYXRlZ29yeVN0cmluZ10gPSBvTW9kZWwubWV0YS50M1tDYXRlZ29yeVN0cmluZ10gfHwge307XG4gICAgICAgIG9Nb2RlbC5tZXRhLnQzW0NhdGVnb3J5U3RyaW5nXVtyZXZlcnNlUmVsYXRpb25TdHJdID0gb01vZGVsLm1ldGEudDNbQ2F0ZWdvcnlTdHJpbmddW3JldmVyc2VSZWxhdGlvblN0cl0gfHwge307XG4gICAgICAgIG9Nb2RlbC5tZXRhLnQzW0NhdGVnb3J5U3RyaW5nXVtyZXZlcnNlUmVsYXRpb25TdHJdW2RvbWFpblN0cl0gPSB7fTtcbiAgICB9KTtcbiAgICAvLyBhZGQgYSBwcmVjaWNlIGRvbWFpbiBtYXRjaHJ1bGVcbiAgICBpbnNlcnRSdWxlSWZOb3RQcmVzZW50KG9Nb2RlbC5tUnVsZXMsIHtcbiAgICAgICAgY2F0ZWdvcnk6IFwiZG9tYWluXCIsXG4gICAgICAgIG1hdGNoZWRTdHJpbmc6IG9NZGwuZG9tYWluLFxuICAgICAgICB0eXBlOiAwIC8qIFdPUkQgKi8sXG4gICAgICAgIHdvcmQ6IG9NZGwuZG9tYWluLFxuICAgICAgICBiaXRpbmRleDogb01kbC5iaXRpbmRleCxcbiAgICAgICAgX3Jhbmtpbmc6IDAuOTVcbiAgICB9LCBvTW9kZWwuc2VlblJ1bGVzKTtcbiAgICAvLyBjaGVjayB0aGUgdG9vbFxuICAgIGlmIChvTWRsLnRvb2wgJiYgb01kbC50b29sLnJlcXVpcmVzKSB7XG4gICAgICAgIHZhciByZXF1aXJlcyA9IE9iamVjdC5rZXlzKG9NZGwudG9vbC5yZXF1aXJlcyB8fCB7fSk7XG4gICAgICAgIHZhciBkaWZmID0gXy5kaWZmZXJlbmNlKHJlcXVpcmVzLCBvTWRsLmNhdGVnb3J5KTtcbiAgICAgICAgaWYgKGRpZmYubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCIgXCIgKyBvTWRsLmRvbWFpbiArIFwiIDogVW5rb3duIGNhdGVnb3J5IGluIHJlcXVpcmVzIG9mIHRvb2w6IFxcXCJcIiArIGRpZmYuam9pbignXCInKSArICdcIicpO1xuICAgICAgICAgICAgcHJvY2Vzcy5leGl0KC0xKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgb3B0aW9uYWwgPSBPYmplY3Qua2V5cyhvTWRsLnRvb2wub3B0aW9uYWwpO1xuICAgICAgICBkaWZmID0gXy5kaWZmZXJlbmNlKG9wdGlvbmFsLCBvTWRsLmNhdGVnb3J5KTtcbiAgICAgICAgaWYgKGRpZmYubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCIgXCIgKyBvTWRsLmRvbWFpbiArIFwiIDogVW5rb3duIGNhdGVnb3J5IG9wdGlvbmFsIG9mIHRvb2w6IFxcXCJcIiArIGRpZmYuam9pbignXCInKSArICdcIicpO1xuICAgICAgICAgICAgcHJvY2Vzcy5leGl0KC0xKTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3Qua2V5cyhvTWRsLnRvb2wuc2V0cyB8fCB7fSkuZm9yRWFjaChmdW5jdGlvbiAoc2V0SUQpIHtcbiAgICAgICAgICAgIHZhciBkaWZmID0gXy5kaWZmZXJlbmNlKG9NZGwudG9vbC5zZXRzW3NldElEXS5zZXQsIG9NZGwuY2F0ZWdvcnkpO1xuICAgICAgICAgICAgaWYgKGRpZmYubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiIFwiICsgb01kbC5kb21haW4gKyBcIiA6IFVua293biBjYXRlZ29yeSBpbiBzZXRJZCBcIiArIHNldElEICsgXCIgb2YgdG9vbDogXFxcIlwiICsgZGlmZi5qb2luKCdcIicpICsgJ1wiJyk7XG4gICAgICAgICAgICAgICAgcHJvY2Vzcy5leGl0KC0xKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIC8vIGV4dHJhY3QgdG9vbHMgYW4gYWRkIHRvIHRvb2xzOlxuICAgICAgICBvTW9kZWwudG9vbHMuZmlsdGVyKGZ1bmN0aW9uIChvRW50cnkpIHtcbiAgICAgICAgICAgIGlmIChvRW50cnkubmFtZSA9PT0gKG9NZGwudG9vbCAmJiBvTWRsLnRvb2wubmFtZSkpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlRvb2wgXCIgKyBvTWRsLnRvb2wubmFtZSArIFwiIGFscmVhZHkgcHJlc2VudCB3aGVuIGxvYWRpbmcgXCIgKyBzTW9kZWxOYW1lKTtcbiAgICAgICAgICAgICAgICAvL3Rocm93IG5ldyBFcnJvcignRG9tYWluIGFscmVhZHkgbG9hZGVkPycpO1xuICAgICAgICAgICAgICAgIHByb2Nlc3MuZXhpdCgtMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgb01kbC50b29saGlkZGVuID0gdHJ1ZTtcbiAgICAgICAgb01kbC50b29sLnJlcXVpcmVzID0geyBcImltcG9zc2libGVcIjoge30gfTtcbiAgICB9XG4gICAgLy8gYWRkIHRoZSB0b29sIG5hbWUgYXMgcnVsZSB1bmxlc3MgaGlkZGVuXG4gICAgaWYgKCFvTWRsLnRvb2xoaWRkZW4gJiYgb01kbC50b29sICYmIG9NZGwudG9vbC5uYW1lKSB7XG4gICAgICAgIGluc2VydFJ1bGVJZk5vdFByZXNlbnQob01vZGVsLm1SdWxlcywge1xuICAgICAgICAgICAgY2F0ZWdvcnk6IFwidG9vbFwiLFxuICAgICAgICAgICAgbWF0Y2hlZFN0cmluZzogb01kbC50b29sLm5hbWUsXG4gICAgICAgICAgICB0eXBlOiAwIC8qIFdPUkQgKi8sXG4gICAgICAgICAgICB3b3JkOiBvTWRsLnRvb2wubmFtZSxcbiAgICAgICAgICAgIGJpdGluZGV4OiBvTWRsLmJpdGluZGV4LFxuICAgICAgICAgICAgX3Jhbmtpbmc6IDAuOTVcbiAgICAgICAgfSwgb01vZGVsLnNlZW5SdWxlcyk7XG4gICAgfVxuICAgIDtcbiAgICBpZiAob01kbC5zeW5vbnltcyAmJiBvTWRsLnN5bm9ueW1zW1widG9vbFwiXSkge1xuICAgICAgICBhZGRTeW5vbnltcyhvTWRsLnN5bm9ueW1zW1widG9vbFwiXSwgXCJ0b29sXCIsIG9NZGwudG9vbC5uYW1lLCBvTWRsLmJpdGluZGV4LCBvTW9kZWwubVJ1bGVzLCBvTW9kZWwuc2VlblJ1bGVzKTtcbiAgICB9XG4gICAgO1xuICAgIGlmIChvTWRsLnN5bm9ueW1zKSB7XG4gICAgICAgIE9iamVjdC5rZXlzKG9NZGwuc3lub255bXMpLmZvckVhY2goZnVuY3Rpb24gKHNzeW5rZXkpIHtcbiAgICAgICAgICAgIGlmIChvTWRsLmNhdGVnb3J5LmluZGV4T2Yoc3N5bmtleSkgPj0gMCAmJiBzc3lua2V5ICE9PSBcInRvb2xcIikge1xuICAgICAgICAgICAgICAgIGlmIChvTW9kZWwuZnVsbC5kb21haW5bb01kbC5kb21haW5dLmNhdGVnb3JpZXNbc3N5bmtleV0pIHtcbiAgICAgICAgICAgICAgICAgICAgb01vZGVsLmZ1bGwuZG9tYWluW29NZGwuZG9tYWluXS5jYXRlZ29yaWVzW3NzeW5rZXldLnN5bm9ueW1zID0gb01kbC5zeW5vbnltc1tzc3lua2V5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYWRkU3lub255bXMob01kbC5zeW5vbnltc1tzc3lua2V5XSwgXCJjYXRlZ29yeVwiLCBzc3lua2V5LCBvTWRsLmJpdGluZGV4LCBvTW9kZWwubVJ1bGVzLCBvTW9kZWwuc2VlblJ1bGVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIG9Nb2RlbC5kb21haW5zLnB1c2gob01kbC5kb21haW4pO1xuICAgIGlmIChvTWRsLnRvb2wubmFtZSkge1xuICAgICAgICBvTW9kZWwudG9vbHMucHVzaChvTWRsLnRvb2wpO1xuICAgIH1cbiAgICBvTW9kZWwuY2F0ZWdvcnkgPSBvTW9kZWwuY2F0ZWdvcnkuY29uY2F0KG9NZGwuY2F0ZWdvcnkpO1xuICAgIG9Nb2RlbC5jYXRlZ29yeS5zb3J0KCk7XG4gICAgb01vZGVsLmNhdGVnb3J5ID0gb01vZGVsLmNhdGVnb3J5LmZpbHRlcihmdW5jdGlvbiAoc3RyaW5nLCBpbmRleCkge1xuICAgICAgICByZXR1cm4gb01vZGVsLmNhdGVnb3J5W2luZGV4XSAhPT0gb01vZGVsLmNhdGVnb3J5W2luZGV4ICsgMV07XG4gICAgfSk7XG59IC8vIGxvYWRtb2RlbFxuZnVuY3Rpb24gc3BsaXRSdWxlcyhydWxlcykge1xuICAgIHZhciByZXMgPSB7fTtcbiAgICB2YXIgbm9uV29yZFJ1bGVzID0gW107XG4gICAgcnVsZXMuZm9yRWFjaChmdW5jdGlvbiAocnVsZSkge1xuICAgICAgICBpZiAocnVsZS50eXBlID09PSAwIC8qIFdPUkQgKi8pIHtcbiAgICAgICAgICAgIGlmICghcnVsZS5sb3dlcmNhc2V3b3JkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUnVsZSBoYXMgbm8gbWVtYmVyIGxvd2VyY2FzZXdvcmRcIiArIEpTT04uc3RyaW5naWZ5KHJ1bGUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc1tydWxlLmxvd2VyY2FzZXdvcmRdID0gcmVzW3J1bGUubG93ZXJjYXNld29yZF0gfHwgeyBiaXRpbmRleDogMCwgcnVsZXM6IFtdIH07XG4gICAgICAgICAgICByZXNbcnVsZS5sb3dlcmNhc2V3b3JkXS5iaXRpbmRleCA9IHJlc1tydWxlLmxvd2VyY2FzZXdvcmRdLmJpdGluZGV4IHwgcnVsZS5iaXRpbmRleDtcbiAgICAgICAgICAgIHJlc1tydWxlLmxvd2VyY2FzZXdvcmRdLnJ1bGVzLnB1c2gocnVsZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBub25Xb3JkUnVsZXMucHVzaChydWxlKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICAgIHdvcmRNYXA6IHJlcyxcbiAgICAgICAgbm9uV29yZFJ1bGVzOiBub25Xb3JkUnVsZXMsXG4gICAgICAgIGFsbFJ1bGVzOiBydWxlcyxcbiAgICAgICAgd29yZENhY2hlOiB7fVxuICAgIH07XG59XG5leHBvcnRzLnNwbGl0UnVsZXMgPSBzcGxpdFJ1bGVzO1xuZnVuY3Rpb24gY21wTGVuZ3RoU29ydChhLCBiKSB7XG4gICAgdmFyIGQgPSBhLmxlbmd0aCAtIGIubGVuZ3RoO1xuICAgIGlmIChkKSB7XG4gICAgICAgIHJldHVybiBkO1xuICAgIH1cbiAgICByZXR1cm4gYS5sb2NhbGVDb21wYXJlKGIpO1xufVxudmFyIERpc3RhbmNlID0gcmVxdWlyZShcIi4uL3V0aWxzL2RhbWVyYXVMZXZlbnNodGVpblwiKTtcbnZhciBBbGdvbCA9IHJlcXVpcmUoXCIuLi9tYXRjaC9hbGdvbFwiKTtcbi8vIG9mZnNldFswXSA6IGxlbi0yXG4vLyAgICAgICAgICAgICBsZW4gLTFcbi8vICAgICAgICAgICAgIGxlblxuLy8gICAgICAgICAgICAgbGVuICsxXG4vLyAgICAgICAgICAgICBsZW4gKzJcbi8vICAgICAgICAgICAgIGxlbiArM1xuZnVuY3Rpb24gZmluZE5leHRMZW4odGFyZ2V0TGVuLCBhcnIsIG9mZnNldHMpIHtcbiAgICBvZmZzZXRzLnNoaWZ0KCk7XG4gICAgZm9yICh2YXIgaSA9IG9mZnNldHNbNF07IChpIDwgYXJyLmxlbmd0aCkgJiYgKGFycltpXS5sZW5ndGggPD0gdGFyZ2V0TGVuKTsgKytpKSB7XG4gICAgfVxuICAgIC8vY29uc29sZS5sb2coXCJwdXNoaW5nIFwiICsgaSk7XG4gICAgb2Zmc2V0cy5wdXNoKGkpO1xufVxuZXhwb3J0cy5maW5kTmV4dExlbiA9IGZpbmROZXh0TGVuO1xuZnVuY3Rpb24gYWRkUmFuZ2VSdWxlc1VubGVzc1ByZXNlbnQocnVsZXMsIGxjd29yZCwgcmFuZ2VSdWxlcywgcHJlc2VudFJ1bGVzRm9yS2V5LCBzZWVuUnVsZXMpIHtcbiAgICByYW5nZVJ1bGVzLmZvckVhY2goZnVuY3Rpb24gKHJhbmdlUnVsZSkge1xuICAgICAgICB2YXIgbmV3UnVsZSA9IE9iamVjdC5hc3NpZ24oe30sIHJhbmdlUnVsZSk7XG4gICAgICAgIG5ld1J1bGUubG93ZXJjYXNld29yZCA9IGxjd29yZDtcbiAgICAgICAgbmV3UnVsZS53b3JkID0gbGN3b3JkO1xuICAgICAgICAvL2lmKChsY3dvcmQgPT09ICdzZXJ2aWNlcycgfHwgbGN3b3JkID09PSAnc2VydmljZScpICYmIG5ld1J1bGUucmFuZ2UucnVsZS5sb3dlcmNhc2V3b3JkLmluZGV4T2YoJ29kYXRhJyk+PTApIHtcbiAgICAgICAgLy8gICAgY29uc29sZS5sb2coXCJhZGRpbmcgXCIrIEpTT04uc3RyaW5naWZ5KG5ld1J1bGUpICsgXCJcXG5cIik7XG4gICAgICAgIC8vfVxuICAgICAgICAvL3RvZG86IGNoZWNrIHdoZXRoZXIgYW4gZXF1aXZhbGVudCBydWxlIGlzIGFscmVhZHkgcHJlc2VudD9cbiAgICAgICAgdmFyIGNudCA9IHJ1bGVzLmxlbmd0aDtcbiAgICAgICAgaW5zZXJ0UnVsZUlmTm90UHJlc2VudChydWxlcywgbmV3UnVsZSwgc2VlblJ1bGVzKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuYWRkUmFuZ2VSdWxlc1VubGVzc1ByZXNlbnQgPSBhZGRSYW5nZVJ1bGVzVW5sZXNzUHJlc2VudDtcbmZ1bmN0aW9uIGFkZENsb3NlRXhhY3RSYW5nZVJ1bGVzKHJ1bGVzLCBzZWVuUnVsZXMpIHtcbiAgICB2YXIga2V5c01hcCA9IHt9O1xuICAgIHZhciByYW5nZUtleXNNYXAgPSB7fTtcbiAgICBydWxlcy5mb3JFYWNoKGZ1bmN0aW9uIChydWxlKSB7XG4gICAgICAgIGlmIChydWxlLnR5cGUgPT09IDAgLyogV09SRCAqLykge1xuICAgICAgICAgICAgLy9rZXlzTWFwW3J1bGUubG93ZXJjYXNld29yZF0gPSAxO1xuICAgICAgICAgICAga2V5c01hcFtydWxlLmxvd2VyY2FzZXdvcmRdID0ga2V5c01hcFtydWxlLmxvd2VyY2FzZXdvcmRdIHx8IFtdO1xuICAgICAgICAgICAga2V5c01hcFtydWxlLmxvd2VyY2FzZXdvcmRdLnB1c2gocnVsZSk7XG4gICAgICAgICAgICBpZiAoIXJ1bGUuZXhhY3RPbmx5ICYmIHJ1bGUucmFuZ2UpIHtcbiAgICAgICAgICAgICAgICByYW5nZUtleXNNYXBbcnVsZS5sb3dlcmNhc2V3b3JkXSA9IHJhbmdlS2V5c01hcFtydWxlLmxvd2VyY2FzZXdvcmRdIHx8IFtdO1xuICAgICAgICAgICAgICAgIHJhbmdlS2V5c01hcFtydWxlLmxvd2VyY2FzZXdvcmRdLnB1c2gocnVsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGtleXNNYXApO1xuICAgIGtleXMuc29ydChjbXBMZW5ndGhTb3J0KTtcbiAgICB2YXIgbGVuID0gMDtcbiAgICBrZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSwgaW5kZXgpIHtcbiAgICAgICAgaWYgKGtleS5sZW5ndGggIT0gbGVuKSB7XG4gICAgICAgIH1cbiAgICAgICAgbGVuID0ga2V5Lmxlbmd0aDtcbiAgICB9KTtcbiAgICAvLyAgIGtleXMgPSBrZXlzLnNsaWNlKDAsMjAwMCk7XG4gICAgdmFyIHJhbmdlS2V5cyA9IE9iamVjdC5rZXlzKHJhbmdlS2V5c01hcCk7XG4gICAgcmFuZ2VLZXlzLnNvcnQoY21wTGVuZ3RoU29ydCk7XG4gICAgLy9jb25zb2xlLmxvZyhgICR7a2V5cy5sZW5ndGh9IGtleXMgYW5kICR7cmFuZ2VLZXlzLmxlbmd0aH0gcmFuZ2VrZXlzIGApO1xuICAgIHZhciBsb3cgPSAwO1xuICAgIHZhciBoaWdoID0gMDtcbiAgICB2YXIgbGFzdGxlbiA9IDA7XG4gICAgdmFyIG9mZnNldHMgPSBbMCwgMCwgMCwgMCwgMCwgMF07XG4gICAgdmFyIGxlbiA9IHJhbmdlS2V5cy5sZW5ndGg7XG4gICAgZmluZE5leHRMZW4oMCwga2V5cywgb2Zmc2V0cyk7XG4gICAgZmluZE5leHRMZW4oMSwga2V5cywgb2Zmc2V0cyk7XG4gICAgZmluZE5leHRMZW4oMiwga2V5cywgb2Zmc2V0cyk7XG4gICAgcmFuZ2VLZXlzLmZvckVhY2goZnVuY3Rpb24gKHJhbmdlS2V5KSB7XG4gICAgICAgIGlmIChyYW5nZUtleS5sZW5ndGggIT09IGxhc3RsZW4pIHtcbiAgICAgICAgICAgIGZvciAoaSA9IGxhc3RsZW4gKyAxOyBpIDw9IHJhbmdlS2V5Lmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgZmluZE5leHRMZW4oaSArIDIsIGtleXMsIG9mZnNldHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gICBjb25zb2xlLmxvZyhgIHNoaWZ0ZWQgdG8gJHtyYW5nZUtleS5sZW5ndGh9IHdpdGggb2Zmc2V0cyBiZWVpbmcgJHtvZmZzZXRzLmpvaW4oJyAnKX1gKTtcbiAgICAgICAgICAgIC8vICAgY29uc29sZS5sb2coYCBoZXJlIDAgJHtvZmZzZXRzWzBdfSA6ICR7a2V5c1tNYXRoLm1pbihrZXlzLmxlbmd0aC0xLCBvZmZzZXRzWzBdKV0ubGVuZ3RofSAgJHtrZXlzW01hdGgubWluKGtleXMubGVuZ3RoLTEsIG9mZnNldHNbMF0pXX0gYCk7XG4gICAgICAgICAgICAvLyAgY29uc29sZS5sb2coYCBoZXJlIDUtMSAgJHtrZXlzW29mZnNldHNbNV0tMV0ubGVuZ3RofSAgJHtrZXlzW29mZnNldHNbNV0tMV19IGApO1xuICAgICAgICAgICAgLy8gICBjb25zb2xlLmxvZyhgIGhlcmUgNSAke29mZnNldHNbNV19IDogJHtrZXlzW01hdGgubWluKGtleXMubGVuZ3RoLTEsIG9mZnNldHNbNV0pXS5sZW5ndGh9ICAke2tleXNbTWF0aC5taW4oa2V5cy5sZW5ndGgtMSwgb2Zmc2V0c1s1XSldfSBgKTtcbiAgICAgICAgICAgIGxhc3RsZW4gPSByYW5nZUtleS5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgaSA9IG9mZnNldHNbMF07IGkgPCBvZmZzZXRzWzVdOyArK2kpIHtcbiAgICAgICAgICAgIHZhciBkID0gRGlzdGFuY2UuY2FsY0Rpc3RhbmNlQWRqdXN0ZWQocmFuZ2VLZXksIGtleXNbaV0pO1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coYCR7cmFuZ2VLZXkubGVuZ3RoLWtleXNbaV0ubGVuZ3RofSAke2R9ICR7cmFuZ2VLZXl9IGFuZCAke2tleXNbaV19ICBgKTtcbiAgICAgICAgICAgIGlmICgoZCAhPT0gMS4wKSAmJiAoZCA+PSBBbGdvbC5DdXRvZmZfcmFuZ2VDbG9zZU1hdGNoKSkge1xuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coYHdvdWxkIGFkZCAke3JhbmdlS2V5fSBmb3IgJHtrZXlzW2ldfSAke2R9YCk7XG4gICAgICAgICAgICAgICAgdmFyIGNudCA9IHJ1bGVzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAvLyB3ZSBvbmx5IGhhdmUgdG8gYWRkIGlmIHRoZXJlIGlzIG5vdCB5ZXQgYSBtYXRjaCBydWxlIGhlcmUgd2hpY2ggcG9pbnRzIHRvIHRoZSBzYW1lXG4gICAgICAgICAgICAgICAgYWRkUmFuZ2VSdWxlc1VubGVzc1ByZXNlbnQocnVsZXMsIGtleXNbaV0sIHJhbmdlS2V5c01hcFtyYW5nZUtleV0sIGtleXNNYXBba2V5c1tpXV0sIHNlZW5SdWxlcyk7XG4gICAgICAgICAgICAgICAgaWYgKHJ1bGVzLmxlbmd0aCA+IGNudCkge1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuICAgIC8qXG4gICAgW1xuICAgICAgICBbJ2FFRkcnLCdhRUZHSCddLFxuICAgICAgICBbJ2FFRkdIJywnYUVGR0hJJ10sXG4gICAgICAgIFsnT2RhdGEnLCdPRGF0YXMnXSxcbiAgIFsnT2RhdGEnLCdPZGF0YXMnXSxcbiAgIFsnT2RhdGEnLCdPZGF0YiddLFxuICAgWydPZGF0YScsJ1VEYXRhJ10sXG4gICBbJ3NlcnZpY2UnLCdzZXJ2aWNlcyddLFxuICAgWyd0aGlzIGlzZnVubnkgYW5kIG1vcmUnLCd0aGlzIGlzZnVubnkgYW5kIG1vcmVzJ10sXG4gICAgXS5mb3JFYWNoKHJlYyA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKGBkaXN0YW5jZSAke3JlY1swXX0gJHtyZWNbMV19IDogJHtEaXN0YW5jZS5jYWxjRGlzdGFuY2UocmVjWzBdLHJlY1sxXSl9ICBhZGYgJHtEaXN0YW5jZS5jYWxjRGlzdGFuY2VBZGp1c3RlZChyZWNbMF0scmVjWzFdKX0gYCk7XG5cbiAgICB9KTtcbiAgICBjb25zb2xlLmxvZyhcImRpc3RhbmNlIE9kYXRhIFVkYXRhXCIrIERpc3RhbmNlLmNhbGNEaXN0YW5jZSgnT0RhdGEnLCdVRGF0YScpKTtcbiAgICBjb25zb2xlLmxvZyhcImRpc3RhbmNlIE9kYXRhIE9kYXRiXCIrIERpc3RhbmNlLmNhbGNEaXN0YW5jZSgnT0RhdGEnLCdPRGF0YicpKTtcbiAgICBjb25zb2xlLmxvZyhcImRpc3RhbmNlIE9kYXRhcyBPZGF0YVwiKyBEaXN0YW5jZS5jYWxjRGlzdGFuY2UoJ09EYXRhJywnT0RhdGFhJykpO1xuICAgIGNvbnNvbGUubG9nKFwiZGlzdGFuY2UgT2RhdGFzIGFiY2RlXCIrIERpc3RhbmNlLmNhbGNEaXN0YW5jZSgnYWJjZGUnLCdhYmNkZWYnKSk7XG4gICAgY29uc29sZS5sb2coXCJkaXN0YW5jZSBzZXJ2aWNlcyBcIisgRGlzdGFuY2UuY2FsY0Rpc3RhbmNlKCdzZXJ2aWNlcycsJ3NlcnZpY2UnKSk7XG4gICAgKi9cbn1cbmV4cG9ydHMuYWRkQ2xvc2VFeGFjdFJhbmdlUnVsZXMgPSBhZGRDbG9zZUV4YWN0UmFuZ2VSdWxlcztcbnZhciBuID0gMDtcbmZ1bmN0aW9uIGxvYWRNb2RlbHMobW9kZWxQYXRoKSB7XG4gICAgdmFyIG9Nb2RlbDtcbiAgICBvTW9kZWwgPSB7XG4gICAgICAgIGZ1bGw6IHsgZG9tYWluOiB7fSB9LFxuICAgICAgICByYXdNb2RlbHM6IHt9LFxuICAgICAgICBkb21haW5zOiBbXSxcbiAgICAgICAgdG9vbHM6IFtdLFxuICAgICAgICBydWxlczogdW5kZWZpbmVkLFxuICAgICAgICBjYXRlZ29yeTogW10sXG4gICAgICAgIG9wZXJhdG9yczoge30sXG4gICAgICAgIG1SdWxlczogW10sXG4gICAgICAgIHNlZW5SdWxlczoge30sXG4gICAgICAgIHJlY29yZHM6IFtdLFxuICAgICAgICBtZXRhOiB7IHQzOiB7fSB9XG4gICAgfTtcbiAgICB2YXIgdCA9IERhdGUubm93KCk7XG4gICAgbW9kZWxQYXRoID0gbW9kZWxQYXRoIHx8IGVudk1vZGVsUGF0aDtcbiAgICB0cnkge1xuICAgICAgICB2YXIgYSA9IENpcmN1bGFyU2VyLmxvYWQoJy4vJyArIG1vZGVsUGF0aCArICcvX2NhY2hlZmFsc2UuanMnKTtcbiAgICAgICAgLy9jb25zb2xlLmxvZyhcImZvdW5kIGEgY2FjaGUgPyAgXCIgKyAhIWEpO1xuICAgICAgICAvL2EgPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChhKSB7XG4gICAgICAgICAgICBkZWJ1Z2xvZyhcIiByZXR1cm4gcHJlcGFyZXNlIG1vZGVsIFwiKTtcbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5BQk9UX0VNQUlMX1VTRVIpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImxvYWRlZCBtb2RlbHMgZnJvbSBjYWNoZSBpbiBcIiArIChEYXRlLm5vdygpIC0gdCkgKyBcIiBcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgIH1cbiAgICB2YXIgbWRscyA9IHJlYWRGaWxlQXNKU09OKCcuLycgKyBtb2RlbFBhdGggKyAnL21vZGVscy5qc29uJyk7XG4gICAgbWRscy5mb3JFYWNoKGZ1bmN0aW9uIChzTW9kZWxOYW1lKSB7XG4gICAgICAgIGxvYWRNb2RlbChtb2RlbFBhdGgsIHNNb2RlbE5hbWUsIG9Nb2RlbCk7XG4gICAgfSk7XG4gICAgLy8gYWRkIHRoZSBjYXRlZ29yaWVzIHRvIHRoZSBtb2RlbDpcbiAgICAvKlxuICAgIG9Nb2RlbC5jYXRlZ29yeS5mb3JFYWNoKGZ1bmN0aW9uIChjYXRlZ29yeSkge1xuICAgICAgICBpbnNlcnRSdWxlSWZOb3RQcmVzZW50KG9Nb2RlbC5tUnVsZXMsIHtcbiAgICAgICAgICAgIGNhdGVnb3J5OiBcImNhdGVnb3J5XCIsXG4gICAgICAgICAgICBtYXRjaGVkU3RyaW5nOiBjYXRlZ29yeSxcbiAgICAgICAgICAgIHR5cGU6IElNYXRjaC5FbnVtUnVsZVR5cGUuV09SRCxcbiAgICAgICAgICAgIHdvcmQ6IGNhdGVnb3J5LFxuICAgICAgICAgICAgbG93ZXJjYXNld29yZDogY2F0ZWdvcnkudG9Mb3dlckNhc2UoKSxcbiAgICAgICAgICAgIGJpdGluZGV4IDogb01kbC5cbiAgICAgICAgICAgIF9yYW5raW5nOiAwLjk1XG4gICAgICAgIH0sIG9Nb2RlbC5zZWVuUnVsZXMpO1xuICAgIH0pO1xuICAgICovXG4gICAgdmFyIG1ldGFCaXRJbmRleCA9IGdldERvbWFpbkJpdEluZGV4KCdtZXRhJywgb01vZGVsKTtcbiAgICAvLyBhZGQgdGhlIGRvbWFpbiBtZXRhIHJ1bGVcbiAgICBpbnNlcnRSdWxlSWZOb3RQcmVzZW50KG9Nb2RlbC5tUnVsZXMsIHtcbiAgICAgICAgY2F0ZWdvcnk6IFwibWV0YVwiLFxuICAgICAgICBtYXRjaGVkU3RyaW5nOiBcImRvbWFpblwiLFxuICAgICAgICB0eXBlOiAwIC8qIFdPUkQgKi8sXG4gICAgICAgIHdvcmQ6IFwiZG9tYWluXCIsXG4gICAgICAgIGJpdGluZGV4OiBtZXRhQml0SW5kZXgsXG4gICAgICAgIF9yYW5raW5nOiAwLjk1XG4gICAgfSwgb01vZGVsLnNlZW5SdWxlcyk7XG4gICAgdmFyIGZpbGxlckJpdEluZGV4ID0gZ2V0RG9tYWluQml0SW5kZXgoJ21ldGEnLCBvTW9kZWwpO1xuICAgIC8vYWRkIGEgZmlsbGVyIHJ1bGVcbiAgICB2YXIgZmlsbGVycyA9IHJlYWRGaWxlQXNKU09OKCcuLycgKyBtb2RlbFBhdGggKyAnL2ZpbGxlci5qc29uJyk7XG4gICAgdmFyIHJlID0gXCJeKChcIiArIGZpbGxlcnMuam9pbihcIil8KFwiKSArIFwiKSkkXCI7XG4gICAgb01vZGVsLm1SdWxlcy5wdXNoKHtcbiAgICAgICAgY2F0ZWdvcnk6IFwiZmlsbGVyXCIsXG4gICAgICAgIHR5cGU6IDEgLyogUkVHRVhQICovLFxuICAgICAgICByZWdleHA6IG5ldyBSZWdFeHAocmUsIFwiaVwiKSxcbiAgICAgICAgbWF0Y2hlZFN0cmluZzogXCJmaWxsZXJcIixcbiAgICAgICAgYml0aW5kZXg6IGZpbGxlckJpdEluZGV4LFxuICAgICAgICBfcmFua2luZzogMC45XG4gICAgfSk7XG4gICAgLy9hZGQgb3BlcmF0b3JzXG4gICAgdmFyIG9wZXJhdG9ycyA9IHJlYWRGaWxlQXNKU09OKCcuL3Jlc291cmNlcy9tb2RlbC9vcGVyYXRvcnMuanNvbicpO1xuICAgIHZhciBvcGVyYXRvckJpdEluZGV4ID0gZ2V0RG9tYWluQml0SW5kZXgoJ29wZXJhdG9ycycsIG9Nb2RlbCk7XG4gICAgT2JqZWN0LmtleXMob3BlcmF0b3JzLm9wZXJhdG9ycykuZm9yRWFjaChmdW5jdGlvbiAob3BlcmF0b3IpIHtcbiAgICAgICAgaWYgKElNYXRjaC5hT3BlcmF0b3JOYW1lcy5pbmRleE9mKG9wZXJhdG9yKSA8IDApIHtcbiAgICAgICAgICAgIGRlYnVnbG9nKFwidW5rbm93biBvcGVyYXRvciBcIiArIG9wZXJhdG9yKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInVua25vd24gb3BlcmF0b3IgXCIgKyBvcGVyYXRvcik7XG4gICAgICAgIH1cbiAgICAgICAgb01vZGVsLm9wZXJhdG9yc1tvcGVyYXRvcl0gPSBvcGVyYXRvcnMub3BlcmF0b3JzW29wZXJhdG9yXTtcbiAgICAgICAgb01vZGVsLm9wZXJhdG9yc1tvcGVyYXRvcl0ub3BlcmF0b3IgPSBvcGVyYXRvcjtcbiAgICAgICAgT2JqZWN0LmZyZWV6ZShvTW9kZWwub3BlcmF0b3JzW29wZXJhdG9yXSk7XG4gICAgICAgIHZhciB3b3JkID0gb3BlcmF0b3I7XG4gICAgICAgIGluc2VydFJ1bGVJZk5vdFByZXNlbnQob01vZGVsLm1SdWxlcywge1xuICAgICAgICAgICAgY2F0ZWdvcnk6IFwib3BlcmF0b3JcIixcbiAgICAgICAgICAgIHdvcmQ6IHdvcmQudG9Mb3dlckNhc2UoKSxcbiAgICAgICAgICAgIGxvd2VyY2FzZXdvcmQ6IHdvcmQudG9Mb3dlckNhc2UoKSxcbiAgICAgICAgICAgIHR5cGU6IDAgLyogV09SRCAqLyxcbiAgICAgICAgICAgIG1hdGNoZWRTdHJpbmc6IHdvcmQsXG4gICAgICAgICAgICBiaXRpbmRleDogb3BlcmF0b3JCaXRJbmRleCxcbiAgICAgICAgICAgIF9yYW5raW5nOiAwLjlcbiAgICAgICAgfSwgb01vZGVsLnNlZW5SdWxlcyk7XG4gICAgICAgIC8vIGFkZCBhbGwgc3lub255bXNcbiAgICAgICAgaWYgKG9wZXJhdG9ycy5zeW5vbnltc1tvcGVyYXRvcl0pIHtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKG9wZXJhdG9ycy5zeW5vbnltc1tvcGVyYXRvcl0pLmZvckVhY2goZnVuY3Rpb24gKHN5bm9ueW0pIHtcbiAgICAgICAgICAgICAgICBpbnNlcnRSdWxlSWZOb3RQcmVzZW50KG9Nb2RlbC5tUnVsZXMsIHtcbiAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcnk6IFwib3BlcmF0b3JcIixcbiAgICAgICAgICAgICAgICAgICAgd29yZDogc3lub255bS50b0xvd2VyQ2FzZSgpLFxuICAgICAgICAgICAgICAgICAgICBsb3dlcmNhc2V3b3JkOiBzeW5vbnltLnRvTG93ZXJDYXNlKCksXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IDAgLyogV09SRCAqLyxcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2hlZFN0cmluZzogb3BlcmF0b3IsXG4gICAgICAgICAgICAgICAgICAgIGJpdGluZGV4OiBvcGVyYXRvckJpdEluZGV4LFxuICAgICAgICAgICAgICAgICAgICBfcmFua2luZzogMC45XG4gICAgICAgICAgICAgICAgfSwgb01vZGVsLnNlZW5SdWxlcyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIC8qXG4gICAgICAgIH0pXG4gICAgICAgICAgICB7XG4gICAgICAgICAgY2F0ZWdvcnk6IFwiZmlsbGVyXCIsXG4gICAgICAgICAgdHlwZTogMSxcbiAgICAgICAgICByZWdleHA6IC9eKChzdGFydCl8KHNob3cpfChmcm9tKXwoaW4pKSQvaSxcbiAgICAgICAgICBtYXRjaGVkU3RyaW5nOiBcImZpbGxlclwiLFxuICAgICAgICAgIF9yYW5raW5nOiAwLjlcbiAgICAgICAgfSxcbiAgICAqL1xuICAgIG9Nb2RlbC5tUnVsZXMgPSBvTW9kZWwubVJ1bGVzLnNvcnQoSW5wdXRGaWx0ZXJSdWxlcy5jbXBNUnVsZSk7XG4gICAgYWRkQ2xvc2VFeGFjdFJhbmdlUnVsZXMob01vZGVsLm1SdWxlcywgb01vZGVsLnNlZW5SdWxlcyk7XG4gICAgb01vZGVsLm1SdWxlcyA9IG9Nb2RlbC5tUnVsZXMuc29ydChJbnB1dEZpbHRlclJ1bGVzLmNtcE1SdWxlKTtcbiAgICBpZiAoZ2xvYmFsICYmIGdsb2JhbC5nYykge1xuICAgICAgICBnbG9iYWwuZ2MoKTtcbiAgICB9XG4gICAgb01vZGVsLnJ1bGVzID0gc3BsaXRSdWxlcyhvTW9kZWwubVJ1bGVzKTtcbiAgICBpZiAoZ2xvYmFsICYmIGdsb2JhbC5nYykge1xuICAgICAgICBnbG9iYWwuZ2MoKTtcbiAgICB9XG4gICAgb01vZGVsLnRvb2xzID0gb01vZGVsLnRvb2xzLnNvcnQoVG9vbHMuY21wVG9vbHMpO1xuICAgIGRlbGV0ZSBvTW9kZWwuc2VlblJ1bGVzO1xuICAgIGRlYnVnbG9nKCdzYXZpbmcnKTtcbiAgICBpZiAoZ2xvYmFsICYmIGdsb2JhbC5nYykge1xuICAgICAgICBnbG9iYWwuZ2MoKTtcbiAgICB9XG4gICAgQ2lyY3VsYXJTZXIuc2F2ZSgnLi8nICsgbW9kZWxQYXRoICsgJy9fY2FjaGVmYWxzZS5qcycsIG9Nb2RlbCk7XG4gICAgaWYgKGdsb2JhbCAmJiBnbG9iYWwuZ2MpIHtcbiAgICAgICAgZ2xvYmFsLmdjKCk7XG4gICAgfVxuICAgIGlmIChwcm9jZXNzLmVudi5BQk9UX0VNQUlMX1VTRVIpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJsb2FkZWQgbW9kZWxzIGJ5IGNhbGN1bGF0aW9uIGluIFwiICsgKERhdGUubm93KCkgLSB0KSArIFwiIFwiKTtcbiAgICB9XG4gICAgcmV0dXJuIG9Nb2RlbDtcbn1cbmV4cG9ydHMubG9hZE1vZGVscyA9IGxvYWRNb2RlbHM7XG5mdW5jdGlvbiBzb3J0Q2F0ZWdvcmllc0J5SW1wb3J0YW5jZShtYXAsIGNhdHMpIHtcbiAgICB2YXIgcmVzID0gY2F0cy5zbGljZSgwKTtcbiAgICByZXMuc29ydChyYW5rQ2F0ZWdvcnlCeUltcG9ydGFuY2UuYmluZCh1bmRlZmluZWQsIG1hcCkpO1xuICAgIHJldHVybiByZXM7XG59XG5leHBvcnRzLnNvcnRDYXRlZ29yaWVzQnlJbXBvcnRhbmNlID0gc29ydENhdGVnb3JpZXNCeUltcG9ydGFuY2U7XG5mdW5jdGlvbiByYW5rQ2F0ZWdvcnlCeUltcG9ydGFuY2UobWFwLCBjYXRhLCBjYXRiKSB7XG4gICAgdmFyIGNhdEFEZXNjID0gbWFwW2NhdGFdO1xuICAgIHZhciBjYXRCRGVzYyA9IG1hcFtjYXRiXTtcbiAgICBpZiAoY2F0YSA9PT0gY2F0Yikge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgLy8gaWYgYSBpcyBiZWZvcmUgYiwgcmV0dXJuIC0xXG4gICAgaWYgKGNhdEFEZXNjICYmICFjYXRCRGVzYykge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgfVxuICAgIGlmICghY2F0QURlc2MgJiYgY2F0QkRlc2MpIHtcbiAgICAgICAgcmV0dXJuICsxO1xuICAgIH1cbiAgICB2YXIgcHJpb0EgPSAoY2F0QURlc2MgJiYgY2F0QURlc2MuaW1wb3J0YW5jZSkgfHwgOTk7XG4gICAgdmFyIHByaW9CID0gKGNhdEJEZXNjICYmIGNhdEJEZXNjLmltcG9ydGFuY2UpIHx8IDk5O1xuICAgIC8vIGxvd2VyIHByaW8gZ29lcyB0byBmcm9udFxuICAgIHZhciByID0gcHJpb0EgLSBwcmlvQjtcbiAgICBpZiAocikge1xuICAgICAgICByZXR1cm4gcjtcbiAgICB9XG4gICAgcmV0dXJuIGNhdGEubG9jYWxlQ29tcGFyZShjYXRiKTtcbn1cbmV4cG9ydHMucmFua0NhdGVnb3J5QnlJbXBvcnRhbmNlID0gcmFua0NhdGVnb3J5QnlJbXBvcnRhbmNlO1xudmFyIE1ldGFGID0gTWV0YS5nZXRNZXRhRmFjdG9yeSgpO1xuZnVuY3Rpb24gZ2V0T3BlcmF0b3IobWRsLCBvcGVyYXRvcikge1xuICAgIHJldHVybiBtZGwub3BlcmF0b3JzW29wZXJhdG9yXTtcbn1cbmV4cG9ydHMuZ2V0T3BlcmF0b3IgPSBnZXRPcGVyYXRvcjtcbmZ1bmN0aW9uIGdldFJlc3VsdEFzQXJyYXkobWRsLCBhLCByZWwpIHtcbiAgICBpZiAocmVsLnRvVHlwZSgpICE9PSAncmVsYXRpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImV4cGVjdCByZWxhdGlvbiBhcyAybmQgYXJnXCIpO1xuICAgIH1cbiAgICB2YXIgcmVzID0gbWRsLm1ldGEudDNbYS50b0Z1bGxTdHJpbmcoKV0gJiZcbiAgICAgICAgbWRsLm1ldGEudDNbYS50b0Z1bGxTdHJpbmcoKV1bcmVsLnRvRnVsbFN0cmluZygpXTtcbiAgICBpZiAoIXJlcykge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhyZXMpLnNvcnQoKS5tYXAoTWV0YUYucGFyc2VJTWV0YSk7XG59XG5leHBvcnRzLmdldFJlc3VsdEFzQXJyYXkgPSBnZXRSZXN1bHRBc0FycmF5O1xuZnVuY3Rpb24gZ2V0Q2F0ZWdvcmllc0ZvckRvbWFpbih0aGVNb2RlbCwgZG9tYWluKSB7XG4gICAgaWYgKHRoZU1vZGVsLmRvbWFpbnMuaW5kZXhPZihkb21haW4pIDwgMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJEb21haW4gXFxcIlwiICsgZG9tYWluICsgXCJcXFwiIG5vdCBwYXJ0IG9mIG1vZGVsXCIpO1xuICAgIH1cbiAgICB2YXIgcmVzID0gZ2V0UmVzdWx0QXNBcnJheSh0aGVNb2RlbCwgTWV0YUYuRG9tYWluKGRvbWFpbiksIE1ldGFGLlJlbGF0aW9uKE1ldGEuUkVMQVRJT05faGFzQ2F0ZWdvcnkpKTtcbiAgICByZXR1cm4gTWV0YS5nZXRTdHJpbmdBcnJheShyZXMpO1xufVxuZXhwb3J0cy5nZXRDYXRlZ29yaWVzRm9yRG9tYWluID0gZ2V0Q2F0ZWdvcmllc0ZvckRvbWFpbjtcbmZ1bmN0aW9uIGdldFRhYmxlQ29sdW1ucyh0aGVNb2RlbCwgZG9tYWluKSB7XG4gICAgaWYgKHRoZU1vZGVsLmRvbWFpbnMuaW5kZXhPZihkb21haW4pIDwgMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJEb21haW4gXFxcIlwiICsgZG9tYWluICsgXCJcXFwiIG5vdCBwYXJ0IG9mIG1vZGVsXCIpO1xuICAgIH1cbiAgICByZXR1cm4gdGhlTW9kZWwucmF3TW9kZWxzW2RvbWFpbl0uY29sdW1ucy5zbGljZSgwKTtcbn1cbmV4cG9ydHMuZ2V0VGFibGVDb2x1bW5zID0gZ2V0VGFibGVDb2x1bW5zO1xuLyoqXG4gKiBSZXR1cm4gYWxsIGNhdGVnb3JpZXMgb2YgYSBkb21haW4gd2hpY2ggY2FuIGFwcGVhciBvbiBhIHdvcmQsXG4gKiB0aGVzZSBhcmUgdHlwaWNhbGx5IHRoZSB3b3JkaW5kZXggZG9tYWlucyArIGVudHJpZXMgZ2VuZXJhdGVkIGJ5IGdlbmVyaWMgcnVsZXNcbiAqXG4gKiBUaGUgY3VycmVudCBpbXBsZW1lbnRhdGlvbiBpcyBhIHNpbXBsaWZpY2F0aW9uXG4gKi9cbmZ1bmN0aW9uIGdldFBvdGVudGlhbFdvcmRDYXRlZ29yaWVzRm9yRG9tYWluKHRoZU1vZGVsLCBkb21haW4pIHtcbiAgICAvLyB0aGlzIGlzIGEgc2ltcGxpZmllZCB2ZXJzaW9uXG4gICAgcmV0dXJuIGdldENhdGVnb3JpZXNGb3JEb21haW4odGhlTW9kZWwsIGRvbWFpbik7XG59XG5leHBvcnRzLmdldFBvdGVudGlhbFdvcmRDYXRlZ29yaWVzRm9yRG9tYWluID0gZ2V0UG90ZW50aWFsV29yZENhdGVnb3JpZXNGb3JEb21haW47XG5mdW5jdGlvbiBnZXREb21haW5zRm9yQ2F0ZWdvcnkodGhlTW9kZWwsIGNhdGVnb3J5KSB7XG4gICAgaWYgKHRoZU1vZGVsLmNhdGVnb3J5LmluZGV4T2YoY2F0ZWdvcnkpIDwgMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYXRlZ29yeSBcXFwiXCIgKyBjYXRlZ29yeSArIFwiXFxcIiBub3QgcGFydCBvZiBtb2RlbFwiKTtcbiAgICB9XG4gICAgdmFyIHJlcyA9IGdldFJlc3VsdEFzQXJyYXkodGhlTW9kZWwsIE1ldGFGLkNhdGVnb3J5KGNhdGVnb3J5KSwgTWV0YUYuUmVsYXRpb24oTWV0YS5SRUxBVElPTl9pc0NhdGVnb3J5T2YpKTtcbiAgICByZXR1cm4gTWV0YS5nZXRTdHJpbmdBcnJheShyZXMpO1xufVxuZXhwb3J0cy5nZXREb21haW5zRm9yQ2F0ZWdvcnkgPSBnZXREb21haW5zRm9yQ2F0ZWdvcnk7XG5mdW5jdGlvbiBnZXRBbGxSZWNvcmRDYXRlZ29yaWVzRm9yVGFyZ2V0Q2F0ZWdvcnkobW9kZWwsIGNhdGVnb3J5LCB3b3Jkc29ubHkpIHtcbiAgICB2YXIgcmVzID0ge307XG4gICAgLy9cbiAgICB2YXIgZm4gPSB3b3Jkc29ubHkgPyBnZXRQb3RlbnRpYWxXb3JkQ2F0ZWdvcmllc0ZvckRvbWFpbiA6IGdldENhdGVnb3JpZXNGb3JEb21haW47XG4gICAgdmFyIGRvbWFpbnMgPSBnZXREb21haW5zRm9yQ2F0ZWdvcnkobW9kZWwsIGNhdGVnb3J5KTtcbiAgICBkb21haW5zLmZvckVhY2goZnVuY3Rpb24gKGRvbWFpbikge1xuICAgICAgICBmbihtb2RlbCwgZG9tYWluKS5mb3JFYWNoKGZ1bmN0aW9uICh3b3JkY2F0KSB7XG4gICAgICAgICAgICByZXNbd29yZGNhdF0gPSB0cnVlO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICBPYmplY3QuZnJlZXplKHJlcyk7XG4gICAgcmV0dXJuIHJlcztcbn1cbmV4cG9ydHMuZ2V0QWxsUmVjb3JkQ2F0ZWdvcmllc0ZvclRhcmdldENhdGVnb3J5ID0gZ2V0QWxsUmVjb3JkQ2F0ZWdvcmllc0ZvclRhcmdldENhdGVnb3J5O1xuZnVuY3Rpb24gZ2V0QWxsUmVjb3JkQ2F0ZWdvcmllc0ZvclRhcmdldENhdGVnb3JpZXMobW9kZWwsIGNhdGVnb3JpZXMsIHdvcmRzb25seSkge1xuICAgIHZhciByZXMgPSB7fTtcbiAgICAvL1xuICAgIHZhciBmbiA9IHdvcmRzb25seSA/IGdldFBvdGVudGlhbFdvcmRDYXRlZ29yaWVzRm9yRG9tYWluIDogZ2V0Q2F0ZWdvcmllc0ZvckRvbWFpbjtcbiAgICB2YXIgZG9tYWlucyA9IHVuZGVmaW5lZDtcbiAgICBjYXRlZ29yaWVzLmZvckVhY2goZnVuY3Rpb24gKGNhdGVnb3J5KSB7XG4gICAgICAgIHZhciBjYXRkb21haW5zID0gZ2V0RG9tYWluc0ZvckNhdGVnb3J5KG1vZGVsLCBjYXRlZ29yeSk7XG4gICAgICAgIGlmICghZG9tYWlucykge1xuICAgICAgICAgICAgZG9tYWlucyA9IGNhdGRvbWFpbnM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBkb21haW5zID0gXy5pbnRlcnNlY3Rpb24oZG9tYWlucywgY2F0ZG9tYWlucyk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoZG9tYWlucy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjYXRlZ29yaWVzICcgKyBVdGlscy5saXN0VG9RdW90ZWRDb21tYUFuZChjYXRlZ29yaWVzKSArICcgaGF2ZSBubyBjb21tb24gZG9tYWluLicpO1xuICAgIH1cbiAgICBkb21haW5zLmZvckVhY2goZnVuY3Rpb24gKGRvbWFpbikge1xuICAgICAgICBmbihtb2RlbCwgZG9tYWluKS5mb3JFYWNoKGZ1bmN0aW9uICh3b3JkY2F0KSB7XG4gICAgICAgICAgICByZXNbd29yZGNhdF0gPSB0cnVlO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICBPYmplY3QuZnJlZXplKHJlcyk7XG4gICAgcmV0dXJuIHJlcztcbn1cbmV4cG9ydHMuZ2V0QWxsUmVjb3JkQ2F0ZWdvcmllc0ZvclRhcmdldENhdGVnb3JpZXMgPSBnZXRBbGxSZWNvcmRDYXRlZ29yaWVzRm9yVGFyZ2V0Q2F0ZWdvcmllcztcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
