/**
 * Functionality managing the match models
 *
 * @file
 */
"use strict";

var debug = require('debug');
var debuglog = debug('model');
var logger = require('../utils/logger');
var loadlog = logger.logger('modelload', '');
var IMatch = require('../match/ifmatch');
var InputFilterRules = require('../match/inputFilterRules');
var Tools = require('../match/tools');
var fs = require('fs');
var Meta = require('./meta');
var Utils = require('../utils/utils');
var process = require('process');
var _ = require('lodash');
/**
 * the model path, may be controlled via environment variable
 */
var envModelPath = process.env["ABOT_MODELPATH"] || "testmodel";
;
var ARR_MODEL_PROPERTIES = ["domain", "tool", "toolhidden", "synonyms", "category", "wordindex", "exactmatch", "hidden"];
function addSynonyms(synonyms, category, synonymFor, mRules, seen) {
    synonyms.forEach(function (syn) {
        var oRule = {
            category: category,
            matchedString: synonymFor,
            type: 0 /* WORD */
            , word: syn,
            _ranking: 0.95
        };
        debuglog("inserting synonym" + JSON.stringify(oRule));
        insertRuleIfNotPresent(mRules, oRule, seen);
    });
}
function getRuleKey(rule) {
    return rule.matchedString + "-|-" + rule.category + " -|- " + rule.type + " -|- " + rule.word + " ";
}
function insertRuleIfNotPresent(mRules, rule, seenRules) {
    if (rule.type !== 0 /* WORD */) {
            mRules.push(rule);
            return;
        }
    if (rule.word === undefined || rule.matchedString === undefined) {
        throw new Error('illegal rule' + JSON.stringify(rule, undefined, 2));
    }
    var r = getRuleKey(rule);
    rule.lowercaseword = rule.word.toLowerCase();
    if (seenRules[r]) {
        debuglog("Attempting to insert duplicate" + JSON.stringify(rule, undefined, 2));
        var duplicates = seenRules[r].filter(function (oEntry) {
            return 0 === InputFilterRules.compareMRuleFull(oEntry, rule);
        });
        if (duplicates.length > 0) {
            return;
        }
    }
    seenRules[r] = seenRules[r] || [];
    seenRules[r].push(rule);
    if (rule.word === "") {
        debuglog('Skipping rule with emtpy word ' + JSON.stringify(rule, undefined, 2));
        loadlog('Skipping rule with emtpy word ' + JSON.stringify(rule, undefined, 2));
        return;
    }
    mRules.push(rule);
    return;
}
function loadModelData(modelPath, oMdl, sModelName, oModel) {
    // read the data ->
    // data is processed into mRules directly,
    var sFileName = './' + modelPath + '/' + sModelName + ".data.json";
    var mdldata = fs.readFileSync(sFileName, 'utf-8');
    var oMdlData = JSON.parse(mdldata);
    oMdlData.forEach(function (oEntry) {
        if (!oEntry.tool && oMdl.tool.name) {
            oEntry.tool = oMdl.tool.name;
            oEntry._domain = oMdl.domain;
        }
        oModel.records.push(oEntry);
        oMdl.wordindex.forEach(function (category) {
            if (oEntry[category] === undefined) {
                debuglog("INCONSISTENT*> ModelData " + sFileName + " does not contain category " + category + " of wordindex" + JSON.stringify(oEntry) + "");
                return;
            }
            if (oEntry[category] !== "*") {
                var sString = oEntry[category];
                debuglog("pushing rule with " + category + " -> " + sString);
                var oRule = {
                    category: category,
                    matchedString: sString,
                    type: 0 /* WORD */
                    , word: sString,
                    _ranking: 0.95
                };
                if (oMdl.exactmatch && oMdl.exactmatch.indexOf(category) >= 0) {
                    oRule.exactOnly = true;
                }
                insertRuleIfNotPresent(oModel.mRules, oRule, oModel.seenRules);
                if (oMdlData.synonyms && oMdlData.synonyms[category]) {
                    addSynonyms(oMdlData.synonyms[category], category, sString, oModel.mRules, oModel.seenRules);
                }
            }
        });
    });
}
function loadModel(modelPath, sModelName, oModel) {
    debuglog(" loading " + sModelName + " ....");
    var mdl = fs.readFileSync('./' + modelPath + '/' + sModelName + ".model.json", 'utf-8');
    var oMdl = JSON.parse(mdl);
    if (oModel.domains.indexOf(oMdl.domain) >= 0) {
        debuglog("***********here mdl" + JSON.stringify(oMdl, undefined, 2));
        throw new Error('Domain ' + oMdl.domain + ' already loaded while loading ' + sModelName + '?');
    }
    // check properties of model
    Object.keys(oMdl).sort().forEach(function (sProperty) {
        if (ARR_MODEL_PROPERTIES.indexOf(sProperty) < 0) {
            throw new Error('Model property "' + sProperty + '" not a known model propperty in model of domain ' + oMdl.domain + ' ');
        }
    });
    // check that members of wordindex are in categories,
    oMdl.wordindex = oMdl.wordindex || [];
    oMdl.wordindex.forEach(function (sWordIndex) {
        if (oMdl.category.indexOf(sWordIndex) < 0) {
            throw new Error('Model wordindex "' + sWordIndex + '" not a category of domain ' + oMdl.domain + ' ');
        }
    });
    oMdl.exactmatch = oMdl.exactmatch || [];
    oMdl.exactmatch.forEach(function (sExactMatch) {
        if (oMdl.category.indexOf(sExactMatch) < 0) {
            throw new Error('Model exactmatch "' + sExactMatch + '" not a category of domain ' + oMdl.domain + ' ');
        }
    });
    // add relation domain -> category
    var domainStr = MetaF.Domain(oMdl.domain).toFullString();
    var relationStr = MetaF.Relation(Meta.RELATION_hasCategory).toFullString();
    var reverseRelationStr = MetaF.Relation(Meta.RELATION_isCategoryOf).toFullString();
    oMdl.category.forEach(function (sCategory) {
        var CategoryString = MetaF.Category(sCategory).toFullString();
        oModel.meta.t3[domainStr] = oModel.meta.t3[domainStr] || {};
        oModel.meta.t3[domainStr][relationStr] = oModel.meta.t3[domainStr][relationStr] || {};
        oModel.meta.t3[domainStr][relationStr][CategoryString] = {};
        oModel.meta.t3[CategoryString] = oModel.meta.t3[CategoryString] || {};
        oModel.meta.t3[CategoryString][reverseRelationStr] = oModel.meta.t3[CategoryString][reverseRelationStr] || {};
        oModel.meta.t3[CategoryString][reverseRelationStr][domainStr] = {};
    });
    // add a precice domain matchrule
    insertRuleIfNotPresent(oModel.mRules, {
        category: "domain",
        matchedString: oMdl.domain,
        type: 0 /* WORD */
        , word: oMdl.domain,
        _ranking: 0.95
    }, oModel.seenRules);
    // extract tools an add to tools:
    oModel.tools.filter(function (oEntry) {
        if (oEntry.name === (oMdl.tool && oMdl.tool.name)) {
            console.log("Tool " + oMdl.tool.name + " already present when loading " + sModelName);
            //throw new Error('Domain already loaded?');
            process.exit(-1);
        }
    });
    // add the tool name as rule unless hidden
    if (!oMdl.toolhidden && oMdl.tool && oMdl.tool.name) {
        insertRuleIfNotPresent(oModel.mRules, {
            category: "tool",
            matchedString: oMdl.tool.name,
            type: 0 /* WORD */
            , word: oMdl.tool.name,
            _ranking: 0.95
        }, oModel.seenRules);
    }
    ;
    if (oMdl.synonyms && oMdl.synonyms["tool"]) {
        addSynonyms(oMdl.synonyms["tool"], "tool", oMdl.tool.name, oModel.mRules, oModel.seenRules);
    }
    ;
    if (oMdl.synonyms) {
        Object.keys(oMdl.synonyms).forEach(function (ssynkey) {
            if (oMdl.category.indexOf(ssynkey) >= 0 && ssynkey !== "tool") {
                addSynonyms(oMdl.synonyms[ssynkey], "category", ssynkey, oModel.mRules, oModel.seenRules);
            }
        });
    }
    oModel.domains.push(oMdl.domain);
    if (oMdl.tool.name) {
        oModel.tools.push(oMdl.tool);
    }
    oModel.category = oModel.category.concat(oMdl.category);
    oModel.category.sort();
    oModel.category = oModel.category.filter(function (string, index) {
        return oModel.category[index] !== oModel.category[index + 1];
    });
    loadModelData(modelPath, oMdl, sModelName, oModel);
} // loadmodel
function splitRules(rules) {
    var res = {};
    var nonWordRules = [];
    rules.forEach(function (rule) {
        if (rule.type === 0 /* WORD */) {
                if (!rule.lowercaseword) {
                    throw new Error("Rule has no member lowercaseword" + JSON.stringify(rule));
                }
                res[rule.lowercaseword] = res[rule.lowercaseword] || [];
                res[rule.lowercaseword].push(rule);
            } else {
            nonWordRules.push(rule);
        }
    });
    return {
        wordMap: res,
        nonWordRules: nonWordRules,
        allRules: rules
    };
}
exports.splitRules = splitRules;
function loadModels(modelPath) {
    var oModel;
    oModel = {
        domains: [],
        tools: [],
        rules: undefined,
        category: [],
        operators: {},
        mRules: [],
        seenRules: {},
        records: [],
        meta: { t3: {} }
    };
    modelPath = modelPath || envModelPath;
    var smdls = fs.readFileSync('./' + modelPath + '/models.json', 'utf-8');
    var mdls = JSON.parse("" + smdls);
    mdls.forEach(function (sModelName) {
        loadModel(modelPath, sModelName, oModel);
    });
    // add the categories to the model:
    oModel.category.forEach(function (category) {
        insertRuleIfNotPresent(oModel.mRules, {
            category: "category",
            matchedString: category,
            type: 0 /* WORD */
            , word: category,
            lowercaseword: category.toLowerCase(),
            _ranking: 0.95
        }, oModel.seenRules);
    });
    // add the domain meta rule
    insertRuleIfNotPresent(oModel.mRules, {
        category: "meta",
        matchedString: "domain",
        type: 0 /* WORD */
        , word: "domain",
        _ranking: 0.95
    }, oModel.seenRules);
    //add a filler rule
    var sfillers = fs.readFileSync('./' + modelPath + '/filler.json', 'utf-8');
    var fillers = JSON.parse(sfillers);
    var re = "^((" + fillers.join(")|(") + "))$";
    oModel.mRules.push({
        category: "filler",
        type: 1 /* REGEXP */
        , regexp: new RegExp(re, "i"),
        matchedString: "filler",
        _ranking: 0.9
    });
    //add operators
    var sOperators = fs.readFileSync('./resources/model/operators.json', 'utf-8');
    var operators = JSON.parse(sOperators);
    Object.keys(operators.operators).forEach(function (operator) {
        if (IMatch.aOperatorNames.indexOf(operator) < 0) {
            debuglog("unknown operator " + operator);
            throw new Error("unknown operator " + operator);
        }
        oModel.operators[operator] = operators.operators[operator];
        oModel.operators[operator].operator = operator;
        Object.freeze(oModel.operators[operator]);
        var word = operator;
        insertRuleIfNotPresent(oModel.mRules, {
            category: "operator",
            word: word.toLowerCase(),
            lowercaseword: word.toLowerCase(),
            type: 0 /* WORD */
            , matchedString: word,
            _ranking: 0.9
        }, oModel.seenRules);
        // add all synonyms
        if (operators.synonyms[operator]) {
            Object.keys(operators.synonyms[operator]).forEach(function (synonym) {
                insertRuleIfNotPresent(oModel.mRules, {
                    category: "operator",
                    word: synonym.toLowerCase(),
                    lowercaseword: synonym.toLowerCase(),
                    type: 0 /* WORD */
                    , matchedString: operator,
                    _ranking: 0.9
                }, oModel.seenRules);
            });
        }
    });
    /*
        })
            {
          category: "filler",
          type: 1,
          regexp: /^((start)|(show)|(from)|(in))$/i,
          matchedString: "filler",
          _ranking: 0.9
        },
    */
    oModel.mRules = oModel.mRules.sort(InputFilterRules.cmpMRule);
    oModel.rules = splitRules(oModel.mRules);
    oModel.tools = oModel.tools.sort(Tools.cmpTools);
    delete oModel.seenRules;
    return oModel;
}
exports.loadModels = loadModels;
var MetaF = Meta.getMetaFactory();
function getOperator(mdl, operator) {
    return mdl.operators[operator];
}
exports.getOperator = getOperator;
function getResultAsArray(mdl, a, rel) {
    if (rel.toType() !== 'relation') {
        throw new Error("expect relation as 2nd arg");
    }
    var res = mdl.meta.t3[a.toFullString()] && mdl.meta.t3[a.toFullString()][rel.toFullString()];
    if (!res) {
        return [];
    }
    return Object.getOwnPropertyNames(res).sort().map(MetaF.parseIMeta);
}
exports.getResultAsArray = getResultAsArray;
function getCategoriesForDomain(theModel, domain) {
    if (theModel.domains.indexOf(domain) < 0) {
        throw new Error("Domain \"" + domain + "\" not part of model");
    }
    var res = getResultAsArray(theModel, MetaF.Domain(domain), MetaF.Relation(Meta.RELATION_hasCategory));
    return Meta.getStringArray(res);
}
exports.getCategoriesForDomain = getCategoriesForDomain;
/**
 * Return all categories of a domain which can appear on a word,
 * these are typically the wordindex domains + entries generated by generic rules
 *
 * The current implementation is a simplification
 */
function getPotentialWordCategoriesForDomain(theModel, domain) {
    // this is a simplified version
    return getCategoriesForDomain(theModel, domain);
}
exports.getPotentialWordCategoriesForDomain = getPotentialWordCategoriesForDomain;
function getDomainsForCategory(theModel, category) {
    if (theModel.category.indexOf(category) < 0) {
        throw new Error("Category \"" + category + "\" not part of model");
    }
    var res = getResultAsArray(theModel, MetaF.Category(category), MetaF.Relation(Meta.RELATION_isCategoryOf));
    return Meta.getStringArray(res);
}
exports.getDomainsForCategory = getDomainsForCategory;
function getAllRecordCategoriesForTargetCategory(model, category, wordsonly) {
    var res = {};
    //
    var fn = wordsonly ? getPotentialWordCategoriesForDomain : getCategoriesForDomain;
    var domains = getDomainsForCategory(model, category);
    domains.forEach(function (domain) {
        fn(model, domain).forEach(function (wordcat) {
            res[wordcat] = true;
        });
    });
    Object.freeze(res);
    return res;
}
exports.getAllRecordCategoriesForTargetCategory = getAllRecordCategoriesForTargetCategory;
function getAllRecordCategoriesForTargetCategories(model, categories, wordsonly) {
    var res = {};
    //
    var fn = wordsonly ? getPotentialWordCategoriesForDomain : getCategoriesForDomain;
    var domains = undefined;
    categories.forEach(function (category) {
        var catdomains = getDomainsForCategory(model, category);
        if (!domains) {
            domains = catdomains;
        } else {
            domains = _.intersection(domains, catdomains);
        }
    });
    if (domains.length === 0) {
        throw new Error('categories ' + Utils.listToQuotedCommaAnd(categories) + ' have no common domain.');
    }
    domains.forEach(function (domain) {
        fn(model, domain).forEach(function (wordcat) {
            res[wordcat] = true;
        });
    });
    Object.freeze(res);
    return res;
}
exports.getAllRecordCategoriesForTargetCategories = getAllRecordCategoriesForTargetCategories;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tb2RlbC9tb2RlbC50cyIsIm1vZGVsL21vZGVsLmpzIl0sIm5hbWVzIjpbImRlYnVnIiwicmVxdWlyZSIsImRlYnVnbG9nIiwibG9nZ2VyIiwibG9hZGxvZyIsIklNYXRjaCIsIklucHV0RmlsdGVyUnVsZXMiLCJUb29scyIsImZzIiwiTWV0YSIsIlV0aWxzIiwicHJvY2VzcyIsIl8iLCJlbnZNb2RlbFBhdGgiLCJlbnYiLCJBUlJfTU9ERUxfUFJPUEVSVElFUyIsImFkZFN5bm9ueW1zIiwic3lub255bXMiLCJjYXRlZ29yeSIsInN5bm9ueW1Gb3IiLCJtUnVsZXMiLCJzZWVuIiwiZm9yRWFjaCIsInN5biIsIm9SdWxlIiwibWF0Y2hlZFN0cmluZyIsInR5cGUiLCJ3b3JkIiwiX3JhbmtpbmciLCJKU09OIiwic3RyaW5naWZ5IiwiaW5zZXJ0UnVsZUlmTm90UHJlc2VudCIsImdldFJ1bGVLZXkiLCJydWxlIiwic2VlblJ1bGVzIiwicHVzaCIsInVuZGVmaW5lZCIsIkVycm9yIiwiciIsImxvd2VyY2FzZXdvcmQiLCJ0b0xvd2VyQ2FzZSIsImR1cGxpY2F0ZXMiLCJmaWx0ZXIiLCJvRW50cnkiLCJjb21wYXJlTVJ1bGVGdWxsIiwibGVuZ3RoIiwibG9hZE1vZGVsRGF0YSIsIm1vZGVsUGF0aCIsIm9NZGwiLCJzTW9kZWxOYW1lIiwib01vZGVsIiwic0ZpbGVOYW1lIiwibWRsZGF0YSIsInJlYWRGaWxlU3luYyIsIm9NZGxEYXRhIiwicGFyc2UiLCJ0b29sIiwibmFtZSIsIl9kb21haW4iLCJkb21haW4iLCJyZWNvcmRzIiwid29yZGluZGV4Iiwic1N0cmluZyIsImV4YWN0bWF0Y2giLCJpbmRleE9mIiwiZXhhY3RPbmx5IiwibG9hZE1vZGVsIiwibWRsIiwiZG9tYWlucyIsIk9iamVjdCIsImtleXMiLCJzb3J0Iiwic1Byb3BlcnR5Iiwic1dvcmRJbmRleCIsInNFeGFjdE1hdGNoIiwiZG9tYWluU3RyIiwiTWV0YUYiLCJEb21haW4iLCJ0b0Z1bGxTdHJpbmciLCJyZWxhdGlvblN0ciIsIlJlbGF0aW9uIiwiUkVMQVRJT05faGFzQ2F0ZWdvcnkiLCJyZXZlcnNlUmVsYXRpb25TdHIiLCJSRUxBVElPTl9pc0NhdGVnb3J5T2YiLCJzQ2F0ZWdvcnkiLCJDYXRlZ29yeVN0cmluZyIsIkNhdGVnb3J5IiwibWV0YSIsInQzIiwidG9vbHMiLCJjb25zb2xlIiwibG9nIiwiZXhpdCIsInRvb2xoaWRkZW4iLCJzc3lua2V5IiwiY29uY2F0Iiwic3RyaW5nIiwiaW5kZXgiLCJzcGxpdFJ1bGVzIiwicnVsZXMiLCJyZXMiLCJub25Xb3JkUnVsZXMiLCJ3b3JkTWFwIiwiYWxsUnVsZXMiLCJleHBvcnRzIiwibG9hZE1vZGVscyIsIm9wZXJhdG9ycyIsInNtZGxzIiwibWRscyIsInNmaWxsZXJzIiwiZmlsbGVycyIsInJlIiwiam9pbiIsInJlZ2V4cCIsIlJlZ0V4cCIsInNPcGVyYXRvcnMiLCJvcGVyYXRvciIsImFPcGVyYXRvck5hbWVzIiwiZnJlZXplIiwic3lub255bSIsImNtcE1SdWxlIiwiY21wVG9vbHMiLCJnZXRNZXRhRmFjdG9yeSIsImdldE9wZXJhdG9yIiwiZ2V0UmVzdWx0QXNBcnJheSIsImEiLCJyZWwiLCJ0b1R5cGUiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwibWFwIiwicGFyc2VJTWV0YSIsImdldENhdGVnb3JpZXNGb3JEb21haW4iLCJ0aGVNb2RlbCIsImdldFN0cmluZ0FycmF5IiwiZ2V0UG90ZW50aWFsV29yZENhdGVnb3JpZXNGb3JEb21haW4iLCJnZXREb21haW5zRm9yQ2F0ZWdvcnkiLCJnZXRBbGxSZWNvcmRDYXRlZ29yaWVzRm9yVGFyZ2V0Q2F0ZWdvcnkiLCJtb2RlbCIsIndvcmRzb25seSIsImZuIiwid29yZGNhdCIsImdldEFsbFJlY29yZENhdGVnb3JpZXNGb3JUYXJnZXRDYXRlZ29yaWVzIiwiY2F0ZWdvcmllcyIsImNhdGRvbWFpbnMiLCJpbnRlcnNlY3Rpb24iLCJsaXN0VG9RdW90ZWRDb21tYUFuZCJdLCJtYXBwaW5n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LEVBQWU7QUFDM0JnRixXQUFHRixLQUFILEVBQVU5RSxNQUFWLEVBQWtCckMsT0FBbEIsQ0FBMEIsVUFBU3NILE9BQVQsRUFBZ0I7QUFDdEN4QyxnQkFBSXdDLE9BQUosSUFBZSxJQUFmO0FBQ0gsU0FGRDtBQUdILEtBSkQ7QUFLQXZFLFdBQU9pRCxNQUFQLENBQWNsQixHQUFkO0FBQ0EsV0FBT0EsR0FBUDtBQUNGO0FBdkJlSSxRQUFBcUMseUNBQUEsR0FBeUNBLHlDQUF6QyIsImZpbGUiOiJtb2RlbC9tb2RlbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBGdW5jdGlvbmFsaXR5IG1hbmFnaW5nIHRoZSBtYXRjaCBtb2RlbHNcclxuICpcclxuICogQGZpbGVcclxuICovXHJcblxyXG5pbXBvcnQgKiBhcyBpbnRmIGZyb20gJ2NvbnN0YW50cyc7XHJcbmltcG9ydCAqIGFzIGRlYnVnIGZyb20gJ2RlYnVnJztcclxuXHJcbnZhciBkZWJ1Z2xvZyA9IGRlYnVnKCdtb2RlbCcpO1xyXG5cclxuaW1wb3J0ICogYXMgbG9nZ2VyIGZyb20gJy4uL3V0aWxzL2xvZ2dlcic7XHJcblxyXG5jb25zdCBsb2FkbG9nID0gbG9nZ2VyLmxvZ2dlcignbW9kZWxsb2FkJywgJycpO1xyXG5cclxuaW1wb3J0ICogIGFzIElNYXRjaCBmcm9tICcuLi9tYXRjaC9pZm1hdGNoJztcclxuaW1wb3J0ICogYXMgTWF0Y2ggZnJvbSAnLi4vbWF0Y2gvbWF0Y2gnO1xyXG5pbXBvcnQgKiBhcyBJbnB1dEZpbHRlclJ1bGVzIGZyb20gJy4uL21hdGNoL2lucHV0RmlsdGVyUnVsZXMnO1xyXG5pbXBvcnQgKiBhcyBUb29scyBmcm9tICcuLi9tYXRjaC90b29scyc7XHJcbmltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzJztcclxuaW1wb3J0ICogYXMgTWV0YSBmcm9tICcuL21ldGEnO1xyXG5pbXBvcnQgKiBhcyBVdGlscyBmcm9tICcuLi91dGlscy91dGlscyc7XHJcbmltcG9ydCAqIGFzIHByb2Nlc3MgZnJvbSAncHJvY2Vzcyc7XHJcbmltcG9ydCAqIGFzIF8gZnJvbSAnbG9kYXNoJztcclxuXHJcbi8qKlxyXG4gKiB0aGUgbW9kZWwgcGF0aCwgbWF5IGJlIGNvbnRyb2xsZWQgdmlhIGVudmlyb25tZW50IHZhcmlhYmxlXHJcbiAqL1xyXG52YXIgZW52TW9kZWxQYXRoID0gcHJvY2Vzcy5lbnZbXCJBQk9UX01PREVMUEFUSFwiXSB8fCBcInRlc3Rtb2RlbFwiO1xyXG5cclxuLy9leHBvcnQgaW50ZXJmYWNlIElNb2RlbHMgPSBNYXRjaC5JTW9kZWxzO1xyXG5cclxuLypcclxuZXhwb3J0IGludGVyZmFjZSBJTW9kZWxzIHtcclxuICAgIGRvbWFpbnM6IHN0cmluZ1tdLFxyXG4gICAgdG9vbHM6IElNYXRjaC5JVG9vbFtdLFxyXG4gICAgY2F0ZWdvcnk6IHN0cmluZ1tdLFxyXG4gICAgbVJ1bGVzOiBJTWF0Y2gubVJ1bGVbXSxcclxuICAgIHJlY29yZHM6IGFueVtdXHJcbiAgICBzZWVuUnVsZXM/OiB7IFtrZXk6IHN0cmluZ106IElNYXRjaC5tUnVsZSB9LFxyXG4gICAgbWV0YSA6IHtcclxuICAgICAgICAvLyBlbnRpdHkgLT4gcmVsYXRpb24gLT4gdGFyZ2V0XHJcbiAgICAgICAgdDMgOiB7IFtrZXk6IHN0cmluZ10gOiB7IFtrZXkgOiBzdHJpbmddIDogYW55IH19XHJcbiAgICB9XHJcbn0qL1xyXG5cclxuaW50ZXJmYWNlIElNb2RlbCB7XHJcbiAgICBkb21haW46IHN0cmluZyxcclxuICAgIHRvb2w6IElNYXRjaC5JVG9vbCxcclxuICAgIHRvb2xoaWRkZW4/OiBib29sZWFuLFxyXG4gICAgc3lub255bXM/OiB7IFtrZXk6IHN0cmluZ106IHN0cmluZ1tdIH0sXHJcbiAgICBjYXRlZ29yeTogc3RyaW5nW10sXHJcbiAgICB3b3JkaW5kZXg6IHN0cmluZ1tdLFxyXG4gICAgZXhhY3RtYXRjaD8gOiBzdHJpbmdbXSxcclxuICAgIGhpZGRlbjogc3RyaW5nW11cclxufTtcclxuXHJcbmNvbnN0IEFSUl9NT0RFTF9QUk9QRVJUSUVTID0gW1wiZG9tYWluXCIsIFwidG9vbFwiLCBcInRvb2xoaWRkZW5cIiwgXCJzeW5vbnltc1wiLCBcImNhdGVnb3J5XCIsIFwid29yZGluZGV4XCIsIFwiZXhhY3RtYXRjaFwiLCBcImhpZGRlblwiXTtcclxuXHJcbmZ1bmN0aW9uIGFkZFN5bm9ueW1zKHN5bm9ueW1zOiBzdHJpbmdbXSwgY2F0ZWdvcnk6IHN0cmluZywgc3lub255bUZvcjogc3RyaW5nLCBtUnVsZXM6IEFycmF5PElNYXRjaC5tUnVsZT4sIHNlZW46IHsgW2tleTogc3RyaW5nXTogSU1hdGNoLm1SdWxlW10gfSkge1xyXG4gICAgc3lub255bXMuZm9yRWFjaChmdW5jdGlvbiAoc3luKSB7XHJcbiAgICAgICAgdmFyIG9SdWxlID0ge1xyXG4gICAgICAgICAgICBjYXRlZ29yeTogY2F0ZWdvcnksXHJcbiAgICAgICAgICAgIG1hdGNoZWRTdHJpbmc6IHN5bm9ueW1Gb3IsXHJcbiAgICAgICAgICAgIHR5cGU6IElNYXRjaC5FbnVtUnVsZVR5cGUuV09SRCxcclxuICAgICAgICAgICAgd29yZDogc3luLFxyXG4gICAgICAgICAgICBfcmFua2luZzogMC45NVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgZGVidWdsb2coXCJpbnNlcnRpbmcgc3lub255bVwiICsgSlNPTi5zdHJpbmdpZnkob1J1bGUpKTtcclxuICAgICAgICBpbnNlcnRSdWxlSWZOb3RQcmVzZW50KG1SdWxlcywgb1J1bGUsIHNlZW4pO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldFJ1bGVLZXkocnVsZSkge1xyXG4gICAgcmV0dXJuIHJ1bGUubWF0Y2hlZFN0cmluZyArIFwiLXwtXCIgKyBydWxlLmNhdGVnb3J5ICsgXCIgLXwtIFwiICsgcnVsZS50eXBlICArIFwiIC18LSBcIiArIHJ1bGUud29yZCArIFwiIFwiO1xyXG59XHJcblxyXG5mdW5jdGlvbiBpbnNlcnRSdWxlSWZOb3RQcmVzZW50KG1SdWxlczogQXJyYXk8SU1hdGNoLm1SdWxlPiwgcnVsZTogSU1hdGNoLm1SdWxlLFxyXG4gICAgc2VlblJ1bGVzOiB7IFtrZXk6IHN0cmluZ106IElNYXRjaC5tUnVsZVtdIH0pIHtcclxuXHJcbiAgICBpZiAocnVsZS50eXBlICE9PSBJTWF0Y2guRW51bVJ1bGVUeXBlLldPUkQpIHtcclxuICAgICAgICBtUnVsZXMucHVzaChydWxlKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAoKHJ1bGUud29yZCA9PT0gdW5kZWZpbmVkKSB8fCAocnVsZS5tYXRjaGVkU3RyaW5nID09PSB1bmRlZmluZWQpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbGxlZ2FsIHJ1bGUnICsgSlNPTi5zdHJpbmdpZnkocnVsZSwgdW5kZWZpbmVkLCAyKSk7XHJcbiAgICB9XHJcbiAgICB2YXIgciA9IGdldFJ1bGVLZXkocnVsZSk7XHJcbiAgICBydWxlLmxvd2VyY2FzZXdvcmQgPSBydWxlLndvcmQudG9Mb3dlckNhc2UoKTtcclxuICAgIGlmIChzZWVuUnVsZXNbcl0pIHtcclxuICAgICAgICBkZWJ1Z2xvZyhcIkF0dGVtcHRpbmcgdG8gaW5zZXJ0IGR1cGxpY2F0ZVwiICsgSlNPTi5zdHJpbmdpZnkocnVsZSwgdW5kZWZpbmVkLCAyKSk7XHJcbiAgICAgICAgdmFyIGR1cGxpY2F0ZXMgPSBzZWVuUnVsZXNbcl0uZmlsdGVyKGZ1bmN0aW9uKCBvRW50cnkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIDAgPT09IElucHV0RmlsdGVyUnVsZXMuY29tcGFyZU1SdWxlRnVsbChvRW50cnkscnVsZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYoZHVwbGljYXRlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBzZWVuUnVsZXNbcl0gPSAoc2VlblJ1bGVzW3JdIHx8IFtdKTtcclxuICAgIHNlZW5SdWxlc1tyXS5wdXNoKHJ1bGUpO1xyXG4gICAgaWYgKHJ1bGUud29yZCA9PT0gXCJcIikge1xyXG4gICAgICAgIGRlYnVnbG9nKCdTa2lwcGluZyBydWxlIHdpdGggZW10cHkgd29yZCAnICsgSlNPTi5zdHJpbmdpZnkocnVsZSwgdW5kZWZpbmVkLCAyKSk7XHJcbiAgICAgICAgbG9hZGxvZygnU2tpcHBpbmcgcnVsZSB3aXRoIGVtdHB5IHdvcmQgJyArIEpTT04uc3RyaW5naWZ5KHJ1bGUsIHVuZGVmaW5lZCwgMikpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIG1SdWxlcy5wdXNoKHJ1bGUpO1xyXG4gICAgcmV0dXJuO1xyXG59XHJcblxyXG5mdW5jdGlvbiBsb2FkTW9kZWxEYXRhKG1vZGVsUGF0aDogc3RyaW5nLCBvTWRsOiBJTW9kZWwsIHNNb2RlbE5hbWU6IHN0cmluZywgb01vZGVsOiBJTWF0Y2guSU1vZGVscykge1xyXG4gICAgLy8gcmVhZCB0aGUgZGF0YSAtPlxyXG4gICAgLy8gZGF0YSBpcyBwcm9jZXNzZWQgaW50byBtUnVsZXMgZGlyZWN0bHksXHJcbiAgICBjb25zdCBzRmlsZU5hbWUgPSAoJy4vJyArIG1vZGVsUGF0aCArICcvJyArIHNNb2RlbE5hbWUgKyBcIi5kYXRhLmpzb25cIik7XHJcbiAgICB2YXIgbWRsZGF0YSA9IGZzLnJlYWRGaWxlU3luYyhzRmlsZU5hbWUsICd1dGYtOCcpO1xyXG4gICAgdmFyIG9NZGxEYXRhID0gSlNPTi5wYXJzZShtZGxkYXRhKTtcclxuICAgIG9NZGxEYXRhLmZvckVhY2goZnVuY3Rpb24gKG9FbnRyeSkge1xyXG4gICAgICAgIGlmICghb0VudHJ5LnRvb2wgJiYgb01kbC50b29sLm5hbWUpIHtcclxuICAgICAgICAgICAgb0VudHJ5LnRvb2wgPSBvTWRsLnRvb2wubmFtZTtcclxuICAgICAgICAgICAgb0VudHJ5Ll9kb21haW4gPSBvTWRsLmRvbWFpbjtcclxuICAgICAgICB9XHJcbiAgICAgICAgb01vZGVsLnJlY29yZHMucHVzaChvRW50cnkpO1xyXG5cclxuICAgICAgICBvTWRsLndvcmRpbmRleC5mb3JFYWNoKGZ1bmN0aW9uIChjYXRlZ29yeSkge1xyXG4gICAgICAgICAgICBpZiAob0VudHJ5W2NhdGVnb3J5XSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBkZWJ1Z2xvZyhcIklOQ09OU0lTVEVOVCo+IE1vZGVsRGF0YSBcIiArIHNGaWxlTmFtZSArIFwiIGRvZXMgbm90IGNvbnRhaW4gY2F0ZWdvcnkgXCIgKyBjYXRlZ29yeSArIFwiIG9mIHdvcmRpbmRleFwiICsgSlNPTi5zdHJpbmdpZnkob0VudHJ5KSArIFwiXCIpXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKG9FbnRyeVtjYXRlZ29yeV0gIT09IFwiKlwiKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgc1N0cmluZyA9IG9FbnRyeVtjYXRlZ29yeV07XHJcbiAgICAgICAgICAgICAgICBkZWJ1Z2xvZyhcInB1c2hpbmcgcnVsZSB3aXRoIFwiICsgY2F0ZWdvcnkgKyBcIiAtPiBcIiArIHNTdHJpbmcpO1xyXG4gICAgICAgICAgICAgICAgdmFyIG9SdWxlID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRlZ29yeTogY2F0ZWdvcnksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoZWRTdHJpbmc6IHNTdHJpbmcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IElNYXRjaC5FbnVtUnVsZVR5cGUuV09SRCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgd29yZDogc1N0cmluZyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3Jhbmtpbmc6IDAuOTVcclxuICAgICAgICAgICAgICAgICAgICB9IGFzIElNYXRjaC5tUnVsZTtcclxuICAgICAgICAgICAgICAgIGlmKG9NZGwuZXhhY3RtYXRjaCAmJiBvTWRsLmV4YWN0bWF0Y2guaW5kZXhPZihjYXRlZ29yeSkgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9SdWxlLmV4YWN0T25seSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpbnNlcnRSdWxlSWZOb3RQcmVzZW50KG9Nb2RlbC5tUnVsZXMsb1J1bGUsIG9Nb2RlbC5zZWVuUnVsZXMpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG9NZGxEYXRhLnN5bm9ueW1zICYmIG9NZGxEYXRhLnN5bm9ueW1zW2NhdGVnb3J5XSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFkZFN5bm9ueW1zKG9NZGxEYXRhLnN5bm9ueW1zW2NhdGVnb3J5XSwgY2F0ZWdvcnksIHNTdHJpbmcsIG9Nb2RlbC5tUnVsZXMsIG9Nb2RlbC5zZWVuUnVsZXMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gbG9hZE1vZGVsKG1vZGVsUGF0aCA6IHN0cmluZywgc01vZGVsTmFtZTogc3RyaW5nLCBvTW9kZWw6IElNYXRjaC5JTW9kZWxzKSB7XHJcbiAgICBkZWJ1Z2xvZyhcIiBsb2FkaW5nIFwiICsgc01vZGVsTmFtZSArIFwiIC4uLi5cIik7XHJcbiAgICB2YXIgbWRsID0gZnMucmVhZEZpbGVTeW5jKCcuLycgKyBtb2RlbFBhdGggKyAnLycgKyBzTW9kZWxOYW1lICsgXCIubW9kZWwuanNvblwiLCAndXRmLTgnKTtcclxuICAgIHZhciBvTWRsID0gSlNPTi5wYXJzZShtZGwpIGFzIElNb2RlbDtcclxuXHJcbiAgICBpZiAob01vZGVsLmRvbWFpbnMuaW5kZXhPZihvTWRsLmRvbWFpbikgPj0gMCkge1xyXG4gICAgICAgIGRlYnVnbG9nKFwiKioqKioqKioqKipoZXJlIG1kbFwiICsgSlNPTi5zdHJpbmdpZnkob01kbCwgdW5kZWZpbmVkLCAyKSk7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdEb21haW4gJyArIG9NZGwuZG9tYWluICsgJyBhbHJlYWR5IGxvYWRlZCB3aGlsZSBsb2FkaW5nICcgKyBzTW9kZWxOYW1lICsgJz8nKTtcclxuICAgIH1cclxuICAgIC8vIGNoZWNrIHByb3BlcnRpZXMgb2YgbW9kZWxcclxuICAgIE9iamVjdC5rZXlzKG9NZGwpLnNvcnQoKS5mb3JFYWNoKGZ1bmN0aW9uKHNQcm9wZXJ0eSkge1xyXG4gICAgICAgIGlmKEFSUl9NT0RFTF9QUk9QRVJUSUVTLmluZGV4T2Yoc1Byb3BlcnR5KSA8IDApIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNb2RlbCBwcm9wZXJ0eSBcIicgKyBzUHJvcGVydHkgKyAnXCIgbm90IGEga25vd24gbW9kZWwgcHJvcHBlcnR5IGluIG1vZGVsIG9mIGRvbWFpbiAnICsgb01kbC5kb21haW4gKyAnICcpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgLy8gY2hlY2sgdGhhdCBtZW1iZXJzIG9mIHdvcmRpbmRleCBhcmUgaW4gY2F0ZWdvcmllcyxcclxuICAgIG9NZGwud29yZGluZGV4ID0gb01kbC53b3JkaW5kZXggfHwgW107XHJcbiAgICBvTWRsLndvcmRpbmRleC5mb3JFYWNoKGZ1bmN0aW9uKHNXb3JkSW5kZXgpIHtcclxuICAgICAgICBpZihvTWRsLmNhdGVnb3J5LmluZGV4T2Yoc1dvcmRJbmRleCkgPCAwKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTW9kZWwgd29yZGluZGV4IFwiJyArIHNXb3JkSW5kZXggKyAnXCIgbm90IGEgY2F0ZWdvcnkgb2YgZG9tYWluICcgKyBvTWRsLmRvbWFpbiArICcgJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBvTWRsLmV4YWN0bWF0Y2ggPSBvTWRsLmV4YWN0bWF0Y2ggfHwgW107XHJcbiAgICBvTWRsLmV4YWN0bWF0Y2guZm9yRWFjaChmdW5jdGlvbihzRXhhY3RNYXRjaCkge1xyXG4gICAgICAgIGlmKG9NZGwuY2F0ZWdvcnkuaW5kZXhPZihzRXhhY3RNYXRjaCkgPCAwKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTW9kZWwgZXhhY3RtYXRjaCBcIicgKyBzRXhhY3RNYXRjaCArICdcIiBub3QgYSBjYXRlZ29yeSBvZiBkb21haW4gJyArIG9NZGwuZG9tYWluICsgJyAnKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcblxyXG4gICAgLy8gYWRkIHJlbGF0aW9uIGRvbWFpbiAtPiBjYXRlZ29yeVxyXG4gICAgdmFyIGRvbWFpblN0ciA9IE1ldGFGLkRvbWFpbihvTWRsLmRvbWFpbikudG9GdWxsU3RyaW5nKCk7XHJcbiAgICB2YXIgcmVsYXRpb25TdHIgPSBNZXRhRi5SZWxhdGlvbihNZXRhLlJFTEFUSU9OX2hhc0NhdGVnb3J5KS50b0Z1bGxTdHJpbmcoKTtcclxuICAgIHZhciByZXZlcnNlUmVsYXRpb25TdHIgPSBNZXRhRi5SZWxhdGlvbihNZXRhLlJFTEFUSU9OX2lzQ2F0ZWdvcnlPZikudG9GdWxsU3RyaW5nKCk7XHJcbiAgICBvTWRsLmNhdGVnb3J5LmZvckVhY2goZnVuY3Rpb24oc0NhdGVnb3J5KSB7XHJcblxyXG4gICAgICAgIHZhciBDYXRlZ29yeVN0cmluZyA9IE1ldGFGLkNhdGVnb3J5KHNDYXRlZ29yeSkudG9GdWxsU3RyaW5nKCk7XHJcbiAgICAgICAgb01vZGVsLm1ldGEudDNbZG9tYWluU3RyXSA9IG9Nb2RlbC5tZXRhLnQzW2RvbWFpblN0cl0gfHwge307XHJcbiAgICAgICAgb01vZGVsLm1ldGEudDNbZG9tYWluU3RyXVtyZWxhdGlvblN0cl0gPSBvTW9kZWwubWV0YS50M1tkb21haW5TdHJdW3JlbGF0aW9uU3RyXSB8fCB7fTtcclxuICAgICAgICBvTW9kZWwubWV0YS50M1tkb21haW5TdHJdW3JlbGF0aW9uU3RyXVtDYXRlZ29yeVN0cmluZ10gID0ge307XHJcblxyXG4gICAgICAgIG9Nb2RlbC5tZXRhLnQzW0NhdGVnb3J5U3RyaW5nXSA9IG9Nb2RlbC5tZXRhLnQzW0NhdGVnb3J5U3RyaW5nXSB8fCB7fTtcclxuICAgICAgICBvTW9kZWwubWV0YS50M1tDYXRlZ29yeVN0cmluZ11bcmV2ZXJzZVJlbGF0aW9uU3RyXSA9IG9Nb2RlbC5tZXRhLnQzW0NhdGVnb3J5U3RyaW5nXVtyZXZlcnNlUmVsYXRpb25TdHJdIHx8IHt9O1xyXG4gICAgICAgIG9Nb2RlbC5tZXRhLnQzW0NhdGVnb3J5U3RyaW5nXVtyZXZlcnNlUmVsYXRpb25TdHJdW2RvbWFpblN0cl0gID0ge307XHJcblxyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gYWRkIGEgcHJlY2ljZSBkb21haW4gbWF0Y2hydWxlXHJcbiAgICBpbnNlcnRSdWxlSWZOb3RQcmVzZW50KG9Nb2RlbC5tUnVsZXMsIHtcclxuICAgICAgICAgICAgY2F0ZWdvcnk6IFwiZG9tYWluXCIsXHJcbiAgICAgICAgICAgIG1hdGNoZWRTdHJpbmc6IG9NZGwuZG9tYWluLFxyXG4gICAgICAgICAgICB0eXBlOiBJTWF0Y2guRW51bVJ1bGVUeXBlLldPUkQsXHJcbiAgICAgICAgICAgIHdvcmQ6IG9NZGwuZG9tYWluLFxyXG4gICAgICAgICAgICBfcmFua2luZzogMC45NVxyXG4gICAgICAgIH0sIG9Nb2RlbC5zZWVuUnVsZXMpO1xyXG5cclxuXHJcblxyXG4gICAgLy8gZXh0cmFjdCB0b29scyBhbiBhZGQgdG8gdG9vbHM6XHJcbiAgICBvTW9kZWwudG9vbHMuZmlsdGVyKGZ1bmN0aW9uIChvRW50cnkpIHtcclxuICAgICAgICBpZiAob0VudHJ5Lm5hbWUgPT09IChvTWRsLnRvb2wgJiYgb01kbC50b29sLm5hbWUpKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiVG9vbCBcIiArIG9NZGwudG9vbC5uYW1lICsgXCIgYWxyZWFkeSBwcmVzZW50IHdoZW4gbG9hZGluZyBcIiArIHNNb2RlbE5hbWUpO1xyXG4gICAgICAgICAgICAvL3Rocm93IG5ldyBFcnJvcignRG9tYWluIGFscmVhZHkgbG9hZGVkPycpO1xyXG4gICAgICAgICAgICBwcm9jZXNzLmV4aXQoLTEpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgLy8gYWRkIHRoZSB0b29sIG5hbWUgYXMgcnVsZSB1bmxlc3MgaGlkZGVuXHJcbiAgICBpZiAoIW9NZGwudG9vbGhpZGRlbiAmJiBvTWRsLnRvb2wgJiYgb01kbC50b29sLm5hbWUpIHtcclxuICAgICAgICBpbnNlcnRSdWxlSWZOb3RQcmVzZW50KG9Nb2RlbC5tUnVsZXMsIHtcclxuICAgICAgICAgICAgY2F0ZWdvcnk6IFwidG9vbFwiLFxyXG4gICAgICAgICAgICBtYXRjaGVkU3RyaW5nOiBvTWRsLnRvb2wubmFtZSxcclxuICAgICAgICAgICAgdHlwZTogSU1hdGNoLkVudW1SdWxlVHlwZS5XT1JELFxyXG4gICAgICAgICAgICB3b3JkOiBvTWRsLnRvb2wubmFtZSxcclxuICAgICAgICAgICAgX3Jhbmtpbmc6IDAuOTVcclxuICAgICAgICB9LCBvTW9kZWwuc2VlblJ1bGVzKTtcclxuICAgIH07XHJcbiAgICBpZiAob01kbC5zeW5vbnltcyAmJiBvTWRsLnN5bm9ueW1zW1widG9vbFwiXSkge1xyXG4gICAgICAgIGFkZFN5bm9ueW1zKG9NZGwuc3lub255bXNbXCJ0b29sXCJdLCBcInRvb2xcIiwgb01kbC50b29sLm5hbWUsIG9Nb2RlbC5tUnVsZXMsIG9Nb2RlbC5zZWVuUnVsZXMpO1xyXG4gICAgfTtcclxuICAgIGlmIChvTWRsLnN5bm9ueW1zKSB7XHJcbiAgICAgICAgT2JqZWN0LmtleXMob01kbC5zeW5vbnltcykuZm9yRWFjaChmdW5jdGlvbiAoc3N5bmtleSkge1xyXG4gICAgICAgICAgICBpZiAob01kbC5jYXRlZ29yeS5pbmRleE9mKHNzeW5rZXkpID49IDAgJiYgc3N5bmtleSAhPT0gXCJ0b29sXCIpIHtcclxuICAgICAgICAgICAgICAgIGFkZFN5bm9ueW1zKG9NZGwuc3lub255bXNbc3N5bmtleV0sIFwiY2F0ZWdvcnlcIiwgc3N5bmtleSwgb01vZGVsLm1SdWxlcywgb01vZGVsLnNlZW5SdWxlcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIG9Nb2RlbC5kb21haW5zLnB1c2gob01kbC5kb21haW4pO1xyXG4gICAgaWYob01kbC50b29sLm5hbWUpIHtcclxuICAgICAgb01vZGVsLnRvb2xzLnB1c2gob01kbC50b29sKTtcclxuICAgIH1cclxuICAgIG9Nb2RlbC5jYXRlZ29yeSA9IG9Nb2RlbC5jYXRlZ29yeS5jb25jYXQob01kbC5jYXRlZ29yeSk7XHJcbiAgICBvTW9kZWwuY2F0ZWdvcnkuc29ydCgpO1xyXG4gICAgb01vZGVsLmNhdGVnb3J5ID0gb01vZGVsLmNhdGVnb3J5LmZpbHRlcihmdW5jdGlvbiAoc3RyaW5nLCBpbmRleCkge1xyXG4gICAgICAgIHJldHVybiBvTW9kZWwuY2F0ZWdvcnlbaW5kZXhdICE9PSBvTW9kZWwuY2F0ZWdvcnlbaW5kZXggKyAxXTtcclxuICAgIH0pO1xyXG4gICAgbG9hZE1vZGVsRGF0YShtb2RlbFBhdGgsIG9NZGwsIHNNb2RlbE5hbWUsIG9Nb2RlbCk7XHJcbn0gLy8gbG9hZG1vZGVsXHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNwbGl0UnVsZXMocnVsZXMgOiBJTWF0Y2gubVJ1bGVbXSkgOiBJTWF0Y2guU3BsaXRSdWxlcyB7XHJcbiAgICB2YXIgcmVzID0ge307XHJcbiAgICB2YXIgbm9uV29yZFJ1bGVzID0gW107XHJcbiAgICBydWxlcy5mb3JFYWNoKGZ1bmN0aW9uKHJ1bGUpIHtcclxuICAgICAgICBpZihydWxlLnR5cGUgPT09IElNYXRjaC5FbnVtUnVsZVR5cGUuV09SRCkge1xyXG4gICAgICAgICAgICBpZighcnVsZS5sb3dlcmNhc2V3b3JkKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJSdWxlIGhhcyBubyBtZW1iZXIgbG93ZXJjYXNld29yZFwiICsgSlNPTi5zdHJpbmdpZnkocnVsZSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJlc1tydWxlLmxvd2VyY2FzZXdvcmRdID0gcmVzW3J1bGUubG93ZXJjYXNld29yZF0gfHwgW107XHJcbiAgICAgICAgICAgIHJlc1tydWxlLmxvd2VyY2FzZXdvcmRdLnB1c2gocnVsZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbm9uV29yZFJ1bGVzLnB1c2gocnVsZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHdvcmRNYXA6IHJlcyxcclxuICAgICAgICBub25Xb3JkUnVsZXMgOiBub25Xb3JkUnVsZXMsXHJcbiAgICAgICAgYWxsUnVsZXMgOiBydWxlc1xyXG4gICAgfTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRNb2RlbHMobW9kZWxQYXRoPyA6IHN0cmluZykgOiBJTWF0Y2guSU1vZGVscyB7XHJcbiAgICB2YXIgb01vZGVsOiBJTWF0Y2guSU1vZGVscztcclxuICAgIG9Nb2RlbCA9IHtcclxuICAgICAgICBkb21haW5zOiBbXSxcclxuICAgICAgICB0b29sczogW10sXHJcbiAgICAgICAgcnVsZXMgOiB1bmRlZmluZWQsXHJcbiAgICAgICAgY2F0ZWdvcnk6IFtdLFxyXG4gICAgICAgIG9wZXJhdG9ycyA6IHt9LFxyXG4gICAgICAgIG1SdWxlczogW10sXHJcbiAgICAgICAgc2VlblJ1bGVzIDoge30sXHJcbiAgICAgICAgcmVjb3JkczogW10sXHJcbiAgICAgICAgbWV0YSA6IHsgdDMgOiB7fSB9XHJcbiAgICB9XHJcbiAgICBtb2RlbFBhdGggPSBtb2RlbFBhdGggfHwgZW52TW9kZWxQYXRoO1xyXG4gICAgdmFyIHNtZGxzID0gZnMucmVhZEZpbGVTeW5jKCcuLycgKyBtb2RlbFBhdGggKyAnL21vZGVscy5qc29uJywgJ3V0Zi04Jyk7XHJcbiAgICB2YXIgbWRscyA9IEpTT04ucGFyc2UoXCJcIiArIHNtZGxzKTtcclxuICAgIG1kbHMuZm9yRWFjaChmdW5jdGlvbiAoc01vZGVsTmFtZSkge1xyXG4gICAgICAgIGxvYWRNb2RlbChtb2RlbFBhdGgsIHNNb2RlbE5hbWUsIG9Nb2RlbClcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIGFkZCB0aGUgY2F0ZWdvcmllcyB0byB0aGUgbW9kZWw6XHJcbiAgICBvTW9kZWwuY2F0ZWdvcnkuZm9yRWFjaChmdW5jdGlvbiAoY2F0ZWdvcnkpIHtcclxuICAgICAgICBpbnNlcnRSdWxlSWZOb3RQcmVzZW50KG9Nb2RlbC5tUnVsZXMsIHtcclxuICAgICAgICAgICAgY2F0ZWdvcnk6IFwiY2F0ZWdvcnlcIixcclxuICAgICAgICAgICAgbWF0Y2hlZFN0cmluZzogY2F0ZWdvcnksXHJcbiAgICAgICAgICAgIHR5cGU6IElNYXRjaC5FbnVtUnVsZVR5cGUuV09SRCxcclxuICAgICAgICAgICAgd29yZDogY2F0ZWdvcnksXHJcbiAgICAgICAgICAgIGxvd2VyY2FzZXdvcmQ6IGNhdGVnb3J5LnRvTG93ZXJDYXNlKCksXHJcbiAgICAgICAgICAgIF9yYW5raW5nOiAwLjk1XHJcbiAgICAgICAgfSwgb01vZGVsLnNlZW5SdWxlcyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBhZGQgdGhlIGRvbWFpbiBtZXRhIHJ1bGVcclxuICAgIGluc2VydFJ1bGVJZk5vdFByZXNlbnQob01vZGVsLm1SdWxlcywge1xyXG4gICAgICAgICAgICBjYXRlZ29yeTogXCJtZXRhXCIsXHJcbiAgICAgICAgICAgIG1hdGNoZWRTdHJpbmc6IFwiZG9tYWluXCIsXHJcbiAgICAgICAgICAgIHR5cGU6IElNYXRjaC5FbnVtUnVsZVR5cGUuV09SRCxcclxuICAgICAgICAgICAgd29yZDogXCJkb21haW5cIixcclxuICAgICAgICAgICAgX3Jhbmtpbmc6IDAuOTVcclxuICAgICAgICB9LCBvTW9kZWwuc2VlblJ1bGVzKTtcclxuXHJcblxyXG5cclxuICAgIC8vYWRkIGEgZmlsbGVyIHJ1bGVcclxuICAgIHZhciBzZmlsbGVycyA9IGZzLnJlYWRGaWxlU3luYygnLi8nICsgbW9kZWxQYXRoICsgJy9maWxsZXIuanNvbicsICd1dGYtOCcpO1xyXG4gICAgdmFyIGZpbGxlcnMgPSBKU09OLnBhcnNlKHNmaWxsZXJzKTtcclxuICAgIHZhciByZSA9IFwiXigoXCIgKyBmaWxsZXJzLmpvaW4oXCIpfChcIikgKyBcIikpJFwiO1xyXG4gICAgb01vZGVsLm1SdWxlcy5wdXNoKHtcclxuICAgICAgICBjYXRlZ29yeTogXCJmaWxsZXJcIixcclxuICAgICAgICB0eXBlOiBJTWF0Y2guRW51bVJ1bGVUeXBlLlJFR0VYUCxcclxuICAgICAgICByZWdleHA6IG5ldyBSZWdFeHAocmUsIFwiaVwiKSxcclxuICAgICAgICBtYXRjaGVkU3RyaW5nOiBcImZpbGxlclwiLFxyXG4gICAgICAgIF9yYW5raW5nOiAwLjlcclxuICAgIH0pO1xyXG5cclxuICAgIC8vYWRkIG9wZXJhdG9yc1xyXG4gICAgdmFyIHNPcGVyYXRvcnMgPSBmcy5yZWFkRmlsZVN5bmMoJy4vcmVzb3VyY2VzL21vZGVsL29wZXJhdG9ycy5qc29uJywgJ3V0Zi04Jyk7XHJcbiAgICB2YXIgb3BlcmF0b3JzID0gSlNPTi5wYXJzZShzT3BlcmF0b3JzKTtcclxuICAgIE9iamVjdC5rZXlzKG9wZXJhdG9ycy5vcGVyYXRvcnMpLmZvckVhY2goZnVuY3Rpb24ob3BlcmF0b3IpIHtcclxuICAgICAgICBpZihJTWF0Y2guYU9wZXJhdG9yTmFtZXMuaW5kZXhPZihvcGVyYXRvcikgPCAwKSB7XHJcbiAgICAgICAgICAgIGRlYnVnbG9nKFwidW5rbm93biBvcGVyYXRvciBcIiArIG9wZXJhdG9yKTtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidW5rbm93biBvcGVyYXRvciBcIiArIG9wZXJhdG9yKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgb01vZGVsLm9wZXJhdG9yc1tvcGVyYXRvcl0gPSBvcGVyYXRvcnMub3BlcmF0b3JzW29wZXJhdG9yXTtcclxuICAgICAgICBvTW9kZWwub3BlcmF0b3JzW29wZXJhdG9yXS5vcGVyYXRvciA9IDxJTWF0Y2guT3BlcmF0b3JOYW1lPiBvcGVyYXRvcjtcclxuICAgICAgICBPYmplY3QuZnJlZXplKG9Nb2RlbC5vcGVyYXRvcnNbb3BlcmF0b3JdKTtcclxuICAgICAgICB2YXIgd29yZCA9IG9wZXJhdG9yO1xyXG4gICAgICAgIGluc2VydFJ1bGVJZk5vdFByZXNlbnQob01vZGVsLm1SdWxlcywge1xyXG4gICAgICAgICAgICBjYXRlZ29yeTogXCJvcGVyYXRvclwiLFxyXG4gICAgICAgICAgICB3b3JkIDogd29yZC50b0xvd2VyQ2FzZSgpLFxyXG4gICAgICAgICAgICBsb3dlcmNhc2V3b3JkIDogd29yZC50b0xvd2VyQ2FzZSgpLFxyXG4gICAgICAgICAgICB0eXBlOiBJTWF0Y2guRW51bVJ1bGVUeXBlLldPUkQsXHJcbiAgICAgICAgICAgIG1hdGNoZWRTdHJpbmcgOiB3b3JkLFxyXG4gICAgICAgICAgICBfcmFua2luZzogMC45XHJcbiAgICAgICAgfSwgb01vZGVsLnNlZW5SdWxlcyk7XHJcbiAgICAgICAgLy8gYWRkIGFsbCBzeW5vbnltc1xyXG4gICAgICAgIGlmKG9wZXJhdG9ycy5zeW5vbnltc1tvcGVyYXRvcl0pIHtcclxuICAgICAgICAgICAgT2JqZWN0LmtleXMob3BlcmF0b3JzLnN5bm9ueW1zW29wZXJhdG9yXSkuZm9yRWFjaChmdW5jdGlvbihzeW5vbnltKSB7XHJcbiAgICAgICAgICAgICAgICBpbnNlcnRSdWxlSWZOb3RQcmVzZW50KG9Nb2RlbC5tUnVsZXMse1xyXG4gICAgICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBcIm9wZXJhdG9yXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgd29yZCA6IHN5bm9ueW0udG9Mb3dlckNhc2UoKSxcclxuICAgICAgICAgICAgICAgICAgICBsb3dlcmNhc2V3b3JkIDogc3lub255bS50b0xvd2VyQ2FzZSgpLFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IElNYXRjaC5FbnVtUnVsZVR5cGUuV09SRCxcclxuICAgICAgICAgICAgICAgICAgICBtYXRjaGVkU3RyaW5nIDogb3BlcmF0b3IsXHJcbiAgICAgICAgICAgICAgICAgICAgX3Jhbmtpbmc6IDAuOVxyXG4gICAgICAgICAgICAgICAgfSwgb01vZGVsLnNlZW5SdWxlcyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgLypcclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICBjYXRlZ29yeTogXCJmaWxsZXJcIixcclxuICAgICAgICAgIHR5cGU6IDEsXHJcbiAgICAgICAgICByZWdleHA6IC9eKChzdGFydCl8KHNob3cpfChmcm9tKXwoaW4pKSQvaSxcclxuICAgICAgICAgIG1hdGNoZWRTdHJpbmc6IFwiZmlsbGVyXCIsXHJcbiAgICAgICAgICBfcmFua2luZzogMC45XHJcbiAgICAgICAgfSxcclxuICAgICovXHJcbiAgICBvTW9kZWwubVJ1bGVzID0gb01vZGVsLm1SdWxlcy5zb3J0KElucHV0RmlsdGVyUnVsZXMuY21wTVJ1bGUpO1xyXG4gICAgb01vZGVsLnJ1bGVzID0gc3BsaXRSdWxlcyhvTW9kZWwubVJ1bGVzKTtcclxuICAgIG9Nb2RlbC50b29scyA9IG9Nb2RlbC50b29scy5zb3J0KFRvb2xzLmNtcFRvb2xzKTtcclxuICAgIGRlbGV0ZSBvTW9kZWwuc2VlblJ1bGVzO1xyXG4gICAgcmV0dXJuIG9Nb2RlbDtcclxufVxyXG5cclxuXHJcbmNvbnN0IE1ldGFGID0gTWV0YS5nZXRNZXRhRmFjdG9yeSgpO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldE9wZXJhdG9yKG1kbDogSU1hdGNoLklNb2RlbHMsIG9wZXJhdG9yIDogc3RyaW5nKSA6IElNYXRjaC5JT3BlcmF0b3Ige1xyXG4gICAgcmV0dXJuIG1kbC5vcGVyYXRvcnNbb3BlcmF0b3JdO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0UmVzdWx0QXNBcnJheShtZGwgOiBJTWF0Y2guSU1vZGVscywgYSA6IE1ldGEuSU1ldGEsIHJlbCA6IE1ldGEuSU1ldGEpIDogTWV0YS5JTWV0YVtdIHtcclxuICAgIGlmKHJlbC50b1R5cGUoKSAhPT0gJ3JlbGF0aW9uJykge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImV4cGVjdCByZWxhdGlvbiBhcyAybmQgYXJnXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciByZXMgPSBtZGwubWV0YS50M1thLnRvRnVsbFN0cmluZygpXSAmJlxyXG4gICAgbWRsLm1ldGEudDNbYS50b0Z1bGxTdHJpbmcoKV1bcmVsLnRvRnVsbFN0cmluZygpXTtcclxuICAgIGlmKCFyZXMpIHtcclxuICAgICAgICByZXR1cm4gW107XHJcbiAgICB9XHJcbiAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMocmVzKS5zb3J0KCkubWFwKE1ldGFGLnBhcnNlSU1ldGEpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q2F0ZWdvcmllc0ZvckRvbWFpbih0aGVNb2RlbCA6IElNYXRjaC5JTW9kZWxzLCBkb21haW4gOiBzdHJpbmcpIDogc3RyaW5nW10ge1xyXG4gICAgaWYodGhlTW9kZWwuZG9tYWlucy5pbmRleE9mKGRvbWFpbikgPCAwKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRG9tYWluIFxcXCJcIiArIGRvbWFpbiArIFwiXFxcIiBub3QgcGFydCBvZiBtb2RlbFwiKTtcclxuICAgIH1cclxuICAgIHZhciByZXMgPSBnZXRSZXN1bHRBc0FycmF5KHRoZU1vZGVsLCBNZXRhRi5Eb21haW4oZG9tYWluKSwgTWV0YUYuUmVsYXRpb24oTWV0YS5SRUxBVElPTl9oYXNDYXRlZ29yeSkpO1xyXG4gICAgcmV0dXJuIE1ldGEuZ2V0U3RyaW5nQXJyYXkocmVzKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJldHVybiBhbGwgY2F0ZWdvcmllcyBvZiBhIGRvbWFpbiB3aGljaCBjYW4gYXBwZWFyIG9uIGEgd29yZCxcclxuICogdGhlc2UgYXJlIHR5cGljYWxseSB0aGUgd29yZGluZGV4IGRvbWFpbnMgKyBlbnRyaWVzIGdlbmVyYXRlZCBieSBnZW5lcmljIHJ1bGVzXHJcbiAqXHJcbiAqIFRoZSBjdXJyZW50IGltcGxlbWVudGF0aW9uIGlzIGEgc2ltcGxpZmljYXRpb25cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRQb3RlbnRpYWxXb3JkQ2F0ZWdvcmllc0ZvckRvbWFpbih0aGVNb2RlbCA6IElNYXRjaC5JTW9kZWxzLCBkb21haW4gOiBzdHJpbmcpIDogc3RyaW5nW10ge1xyXG4gICAgLy8gdGhpcyBpcyBhIHNpbXBsaWZpZWQgdmVyc2lvblxyXG4gICAgcmV0dXJuIGdldENhdGVnb3JpZXNGb3JEb21haW4odGhlTW9kZWwsIGRvbWFpbik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXREb21haW5zRm9yQ2F0ZWdvcnkodGhlTW9kZWwgOiBJTWF0Y2guSU1vZGVscywgY2F0ZWdvcnkgOiBzdHJpbmcpIDogc3RyaW5nW10ge1xyXG4gICAgaWYodGhlTW9kZWwuY2F0ZWdvcnkuaW5kZXhPZihjYXRlZ29yeSkgPCAwKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2F0ZWdvcnkgXFxcIlwiICsgY2F0ZWdvcnkgKyBcIlxcXCIgbm90IHBhcnQgb2YgbW9kZWxcIik7XHJcbiAgICB9XHJcbiAgICB2YXIgcmVzID0gZ2V0UmVzdWx0QXNBcnJheSh0aGVNb2RlbCwgTWV0YUYuQ2F0ZWdvcnkoY2F0ZWdvcnkpLCBNZXRhRi5SZWxhdGlvbihNZXRhLlJFTEFUSU9OX2lzQ2F0ZWdvcnlPZikpO1xyXG4gICAgcmV0dXJuIE1ldGEuZ2V0U3RyaW5nQXJyYXkocmVzKTtcclxufVxyXG5cclxuXHJcbiBleHBvcnQgZnVuY3Rpb24gZ2V0QWxsUmVjb3JkQ2F0ZWdvcmllc0ZvclRhcmdldENhdGVnb3J5KG1vZGVsIDogSU1hdGNoLklNb2RlbHMsIGNhdGVnb3J5IDogc3RyaW5nLCB3b3Jkc29ubHkgOiBib29sZWFuKSA6IHtba2V5OiBzdHJpbmddIDogYm9vbGVhbn0ge1xyXG4gICAgdmFyIHJlcyA9IHt9O1xyXG4gICAgLy9cclxuICAgIHZhciBmbiA9IHdvcmRzb25seSA/IGdldFBvdGVudGlhbFdvcmRDYXRlZ29yaWVzRm9yRG9tYWluIDogZ2V0Q2F0ZWdvcmllc0ZvckRvbWFpbjtcclxuICAgIHZhciBkb21haW5zID0gZ2V0RG9tYWluc0ZvckNhdGVnb3J5KG1vZGVsLCBjYXRlZ29yeSk7XHJcbiAgICBkb21haW5zLmZvckVhY2goZnVuY3Rpb24oZG9tYWluKSB7XHJcbiAgICAgICAgZm4obW9kZWwsIGRvbWFpbikuZm9yRWFjaChmdW5jdGlvbih3b3JkY2F0KSB7XHJcbiAgICAgICAgICAgIHJlc1t3b3JkY2F0XSA9IHRydWU7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5mcmVlemUocmVzKTtcclxuICAgIHJldHVybiByZXM7XHJcbiB9XHJcblxyXG4gZXhwb3J0IGZ1bmN0aW9uIGdldEFsbFJlY29yZENhdGVnb3JpZXNGb3JUYXJnZXRDYXRlZ29yaWVzKG1vZGVsIDogSU1hdGNoLklNb2RlbHMsIGNhdGVnb3JpZXMgOiBzdHJpbmdbXSwgd29yZHNvbmx5IDogYm9vbGVhbikgOiB7W2tleTogc3RyaW5nXSA6IGJvb2xlYW59IHtcclxuICAgIHZhciByZXMgPSB7fTtcclxuICAgIC8vXHJcbiAgICB2YXIgZm4gPSB3b3Jkc29ubHkgPyBnZXRQb3RlbnRpYWxXb3JkQ2F0ZWdvcmllc0ZvckRvbWFpbiA6IGdldENhdGVnb3JpZXNGb3JEb21haW47XHJcbiAgICB2YXIgZG9tYWlucyA9IHVuZGVmaW5lZDtcclxuICAgIGNhdGVnb3JpZXMuZm9yRWFjaChmdW5jdGlvbihjYXRlZ29yeSkge1xyXG4gICAgICAgIHZhciBjYXRkb21haW5zID0gZ2V0RG9tYWluc0ZvckNhdGVnb3J5KG1vZGVsLCBjYXRlZ29yeSlcclxuICAgICAgICBpZighZG9tYWlucykge1xyXG4gICAgICAgICAgICBkb21haW5zID0gY2F0ZG9tYWlucztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBkb21haW5zID0gXy5pbnRlcnNlY3Rpb24oZG9tYWlucywgY2F0ZG9tYWlucyk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBpZihkb21haW5zLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignY2F0ZWdvcmllcyAnICsgVXRpbHMubGlzdFRvUXVvdGVkQ29tbWFBbmQoY2F0ZWdvcmllcykgKyAnIGhhdmUgbm8gY29tbW9uIGRvbWFpbi4nKVxyXG4gICAgfVxyXG4gICAgZG9tYWlucy5mb3JFYWNoKGZ1bmN0aW9uKGRvbWFpbikge1xyXG4gICAgICAgIGZuKG1vZGVsLCBkb21haW4pLmZvckVhY2goZnVuY3Rpb24od29yZGNhdCkge1xyXG4gICAgICAgICAgICByZXNbd29yZGNhdF0gPSB0cnVlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZnJlZXplKHJlcyk7XHJcbiAgICByZXR1cm4gcmVzO1xyXG4gfVxyXG5cclxuXHJcbiIsIi8qKlxuICogRnVuY3Rpb25hbGl0eSBtYW5hZ2luZyB0aGUgbWF0Y2ggbW9kZWxzXG4gKlxuICogQGZpbGVcbiAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpO1xudmFyIGRlYnVnbG9nID0gZGVidWcoJ21vZGVsJyk7XG52YXIgbG9nZ2VyID0gcmVxdWlyZSgnLi4vdXRpbHMvbG9nZ2VyJyk7XG52YXIgbG9hZGxvZyA9IGxvZ2dlci5sb2dnZXIoJ21vZGVsbG9hZCcsICcnKTtcbnZhciBJTWF0Y2ggPSByZXF1aXJlKCcuLi9tYXRjaC9pZm1hdGNoJyk7XG52YXIgSW5wdXRGaWx0ZXJSdWxlcyA9IHJlcXVpcmUoJy4uL21hdGNoL2lucHV0RmlsdGVyUnVsZXMnKTtcbnZhciBUb29scyA9IHJlcXVpcmUoJy4uL21hdGNoL3Rvb2xzJyk7XG52YXIgZnMgPSByZXF1aXJlKCdmcycpO1xudmFyIE1ldGEgPSByZXF1aXJlKCcuL21ldGEnKTtcbnZhciBVdGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzL3V0aWxzJyk7XG52YXIgcHJvY2VzcyA9IHJlcXVpcmUoJ3Byb2Nlc3MnKTtcbnZhciBfID0gcmVxdWlyZSgnbG9kYXNoJyk7XG4vKipcbiAqIHRoZSBtb2RlbCBwYXRoLCBtYXkgYmUgY29udHJvbGxlZCB2aWEgZW52aXJvbm1lbnQgdmFyaWFibGVcbiAqL1xudmFyIGVudk1vZGVsUGF0aCA9IHByb2Nlc3MuZW52W1wiQUJPVF9NT0RFTFBBVEhcIl0gfHwgXCJ0ZXN0bW9kZWxcIjtcbjtcbnZhciBBUlJfTU9ERUxfUFJPUEVSVElFUyA9IFtcImRvbWFpblwiLCBcInRvb2xcIiwgXCJ0b29saGlkZGVuXCIsIFwic3lub255bXNcIiwgXCJjYXRlZ29yeVwiLCBcIndvcmRpbmRleFwiLCBcImV4YWN0bWF0Y2hcIiwgXCJoaWRkZW5cIl07XG5mdW5jdGlvbiBhZGRTeW5vbnltcyhzeW5vbnltcywgY2F0ZWdvcnksIHN5bm9ueW1Gb3IsIG1SdWxlcywgc2Vlbikge1xuICAgIHN5bm9ueW1zLmZvckVhY2goZnVuY3Rpb24gKHN5bikge1xuICAgICAgICB2YXIgb1J1bGUgPSB7XG4gICAgICAgICAgICBjYXRlZ29yeTogY2F0ZWdvcnksXG4gICAgICAgICAgICBtYXRjaGVkU3RyaW5nOiBzeW5vbnltRm9yLFxuICAgICAgICAgICAgdHlwZTogMCAvKiBXT1JEICovLFxuICAgICAgICAgICAgd29yZDogc3luLFxuICAgICAgICAgICAgX3Jhbmtpbmc6IDAuOTVcbiAgICAgICAgfTtcbiAgICAgICAgZGVidWdsb2coXCJpbnNlcnRpbmcgc3lub255bVwiICsgSlNPTi5zdHJpbmdpZnkob1J1bGUpKTtcbiAgICAgICAgaW5zZXJ0UnVsZUlmTm90UHJlc2VudChtUnVsZXMsIG9SdWxlLCBzZWVuKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGdldFJ1bGVLZXkocnVsZSkge1xuICAgIHJldHVybiBydWxlLm1hdGNoZWRTdHJpbmcgKyBcIi18LVwiICsgcnVsZS5jYXRlZ29yeSArIFwiIC18LSBcIiArIHJ1bGUudHlwZSArIFwiIC18LSBcIiArIHJ1bGUud29yZCArIFwiIFwiO1xufVxuZnVuY3Rpb24gaW5zZXJ0UnVsZUlmTm90UHJlc2VudChtUnVsZXMsIHJ1bGUsIHNlZW5SdWxlcykge1xuICAgIGlmIChydWxlLnR5cGUgIT09IDAgLyogV09SRCAqLykge1xuICAgICAgICBtUnVsZXMucHVzaChydWxlKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoKHJ1bGUud29yZCA9PT0gdW5kZWZpbmVkKSB8fCAocnVsZS5tYXRjaGVkU3RyaW5nID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignaWxsZWdhbCBydWxlJyArIEpTT04uc3RyaW5naWZ5KHJ1bGUsIHVuZGVmaW5lZCwgMikpO1xuICAgIH1cbiAgICB2YXIgciA9IGdldFJ1bGVLZXkocnVsZSk7XG4gICAgcnVsZS5sb3dlcmNhc2V3b3JkID0gcnVsZS53b3JkLnRvTG93ZXJDYXNlKCk7XG4gICAgaWYgKHNlZW5SdWxlc1tyXSkge1xuICAgICAgICBkZWJ1Z2xvZyhcIkF0dGVtcHRpbmcgdG8gaW5zZXJ0IGR1cGxpY2F0ZVwiICsgSlNPTi5zdHJpbmdpZnkocnVsZSwgdW5kZWZpbmVkLCAyKSk7XG4gICAgICAgIHZhciBkdXBsaWNhdGVzID0gc2VlblJ1bGVzW3JdLmZpbHRlcihmdW5jdGlvbiAob0VudHJ5KSB7XG4gICAgICAgICAgICByZXR1cm4gMCA9PT0gSW5wdXRGaWx0ZXJSdWxlcy5jb21wYXJlTVJ1bGVGdWxsKG9FbnRyeSwgcnVsZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoZHVwbGljYXRlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2VlblJ1bGVzW3JdID0gKHNlZW5SdWxlc1tyXSB8fCBbXSk7XG4gICAgc2VlblJ1bGVzW3JdLnB1c2gocnVsZSk7XG4gICAgaWYgKHJ1bGUud29yZCA9PT0gXCJcIikge1xuICAgICAgICBkZWJ1Z2xvZygnU2tpcHBpbmcgcnVsZSB3aXRoIGVtdHB5IHdvcmQgJyArIEpTT04uc3RyaW5naWZ5KHJ1bGUsIHVuZGVmaW5lZCwgMikpO1xuICAgICAgICBsb2FkbG9nKCdTa2lwcGluZyBydWxlIHdpdGggZW10cHkgd29yZCAnICsgSlNPTi5zdHJpbmdpZnkocnVsZSwgdW5kZWZpbmVkLCAyKSk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbVJ1bGVzLnB1c2gocnVsZSk7XG4gICAgcmV0dXJuO1xufVxuZnVuY3Rpb24gbG9hZE1vZGVsRGF0YShtb2RlbFBhdGgsIG9NZGwsIHNNb2RlbE5hbWUsIG9Nb2RlbCkge1xuICAgIC8vIHJlYWQgdGhlIGRhdGEgLT5cbiAgICAvLyBkYXRhIGlzIHByb2Nlc3NlZCBpbnRvIG1SdWxlcyBkaXJlY3RseSxcbiAgICB2YXIgc0ZpbGVOYW1lID0gKCcuLycgKyBtb2RlbFBhdGggKyAnLycgKyBzTW9kZWxOYW1lICsgXCIuZGF0YS5qc29uXCIpO1xuICAgIHZhciBtZGxkYXRhID0gZnMucmVhZEZpbGVTeW5jKHNGaWxlTmFtZSwgJ3V0Zi04Jyk7XG4gICAgdmFyIG9NZGxEYXRhID0gSlNPTi5wYXJzZShtZGxkYXRhKTtcbiAgICBvTWRsRGF0YS5mb3JFYWNoKGZ1bmN0aW9uIChvRW50cnkpIHtcbiAgICAgICAgaWYgKCFvRW50cnkudG9vbCAmJiBvTWRsLnRvb2wubmFtZSkge1xuICAgICAgICAgICAgb0VudHJ5LnRvb2wgPSBvTWRsLnRvb2wubmFtZTtcbiAgICAgICAgICAgIG9FbnRyeS5fZG9tYWluID0gb01kbC5kb21haW47XG4gICAgICAgIH1cbiAgICAgICAgb01vZGVsLnJlY29yZHMucHVzaChvRW50cnkpO1xuICAgICAgICBvTWRsLndvcmRpbmRleC5mb3JFYWNoKGZ1bmN0aW9uIChjYXRlZ29yeSkge1xuICAgICAgICAgICAgaWYgKG9FbnRyeVtjYXRlZ29yeV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGRlYnVnbG9nKFwiSU5DT05TSVNURU5UKj4gTW9kZWxEYXRhIFwiICsgc0ZpbGVOYW1lICsgXCIgZG9lcyBub3QgY29udGFpbiBjYXRlZ29yeSBcIiArIGNhdGVnb3J5ICsgXCIgb2Ygd29yZGluZGV4XCIgKyBKU09OLnN0cmluZ2lmeShvRW50cnkpICsgXCJcIik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9FbnRyeVtjYXRlZ29yeV0gIT09IFwiKlwiKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNTdHJpbmcgPSBvRW50cnlbY2F0ZWdvcnldO1xuICAgICAgICAgICAgICAgIGRlYnVnbG9nKFwicHVzaGluZyBydWxlIHdpdGggXCIgKyBjYXRlZ29yeSArIFwiIC0+IFwiICsgc1N0cmluZyk7XG4gICAgICAgICAgICAgICAgdmFyIG9SdWxlID0ge1xuICAgICAgICAgICAgICAgICAgICBjYXRlZ29yeTogY2F0ZWdvcnksXG4gICAgICAgICAgICAgICAgICAgIG1hdGNoZWRTdHJpbmc6IHNTdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IDAgLyogV09SRCAqLyxcbiAgICAgICAgICAgICAgICAgICAgd29yZDogc1N0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgX3Jhbmtpbmc6IDAuOTVcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGlmIChvTWRsLmV4YWN0bWF0Y2ggJiYgb01kbC5leGFjdG1hdGNoLmluZGV4T2YoY2F0ZWdvcnkpID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgb1J1bGUuZXhhY3RPbmx5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaW5zZXJ0UnVsZUlmTm90UHJlc2VudChvTW9kZWwubVJ1bGVzLCBvUnVsZSwgb01vZGVsLnNlZW5SdWxlcyk7XG4gICAgICAgICAgICAgICAgaWYgKG9NZGxEYXRhLnN5bm9ueW1zICYmIG9NZGxEYXRhLnN5bm9ueW1zW2NhdGVnb3J5XSkge1xuICAgICAgICAgICAgICAgICAgICBhZGRTeW5vbnltcyhvTWRsRGF0YS5zeW5vbnltc1tjYXRlZ29yeV0sIGNhdGVnb3J5LCBzU3RyaW5nLCBvTW9kZWwubVJ1bGVzLCBvTW9kZWwuc2VlblJ1bGVzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gbG9hZE1vZGVsKG1vZGVsUGF0aCwgc01vZGVsTmFtZSwgb01vZGVsKSB7XG4gICAgZGVidWdsb2coXCIgbG9hZGluZyBcIiArIHNNb2RlbE5hbWUgKyBcIiAuLi4uXCIpO1xuICAgIHZhciBtZGwgPSBmcy5yZWFkRmlsZVN5bmMoJy4vJyArIG1vZGVsUGF0aCArICcvJyArIHNNb2RlbE5hbWUgKyBcIi5tb2RlbC5qc29uXCIsICd1dGYtOCcpO1xuICAgIHZhciBvTWRsID0gSlNPTi5wYXJzZShtZGwpO1xuICAgIGlmIChvTW9kZWwuZG9tYWlucy5pbmRleE9mKG9NZGwuZG9tYWluKSA+PSAwKSB7XG4gICAgICAgIGRlYnVnbG9nKFwiKioqKioqKioqKipoZXJlIG1kbFwiICsgSlNPTi5zdHJpbmdpZnkob01kbCwgdW5kZWZpbmVkLCAyKSk7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRG9tYWluICcgKyBvTWRsLmRvbWFpbiArICcgYWxyZWFkeSBsb2FkZWQgd2hpbGUgbG9hZGluZyAnICsgc01vZGVsTmFtZSArICc/Jyk7XG4gICAgfVxuICAgIC8vIGNoZWNrIHByb3BlcnRpZXMgb2YgbW9kZWxcbiAgICBPYmplY3Qua2V5cyhvTWRsKS5zb3J0KCkuZm9yRWFjaChmdW5jdGlvbiAoc1Byb3BlcnR5KSB7XG4gICAgICAgIGlmIChBUlJfTU9ERUxfUFJPUEVSVElFUy5pbmRleE9mKHNQcm9wZXJ0eSkgPCAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01vZGVsIHByb3BlcnR5IFwiJyArIHNQcm9wZXJ0eSArICdcIiBub3QgYSBrbm93biBtb2RlbCBwcm9wcGVydHkgaW4gbW9kZWwgb2YgZG9tYWluICcgKyBvTWRsLmRvbWFpbiArICcgJyk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICAvLyBjaGVjayB0aGF0IG1lbWJlcnMgb2Ygd29yZGluZGV4IGFyZSBpbiBjYXRlZ29yaWVzLFxuICAgIG9NZGwud29yZGluZGV4ID0gb01kbC53b3JkaW5kZXggfHwgW107XG4gICAgb01kbC53b3JkaW5kZXguZm9yRWFjaChmdW5jdGlvbiAoc1dvcmRJbmRleCkge1xuICAgICAgICBpZiAob01kbC5jYXRlZ29yeS5pbmRleE9mKHNXb3JkSW5kZXgpIDwgMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNb2RlbCB3b3JkaW5kZXggXCInICsgc1dvcmRJbmRleCArICdcIiBub3QgYSBjYXRlZ29yeSBvZiBkb21haW4gJyArIG9NZGwuZG9tYWluICsgJyAnKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIG9NZGwuZXhhY3RtYXRjaCA9IG9NZGwuZXhhY3RtYXRjaCB8fCBbXTtcbiAgICBvTWRsLmV4YWN0bWF0Y2guZm9yRWFjaChmdW5jdGlvbiAoc0V4YWN0TWF0Y2gpIHtcbiAgICAgICAgaWYgKG9NZGwuY2F0ZWdvcnkuaW5kZXhPZihzRXhhY3RNYXRjaCkgPCAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01vZGVsIGV4YWN0bWF0Y2ggXCInICsgc0V4YWN0TWF0Y2ggKyAnXCIgbm90IGEgY2F0ZWdvcnkgb2YgZG9tYWluICcgKyBvTWRsLmRvbWFpbiArICcgJyk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICAvLyBhZGQgcmVsYXRpb24gZG9tYWluIC0+IGNhdGVnb3J5XG4gICAgdmFyIGRvbWFpblN0ciA9IE1ldGFGLkRvbWFpbihvTWRsLmRvbWFpbikudG9GdWxsU3RyaW5nKCk7XG4gICAgdmFyIHJlbGF0aW9uU3RyID0gTWV0YUYuUmVsYXRpb24oTWV0YS5SRUxBVElPTl9oYXNDYXRlZ29yeSkudG9GdWxsU3RyaW5nKCk7XG4gICAgdmFyIHJldmVyc2VSZWxhdGlvblN0ciA9IE1ldGFGLlJlbGF0aW9uKE1ldGEuUkVMQVRJT05faXNDYXRlZ29yeU9mKS50b0Z1bGxTdHJpbmcoKTtcbiAgICBvTWRsLmNhdGVnb3J5LmZvckVhY2goZnVuY3Rpb24gKHNDYXRlZ29yeSkge1xuICAgICAgICB2YXIgQ2F0ZWdvcnlTdHJpbmcgPSBNZXRhRi5DYXRlZ29yeShzQ2F0ZWdvcnkpLnRvRnVsbFN0cmluZygpO1xuICAgICAgICBvTW9kZWwubWV0YS50M1tkb21haW5TdHJdID0gb01vZGVsLm1ldGEudDNbZG9tYWluU3RyXSB8fCB7fTtcbiAgICAgICAgb01vZGVsLm1ldGEudDNbZG9tYWluU3RyXVtyZWxhdGlvblN0cl0gPSBvTW9kZWwubWV0YS50M1tkb21haW5TdHJdW3JlbGF0aW9uU3RyXSB8fCB7fTtcbiAgICAgICAgb01vZGVsLm1ldGEudDNbZG9tYWluU3RyXVtyZWxhdGlvblN0cl1bQ2F0ZWdvcnlTdHJpbmddID0ge307XG4gICAgICAgIG9Nb2RlbC5tZXRhLnQzW0NhdGVnb3J5U3RyaW5nXSA9IG9Nb2RlbC5tZXRhLnQzW0NhdGVnb3J5U3RyaW5nXSB8fCB7fTtcbiAgICAgICAgb01vZGVsLm1ldGEudDNbQ2F0ZWdvcnlTdHJpbmddW3JldmVyc2VSZWxhdGlvblN0cl0gPSBvTW9kZWwubWV0YS50M1tDYXRlZ29yeVN0cmluZ11bcmV2ZXJzZVJlbGF0aW9uU3RyXSB8fCB7fTtcbiAgICAgICAgb01vZGVsLm1ldGEudDNbQ2F0ZWdvcnlTdHJpbmddW3JldmVyc2VSZWxhdGlvblN0cl1bZG9tYWluU3RyXSA9IHt9O1xuICAgIH0pO1xuICAgIC8vIGFkZCBhIHByZWNpY2UgZG9tYWluIG1hdGNocnVsZVxuICAgIGluc2VydFJ1bGVJZk5vdFByZXNlbnQob01vZGVsLm1SdWxlcywge1xuICAgICAgICBjYXRlZ29yeTogXCJkb21haW5cIixcbiAgICAgICAgbWF0Y2hlZFN0cmluZzogb01kbC5kb21haW4sXG4gICAgICAgIHR5cGU6IDAgLyogV09SRCAqLyxcbiAgICAgICAgd29yZDogb01kbC5kb21haW4sXG4gICAgICAgIF9yYW5raW5nOiAwLjk1XG4gICAgfSwgb01vZGVsLnNlZW5SdWxlcyk7XG4gICAgLy8gZXh0cmFjdCB0b29scyBhbiBhZGQgdG8gdG9vbHM6XG4gICAgb01vZGVsLnRvb2xzLmZpbHRlcihmdW5jdGlvbiAob0VudHJ5KSB7XG4gICAgICAgIGlmIChvRW50cnkubmFtZSA9PT0gKG9NZGwudG9vbCAmJiBvTWRsLnRvb2wubmFtZSkpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiVG9vbCBcIiArIG9NZGwudG9vbC5uYW1lICsgXCIgYWxyZWFkeSBwcmVzZW50IHdoZW4gbG9hZGluZyBcIiArIHNNb2RlbE5hbWUpO1xuICAgICAgICAgICAgLy90aHJvdyBuZXcgRXJyb3IoJ0RvbWFpbiBhbHJlYWR5IGxvYWRlZD8nKTtcbiAgICAgICAgICAgIHByb2Nlc3MuZXhpdCgtMSk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICAvLyBhZGQgdGhlIHRvb2wgbmFtZSBhcyBydWxlIHVubGVzcyBoaWRkZW5cbiAgICBpZiAoIW9NZGwudG9vbGhpZGRlbiAmJiBvTWRsLnRvb2wgJiYgb01kbC50b29sLm5hbWUpIHtcbiAgICAgICAgaW5zZXJ0UnVsZUlmTm90UHJlc2VudChvTW9kZWwubVJ1bGVzLCB7XG4gICAgICAgICAgICBjYXRlZ29yeTogXCJ0b29sXCIsXG4gICAgICAgICAgICBtYXRjaGVkU3RyaW5nOiBvTWRsLnRvb2wubmFtZSxcbiAgICAgICAgICAgIHR5cGU6IDAgLyogV09SRCAqLyxcbiAgICAgICAgICAgIHdvcmQ6IG9NZGwudG9vbC5uYW1lLFxuICAgICAgICAgICAgX3Jhbmtpbmc6IDAuOTVcbiAgICAgICAgfSwgb01vZGVsLnNlZW5SdWxlcyk7XG4gICAgfVxuICAgIDtcbiAgICBpZiAob01kbC5zeW5vbnltcyAmJiBvTWRsLnN5bm9ueW1zW1widG9vbFwiXSkge1xuICAgICAgICBhZGRTeW5vbnltcyhvTWRsLnN5bm9ueW1zW1widG9vbFwiXSwgXCJ0b29sXCIsIG9NZGwudG9vbC5uYW1lLCBvTW9kZWwubVJ1bGVzLCBvTW9kZWwuc2VlblJ1bGVzKTtcbiAgICB9XG4gICAgO1xuICAgIGlmIChvTWRsLnN5bm9ueW1zKSB7XG4gICAgICAgIE9iamVjdC5rZXlzKG9NZGwuc3lub255bXMpLmZvckVhY2goZnVuY3Rpb24gKHNzeW5rZXkpIHtcbiAgICAgICAgICAgIGlmIChvTWRsLmNhdGVnb3J5LmluZGV4T2Yoc3N5bmtleSkgPj0gMCAmJiBzc3lua2V5ICE9PSBcInRvb2xcIikge1xuICAgICAgICAgICAgICAgIGFkZFN5bm9ueW1zKG9NZGwuc3lub255bXNbc3N5bmtleV0sIFwiY2F0ZWdvcnlcIiwgc3N5bmtleSwgb01vZGVsLm1SdWxlcywgb01vZGVsLnNlZW5SdWxlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBvTW9kZWwuZG9tYWlucy5wdXNoKG9NZGwuZG9tYWluKTtcbiAgICBpZiAob01kbC50b29sLm5hbWUpIHtcbiAgICAgICAgb01vZGVsLnRvb2xzLnB1c2gob01kbC50b29sKTtcbiAgICB9XG4gICAgb01vZGVsLmNhdGVnb3J5ID0gb01vZGVsLmNhdGVnb3J5LmNvbmNhdChvTWRsLmNhdGVnb3J5KTtcbiAgICBvTW9kZWwuY2F0ZWdvcnkuc29ydCgpO1xuICAgIG9Nb2RlbC5jYXRlZ29yeSA9IG9Nb2RlbC5jYXRlZ29yeS5maWx0ZXIoZnVuY3Rpb24gKHN0cmluZywgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIG9Nb2RlbC5jYXRlZ29yeVtpbmRleF0gIT09IG9Nb2RlbC5jYXRlZ29yeVtpbmRleCArIDFdO1xuICAgIH0pO1xuICAgIGxvYWRNb2RlbERhdGEobW9kZWxQYXRoLCBvTWRsLCBzTW9kZWxOYW1lLCBvTW9kZWwpO1xufSAvLyBsb2FkbW9kZWxcbmZ1bmN0aW9uIHNwbGl0UnVsZXMocnVsZXMpIHtcbiAgICB2YXIgcmVzID0ge307XG4gICAgdmFyIG5vbldvcmRSdWxlcyA9IFtdO1xuICAgIHJ1bGVzLmZvckVhY2goZnVuY3Rpb24gKHJ1bGUpIHtcbiAgICAgICAgaWYgKHJ1bGUudHlwZSA9PT0gMCAvKiBXT1JEICovKSB7XG4gICAgICAgICAgICBpZiAoIXJ1bGUubG93ZXJjYXNld29yZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlJ1bGUgaGFzIG5vIG1lbWJlciBsb3dlcmNhc2V3b3JkXCIgKyBKU09OLnN0cmluZ2lmeShydWxlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXNbcnVsZS5sb3dlcmNhc2V3b3JkXSA9IHJlc1tydWxlLmxvd2VyY2FzZXdvcmRdIHx8IFtdO1xuICAgICAgICAgICAgcmVzW3J1bGUubG93ZXJjYXNld29yZF0ucHVzaChydWxlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG5vbldvcmRSdWxlcy5wdXNoKHJ1bGUpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgd29yZE1hcDogcmVzLFxuICAgICAgICBub25Xb3JkUnVsZXM6IG5vbldvcmRSdWxlcyxcbiAgICAgICAgYWxsUnVsZXM6IHJ1bGVzXG4gICAgfTtcbn1cbmV4cG9ydHMuc3BsaXRSdWxlcyA9IHNwbGl0UnVsZXM7XG5mdW5jdGlvbiBsb2FkTW9kZWxzKG1vZGVsUGF0aCkge1xuICAgIHZhciBvTW9kZWw7XG4gICAgb01vZGVsID0ge1xuICAgICAgICBkb21haW5zOiBbXSxcbiAgICAgICAgdG9vbHM6IFtdLFxuICAgICAgICBydWxlczogdW5kZWZpbmVkLFxuICAgICAgICBjYXRlZ29yeTogW10sXG4gICAgICAgIG9wZXJhdG9yczoge30sXG4gICAgICAgIG1SdWxlczogW10sXG4gICAgICAgIHNlZW5SdWxlczoge30sXG4gICAgICAgIHJlY29yZHM6IFtdLFxuICAgICAgICBtZXRhOiB7IHQzOiB7fSB9XG4gICAgfTtcbiAgICBtb2RlbFBhdGggPSBtb2RlbFBhdGggfHwgZW52TW9kZWxQYXRoO1xuICAgIHZhciBzbWRscyA9IGZzLnJlYWRGaWxlU3luYygnLi8nICsgbW9kZWxQYXRoICsgJy9tb2RlbHMuanNvbicsICd1dGYtOCcpO1xuICAgIHZhciBtZGxzID0gSlNPTi5wYXJzZShcIlwiICsgc21kbHMpO1xuICAgIG1kbHMuZm9yRWFjaChmdW5jdGlvbiAoc01vZGVsTmFtZSkge1xuICAgICAgICBsb2FkTW9kZWwobW9kZWxQYXRoLCBzTW9kZWxOYW1lLCBvTW9kZWwpO1xuICAgIH0pO1xuICAgIC8vIGFkZCB0aGUgY2F0ZWdvcmllcyB0byB0aGUgbW9kZWw6XG4gICAgb01vZGVsLmNhdGVnb3J5LmZvckVhY2goZnVuY3Rpb24gKGNhdGVnb3J5KSB7XG4gICAgICAgIGluc2VydFJ1bGVJZk5vdFByZXNlbnQob01vZGVsLm1SdWxlcywge1xuICAgICAgICAgICAgY2F0ZWdvcnk6IFwiY2F0ZWdvcnlcIixcbiAgICAgICAgICAgIG1hdGNoZWRTdHJpbmc6IGNhdGVnb3J5LFxuICAgICAgICAgICAgdHlwZTogMCAvKiBXT1JEICovLFxuICAgICAgICAgICAgd29yZDogY2F0ZWdvcnksXG4gICAgICAgICAgICBsb3dlcmNhc2V3b3JkOiBjYXRlZ29yeS50b0xvd2VyQ2FzZSgpLFxuICAgICAgICAgICAgX3Jhbmtpbmc6IDAuOTVcbiAgICAgICAgfSwgb01vZGVsLnNlZW5SdWxlcyk7XG4gICAgfSk7XG4gICAgLy8gYWRkIHRoZSBkb21haW4gbWV0YSBydWxlXG4gICAgaW5zZXJ0UnVsZUlmTm90UHJlc2VudChvTW9kZWwubVJ1bGVzLCB7XG4gICAgICAgIGNhdGVnb3J5OiBcIm1ldGFcIixcbiAgICAgICAgbWF0Y2hlZFN0cmluZzogXCJkb21haW5cIixcbiAgICAgICAgdHlwZTogMCAvKiBXT1JEICovLFxuICAgICAgICB3b3JkOiBcImRvbWFpblwiLFxuICAgICAgICBfcmFua2luZzogMC45NVxuICAgIH0sIG9Nb2RlbC5zZWVuUnVsZXMpO1xuICAgIC8vYWRkIGEgZmlsbGVyIHJ1bGVcbiAgICB2YXIgc2ZpbGxlcnMgPSBmcy5yZWFkRmlsZVN5bmMoJy4vJyArIG1vZGVsUGF0aCArICcvZmlsbGVyLmpzb24nLCAndXRmLTgnKTtcbiAgICB2YXIgZmlsbGVycyA9IEpTT04ucGFyc2Uoc2ZpbGxlcnMpO1xuICAgIHZhciByZSA9IFwiXigoXCIgKyBmaWxsZXJzLmpvaW4oXCIpfChcIikgKyBcIikpJFwiO1xuICAgIG9Nb2RlbC5tUnVsZXMucHVzaCh7XG4gICAgICAgIGNhdGVnb3J5OiBcImZpbGxlclwiLFxuICAgICAgICB0eXBlOiAxIC8qIFJFR0VYUCAqLyxcbiAgICAgICAgcmVnZXhwOiBuZXcgUmVnRXhwKHJlLCBcImlcIiksXG4gICAgICAgIG1hdGNoZWRTdHJpbmc6IFwiZmlsbGVyXCIsXG4gICAgICAgIF9yYW5raW5nOiAwLjlcbiAgICB9KTtcbiAgICAvL2FkZCBvcGVyYXRvcnNcbiAgICB2YXIgc09wZXJhdG9ycyA9IGZzLnJlYWRGaWxlU3luYygnLi9yZXNvdXJjZXMvbW9kZWwvb3BlcmF0b3JzLmpzb24nLCAndXRmLTgnKTtcbiAgICB2YXIgb3BlcmF0b3JzID0gSlNPTi5wYXJzZShzT3BlcmF0b3JzKTtcbiAgICBPYmplY3Qua2V5cyhvcGVyYXRvcnMub3BlcmF0b3JzKS5mb3JFYWNoKGZ1bmN0aW9uIChvcGVyYXRvcikge1xuICAgICAgICBpZiAoSU1hdGNoLmFPcGVyYXRvck5hbWVzLmluZGV4T2Yob3BlcmF0b3IpIDwgMCkge1xuICAgICAgICAgICAgZGVidWdsb2coXCJ1bmtub3duIG9wZXJhdG9yIFwiICsgb3BlcmF0b3IpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidW5rbm93biBvcGVyYXRvciBcIiArIG9wZXJhdG9yKTtcbiAgICAgICAgfVxuICAgICAgICBvTW9kZWwub3BlcmF0b3JzW29wZXJhdG9yXSA9IG9wZXJhdG9ycy5vcGVyYXRvcnNbb3BlcmF0b3JdO1xuICAgICAgICBvTW9kZWwub3BlcmF0b3JzW29wZXJhdG9yXS5vcGVyYXRvciA9IG9wZXJhdG9yO1xuICAgICAgICBPYmplY3QuZnJlZXplKG9Nb2RlbC5vcGVyYXRvcnNbb3BlcmF0b3JdKTtcbiAgICAgICAgdmFyIHdvcmQgPSBvcGVyYXRvcjtcbiAgICAgICAgaW5zZXJ0UnVsZUlmTm90UHJlc2VudChvTW9kZWwubVJ1bGVzLCB7XG4gICAgICAgICAgICBjYXRlZ29yeTogXCJvcGVyYXRvclwiLFxuICAgICAgICAgICAgd29yZDogd29yZC50b0xvd2VyQ2FzZSgpLFxuICAgICAgICAgICAgbG93ZXJjYXNld29yZDogd29yZC50b0xvd2VyQ2FzZSgpLFxuICAgICAgICAgICAgdHlwZTogMCAvKiBXT1JEICovLFxuICAgICAgICAgICAgbWF0Y2hlZFN0cmluZzogd29yZCxcbiAgICAgICAgICAgIF9yYW5raW5nOiAwLjlcbiAgICAgICAgfSwgb01vZGVsLnNlZW5SdWxlcyk7XG4gICAgICAgIC8vIGFkZCBhbGwgc3lub255bXNcbiAgICAgICAgaWYgKG9wZXJhdG9ycy5zeW5vbnltc1tvcGVyYXRvcl0pIHtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKG9wZXJhdG9ycy5zeW5vbnltc1tvcGVyYXRvcl0pLmZvckVhY2goZnVuY3Rpb24gKHN5bm9ueW0pIHtcbiAgICAgICAgICAgICAgICBpbnNlcnRSdWxlSWZOb3RQcmVzZW50KG9Nb2RlbC5tUnVsZXMsIHtcbiAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcnk6IFwib3BlcmF0b3JcIixcbiAgICAgICAgICAgICAgICAgICAgd29yZDogc3lub255bS50b0xvd2VyQ2FzZSgpLFxuICAgICAgICAgICAgICAgICAgICBsb3dlcmNhc2V3b3JkOiBzeW5vbnltLnRvTG93ZXJDYXNlKCksXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IDAgLyogV09SRCAqLyxcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2hlZFN0cmluZzogb3BlcmF0b3IsXG4gICAgICAgICAgICAgICAgICAgIF9yYW5raW5nOiAwLjlcbiAgICAgICAgICAgICAgICB9LCBvTW9kZWwuc2VlblJ1bGVzKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgLypcbiAgICAgICAgfSlcbiAgICAgICAgICAgIHtcbiAgICAgICAgICBjYXRlZ29yeTogXCJmaWxsZXJcIixcbiAgICAgICAgICB0eXBlOiAxLFxuICAgICAgICAgIHJlZ2V4cDogL14oKHN0YXJ0KXwoc2hvdyl8KGZyb20pfChpbikpJC9pLFxuICAgICAgICAgIG1hdGNoZWRTdHJpbmc6IFwiZmlsbGVyXCIsXG4gICAgICAgICAgX3Jhbmtpbmc6IDAuOVxuICAgICAgICB9LFxuICAgICovXG4gICAgb01vZGVsLm1SdWxlcyA9IG9Nb2RlbC5tUnVsZXMuc29ydChJbnB1dEZpbHRlclJ1bGVzLmNtcE1SdWxlKTtcbiAgICBvTW9kZWwucnVsZXMgPSBzcGxpdFJ1bGVzKG9Nb2RlbC5tUnVsZXMpO1xuICAgIG9Nb2RlbC50b29scyA9IG9Nb2RlbC50b29scy5zb3J0KFRvb2xzLmNtcFRvb2xzKTtcbiAgICBkZWxldGUgb01vZGVsLnNlZW5SdWxlcztcbiAgICByZXR1cm4gb01vZGVsO1xufVxuZXhwb3J0cy5sb2FkTW9kZWxzID0gbG9hZE1vZGVscztcbnZhciBNZXRhRiA9IE1ldGEuZ2V0TWV0YUZhY3RvcnkoKTtcbmZ1bmN0aW9uIGdldE9wZXJhdG9yKG1kbCwgb3BlcmF0b3IpIHtcbiAgICByZXR1cm4gbWRsLm9wZXJhdG9yc1tvcGVyYXRvcl07XG59XG5leHBvcnRzLmdldE9wZXJhdG9yID0gZ2V0T3BlcmF0b3I7XG5mdW5jdGlvbiBnZXRSZXN1bHRBc0FycmF5KG1kbCwgYSwgcmVsKSB7XG4gICAgaWYgKHJlbC50b1R5cGUoKSAhPT0gJ3JlbGF0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJleHBlY3QgcmVsYXRpb24gYXMgMm5kIGFyZ1wiKTtcbiAgICB9XG4gICAgdmFyIHJlcyA9IG1kbC5tZXRhLnQzW2EudG9GdWxsU3RyaW5nKCldICYmXG4gICAgICAgIG1kbC5tZXRhLnQzW2EudG9GdWxsU3RyaW5nKCldW3JlbC50b0Z1bGxTdHJpbmcoKV07XG4gICAgaWYgKCFyZXMpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMocmVzKS5zb3J0KCkubWFwKE1ldGFGLnBhcnNlSU1ldGEpO1xufVxuZXhwb3J0cy5nZXRSZXN1bHRBc0FycmF5ID0gZ2V0UmVzdWx0QXNBcnJheTtcbmZ1bmN0aW9uIGdldENhdGVnb3JpZXNGb3JEb21haW4odGhlTW9kZWwsIGRvbWFpbikge1xuICAgIGlmICh0aGVNb2RlbC5kb21haW5zLmluZGV4T2YoZG9tYWluKSA8IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRG9tYWluIFxcXCJcIiArIGRvbWFpbiArIFwiXFxcIiBub3QgcGFydCBvZiBtb2RlbFwiKTtcbiAgICB9XG4gICAgdmFyIHJlcyA9IGdldFJlc3VsdEFzQXJyYXkodGhlTW9kZWwsIE1ldGFGLkRvbWFpbihkb21haW4pLCBNZXRhRi5SZWxhdGlvbihNZXRhLlJFTEFUSU9OX2hhc0NhdGVnb3J5KSk7XG4gICAgcmV0dXJuIE1ldGEuZ2V0U3RyaW5nQXJyYXkocmVzKTtcbn1cbmV4cG9ydHMuZ2V0Q2F0ZWdvcmllc0ZvckRvbWFpbiA9IGdldENhdGVnb3JpZXNGb3JEb21haW47XG4vKipcbiAqIFJldHVybiBhbGwgY2F0ZWdvcmllcyBvZiBhIGRvbWFpbiB3aGljaCBjYW4gYXBwZWFyIG9uIGEgd29yZCxcbiAqIHRoZXNlIGFyZSB0eXBpY2FsbHkgdGhlIHdvcmRpbmRleCBkb21haW5zICsgZW50cmllcyBnZW5lcmF0ZWQgYnkgZ2VuZXJpYyBydWxlc1xuICpcbiAqIFRoZSBjdXJyZW50IGltcGxlbWVudGF0aW9uIGlzIGEgc2ltcGxpZmljYXRpb25cbiAqL1xuZnVuY3Rpb24gZ2V0UG90ZW50aWFsV29yZENhdGVnb3JpZXNGb3JEb21haW4odGhlTW9kZWwsIGRvbWFpbikge1xuICAgIC8vIHRoaXMgaXMgYSBzaW1wbGlmaWVkIHZlcnNpb25cbiAgICByZXR1cm4gZ2V0Q2F0ZWdvcmllc0ZvckRvbWFpbih0aGVNb2RlbCwgZG9tYWluKTtcbn1cbmV4cG9ydHMuZ2V0UG90ZW50aWFsV29yZENhdGVnb3JpZXNGb3JEb21haW4gPSBnZXRQb3RlbnRpYWxXb3JkQ2F0ZWdvcmllc0ZvckRvbWFpbjtcbmZ1bmN0aW9uIGdldERvbWFpbnNGb3JDYXRlZ29yeSh0aGVNb2RlbCwgY2F0ZWdvcnkpIHtcbiAgICBpZiAodGhlTW9kZWwuY2F0ZWdvcnkuaW5kZXhPZihjYXRlZ29yeSkgPCAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhdGVnb3J5IFxcXCJcIiArIGNhdGVnb3J5ICsgXCJcXFwiIG5vdCBwYXJ0IG9mIG1vZGVsXCIpO1xuICAgIH1cbiAgICB2YXIgcmVzID0gZ2V0UmVzdWx0QXNBcnJheSh0aGVNb2RlbCwgTWV0YUYuQ2F0ZWdvcnkoY2F0ZWdvcnkpLCBNZXRhRi5SZWxhdGlvbihNZXRhLlJFTEFUSU9OX2lzQ2F0ZWdvcnlPZikpO1xuICAgIHJldHVybiBNZXRhLmdldFN0cmluZ0FycmF5KHJlcyk7XG59XG5leHBvcnRzLmdldERvbWFpbnNGb3JDYXRlZ29yeSA9IGdldERvbWFpbnNGb3JDYXRlZ29yeTtcbmZ1bmN0aW9uIGdldEFsbFJlY29yZENhdGVnb3JpZXNGb3JUYXJnZXRDYXRlZ29yeShtb2RlbCwgY2F0ZWdvcnksIHdvcmRzb25seSkge1xuICAgIHZhciByZXMgPSB7fTtcbiAgICAvL1xuICAgIHZhciBmbiA9IHdvcmRzb25seSA/IGdldFBvdGVudGlhbFdvcmRDYXRlZ29yaWVzRm9yRG9tYWluIDogZ2V0Q2F0ZWdvcmllc0ZvckRvbWFpbjtcbiAgICB2YXIgZG9tYWlucyA9IGdldERvbWFpbnNGb3JDYXRlZ29yeShtb2RlbCwgY2F0ZWdvcnkpO1xuICAgIGRvbWFpbnMuZm9yRWFjaChmdW5jdGlvbiAoZG9tYWluKSB7XG4gICAgICAgIGZuKG1vZGVsLCBkb21haW4pLmZvckVhY2goZnVuY3Rpb24gKHdvcmRjYXQpIHtcbiAgICAgICAgICAgIHJlc1t3b3JkY2F0XSA9IHRydWU7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIE9iamVjdC5mcmVlemUocmVzKTtcbiAgICByZXR1cm4gcmVzO1xufVxuZXhwb3J0cy5nZXRBbGxSZWNvcmRDYXRlZ29yaWVzRm9yVGFyZ2V0Q2F0ZWdvcnkgPSBnZXRBbGxSZWNvcmRDYXRlZ29yaWVzRm9yVGFyZ2V0Q2F0ZWdvcnk7XG5mdW5jdGlvbiBnZXRBbGxSZWNvcmRDYXRlZ29yaWVzRm9yVGFyZ2V0Q2F0ZWdvcmllcyhtb2RlbCwgY2F0ZWdvcmllcywgd29yZHNvbmx5KSB7XG4gICAgdmFyIHJlcyA9IHt9O1xuICAgIC8vXG4gICAgdmFyIGZuID0gd29yZHNvbmx5ID8gZ2V0UG90ZW50aWFsV29yZENhdGVnb3JpZXNGb3JEb21haW4gOiBnZXRDYXRlZ29yaWVzRm9yRG9tYWluO1xuICAgIHZhciBkb21haW5zID0gdW5kZWZpbmVkO1xuICAgIGNhdGVnb3JpZXMuZm9yRWFjaChmdW5jdGlvbiAoY2F0ZWdvcnkpIHtcbiAgICAgICAgdmFyIGNhdGRvbWFpbnMgPSBnZXREb21haW5zRm9yQ2F0ZWdvcnkobW9kZWwsIGNhdGVnb3J5KTtcbiAgICAgICAgaWYgKCFkb21haW5zKSB7XG4gICAgICAgICAgICBkb21haW5zID0gY2F0ZG9tYWlucztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGRvbWFpbnMgPSBfLmludGVyc2VjdGlvbihkb21haW5zLCBjYXRkb21haW5zKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChkb21haW5zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NhdGVnb3JpZXMgJyArIFV0aWxzLmxpc3RUb1F1b3RlZENvbW1hQW5kKGNhdGVnb3JpZXMpICsgJyBoYXZlIG5vIGNvbW1vbiBkb21haW4uJyk7XG4gICAgfVxuICAgIGRvbWFpbnMuZm9yRWFjaChmdW5jdGlvbiAoZG9tYWluKSB7XG4gICAgICAgIGZuKG1vZGVsLCBkb21haW4pLmZvckVhY2goZnVuY3Rpb24gKHdvcmRjYXQpIHtcbiAgICAgICAgICAgIHJlc1t3b3JkY2F0XSA9IHRydWU7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIE9iamVjdC5mcmVlemUocmVzKTtcbiAgICByZXR1cm4gcmVzO1xufVxuZXhwb3J0cy5nZXRBbGxSZWNvcmRDYXRlZ29yaWVzRm9yVGFyZ2V0Q2F0ZWdvcmllcyA9IGdldEFsbFJlY29yZENhdGVnb3JpZXNGb3JUYXJnZXRDYXRlZ29yaWVzO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
