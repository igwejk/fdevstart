/**
 * Functionality managing the match models
 *
 * @file
 */
"use strict";

var debug = require('debug');
var debuglog = debug('model');
var logger = require('../utils/logger');
var loadlog = logger.logger('modelload', '');
var IMatch = require('../match/ifmatch');
var InputFilterRules = require('../match/inputFilterRules');
var Tools = require('../match/tools');
var fs = require('fs');
var Meta = require('./meta');
var process = require('process');
/**
 * the model path, may be controlled via environment variable
 */
var envModelPath = process.env["ABOT_MODELPATH"] || "testmodel";
;
var ARR_MODEL_PROPERTIES = ["domain", "tool", "toolhidden", "synonyms", "category", "wordindex", "exactmatch", "hidden"];
function addSynonyms(synonyms, category, synonymFor, mRules, seen) {
    synonyms.forEach(function (syn) {
        var oRule = {
            category: category,
            matchedString: synonymFor,
            type: 0 /* WORD */
            , word: syn,
            _ranking: 0.95
        };
        debuglog("inserting synonym" + JSON.stringify(oRule));
        insertRuleIfNotPresent(mRules, oRule, seen);
    });
}
function getRuleKey(rule) {
    return rule.matchedString + "-|-" + rule.category + " -|- " + rule.type + " -|- " + rule.word + " ";
}
function insertRuleIfNotPresent(mRules, rule, seenRules) {
    if (rule.type !== 0 /* WORD */) {
            mRules.push(rule);
            return;
        }
    if (rule.word === undefined || rule.matchedString === undefined) {
        throw new Error('illegal rule' + JSON.stringify(rule, undefined, 2));
    }
    var r = getRuleKey(rule);
    rule.lowercaseword = rule.word.toLowerCase();
    if (seenRules[r]) {
        debuglog("Attempting to insert duplicate" + JSON.stringify(rule, undefined, 2));
        var duplicates = seenRules[r].filter(function (oEntry) {
            return 0 === InputFilterRules.compareMRuleFull(oEntry, rule);
        });
        if (duplicates.length > 0) {
            return;
        }
    }
    seenRules[r] = seenRules[r] || [];
    seenRules[r].push(rule);
    if (rule.word === "") {
        debuglog('Skipping rule with emtpy word ' + JSON.stringify(rule, undefined, 2));
        loadlog('Skipping rule with emtpy word ' + JSON.stringify(rule, undefined, 2));
        return;
    }
    mRules.push(rule);
    return;
}
function loadModelData(modelPath, oMdl, sModelName, oModel) {
    // read the data ->
    // data is processed into mRules directly,
    var sFileName = './' + modelPath + '/' + sModelName + ".data.json";
    var mdldata = fs.readFileSync(sFileName, 'utf-8');
    var oMdlData = JSON.parse(mdldata);
    oMdlData.forEach(function (oEntry) {
        if (!oEntry.tool && oMdl.tool.name) {
            oEntry.tool = oMdl.tool.name;
            oEntry._domain = oMdl.domain;
        }
        oModel.records.push(oEntry);
        oMdl.wordindex.forEach(function (category) {
            if (oEntry[category] === undefined) {
                debuglog("INCONSISTENT*> ModelData " + sFileName + " does not contain category " + category + " of wordindex" + JSON.stringify(oEntry) + "");
                return;
            }
            if (oEntry[category] !== "*") {
                var sString = oEntry[category];
                debuglog("pushing rule with " + category + " -> " + sString);
                var oRule = {
                    category: category,
                    matchedString: sString,
                    type: 0 /* WORD */
                    , word: sString,
                    _ranking: 0.95
                };
                if (oMdl.exactmatch && oMdl.exactmatch.indexOf(category) >= 0) {
                    oRule.exactOnly = true;
                }
                insertRuleIfNotPresent(oModel.mRules, oRule, oModel.seenRules);
                if (oMdlData.synonyms && oMdlData.synonyms[category]) {
                    addSynonyms(oMdlData.synonyms[category], category, sString, oModel.mRules, oModel.seenRules);
                }
            }
        });
    });
}
function loadModel(modelPath, sModelName, oModel) {
    debuglog(" loading " + sModelName + " ....");
    var mdl = fs.readFileSync('./' + modelPath + '/' + sModelName + ".model.json", 'utf-8');
    var oMdl = JSON.parse(mdl);
    if (oModel.domains.indexOf(oMdl.domain) >= 0) {
        debuglog("***********here mdl" + JSON.stringify(oMdl, undefined, 2));
        throw new Error('Domain ' + oMdl.domain + ' already loaded while loading ' + sModelName + '?');
    }
    // check properties of model
    Object.keys(oMdl).sort().forEach(function (sProperty) {
        if (ARR_MODEL_PROPERTIES.indexOf(sProperty) < 0) {
            throw new Error('Model property "' + sProperty + '" not a known model propperty in model of domain ' + oMdl.domain + ' ');
        }
    });
    // check that members of wordindex are in categories,
    oMdl.wordindex = oMdl.wordindex || [];
    oMdl.wordindex.forEach(function (sWordIndex) {
        if (oMdl.category.indexOf(sWordIndex) < 0) {
            throw new Error('Model wordindex "' + sWordIndex + '" not a category of domain ' + oMdl.domain + ' ');
        }
    });
    oMdl.exactmatch = oMdl.exactmatch || [];
    oMdl.exactmatch.forEach(function (sExactMatch) {
        if (oMdl.category.indexOf(sExactMatch) < 0) {
            throw new Error('Model exactmatch "' + sExactMatch + '" not a category of domain ' + oMdl.domain + ' ');
        }
    });
    // add relation domain -> category
    var domainStr = MetaF.Domain(oMdl.domain).toFullString();
    var relationStr = MetaF.Relation(Meta.RELATION_hasCategory).toFullString();
    var reverseRelationStr = MetaF.Relation(Meta.RELATION_isCategoryOf).toFullString();
    oMdl.category.forEach(function (sCategory) {
        var CategoryString = MetaF.Category(sCategory).toFullString();
        oModel.meta.t3[domainStr] = oModel.meta.t3[domainStr] || {};
        oModel.meta.t3[domainStr][relationStr] = oModel.meta.t3[domainStr][relationStr] || {};
        oModel.meta.t3[domainStr][relationStr][CategoryString] = {};
        oModel.meta.t3[CategoryString] = oModel.meta.t3[CategoryString] || {};
        oModel.meta.t3[CategoryString][reverseRelationStr] = oModel.meta.t3[CategoryString][reverseRelationStr] || {};
        oModel.meta.t3[CategoryString][reverseRelationStr][domainStr] = {};
    });
    // add a precice domain matchrule
    insertRuleIfNotPresent(oModel.mRules, {
        category: "domain",
        matchedString: oMdl.domain,
        type: 0 /* WORD */
        , word: oMdl.domain,
        _ranking: 0.95
    }, oModel.seenRules);
    // extract tools an add to tools:
    oModel.tools.filter(function (oEntry) {
        if (oEntry.name === (oMdl.tool && oMdl.tool.name)) {
            console.log("Tool " + oMdl.tool.name + " already present when loading " + sModelName);
            //throw new Error('Domain already loaded?');
            process.exit(-1);
        }
    });
    // add the tool name as rule unless hidden
    if (!oMdl.toolhidden && oMdl.tool && oMdl.tool.name) {
        insertRuleIfNotPresent(oModel.mRules, {
            category: "tool",
            matchedString: oMdl.tool.name,
            type: 0 /* WORD */
            , word: oMdl.tool.name,
            _ranking: 0.95
        }, oModel.seenRules);
    }
    ;
    if (oMdl.synonyms && oMdl.synonyms["tool"]) {
        addSynonyms(oMdl.synonyms["tool"], "tool", oMdl.tool.name, oModel.mRules, oModel.seenRules);
    }
    ;
    if (oMdl.synonyms) {
        Object.keys(oMdl.synonyms).forEach(function (ssynkey) {
            if (oMdl.category.indexOf(ssynkey) >= 0 && ssynkey !== "tool") {
                addSynonyms(oMdl.synonyms[ssynkey], "category", ssynkey, oModel.mRules, oModel.seenRules);
            }
        });
    }
    oModel.domains.push(oMdl.domain);
    if (oMdl.tool.name) {
        oModel.tools.push(oMdl.tool);
    }
    oModel.category = oModel.category.concat(oMdl.category);
    oModel.category.sort();
    oModel.category = oModel.category.filter(function (string, index) {
        return oModel.category[index] !== oModel.category[index + 1];
    });
    loadModelData(modelPath, oMdl, sModelName, oModel);
} // loadmodel
function splitRules(rules) {
    var res = {};
    var nonWordRules = [];
    rules.forEach(function (rule) {
        if (rule.type === 0 /* WORD */) {
                if (!rule.lowercaseword) {
                    throw new Error("Rule has no member lowercaseword" + JSON.stringify(rule));
                }
                res[rule.lowercaseword] = res[rule.lowercaseword] || [];
                res[rule.lowercaseword].push(rule);
            } else {
            nonWordRules.push(rule);
        }
    });
    return {
        wordMap: res,
        nonWordRules: nonWordRules,
        allRules: rules
    };
}
exports.splitRules = splitRules;
function loadModels(modelPath) {
    var oModel;
    oModel = {
        domains: [],
        tools: [],
        rules: undefined,
        category: [],
        operators: {},
        mRules: [],
        seenRules: {},
        records: [],
        meta: { t3: {} }
    };
    modelPath = modelPath || envModelPath;
    var smdls = fs.readFileSync('./' + modelPath + '/models.json', 'utf-8');
    var mdls = JSON.parse("" + smdls);
    mdls.forEach(function (sModelName) {
        loadModel(modelPath, sModelName, oModel);
    });
    // add the categories to the model:
    oModel.category.forEach(function (category) {
        insertRuleIfNotPresent(oModel.mRules, {
            category: "category",
            matchedString: category,
            type: 0 /* WORD */
            , word: category,
            lowercaseword: category.toLowerCase(),
            _ranking: 0.95
        }, oModel.seenRules);
    });
    // add the domain meta rule
    insertRuleIfNotPresent(oModel.mRules, {
        category: "meta",
        matchedString: "domain",
        type: 0 /* WORD */
        , word: "domain",
        _ranking: 0.95
    }, oModel.seenRules);
    //add a filler rule
    var sfillers = fs.readFileSync('./' + modelPath + '/filler.json', 'utf-8');
    var fillers = JSON.parse(sfillers);
    var re = "^((" + fillers.join(")|(") + "))$";
    oModel.mRules.push({
        category: "filler",
        type: 1 /* REGEXP */
        , regexp: new RegExp(re, "i"),
        matchedString: "filler",
        _ranking: 0.9
    });
    //add operators
    var sOperators = fs.readFileSync('./resources/model/operators.json', 'utf-8');
    var operators = JSON.parse(sOperators);
    Object.keys(operators.operators).forEach(function (operator) {
        if (IMatch.aOperatorNames.indexOf(operator) < 0) {
            debuglog("unknown operator " + operator);
            throw new Error("unknown operator " + operator);
        }
        oModel.operators[operator] = operators.operators[operator];
        oModel.operators[operator].operator = operator;
        Object.freeze(oModel.operators[operator]);
        var word = operator;
        insertRuleIfNotPresent(oModel.mRules, {
            category: "operator",
            word: word.toLowerCase(),
            lowercaseword: word.toLowerCase(),
            type: 0 /* WORD */
            , matchedString: word,
            _ranking: 0.9
        }, oModel.seenRules);
        // add all synonyms
        if (operators.synonyms[operator]) {
            Object.keys(operators.synonyms[operator]).forEach(function (synonym) {
                insertRuleIfNotPresent(oModel.mRules, {
                    category: "operator",
                    word: synonym.toLowerCase(),
                    lowercaseword: synonym.toLowerCase(),
                    type: 0 /* WORD */
                    , matchedString: operator,
                    _ranking: 0.9
                }, oModel.seenRules);
            });
        }
    });
    /*
        })
            {
          category: "filler",
          type: 1,
          regexp: /^((start)|(show)|(from)|(in))$/i,
          matchedString: "filler",
          _ranking: 0.9
        },
    */
    oModel.mRules = oModel.mRules.sort(InputFilterRules.cmpMRule);
    oModel.rules = splitRules(oModel.mRules);
    oModel.tools = oModel.tools.sort(Tools.cmpTools);
    delete oModel.seenRules;
    return oModel;
}
exports.loadModels = loadModels;
var MetaF = Meta.getMetaFactory();
function getOperator(mdl, operator) {
    return mdl.operators[operator];
}
exports.getOperator = getOperator;
function getResultAsArray(mdl, a, rel) {
    if (rel.toType() !== 'relation') {
        throw new Error("expect relation as 2nd arg");
    }
    var res = mdl.meta.t3[a.toFullString()] && mdl.meta.t3[a.toFullString()][rel.toFullString()];
    if (!res) {
        return [];
    }
    return Object.getOwnPropertyNames(res).sort().map(MetaF.parseIMeta);
}
exports.getResultAsArray = getResultAsArray;
function getCategoriesForDomain(theModel, domain) {
    if (theModel.domains.indexOf(domain) < 0) {
        throw new Error("Domain \"" + domain + "\" not part of model");
    }
    var res = getResultAsArray(theModel, MetaF.Domain(domain), MetaF.Relation(Meta.RELATION_hasCategory));
    return Meta.getStringArray(res);
}
exports.getCategoriesForDomain = getCategoriesForDomain;
/**
 * Return all categories of a domain which can appear on a word,
 * these are typically the wordindex domains + entries generated by generic rules
 *
 * The current implementation is a simplification
 */
function getPotentialWordCategoriesForDomain(theModel, domain) {
    // this is a simplified version
    return getCategoriesForDomain(theModel, domain);
}
exports.getPotentialWordCategoriesForDomain = getPotentialWordCategoriesForDomain;
function getDomainsForCategory(theModel, category) {
    if (theModel.category.indexOf(category) < 0) {
        throw new Error("Category \"" + category + "\" not part of model");
    }
    var res = getResultAsArray(theModel, MetaF.Category(category), MetaF.Relation(Meta.RELATION_isCategoryOf));
    return Meta.getStringArray(res);
}
exports.getDomainsForCategory = getDomainsForCategory;
function getAllRecordCategoriesForTargetCategory(model, category, wordsonly) {
    var res = {};
    //
    var fn = wordsonly ? getPotentialWordCategoriesForDomain : getCategoriesForDomain;
    var domains = getDomainsForCategory(model, category);
    domains.forEach(function (domain) {
        fn(model, domain).forEach(function (wordcat) {
            res[wordcat] = true;
        });
    });
    Object.freeze(res);
    return res;
}
exports.getAllRecordCategoriesForTargetCategory = getAllRecordCategoriesForTargetCategory;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tb2RlbC9tb2RlbC50cyIsIm1vZGVsL21vZGVsLmpzIl0sIm5hbWVzIjpbImRlYnVnIiwicmVxdWlyZSIsImRlYnVnbG9nIiwibG9nZ2VyIiwibG9hZGxvZyIsIklNYXRjaCIsIklucHV0RmlsdGVyUnVsZXMiLCJUb29scyIsImZzIiwiTWV0YSIsInByb2Nlc3MiLCJlbnZNb2RlbFBhdGgiLCJlbnYiLCJBUlJfTU9ERUxfUFJPUEVSVElFUyIsImFkZFN5bm9ueW1zIiwic3lub255bXMiLCJjYXRlZ29yeSIsInN5bm9ueW1Gb3IiLCJtUnVsZXMiLCJzZWVuIiwiZm9yRWFjaCIsInN5biIsIm9SdWxlIiwibWF0Y2hlZFN0cmluZyIsInR5cGUiLCJ3b3JkIiwiX3JhbmtpbmciLCJKU09OIiwic3RyaW5naWZ5IiwiaW5zZXJ0UnVsZUlmTm90UHJlc2VudCIsImdldFJ1bGVLZXkiLCJydWxlIiwic2VlblJ1bGVzIiwicHVzaCIsInVuZGVmaW5lZCIsIkVycm9yIiwiciIsImxvd2VyY2FzZXdvcmQiLCJ0b0xvd2VyQ2FzZSIsImR1cGxpY2F0ZXMiLCJmaWx0ZXIiLCJvRW50cnkiLCJjb21wYXJlTVJ1bGVGdWxsIiwibGVuZ3RoIiwibG9hZE1vZGVsRGF0YSIsIm1vZGVsUGF0aCIsIm9NZGwiLCJzTW9kZWxOYW1lIiwib01vZGVsIiwic0ZpbGVOYW1lIiwibWRsZGF0YSIsInJlYWRGaWxlU3luYyIsIm9NZGxEYXRhIiwicGFyc2UiLCJ0b29sIiwibmFtZSIsIl9kb21haW4iLCJkb21haW4iLCJyZWNvcmRzIiwid29yZGluZGV4Iiwic1N0cmluZyIsImV4YWN0bWF0Y2giLCJpbmRleE9mIiwiZXhhY3RPbmx5IiwibG9hZE1vZGVsIiwibWRsIiwiZG9tYWlucyIsIk9iamVjdCIsImtleXMiLCJzb3J0Iiwic1Byb3BlcnR5Iiwic1dvcmRJbmRleCIsInNFeGFjdE1hdGNoIiwiZG9tYWluU3RyIiwiTWV0YUYiLCJEb21haW4iLCJ0b0Z1bGxTdHJpbmciLCJyZWxhdGlvblN0ciIsIlJlbGF0aW9uIiwiUkVMQVRJT05faGFzQ2F0ZWdvcnkiLCJyZXZlcnNlUmVsYXRpb25TdHIiLCJSRUxBVElPTl9pc0NhdGVnb3J5T2YiLCJzQ2F0ZWdvcnkiLCJDYXRlZ29yeVN0cmluZyIsIkNhdGVnb3J5IiwibWV0YSIsInQzIiwidG9vbHMiLCJjb25zb2xlIiwibG9nIiwiZXhpdCIsInRvb2xoaWRkZW4iLCJzc3lua2V5IiwiY29uY2F0Iiwic3RyaW5nIiwiaW5kZXgiLCJzcGxpdFJ1bGVzIiwicnVsZXMiLCJyZXMiLCJub25Xb3JkUnVsZXMiLCJ3b3JkTWFwIiwiYWxsUnVsZXMiLCJleHBvcnRzIiwibG9hZE1vZGVscyIsIm9wZXJhdG9ycyIsInNtZGxzIiwibWRscyIsInNmaWxsZXJzIiwiZmlsbGVycyIsInJlIiwiam9pbiIsInJlZ2V4cCIsIlJlZ0V4cCIsInNPcGVyYXRvcnMiLCJvcGVyYXRvciIsImFPcGVyYXRvck5hbWVzIiwiZnJlZXplIiwic3lub255bSIsImNtcE1SdWxlIiwiY21wVG9vbHMiLCJnZXRNZXRhRmFjdG9yeSIsImdldE9wZXJhdG9yIiwiZ2V0UmVzdWx0QXNBcnJheSIsImEiLCJyZWwiLCJ0b1R5cGUiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwibWFwIiwicGFyc2VJTWV0YSIsImdldENhdGVnb3JpZXNGb3JEb21haW4iLCJ0aGVNb2RlbCIsImdldFN0cmluZ0FycmF5IiwiZ2V0UG90ZW50aWFsV29yZENhdGVnb3JpZXNGb3JEb21haW4iLCJnZXREb21haW5zRm9yQ2F0ZWdvcnkiLCJnZXRBbGxSZWNvcmRDYXRlZ29yaWVzRm9yVGFyZ2V0Q2F0ZWdvcnkiLCJtb2RlbCIsIndvcmRzb25seSIsImZuIiwid29yZGNhdCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0FDS0E7O0FERUEsSUFBWUEsUUFBS0MsUUFBTSxPQUFOLENBQWpCO0FBRUEsSUFBSUMsV0FBV0YsTUFBTSxPQUFOLENBQWY7QUFFQSxJQUFZRyxTQUFNRixRQUFNLGlCQUFOLENBQWxCO0FBRUEsSUFBTUcsVUFBVUQsT0FBT0EsTUFBUCxDQUFjLFdBQWQsRUFBMkIsRUFBM0IsQ0FBaEI7QUFFQSxJQUFhRSxTQUFNSixRQUFNLGtCQUFOLENBQW5CO0FBRUEsSUFBWUssbUJBQWdCTCxRQUFNLDJCQUFOLENBQTVCO0FBQ0EsSUFBWU0sUUFBS04sUUFBTSxnQkFBTixDQUFqQjtBQUNBLElBQVlPLEtBQUVQLFFBQU0sSUFBTixDQUFkO0FBQ0EsSUFBWVEsT0FBSVIsUUFBTSxRQUFOLENBQWhCO0FBQ0EsSUFBWVMsVUFBT1QsUUFBTSxTQUFOLENBQW5CO0FBRUE7OztBQUdBLElBQUlVLGVBQWVELFFBQVFFLEdBQVIsQ0FBWSxnQkFBWixLQUFpQyxXQUFwRDtBQTJCQztBQUVELElBQU1DLHVCQUF1QixDQUFDLFFBQUQsRUFBVyxNQUFYLEVBQW1CLFlBQW5CLEVBQWlDLFVBQWpDLEVBQTZDLFVBQTdDLEVBQXlELFdBQXpELEVBQXNFLFlBQXRFLEVBQW9GLFFBQXBGLENBQTdCO0FBRUEsU0FBQUMsV0FBQSxDQUFxQkMsUUFBckIsRUFBeUNDLFFBQXpDLEVBQTJEQyxVQUEzRCxFQUErRUMsTUFBL0UsRUFBNEdDLElBQTVHLEVBQW1KO0FBQy9JSixhQUFTSyxPQUFULENBQWlCLFVBQVVDLEdBQVYsRUFBYTtBQUMxQixZQUFJQyxRQUFRO0FBQ1JOLHNCQUFVQSxRQURGO0FBRVJPLDJCQUFlTixVQUZQO0FBR1JPLGtCQUFNLENBSEUsQ0FHRjtBQUhFLGNBSVJDLE1BQU1KLEdBSkU7QUFLUkssc0JBQVU7QUFMRixTQUFaO0FBT0F4QixpQkFBUyxzQkFBc0J5QixLQUFLQyxTQUFMLENBQWVOLEtBQWYsQ0FBL0I7QUFDQU8sK0JBQXVCWCxNQUF2QixFQUErQkksS0FBL0IsRUFBc0NILElBQXRDO0FBQ0gsS0FWRDtBQVdIO0FBRUQsU0FBQVcsVUFBQSxDQUFvQkMsSUFBcEIsRUFBd0I7QUFDcEIsV0FBT0EsS0FBS1IsYUFBTCxHQUFxQixLQUFyQixHQUE2QlEsS0FBS2YsUUFBbEMsR0FBNkMsT0FBN0MsR0FBdURlLEtBQUtQLElBQTVELEdBQW9FLE9BQXBFLEdBQThFTyxLQUFLTixJQUFuRixHQUEwRixHQUFqRztBQUNIO0FBRUQsU0FBQUksc0JBQUEsQ0FBZ0NYLE1BQWhDLEVBQTZEYSxJQUE3RCxFQUNJQyxTQURKLEVBQ2dEO0FBRTVDLFFBQUlELEtBQUtQLElBQUwsS0FBYyxDQUFsQixDQUFrQixVQUFsQixFQUE0QztBQUN4Q04sbUJBQU9lLElBQVAsQ0FBWUYsSUFBWjtBQUNBO0FBQ0g7QUFDRCxRQUFLQSxLQUFLTixJQUFMLEtBQWNTLFNBQWYsSUFBOEJILEtBQUtSLGFBQUwsS0FBdUJXLFNBQXpELEVBQXFFO0FBQ2pFLGNBQU0sSUFBSUMsS0FBSixDQUFVLGlCQUFpQlIsS0FBS0MsU0FBTCxDQUFlRyxJQUFmLEVBQXFCRyxTQUFyQixFQUFnQyxDQUFoQyxDQUEzQixDQUFOO0FBQ0g7QUFDRCxRQUFJRSxJQUFJTixXQUFXQyxJQUFYLENBQVI7QUFDQUEsU0FBS00sYUFBTCxHQUFxQk4sS0FBS04sSUFBTCxDQUFVYSxXQUFWLEVBQXJCO0FBQ0EsUUFBSU4sVUFBVUksQ0FBVixDQUFKLEVBQWtCO0FBQ2RsQyxpQkFBUyxtQ0FBbUN5QixLQUFLQyxTQUFMLENBQWVHLElBQWYsRUFBcUJHLFNBQXJCLEVBQWdDLENBQWhDLENBQTVDO0FBQ0EsWUFBSUssYUFBYVAsVUFBVUksQ0FBVixFQUFhSSxNQUFiLENBQW9CLFVBQVVDLE1BQVYsRUFBZ0I7QUFDakQsbUJBQU8sTUFBTW5DLGlCQUFpQm9DLGdCQUFqQixDQUFrQ0QsTUFBbEMsRUFBeUNWLElBQXpDLENBQWI7QUFDSCxTQUZnQixDQUFqQjtBQUdBLFlBQUdRLFdBQVdJLE1BQVgsR0FBb0IsQ0FBdkIsRUFBMEI7QUFDdEI7QUFDSDtBQUNKO0FBQ0RYLGNBQVVJLENBQVYsSUFBZ0JKLFVBQVVJLENBQVYsS0FBZ0IsRUFBaEM7QUFDQUosY0FBVUksQ0FBVixFQUFhSCxJQUFiLENBQWtCRixJQUFsQjtBQUNBLFFBQUlBLEtBQUtOLElBQUwsS0FBYyxFQUFsQixFQUFzQjtBQUNsQnZCLGlCQUFTLG1DQUFtQ3lCLEtBQUtDLFNBQUwsQ0FBZUcsSUFBZixFQUFxQkcsU0FBckIsRUFBZ0MsQ0FBaEMsQ0FBNUM7QUFDQTlCLGdCQUFRLG1DQUFtQ3VCLEtBQUtDLFNBQUwsQ0FBZUcsSUFBZixFQUFxQkcsU0FBckIsRUFBZ0MsQ0FBaEMsQ0FBM0M7QUFDQTtBQUNIO0FBQ0RoQixXQUFPZSxJQUFQLENBQVlGLElBQVo7QUFDQTtBQUNIO0FBRUQsU0FBQWEsYUFBQSxDQUF1QkMsU0FBdkIsRUFBMENDLElBQTFDLEVBQXdEQyxVQUF4RCxFQUE0RUMsTUFBNUUsRUFBa0c7QUFDOUY7QUFDQTtBQUNBLFFBQU1DLFlBQWEsT0FBT0osU0FBUCxHQUFtQixHQUFuQixHQUF5QkUsVUFBekIsR0FBc0MsWUFBekQ7QUFDQSxRQUFJRyxVQUFVMUMsR0FBRzJDLFlBQUgsQ0FBZ0JGLFNBQWhCLEVBQTJCLE9BQTNCLENBQWQ7QUFDQSxRQUFJRyxXQUFXekIsS0FBSzBCLEtBQUwsQ0FBV0gsT0FBWCxDQUFmO0FBQ0FFLGFBQVNoQyxPQUFULENBQWlCLFVBQVVxQixNQUFWLEVBQWdCO0FBQzdCLFlBQUksQ0FBQ0EsT0FBT2EsSUFBUixJQUFnQlIsS0FBS1EsSUFBTCxDQUFVQyxJQUE5QixFQUFvQztBQUNoQ2QsbUJBQU9hLElBQVAsR0FBY1IsS0FBS1EsSUFBTCxDQUFVQyxJQUF4QjtBQUNBZCxtQkFBT2UsT0FBUCxHQUFpQlYsS0FBS1csTUFBdEI7QUFDSDtBQUNEVCxlQUFPVSxPQUFQLENBQWV6QixJQUFmLENBQW9CUSxNQUFwQjtBQUVBSyxhQUFLYSxTQUFMLENBQWV2QyxPQUFmLENBQXVCLFVBQVVKLFFBQVYsRUFBa0I7QUFDckMsZ0JBQUl5QixPQUFPekIsUUFBUCxNQUFxQmtCLFNBQXpCLEVBQW9DO0FBQ2hDaEMseUJBQVMsOEJBQThCK0MsU0FBOUIsR0FBMEMsNkJBQTFDLEdBQTBFakMsUUFBMUUsR0FBcUYsZUFBckYsR0FBdUdXLEtBQUtDLFNBQUwsQ0FBZWEsTUFBZixDQUF2RyxHQUFnSSxFQUF6STtBQUNBO0FBQ0g7QUFDRCxnQkFBSUEsT0FBT3pCLFFBQVAsTUFBcUIsR0FBekIsRUFBOEI7QUFDMUIsb0JBQUk0QyxVQUFVbkIsT0FBT3pCLFFBQVAsQ0FBZDtBQUNBZCx5QkFBUyx1QkFBdUJjLFFBQXZCLEdBQWtDLE1BQWxDLEdBQTJDNEMsT0FBcEQ7QUFDQSxvQkFBSXRDLFFBQVE7QUFDSk4sOEJBQVVBLFFBRE47QUFFSk8sbUNBQWVxQyxPQUZYO0FBR0pwQywwQkFBTSxDQUhGLENBR0U7QUFIRixzQkFJSkMsTUFBTW1DLE9BSkY7QUFLSmxDLDhCQUFVO0FBTE4saUJBQVo7QUFPQSxvQkFBR29CLEtBQUtlLFVBQUwsSUFBbUJmLEtBQUtlLFVBQUwsQ0FBZ0JDLE9BQWhCLENBQXdCOUMsUUFBeEIsS0FBcUMsQ0FBM0QsRUFBOEQ7QUFDMURNLDBCQUFNeUMsU0FBTixHQUFrQixJQUFsQjtBQUNIO0FBQ0RsQyx1Q0FBdUJtQixPQUFPOUIsTUFBOUIsRUFBcUNJLEtBQXJDLEVBQTRDMEIsT0FBT2hCLFNBQW5EO0FBQ0Esb0JBQUlvQixTQUFTckMsUUFBVCxJQUFxQnFDLFNBQVNyQyxRQUFULENBQWtCQyxRQUFsQixDQUF6QixFQUFzRDtBQUNsREYsZ0NBQVlzQyxTQUFTckMsUUFBVCxDQUFrQkMsUUFBbEIsQ0FBWixFQUF5Q0EsUUFBekMsRUFBbUQ0QyxPQUFuRCxFQUE0RFosT0FBTzlCLE1BQW5FLEVBQTJFOEIsT0FBT2hCLFNBQWxGO0FBQ0g7QUFDSjtBQUNKLFNBdkJEO0FBd0JILEtBL0JEO0FBZ0NIO0FBRUQsU0FBQWdDLFNBQUEsQ0FBbUJuQixTQUFuQixFQUF1Q0UsVUFBdkMsRUFBMkRDLE1BQTNELEVBQWlGO0FBQzdFOUMsYUFBUyxjQUFjNkMsVUFBZCxHQUEyQixPQUFwQztBQUNBLFFBQUlrQixNQUFNekQsR0FBRzJDLFlBQUgsQ0FBZ0IsT0FBT04sU0FBUCxHQUFtQixHQUFuQixHQUF5QkUsVUFBekIsR0FBc0MsYUFBdEQsRUFBcUUsT0FBckUsQ0FBVjtBQUNBLFFBQUlELE9BQU9uQixLQUFLMEIsS0FBTCxDQUFXWSxHQUFYLENBQVg7QUFFQSxRQUFJakIsT0FBT2tCLE9BQVAsQ0FBZUosT0FBZixDQUF1QmhCLEtBQUtXLE1BQTVCLEtBQXVDLENBQTNDLEVBQThDO0FBQzFDdkQsaUJBQVMsd0JBQXdCeUIsS0FBS0MsU0FBTCxDQUFla0IsSUFBZixFQUFxQlosU0FBckIsRUFBZ0MsQ0FBaEMsQ0FBakM7QUFDQSxjQUFNLElBQUlDLEtBQUosQ0FBVSxZQUFZVyxLQUFLVyxNQUFqQixHQUEwQixnQ0FBMUIsR0FBNkRWLFVBQTdELEdBQTBFLEdBQXBGLENBQU47QUFDSDtBQUNEO0FBQ0FvQixXQUFPQyxJQUFQLENBQVl0QixJQUFaLEVBQWtCdUIsSUFBbEIsR0FBeUJqRCxPQUF6QixDQUFpQyxVQUFTa0QsU0FBVCxFQUFrQjtBQUMvQyxZQUFHekQscUJBQXFCaUQsT0FBckIsQ0FBNkJRLFNBQTdCLElBQTBDLENBQTdDLEVBQWdEO0FBQzVDLGtCQUFNLElBQUluQyxLQUFKLENBQVUscUJBQXFCbUMsU0FBckIsR0FBaUMsbURBQWpDLEdBQXVGeEIsS0FBS1csTUFBNUYsR0FBcUcsR0FBL0csQ0FBTjtBQUNIO0FBQ0osS0FKRDtBQUtBO0FBQ0FYLFNBQUthLFNBQUwsR0FBaUJiLEtBQUthLFNBQUwsSUFBa0IsRUFBbkM7QUFDQWIsU0FBS2EsU0FBTCxDQUFldkMsT0FBZixDQUF1QixVQUFTbUQsVUFBVCxFQUFtQjtBQUN0QyxZQUFHekIsS0FBSzlCLFFBQUwsQ0FBYzhDLE9BQWQsQ0FBc0JTLFVBQXRCLElBQW9DLENBQXZDLEVBQTBDO0FBQ3RDLGtCQUFNLElBQUlwQyxLQUFKLENBQVUsc0JBQXNCb0MsVUFBdEIsR0FBbUMsNkJBQW5DLEdBQW1FekIsS0FBS1csTUFBeEUsR0FBaUYsR0FBM0YsQ0FBTjtBQUNIO0FBQ0osS0FKRDtBQUtBWCxTQUFLZSxVQUFMLEdBQWtCZixLQUFLZSxVQUFMLElBQW1CLEVBQXJDO0FBQ0FmLFNBQUtlLFVBQUwsQ0FBZ0J6QyxPQUFoQixDQUF3QixVQUFTb0QsV0FBVCxFQUFvQjtBQUN4QyxZQUFHMUIsS0FBSzlCLFFBQUwsQ0FBYzhDLE9BQWQsQ0FBc0JVLFdBQXRCLElBQXFDLENBQXhDLEVBQTJDO0FBQ3ZDLGtCQUFNLElBQUlyQyxLQUFKLENBQVUsdUJBQXVCcUMsV0FBdkIsR0FBcUMsNkJBQXJDLEdBQXFFMUIsS0FBS1csTUFBMUUsR0FBbUYsR0FBN0YsQ0FBTjtBQUNIO0FBQ0osS0FKRDtBQU9BO0FBQ0EsUUFBSWdCLFlBQVlDLE1BQU1DLE1BQU4sQ0FBYTdCLEtBQUtXLE1BQWxCLEVBQTBCbUIsWUFBMUIsRUFBaEI7QUFDQSxRQUFJQyxjQUFjSCxNQUFNSSxRQUFOLENBQWVyRSxLQUFLc0Usb0JBQXBCLEVBQTBDSCxZQUExQyxFQUFsQjtBQUNBLFFBQUlJLHFCQUFxQk4sTUFBTUksUUFBTixDQUFlckUsS0FBS3dFLHFCQUFwQixFQUEyQ0wsWUFBM0MsRUFBekI7QUFDQTlCLFNBQUs5QixRQUFMLENBQWNJLE9BQWQsQ0FBc0IsVUFBUzhELFNBQVQsRUFBa0I7QUFFcEMsWUFBSUMsaUJBQWlCVCxNQUFNVSxRQUFOLENBQWVGLFNBQWYsRUFBMEJOLFlBQTFCLEVBQXJCO0FBQ0E1QixlQUFPcUMsSUFBUCxDQUFZQyxFQUFaLENBQWViLFNBQWYsSUFBNEJ6QixPQUFPcUMsSUFBUCxDQUFZQyxFQUFaLENBQWViLFNBQWYsS0FBNkIsRUFBekQ7QUFDQXpCLGVBQU9xQyxJQUFQLENBQVlDLEVBQVosQ0FBZWIsU0FBZixFQUEwQkksV0FBMUIsSUFBeUM3QixPQUFPcUMsSUFBUCxDQUFZQyxFQUFaLENBQWViLFNBQWYsRUFBMEJJLFdBQTFCLEtBQTBDLEVBQW5GO0FBQ0E3QixlQUFPcUMsSUFBUCxDQUFZQyxFQUFaLENBQWViLFNBQWYsRUFBMEJJLFdBQTFCLEVBQXVDTSxjQUF2QyxJQUEwRCxFQUExRDtBQUVBbkMsZUFBT3FDLElBQVAsQ0FBWUMsRUFBWixDQUFlSCxjQUFmLElBQWlDbkMsT0FBT3FDLElBQVAsQ0FBWUMsRUFBWixDQUFlSCxjQUFmLEtBQWtDLEVBQW5FO0FBQ0FuQyxlQUFPcUMsSUFBUCxDQUFZQyxFQUFaLENBQWVILGNBQWYsRUFBK0JILGtCQUEvQixJQUFxRGhDLE9BQU9xQyxJQUFQLENBQVlDLEVBQVosQ0FBZUgsY0FBZixFQUErQkgsa0JBQS9CLEtBQXNELEVBQTNHO0FBQ0FoQyxlQUFPcUMsSUFBUCxDQUFZQyxFQUFaLENBQWVILGNBQWYsRUFBK0JILGtCQUEvQixFQUFtRFAsU0FBbkQsSUFBaUUsRUFBakU7QUFFSCxLQVhEO0FBYUE7QUFDQTVDLDJCQUF1Qm1CLE9BQU85QixNQUE5QixFQUFzQztBQUM5QkYsa0JBQVUsUUFEb0I7QUFFOUJPLHVCQUFldUIsS0FBS1csTUFGVTtBQUc5QmpDLGNBQU0sQ0FId0IsQ0FHeEI7QUFId0IsVUFJOUJDLE1BQU1xQixLQUFLVyxNQUptQjtBQUs5Qi9CLGtCQUFVO0FBTG9CLEtBQXRDLEVBTU9zQixPQUFPaEIsU0FOZDtBQVVBO0FBQ0FnQixXQUFPdUMsS0FBUCxDQUFhL0MsTUFBYixDQUFvQixVQUFVQyxNQUFWLEVBQWdCO0FBQ2hDLFlBQUlBLE9BQU9jLElBQVAsTUFBaUJULEtBQUtRLElBQUwsSUFBYVIsS0FBS1EsSUFBTCxDQUFVQyxJQUF4QyxDQUFKLEVBQW1EO0FBQy9DaUMsb0JBQVFDLEdBQVIsQ0FBWSxVQUFVM0MsS0FBS1EsSUFBTCxDQUFVQyxJQUFwQixHQUEyQixnQ0FBM0IsR0FBOERSLFVBQTFFO0FBQ0E7QUFDQXJDLG9CQUFRZ0YsSUFBUixDQUFhLENBQUMsQ0FBZDtBQUNIO0FBQ0osS0FORDtBQU9BO0FBQ0EsUUFBSSxDQUFDNUMsS0FBSzZDLFVBQU4sSUFBb0I3QyxLQUFLUSxJQUF6QixJQUFpQ1IsS0FBS1EsSUFBTCxDQUFVQyxJQUEvQyxFQUFxRDtBQUNqRDFCLCtCQUF1Qm1CLE9BQU85QixNQUE5QixFQUFzQztBQUNsQ0Ysc0JBQVUsTUFEd0I7QUFFbENPLDJCQUFldUIsS0FBS1EsSUFBTCxDQUFVQyxJQUZTO0FBR2xDL0Isa0JBQU0sQ0FINEIsQ0FHNUI7QUFINEIsY0FJbENDLE1BQU1xQixLQUFLUSxJQUFMLENBQVVDLElBSmtCO0FBS2xDN0Isc0JBQVU7QUFMd0IsU0FBdEMsRUFNR3NCLE9BQU9oQixTQU5WO0FBT0g7QUFBQTtBQUNELFFBQUljLEtBQUsvQixRQUFMLElBQWlCK0IsS0FBSy9CLFFBQUwsQ0FBYyxNQUFkLENBQXJCLEVBQTRDO0FBQ3hDRCxvQkFBWWdDLEtBQUsvQixRQUFMLENBQWMsTUFBZCxDQUFaLEVBQW1DLE1BQW5DLEVBQTJDK0IsS0FBS1EsSUFBTCxDQUFVQyxJQUFyRCxFQUEyRFAsT0FBTzlCLE1BQWxFLEVBQTBFOEIsT0FBT2hCLFNBQWpGO0FBQ0g7QUFBQTtBQUNELFFBQUljLEtBQUsvQixRQUFULEVBQW1CO0FBQ2ZvRCxlQUFPQyxJQUFQLENBQVl0QixLQUFLL0IsUUFBakIsRUFBMkJLLE9BQTNCLENBQW1DLFVBQVV3RSxPQUFWLEVBQWlCO0FBQ2hELGdCQUFJOUMsS0FBSzlCLFFBQUwsQ0FBYzhDLE9BQWQsQ0FBc0I4QixPQUF0QixLQUFrQyxDQUFsQyxJQUF1Q0EsWUFBWSxNQUF2RCxFQUErRDtBQUMzRDlFLDRCQUFZZ0MsS0FBSy9CLFFBQUwsQ0FBYzZFLE9BQWQsQ0FBWixFQUFvQyxVQUFwQyxFQUFnREEsT0FBaEQsRUFBeUQ1QyxPQUFPOUIsTUFBaEUsRUFBd0U4QixPQUFPaEIsU0FBL0U7QUFDSDtBQUNKLFNBSkQ7QUFLSDtBQUNEZ0IsV0FBT2tCLE9BQVAsQ0FBZWpDLElBQWYsQ0FBb0JhLEtBQUtXLE1BQXpCO0FBQ0EsUUFBR1gsS0FBS1EsSUFBTCxDQUFVQyxJQUFiLEVBQW1CO0FBQ2pCUCxlQUFPdUMsS0FBUCxDQUFhdEQsSUFBYixDQUFrQmEsS0FBS1EsSUFBdkI7QUFDRDtBQUNETixXQUFPaEMsUUFBUCxHQUFrQmdDLE9BQU9oQyxRQUFQLENBQWdCNkUsTUFBaEIsQ0FBdUIvQyxLQUFLOUIsUUFBNUIsQ0FBbEI7QUFDQWdDLFdBQU9oQyxRQUFQLENBQWdCcUQsSUFBaEI7QUFDQXJCLFdBQU9oQyxRQUFQLEdBQWtCZ0MsT0FBT2hDLFFBQVAsQ0FBZ0J3QixNQUFoQixDQUF1QixVQUFVc0QsTUFBVixFQUFrQkMsS0FBbEIsRUFBdUI7QUFDNUQsZUFBTy9DLE9BQU9oQyxRQUFQLENBQWdCK0UsS0FBaEIsTUFBMkIvQyxPQUFPaEMsUUFBUCxDQUFnQitFLFFBQVEsQ0FBeEIsQ0FBbEM7QUFDSCxLQUZpQixDQUFsQjtBQUdBbkQsa0JBQWNDLFNBQWQsRUFBeUJDLElBQXpCLEVBQStCQyxVQUEvQixFQUEyQ0MsTUFBM0M7QUFDSCxDLENBQUM7QUFHRixTQUFBZ0QsVUFBQSxDQUEyQkMsS0FBM0IsRUFBaUQ7QUFDN0MsUUFBSUMsTUFBTSxFQUFWO0FBQ0EsUUFBSUMsZUFBZSxFQUFuQjtBQUNBRixVQUFNN0UsT0FBTixDQUFjLFVBQVNXLElBQVQsRUFBYTtBQUN2QixZQUFHQSxLQUFLUCxJQUFMLEtBQWMsQ0FBakIsQ0FBaUIsVUFBakIsRUFBMkM7QUFDdkMsb0JBQUcsQ0FBQ08sS0FBS00sYUFBVCxFQUF3QjtBQUNwQiwwQkFBTSxJQUFJRixLQUFKLENBQVUscUNBQXFDUixLQUFLQyxTQUFMLENBQWVHLElBQWYsQ0FBL0MsQ0FBTjtBQUNIO0FBQ0RtRSxvQkFBSW5FLEtBQUtNLGFBQVQsSUFBMEI2RCxJQUFJbkUsS0FBS00sYUFBVCxLQUEyQixFQUFyRDtBQUNBNkQsb0JBQUluRSxLQUFLTSxhQUFULEVBQXdCSixJQUF4QixDQUE2QkYsSUFBN0I7QUFDSCxhQU5ELE1BTU87QUFDSG9FLHlCQUFhbEUsSUFBYixDQUFrQkYsSUFBbEI7QUFDSDtBQUNKLEtBVkQ7QUFXQSxXQUFPO0FBQ0hxRSxpQkFBU0YsR0FETjtBQUVIQyxzQkFBZUEsWUFGWjtBQUdIRSxrQkFBV0o7QUFIUixLQUFQO0FBS0g7QUFuQmVLLFFBQUFOLFVBQUEsR0FBVUEsVUFBVjtBQXFCaEIsU0FBQU8sVUFBQSxDQUEyQjFELFNBQTNCLEVBQThDO0FBQzFDLFFBQUlHLE1BQUo7QUFDQUEsYUFBUztBQUNMa0IsaUJBQVMsRUFESjtBQUVMcUIsZUFBTyxFQUZGO0FBR0xVLGVBQVEvRCxTQUhIO0FBSUxsQixrQkFBVSxFQUpMO0FBS0x3RixtQkFBWSxFQUxQO0FBTUx0RixnQkFBUSxFQU5IO0FBT0xjLG1CQUFZLEVBUFA7QUFRTDBCLGlCQUFTLEVBUko7QUFTTDJCLGNBQU8sRUFBRUMsSUFBSyxFQUFQO0FBVEYsS0FBVDtBQVdBekMsZ0JBQVlBLGFBQWFsQyxZQUF6QjtBQUNBLFFBQUk4RixRQUFRakcsR0FBRzJDLFlBQUgsQ0FBZ0IsT0FBT04sU0FBUCxHQUFtQixjQUFuQyxFQUFtRCxPQUFuRCxDQUFaO0FBQ0EsUUFBSTZELE9BQU8vRSxLQUFLMEIsS0FBTCxDQUFXLEtBQUtvRCxLQUFoQixDQUFYO0FBQ0FDLFNBQUt0RixPQUFMLENBQWEsVUFBVTJCLFVBQVYsRUFBb0I7QUFDN0JpQixrQkFBVW5CLFNBQVYsRUFBcUJFLFVBQXJCLEVBQWlDQyxNQUFqQztBQUNILEtBRkQ7QUFJQTtBQUNBQSxXQUFPaEMsUUFBUCxDQUFnQkksT0FBaEIsQ0FBd0IsVUFBVUosUUFBVixFQUFrQjtBQUN0Q2EsK0JBQXVCbUIsT0FBTzlCLE1BQTlCLEVBQXNDO0FBQ2xDRixzQkFBVSxVQUR3QjtBQUVsQ08sMkJBQWVQLFFBRm1CO0FBR2xDUSxrQkFBTSxDQUg0QixDQUc1QjtBQUg0QixjQUlsQ0MsTUFBTVQsUUFKNEI7QUFLbENxQiwyQkFBZXJCLFNBQVNzQixXQUFULEVBTG1CO0FBTWxDWixzQkFBVTtBQU53QixTQUF0QyxFQU9Hc0IsT0FBT2hCLFNBUFY7QUFRSCxLQVREO0FBV0E7QUFDQUgsMkJBQXVCbUIsT0FBTzlCLE1BQTlCLEVBQXNDO0FBQzlCRixrQkFBVSxNQURvQjtBQUU5Qk8sdUJBQWUsUUFGZTtBQUc5QkMsY0FBTSxDQUh3QixDQUd4QjtBQUh3QixVQUk5QkMsTUFBTSxRQUp3QjtBQUs5QkMsa0JBQVU7QUFMb0IsS0FBdEMsRUFNT3NCLE9BQU9oQixTQU5kO0FBVUE7QUFDQSxRQUFJMkUsV0FBV25HLEdBQUcyQyxZQUFILENBQWdCLE9BQU9OLFNBQVAsR0FBbUIsY0FBbkMsRUFBbUQsT0FBbkQsQ0FBZjtBQUNBLFFBQUkrRCxVQUFVakYsS0FBSzBCLEtBQUwsQ0FBV3NELFFBQVgsQ0FBZDtBQUNBLFFBQUlFLEtBQUssUUFBUUQsUUFBUUUsSUFBUixDQUFhLEtBQWIsQ0FBUixHQUE4QixLQUF2QztBQUNBOUQsV0FBTzlCLE1BQVAsQ0FBY2UsSUFBZCxDQUFtQjtBQUNmakIsa0JBQVUsUUFESztBQUVmUSxjQUFNLENBRlMsQ0FFVDtBQUZTLFVBR2Z1RixRQUFRLElBQUlDLE1BQUosQ0FBV0gsRUFBWCxFQUFlLEdBQWYsQ0FITztBQUlmdEYsdUJBQWUsUUFKQTtBQUtmRyxrQkFBVTtBQUxLLEtBQW5CO0FBUUE7QUFDQSxRQUFJdUYsYUFBYXpHLEdBQUcyQyxZQUFILENBQWdCLGtDQUFoQixFQUFvRCxPQUFwRCxDQUFqQjtBQUNBLFFBQUlxRCxZQUFZN0UsS0FBSzBCLEtBQUwsQ0FBVzRELFVBQVgsQ0FBaEI7QUFDQTlDLFdBQU9DLElBQVAsQ0FBWW9DLFVBQVVBLFNBQXRCLEVBQWlDcEYsT0FBakMsQ0FBeUMsVUFBUzhGLFFBQVQsRUFBaUI7QUFDdEQsWUFBRzdHLE9BQU84RyxjQUFQLENBQXNCckQsT0FBdEIsQ0FBOEJvRCxRQUE5QixJQUEwQyxDQUE3QyxFQUFnRDtBQUM1Q2hILHFCQUFTLHNCQUFzQmdILFFBQS9CO0FBQ0Esa0JBQU0sSUFBSS9FLEtBQUosQ0FBVSxzQkFBc0IrRSxRQUFoQyxDQUFOO0FBQ0g7QUFDRGxFLGVBQU93RCxTQUFQLENBQWlCVSxRQUFqQixJQUE2QlYsVUFBVUEsU0FBVixDQUFvQlUsUUFBcEIsQ0FBN0I7QUFDQWxFLGVBQU93RCxTQUFQLENBQWlCVSxRQUFqQixFQUEyQkEsUUFBM0IsR0FBNERBLFFBQTVEO0FBQ0EvQyxlQUFPaUQsTUFBUCxDQUFjcEUsT0FBT3dELFNBQVAsQ0FBaUJVLFFBQWpCLENBQWQ7QUFDQSxZQUFJekYsT0FBT3lGLFFBQVg7QUFDQXJGLCtCQUF1Qm1CLE9BQU85QixNQUE5QixFQUFzQztBQUNsQ0Ysc0JBQVUsVUFEd0I7QUFFbENTLGtCQUFPQSxLQUFLYSxXQUFMLEVBRjJCO0FBR2xDRCwyQkFBZ0JaLEtBQUthLFdBQUwsRUFIa0I7QUFJbENkLGtCQUFNLENBSjRCLENBSTVCO0FBSjRCLGNBS2xDRCxlQUFnQkUsSUFMa0I7QUFNbENDLHNCQUFVO0FBTndCLFNBQXRDLEVBT0dzQixPQUFPaEIsU0FQVjtBQVFBO0FBQ0EsWUFBR3dFLFVBQVV6RixRQUFWLENBQW1CbUcsUUFBbkIsQ0FBSCxFQUFpQztBQUM3Qi9DLG1CQUFPQyxJQUFQLENBQVlvQyxVQUFVekYsUUFBVixDQUFtQm1HLFFBQW5CLENBQVosRUFBMEM5RixPQUExQyxDQUFrRCxVQUFTaUcsT0FBVCxFQUFnQjtBQUM5RHhGLHVDQUF1Qm1CLE9BQU85QixNQUE5QixFQUFxQztBQUNqQ0YsOEJBQVUsVUFEdUI7QUFFakNTLDBCQUFPNEYsUUFBUS9FLFdBQVIsRUFGMEI7QUFHakNELG1DQUFnQmdGLFFBQVEvRSxXQUFSLEVBSGlCO0FBSWpDZCwwQkFBTSxDQUoyQixDQUkzQjtBQUoyQixzQkFLakNELGVBQWdCMkYsUUFMaUI7QUFNakN4Riw4QkFBVTtBQU51QixpQkFBckMsRUFPR3NCLE9BQU9oQixTQVBWO0FBUUgsYUFURDtBQVVIO0FBQ0osS0E5QkQ7QUErQkE7Ozs7Ozs7Ozs7QUFVQWdCLFdBQU85QixNQUFQLEdBQWdCOEIsT0FBTzlCLE1BQVAsQ0FBY21ELElBQWQsQ0FBbUIvRCxpQkFBaUJnSCxRQUFwQyxDQUFoQjtBQUNBdEUsV0FBT2lELEtBQVAsR0FBZUQsV0FBV2hELE9BQU85QixNQUFsQixDQUFmO0FBQ0E4QixXQUFPdUMsS0FBUCxHQUFldkMsT0FBT3VDLEtBQVAsQ0FBYWxCLElBQWIsQ0FBa0I5RCxNQUFNZ0gsUUFBeEIsQ0FBZjtBQUNBLFdBQU92RSxPQUFPaEIsU0FBZDtBQUNBLFdBQU9nQixNQUFQO0FBQ0g7QUF4R2VzRCxRQUFBQyxVQUFBLEdBQVVBLFVBQVY7QUEyR2hCLElBQU03QixRQUFRakUsS0FBSytHLGNBQUwsRUFBZDtBQUVBLFNBQUFDLFdBQUEsQ0FBNEJ4RCxHQUE1QixFQUFpRGlELFFBQWpELEVBQWtFO0FBQzlELFdBQU9qRCxJQUFJdUMsU0FBSixDQUFjVSxRQUFkLENBQVA7QUFDSDtBQUZlWixRQUFBbUIsV0FBQSxHQUFXQSxXQUFYO0FBSWhCLFNBQUFDLGdCQUFBLENBQWlDekQsR0FBakMsRUFBdUQwRCxDQUF2RCxFQUF1RUMsR0FBdkUsRUFBdUY7QUFDbkYsUUFBR0EsSUFBSUMsTUFBSixPQUFpQixVQUFwQixFQUFnQztBQUM1QixjQUFNLElBQUkxRixLQUFKLENBQVUsNEJBQVYsQ0FBTjtBQUNIO0FBRUQsUUFBSStELE1BQU1qQyxJQUFJb0IsSUFBSixDQUFTQyxFQUFULENBQVlxQyxFQUFFL0MsWUFBRixFQUFaLEtBQ1ZYLElBQUlvQixJQUFKLENBQVNDLEVBQVQsQ0FBWXFDLEVBQUUvQyxZQUFGLEVBQVosRUFBOEJnRCxJQUFJaEQsWUFBSixFQUE5QixDQURBO0FBRUEsUUFBRyxDQUFDc0IsR0FBSixFQUFTO0FBQ0wsZUFBTyxFQUFQO0FBQ0g7QUFDRCxXQUFPL0IsT0FBTzJELG1CQUFQLENBQTJCNUIsR0FBM0IsRUFBZ0M3QixJQUFoQyxHQUF1QzBELEdBQXZDLENBQTJDckQsTUFBTXNELFVBQWpELENBQVA7QUFDSDtBQVhlMUIsUUFBQW9CLGdCQUFBLEdBQWdCQSxnQkFBaEI7QUFhaEIsU0FBQU8sc0JBQUEsQ0FBdUNDLFFBQXZDLEVBQWtFekUsTUFBbEUsRUFBaUY7QUFDN0UsUUFBR3lFLFNBQVNoRSxPQUFULENBQWlCSixPQUFqQixDQUF5QkwsTUFBekIsSUFBbUMsQ0FBdEMsRUFBeUM7QUFDckMsY0FBTSxJQUFJdEIsS0FBSixDQUFVLGNBQWNzQixNQUFkLEdBQXVCLHNCQUFqQyxDQUFOO0FBQ0g7QUFDRCxRQUFJeUMsTUFBTXdCLGlCQUFpQlEsUUFBakIsRUFBMkJ4RCxNQUFNQyxNQUFOLENBQWFsQixNQUFiLENBQTNCLEVBQWlEaUIsTUFBTUksUUFBTixDQUFlckUsS0FBS3NFLG9CQUFwQixDQUFqRCxDQUFWO0FBQ0EsV0FBT3RFLEtBQUswSCxjQUFMLENBQW9CakMsR0FBcEIsQ0FBUDtBQUNIO0FBTmVJLFFBQUEyQixzQkFBQSxHQUFzQkEsc0JBQXRCO0FBUWhCOzs7Ozs7QUFNQSxTQUFBRyxtQ0FBQSxDQUFvREYsUUFBcEQsRUFBK0V6RSxNQUEvRSxFQUE4RjtBQUMxRjtBQUNBLFdBQU93RSx1QkFBdUJDLFFBQXZCLEVBQWlDekUsTUFBakMsQ0FBUDtBQUNIO0FBSGU2QyxRQUFBOEIsbUNBQUEsR0FBbUNBLG1DQUFuQztBQUtoQixTQUFBQyxxQkFBQSxDQUFzQ0gsUUFBdEMsRUFBaUVsSCxRQUFqRSxFQUFrRjtBQUM5RSxRQUFHa0gsU0FBU2xILFFBQVQsQ0FBa0I4QyxPQUFsQixDQUEwQjlDLFFBQTFCLElBQXNDLENBQXpDLEVBQTRDO0FBQ3hDLGNBQU0sSUFBSW1CLEtBQUosQ0FBVSxnQkFBZ0JuQixRQUFoQixHQUEyQixzQkFBckMsQ0FBTjtBQUNIO0FBQ0QsUUFBSWtGLE1BQU13QixpQkFBaUJRLFFBQWpCLEVBQTJCeEQsTUFBTVUsUUFBTixDQUFlcEUsUUFBZixDQUEzQixFQUFxRDBELE1BQU1JLFFBQU4sQ0FBZXJFLEtBQUt3RSxxQkFBcEIsQ0FBckQsQ0FBVjtBQUNBLFdBQU94RSxLQUFLMEgsY0FBTCxDQUFvQmpDLEdBQXBCLENBQVA7QUFDSDtBQU5lSSxRQUFBK0IscUJBQUEsR0FBcUJBLHFCQUFyQjtBQVNmLFNBQUFDLHVDQUFBLENBQXdEQyxLQUF4RCxFQUFnRnZILFFBQWhGLEVBQW1Hd0gsU0FBbkcsRUFBc0g7QUFDbkgsUUFBSXRDLE1BQU0sRUFBVjtBQUNBO0FBQ0EsUUFBSXVDLEtBQUtELFlBQVlKLG1DQUFaLEdBQWtESCxzQkFBM0Q7QUFDQSxRQUFJL0QsVUFBVW1FLHNCQUFzQkUsS0FBdEIsRUFBNkJ2SCxRQUE3QixDQUFkO0FBQ0FrRCxZQUFROUMsT0FBUixDQUFnQixVQUFTcUMsTUFBVCxFQUFlO0FBQzNCZ0YsV0FBR0YsS0FBSCxFQUFVOUUsTUFBVixFQUFrQnJDLE9BQWxCLENBQTBCLFVBQVNzSCxPQUFULEVBQWdCO0FBQ3RDeEMsZ0JBQUl3QyxPQUFKLElBQWUsSUFBZjtBQUNILFNBRkQ7QUFHSCxLQUpEO0FBS0F2RSxXQUFPaUQsTUFBUCxDQUFjbEIsR0FBZDtBQUNBLFdBQU9BLEdBQVA7QUFDRjtBQVplSSxRQUFBZ0MsdUNBQUEsR0FBdUNBLHVDQUF2QyIsImZpbGUiOiJtb2RlbC9tb2RlbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBGdW5jdGlvbmFsaXR5IG1hbmFnaW5nIHRoZSBtYXRjaCBtb2RlbHNcclxuICpcclxuICogQGZpbGVcclxuICovXHJcblxyXG5pbXBvcnQgKiBhcyBpbnRmIGZyb20gJ2NvbnN0YW50cyc7XHJcbmltcG9ydCAqIGFzIGRlYnVnIGZyb20gJ2RlYnVnJztcclxuXHJcbnZhciBkZWJ1Z2xvZyA9IGRlYnVnKCdtb2RlbCcpO1xyXG5cclxuaW1wb3J0ICogYXMgbG9nZ2VyIGZyb20gJy4uL3V0aWxzL2xvZ2dlcic7XHJcblxyXG5jb25zdCBsb2FkbG9nID0gbG9nZ2VyLmxvZ2dlcignbW9kZWxsb2FkJywgJycpO1xyXG5cclxuaW1wb3J0ICogIGFzIElNYXRjaCBmcm9tICcuLi9tYXRjaC9pZm1hdGNoJztcclxuaW1wb3J0ICogYXMgTWF0Y2ggZnJvbSAnLi4vbWF0Y2gvbWF0Y2gnO1xyXG5pbXBvcnQgKiBhcyBJbnB1dEZpbHRlclJ1bGVzIGZyb20gJy4uL21hdGNoL2lucHV0RmlsdGVyUnVsZXMnO1xyXG5pbXBvcnQgKiBhcyBUb29scyBmcm9tICcuLi9tYXRjaC90b29scyc7XHJcbmltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzJztcclxuaW1wb3J0ICogYXMgTWV0YSBmcm9tICcuL21ldGEnO1xyXG5pbXBvcnQgKiBhcyBwcm9jZXNzIGZyb20gJ3Byb2Nlc3MnO1xyXG5cclxuLyoqXHJcbiAqIHRoZSBtb2RlbCBwYXRoLCBtYXkgYmUgY29udHJvbGxlZCB2aWEgZW52aXJvbm1lbnQgdmFyaWFibGVcclxuICovXHJcbnZhciBlbnZNb2RlbFBhdGggPSBwcm9jZXNzLmVudltcIkFCT1RfTU9ERUxQQVRIXCJdIHx8IFwidGVzdG1vZGVsXCI7XHJcblxyXG4vL2V4cG9ydCBpbnRlcmZhY2UgSU1vZGVscyA9IE1hdGNoLklNb2RlbHM7XHJcblxyXG4vKlxyXG5leHBvcnQgaW50ZXJmYWNlIElNb2RlbHMge1xyXG4gICAgZG9tYWluczogc3RyaW5nW10sXHJcbiAgICB0b29sczogSU1hdGNoLklUb29sW10sXHJcbiAgICBjYXRlZ29yeTogc3RyaW5nW10sXHJcbiAgICBtUnVsZXM6IElNYXRjaC5tUnVsZVtdLFxyXG4gICAgcmVjb3JkczogYW55W11cclxuICAgIHNlZW5SdWxlcz86IHsgW2tleTogc3RyaW5nXTogSU1hdGNoLm1SdWxlIH0sXHJcbiAgICBtZXRhIDoge1xyXG4gICAgICAgIC8vIGVudGl0eSAtPiByZWxhdGlvbiAtPiB0YXJnZXRcclxuICAgICAgICB0MyA6IHsgW2tleTogc3RyaW5nXSA6IHsgW2tleSA6IHN0cmluZ10gOiBhbnkgfX1cclxuICAgIH1cclxufSovXHJcblxyXG5pbnRlcmZhY2UgSU1vZGVsIHtcclxuICAgIGRvbWFpbjogc3RyaW5nLFxyXG4gICAgdG9vbDogSU1hdGNoLklUb29sLFxyXG4gICAgdG9vbGhpZGRlbj86IGJvb2xlYW4sXHJcbiAgICBzeW5vbnltcz86IHsgW2tleTogc3RyaW5nXTogc3RyaW5nW10gfSxcclxuICAgIGNhdGVnb3J5OiBzdHJpbmdbXSxcclxuICAgIHdvcmRpbmRleDogc3RyaW5nW10sXHJcbiAgICBleGFjdG1hdGNoPyA6IHN0cmluZ1tdLFxyXG4gICAgaGlkZGVuOiBzdHJpbmdbXVxyXG59O1xyXG5cclxuY29uc3QgQVJSX01PREVMX1BST1BFUlRJRVMgPSBbXCJkb21haW5cIiwgXCJ0b29sXCIsIFwidG9vbGhpZGRlblwiLCBcInN5bm9ueW1zXCIsIFwiY2F0ZWdvcnlcIiwgXCJ3b3JkaW5kZXhcIiwgXCJleGFjdG1hdGNoXCIsIFwiaGlkZGVuXCJdO1xyXG5cclxuZnVuY3Rpb24gYWRkU3lub255bXMoc3lub255bXM6IHN0cmluZ1tdLCBjYXRlZ29yeTogc3RyaW5nLCBzeW5vbnltRm9yOiBzdHJpbmcsIG1SdWxlczogQXJyYXk8SU1hdGNoLm1SdWxlPiwgc2VlbjogeyBba2V5OiBzdHJpbmddOiBJTWF0Y2gubVJ1bGVbXSB9KSB7XHJcbiAgICBzeW5vbnltcy5mb3JFYWNoKGZ1bmN0aW9uIChzeW4pIHtcclxuICAgICAgICB2YXIgb1J1bGUgPSB7XHJcbiAgICAgICAgICAgIGNhdGVnb3J5OiBjYXRlZ29yeSxcclxuICAgICAgICAgICAgbWF0Y2hlZFN0cmluZzogc3lub255bUZvcixcclxuICAgICAgICAgICAgdHlwZTogSU1hdGNoLkVudW1SdWxlVHlwZS5XT1JELFxyXG4gICAgICAgICAgICB3b3JkOiBzeW4sXHJcbiAgICAgICAgICAgIF9yYW5raW5nOiAwLjk1XHJcbiAgICAgICAgfTtcclxuICAgICAgICBkZWJ1Z2xvZyhcImluc2VydGluZyBzeW5vbnltXCIgKyBKU09OLnN0cmluZ2lmeShvUnVsZSkpO1xyXG4gICAgICAgIGluc2VydFJ1bGVJZk5vdFByZXNlbnQobVJ1bGVzLCBvUnVsZSwgc2Vlbik7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0UnVsZUtleShydWxlKSB7XHJcbiAgICByZXR1cm4gcnVsZS5tYXRjaGVkU3RyaW5nICsgXCItfC1cIiArIHJ1bGUuY2F0ZWdvcnkgKyBcIiAtfC0gXCIgKyBydWxlLnR5cGUgICsgXCIgLXwtIFwiICsgcnVsZS53b3JkICsgXCIgXCI7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGluc2VydFJ1bGVJZk5vdFByZXNlbnQobVJ1bGVzOiBBcnJheTxJTWF0Y2gubVJ1bGU+LCBydWxlOiBJTWF0Y2gubVJ1bGUsXHJcbiAgICBzZWVuUnVsZXM6IHsgW2tleTogc3RyaW5nXTogSU1hdGNoLm1SdWxlW10gfSkge1xyXG5cclxuICAgIGlmIChydWxlLnR5cGUgIT09IElNYXRjaC5FbnVtUnVsZVR5cGUuV09SRCkge1xyXG4gICAgICAgIG1SdWxlcy5wdXNoKHJ1bGUpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmICgocnVsZS53b3JkID09PSB1bmRlZmluZWQpIHx8IChydWxlLm1hdGNoZWRTdHJpbmcgPT09IHVuZGVmaW5lZCkpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2lsbGVnYWwgcnVsZScgKyBKU09OLnN0cmluZ2lmeShydWxlLCB1bmRlZmluZWQsIDIpKTtcclxuICAgIH1cclxuICAgIHZhciByID0gZ2V0UnVsZUtleShydWxlKTtcclxuICAgIHJ1bGUubG93ZXJjYXNld29yZCA9IHJ1bGUud29yZC50b0xvd2VyQ2FzZSgpO1xyXG4gICAgaWYgKHNlZW5SdWxlc1tyXSkge1xyXG4gICAgICAgIGRlYnVnbG9nKFwiQXR0ZW1wdGluZyB0byBpbnNlcnQgZHVwbGljYXRlXCIgKyBKU09OLnN0cmluZ2lmeShydWxlLCB1bmRlZmluZWQsIDIpKTtcclxuICAgICAgICB2YXIgZHVwbGljYXRlcyA9IHNlZW5SdWxlc1tyXS5maWx0ZXIoZnVuY3Rpb24oIG9FbnRyeSkge1xyXG4gICAgICAgICAgICByZXR1cm4gMCA9PT0gSW5wdXRGaWx0ZXJSdWxlcy5jb21wYXJlTVJ1bGVGdWxsKG9FbnRyeSxydWxlKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBpZihkdXBsaWNhdGVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHNlZW5SdWxlc1tyXSA9IChzZWVuUnVsZXNbcl0gfHwgW10pO1xyXG4gICAgc2VlblJ1bGVzW3JdLnB1c2gocnVsZSk7XHJcbiAgICBpZiAocnVsZS53b3JkID09PSBcIlwiKSB7XHJcbiAgICAgICAgZGVidWdsb2coJ1NraXBwaW5nIHJ1bGUgd2l0aCBlbXRweSB3b3JkICcgKyBKU09OLnN0cmluZ2lmeShydWxlLCB1bmRlZmluZWQsIDIpKTtcclxuICAgICAgICBsb2FkbG9nKCdTa2lwcGluZyBydWxlIHdpdGggZW10cHkgd29yZCAnICsgSlNPTi5zdHJpbmdpZnkocnVsZSwgdW5kZWZpbmVkLCAyKSk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgbVJ1bGVzLnB1c2gocnVsZSk7XHJcbiAgICByZXR1cm47XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGxvYWRNb2RlbERhdGEobW9kZWxQYXRoOiBzdHJpbmcsIG9NZGw6IElNb2RlbCwgc01vZGVsTmFtZTogc3RyaW5nLCBvTW9kZWw6IElNYXRjaC5JTW9kZWxzKSB7XHJcbiAgICAvLyByZWFkIHRoZSBkYXRhIC0+XHJcbiAgICAvLyBkYXRhIGlzIHByb2Nlc3NlZCBpbnRvIG1SdWxlcyBkaXJlY3RseSxcclxuICAgIGNvbnN0IHNGaWxlTmFtZSA9ICgnLi8nICsgbW9kZWxQYXRoICsgJy8nICsgc01vZGVsTmFtZSArIFwiLmRhdGEuanNvblwiKTtcclxuICAgIHZhciBtZGxkYXRhID0gZnMucmVhZEZpbGVTeW5jKHNGaWxlTmFtZSwgJ3V0Zi04Jyk7XHJcbiAgICB2YXIgb01kbERhdGEgPSBKU09OLnBhcnNlKG1kbGRhdGEpO1xyXG4gICAgb01kbERhdGEuZm9yRWFjaChmdW5jdGlvbiAob0VudHJ5KSB7XHJcbiAgICAgICAgaWYgKCFvRW50cnkudG9vbCAmJiBvTWRsLnRvb2wubmFtZSkge1xyXG4gICAgICAgICAgICBvRW50cnkudG9vbCA9IG9NZGwudG9vbC5uYW1lO1xyXG4gICAgICAgICAgICBvRW50cnkuX2RvbWFpbiA9IG9NZGwuZG9tYWluO1xyXG4gICAgICAgIH1cclxuICAgICAgICBvTW9kZWwucmVjb3Jkcy5wdXNoKG9FbnRyeSk7XHJcblxyXG4gICAgICAgIG9NZGwud29yZGluZGV4LmZvckVhY2goZnVuY3Rpb24gKGNhdGVnb3J5KSB7XHJcbiAgICAgICAgICAgIGlmIChvRW50cnlbY2F0ZWdvcnldID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGRlYnVnbG9nKFwiSU5DT05TSVNURU5UKj4gTW9kZWxEYXRhIFwiICsgc0ZpbGVOYW1lICsgXCIgZG9lcyBub3QgY29udGFpbiBjYXRlZ29yeSBcIiArIGNhdGVnb3J5ICsgXCIgb2Ygd29yZGluZGV4XCIgKyBKU09OLnN0cmluZ2lmeShvRW50cnkpICsgXCJcIilcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAob0VudHJ5W2NhdGVnb3J5XSAhPT0gXCIqXCIpIHtcclxuICAgICAgICAgICAgICAgIHZhciBzU3RyaW5nID0gb0VudHJ5W2NhdGVnb3J5XTtcclxuICAgICAgICAgICAgICAgIGRlYnVnbG9nKFwicHVzaGluZyBydWxlIHdpdGggXCIgKyBjYXRlZ29yeSArIFwiIC0+IFwiICsgc1N0cmluZyk7XHJcbiAgICAgICAgICAgICAgICB2YXIgb1J1bGUgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBjYXRlZ29yeSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlZFN0cmluZzogc1N0cmluZyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogSU1hdGNoLkVudW1SdWxlVHlwZS5XT1JELFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3b3JkOiBzU3RyaW5nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfcmFua2luZzogMC45NVxyXG4gICAgICAgICAgICAgICAgICAgIH0gYXMgSU1hdGNoLm1SdWxlO1xyXG4gICAgICAgICAgICAgICAgaWYob01kbC5leGFjdG1hdGNoICYmIG9NZGwuZXhhY3RtYXRjaC5pbmRleE9mKGNhdGVnb3J5KSA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb1J1bGUuZXhhY3RPbmx5ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGluc2VydFJ1bGVJZk5vdFByZXNlbnQob01vZGVsLm1SdWxlcyxvUnVsZSwgb01vZGVsLnNlZW5SdWxlcyk7XHJcbiAgICAgICAgICAgICAgICBpZiAob01kbERhdGEuc3lub255bXMgJiYgb01kbERhdGEuc3lub255bXNbY2F0ZWdvcnldKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWRkU3lub255bXMob01kbERhdGEuc3lub255bXNbY2F0ZWdvcnldLCBjYXRlZ29yeSwgc1N0cmluZywgb01vZGVsLm1SdWxlcywgb01vZGVsLnNlZW5SdWxlcyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBsb2FkTW9kZWwobW9kZWxQYXRoIDogc3RyaW5nLCBzTW9kZWxOYW1lOiBzdHJpbmcsIG9Nb2RlbDogSU1hdGNoLklNb2RlbHMpIHtcclxuICAgIGRlYnVnbG9nKFwiIGxvYWRpbmcgXCIgKyBzTW9kZWxOYW1lICsgXCIgLi4uLlwiKTtcclxuICAgIHZhciBtZGwgPSBmcy5yZWFkRmlsZVN5bmMoJy4vJyArIG1vZGVsUGF0aCArICcvJyArIHNNb2RlbE5hbWUgKyBcIi5tb2RlbC5qc29uXCIsICd1dGYtOCcpO1xyXG4gICAgdmFyIG9NZGwgPSBKU09OLnBhcnNlKG1kbCkgYXMgSU1vZGVsO1xyXG5cclxuICAgIGlmIChvTW9kZWwuZG9tYWlucy5pbmRleE9mKG9NZGwuZG9tYWluKSA+PSAwKSB7XHJcbiAgICAgICAgZGVidWdsb2coXCIqKioqKioqKioqKmhlcmUgbWRsXCIgKyBKU09OLnN0cmluZ2lmeShvTWRsLCB1bmRlZmluZWQsIDIpKTtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0RvbWFpbiAnICsgb01kbC5kb21haW4gKyAnIGFscmVhZHkgbG9hZGVkIHdoaWxlIGxvYWRpbmcgJyArIHNNb2RlbE5hbWUgKyAnPycpO1xyXG4gICAgfVxyXG4gICAgLy8gY2hlY2sgcHJvcGVydGllcyBvZiBtb2RlbFxyXG4gICAgT2JqZWN0LmtleXMob01kbCkuc29ydCgpLmZvckVhY2goZnVuY3Rpb24oc1Byb3BlcnR5KSB7XHJcbiAgICAgICAgaWYoQVJSX01PREVMX1BST1BFUlRJRVMuaW5kZXhPZihzUHJvcGVydHkpIDwgMCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01vZGVsIHByb3BlcnR5IFwiJyArIHNQcm9wZXJ0eSArICdcIiBub3QgYSBrbm93biBtb2RlbCBwcm9wcGVydHkgaW4gbW9kZWwgb2YgZG9tYWluICcgKyBvTWRsLmRvbWFpbiArICcgJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICAvLyBjaGVjayB0aGF0IG1lbWJlcnMgb2Ygd29yZGluZGV4IGFyZSBpbiBjYXRlZ29yaWVzLFxyXG4gICAgb01kbC53b3JkaW5kZXggPSBvTWRsLndvcmRpbmRleCB8fCBbXTtcclxuICAgIG9NZGwud29yZGluZGV4LmZvckVhY2goZnVuY3Rpb24oc1dvcmRJbmRleCkge1xyXG4gICAgICAgIGlmKG9NZGwuY2F0ZWdvcnkuaW5kZXhPZihzV29yZEluZGV4KSA8IDApIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNb2RlbCB3b3JkaW5kZXggXCInICsgc1dvcmRJbmRleCArICdcIiBub3QgYSBjYXRlZ29yeSBvZiBkb21haW4gJyArIG9NZGwuZG9tYWluICsgJyAnKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIG9NZGwuZXhhY3RtYXRjaCA9IG9NZGwuZXhhY3RtYXRjaCB8fCBbXTtcclxuICAgIG9NZGwuZXhhY3RtYXRjaC5mb3JFYWNoKGZ1bmN0aW9uKHNFeGFjdE1hdGNoKSB7XHJcbiAgICAgICAgaWYob01kbC5jYXRlZ29yeS5pbmRleE9mKHNFeGFjdE1hdGNoKSA8IDApIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNb2RlbCBleGFjdG1hdGNoIFwiJyArIHNFeGFjdE1hdGNoICsgJ1wiIG5vdCBhIGNhdGVnb3J5IG9mIGRvbWFpbiAnICsgb01kbC5kb21haW4gKyAnICcpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuXHJcbiAgICAvLyBhZGQgcmVsYXRpb24gZG9tYWluIC0+IGNhdGVnb3J5XHJcbiAgICB2YXIgZG9tYWluU3RyID0gTWV0YUYuRG9tYWluKG9NZGwuZG9tYWluKS50b0Z1bGxTdHJpbmcoKTtcclxuICAgIHZhciByZWxhdGlvblN0ciA9IE1ldGFGLlJlbGF0aW9uKE1ldGEuUkVMQVRJT05faGFzQ2F0ZWdvcnkpLnRvRnVsbFN0cmluZygpO1xyXG4gICAgdmFyIHJldmVyc2VSZWxhdGlvblN0ciA9IE1ldGFGLlJlbGF0aW9uKE1ldGEuUkVMQVRJT05faXNDYXRlZ29yeU9mKS50b0Z1bGxTdHJpbmcoKTtcclxuICAgIG9NZGwuY2F0ZWdvcnkuZm9yRWFjaChmdW5jdGlvbihzQ2F0ZWdvcnkpIHtcclxuXHJcbiAgICAgICAgdmFyIENhdGVnb3J5U3RyaW5nID0gTWV0YUYuQ2F0ZWdvcnkoc0NhdGVnb3J5KS50b0Z1bGxTdHJpbmcoKTtcclxuICAgICAgICBvTW9kZWwubWV0YS50M1tkb21haW5TdHJdID0gb01vZGVsLm1ldGEudDNbZG9tYWluU3RyXSB8fCB7fTtcclxuICAgICAgICBvTW9kZWwubWV0YS50M1tkb21haW5TdHJdW3JlbGF0aW9uU3RyXSA9IG9Nb2RlbC5tZXRhLnQzW2RvbWFpblN0cl1bcmVsYXRpb25TdHJdIHx8IHt9O1xyXG4gICAgICAgIG9Nb2RlbC5tZXRhLnQzW2RvbWFpblN0cl1bcmVsYXRpb25TdHJdW0NhdGVnb3J5U3RyaW5nXSAgPSB7fTtcclxuXHJcbiAgICAgICAgb01vZGVsLm1ldGEudDNbQ2F0ZWdvcnlTdHJpbmddID0gb01vZGVsLm1ldGEudDNbQ2F0ZWdvcnlTdHJpbmddIHx8IHt9O1xyXG4gICAgICAgIG9Nb2RlbC5tZXRhLnQzW0NhdGVnb3J5U3RyaW5nXVtyZXZlcnNlUmVsYXRpb25TdHJdID0gb01vZGVsLm1ldGEudDNbQ2F0ZWdvcnlTdHJpbmddW3JldmVyc2VSZWxhdGlvblN0cl0gfHwge307XHJcbiAgICAgICAgb01vZGVsLm1ldGEudDNbQ2F0ZWdvcnlTdHJpbmddW3JldmVyc2VSZWxhdGlvblN0cl1bZG9tYWluU3RyXSAgPSB7fTtcclxuXHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBhZGQgYSBwcmVjaWNlIGRvbWFpbiBtYXRjaHJ1bGVcclxuICAgIGluc2VydFJ1bGVJZk5vdFByZXNlbnQob01vZGVsLm1SdWxlcywge1xyXG4gICAgICAgICAgICBjYXRlZ29yeTogXCJkb21haW5cIixcclxuICAgICAgICAgICAgbWF0Y2hlZFN0cmluZzogb01kbC5kb21haW4sXHJcbiAgICAgICAgICAgIHR5cGU6IElNYXRjaC5FbnVtUnVsZVR5cGUuV09SRCxcclxuICAgICAgICAgICAgd29yZDogb01kbC5kb21haW4sXHJcbiAgICAgICAgICAgIF9yYW5raW5nOiAwLjk1XHJcbiAgICAgICAgfSwgb01vZGVsLnNlZW5SdWxlcyk7XHJcblxyXG5cclxuXHJcbiAgICAvLyBleHRyYWN0IHRvb2xzIGFuIGFkZCB0byB0b29sczpcclxuICAgIG9Nb2RlbC50b29scy5maWx0ZXIoZnVuY3Rpb24gKG9FbnRyeSkge1xyXG4gICAgICAgIGlmIChvRW50cnkubmFtZSA9PT0gKG9NZGwudG9vbCAmJiBvTWRsLnRvb2wubmFtZSkpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJUb29sIFwiICsgb01kbC50b29sLm5hbWUgKyBcIiBhbHJlYWR5IHByZXNlbnQgd2hlbiBsb2FkaW5nIFwiICsgc01vZGVsTmFtZSk7XHJcbiAgICAgICAgICAgIC8vdGhyb3cgbmV3IEVycm9yKCdEb21haW4gYWxyZWFkeSBsb2FkZWQ/Jyk7XHJcbiAgICAgICAgICAgIHByb2Nlc3MuZXhpdCgtMSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICAvLyBhZGQgdGhlIHRvb2wgbmFtZSBhcyBydWxlIHVubGVzcyBoaWRkZW5cclxuICAgIGlmICghb01kbC50b29saGlkZGVuICYmIG9NZGwudG9vbCAmJiBvTWRsLnRvb2wubmFtZSkge1xyXG4gICAgICAgIGluc2VydFJ1bGVJZk5vdFByZXNlbnQob01vZGVsLm1SdWxlcywge1xyXG4gICAgICAgICAgICBjYXRlZ29yeTogXCJ0b29sXCIsXHJcbiAgICAgICAgICAgIG1hdGNoZWRTdHJpbmc6IG9NZGwudG9vbC5uYW1lLFxyXG4gICAgICAgICAgICB0eXBlOiBJTWF0Y2guRW51bVJ1bGVUeXBlLldPUkQsXHJcbiAgICAgICAgICAgIHdvcmQ6IG9NZGwudG9vbC5uYW1lLFxyXG4gICAgICAgICAgICBfcmFua2luZzogMC45NVxyXG4gICAgICAgIH0sIG9Nb2RlbC5zZWVuUnVsZXMpO1xyXG4gICAgfTtcclxuICAgIGlmIChvTWRsLnN5bm9ueW1zICYmIG9NZGwuc3lub255bXNbXCJ0b29sXCJdKSB7XHJcbiAgICAgICAgYWRkU3lub255bXMob01kbC5zeW5vbnltc1tcInRvb2xcIl0sIFwidG9vbFwiLCBvTWRsLnRvb2wubmFtZSwgb01vZGVsLm1SdWxlcywgb01vZGVsLnNlZW5SdWxlcyk7XHJcbiAgICB9O1xyXG4gICAgaWYgKG9NZGwuc3lub255bXMpIHtcclxuICAgICAgICBPYmplY3Qua2V5cyhvTWRsLnN5bm9ueW1zKS5mb3JFYWNoKGZ1bmN0aW9uIChzc3lua2V5KSB7XHJcbiAgICAgICAgICAgIGlmIChvTWRsLmNhdGVnb3J5LmluZGV4T2Yoc3N5bmtleSkgPj0gMCAmJiBzc3lua2V5ICE9PSBcInRvb2xcIikge1xyXG4gICAgICAgICAgICAgICAgYWRkU3lub255bXMob01kbC5zeW5vbnltc1tzc3lua2V5XSwgXCJjYXRlZ29yeVwiLCBzc3lua2V5LCBvTW9kZWwubVJ1bGVzLCBvTW9kZWwuc2VlblJ1bGVzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgb01vZGVsLmRvbWFpbnMucHVzaChvTWRsLmRvbWFpbik7XHJcbiAgICBpZihvTWRsLnRvb2wubmFtZSkge1xyXG4gICAgICBvTW9kZWwudG9vbHMucHVzaChvTWRsLnRvb2wpO1xyXG4gICAgfVxyXG4gICAgb01vZGVsLmNhdGVnb3J5ID0gb01vZGVsLmNhdGVnb3J5LmNvbmNhdChvTWRsLmNhdGVnb3J5KTtcclxuICAgIG9Nb2RlbC5jYXRlZ29yeS5zb3J0KCk7XHJcbiAgICBvTW9kZWwuY2F0ZWdvcnkgPSBvTW9kZWwuY2F0ZWdvcnkuZmlsdGVyKGZ1bmN0aW9uIChzdHJpbmcsIGluZGV4KSB7XHJcbiAgICAgICAgcmV0dXJuIG9Nb2RlbC5jYXRlZ29yeVtpbmRleF0gIT09IG9Nb2RlbC5jYXRlZ29yeVtpbmRleCArIDFdO1xyXG4gICAgfSk7XHJcbiAgICBsb2FkTW9kZWxEYXRhKG1vZGVsUGF0aCwgb01kbCwgc01vZGVsTmFtZSwgb01vZGVsKTtcclxufSAvLyBsb2FkbW9kZWxcclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc3BsaXRSdWxlcyhydWxlcyA6IElNYXRjaC5tUnVsZVtdKSA6IElNYXRjaC5TcGxpdFJ1bGVzIHtcclxuICAgIHZhciByZXMgPSB7fTtcclxuICAgIHZhciBub25Xb3JkUnVsZXMgPSBbXTtcclxuICAgIHJ1bGVzLmZvckVhY2goZnVuY3Rpb24ocnVsZSkge1xyXG4gICAgICAgIGlmKHJ1bGUudHlwZSA9PT0gSU1hdGNoLkVudW1SdWxlVHlwZS5XT1JEKSB7XHJcbiAgICAgICAgICAgIGlmKCFydWxlLmxvd2VyY2FzZXdvcmQpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlJ1bGUgaGFzIG5vIG1lbWJlciBsb3dlcmNhc2V3b3JkXCIgKyBKU09OLnN0cmluZ2lmeShydWxlKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmVzW3J1bGUubG93ZXJjYXNld29yZF0gPSByZXNbcnVsZS5sb3dlcmNhc2V3b3JkXSB8fCBbXTtcclxuICAgICAgICAgICAgcmVzW3J1bGUubG93ZXJjYXNld29yZF0ucHVzaChydWxlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBub25Xb3JkUnVsZXMucHVzaChydWxlKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgd29yZE1hcDogcmVzLFxyXG4gICAgICAgIG5vbldvcmRSdWxlcyA6IG5vbldvcmRSdWxlcyxcclxuICAgICAgICBhbGxSdWxlcyA6IHJ1bGVzXHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbG9hZE1vZGVscyhtb2RlbFBhdGg/IDogc3RyaW5nKSA6IElNYXRjaC5JTW9kZWxzIHtcclxuICAgIHZhciBvTW9kZWw6IElNYXRjaC5JTW9kZWxzO1xyXG4gICAgb01vZGVsID0ge1xyXG4gICAgICAgIGRvbWFpbnM6IFtdLFxyXG4gICAgICAgIHRvb2xzOiBbXSxcclxuICAgICAgICBydWxlcyA6IHVuZGVmaW5lZCxcclxuICAgICAgICBjYXRlZ29yeTogW10sXHJcbiAgICAgICAgb3BlcmF0b3JzIDoge30sXHJcbiAgICAgICAgbVJ1bGVzOiBbXSxcclxuICAgICAgICBzZWVuUnVsZXMgOiB7fSxcclxuICAgICAgICByZWNvcmRzOiBbXSxcclxuICAgICAgICBtZXRhIDogeyB0MyA6IHt9IH1cclxuICAgIH1cclxuICAgIG1vZGVsUGF0aCA9IG1vZGVsUGF0aCB8fCBlbnZNb2RlbFBhdGg7XHJcbiAgICB2YXIgc21kbHMgPSBmcy5yZWFkRmlsZVN5bmMoJy4vJyArIG1vZGVsUGF0aCArICcvbW9kZWxzLmpzb24nLCAndXRmLTgnKTtcclxuICAgIHZhciBtZGxzID0gSlNPTi5wYXJzZShcIlwiICsgc21kbHMpO1xyXG4gICAgbWRscy5mb3JFYWNoKGZ1bmN0aW9uIChzTW9kZWxOYW1lKSB7XHJcbiAgICAgICAgbG9hZE1vZGVsKG1vZGVsUGF0aCwgc01vZGVsTmFtZSwgb01vZGVsKVxyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gYWRkIHRoZSBjYXRlZ29yaWVzIHRvIHRoZSBtb2RlbDpcclxuICAgIG9Nb2RlbC5jYXRlZ29yeS5mb3JFYWNoKGZ1bmN0aW9uIChjYXRlZ29yeSkge1xyXG4gICAgICAgIGluc2VydFJ1bGVJZk5vdFByZXNlbnQob01vZGVsLm1SdWxlcywge1xyXG4gICAgICAgICAgICBjYXRlZ29yeTogXCJjYXRlZ29yeVwiLFxyXG4gICAgICAgICAgICBtYXRjaGVkU3RyaW5nOiBjYXRlZ29yeSxcclxuICAgICAgICAgICAgdHlwZTogSU1hdGNoLkVudW1SdWxlVHlwZS5XT1JELFxyXG4gICAgICAgICAgICB3b3JkOiBjYXRlZ29yeSxcclxuICAgICAgICAgICAgbG93ZXJjYXNld29yZDogY2F0ZWdvcnkudG9Mb3dlckNhc2UoKSxcclxuICAgICAgICAgICAgX3Jhbmtpbmc6IDAuOTVcclxuICAgICAgICB9LCBvTW9kZWwuc2VlblJ1bGVzKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIGFkZCB0aGUgZG9tYWluIG1ldGEgcnVsZVxyXG4gICAgaW5zZXJ0UnVsZUlmTm90UHJlc2VudChvTW9kZWwubVJ1bGVzLCB7XHJcbiAgICAgICAgICAgIGNhdGVnb3J5OiBcIm1ldGFcIixcclxuICAgICAgICAgICAgbWF0Y2hlZFN0cmluZzogXCJkb21haW5cIixcclxuICAgICAgICAgICAgdHlwZTogSU1hdGNoLkVudW1SdWxlVHlwZS5XT1JELFxyXG4gICAgICAgICAgICB3b3JkOiBcImRvbWFpblwiLFxyXG4gICAgICAgICAgICBfcmFua2luZzogMC45NVxyXG4gICAgICAgIH0sIG9Nb2RlbC5zZWVuUnVsZXMpO1xyXG5cclxuXHJcblxyXG4gICAgLy9hZGQgYSBmaWxsZXIgcnVsZVxyXG4gICAgdmFyIHNmaWxsZXJzID0gZnMucmVhZEZpbGVTeW5jKCcuLycgKyBtb2RlbFBhdGggKyAnL2ZpbGxlci5qc29uJywgJ3V0Zi04Jyk7XHJcbiAgICB2YXIgZmlsbGVycyA9IEpTT04ucGFyc2Uoc2ZpbGxlcnMpO1xyXG4gICAgdmFyIHJlID0gXCJeKChcIiArIGZpbGxlcnMuam9pbihcIil8KFwiKSArIFwiKSkkXCI7XHJcbiAgICBvTW9kZWwubVJ1bGVzLnB1c2goe1xyXG4gICAgICAgIGNhdGVnb3J5OiBcImZpbGxlclwiLFxyXG4gICAgICAgIHR5cGU6IElNYXRjaC5FbnVtUnVsZVR5cGUuUkVHRVhQLFxyXG4gICAgICAgIHJlZ2V4cDogbmV3IFJlZ0V4cChyZSwgXCJpXCIpLFxyXG4gICAgICAgIG1hdGNoZWRTdHJpbmc6IFwiZmlsbGVyXCIsXHJcbiAgICAgICAgX3Jhbmtpbmc6IDAuOVxyXG4gICAgfSk7XHJcblxyXG4gICAgLy9hZGQgb3BlcmF0b3JzXHJcbiAgICB2YXIgc09wZXJhdG9ycyA9IGZzLnJlYWRGaWxlU3luYygnLi9yZXNvdXJjZXMvbW9kZWwvb3BlcmF0b3JzLmpzb24nLCAndXRmLTgnKTtcclxuICAgIHZhciBvcGVyYXRvcnMgPSBKU09OLnBhcnNlKHNPcGVyYXRvcnMpO1xyXG4gICAgT2JqZWN0LmtleXMob3BlcmF0b3JzLm9wZXJhdG9ycykuZm9yRWFjaChmdW5jdGlvbihvcGVyYXRvcikge1xyXG4gICAgICAgIGlmKElNYXRjaC5hT3BlcmF0b3JOYW1lcy5pbmRleE9mKG9wZXJhdG9yKSA8IDApIHtcclxuICAgICAgICAgICAgZGVidWdsb2coXCJ1bmtub3duIG9wZXJhdG9yIFwiICsgb3BlcmF0b3IpO1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIG9wZXJhdG9yIFwiICsgb3BlcmF0b3IpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBvTW9kZWwub3BlcmF0b3JzW29wZXJhdG9yXSA9IG9wZXJhdG9ycy5vcGVyYXRvcnNbb3BlcmF0b3JdO1xyXG4gICAgICAgIG9Nb2RlbC5vcGVyYXRvcnNbb3BlcmF0b3JdLm9wZXJhdG9yID0gPElNYXRjaC5PcGVyYXRvck5hbWU+IG9wZXJhdG9yO1xyXG4gICAgICAgIE9iamVjdC5mcmVlemUob01vZGVsLm9wZXJhdG9yc1tvcGVyYXRvcl0pO1xyXG4gICAgICAgIHZhciB3b3JkID0gb3BlcmF0b3I7XHJcbiAgICAgICAgaW5zZXJ0UnVsZUlmTm90UHJlc2VudChvTW9kZWwubVJ1bGVzLCB7XHJcbiAgICAgICAgICAgIGNhdGVnb3J5OiBcIm9wZXJhdG9yXCIsXHJcbiAgICAgICAgICAgIHdvcmQgOiB3b3JkLnRvTG93ZXJDYXNlKCksXHJcbiAgICAgICAgICAgIGxvd2VyY2FzZXdvcmQgOiB3b3JkLnRvTG93ZXJDYXNlKCksXHJcbiAgICAgICAgICAgIHR5cGU6IElNYXRjaC5FbnVtUnVsZVR5cGUuV09SRCxcclxuICAgICAgICAgICAgbWF0Y2hlZFN0cmluZyA6IHdvcmQsXHJcbiAgICAgICAgICAgIF9yYW5raW5nOiAwLjlcclxuICAgICAgICB9LCBvTW9kZWwuc2VlblJ1bGVzKTtcclxuICAgICAgICAvLyBhZGQgYWxsIHN5bm9ueW1zXHJcbiAgICAgICAgaWYob3BlcmF0b3JzLnN5bm9ueW1zW29wZXJhdG9yXSkge1xyXG4gICAgICAgICAgICBPYmplY3Qua2V5cyhvcGVyYXRvcnMuc3lub255bXNbb3BlcmF0b3JdKS5mb3JFYWNoKGZ1bmN0aW9uKHN5bm9ueW0pIHtcclxuICAgICAgICAgICAgICAgIGluc2VydFJ1bGVJZk5vdFByZXNlbnQob01vZGVsLm1SdWxlcyx7XHJcbiAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcnk6IFwib3BlcmF0b3JcIixcclxuICAgICAgICAgICAgICAgICAgICB3b3JkIDogc3lub255bS50b0xvd2VyQ2FzZSgpLFxyXG4gICAgICAgICAgICAgICAgICAgIGxvd2VyY2FzZXdvcmQgOiBzeW5vbnltLnRvTG93ZXJDYXNlKCksXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogSU1hdGNoLkVudW1SdWxlVHlwZS5XT1JELFxyXG4gICAgICAgICAgICAgICAgICAgIG1hdGNoZWRTdHJpbmcgOiBvcGVyYXRvcixcclxuICAgICAgICAgICAgICAgICAgICBfcmFua2luZzogMC45XHJcbiAgICAgICAgICAgICAgICB9LCBvTW9kZWwuc2VlblJ1bGVzKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICAvKlxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgIGNhdGVnb3J5OiBcImZpbGxlclwiLFxyXG4gICAgICAgICAgdHlwZTogMSxcclxuICAgICAgICAgIHJlZ2V4cDogL14oKHN0YXJ0KXwoc2hvdyl8KGZyb20pfChpbikpJC9pLFxyXG4gICAgICAgICAgbWF0Y2hlZFN0cmluZzogXCJmaWxsZXJcIixcclxuICAgICAgICAgIF9yYW5raW5nOiAwLjlcclxuICAgICAgICB9LFxyXG4gICAgKi9cclxuICAgIG9Nb2RlbC5tUnVsZXMgPSBvTW9kZWwubVJ1bGVzLnNvcnQoSW5wdXRGaWx0ZXJSdWxlcy5jbXBNUnVsZSk7XHJcbiAgICBvTW9kZWwucnVsZXMgPSBzcGxpdFJ1bGVzKG9Nb2RlbC5tUnVsZXMpO1xyXG4gICAgb01vZGVsLnRvb2xzID0gb01vZGVsLnRvb2xzLnNvcnQoVG9vbHMuY21wVG9vbHMpO1xyXG4gICAgZGVsZXRlIG9Nb2RlbC5zZWVuUnVsZXM7XHJcbiAgICByZXR1cm4gb01vZGVsO1xyXG59XHJcblxyXG5cclxuY29uc3QgTWV0YUYgPSBNZXRhLmdldE1ldGFGYWN0b3J5KCk7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0T3BlcmF0b3IobWRsOiBJTWF0Y2guSU1vZGVscywgb3BlcmF0b3IgOiBzdHJpbmcpIDogSU1hdGNoLklPcGVyYXRvciB7XHJcbiAgICByZXR1cm4gbWRsLm9wZXJhdG9yc1tvcGVyYXRvcl07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRSZXN1bHRBc0FycmF5KG1kbCA6IElNYXRjaC5JTW9kZWxzLCBhIDogTWV0YS5JTWV0YSwgcmVsIDogTWV0YS5JTWV0YSkgOiBNZXRhLklNZXRhW10ge1xyXG4gICAgaWYocmVsLnRvVHlwZSgpICE9PSAncmVsYXRpb24nKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZXhwZWN0IHJlbGF0aW9uIGFzIDJuZCBhcmdcIik7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIHJlcyA9IG1kbC5tZXRhLnQzW2EudG9GdWxsU3RyaW5nKCldICYmXHJcbiAgICBtZGwubWV0YS50M1thLnRvRnVsbFN0cmluZygpXVtyZWwudG9GdWxsU3RyaW5nKCldO1xyXG4gICAgaWYoIXJlcykge1xyXG4gICAgICAgIHJldHVybiBbXTtcclxuICAgIH1cclxuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhyZXMpLnNvcnQoKS5tYXAoTWV0YUYucGFyc2VJTWV0YSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRDYXRlZ29yaWVzRm9yRG9tYWluKHRoZU1vZGVsIDogSU1hdGNoLklNb2RlbHMsIGRvbWFpbiA6IHN0cmluZykgOiBzdHJpbmdbXSB7XHJcbiAgICBpZih0aGVNb2RlbC5kb21haW5zLmluZGV4T2YoZG9tYWluKSA8IDApIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJEb21haW4gXFxcIlwiICsgZG9tYWluICsgXCJcXFwiIG5vdCBwYXJ0IG9mIG1vZGVsXCIpO1xyXG4gICAgfVxyXG4gICAgdmFyIHJlcyA9IGdldFJlc3VsdEFzQXJyYXkodGhlTW9kZWwsIE1ldGFGLkRvbWFpbihkb21haW4pLCBNZXRhRi5SZWxhdGlvbihNZXRhLlJFTEFUSU9OX2hhc0NhdGVnb3J5KSk7XHJcbiAgICByZXR1cm4gTWV0YS5nZXRTdHJpbmdBcnJheShyZXMpO1xyXG59XHJcblxyXG4vKipcclxuICogUmV0dXJuIGFsbCBjYXRlZ29yaWVzIG9mIGEgZG9tYWluIHdoaWNoIGNhbiBhcHBlYXIgb24gYSB3b3JkLFxyXG4gKiB0aGVzZSBhcmUgdHlwaWNhbGx5IHRoZSB3b3JkaW5kZXggZG9tYWlucyArIGVudHJpZXMgZ2VuZXJhdGVkIGJ5IGdlbmVyaWMgcnVsZXNcclxuICpcclxuICogVGhlIGN1cnJlbnQgaW1wbGVtZW50YXRpb24gaXMgYSBzaW1wbGlmaWNhdGlvblxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFBvdGVudGlhbFdvcmRDYXRlZ29yaWVzRm9yRG9tYWluKHRoZU1vZGVsIDogSU1hdGNoLklNb2RlbHMsIGRvbWFpbiA6IHN0cmluZykgOiBzdHJpbmdbXSB7XHJcbiAgICAvLyB0aGlzIGlzIGEgc2ltcGxpZmllZCB2ZXJzaW9uXHJcbiAgICByZXR1cm4gZ2V0Q2F0ZWdvcmllc0ZvckRvbWFpbih0aGVNb2RlbCwgZG9tYWluKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldERvbWFpbnNGb3JDYXRlZ29yeSh0aGVNb2RlbCA6IElNYXRjaC5JTW9kZWxzLCBjYXRlZ29yeSA6IHN0cmluZykgOiBzdHJpbmdbXSB7XHJcbiAgICBpZih0aGVNb2RlbC5jYXRlZ29yeS5pbmRleE9mKGNhdGVnb3J5KSA8IDApIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYXRlZ29yeSBcXFwiXCIgKyBjYXRlZ29yeSArIFwiXFxcIiBub3QgcGFydCBvZiBtb2RlbFwiKTtcclxuICAgIH1cclxuICAgIHZhciByZXMgPSBnZXRSZXN1bHRBc0FycmF5KHRoZU1vZGVsLCBNZXRhRi5DYXRlZ29yeShjYXRlZ29yeSksIE1ldGFGLlJlbGF0aW9uKE1ldGEuUkVMQVRJT05faXNDYXRlZ29yeU9mKSk7XHJcbiAgICByZXR1cm4gTWV0YS5nZXRTdHJpbmdBcnJheShyZXMpO1xyXG59XHJcblxyXG5cclxuIGV4cG9ydCBmdW5jdGlvbiBnZXRBbGxSZWNvcmRDYXRlZ29yaWVzRm9yVGFyZ2V0Q2F0ZWdvcnkobW9kZWwgOiBJTWF0Y2guSU1vZGVscywgY2F0ZWdvcnkgOiBzdHJpbmcsIHdvcmRzb25seSA6IGJvb2xlYW4pIDoge1trZXk6IHN0cmluZ10gOiBib29sZWFufSB7XHJcbiAgICB2YXIgcmVzID0ge307XHJcbiAgICAvL1xyXG4gICAgdmFyIGZuID0gd29yZHNvbmx5ID8gZ2V0UG90ZW50aWFsV29yZENhdGVnb3JpZXNGb3JEb21haW4gOiBnZXRDYXRlZ29yaWVzRm9yRG9tYWluO1xyXG4gICAgdmFyIGRvbWFpbnMgPSBnZXREb21haW5zRm9yQ2F0ZWdvcnkobW9kZWwsIGNhdGVnb3J5KTtcclxuICAgIGRvbWFpbnMuZm9yRWFjaChmdW5jdGlvbihkb21haW4pIHtcclxuICAgICAgICBmbihtb2RlbCwgZG9tYWluKS5mb3JFYWNoKGZ1bmN0aW9uKHdvcmRjYXQpIHtcclxuICAgICAgICAgICAgcmVzW3dvcmRjYXRdID0gdHJ1ZTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmZyZWV6ZShyZXMpO1xyXG4gICAgcmV0dXJuIHJlcztcclxuIH1cclxuXHJcblxyXG4iLCIvKipcbiAqIEZ1bmN0aW9uYWxpdHkgbWFuYWdpbmcgdGhlIG1hdGNoIG1vZGVsc1xuICpcbiAqIEBmaWxlXG4gKi9cblwidXNlIHN0cmljdFwiO1xudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKTtcbnZhciBkZWJ1Z2xvZyA9IGRlYnVnKCdtb2RlbCcpO1xudmFyIGxvZ2dlciA9IHJlcXVpcmUoJy4uL3V0aWxzL2xvZ2dlcicpO1xudmFyIGxvYWRsb2cgPSBsb2dnZXIubG9nZ2VyKCdtb2RlbGxvYWQnLCAnJyk7XG52YXIgSU1hdGNoID0gcmVxdWlyZSgnLi4vbWF0Y2gvaWZtYXRjaCcpO1xudmFyIElucHV0RmlsdGVyUnVsZXMgPSByZXF1aXJlKCcuLi9tYXRjaC9pbnB1dEZpbHRlclJ1bGVzJyk7XG52YXIgVG9vbHMgPSByZXF1aXJlKCcuLi9tYXRjaC90b29scycpO1xudmFyIGZzID0gcmVxdWlyZSgnZnMnKTtcbnZhciBNZXRhID0gcmVxdWlyZSgnLi9tZXRhJyk7XG52YXIgcHJvY2VzcyA9IHJlcXVpcmUoJ3Byb2Nlc3MnKTtcbi8qKlxuICogdGhlIG1vZGVsIHBhdGgsIG1heSBiZSBjb250cm9sbGVkIHZpYSBlbnZpcm9ubWVudCB2YXJpYWJsZVxuICovXG52YXIgZW52TW9kZWxQYXRoID0gcHJvY2Vzcy5lbnZbXCJBQk9UX01PREVMUEFUSFwiXSB8fCBcInRlc3Rtb2RlbFwiO1xuO1xudmFyIEFSUl9NT0RFTF9QUk9QRVJUSUVTID0gW1wiZG9tYWluXCIsIFwidG9vbFwiLCBcInRvb2xoaWRkZW5cIiwgXCJzeW5vbnltc1wiLCBcImNhdGVnb3J5XCIsIFwid29yZGluZGV4XCIsIFwiZXhhY3RtYXRjaFwiLCBcImhpZGRlblwiXTtcbmZ1bmN0aW9uIGFkZFN5bm9ueW1zKHN5bm9ueW1zLCBjYXRlZ29yeSwgc3lub255bUZvciwgbVJ1bGVzLCBzZWVuKSB7XG4gICAgc3lub255bXMuZm9yRWFjaChmdW5jdGlvbiAoc3luKSB7XG4gICAgICAgIHZhciBvUnVsZSA9IHtcbiAgICAgICAgICAgIGNhdGVnb3J5OiBjYXRlZ29yeSxcbiAgICAgICAgICAgIG1hdGNoZWRTdHJpbmc6IHN5bm9ueW1Gb3IsXG4gICAgICAgICAgICB0eXBlOiAwIC8qIFdPUkQgKi8sXG4gICAgICAgICAgICB3b3JkOiBzeW4sXG4gICAgICAgICAgICBfcmFua2luZzogMC45NVxuICAgICAgICB9O1xuICAgICAgICBkZWJ1Z2xvZyhcImluc2VydGluZyBzeW5vbnltXCIgKyBKU09OLnN0cmluZ2lmeShvUnVsZSkpO1xuICAgICAgICBpbnNlcnRSdWxlSWZOb3RQcmVzZW50KG1SdWxlcywgb1J1bGUsIHNlZW4pO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gZ2V0UnVsZUtleShydWxlKSB7XG4gICAgcmV0dXJuIHJ1bGUubWF0Y2hlZFN0cmluZyArIFwiLXwtXCIgKyBydWxlLmNhdGVnb3J5ICsgXCIgLXwtIFwiICsgcnVsZS50eXBlICsgXCIgLXwtIFwiICsgcnVsZS53b3JkICsgXCIgXCI7XG59XG5mdW5jdGlvbiBpbnNlcnRSdWxlSWZOb3RQcmVzZW50KG1SdWxlcywgcnVsZSwgc2VlblJ1bGVzKSB7XG4gICAgaWYgKHJ1bGUudHlwZSAhPT0gMCAvKiBXT1JEICovKSB7XG4gICAgICAgIG1SdWxlcy5wdXNoKHJ1bGUpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICgocnVsZS53b3JkID09PSB1bmRlZmluZWQpIHx8IChydWxlLm1hdGNoZWRTdHJpbmcgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbGxlZ2FsIHJ1bGUnICsgSlNPTi5zdHJpbmdpZnkocnVsZSwgdW5kZWZpbmVkLCAyKSk7XG4gICAgfVxuICAgIHZhciByID0gZ2V0UnVsZUtleShydWxlKTtcbiAgICBydWxlLmxvd2VyY2FzZXdvcmQgPSBydWxlLndvcmQudG9Mb3dlckNhc2UoKTtcbiAgICBpZiAoc2VlblJ1bGVzW3JdKSB7XG4gICAgICAgIGRlYnVnbG9nKFwiQXR0ZW1wdGluZyB0byBpbnNlcnQgZHVwbGljYXRlXCIgKyBKU09OLnN0cmluZ2lmeShydWxlLCB1bmRlZmluZWQsIDIpKTtcbiAgICAgICAgdmFyIGR1cGxpY2F0ZXMgPSBzZWVuUnVsZXNbcl0uZmlsdGVyKGZ1bmN0aW9uIChvRW50cnkpIHtcbiAgICAgICAgICAgIHJldHVybiAwID09PSBJbnB1dEZpbHRlclJ1bGVzLmNvbXBhcmVNUnVsZUZ1bGwob0VudHJ5LCBydWxlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChkdXBsaWNhdGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzZWVuUnVsZXNbcl0gPSAoc2VlblJ1bGVzW3JdIHx8IFtdKTtcbiAgICBzZWVuUnVsZXNbcl0ucHVzaChydWxlKTtcbiAgICBpZiAocnVsZS53b3JkID09PSBcIlwiKSB7XG4gICAgICAgIGRlYnVnbG9nKCdTa2lwcGluZyBydWxlIHdpdGggZW10cHkgd29yZCAnICsgSlNPTi5zdHJpbmdpZnkocnVsZSwgdW5kZWZpbmVkLCAyKSk7XG4gICAgICAgIGxvYWRsb2coJ1NraXBwaW5nIHJ1bGUgd2l0aCBlbXRweSB3b3JkICcgKyBKU09OLnN0cmluZ2lmeShydWxlLCB1bmRlZmluZWQsIDIpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBtUnVsZXMucHVzaChydWxlKTtcbiAgICByZXR1cm47XG59XG5mdW5jdGlvbiBsb2FkTW9kZWxEYXRhKG1vZGVsUGF0aCwgb01kbCwgc01vZGVsTmFtZSwgb01vZGVsKSB7XG4gICAgLy8gcmVhZCB0aGUgZGF0YSAtPlxuICAgIC8vIGRhdGEgaXMgcHJvY2Vzc2VkIGludG8gbVJ1bGVzIGRpcmVjdGx5LFxuICAgIHZhciBzRmlsZU5hbWUgPSAoJy4vJyArIG1vZGVsUGF0aCArICcvJyArIHNNb2RlbE5hbWUgKyBcIi5kYXRhLmpzb25cIik7XG4gICAgdmFyIG1kbGRhdGEgPSBmcy5yZWFkRmlsZVN5bmMoc0ZpbGVOYW1lLCAndXRmLTgnKTtcbiAgICB2YXIgb01kbERhdGEgPSBKU09OLnBhcnNlKG1kbGRhdGEpO1xuICAgIG9NZGxEYXRhLmZvckVhY2goZnVuY3Rpb24gKG9FbnRyeSkge1xuICAgICAgICBpZiAoIW9FbnRyeS50b29sICYmIG9NZGwudG9vbC5uYW1lKSB7XG4gICAgICAgICAgICBvRW50cnkudG9vbCA9IG9NZGwudG9vbC5uYW1lO1xuICAgICAgICAgICAgb0VudHJ5Ll9kb21haW4gPSBvTWRsLmRvbWFpbjtcbiAgICAgICAgfVxuICAgICAgICBvTW9kZWwucmVjb3Jkcy5wdXNoKG9FbnRyeSk7XG4gICAgICAgIG9NZGwud29yZGluZGV4LmZvckVhY2goZnVuY3Rpb24gKGNhdGVnb3J5KSB7XG4gICAgICAgICAgICBpZiAob0VudHJ5W2NhdGVnb3J5XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgZGVidWdsb2coXCJJTkNPTlNJU1RFTlQqPiBNb2RlbERhdGEgXCIgKyBzRmlsZU5hbWUgKyBcIiBkb2VzIG5vdCBjb250YWluIGNhdGVnb3J5IFwiICsgY2F0ZWdvcnkgKyBcIiBvZiB3b3JkaW5kZXhcIiArIEpTT04uc3RyaW5naWZ5KG9FbnRyeSkgKyBcIlwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob0VudHJ5W2NhdGVnb3J5XSAhPT0gXCIqXCIpIHtcbiAgICAgICAgICAgICAgICB2YXIgc1N0cmluZyA9IG9FbnRyeVtjYXRlZ29yeV07XG4gICAgICAgICAgICAgICAgZGVidWdsb2coXCJwdXNoaW5nIHJ1bGUgd2l0aCBcIiArIGNhdGVnb3J5ICsgXCIgLT4gXCIgKyBzU3RyaW5nKTtcbiAgICAgICAgICAgICAgICB2YXIgb1J1bGUgPSB7XG4gICAgICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBjYXRlZ29yeSxcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2hlZFN0cmluZzogc1N0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogMCAvKiBXT1JEICovLFxuICAgICAgICAgICAgICAgICAgICB3b3JkOiBzU3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICBfcmFua2luZzogMC45NVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgaWYgKG9NZGwuZXhhY3RtYXRjaCAmJiBvTWRsLmV4YWN0bWF0Y2guaW5kZXhPZihjYXRlZ29yeSkgPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICBvUnVsZS5leGFjdE9ubHkgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpbnNlcnRSdWxlSWZOb3RQcmVzZW50KG9Nb2RlbC5tUnVsZXMsIG9SdWxlLCBvTW9kZWwuc2VlblJ1bGVzKTtcbiAgICAgICAgICAgICAgICBpZiAob01kbERhdGEuc3lub255bXMgJiYgb01kbERhdGEuc3lub255bXNbY2F0ZWdvcnldKSB7XG4gICAgICAgICAgICAgICAgICAgIGFkZFN5bm9ueW1zKG9NZGxEYXRhLnN5bm9ueW1zW2NhdGVnb3J5XSwgY2F0ZWdvcnksIHNTdHJpbmcsIG9Nb2RlbC5tUnVsZXMsIG9Nb2RlbC5zZWVuUnVsZXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBsb2FkTW9kZWwobW9kZWxQYXRoLCBzTW9kZWxOYW1lLCBvTW9kZWwpIHtcbiAgICBkZWJ1Z2xvZyhcIiBsb2FkaW5nIFwiICsgc01vZGVsTmFtZSArIFwiIC4uLi5cIik7XG4gICAgdmFyIG1kbCA9IGZzLnJlYWRGaWxlU3luYygnLi8nICsgbW9kZWxQYXRoICsgJy8nICsgc01vZGVsTmFtZSArIFwiLm1vZGVsLmpzb25cIiwgJ3V0Zi04Jyk7XG4gICAgdmFyIG9NZGwgPSBKU09OLnBhcnNlKG1kbCk7XG4gICAgaWYgKG9Nb2RlbC5kb21haW5zLmluZGV4T2Yob01kbC5kb21haW4pID49IDApIHtcbiAgICAgICAgZGVidWdsb2coXCIqKioqKioqKioqKmhlcmUgbWRsXCIgKyBKU09OLnN0cmluZ2lmeShvTWRsLCB1bmRlZmluZWQsIDIpKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdEb21haW4gJyArIG9NZGwuZG9tYWluICsgJyBhbHJlYWR5IGxvYWRlZCB3aGlsZSBsb2FkaW5nICcgKyBzTW9kZWxOYW1lICsgJz8nKTtcbiAgICB9XG4gICAgLy8gY2hlY2sgcHJvcGVydGllcyBvZiBtb2RlbFxuICAgIE9iamVjdC5rZXlzKG9NZGwpLnNvcnQoKS5mb3JFYWNoKGZ1bmN0aW9uIChzUHJvcGVydHkpIHtcbiAgICAgICAgaWYgKEFSUl9NT0RFTF9QUk9QRVJUSUVTLmluZGV4T2Yoc1Byb3BlcnR5KSA8IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTW9kZWwgcHJvcGVydHkgXCInICsgc1Byb3BlcnR5ICsgJ1wiIG5vdCBhIGtub3duIG1vZGVsIHByb3BwZXJ0eSBpbiBtb2RlbCBvZiBkb21haW4gJyArIG9NZGwuZG9tYWluICsgJyAnKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIC8vIGNoZWNrIHRoYXQgbWVtYmVycyBvZiB3b3JkaW5kZXggYXJlIGluIGNhdGVnb3JpZXMsXG4gICAgb01kbC53b3JkaW5kZXggPSBvTWRsLndvcmRpbmRleCB8fCBbXTtcbiAgICBvTWRsLndvcmRpbmRleC5mb3JFYWNoKGZ1bmN0aW9uIChzV29yZEluZGV4KSB7XG4gICAgICAgIGlmIChvTWRsLmNhdGVnb3J5LmluZGV4T2Yoc1dvcmRJbmRleCkgPCAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01vZGVsIHdvcmRpbmRleCBcIicgKyBzV29yZEluZGV4ICsgJ1wiIG5vdCBhIGNhdGVnb3J5IG9mIGRvbWFpbiAnICsgb01kbC5kb21haW4gKyAnICcpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgb01kbC5leGFjdG1hdGNoID0gb01kbC5leGFjdG1hdGNoIHx8IFtdO1xuICAgIG9NZGwuZXhhY3RtYXRjaC5mb3JFYWNoKGZ1bmN0aW9uIChzRXhhY3RNYXRjaCkge1xuICAgICAgICBpZiAob01kbC5jYXRlZ29yeS5pbmRleE9mKHNFeGFjdE1hdGNoKSA8IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTW9kZWwgZXhhY3RtYXRjaCBcIicgKyBzRXhhY3RNYXRjaCArICdcIiBub3QgYSBjYXRlZ29yeSBvZiBkb21haW4gJyArIG9NZGwuZG9tYWluICsgJyAnKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIC8vIGFkZCByZWxhdGlvbiBkb21haW4gLT4gY2F0ZWdvcnlcbiAgICB2YXIgZG9tYWluU3RyID0gTWV0YUYuRG9tYWluKG9NZGwuZG9tYWluKS50b0Z1bGxTdHJpbmcoKTtcbiAgICB2YXIgcmVsYXRpb25TdHIgPSBNZXRhRi5SZWxhdGlvbihNZXRhLlJFTEFUSU9OX2hhc0NhdGVnb3J5KS50b0Z1bGxTdHJpbmcoKTtcbiAgICB2YXIgcmV2ZXJzZVJlbGF0aW9uU3RyID0gTWV0YUYuUmVsYXRpb24oTWV0YS5SRUxBVElPTl9pc0NhdGVnb3J5T2YpLnRvRnVsbFN0cmluZygpO1xuICAgIG9NZGwuY2F0ZWdvcnkuZm9yRWFjaChmdW5jdGlvbiAoc0NhdGVnb3J5KSB7XG4gICAgICAgIHZhciBDYXRlZ29yeVN0cmluZyA9IE1ldGFGLkNhdGVnb3J5KHNDYXRlZ29yeSkudG9GdWxsU3RyaW5nKCk7XG4gICAgICAgIG9Nb2RlbC5tZXRhLnQzW2RvbWFpblN0cl0gPSBvTW9kZWwubWV0YS50M1tkb21haW5TdHJdIHx8IHt9O1xuICAgICAgICBvTW9kZWwubWV0YS50M1tkb21haW5TdHJdW3JlbGF0aW9uU3RyXSA9IG9Nb2RlbC5tZXRhLnQzW2RvbWFpblN0cl1bcmVsYXRpb25TdHJdIHx8IHt9O1xuICAgICAgICBvTW9kZWwubWV0YS50M1tkb21haW5TdHJdW3JlbGF0aW9uU3RyXVtDYXRlZ29yeVN0cmluZ10gPSB7fTtcbiAgICAgICAgb01vZGVsLm1ldGEudDNbQ2F0ZWdvcnlTdHJpbmddID0gb01vZGVsLm1ldGEudDNbQ2F0ZWdvcnlTdHJpbmddIHx8IHt9O1xuICAgICAgICBvTW9kZWwubWV0YS50M1tDYXRlZ29yeVN0cmluZ11bcmV2ZXJzZVJlbGF0aW9uU3RyXSA9IG9Nb2RlbC5tZXRhLnQzW0NhdGVnb3J5U3RyaW5nXVtyZXZlcnNlUmVsYXRpb25TdHJdIHx8IHt9O1xuICAgICAgICBvTW9kZWwubWV0YS50M1tDYXRlZ29yeVN0cmluZ11bcmV2ZXJzZVJlbGF0aW9uU3RyXVtkb21haW5TdHJdID0ge307XG4gICAgfSk7XG4gICAgLy8gYWRkIGEgcHJlY2ljZSBkb21haW4gbWF0Y2hydWxlXG4gICAgaW5zZXJ0UnVsZUlmTm90UHJlc2VudChvTW9kZWwubVJ1bGVzLCB7XG4gICAgICAgIGNhdGVnb3J5OiBcImRvbWFpblwiLFxuICAgICAgICBtYXRjaGVkU3RyaW5nOiBvTWRsLmRvbWFpbixcbiAgICAgICAgdHlwZTogMCAvKiBXT1JEICovLFxuICAgICAgICB3b3JkOiBvTWRsLmRvbWFpbixcbiAgICAgICAgX3Jhbmtpbmc6IDAuOTVcbiAgICB9LCBvTW9kZWwuc2VlblJ1bGVzKTtcbiAgICAvLyBleHRyYWN0IHRvb2xzIGFuIGFkZCB0byB0b29sczpcbiAgICBvTW9kZWwudG9vbHMuZmlsdGVyKGZ1bmN0aW9uIChvRW50cnkpIHtcbiAgICAgICAgaWYgKG9FbnRyeS5uYW1lID09PSAob01kbC50b29sICYmIG9NZGwudG9vbC5uYW1lKSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJUb29sIFwiICsgb01kbC50b29sLm5hbWUgKyBcIiBhbHJlYWR5IHByZXNlbnQgd2hlbiBsb2FkaW5nIFwiICsgc01vZGVsTmFtZSk7XG4gICAgICAgICAgICAvL3Rocm93IG5ldyBFcnJvcignRG9tYWluIGFscmVhZHkgbG9hZGVkPycpO1xuICAgICAgICAgICAgcHJvY2Vzcy5leGl0KC0xKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIC8vIGFkZCB0aGUgdG9vbCBuYW1lIGFzIHJ1bGUgdW5sZXNzIGhpZGRlblxuICAgIGlmICghb01kbC50b29saGlkZGVuICYmIG9NZGwudG9vbCAmJiBvTWRsLnRvb2wubmFtZSkge1xuICAgICAgICBpbnNlcnRSdWxlSWZOb3RQcmVzZW50KG9Nb2RlbC5tUnVsZXMsIHtcbiAgICAgICAgICAgIGNhdGVnb3J5OiBcInRvb2xcIixcbiAgICAgICAgICAgIG1hdGNoZWRTdHJpbmc6IG9NZGwudG9vbC5uYW1lLFxuICAgICAgICAgICAgdHlwZTogMCAvKiBXT1JEICovLFxuICAgICAgICAgICAgd29yZDogb01kbC50b29sLm5hbWUsXG4gICAgICAgICAgICBfcmFua2luZzogMC45NVxuICAgICAgICB9LCBvTW9kZWwuc2VlblJ1bGVzKTtcbiAgICB9XG4gICAgO1xuICAgIGlmIChvTWRsLnN5bm9ueW1zICYmIG9NZGwuc3lub255bXNbXCJ0b29sXCJdKSB7XG4gICAgICAgIGFkZFN5bm9ueW1zKG9NZGwuc3lub255bXNbXCJ0b29sXCJdLCBcInRvb2xcIiwgb01kbC50b29sLm5hbWUsIG9Nb2RlbC5tUnVsZXMsIG9Nb2RlbC5zZWVuUnVsZXMpO1xuICAgIH1cbiAgICA7XG4gICAgaWYgKG9NZGwuc3lub255bXMpIHtcbiAgICAgICAgT2JqZWN0LmtleXMob01kbC5zeW5vbnltcykuZm9yRWFjaChmdW5jdGlvbiAoc3N5bmtleSkge1xuICAgICAgICAgICAgaWYgKG9NZGwuY2F0ZWdvcnkuaW5kZXhPZihzc3lua2V5KSA+PSAwICYmIHNzeW5rZXkgIT09IFwidG9vbFwiKSB7XG4gICAgICAgICAgICAgICAgYWRkU3lub255bXMob01kbC5zeW5vbnltc1tzc3lua2V5XSwgXCJjYXRlZ29yeVwiLCBzc3lua2V5LCBvTW9kZWwubVJ1bGVzLCBvTW9kZWwuc2VlblJ1bGVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIG9Nb2RlbC5kb21haW5zLnB1c2gob01kbC5kb21haW4pO1xuICAgIGlmIChvTWRsLnRvb2wubmFtZSkge1xuICAgICAgICBvTW9kZWwudG9vbHMucHVzaChvTWRsLnRvb2wpO1xuICAgIH1cbiAgICBvTW9kZWwuY2F0ZWdvcnkgPSBvTW9kZWwuY2F0ZWdvcnkuY29uY2F0KG9NZGwuY2F0ZWdvcnkpO1xuICAgIG9Nb2RlbC5jYXRlZ29yeS5zb3J0KCk7XG4gICAgb01vZGVsLmNhdGVnb3J5ID0gb01vZGVsLmNhdGVnb3J5LmZpbHRlcihmdW5jdGlvbiAoc3RyaW5nLCBpbmRleCkge1xuICAgICAgICByZXR1cm4gb01vZGVsLmNhdGVnb3J5W2luZGV4XSAhPT0gb01vZGVsLmNhdGVnb3J5W2luZGV4ICsgMV07XG4gICAgfSk7XG4gICAgbG9hZE1vZGVsRGF0YShtb2RlbFBhdGgsIG9NZGwsIHNNb2RlbE5hbWUsIG9Nb2RlbCk7XG59IC8vIGxvYWRtb2RlbFxuZnVuY3Rpb24gc3BsaXRSdWxlcyhydWxlcykge1xuICAgIHZhciByZXMgPSB7fTtcbiAgICB2YXIgbm9uV29yZFJ1bGVzID0gW107XG4gICAgcnVsZXMuZm9yRWFjaChmdW5jdGlvbiAocnVsZSkge1xuICAgICAgICBpZiAocnVsZS50eXBlID09PSAwIC8qIFdPUkQgKi8pIHtcbiAgICAgICAgICAgIGlmICghcnVsZS5sb3dlcmNhc2V3b3JkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUnVsZSBoYXMgbm8gbWVtYmVyIGxvd2VyY2FzZXdvcmRcIiArIEpTT04uc3RyaW5naWZ5KHJ1bGUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc1tydWxlLmxvd2VyY2FzZXdvcmRdID0gcmVzW3J1bGUubG93ZXJjYXNld29yZF0gfHwgW107XG4gICAgICAgICAgICByZXNbcnVsZS5sb3dlcmNhc2V3b3JkXS5wdXNoKHJ1bGUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbm9uV29yZFJ1bGVzLnB1c2gocnVsZSk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgICB3b3JkTWFwOiByZXMsXG4gICAgICAgIG5vbldvcmRSdWxlczogbm9uV29yZFJ1bGVzLFxuICAgICAgICBhbGxSdWxlczogcnVsZXNcbiAgICB9O1xufVxuZXhwb3J0cy5zcGxpdFJ1bGVzID0gc3BsaXRSdWxlcztcbmZ1bmN0aW9uIGxvYWRNb2RlbHMobW9kZWxQYXRoKSB7XG4gICAgdmFyIG9Nb2RlbDtcbiAgICBvTW9kZWwgPSB7XG4gICAgICAgIGRvbWFpbnM6IFtdLFxuICAgICAgICB0b29sczogW10sXG4gICAgICAgIHJ1bGVzOiB1bmRlZmluZWQsXG4gICAgICAgIGNhdGVnb3J5OiBbXSxcbiAgICAgICAgb3BlcmF0b3JzOiB7fSxcbiAgICAgICAgbVJ1bGVzOiBbXSxcbiAgICAgICAgc2VlblJ1bGVzOiB7fSxcbiAgICAgICAgcmVjb3JkczogW10sXG4gICAgICAgIG1ldGE6IHsgdDM6IHt9IH1cbiAgICB9O1xuICAgIG1vZGVsUGF0aCA9IG1vZGVsUGF0aCB8fCBlbnZNb2RlbFBhdGg7XG4gICAgdmFyIHNtZGxzID0gZnMucmVhZEZpbGVTeW5jKCcuLycgKyBtb2RlbFBhdGggKyAnL21vZGVscy5qc29uJywgJ3V0Zi04Jyk7XG4gICAgdmFyIG1kbHMgPSBKU09OLnBhcnNlKFwiXCIgKyBzbWRscyk7XG4gICAgbWRscy5mb3JFYWNoKGZ1bmN0aW9uIChzTW9kZWxOYW1lKSB7XG4gICAgICAgIGxvYWRNb2RlbChtb2RlbFBhdGgsIHNNb2RlbE5hbWUsIG9Nb2RlbCk7XG4gICAgfSk7XG4gICAgLy8gYWRkIHRoZSBjYXRlZ29yaWVzIHRvIHRoZSBtb2RlbDpcbiAgICBvTW9kZWwuY2F0ZWdvcnkuZm9yRWFjaChmdW5jdGlvbiAoY2F0ZWdvcnkpIHtcbiAgICAgICAgaW5zZXJ0UnVsZUlmTm90UHJlc2VudChvTW9kZWwubVJ1bGVzLCB7XG4gICAgICAgICAgICBjYXRlZ29yeTogXCJjYXRlZ29yeVwiLFxuICAgICAgICAgICAgbWF0Y2hlZFN0cmluZzogY2F0ZWdvcnksXG4gICAgICAgICAgICB0eXBlOiAwIC8qIFdPUkQgKi8sXG4gICAgICAgICAgICB3b3JkOiBjYXRlZ29yeSxcbiAgICAgICAgICAgIGxvd2VyY2FzZXdvcmQ6IGNhdGVnb3J5LnRvTG93ZXJDYXNlKCksXG4gICAgICAgICAgICBfcmFua2luZzogMC45NVxuICAgICAgICB9LCBvTW9kZWwuc2VlblJ1bGVzKTtcbiAgICB9KTtcbiAgICAvLyBhZGQgdGhlIGRvbWFpbiBtZXRhIHJ1bGVcbiAgICBpbnNlcnRSdWxlSWZOb3RQcmVzZW50KG9Nb2RlbC5tUnVsZXMsIHtcbiAgICAgICAgY2F0ZWdvcnk6IFwibWV0YVwiLFxuICAgICAgICBtYXRjaGVkU3RyaW5nOiBcImRvbWFpblwiLFxuICAgICAgICB0eXBlOiAwIC8qIFdPUkQgKi8sXG4gICAgICAgIHdvcmQ6IFwiZG9tYWluXCIsXG4gICAgICAgIF9yYW5raW5nOiAwLjk1XG4gICAgfSwgb01vZGVsLnNlZW5SdWxlcyk7XG4gICAgLy9hZGQgYSBmaWxsZXIgcnVsZVxuICAgIHZhciBzZmlsbGVycyA9IGZzLnJlYWRGaWxlU3luYygnLi8nICsgbW9kZWxQYXRoICsgJy9maWxsZXIuanNvbicsICd1dGYtOCcpO1xuICAgIHZhciBmaWxsZXJzID0gSlNPTi5wYXJzZShzZmlsbGVycyk7XG4gICAgdmFyIHJlID0gXCJeKChcIiArIGZpbGxlcnMuam9pbihcIil8KFwiKSArIFwiKSkkXCI7XG4gICAgb01vZGVsLm1SdWxlcy5wdXNoKHtcbiAgICAgICAgY2F0ZWdvcnk6IFwiZmlsbGVyXCIsXG4gICAgICAgIHR5cGU6IDEgLyogUkVHRVhQICovLFxuICAgICAgICByZWdleHA6IG5ldyBSZWdFeHAocmUsIFwiaVwiKSxcbiAgICAgICAgbWF0Y2hlZFN0cmluZzogXCJmaWxsZXJcIixcbiAgICAgICAgX3Jhbmtpbmc6IDAuOVxuICAgIH0pO1xuICAgIC8vYWRkIG9wZXJhdG9yc1xuICAgIHZhciBzT3BlcmF0b3JzID0gZnMucmVhZEZpbGVTeW5jKCcuL3Jlc291cmNlcy9tb2RlbC9vcGVyYXRvcnMuanNvbicsICd1dGYtOCcpO1xuICAgIHZhciBvcGVyYXRvcnMgPSBKU09OLnBhcnNlKHNPcGVyYXRvcnMpO1xuICAgIE9iamVjdC5rZXlzKG9wZXJhdG9ycy5vcGVyYXRvcnMpLmZvckVhY2goZnVuY3Rpb24gKG9wZXJhdG9yKSB7XG4gICAgICAgIGlmIChJTWF0Y2guYU9wZXJhdG9yTmFtZXMuaW5kZXhPZihvcGVyYXRvcikgPCAwKSB7XG4gICAgICAgICAgICBkZWJ1Z2xvZyhcInVua25vd24gb3BlcmF0b3IgXCIgKyBvcGVyYXRvcik7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIG9wZXJhdG9yIFwiICsgb3BlcmF0b3IpO1xuICAgICAgICB9XG4gICAgICAgIG9Nb2RlbC5vcGVyYXRvcnNbb3BlcmF0b3JdID0gb3BlcmF0b3JzLm9wZXJhdG9yc1tvcGVyYXRvcl07XG4gICAgICAgIG9Nb2RlbC5vcGVyYXRvcnNbb3BlcmF0b3JdLm9wZXJhdG9yID0gb3BlcmF0b3I7XG4gICAgICAgIE9iamVjdC5mcmVlemUob01vZGVsLm9wZXJhdG9yc1tvcGVyYXRvcl0pO1xuICAgICAgICB2YXIgd29yZCA9IG9wZXJhdG9yO1xuICAgICAgICBpbnNlcnRSdWxlSWZOb3RQcmVzZW50KG9Nb2RlbC5tUnVsZXMsIHtcbiAgICAgICAgICAgIGNhdGVnb3J5OiBcIm9wZXJhdG9yXCIsXG4gICAgICAgICAgICB3b3JkOiB3b3JkLnRvTG93ZXJDYXNlKCksXG4gICAgICAgICAgICBsb3dlcmNhc2V3b3JkOiB3b3JkLnRvTG93ZXJDYXNlKCksXG4gICAgICAgICAgICB0eXBlOiAwIC8qIFdPUkQgKi8sXG4gICAgICAgICAgICBtYXRjaGVkU3RyaW5nOiB3b3JkLFxuICAgICAgICAgICAgX3Jhbmtpbmc6IDAuOVxuICAgICAgICB9LCBvTW9kZWwuc2VlblJ1bGVzKTtcbiAgICAgICAgLy8gYWRkIGFsbCBzeW5vbnltc1xuICAgICAgICBpZiAob3BlcmF0b3JzLnN5bm9ueW1zW29wZXJhdG9yXSkge1xuICAgICAgICAgICAgT2JqZWN0LmtleXMob3BlcmF0b3JzLnN5bm9ueW1zW29wZXJhdG9yXSkuZm9yRWFjaChmdW5jdGlvbiAoc3lub255bSkge1xuICAgICAgICAgICAgICAgIGluc2VydFJ1bGVJZk5vdFByZXNlbnQob01vZGVsLm1SdWxlcywge1xuICAgICAgICAgICAgICAgICAgICBjYXRlZ29yeTogXCJvcGVyYXRvclwiLFxuICAgICAgICAgICAgICAgICAgICB3b3JkOiBzeW5vbnltLnRvTG93ZXJDYXNlKCksXG4gICAgICAgICAgICAgICAgICAgIGxvd2VyY2FzZXdvcmQ6IHN5bm9ueW0udG9Mb3dlckNhc2UoKSxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogMCAvKiBXT1JEICovLFxuICAgICAgICAgICAgICAgICAgICBtYXRjaGVkU3RyaW5nOiBvcGVyYXRvcixcbiAgICAgICAgICAgICAgICAgICAgX3Jhbmtpbmc6IDAuOVxuICAgICAgICAgICAgICAgIH0sIG9Nb2RlbC5zZWVuUnVsZXMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICAvKlxuICAgICAgICB9KVxuICAgICAgICAgICAge1xuICAgICAgICAgIGNhdGVnb3J5OiBcImZpbGxlclwiLFxuICAgICAgICAgIHR5cGU6IDEsXG4gICAgICAgICAgcmVnZXhwOiAvXigoc3RhcnQpfChzaG93KXwoZnJvbSl8KGluKSkkL2ksXG4gICAgICAgICAgbWF0Y2hlZFN0cmluZzogXCJmaWxsZXJcIixcbiAgICAgICAgICBfcmFua2luZzogMC45XG4gICAgICAgIH0sXG4gICAgKi9cbiAgICBvTW9kZWwubVJ1bGVzID0gb01vZGVsLm1SdWxlcy5zb3J0KElucHV0RmlsdGVyUnVsZXMuY21wTVJ1bGUpO1xuICAgIG9Nb2RlbC5ydWxlcyA9IHNwbGl0UnVsZXMob01vZGVsLm1SdWxlcyk7XG4gICAgb01vZGVsLnRvb2xzID0gb01vZGVsLnRvb2xzLnNvcnQoVG9vbHMuY21wVG9vbHMpO1xuICAgIGRlbGV0ZSBvTW9kZWwuc2VlblJ1bGVzO1xuICAgIHJldHVybiBvTW9kZWw7XG59XG5leHBvcnRzLmxvYWRNb2RlbHMgPSBsb2FkTW9kZWxzO1xudmFyIE1ldGFGID0gTWV0YS5nZXRNZXRhRmFjdG9yeSgpO1xuZnVuY3Rpb24gZ2V0T3BlcmF0b3IobWRsLCBvcGVyYXRvcikge1xuICAgIHJldHVybiBtZGwub3BlcmF0b3JzW29wZXJhdG9yXTtcbn1cbmV4cG9ydHMuZ2V0T3BlcmF0b3IgPSBnZXRPcGVyYXRvcjtcbmZ1bmN0aW9uIGdldFJlc3VsdEFzQXJyYXkobWRsLCBhLCByZWwpIHtcbiAgICBpZiAocmVsLnRvVHlwZSgpICE9PSAncmVsYXRpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImV4cGVjdCByZWxhdGlvbiBhcyAybmQgYXJnXCIpO1xuICAgIH1cbiAgICB2YXIgcmVzID0gbWRsLm1ldGEudDNbYS50b0Z1bGxTdHJpbmcoKV0gJiZcbiAgICAgICAgbWRsLm1ldGEudDNbYS50b0Z1bGxTdHJpbmcoKV1bcmVsLnRvRnVsbFN0cmluZygpXTtcbiAgICBpZiAoIXJlcykge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhyZXMpLnNvcnQoKS5tYXAoTWV0YUYucGFyc2VJTWV0YSk7XG59XG5leHBvcnRzLmdldFJlc3VsdEFzQXJyYXkgPSBnZXRSZXN1bHRBc0FycmF5O1xuZnVuY3Rpb24gZ2V0Q2F0ZWdvcmllc0ZvckRvbWFpbih0aGVNb2RlbCwgZG9tYWluKSB7XG4gICAgaWYgKHRoZU1vZGVsLmRvbWFpbnMuaW5kZXhPZihkb21haW4pIDwgMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJEb21haW4gXFxcIlwiICsgZG9tYWluICsgXCJcXFwiIG5vdCBwYXJ0IG9mIG1vZGVsXCIpO1xuICAgIH1cbiAgICB2YXIgcmVzID0gZ2V0UmVzdWx0QXNBcnJheSh0aGVNb2RlbCwgTWV0YUYuRG9tYWluKGRvbWFpbiksIE1ldGFGLlJlbGF0aW9uKE1ldGEuUkVMQVRJT05faGFzQ2F0ZWdvcnkpKTtcbiAgICByZXR1cm4gTWV0YS5nZXRTdHJpbmdBcnJheShyZXMpO1xufVxuZXhwb3J0cy5nZXRDYXRlZ29yaWVzRm9yRG9tYWluID0gZ2V0Q2F0ZWdvcmllc0ZvckRvbWFpbjtcbi8qKlxuICogUmV0dXJuIGFsbCBjYXRlZ29yaWVzIG9mIGEgZG9tYWluIHdoaWNoIGNhbiBhcHBlYXIgb24gYSB3b3JkLFxuICogdGhlc2UgYXJlIHR5cGljYWxseSB0aGUgd29yZGluZGV4IGRvbWFpbnMgKyBlbnRyaWVzIGdlbmVyYXRlZCBieSBnZW5lcmljIHJ1bGVzXG4gKlxuICogVGhlIGN1cnJlbnQgaW1wbGVtZW50YXRpb24gaXMgYSBzaW1wbGlmaWNhdGlvblxuICovXG5mdW5jdGlvbiBnZXRQb3RlbnRpYWxXb3JkQ2F0ZWdvcmllc0ZvckRvbWFpbih0aGVNb2RlbCwgZG9tYWluKSB7XG4gICAgLy8gdGhpcyBpcyBhIHNpbXBsaWZpZWQgdmVyc2lvblxuICAgIHJldHVybiBnZXRDYXRlZ29yaWVzRm9yRG9tYWluKHRoZU1vZGVsLCBkb21haW4pO1xufVxuZXhwb3J0cy5nZXRQb3RlbnRpYWxXb3JkQ2F0ZWdvcmllc0ZvckRvbWFpbiA9IGdldFBvdGVudGlhbFdvcmRDYXRlZ29yaWVzRm9yRG9tYWluO1xuZnVuY3Rpb24gZ2V0RG9tYWluc0ZvckNhdGVnb3J5KHRoZU1vZGVsLCBjYXRlZ29yeSkge1xuICAgIGlmICh0aGVNb2RlbC5jYXRlZ29yeS5pbmRleE9mKGNhdGVnb3J5KSA8IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2F0ZWdvcnkgXFxcIlwiICsgY2F0ZWdvcnkgKyBcIlxcXCIgbm90IHBhcnQgb2YgbW9kZWxcIik7XG4gICAgfVxuICAgIHZhciByZXMgPSBnZXRSZXN1bHRBc0FycmF5KHRoZU1vZGVsLCBNZXRhRi5DYXRlZ29yeShjYXRlZ29yeSksIE1ldGFGLlJlbGF0aW9uKE1ldGEuUkVMQVRJT05faXNDYXRlZ29yeU9mKSk7XG4gICAgcmV0dXJuIE1ldGEuZ2V0U3RyaW5nQXJyYXkocmVzKTtcbn1cbmV4cG9ydHMuZ2V0RG9tYWluc0ZvckNhdGVnb3J5ID0gZ2V0RG9tYWluc0ZvckNhdGVnb3J5O1xuZnVuY3Rpb24gZ2V0QWxsUmVjb3JkQ2F0ZWdvcmllc0ZvclRhcmdldENhdGVnb3J5KG1vZGVsLCBjYXRlZ29yeSwgd29yZHNvbmx5KSB7XG4gICAgdmFyIHJlcyA9IHt9O1xuICAgIC8vXG4gICAgdmFyIGZuID0gd29yZHNvbmx5ID8gZ2V0UG90ZW50aWFsV29yZENhdGVnb3JpZXNGb3JEb21haW4gOiBnZXRDYXRlZ29yaWVzRm9yRG9tYWluO1xuICAgIHZhciBkb21haW5zID0gZ2V0RG9tYWluc0ZvckNhdGVnb3J5KG1vZGVsLCBjYXRlZ29yeSk7XG4gICAgZG9tYWlucy5mb3JFYWNoKGZ1bmN0aW9uIChkb21haW4pIHtcbiAgICAgICAgZm4obW9kZWwsIGRvbWFpbikuZm9yRWFjaChmdW5jdGlvbiAod29yZGNhdCkge1xuICAgICAgICAgICAgcmVzW3dvcmRjYXRdID0gdHJ1ZTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgT2JqZWN0LmZyZWV6ZShyZXMpO1xuICAgIHJldHVybiByZXM7XG59XG5leHBvcnRzLmdldEFsbFJlY29yZENhdGVnb3JpZXNGb3JUYXJnZXRDYXRlZ29yeSA9IGdldEFsbFJlY29yZENhdGVnb3JpZXNGb3JUYXJnZXRDYXRlZ29yeTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
