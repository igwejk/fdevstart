/**
 * Functionality managing the match models
 *
 * @file
 */
"use strict";

var debug = require('debug');
var debuglog = debug('meta');
var logger = require('../utils/logger');
var loadlog = logger.logger('modelload', '');
/**
 * the model path, may be controlled via environment variable
 */
var modelPath = process.env["ABOT_MODELPATH"] || "testmodel";
var separator = " -:- ";
var validTypes = ["relation", "category", "domain"];
var AMeta = function () {
    function AMeta(type, name) {
        if (validTypes.indexOf(type) < 0) {
            throw new Error("Illegal Type " + type);
        }
        this.name = name;
        this.type = type;
    }
    AMeta.prototype.toName = function () {
        return this.name;
    };
    AMeta.prototype.toFullString = function () {
        return this.type + separator + this.name;
    };
    AMeta.prototype.toType = function () {
        return this.type;
    };
    return AMeta;
}();
exports.AMeta = AMeta;
function getStringArray(arr) {
    return arr.map(function (oMeta) {
        return oMeta.toName();
    });
}
exports.getStringArray = getStringArray;
exports.RELATION_hasCategory = "hasCategory";
exports.RELATION_isCategoryOf = "isCategoryOf";
function parseAMeta(a) {
    var r = a.split(separator);
    if (!r || r.length !== 2) {
        throw new Error("cannot parse " + a + " as Meta");
    }
    switch (r[0]) {
        case "category":
            return getMetaFactory().Category(r[1]);
        case "relation":
            return getMetaFactory().Relation(r[1]);
        case "domain":
            return getMetaFactory().Domain(r[1]);
        default:
            throw new Error("unknown meta type" + r[0]);
    }
}
function getMetaFactory() {
    return {
        Domain: function Domain(a) {
            return new AMeta("domain", a);
        },
        Category: function Category(a) {
            return new AMeta("category", a);
        },
        Relation: function Relation(a) {
            return new AMeta("relation", a);
        },
        parseIMeta: parseAMeta
    };
}
exports.getMetaFactory = getMetaFactory;
/*
export function getCategoriesForDomain(theModel : IModels, domain : string) : string[] {
    if(theModel.domains.indexOf(domain) < 0) {
        throw new Error("Domain " + domain + " not part of model");
    }
    theModel.meta.get(Meta.Domain(domain), Meta.Relation("hasCategory"));
}
*/
//# sourceMappingURL=data:application/json;base64,
