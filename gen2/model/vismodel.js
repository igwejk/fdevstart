/**
 * visualize a model and calculate some statistics
 */
"use strict";

var fs = require("fs");
var Model = require("./model");
var Util = require("../utils/utils");
var Describe = require("../match/describe");
var _ = require("lodash");
var debug = require("debug");
var debuglog = debug('vismodel.ts');
;
function calcCategoryRecord(m, category, domain) {
    var otherdomains = Model.getDomainsForCategory(m, category);
    _.pull(otherdomains, domain);
    var res = {
        otherdomains: otherdomains,
        nrDistinctValues: 0,
        nrDistinctValuesInDomain: 0,
        nrRecords: 0,
        nrRecordsInDomain: 0,
        nrTotalRecordsInDomain: 0
    };
    var values = [];
    var valuesInDomain = [];
    var nrRecordsInDomain = 0;
    var distinctValues = m.records.forEach(function (oEntry) {
        if (oEntry._domain === domain) {
            res.nrTotalRecordsInDomain += 1;
        }
        if (oEntry[category]) {
            var value = oEntry[category];
            if (oEntry._domain === domain) {
                valuesInDomain[value] = (valuesInDomain[value] || 0) + 1;
                res.nrRecordsInDomain += 1;
            }
            values[value] = (values[value] || 0) + 1;
            res.nrRecords += 1;
        }
    });
    res.nrDistinctValues = Object.keys(values).length;
    res.nrDistinctValuesInDomain = Object.keys(valuesInDomain).length;
    return res;
}
exports.calcCategoryRecord = calcCategoryRecord;
function graphDomain(domain, m) {
    // draw a model domains
    var res = "\n    digraph sdsu {\n\tsize=\"36,36\";\n   rankdir=LR\n\tnode [color=yellow, style=filled];\n    \"" + domain + "\"\n  ";
    // add all category nodes
    res += "node [shape=record, color=yellow, style=filled];\n ";
    var cats = Model.getCategoriesForDomain(m, domain);
    var categoryResults = {};
    var otherdomains = [];
    cats.forEach(function (cat) {
        var catResult = calcCategoryRecord(m, cat, domain);
        categoryResults[cat] = catResult;
        otherdomains = _.union(otherdomains, categoryResults[cat].otherDomains);
        res += "\"" + cat + "\" [label=\"{ " + cat + " | " + catResult.nrDistinctValuesInDomain + " Values in " + catResult.nrRecordsInDomain + " ";
        if (catResult.nrRecordsInDomain !== catResult.nrRecords) {
            res += "|  " + (catResult.nrDistinctValues - catResult.nrDistinctValuesInDomain) + " other values in " + (catResult.nrRecords - catResult.nrRecordsInDomain) + " other records";
        } else {
            res += " ";
        }
        res += "}\"]\n";
    });
    // calculate other domains.
    // draw "other categories"
    res += "node [color=purple, style=filled]; \n";
    otherdomains.forEach(function (otherdomain) {
        res += "\"" + otherdomain + "\" \n";
    });
    // count records in domain :
    var nrRecords = m.records.reduce(function (prev, entry) {
        return prev + (entry._domain === domain ? 1 : 0);
    }, 0);
    res += "node [shape=record]; \n";
    res += " \"record\" [label=\"{<f0> " + domain + " | " + nrRecords + "}\"] \n";
    res += " \"r_other\" [label=\"{<f0> other | " + nrRecords + "}\"] \n ";
    res += "# relation from categories to domain\n";
    cats.forEach(function (cat) {
        res += " \"" + cat + "\" -> \"" + domain + "\" \n";
    });
    res += "# relation from categories to records\n";
    cats.forEach(function (cat) {
        var rec = categoryResults[cat];
        res += " \"" + cat + "\" -> \"record\" \n";
    });
    //other domains to this
    cats.forEach(function (cat) {});
    /*
    cats fo
      digraph sdsu {
      size="36,36";
      node [color=yellow, style=filled];
      FLPD FLP "BOM Editor", "WIKIURL" "UI5 Documentation", "UI5 Example", "STARTTA"
      BCP
      node [color=grey, style=filled];
      node [fontname="Verdana", size="30,30"];
      node [color=grey, style=filled];
      graph [ fontname = "Arial",
    */
    res += "}\n";
    return res;
}
exports.graphDomain = graphDomain;
/*
    categoryDesc : theModel.full.domain[filterdomain].categories[category],
    distinct : distinct,
    delta : delta,
    presentRecords : recordCount.presentrecords,
    percPresent : percent,
    sampleValues : valuesList
  }
*/
function replaceBr(string) {
    string = string.replace(/\n/g, "\n\t\t\t\t\t\t\t\t\t\t\tbr\n\t\t\t\t\t\t\t\t\t\t\t| ");
    return string;
}
/**
 * generate a textual representation of a domain
 */
function tabDomain(domain, m) {
    // draw a model domains
    var cats = Model.getCategoriesForDomain(m, domain);
    cats = Model.sortCategoriesByImportance(m.full.domain[domain].categories || {}, cats);
    //console.log(cats.join("\n"));
    var catdesc = Describe.getCategoryStatsInDomain(cats[0], domain, m);
    var catResult = calcCategoryRecord(m, cats[0], domain);
    var domainDescr = m.full.domain[domain].description || "";
    domainDescr = replaceBr(domainDescr);
    var res = "\n\n// preset form values if we receive a userdata object //\n- user = user\n\nextends ../layout_p\n\nblock content\n\n\tnav.navbar.navbar-default.navbar-fixed-top\n\t\t.container\n\t\t\t.navbar-header\n\t\t\t\t.navbar-brand(style='bgcolor:orange;color:darkblue;font-family:Arial Black;font-size:15.118px') wosap domain " + domain + "\n\t\t\tul.nav.navbar-nav.navbar-right #{uid}\n\t\t\t\tli\n\t\t\t\t\t.navbar-btn#btn-logout.btn.btn-default(onclick=\"location.href='/home'\")\n\t\t\t\t\t\t| back to home\n\n\tp  &nbsp;\n\tp &nbsp;\n\tp\n\n\tdiv.well\n\t\th3 domain \"" + domain + "\"\n\t\t\tspan.pull-right " + catResult.nrTotalRecordsInDomain + " records\n\t\tp\n\t\tspan " + domainDescr + "\n\n\t\ttable.table.table-condensed.table-striped\n\t\t\tthead\n\t\t\t\ttr\n\t\t\t\t\tth category\n\t\t\t\t\tth(style=\"width:10%\") count\n\t\t\t\t\tth\n\t\t\t\t\t\ttable\n\t\t\t\t\t\t\ttr\n\t\t\t\t\t\t\t\ttd synonyms\n\t\t\t\t\t\t\ttr\n\t\t\t\t\t\t\t\ttd description\n\t\t\t\t\t\t\ttr\n\t\t\t\t\t\t\t\ttd example values\n\t\t\ttbody\n";
    var categoryResults = {};
    var otherdomains = [];
    var categoryMap = m.full.domain[domain].categories || {};
    cats.forEach(function (cat) {
        var catdesc = Describe.getCategoryStatsInDomain(cat, domain, m);
        //console.log(JSON.stringify(catdesc));
        var catResult = calcCategoryRecord(m, cat, domain);
        categoryResults[cat] = catResult;
        otherdomains = _.union(otherdomains, categoryResults[cat].otherDomains);
        /*
            res += `"${cat}" [label="{ ${cat} | ${catResult.nrDistinctValuesInDomain} Values in ${catResult.nrRecordsInDomain} `;
            if(catResult.nrRecordsInDomain !== catResult.nrRecords) {
              res +=  `|  ${catResult.nrDistinctValues - catResult.nrDistinctValuesInDomain} other values in ${catResult.nrRecords - catResult.nrRecordsInDomain} other records`;
            } else {
              res += ` `;
            }
            res += `}"]\n`;
        */
        //console.log(JSON.stringify(m.full.domain[domain]));
        if (m.full.domain[domain].categories[cat]) {
            var synonymsString = Util.listToCommaAnd(catdesc.categoryDesc && catdesc.categoryDesc.synonyms && catdesc.categoryDesc.synonyms || []) || "&nbsp;";
            res += "\n\t\t\ttr\n\t\t\t\t\ttd.cat_count " + cat + "\n\t\t\t\t\ttd " + catdesc.presentRecords + " distinct values in " + catdesc.percPresent + "% of records\n\t\t\t\t\ttd\n\t\t\t\t\t\ttable\n\t\t\t\t\t\t\ttr.cat_synonyms\n\t\t\t\t\t\t\t\ttd " + synonymsString + "\n\t\t\t\t\t\t\ttr.cat_description\n\t\t\t\t\t\t\t\ttd " + replaceBr(catdesc.categoryDesc && catdesc.categoryDesc.description || "") + "\n\t\t\t\t\t\t\ttr.cat_samplevalues\n\t\t\t\t\t\t\t\ttd " + replaceBr(catdesc.sampleValues) + "\n      ";
        }
    });
    var othercats = cats.length - Object.keys(m.full.domain[domain].categories).length;
    var remainingCategories = _.difference(cats, Object.keys(m.full.domain[domain].categories));
    if (othercats > 0) {
        res += "\n\t\tp   and " + othercats + " other categories\n\t\t| " + Util.listToCommaAnd(remainingCategories) + "\n       ";
    }
    /*
      // calculate other domains.
      // draw "other categories"
      res += `node [color=purple, style=filled]; \n`
      otherdomains.forEach(function(otherdomain) {
        res += `"${otherdomain}" \n`;
      });
      // count records in domain :
      var nrRecords = m.records.reduce(function(prev,entry) {
      return prev + ((entry._domain === domain) ? 1 : 0);
      },0);
      res += `node [shape=record]; \n`
      res += ` "record" [label="{<f0> ${domain} | ${nrRecords}}"] \n`;
    
      res += ` "r_other" [label="{<f0> other | ${nrRecords}}"] \n `;
    
      res += `# relation from categories to domain\n`;
      cats.forEach(function(cat) {
        res += ` "${cat}" -> "${domain}" \n`;
      })
    
    
      res += `# relation from categories to records\n`;
      cats.forEach(function(cat) {
        var rec = categoryResults[cat];
        res += ` "${cat}" -> "record" \n`;
      })
    
    
      //other domains to this
      cats.forEach(function(cat) {
    
    
      })
    */
    /*
    cats fo
      digraph sdsu {
      size="36,36";
      node [color=yellow, style=filled];
      FLPD FLP "BOM Editor", "WIKIURL" "UI5 Documentation", "UI5 Example", "STARTTA"
      BCP
      node [color=grey, style=filled];
      node [fontname="Verdana", size="30,30"];
      node [color=grey, style=filled];
      graph [ fontname = "Arial",
    */
    res += "\n\t\th3 Version\n\t\t\ta.small(href=\"/whatsnew\")\n\n\nblock scripts\n\tscript(src='/vendor/jquery-2.2.3.min.js')\n\tscript(src='/vendor/bootstrap.min.js')\n\tscript(src='/js/views/settings.js')\n";
    return res;
}
exports.tabDomain = tabDomain;
var child_process_1 = require("child_process");
function execCmd(cmd) {
    child_process_1.exec(cmd, function (error, stdout, stderr) {
        if (error) {
            console.error("exec error: " + error);
            return;
        }
        console.log("stdout: " + stdout);
        console.log("stderr: " + stderr);
    });
}
;
function visModels(m, folderOut) {
    m.domains.forEach(function (sDomain) {
        var s = graphDomain(sDomain, m);
        var fnGraph = folderOut + "/" + sDomain.replace(/ /g, '_') + ".gv";
        fs.writeFileSync(fnGraph, s);
        if (process.env.GRAPHVIZ) {
            console.log("here the file " + fnGraph);
            execCmd(process.env.GRAPHVIZ + " -Tjpeg -O " + fnGraph);
        }
    });
}
exports.visModels = visModels;
function tabModels(m, folderOut) {
    m.domains.forEach(function (sDomain) {
        var s = tabDomain(sDomain, m);
        var fnGraph = folderOut + "/" + sDomain.replace(/ /g, '_') + ".jade";
        debuglog("here the file " + fnGraph);
        fs.writeFileSync(fnGraph, s);
    });
}
exports.tabModels = tabModels;
//# sourceMappingURL=data:application/json;base64,
