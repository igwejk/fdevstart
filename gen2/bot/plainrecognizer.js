/**
 * @copyright (c) 2016 Gerd Forstmann
 * @file plainrecognizer.ts
 *
 * A recognizer parametrized by regex expressions
 */
"use strict";

var debug = require('debug');
var debuglog = debug('plainrecognizer');
var AnyObject = Object;
function recognize(sString, mRules) {
    var res = undefined;
    mRules.every(function (oRule) {
        res = matchRegularExpression(sString, oRule);
        return !res;
    });
    return res;
}
exports.recognize = recognize;
function countParenGroups(s) {
    var res = 0;
    for (var i = 0; i < s.length; ++i) {
        if (s.charAt(i) === '(') {
            ++res;
        }
    }
    return res;
}
exports.countParenGroups = countParenGroups;
/**
 * given a string, e.g.
 * "who is the <category> of <A1>",
 * @param {string} a
 * @returns {IMatch.IRule} a regexp rule
 */
function parseRuleString(a) {
    var s = "^" + a + "$";
    var argMaps = {};
    var m = undefined;
    while (m = /<([^>]+)>([?]?)/.exec(s)) {
        var cat = m[1];
        var greedy = m[2];
        var pos = 1 + countParenGroups(s.substring(0, m.index));
        if (greedy) {
            s = s.replace("<" + cat + ">?", "(.*?)");
        } else {
            s = s.replace("<" + cat + ">", "(.*)");
        }
        if (argMaps[cat]) {
            throw Error("Model error duplicate entry!");
        }
        argMaps[cat] = pos;
    }
    return {
        type: 1,
        regexp: new RegExp(s, "i"),
        argsMap: argMaps
    };
}
exports.parseRuleString = parseRuleString;
/**
 * given a string, e.g.
 * "who is the <category> of <A1>",
 * @param {string} a
 * @returns {IMatch.IRule} a regexp rule
 */
function parseRuleArray(a) {
    var s = "^" + a + "$";
    var r = a[0];
    if (typeof a[0] === "string") {
        r = new RegExp(a[0], "i");
    }
    if (!(r instanceof RegExp)) {
        throw Error("illegal state" + JSON.stringify(a));
    }
    return {
        type: 1,
        regexp: r,
        argsMap: a[1]
    };
}
exports.parseRuleArray = parseRuleArray;
function parseRule(a) {
    if (typeof a === 'string') {
        return parseRuleString(a);
    } else if (Array.isArray(a)) {
        return parseRuleArray(a);
    }
    throw new Error("unknown rule definition");
}
exports.parseRule = parseRule;
function parseRules(oJSON) {
    var res = {};
    Object.keys(oJSON).forEach(function (sKey) {
        res[sKey] = oJSON[sKey].map(function (oRule) {
            return parseRule(oRule);
        });
    });
    return res;
}
exports.parseRules = parseRules;
;
function trimValueAdjusting(value) {
    var res = { deltaStart: 0, value: value };
    var m = value.match(/^\s+/);
    if (m) {
        res.deltaStart = m[0].length;
        value = value.substr(res.deltaStart);
    }
    m = value.match(/\s+$/);
    if (m) {
        value = value.substr(0, value.length - m[0].length);
    }
    res.value = value;
    return res;
}
exports.trimValueAdjusting = trimValueAdjusting;
function extractArgsMap(s, match, argsMap) {
    if (!argsMap) {
        return [];
    }
    var result = [];
    Object.keys(argsMap).forEach(function (sKey) {
        var res = {};
        var index = argsMap[sKey];
        var value = match[index];
        if (typeof value === "string" && value.length > 0) {
            res.type = sKey;
            res.entity = value;
            res.startIndex = s.indexOf(value); // this may not be precise
            var trimAdjust = trimValueAdjusting(value);
            res.startIndex += trimAdjust.deltaStart;
            res.entity = trimAdjust.value;
            res.endIndex = res.startIndex + trimAdjust.value.length;
            //res[sKey] = value
            result.push(res);
        }
    });
    return result;
}
exports.extractArgsMap = extractArgsMap;
function matchRegularExpression(text, oRule) {
    debuglog("regexp is " + oRule.regexp.toString());
    debuglog(" text is " + text);
    var m = oRule.regexp.exec(text);
    if (!m) {
        return undefined;
    }
    var res = {};
    res.entities = extractArgsMap(text, m, oRule.argsMap);
    res.score = 0.9;
    debuglog("match " + JSON.stringify(m));
    debuglog('Found one' + JSON.stringify(res, undefined, 2));
    return res;
}
exports.matchRegularExpression = matchRegularExpression;
function trimTrailingSentenceDelimiters(text) {
    var m = /([!.;, ?]|\s)+$/.exec(text);
    if (m) {
        text = text.substr(0, text.length - m[0].length);
    }
    return text;
}
exports.trimTrailingSentenceDelimiters = trimTrailingSentenceDelimiters;
function recognizeText(text, aRules) {
    var res = undefined;
    var textStripped = trimTrailingSentenceDelimiters(text);
    aRules.every(function (oRule) {
        res = matchRegularExpression(textStripped, oRule);
        return !res;
    });
    return res;
}
exports.recognizeText = recognizeText;
var RegExpRecognizer = function () {
    function RegExpRecognizer(xRules) {
        this.oRules = xRules;
        debuglog("rules " + JSON.stringify(this.oRules));
    }
    ;
    RegExpRecognizer.prototype.recognize = function (context, callback) {
        var u = {};
        var text = context.message.text;
        var that = this;
        debuglog("rules " + JSON.stringify(this.oRules));
        var results = Object.keys(this.oRules).map(function (sKey) {
            var u = recognizeText(text, that.oRules[sKey]);
            if (u) {
                u.intent = sKey;
            }
            return u ? u : undefined;
        }).filter(function (o) {
            return !!o;
        });
        if (results.length > 1) {
            /* TODO abiguous */
            debuglog("ambiguous result for >" + text + "<" + JSON.stringify(res));
        }
        if (results.length > 0) {
            var res = results[0];
            callback(undefined, res);
            return;
        }
        debuglog('recognizing nothing');
        u.intent = "None";
        u.score = 0.1;
        var e1 = {};
        e1.startIndex = "exit ".length;
        e1.endIndex = context.message.text.length;
        e1.score = 0.1;
        u.entities = [];
        callback(undefined, u);
    };
    return RegExpRecognizer;
}();
exports.RegExpRecognizer = RegExpRecognizer; // class
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9ib3QvcGxhaW5yZWNvZ25pemVyLnRzIiwiYm90L3BsYWlucmVjb2duaXplci5qcyJdLCJuYW1lcyI6WyJkZWJ1ZyIsInJlcXVpcmUiLCJkZWJ1Z2xvZyIsIkFueU9iamVjdCIsIk9iamVjdCIsInJlY29nbml6ZSIsInNTdHJpbmciLCJtUnVsZXMiLCJyZXMiLCJ1bmRlZmluZWQiLCJldmVyeSIsIm9SdWxlIiwibWF0Y2hSZWd1bGFyRXhwcmVzc2lvbiIsImV4cG9ydHMiLCJjb3VudFBhcmVuR3JvdXBzIiwicyIsImkiLCJsZW5ndGgiLCJjaGFyQXQiLCJwYXJzZVJ1bGVTdHJpbmciLCJhIiwiYXJnTWFwcyIsIm0iLCJleGVjIiwiY2F0IiwiZ3JlZWR5IiwicG9zIiwic3Vic3RyaW5nIiwiaW5kZXgiLCJyZXBsYWNlIiwiRXJyb3IiLCJ0eXBlIiwicmVnZXhwIiwiUmVnRXhwIiwiYXJnc01hcCIsInBhcnNlUnVsZUFycmF5IiwiciIsIkpTT04iLCJzdHJpbmdpZnkiLCJwYXJzZVJ1bGUiLCJBcnJheSIsImlzQXJyYXkiLCJwYXJzZVJ1bGVzIiwib0pTT04iLCJrZXlzIiwiZm9yRWFjaCIsInNLZXkiLCJtYXAiLCJ0cmltVmFsdWVBZGp1c3RpbmciLCJ2YWx1ZSIsImRlbHRhU3RhcnQiLCJtYXRjaCIsInN1YnN0ciIsImV4dHJhY3RBcmdzTWFwIiwicmVzdWx0IiwiZW50aXR5Iiwic3RhcnRJbmRleCIsImluZGV4T2YiLCJ0cmltQWRqdXN0IiwiZW5kSW5kZXgiLCJwdXNoIiwidGV4dCIsInRvU3RyaW5nIiwiZW50aXRpZXMiLCJzY29yZSIsInRyaW1UcmFpbGluZ1NlbnRlbmNlRGVsaW1pdGVycyIsInJlY29nbml6ZVRleHQiLCJhUnVsZXMiLCJ0ZXh0U3RyaXBwZWQiLCJSZWdFeHBSZWNvZ25pemVyIiwieFJ1bGVzIiwib1J1bGVzIiwicHJvdG90eXBlIiwiY29udGV4dCIsImNhbGxiYWNrIiwidSIsIm1lc3NhZ2UiLCJ0aGF0IiwicmVzdWx0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QU1KLFVBQVVDLENBQVYsRUFBVztBQUFJLG1CQUFPLENBQUMsQ0FBQ0EsQ0FBVDtBQUFhLFNBTnhCLENBQWQ7QUFPQSxZQUFJSCxRQUFRN0QsTUFBUixHQUFpQixDQUFyQixFQUF3QjtBQUN0QjtBQUNBZixxQkFBUywyQkFBMkIyRCxJQUEzQixHQUFrQyxHQUFsQyxHQUF3Q3hCLEtBQUtDLFNBQUwsQ0FBZTlCLEdBQWYsQ0FBakQ7QUFDRDtBQUNELFlBQUlzRSxRQUFRN0QsTUFBUixHQUFpQixDQUFyQixFQUF3QjtBQUN0QixnQkFBSVQsTUFBTXNFLFFBQVEsQ0FBUixDQUFWO0FBQ0FKLHFCQUFTakUsU0FBVCxFQUFvQkQsR0FBcEI7QUFDQTtBQUNEO0FBQ0ROLGlCQUFTLHFCQUFUO0FBQ0F5RSxVQUFFSSxNQUFGLEdBQVcsTUFBWDtBQUNBSixVQUFFWCxLQUFGLEdBQVUsR0FBVjtBQUNBLFlBQUlrQixLQUFLLEVBQVQ7QUFDQUEsV0FBRzFCLFVBQUgsR0FBZ0IsUUFBUXZDLE1BQXhCO0FBQ0FpRSxXQUFHdkIsUUFBSCxHQUFjYyxRQUFRRyxPQUFSLENBQWdCZixJQUFoQixDQUFxQjVDLE1BQW5DO0FBQ0FpRSxXQUFHbEIsS0FBSCxHQUFXLEdBQVg7QUFDQVcsVUFBRVosUUFBRixHQUFhLEVBQWI7QUFDQVcsaUJBQVNqRSxTQUFULEVBQW9Ca0UsQ0FBcEI7QUFDRCxLQTlCRDtBQStCRixXQUFBTixnQkFBQTtBQXZDQSxDQUFBLEVBQUE7QUFBYXhELFFBQUF3RCxnQkFBQSxHQUFnQkEsZ0JBQWhCLEMsQ0F1Q1giLCJmaWxlIjoiYm90L3BsYWlucmVjb2duaXplci5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuLyoqXG4gKiBAY29weXJpZ2h0IChjKSAyMDE2IEdlcmQgRm9yc3RtYW5uXG4gKiBAZmlsZSBwbGFpbnJlY29nbml6ZXIudHNcbiAqXG4gKiBBIHJlY29nbml6ZXIgcGFyYW1ldHJpemVkIGJ5IHJlZ2V4IGV4cHJlc3Npb25zXG4gKi9cblxuaW1wb3J0ICogYXMgYnVpbGRlciBmcm9tICdib3RidWlsZGVyJztcbmltcG9ydCAqIGFzIElucHV0RmlsdGVyIGZyb20gJy4uL21hdGNoL2lucHV0RmlsdGVyJztcbmltcG9ydCAqIGFzIElNYXRjaCBmcm9tICcuLi9tYXRjaC9pZm1hdGNoJztcbmltcG9ydCAqIGFzIGRlYnVnIGZyb20gJ2RlYnVnJztcbmNvbnN0IGRlYnVnbG9nID0gZGVidWcoJ3BsYWlucmVjb2duaXplcicpO1xuXG5jb25zdCBBbnlPYmplY3QgPSBPYmplY3QgYXMgYW55O1xuXG5leHBvcnQgZnVuY3Rpb24gcmVjb2duaXplKHNTdHJpbmcsIG1SdWxlczogQXJyYXk8SU1hdGNoLkludGVudFJ1bGU+KSB7XG4gIHZhciByZXMgPSB1bmRlZmluZWQ7XG4gIG1SdWxlcy5ldmVyeShmdW5jdGlvbiAob1J1bGUpIHtcbiAgICByZXMgPSBtYXRjaFJlZ3VsYXJFeHByZXNzaW9uKHNTdHJpbmcsIG9SdWxlKTtcbiAgICByZXR1cm4gIXJlcztcbiAgfSlcbiAgcmV0dXJuIHJlcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvdW50UGFyZW5Hcm91cHMoczogc3RyaW5nKSB7XG4gIHZhciByZXMgPSAwO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHMubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAocy5jaGFyQXQoaSkgPT09ICcoJykge1xuICAgICAgKytyZXM7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXM7XG59XG5cbi8qKlxuICogZ2l2ZW4gYSBzdHJpbmcsIGUuZy5cbiAqIFwid2hvIGlzIHRoZSA8Y2F0ZWdvcnk+IG9mIDxBMT5cIixcbiAqIEBwYXJhbSB7c3RyaW5nfSBhXG4gKiBAcmV0dXJucyB7SU1hdGNoLklSdWxlfSBhIHJlZ2V4cCBydWxlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVJ1bGVTdHJpbmcoYTogc3RyaW5nKTogSU1hdGNoLkludGVudFJ1bGUge1xuICB2YXIgcyA9IFwiXlwiICsgYSArIFwiJFwiO1xuICB2YXIgYXJnTWFwcyA9IHt9O1xuICB2YXIgbSA9IHVuZGVmaW5lZDtcbiAgd2hpbGUgKG0gPSAvPChbXj5dKyk+KFs/XT8pLy5leGVjKHMpKSB7XG4gICAgdmFyIGNhdCA9IG1bMV07XG4gICAgdmFyIGdyZWVkeSA9IG1bMl07XG4gICAgdmFyIHBvcyA9IDEgKyBjb3VudFBhcmVuR3JvdXBzKHMuc3Vic3RyaW5nKDAsIG0uaW5kZXgpKTtcbiAgICBpZihncmVlZHkpIHtcbiAgICAgIHMgPSBzLnJlcGxhY2UoXCI8XCIgKyBjYXQgKyBcIj4/XCIsIFwiKC4qPylcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcyA9IHMucmVwbGFjZShcIjxcIiArIGNhdCArIFwiPlwiLCBcIiguKilcIik7XG4gICAgICB9XG4gICAgaWYgKGFyZ01hcHNbY2F0XSkge1xuICAgICAgdGhyb3cgRXJyb3IoXCJNb2RlbCBlcnJvciBkdXBsaWNhdGUgZW50cnkhXCIpXG4gICAgfVxuICAgIGFyZ01hcHNbY2F0XSA9IHBvcztcbiAgfVxuICByZXR1cm4ge1xuICAgIHR5cGU6IDEsXG4gICAgcmVnZXhwOiBuZXcgUmVnRXhwKHMsIFwiaVwiKSxcbiAgICBhcmdzTWFwOiBhcmdNYXBzXG4gIH07XG59XG5cblxuLyoqXG4gKiBnaXZlbiBhIHN0cmluZywgZS5nLlxuICogXCJ3aG8gaXMgdGhlIDxjYXRlZ29yeT4gb2YgPEExPlwiLFxuICogQHBhcmFtIHtzdHJpbmd9IGFcbiAqIEByZXR1cm5zIHtJTWF0Y2guSVJ1bGV9IGEgcmVnZXhwIHJ1bGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlUnVsZUFycmF5KGE6IEFycmF5PGFueT4pOiBJTWF0Y2guSW50ZW50UnVsZSB7XG4gIHZhciBzID0gXCJeXCIgKyBhICsgXCIkXCI7XG4gIHZhciByID0gYVswXTtcbiAgaWYodHlwZW9mIGFbMF0gPT09IFwic3RyaW5nXCIpIHtcbiAgICByID0gbmV3IFJlZ0V4cChhWzBdLFwiaVwiKTtcbiAgfVxuICBpZiAoIShyIGluc3RhbmNlb2YgUmVnRXhwKSkge1xuICAgIHRocm93IEVycm9yKFwiaWxsZWdhbCBzdGF0ZVwiICsgSlNPTi5zdHJpbmdpZnkoYSkpO1xuICB9XG4gIHJldHVybiB7XG4gICAgdHlwZTogMSxcbiAgICByZWdleHA6IHIsXG4gICAgYXJnc01hcDogYVsxXVxuICB9O1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVJ1bGUoYTogYW55KTogSU1hdGNoLkludGVudFJ1bGUge1xuICBpZiAodHlwZW9mIGEgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHBhcnNlUnVsZVN0cmluZyhhKTtcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGEpKSB7XG4gICAgcmV0dXJuIHBhcnNlUnVsZUFycmF5KGEpO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihcInVua25vd24gcnVsZSBkZWZpbml0aW9uXCIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VSdWxlcyhvSlNPTjogeyBba2V5OiBzdHJpbmddOiBhbnkgfSk6IHsgW2tleTogc3RyaW5nXTogQXJyYXk8SU1hdGNoLkludGVudFJ1bGU+IH0ge1xuICB2YXIgcmVzID0ge307XG4gIE9iamVjdC5rZXlzKG9KU09OKS5mb3JFYWNoKGZ1bmN0aW9uIChzS2V5KSB7XG4gICAgcmVzW3NLZXldID0gb0pTT05bc0tleV0ubWFwKGZ1bmN0aW9uIChvUnVsZSkge1xuICAgICAgcmV0dXJuIHBhcnNlUnVsZShvUnVsZSk7XG4gICAgfSlcbiAgfSk7XG4gIHJldHVybiByZXM7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gdHJpbVZhbHVlQWRqdXN0aW5nKHZhbHVlIDogc3RyaW5nKSA6IHsgZGVsdGFTdGFydCA6bnVtYmVyLCB2YWx1ZSA6IHN0cmluZ30ge1xuICB2YXIgcmVzID0geyBkZWx0YVN0YXJ0IDogMCwgdmFsdWUgOiB2YWx1ZSB9O1xuICB2YXIgbSA9IHZhbHVlLm1hdGNoKC9eXFxzKy8pO1xuICBpZihtKSB7XG4gICAgcmVzLmRlbHRhU3RhcnQgPSBtWzBdLmxlbmd0aDtcbiAgICB2YWx1ZSA9IHZhbHVlLnN1YnN0cihyZXMuZGVsdGFTdGFydCk7XG4gIH1cbiAgbSA9IHZhbHVlLm1hdGNoKC9cXHMrJC8pO1xuICBpZihtKSB7XG4gICAgdmFsdWUgPSB2YWx1ZS5zdWJzdHIoMCwgdmFsdWUubGVuZ3RoIC0gbVswXS5sZW5ndGgpO1xuICB9XG4gIHJlcy52YWx1ZSA9IHZhbHVlO1xuICByZXR1cm4gcmVzO1xuXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBleHRyYWN0QXJnc01hcChzIDogc3RyaW5nLCBtYXRjaDogQXJyYXk8c3RyaW5nPiwgYXJnc01hcDogeyBba2V5OiBzdHJpbmddOiBudW1iZXIgfSk6IEFycmF5PGJ1aWxkZXIuSUVudGl0eT4ge1xuICBpZiAoIWFyZ3NNYXApIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBPYmplY3Qua2V5cyhhcmdzTWFwKS5mb3JFYWNoKGZ1bmN0aW9uIChzS2V5KSB7XG4gICAgdmFyIHJlcyA9IHt9IGFzIGJ1aWxkZXIuSUVudGl0eTtcbiAgICB2YXIgaW5kZXggPSBhcmdzTWFwW3NLZXldO1xuICAgIHZhciB2YWx1ZSA9IG1hdGNoW2luZGV4XVxuICAgIGlmICgodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSAmJiB2YWx1ZS5sZW5ndGggPiAwKSB7XG4gICAgICByZXMudHlwZSA9IHNLZXk7XG4gICAgICByZXMuZW50aXR5ID0gdmFsdWU7XG4gICAgICByZXMuc3RhcnRJbmRleCA9IHMuaW5kZXhPZih2YWx1ZSk7IC8vIHRoaXMgbWF5IG5vdCBiZSBwcmVjaXNlXG4gICAgICB2YXIgdHJpbUFkanVzdCA9IHRyaW1WYWx1ZUFkanVzdGluZyh2YWx1ZSk7XG4gICAgICByZXMuc3RhcnRJbmRleCArPSB0cmltQWRqdXN0LmRlbHRhU3RhcnQ7XG4gICAgICByZXMuZW50aXR5ID0gdHJpbUFkanVzdC52YWx1ZTtcbiAgICAgIHJlcy5lbmRJbmRleCA9IHJlcy5zdGFydEluZGV4ICsgdHJpbUFkanVzdC52YWx1ZS5sZW5ndGg7XG4gICAgICAvL3Jlc1tzS2V5XSA9IHZhbHVlXG4gICAgICByZXN1bHQucHVzaChyZXMpO1xuICAgIH1cbiAgfVxuICApO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWF0Y2hSZWd1bGFyRXhwcmVzc2lvbih0ZXh0IDogc3RyaW5nLCBvUnVsZSA6IElNYXRjaC5JbnRlbnRSdWxlKSA6IGJ1aWxkZXIuSUludGVudFJlY29nbml6ZXJSZXN1bHQge1xuICBkZWJ1Z2xvZyhcInJlZ2V4cCBpcyBcIiArIG9SdWxlLnJlZ2V4cC50b1N0cmluZygpKTtcbiAgZGVidWdsb2coXCIgdGV4dCBpcyBcIiArIHRleHQpO1xuICB2YXIgbSA9IG9SdWxlLnJlZ2V4cC5leGVjKHRleHQpO1xuICBpZiAoIW0pIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG4gIHZhciByZXMgPSB7fSBhcyBidWlsZGVyLklJbnRlbnRSZWNvZ25pemVyUmVzdWx0O1xuICByZXMuZW50aXRpZXMgPSBleHRyYWN0QXJnc01hcCh0ZXh0LCBtLCBvUnVsZS5hcmdzTWFwKTtcbiAgcmVzLnNjb3JlID0gMC45O1xuICBkZWJ1Z2xvZyhcIm1hdGNoIFwiICsgSlNPTi5zdHJpbmdpZnkobSkpO1xuICBkZWJ1Z2xvZygnRm91bmQgb25lJyArIEpTT04uc3RyaW5naWZ5KHJlcywgdW5kZWZpbmVkLCAyKSk7XG4gIHJldHVybiByZXM7XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIHRyaW1UcmFpbGluZ1NlbnRlbmNlRGVsaW1pdGVycyh0ZXh0IDogc3RyaW5nKSA6IHN0cmluZyB7XG4gIHZhciBtID0gLyhbIS47LCA/XXxcXHMpKyQvLmV4ZWModGV4dCk7XG4gIGlmIChtKSB7XG4gICAgdGV4dCA9IHRleHQuc3Vic3RyKDAsdGV4dC5sZW5ndGgtIG1bMF0ubGVuZ3RoKTtcbiAgfVxuICByZXR1cm4gdGV4dDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlY29nbml6ZVRleHQodGV4dCA6IHN0cmluZywgYVJ1bGVzIDogQXJyYXk8SU1hdGNoLkludGVudFJ1bGU+KSA6IGJ1aWxkZXIuSUludGVudFJlY29nbml6ZXJSZXN1bHR7XG4gICAgdmFyIHJlcyA9IHVuZGVmaW5lZDtcbiAgICB2YXIgdGV4dFN0cmlwcGVkID0gdHJpbVRyYWlsaW5nU2VudGVuY2VEZWxpbWl0ZXJzKHRleHQpO1xuICAgIGFSdWxlcy5ldmVyeShmdW5jdGlvbiAob1J1bGUpIHtcbiAgICAgICAgcmVzID0gbWF0Y2hSZWd1bGFyRXhwcmVzc2lvbih0ZXh0U3RyaXBwZWQsIG9SdWxlKTtcbiAgICAgICAgcmV0dXJuICFyZXM7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlcztcbn1cblxuZXhwb3J0IGNsYXNzIFJlZ0V4cFJlY29nbml6ZXIgaW1wbGVtZW50cyBidWlsZGVyLklJbnRlbnRSZWNvZ25pemVyIHtcbiAgb1J1bGVzOiB7IFtrZXk6IHN0cmluZ106IEFycmF5PElNYXRjaC5JbnRlbnRSdWxlPiB9O1xuXG4gIGNvbnN0cnVjdG9yKHhSdWxlczogeyBba2V5OiBzdHJpbmddOiBBcnJheTxJTWF0Y2guSW50ZW50UnVsZT4gfSkge1xuICAgIHRoaXMub1J1bGVzID0geFJ1bGVzO1xuICAgIGRlYnVnbG9nKFwicnVsZXMgXCIgKyBKU09OLnN0cmluZ2lmeSh0aGlzLm9SdWxlcykpO1xuICB9O1xuXG4gIHJlY29nbml6ZShjb250ZXh0OiBidWlsZGVyLklSZWNvZ25pemVDb250ZXh0LCBjYWxsYmFjazogKGVycjogRXJyb3IsIHJlc3VsdDogYnVpbGRlci5JSW50ZW50UmVjb2duaXplclJlc3VsdCkgPT4gdm9pZCk6IHZvaWQge1xuICAgIHZhciB1ID0ge30gYXMgYnVpbGRlci5JSW50ZW50UmVjb2duaXplclJlc3VsdDtcbiAgICB2YXIgdGV4dCA9IGNvbnRleHQubWVzc2FnZS50ZXh0O1xuICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICBkZWJ1Z2xvZyhcInJ1bGVzIFwiICsgSlNPTi5zdHJpbmdpZnkodGhpcy5vUnVsZXMpKTtcbiAgICB2YXIgcmVzdWx0cyA9IE9iamVjdC5rZXlzKHRoaXMub1J1bGVzKS5tYXAoZnVuY3Rpb24gKHNLZXkpIHtcbiAgICAgIHZhciB1ID0gcmVjb2duaXplVGV4dCh0ZXh0LCB0aGF0Lm9SdWxlc1tzS2V5XSk7XG4gICAgICBpZiAodSkge1xuICAgICAgICB1LmludGVudCA9IHNLZXk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdSA/ICB1IDogdW5kZWZpbmVkO1xuICAgIH0pLmZpbHRlcihmdW5jdGlvbiAobykgeyByZXR1cm4gISFvOyB9KTtcbiAgICBpZiAocmVzdWx0cy5sZW5ndGggPiAxKSB7XG4gICAgICAvKiBUT0RPIGFiaWd1b3VzICovXG4gICAgICBkZWJ1Z2xvZyhcImFtYmlndW91cyByZXN1bHQgZm9yID5cIiArIHRleHQgKyBcIjxcIiArIEpTT04uc3RyaW5naWZ5KHJlcykpO1xuICAgIH1cbiAgICBpZiAocmVzdWx0cy5sZW5ndGggPiAwKSB7XG4gICAgICB2YXIgcmVzID0gcmVzdWx0c1swXTtcbiAgICAgIGNhbGxiYWNrKHVuZGVmaW5lZCwgcmVzKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZGVidWdsb2coJ3JlY29nbml6aW5nIG5vdGhpbmcnKTtcbiAgICB1LmludGVudCA9IFwiTm9uZVwiO1xuICAgIHUuc2NvcmUgPSAwLjE7XG4gICAgdmFyIGUxID0ge30gYXMgYnVpbGRlci5JRW50aXR5O1xuICAgIGUxLnN0YXJ0SW5kZXggPSBcImV4aXQgXCIubGVuZ3RoO1xuICAgIGUxLmVuZEluZGV4ID0gY29udGV4dC5tZXNzYWdlLnRleHQubGVuZ3RoO1xuICAgIGUxLnNjb3JlID0gMC4xO1xuICAgIHUuZW50aXRpZXMgPSBbXTtcbiAgICBjYWxsYmFjayh1bmRlZmluZWQsIHUpO1xuICB9XG59IC8vIGNsYXNzXG5cblxuXG4iLCIvKipcbiAqIEBjb3B5cmlnaHQgKGMpIDIwMTYgR2VyZCBGb3JzdG1hbm5cbiAqIEBmaWxlIHBsYWlucmVjb2duaXplci50c1xuICpcbiAqIEEgcmVjb2duaXplciBwYXJhbWV0cml6ZWQgYnkgcmVnZXggZXhwcmVzc2lvbnNcbiAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpO1xudmFyIGRlYnVnbG9nID0gZGVidWcoJ3BsYWlucmVjb2duaXplcicpO1xudmFyIEFueU9iamVjdCA9IE9iamVjdDtcbmZ1bmN0aW9uIHJlY29nbml6ZShzU3RyaW5nLCBtUnVsZXMpIHtcbiAgICB2YXIgcmVzID0gdW5kZWZpbmVkO1xuICAgIG1SdWxlcy5ldmVyeShmdW5jdGlvbiAob1J1bGUpIHtcbiAgICAgICAgcmVzID0gbWF0Y2hSZWd1bGFyRXhwcmVzc2lvbihzU3RyaW5nLCBvUnVsZSk7XG4gICAgICAgIHJldHVybiAhcmVzO1xuICAgIH0pO1xuICAgIHJldHVybiByZXM7XG59XG5leHBvcnRzLnJlY29nbml6ZSA9IHJlY29nbml6ZTtcbmZ1bmN0aW9uIGNvdW50UGFyZW5Hcm91cHMocykge1xuICAgIHZhciByZXMgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcy5sZW5ndGg7ICsraSkge1xuICAgICAgICBpZiAocy5jaGFyQXQoaSkgPT09ICcoJykge1xuICAgICAgICAgICAgKytyZXM7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cbmV4cG9ydHMuY291bnRQYXJlbkdyb3VwcyA9IGNvdW50UGFyZW5Hcm91cHM7XG4vKipcbiAqIGdpdmVuIGEgc3RyaW5nLCBlLmcuXG4gKiBcIndobyBpcyB0aGUgPGNhdGVnb3J5PiBvZiA8QTE+XCIsXG4gKiBAcGFyYW0ge3N0cmluZ30gYVxuICogQHJldHVybnMge0lNYXRjaC5JUnVsZX0gYSByZWdleHAgcnVsZVxuICovXG5mdW5jdGlvbiBwYXJzZVJ1bGVTdHJpbmcoYSkge1xuICAgIHZhciBzID0gXCJeXCIgKyBhICsgXCIkXCI7XG4gICAgdmFyIGFyZ01hcHMgPSB7fTtcbiAgICB2YXIgbSA9IHVuZGVmaW5lZDtcbiAgICB3aGlsZSAobSA9IC88KFtePl0rKT4oWz9dPykvLmV4ZWMocykpIHtcbiAgICAgICAgdmFyIGNhdCA9IG1bMV07XG4gICAgICAgIHZhciBncmVlZHkgPSBtWzJdO1xuICAgICAgICB2YXIgcG9zID0gMSArIGNvdW50UGFyZW5Hcm91cHMocy5zdWJzdHJpbmcoMCwgbS5pbmRleCkpO1xuICAgICAgICBpZiAoZ3JlZWR5KSB7XG4gICAgICAgICAgICBzID0gcy5yZXBsYWNlKFwiPFwiICsgY2F0ICsgXCI+P1wiLCBcIiguKj8pXCIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcyA9IHMucmVwbGFjZShcIjxcIiArIGNhdCArIFwiPlwiLCBcIiguKilcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFyZ01hcHNbY2F0XSkge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJNb2RlbCBlcnJvciBkdXBsaWNhdGUgZW50cnkhXCIpO1xuICAgICAgICB9XG4gICAgICAgIGFyZ01hcHNbY2F0XSA9IHBvcztcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogMSxcbiAgICAgICAgcmVnZXhwOiBuZXcgUmVnRXhwKHMsIFwiaVwiKSxcbiAgICAgICAgYXJnc01hcDogYXJnTWFwc1xuICAgIH07XG59XG5leHBvcnRzLnBhcnNlUnVsZVN0cmluZyA9IHBhcnNlUnVsZVN0cmluZztcbi8qKlxuICogZ2l2ZW4gYSBzdHJpbmcsIGUuZy5cbiAqIFwid2hvIGlzIHRoZSA8Y2F0ZWdvcnk+IG9mIDxBMT5cIixcbiAqIEBwYXJhbSB7c3RyaW5nfSBhXG4gKiBAcmV0dXJucyB7SU1hdGNoLklSdWxlfSBhIHJlZ2V4cCBydWxlXG4gKi9cbmZ1bmN0aW9uIHBhcnNlUnVsZUFycmF5KGEpIHtcbiAgICB2YXIgcyA9IFwiXlwiICsgYSArIFwiJFwiO1xuICAgIHZhciByID0gYVswXTtcbiAgICBpZiAodHlwZW9mIGFbMF0gPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgciA9IG5ldyBSZWdFeHAoYVswXSwgXCJpXCIpO1xuICAgIH1cbiAgICBpZiAoIShyIGluc3RhbmNlb2YgUmVnRXhwKSkge1xuICAgICAgICB0aHJvdyBFcnJvcihcImlsbGVnYWwgc3RhdGVcIiArIEpTT04uc3RyaW5naWZ5KGEpKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogMSxcbiAgICAgICAgcmVnZXhwOiByLFxuICAgICAgICBhcmdzTWFwOiBhWzFdXG4gICAgfTtcbn1cbmV4cG9ydHMucGFyc2VSdWxlQXJyYXkgPSBwYXJzZVJ1bGVBcnJheTtcbmZ1bmN0aW9uIHBhcnNlUnVsZShhKSB7XG4gICAgaWYgKHR5cGVvZiBhID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gcGFyc2VSdWxlU3RyaW5nKGEpO1xuICAgIH1cbiAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KGEpKSB7XG4gICAgICAgIHJldHVybiBwYXJzZVJ1bGVBcnJheShhKTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKFwidW5rbm93biBydWxlIGRlZmluaXRpb25cIik7XG59XG5leHBvcnRzLnBhcnNlUnVsZSA9IHBhcnNlUnVsZTtcbmZ1bmN0aW9uIHBhcnNlUnVsZXMob0pTT04pIHtcbiAgICB2YXIgcmVzID0ge307XG4gICAgT2JqZWN0LmtleXMob0pTT04pLmZvckVhY2goZnVuY3Rpb24gKHNLZXkpIHtcbiAgICAgICAgcmVzW3NLZXldID0gb0pTT05bc0tleV0ubWFwKGZ1bmN0aW9uIChvUnVsZSkge1xuICAgICAgICAgICAgcmV0dXJuIHBhcnNlUnVsZShvUnVsZSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiByZXM7XG59XG5leHBvcnRzLnBhcnNlUnVsZXMgPSBwYXJzZVJ1bGVzO1xuO1xuZnVuY3Rpb24gdHJpbVZhbHVlQWRqdXN0aW5nKHZhbHVlKSB7XG4gICAgdmFyIHJlcyA9IHsgZGVsdGFTdGFydDogMCwgdmFsdWU6IHZhbHVlIH07XG4gICAgdmFyIG0gPSB2YWx1ZS5tYXRjaCgvXlxccysvKTtcbiAgICBpZiAobSkge1xuICAgICAgICByZXMuZGVsdGFTdGFydCA9IG1bMF0ubGVuZ3RoO1xuICAgICAgICB2YWx1ZSA9IHZhbHVlLnN1YnN0cihyZXMuZGVsdGFTdGFydCk7XG4gICAgfVxuICAgIG0gPSB2YWx1ZS5tYXRjaCgvXFxzKyQvKTtcbiAgICBpZiAobSkge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlLnN1YnN0cigwLCB2YWx1ZS5sZW5ndGggLSBtWzBdLmxlbmd0aCk7XG4gICAgfVxuICAgIHJlcy52YWx1ZSA9IHZhbHVlO1xuICAgIHJldHVybiByZXM7XG59XG5leHBvcnRzLnRyaW1WYWx1ZUFkanVzdGluZyA9IHRyaW1WYWx1ZUFkanVzdGluZztcbmZ1bmN0aW9uIGV4dHJhY3RBcmdzTWFwKHMsIG1hdGNoLCBhcmdzTWFwKSB7XG4gICAgaWYgKCFhcmdzTWFwKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIE9iamVjdC5rZXlzKGFyZ3NNYXApLmZvckVhY2goZnVuY3Rpb24gKHNLZXkpIHtcbiAgICAgICAgdmFyIHJlcyA9IHt9O1xuICAgICAgICB2YXIgaW5kZXggPSBhcmdzTWFwW3NLZXldO1xuICAgICAgICB2YXIgdmFsdWUgPSBtYXRjaFtpbmRleF07XG4gICAgICAgIGlmICgodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSAmJiB2YWx1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICByZXMudHlwZSA9IHNLZXk7XG4gICAgICAgICAgICByZXMuZW50aXR5ID0gdmFsdWU7XG4gICAgICAgICAgICByZXMuc3RhcnRJbmRleCA9IHMuaW5kZXhPZih2YWx1ZSk7IC8vIHRoaXMgbWF5IG5vdCBiZSBwcmVjaXNlXG4gICAgICAgICAgICB2YXIgdHJpbUFkanVzdCA9IHRyaW1WYWx1ZUFkanVzdGluZyh2YWx1ZSk7XG4gICAgICAgICAgICByZXMuc3RhcnRJbmRleCArPSB0cmltQWRqdXN0LmRlbHRhU3RhcnQ7XG4gICAgICAgICAgICByZXMuZW50aXR5ID0gdHJpbUFkanVzdC52YWx1ZTtcbiAgICAgICAgICAgIHJlcy5lbmRJbmRleCA9IHJlcy5zdGFydEluZGV4ICsgdHJpbUFkanVzdC52YWx1ZS5sZW5ndGg7XG4gICAgICAgICAgICAvL3Jlc1tzS2V5XSA9IHZhbHVlXG4gICAgICAgICAgICByZXN1bHQucHVzaChyZXMpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydHMuZXh0cmFjdEFyZ3NNYXAgPSBleHRyYWN0QXJnc01hcDtcbmZ1bmN0aW9uIG1hdGNoUmVndWxhckV4cHJlc3Npb24odGV4dCwgb1J1bGUpIHtcbiAgICBkZWJ1Z2xvZyhcInJlZ2V4cCBpcyBcIiArIG9SdWxlLnJlZ2V4cC50b1N0cmluZygpKTtcbiAgICBkZWJ1Z2xvZyhcIiB0ZXh0IGlzIFwiICsgdGV4dCk7XG4gICAgdmFyIG0gPSBvUnVsZS5yZWdleHAuZXhlYyh0ZXh0KTtcbiAgICBpZiAoIW0pIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgdmFyIHJlcyA9IHt9O1xuICAgIHJlcy5lbnRpdGllcyA9IGV4dHJhY3RBcmdzTWFwKHRleHQsIG0sIG9SdWxlLmFyZ3NNYXApO1xuICAgIHJlcy5zY29yZSA9IDAuOTtcbiAgICBkZWJ1Z2xvZyhcIm1hdGNoIFwiICsgSlNPTi5zdHJpbmdpZnkobSkpO1xuICAgIGRlYnVnbG9nKCdGb3VuZCBvbmUnICsgSlNPTi5zdHJpbmdpZnkocmVzLCB1bmRlZmluZWQsIDIpKTtcbiAgICByZXR1cm4gcmVzO1xufVxuZXhwb3J0cy5tYXRjaFJlZ3VsYXJFeHByZXNzaW9uID0gbWF0Y2hSZWd1bGFyRXhwcmVzc2lvbjtcbmZ1bmN0aW9uIHRyaW1UcmFpbGluZ1NlbnRlbmNlRGVsaW1pdGVycyh0ZXh0KSB7XG4gICAgdmFyIG0gPSAvKFshLjssID9dfFxccykrJC8uZXhlYyh0ZXh0KTtcbiAgICBpZiAobSkge1xuICAgICAgICB0ZXh0ID0gdGV4dC5zdWJzdHIoMCwgdGV4dC5sZW5ndGggLSBtWzBdLmxlbmd0aCk7XG4gICAgfVxuICAgIHJldHVybiB0ZXh0O1xufVxuZXhwb3J0cy50cmltVHJhaWxpbmdTZW50ZW5jZURlbGltaXRlcnMgPSB0cmltVHJhaWxpbmdTZW50ZW5jZURlbGltaXRlcnM7XG5mdW5jdGlvbiByZWNvZ25pemVUZXh0KHRleHQsIGFSdWxlcykge1xuICAgIHZhciByZXMgPSB1bmRlZmluZWQ7XG4gICAgdmFyIHRleHRTdHJpcHBlZCA9IHRyaW1UcmFpbGluZ1NlbnRlbmNlRGVsaW1pdGVycyh0ZXh0KTtcbiAgICBhUnVsZXMuZXZlcnkoZnVuY3Rpb24gKG9SdWxlKSB7XG4gICAgICAgIHJlcyA9IG1hdGNoUmVndWxhckV4cHJlc3Npb24odGV4dFN0cmlwcGVkLCBvUnVsZSk7XG4gICAgICAgIHJldHVybiAhcmVzO1xuICAgIH0pO1xuICAgIHJldHVybiByZXM7XG59XG5leHBvcnRzLnJlY29nbml6ZVRleHQgPSByZWNvZ25pemVUZXh0O1xudmFyIFJlZ0V4cFJlY29nbml6ZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJlZ0V4cFJlY29nbml6ZXIoeFJ1bGVzKSB7XG4gICAgICAgIHRoaXMub1J1bGVzID0geFJ1bGVzO1xuICAgICAgICBkZWJ1Z2xvZyhcInJ1bGVzIFwiICsgSlNPTi5zdHJpbmdpZnkodGhpcy5vUnVsZXMpKTtcbiAgICB9XG4gICAgO1xuICAgIFJlZ0V4cFJlY29nbml6ZXIucHJvdG90eXBlLnJlY29nbml6ZSA9IGZ1bmN0aW9uIChjb250ZXh0LCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgdSA9IHt9O1xuICAgICAgICB2YXIgdGV4dCA9IGNvbnRleHQubWVzc2FnZS50ZXh0O1xuICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgIGRlYnVnbG9nKFwicnVsZXMgXCIgKyBKU09OLnN0cmluZ2lmeSh0aGlzLm9SdWxlcykpO1xuICAgICAgICB2YXIgcmVzdWx0cyA9IE9iamVjdC5rZXlzKHRoaXMub1J1bGVzKS5tYXAoZnVuY3Rpb24gKHNLZXkpIHtcbiAgICAgICAgICAgIHZhciB1ID0gcmVjb2duaXplVGV4dCh0ZXh0LCB0aGF0Lm9SdWxlc1tzS2V5XSk7XG4gICAgICAgICAgICBpZiAodSkge1xuICAgICAgICAgICAgICAgIHUuaW50ZW50ID0gc0tleTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB1ID8gdSA6IHVuZGVmaW5lZDtcbiAgICAgICAgfSkuZmlsdGVyKGZ1bmN0aW9uIChvKSB7IHJldHVybiAhIW87IH0pO1xuICAgICAgICBpZiAocmVzdWx0cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAvKiBUT0RPIGFiaWd1b3VzICovXG4gICAgICAgICAgICBkZWJ1Z2xvZyhcImFtYmlndW91cyByZXN1bHQgZm9yID5cIiArIHRleHQgKyBcIjxcIiArIEpTT04uc3RyaW5naWZ5KHJlcykpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXN1bHRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHZhciByZXMgPSByZXN1bHRzWzBdO1xuICAgICAgICAgICAgY2FsbGJhY2sodW5kZWZpbmVkLCByZXMpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGRlYnVnbG9nKCdyZWNvZ25pemluZyBub3RoaW5nJyk7XG4gICAgICAgIHUuaW50ZW50ID0gXCJOb25lXCI7XG4gICAgICAgIHUuc2NvcmUgPSAwLjE7XG4gICAgICAgIHZhciBlMSA9IHt9O1xuICAgICAgICBlMS5zdGFydEluZGV4ID0gXCJleGl0IFwiLmxlbmd0aDtcbiAgICAgICAgZTEuZW5kSW5kZXggPSBjb250ZXh0Lm1lc3NhZ2UudGV4dC5sZW5ndGg7XG4gICAgICAgIGUxLnNjb3JlID0gMC4xO1xuICAgICAgICB1LmVudGl0aWVzID0gW107XG4gICAgICAgIGNhbGxiYWNrKHVuZGVmaW5lZCwgdSk7XG4gICAgfTtcbiAgICByZXR1cm4gUmVnRXhwUmVjb2duaXplcjtcbn0oKSk7XG5leHBvcnRzLlJlZ0V4cFJlY29nbml6ZXIgPSBSZWdFeHBSZWNvZ25pemVyOyAvLyBjbGFzc1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
