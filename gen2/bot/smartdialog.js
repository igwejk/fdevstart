/**
 * The bot implementation
 *
 * Instantiate apssing a connector via
 * makeBot
 *
 */
/**
 * @file
 * @module jfseb.fdevstart.smartdialog
 * @copyright (c) 2016 Gerd Forstmann
 */
//declare module 'elizabot' { };
//declare module 'winston-pg' { };
//delcare module 'winston' {};
"use strict";

var builder = require('botbuilder');
var debug = require('debug');
var Match = require('../match/match');
var Analyze = require('../match/analyze');
var WhatIs = require('../match/whatis');
var ListAll = require('../match/listall');
var DialogLogger = require('../utils/dialoglogger');
var process = require('process');
var dburl = process.env.DATABASE_URL || "";
var pglocalurl = "postgres://joe:abcdef@localhost:5432/abot";
var dburl = process.env.DATABASE_URL || pglocalurl;
var pg = require('pg');
var o = pg;
o.defaults.ssl = true;
var dialogLogger = DialogLogger.logger("smartbot", dburl, pg);
function send(o) {
    return o;
}
;
function dialoglog(intent, session, response) {
    var sResponse;
    var sAction;
    if (typeof response === "string") {
        sAction = "";
        sResponse = response;
    } else {
        var aMessage = response;
        var iMessage = aMessage.toMessage();
        sResponse = iMessage.text;
        sAction = iMessage.entities && iMessage.entities[0] ? JSON.stringify(iMessage.entities && iMessage.entities[0]) : "";
    }
    dialogLogger({
        intent: intent,
        session: session,
        response: sResponse,
        action: sAction
    });
    session.send(response);
}
//const pgLogger = new PgLogger({
//  name: 'test-logger',
//  level: 'debug',
//  connString: 'postgres://ubuntu@localhost:5432/circle_test',
//  tableName: 'winston_logs',
//});
//winston.add(winston.transports.File, { filename: 'winston_out.log', timestamp : true });
//  winston.remove(winston.transports.Console);
//winston.add(pgLogger);
/*
const logger = new winston.Logger({
  transports: [
    new winston.transports.Console({
      color: true,
      timestamp: true,
    }),
    pgLogger,
  ]
});
*/
//pgLogger.initTable(done);
var elizabot = require('../extern/elizabot/elizabot');
//import * as elizabot from 'elizabot';
var debuglog = debug('smartdialog');
var PlainRecognizer = require('./plainrecognizer');
//var builder = require('botbuilder');
var dispatcher = require('../match/dispatcher.js').dispatcher;
function getConversationId(session) {
    return session.message && session.message.address && session.message.address.conversation.id;
}
var elizabots = {};
function getElizaBot(id) {
    if (!elizabots[id]) {
        elizabots[id] = {
            access: new Date(),
            elizabot: new elizabot()
        };
    }
    elizabots[id].access = new Date();
    return elizabots[id].elizabot;
}
var newFlow = true;
var Model = require('../model/model');
var ExecServer = require('../exec/execserver');
var theModel = Model.loadModels();
if (newFlow) {} else {}
var SimpleRecognizer = function () {
    function SimpleRecognizer() {}
    SimpleRecognizer.prototype.recognize = function (context, callback) {
        var u = {};
        debuglog("recognizing " + context.message.text);
        if (context.message.text.indexOf("start") >= 0) {
            u.intent = "ShowEntity";
            u.score = 0.9;
            var e1 = {};
            e1.startIndex = "start ".length;
            e1.endIndex = context.message.text.length;
            e1.score = 0.3;
            u.entities = [e1];
            callback(undefined, u);
            return;
        }
        if (context.message.text.indexOf("train") >= 0) {
            u.intent = "train";
            u.score = 0.9;
            var e1 = {};
            e1.startIndex = "train ".length;
            e1.endIndex = context.message.text.length;
            e1.score = 0.3;
            u.entities = [e1];
            callback(undefined, u);
            return;
        }
        if (context.message.text.indexOf("learn") >= 0) {
            u.intent = "learn";
            u.score = 0.9;
            var e1 = {};
            e1.type = "trainFact";
            e1.startIndex = "train ".length;
            e1.endIndex = context.message.text.length;
            e1.score = 0.3;
            u.entities = [e1];
            callback(undefined, u);
            return;
        }
        if (context.message.text.indexOf("help") >= 0) {
            u.intent = "help";
            u.score = 0.9;
            var e1 = {};
            e1.startIndex = "train ".length;
            e1.endIndex = context.message.text.length;
            e1.score = 0.3;
            u.entities = [e1];
            callback(undefined, u);
            return;
        }
        if (context.message.text.indexOf("exit") >= 0) {
            u.intent = "exit";
            u.score = 0.9;
            var e1 = {};
            e1.startIndex = "exit ".length;
            e1.endIndex = context.message.text.length;
            e1.score = 0.3;
            u.entities = [e1];
            callback(undefined, u);
            return;
        }
        if (context.message.text.indexOf("wrong") >= 0) {
            u.intent = "wrong";
            u.score = 0.9;
            var e1 = {};
            e1.startIndex = "exit ".length;
            e1.endIndex = context.message.text.length;
            e1.score = 0.3;
            u.entities = [e1];
            callback(undefined, u);
            return;
        }
        debuglog('recognizing nothing');
        u.intent = "None";
        u.score = 0.1;
        var e1 = {};
        e1.startIndex = "exit ".length;
        e1.endIndex = context.message.text.length;
        e1.score = 0.1;
        u.entities = [];
        callback(undefined, u);
    };
    return SimpleRecognizer;
}();
var SimpleUpDownRecognizer = function () {
    function SimpleUpDownRecognizer() {}
    SimpleUpDownRecognizer.prototype.recognize = function (context, callback) {
        var u = {};
        debuglog("recognizing " + context.message.text);
        if (context.message.text.indexOf("down") >= 0) {
            u.intent = "intent.down";
            u.score = 0.9;
            var e1 = {};
            e1.startIndex = "start ".length;
            e1.endIndex = context.message.text.length;
            e1.score = 0.3;
            u.entities = [e1];
            callback(undefined, u);
            return;
        }
        if (context.message.text.indexOf("up") >= 0) {
            u.intent = "intent.up";
            u.score = 0.9;
            var e1 = {};
            e1.startIndex = "up".length;
            e1.endIndex = context.message.text.length;
            e1.score = 0.3;
            u.entities = [e1];
            callback(undefined, u);
            return;
        }
        debuglog('recognizing nothing');
        u.intent = "None";
        u.score = 0.1;
        var e1 = {};
        e1.startIndex = "exit ".length;
        e1.endIndex = context.message.text.length;
        e1.score = 0.1;
        u.entities = [];
        callback(undefined, u);
    };
    return SimpleUpDownRecognizer;
}();
var AnyObject = Object;
// globalTunnel.initialize({
//  host: 'proxy.exxxample.com',
//  port: 8080
// })
// Create bot and bind to console
// var connector = new htmlconnector.HTMLConnector()
// connector.setAnswerHook(function (sAnswer) {
//  console.log('Got answer : ' + sAnswer + '\n')
// })
var bot;
// setTimeout(function () {
//   connector.processMessage('start unit test ABC ')
// }, 5000)
var fs = require('fs');
var oJSON = JSON.parse('' + fs.readFileSync('./resources/model/intents.json'));
var oRules = PlainRecognizer.parseRules(oJSON);
// var Recognizer = new (recognizer.RegExpRecognizer)(oRules);
function logQuery(session, intent, result) {
    fs.appendFile('./logs/showmequeries.txt', "\n" + JSON.stringify({
        text: session.message.text,
        timestamp: session.message.timestamp,
        intent: intent,
        res: result && result.length && Match.ToolMatch.dumpNice(result[0]) || "0",
        conversationId: session.message.address && session.message.address.conversation && session.message.address.conversation.id || "",
        userid: session.message.address && session.message.address.user && session.message.address.user.id || ""
    }), function (err, res) {
        if (err) {
            debuglog("logging failed " + err);
        }
    });
}
function logQueryWhatIs(session, intent, result) {
    fs.appendFile('./logs/showmequeries.txt', "\n" + JSON.stringify({
        text: session.message.text,
        timestamp: session.message.timestamp,
        intent: intent,
        res: result && result.length && WhatIs.dumpNice(result[0]) || "0",
        conversationId: session.message.address && session.message.address.conversation && session.message.address.conversation.id || "",
        userid: session.message.address && session.message.address.user && session.message.address.user.id || ""
    }), function (err, res) {
        if (err) {
            debuglog("logging failed " + err);
        }
    });
}
var gwords = {};
/**
 * Construct a bot
 * @param connector {Connector} the connector to use
 * HTMLConnector
 * or connector = new builder.ConsoleConnector().listen()
 */
function makeBot(connector) {
    bot = new builder.UniversalBot(connector);
    // Create LUIS recognizer that points at our model and add it as the root '/' dialog for our Cortana Bot.
    // var model = sensitive.modelurl;
    // var model = 'https://api.projectoxford.ai/luis/v2.0/apps/c413b2ef-382c-45bd-8ff0-f76d60e2a821?subscription-key=c21398b5980a4ce09f474bbfee93b892&q='
    var recognizer = new PlainRecognizer.RegExpRecognizer(oRules);
    var dialog = new builder.IntentDialog({ recognizers: [recognizer] });
    // dialog.onBegin(function(session,args) {
    // console.log("beginning ...")
    // session.dialogData.retryPrompt = args && args.retryPrompt || "I am sorry"
    // session.send("What do you want?")
    //
    // })
    var dialogUpDown = new builder.IntentDialog({ recognizers: [new SimpleUpDownRecognizer()] });
    bot.dialog('/updown', dialogUpDown);
    dialogUpDown.onBegin(function (session) {
        session.send("Hi there, updown is waiting for you");
    });
    dialogUpDown.matches('intent.up', [function (session, args, next) {
        session.dialogData.abc = args || {};
        builder.Prompts.text(session, 'you want to go up');
    }, function (session, results, next) {
        session.dialogData.abc = results.reponse;
        next();
    }, function (session, results) {
        session.endDialogWithResult({ response: session.dialogData.abc });
    }]);
    dialogUpDown.matches('intent.down', [function (session, args, next) {
        session.dialogData.abc = args || {};
        builder.Prompts.text(session, 'you want to go down!');
    }, function (session, results, next) {
        session.dialogData.abc = -1; // results.reponse;
        next();
    }, function (session, results) {
        session.send("still going down?");
    }]);
    dialogUpDown.onDefault(function (session) {
        logQuery(session, "onDefault");
        session.send("You are trapped in a dialog which only understands up and down, one of them will get you out");
        //builder.DialogAction.send('I\'m sorry I didn\'t understand. I can only show start and ring');
    });
    bot.dialog('/train', [function (session, args, next) {
        session.dialgoData.abc = args || {};
        builder.Prompts.text(session, 'Do you want to train me');
    }, function (session, results, next) {
        session.dialogData.abc = results.reponse;
    }, function (session, results) {
        session.endDialogWithResult({ response: session.DialogData.abc });
    }]);
    bot.dialog('/', dialog);
    dialog.matches('ShowMe', [function (session, args, next) {
        var isCombinedIndex = {};
        var oNewEntity;
        // expecting entity A1
        debuglog("Show Entity");
        debuglog('raw: ' + JSON.stringify(args.entities), undefined, 2);
        var a1 = builder.EntityRecognizer.findEntity(args.entities, 'A1');
        var result = Analyze.analyzeAll(a1.entity, theModel.mRules, theModel.tools, gwords);
        logQuery(session, 'ShowMe', result);
        // test.expect(3)
        //  test.deepEqual(result.weight, 120, 'correct weight');
        if (!result || result.length === 0) {
            next();
        }
        // debuglog('result : ' + JSON.stringify(result, undefined, 2));
        debuglog('best result : ' + JSON.stringify(result[0] || {}, undefined, 2));
        debuglog('top : ' + Match.ToolMatch.dumpWeightsTop(result, { top: 3 }));
        if (Analyze.isComplete(result[0])) {
            session.dialogData.result = result[0];
            //    session.send('Showing entity ...');
            next();
        } else if (Analyze.getPrompt(result[0])) {
            var prompt = Analyze.getPrompt(result[0]);
            session.dialogData.result = result[0];
            session.dialogData.prompt = prompt;
            dialoglog("ShowMe", session, send("Not enough information supplied: " + Match.ToolMatch.dumpNice(session.dialogData.result)));
            builder.Prompts.text(session, prompt.text);
        } else {
            var best = result.length ? Match.ToolMatch.dumpNice(result[0]) : "<nothing>";
            dialoglog("ShowMe", session, send('I did not understand this' + best));
        }
    }, function (session, results, next) {
        var result = session.dialogData.result;
        if (!result || result.length === 0) {
            next();
        }
        if (results.response) {
            // some prompting
            Analyze.setPrompt(session.dialogData.result, session.dialogData.prompt, results.response);
        }
        if (Analyze.isComplete(session.dialogData.result)) {
            next();
        } else if (Analyze.getPrompt(session.dialogData.result)) {
            var prompt = Analyze.getPrompt(session.dialogData.result);
            session.dialogData.prompt = prompt;
            builder.Prompts.text(session, prompt.text);
        }
    }, function (session, results, next) {
        var result = session.dialogData.result;
        if (results.response) {
            // some prompting
            Analyze.setPrompt(session.dialogData.result, session.dialogData.prompt, results.response);
        }
        if (Analyze.isComplete(session.dialogData.result)) {
            var exec = ExecServer.execTool(session.dialogData.result, theModel.records);
            var reply = new builder.Message(session).text(exec.text).addEntity(exec.action);
            // .addAttachment({ fallbackText: "I don't know", contentType: 'image/jpeg', contentUrl: "www.wombat.org" });
            dialoglog("ShowMe", session, send(reply));
        } else {
            if (session.dialogData.result) {
                dialoglog("ShowMe", session, send("Not enough information supplied: " + Match.ToolMatch.dumpNice(session.dialogData.result)));
            } else {
                dialoglog("ShowMe", session, send("I did not get what you want"));
            }
        }
    }]);
    dialog.matches('WhatIs', [function (session, args, next) {
        var isCombinedIndex = {};
        var oNewEntity;
        // expecting entity A1
        var message = session.message.text;
        debuglog("WhatIs Entities");
        debuglog('raw: ' + JSON.stringify(args.entities), undefined, 2);
        var categoryEntity = builder.EntityRecognizer.findEntity(args.entities, 'category');
        var category = categoryEntity.entity;
        var a1 = builder.EntityRecognizer.findEntity(args.entities, 'A1');
        var cat = WhatIs.analyzeCategory(category, theModel.mRules, message);
        if (!cat) {
            session.send('I don\'t know anything about "' + category + '"');
            // next();
            return;
        }
        debuglog('category identified:' + cat);
        var result = WhatIs.resolveCategory(cat, a1.entity, theModel.mRules, theModel.records);
        debuglog('whatis result:' + JSON.stringify(result));
        logQueryWhatIs(session, 'WhatIs', result);
        var indis = WhatIs.isIndiscriminateResult(result);
        if (indis) {
            session.send(indis);
            // next();
            return;
        }
        if (!result || result.length === 0) {
            dialoglog("WhatIs", session, send('I don\'t know anything about "' + cat + " (" + category + ')\" in relation to "' + a1.entity + '"'));
            // next();
            return;
        } else {
            // debuglog('result : ' + JSON.stringify(result, undefined, 2));
            debuglog('best result : ' + JSON.stringify(result[0] || {}, undefined, 2));
            debuglog('top : ' + WhatIs.dumpWeightsTop(result, { top: 3 }));
            // TODO cleansed sentence
            dialoglog("WhatIs", session, send('The ' + category + ' of ' + a1.entity + ' is ' + result[0].result + "\n")); //  + JSON.stringify(result[0]));
        }
    }]);
    dialog.matches('ListAll', [function (session, args, next) {
        var isCombinedIndex = {};
        var oNewEntity;
        // expecting entity A1
        var message = session.message.text;
        debuglog("Intent : ListAll");
        debuglog('raw: ' + JSON.stringify(args.entities), undefined, 2);
        var categoryEntity = builder.EntityRecognizer.findEntity(args.entities, 'categories');
        var category = categoryEntity.entity;
        var a1 = builder.EntityRecognizer.findEntity(args.entities, 'insth');
        if (category === "categories") {
            // do we have a filter ?
            var domain = undefined;
            if (a1 && a1.entity) {
                domain = ListAll.inferDomain(theModel, a1.entity);
            }
            if (!domain) {
                var res = theModel.category.join(";\n");
                dialoglog("ListAll", session, send("my categories are ...\n" + res));
                return;
            } else {
                var aRes = Model.getCategoriesForDomain(theModel, domain);
                var res = aRes.join(";\n");
                dialoglog("ListAll", session, send("my categories in domain \"" + domain + "\" are ...\n" + res));
                return;
            }
        }
        if (category === "domains") {
            var res = theModel.domains.join(";\n");
            session.send("my domains are ...\n" + res);
            return;
        }
        if (category === "tools") {
            var res = theModel.tools.map(function (oTool) {
                return oTool.name;
            }).join(";\n");
            dialoglog("ListAll", session, send("my tools are ...\n" + res));
            return;
        }
        var cat = WhatIs.analyzeCategory(category, theModel.mRules, message);
        if (!cat) {
            dialoglog("ListAll", session, send('I don\'t know anything about "' + category + '"'));
            // next();
            return;
        }
        debuglog('category identified:' + cat);
        if (a1 && a1.entity) {
            debuglog('got filter:' + a1.entity);
            var result1 = ListAll.listAllWithContext(cat, a1.entity, theModel.mRules, theModel.records);
            // TODO classifying the string twice is a terrible waste
            if (!result1.length) {
                debuglog('going for having');
                result1 = ListAll.listAllHavingContext(cat, a1.entity, theModel.mRules, theModel.records);
            }
            debuglog('listall result:' + JSON.stringify(result1));
            var joinresults = ListAll.joinResults(result1);
            logQueryWhatIs(session, 'ListAll', result1);
            if (joinresults.length) {
                dialoglog("ListAll", session, send("the " + category + " for " + a1.entity + " are ...\n" + joinresults.join(";\n")));
            } else {
                dialoglog("ListAll", session, send("i did not find any " + category + " for " + a1.entity + ".\n" + joinresults.join(";\n")));
            }
            return;
        } else {
            // no entity, e.g. list all countries
            //
            var result = ListAll.listAllHavingContext(cat, cat, theModel.mRules, theModel.records);
            logQueryWhatIs(session, 'ListAll', result);
            if (result.length) {
                debuglog('listall result:' + JSON.stringify(result));
                var joinresults = ListAll.joinResults(result);
                var response = "the " + category + " are ...\n" + joinresults.join(";\n");
                dialoglog("ListAll", session, send(response));
                return;
            } else {
                var response = "Found no data having \"" + cat + "\"";
                dialoglog("ListAll", session, send(response));
                return;
            }
        }
    }]);
    dialog.matches('Wrong', [function (session, args, next) {
        dialogLogger({
            session: session,
            intent: "Wrong",
            response: '<begin updown>'
        });
        session.beginDialog('/updown', session.userData.count);
    }, function (session, results, next) {
        var alarm = session.dialogData.alarm;
        session.send("back from wrong : " + JSON.stringify(results));
        next();
    }, function (session, results) {
        session.send('end of wrong');
    }]);
    dialog.matches('Exit', [function (session, args, next) {
        debuglog('exit :');
        debuglog('exit' + JSON.stringify(args.entities));
        dialogLogger({
            session: session,
            intent: "Exit",
            response: 'you are in a logic loop'
        });
        session.send("you are in a logic loop ");
    }]);
    dialog.matches('Help', [function (session, args, next) {
        debuglog('help :');
        debuglog('help');
        session.send("I know about .... <categories>>");
    }]);
    // Add intent handlers
    dialog.matches('train', [function (session, args, next) {
        debuglog('train');
        // Resolve and store any entities passed from LUIS.
        var title = builder.EntityRecognizer.findEntity(args.entities, 'builtin.alarm.title');
        var time = builder.EntityRecognizer.resolveTime(args.entities);
        var alarm = session.dialogData.alarm = {
            title: title ? title.entity : null,
            timestamp: time ? time.getTime() : null
        };
        // Prompt for title
        if (!alarm.title) {
            dialogLogger({
                session: session,
                intent: "train",
                response: 'What fact would you like to train?'
            });
            builder.Prompts.text(session, 'What fact would you like to train?');
        } else {
            next();
        }
    }, function (session, results, next) {
        var alarm = session.dialogData.alarm;
        if (results.response) {
            alarm.title = results.response;
        }
        // Prompt for time (title will be blank if the user said cancel)
        if (alarm.title && !alarm.timestamp) {
            builder.Prompts.time(session, 'What time would you like to set the alarm for?');
        } else {
            next();
        }
    }, function (session, results) {
        var alarm = session.dialogData.alarm;
        if (results.response) {
            var time = builder.EntityRecognizer.resolveTime([results.response]);
            alarm.timestamp = time ? time.getTime() : null;
        }
        // Set the alarm (if title or timestamp is blank the user said cancel)
        if (alarm.title && alarm.timestamp) {
            // Save address of who to notify and write to scheduler.
            alarm.address = session.message.address;
            //alarms[alarm.title] = alarm;
            // Send confirmation to user
            var date = new Date(alarm.timestamp);
            var isAM = date.getHours() < 12;
            session.send('Creating alarm named "%s" for %d/%d/%d %d:%02d%s', alarm.title, date.getMonth() + 1, date.getDate(), date.getFullYear(), isAM ? date.getHours() : date.getHours() - 12, date.getMinutes(), isAM ? 'am' : 'pm');
        } else {
            session.send('Ok... no problem.');
        }
    }]);
    dialog.onDefault(function (session) {
        logQuery(session, "onDefault");
        var eliza = getElizaBot(getConversationId(session));
        var reply = eliza.transform(session.message.text);
        dialoglog("eliza", session, send(reply));
        //new Eilzabot
        //session.send("I do not understand this at all");
        //builder.DialogAction.send('I\'m sorry I didn\'t understand. I can only show start and ring');
    });
    /*
    // Very simple alarm scheduler
    var alarms = {};
    setInterval(function () {
      var now = new Date().getTime();
      for (var key in alarms) {
        var alarm = alarms[key];
        if (now >= alarm.timestamp) {
          var msg = new builder.Message()
            .address(alarm.address)
            .text('Here\'s your \'%s\' alarm.', alarm.title);
          bot.send(msg);
          delete alarms[key];
        }
      }
    }, 15000);
    */
}
if (module) {
    module.exports = {
        makeBot: makeBot
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9ib3Qvc21hcnRkaWFsb2cudHMiLCJib3Qvc21hcnRkaWFsb2cuanMiXSwibmFtZXMiOlsiYnVpbGRlciIsInJlcXVpcmUiLCJkZWJ1ZyIsIk1hdGNoIiwiQW5hbHl6ZSIsIldoYXRJcyIsIkxpc3RBbGwiLCJEaWFsb2dMb2dnZXIiLCJwcm9jZXNzIiwiZGJ1cmwiLCJlbnYiLCJEQVRBQkFTRV9VUkwiLCJwZ2xvY2FsdXJsIiwicGciLCJvIiwiZGVmYXVsdHMiLCJzc2wiLCJkaWFsb2dMb2dnZXIiLCJsb2dnZXIiLCJzZW5kIiwiZGlhbG9nbG9nIiwiaW50ZW50Iiwic2Vzc2lvbiIsInJlc3BvbnNlIiwic1Jlc3BvbnNlIiwic0FjdGlvbiIsImFNZXNzYWdlIiwiaU1lc3NhZ2UiLCJ0b01lc3NhZ2UiLCJ0ZXh0IiwiZW50aXRpZXMiLCJKU09OIiwic3RyaW5naWZ5IiwiYWN0aW9uIiwiZWxpemFib3QiLCJkZWJ1Z2xvZyIsIlBsYWluUmVjb2duaXplciIsImRpc3BhdGNoZXIiLCJnZXRDb252ZXJzYXRpb25JZCIsIm1lc3NhZ2UiLCJhZGRyZXNzIiwiY29udmVyc2F0aW9uIiwiaWQiLCJlbGl6YWJvdHMiLCJnZXRFbGl6YUJvdCIsImFjY2VzcyIsIkRhdGUiLCJuZXdGbG93IiwiTW9kZWwiLCJFeGVjU2VydmVyIiwidGhlTW9kZWwiLCJsb2FkTW9kZWxzIiwiU2ltcGxlUmVjb2duaXplciIsInByb3RvdHlwZSIsInJlY29nbml6ZSIsImNvbnRleHQiLCJjYWxsYmFjayIsInUiLCJpbmRleE9mIiwic2NvcmUiLCJlMSIsInN0YXJ0SW5kZXgiLCJsZW5ndGgiLCJlbmRJbmRleCIsInVuZGVmaW5lZCIsInR5cGUiLCJTaW1wbGVVcERvd25SZWNvZ25pemVyIiwiQW55T2JqZWN0IiwiT2JqZWN0IiwiYm90IiwiZnMiLCJvSlNPTiIsInBhcnNlIiwicmVhZEZpbGVTeW5jIiwib1J1bGVzIiwicGFyc2VSdWxlcyIsImxvZ1F1ZXJ5IiwicmVzdWx0IiwiYXBwZW5kRmlsZSIsInRpbWVzdGFtcCIsInJlcyIsIlRvb2xNYXRjaCIsImR1bXBOaWNlIiwiY29udmVyc2F0aW9uSWQiLCJ1c2VyaWQiLCJ1c2VyIiwiZXJyIiwibG9nUXVlcnlXaGF0SXMiLCJnd29yZHMiLCJtYWtlQm90IiwiY29ubmVjdG9yIiwiVW5pdmVyc2FsQm90IiwicmVjb2duaXplciIsIlJlZ0V4cFJlY29nbml6ZXIiLCJkaWFsb2ciLCJJbnRlbnREaWFsb2ciLCJyZWNvZ25pemVycyIsImRpYWxvZ1VwRG93biIsIm9uQmVnaW4iLCJtYXRjaGVzIiwiYXJncyIsIm5leHQiLCJkaWFsb2dEYXRhIiwiYWJjIiwiUHJvbXB0cyIsInJlc3VsdHMiLCJyZXBvbnNlIiwiZW5kRGlhbG9nV2l0aFJlc3VsdCIsIm9uRGVmYXVsdCIsImRpYWxnb0RhdGEiLCJEaWFsb2dEYXRhIiwiaXNDb21iaW5lZEluZGV4Iiwib05ld0VudGl0eSIsImExIiwiRW50aXR5UmVjb2duaXplciIsImZpbmRFbnRpdHkiLCJhbmFseXplQWxsIiwiZW50aXR5IiwibVJ1bGVzIiwidG9vbHMiLCJkdW1wV2VpZ2h0c1RvcCIsInRvcCIsImlzQ29tcGxldGUiLCJnZXRQcm9tcHQiLCJwcm9tcHQiLCJiZXN0Iiwic2V0UHJvbXB0IiwiZXhlYyIsImV4ZWNUb29sIiwicmVjb3JkcyIsInJlcGx5IiwiTWVzc2FnZSIsImFkZEVudGl0eSIsImNhdGVnb3J5RW50aXR5IiwiY2F0ZWdvcnkiLCJjYXQiLCJhbmFseXplQ2F0ZWdvcnkiLCJyZXNvbHZlQ2F0ZWdvcnkiLCJpbmRpcyIsImlzSW5kaXNjcmltaW5hdGVSZXN1bHQiLCJkb21haW4iLCJpbmZlckRvbWFpbiIsImpvaW4iLCJhUmVzIiwiZ2V0Q2F0ZWdvcmllc0ZvckRvbWFpbiIsImRvbWFpbnMiLCJtYXAiLCJvVG9vbCIsIm5hbWUiLCJyZXN1bHQxIiwibGlzdEFsbFdpdGhDb250ZXh0IiwibGlzdEFsbEhhdmluZ0NvbnRleHQiLCJqb2lucmVzdWx0cyIsImpvaW5SZXN1bHRzIiwiYmVnaW5EaWFsb2ciLCJ1c2VyRGF0YSIsImNvdW50IiwiYWxhcm0iLCJ0aXRsZSIsInRpbWUiLCJyZXNvbHZlVGltZSIsImdldFRpbWUiLCJkYXRlIiwiaXNBTSIsImdldEhvdXJzIiwiZ2V0TW9udGgiLCJnZXREYXRlIiwiZ2V0RnVsbFllYXIiLCJnZXRNaW51dGVzIiwiZWxpemEiLCJ0cmFuc2Zvcm0iLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7OztBQU9BOzs7OztBQUtBO0FBQ0E7QUFDQTtBQ0NBOztBRENBLElBQVlBLFVBQU9DLFFBQU0sWUFBTixDQUFuQjtBQUNBLElBQVlDLFFBQUtELFFBQU0sT0FBTixDQUFqQjtBQUdBLElBQVlFLFFBQUtGLFFBQU0sZ0JBQU4sQ0FBakI7QUFFQSxJQUFZRyxVQUFPSCxRQUFNLGtCQUFOLENBQW5CO0FBRUEsSUFBWUksU0FBTUosUUFBTSxpQkFBTixDQUFsQjtBQUNBLElBQVlLLFVBQU9MLFFBQU0sa0JBQU4sQ0FBbkI7QUFFQSxJQUFZTSxlQUFZTixRQUFNLHVCQUFOLENBQXhCO0FBRUEsSUFBWU8sVUFBT1AsUUFBTSxTQUFOLENBQW5CO0FBRUEsSUFBSVEsUUFBUUQsUUFBUUUsR0FBUixDQUFZQyxZQUFaLElBQTRCLEVBQXhDO0FBRUEsSUFBSUMsYUFBYSwyQ0FBakI7QUFDQSxJQUFJSCxRQUFRRCxRQUFRRSxHQUFSLENBQVlDLFlBQVosSUFBNEJDLFVBQXhDO0FBRUEsSUFBWUMsS0FBRVosUUFBTSxJQUFOLENBQWQ7QUFDQSxJQUFJYSxJQUFJRCxFQUFSO0FBQ0FDLEVBQUVDLFFBQUYsQ0FBV0MsR0FBWCxHQUFpQixJQUFqQjtBQUNBLElBQUlDLGVBQWVWLGFBQWFXLE1BQWIsQ0FBb0IsVUFBcEIsRUFBZ0NULEtBQWhDLEVBQXVDSSxFQUF2QyxDQUFuQjtBQUdBLFNBQUFNLElBQUEsQ0FBeUNMLENBQXpDLEVBQThDO0FBQVEsV0FBT0EsQ0FBUDtBQUFXO0FBQUE7QUFDakUsU0FBQU0sU0FBQSxDQUFtQkMsTUFBbkIs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O0FBR0QiLCJmaWxlIjoiYm90L3NtYXJ0ZGlhbG9nLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUaGUgYm90IGltcGxlbWVudGF0aW9uXG4gKlxuICogSW5zdGFudGlhdGUgYXBzc2luZyBhIGNvbm5lY3RvciB2aWFcbiAqIG1ha2VCb3RcbiAqXG4gKi9cbi8qKlxuICogQGZpbGVcbiAqIEBtb2R1bGUgamZzZWIuZmRldnN0YXJ0LnNtYXJ0ZGlhbG9nXG4gKiBAY29weXJpZ2h0IChjKSAyMDE2IEdlcmQgRm9yc3RtYW5uXG4gKi9cbi8vZGVjbGFyZSBtb2R1bGUgJ2VsaXphYm90JyB7IH07XG4vL2RlY2xhcmUgbW9kdWxlICd3aW5zdG9uLXBnJyB7IH07XG4vL2RlbGNhcmUgbW9kdWxlICd3aW5zdG9uJyB7fTtcblxuaW1wb3J0ICogYXMgYnVpbGRlciBmcm9tICdib3RidWlsZGVyJztcbmltcG9ydCAqIGFzIGRlYnVnIGZyb20gJ2RlYnVnJztcblxuaW1wb3J0ICogYXMgRXhlYyBmcm9tICcuLi9leGVjL2V4ZWMnO1xuaW1wb3J0ICogYXMgTWF0Y2ggZnJvbSAnLi4vbWF0Y2gvbWF0Y2gnO1xuXG5pbXBvcnQgKiBhcyBBbmFseXplIGZyb20gJy4uL21hdGNoL2FuYWx5emUnO1xuXG5pbXBvcnQgKiBhcyBXaGF0SXMgZnJvbSAnLi4vbWF0Y2gvd2hhdGlzJztcbmltcG9ydCAqIGFzIExpc3RBbGwgZnJvbSAnLi4vbWF0Y2gvbGlzdGFsbCc7XG5cbmltcG9ydCAqIGFzIERpYWxvZ0xvZ2dlciBmcm9tICcuLi91dGlscy9kaWFsb2dsb2dnZXInO1xuXG5pbXBvcnQgKiBhcyBwcm9jZXNzIGZyb20gJ3Byb2Nlc3MnO1xuXG52YXIgZGJ1cmwgPSBwcm9jZXNzLmVudi5EQVRBQkFTRV9VUkwgfHwgXCJcIjtcblxudmFyIHBnbG9jYWx1cmwgPSBcInBvc3RncmVzOi8vam9lOmFiY2RlZkBsb2NhbGhvc3Q6NTQzMi9hYm90XCI7XG52YXIgZGJ1cmwgPSBwcm9jZXNzLmVudi5EQVRBQkFTRV9VUkwgfHwgcGdsb2NhbHVybDtcblxuaW1wb3J0ICogYXMgcGcgZnJvbSAncGcnO1xudmFyIG8gPSBwZyBhcyBhbnk7XG5vLmRlZmF1bHRzLnNzbCA9IHRydWU7XG52YXIgZGlhbG9nTG9nZ2VyID0gRGlhbG9nTG9nZ2VyLmxvZ2dlcihcInNtYXJ0Ym90XCIsIGRidXJsLCBwZyk7XG5cbnR5cGUgc3RyaW5nT3JNZXNzYWdlID0gc3RyaW5nIHwgYnVpbGRlci5NZXNzYWdlO1xuZnVuY3Rpb24gc2VuZDxUIGV4dGVuZHMgc3RyaW5nT3JNZXNzYWdlPihvIDogVCkgOiBUIHsgcmV0dXJuIG87IH07XG5mdW5jdGlvbiBkaWFsb2dsb2coaW50ZW50OiBzdHJpbmcsIHNlc3Npb24gOiBidWlsZGVyLlNlc3Npb24sIHJlc3BvbnNlIDogc3RyaW5nT3JNZXNzYWdlKSB7XG4gIHZhciBzUmVzcG9uc2UgOiBzdHJpbmc7XG4gIHZhciBzQWN0aW9uIDogc3RyaW5nO1xuICBpZiggdHlwZW9mIHJlc3BvbnNlID09PSBcInN0cmluZ1wiKSB7XG4gICAgc0FjdGlvbiA9IFwiXCI7XG4gICAgc1Jlc3BvbnNlID0gcmVzcG9uc2U7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGFNZXNzYWdlIDogYnVpbGRlci5NZXNzYWdlID0gcmVzcG9uc2U7XG4gICAgdmFyIGlNZXNzYWdlIDogYnVpbGRlci5JTWVzc2FnZSA9IGFNZXNzYWdlLnRvTWVzc2FnZSgpO1xuICAgIHNSZXNwb25zZSA9IGlNZXNzYWdlLnRleHQ7XG4gICAgc0FjdGlvbiA9IChpTWVzc2FnZS5lbnRpdGllcyAmJiBpTWVzc2FnZS5lbnRpdGllc1swXSkgPyAgKEpTT04uc3RyaW5naWZ5KGlNZXNzYWdlLmVudGl0aWVzICYmIGlNZXNzYWdlLmVudGl0aWVzWzBdKSkgOiBcIlwiO1xuICB9XG4gIGRpYWxvZ0xvZ2dlcih7XG4gICAgaW50ZW50OiBpbnRlbnQsXG4gICAgc2Vzc2lvbjogc2Vzc2lvbixcbiAgICByZXNwb25zZSA6IHNSZXNwb25zZSxcbiAgICBhY3Rpb24gOiBzQWN0aW9uXG4gIH0pO1xuICBzZXNzaW9uLnNlbmQocmVzcG9uc2UpO1xufVxuXG4vL2NvbnN0IHBnTG9nZ2VyID0gbmV3IFBnTG9nZ2VyKHtcbi8vICBuYW1lOiAndGVzdC1sb2dnZXInLFxuLy8gIGxldmVsOiAnZGVidWcnLFxuLy8gIGNvbm5TdHJpbmc6ICdwb3N0Z3JlczovL3VidW50dUBsb2NhbGhvc3Q6NTQzMi9jaXJjbGVfdGVzdCcsXG4vLyAgdGFibGVOYW1lOiAnd2luc3Rvbl9sb2dzJyxcbi8vfSk7XG5cblxuXG4vL3dpbnN0b24uYWRkKHdpbnN0b24udHJhbnNwb3J0cy5GaWxlLCB7IGZpbGVuYW1lOiAnd2luc3Rvbl9vdXQubG9nJywgdGltZXN0YW1wIDogdHJ1ZSB9KTtcbi8vICB3aW5zdG9uLnJlbW92ZSh3aW5zdG9uLnRyYW5zcG9ydHMuQ29uc29sZSk7XG4vL3dpbnN0b24uYWRkKHBnTG9nZ2VyKTtcblxuLypcbmNvbnN0IGxvZ2dlciA9IG5ldyB3aW5zdG9uLkxvZ2dlcih7XG4gIHRyYW5zcG9ydHM6IFtcbiAgICBuZXcgd2luc3Rvbi50cmFuc3BvcnRzLkNvbnNvbGUoe1xuICAgICAgY29sb3I6IHRydWUsXG4gICAgICB0aW1lc3RhbXA6IHRydWUsXG4gICAgfSksXG4gICAgcGdMb2dnZXIsXG4gIF1cbn0pO1xuKi9cbi8vcGdMb2dnZXIuaW5pdFRhYmxlKGRvbmUpO1xuXG5cbnZhciBlbGl6YWJvdCA9IHJlcXVpcmUoJy4uL2V4dGVybi9lbGl6YWJvdC9lbGl6YWJvdCcpO1xuLy9pbXBvcnQgKiBhcyBlbGl6YWJvdCBmcm9tICdlbGl6YWJvdCc7XG5cbmxldCBkZWJ1Z2xvZyA9IGRlYnVnKCdzbWFydGRpYWxvZycpO1xuaW1wb3J0ICogYXMgUGxhaW5SZWNvZ25pemVyIGZyb20gJy4vcGxhaW5yZWNvZ25pemVyJztcbi8vdmFyIGJ1aWxkZXIgPSByZXF1aXJlKCdib3RidWlsZGVyJyk7XG5cbnZhciBkaXNwYXRjaGVyID0gcmVxdWlyZSgnLi4vbWF0Y2gvZGlzcGF0Y2hlci5qcycpLmRpc3BhdGNoZXI7XG5cblxuZnVuY3Rpb24gZ2V0Q29udmVyc2F0aW9uSWQoc2Vzc2lvbjogYnVpbGRlci5TZXNzaW9uKTogc3RyaW5nIHtcbiAgcmV0dXJuIHNlc3Npb24ubWVzc2FnZSAmJlxuICAgIHNlc3Npb24ubWVzc2FnZS5hZGRyZXNzICYmXG4gICAgc2Vzc2lvbi5tZXNzYWdlLmFkZHJlc3MuY29udmVyc2F0aW9uLmlkO1xufVxuXG52YXIgZWxpemFib3RzID0ge307XG5cbmZ1bmN0aW9uIGdldEVsaXphQm90KGlkOiBzdHJpbmcpIHtcbiAgaWYgKCFlbGl6YWJvdHNbaWRdKSB7XG4gICAgZWxpemFib3RzW2lkXSA9IHtcbiAgICAgIGFjY2VzczogbmV3IERhdGUoKSxcbiAgICAgIGVsaXphYm90OiBuZXcgZWxpemFib3QoKVxuICAgIH07XG4gIH1cbiAgZWxpemFib3RzW2lkXS5hY2Nlc3MgPSBuZXcgRGF0ZSgpO1xuICByZXR1cm4gZWxpemFib3RzW2lkXS5lbGl6YWJvdDtcbn1cblxuaW1wb3J0ICogYXMgSU1hdGNoIGZyb20gJy4uL21hdGNoL2lmbWF0Y2gnO1xuaW1wb3J0ICogYXMgVG9vbHMgZnJvbSAnLi4vbWF0Y2gvdG9vbHMnO1xuXG52YXIgbmV3RmxvdyA9IHRydWU7XG5cbmltcG9ydCAqIGFzIE1vZGVsIGZyb20gJy4uL21vZGVsL21vZGVsJztcbmltcG9ydCAqIGFzIEV4ZWNTZXJ2ZXIgZnJvbSAnLi4vZXhlYy9leGVjc2VydmVyJztcblxuY29uc3QgdGhlTW9kZWwgPSBNb2RlbC5sb2FkTW9kZWxzKCk7XG5pZiAobmV3Rmxvdykge1xuXG59IGVsc2Uge1xuXG4gIC8vY29uc3QgdG9vbHMgPSBUb29scy5nZXRUb29scygpO1xuICAvL2NvbnN0IElucHV0RmlsdGVyUnVsZXMgPSByZXF1aXJlKCcuLi9tYXRjaC9pbnB1dEZpbHRlclJ1bGVzLmpzJyk7XG4gIC8vY29uc3QgbVJ1bGVzID0gSW5wdXRGaWx0ZXJSdWxlcy5nZXRNUnVsZXNTYW1wbGUoKTtcbn1cblxuXG5cbmNsYXNzIFNpbXBsZVJlY29nbml6ZXIgaW1wbGVtZW50cyBidWlsZGVyLklJbnRlbnRSZWNvZ25pemVyIHtcbiAgY29uc3RydWN0b3IoKSB7XG5cbiAgfVxuXG4gIHJlY29nbml6ZShjb250ZXh0OiBidWlsZGVyLklSZWNvZ25pemVDb250ZXh0LCBjYWxsYmFjazogKGVycjogRXJyb3IsIHJlc3VsdDogYnVpbGRlci5JSW50ZW50UmVjb2duaXplclJlc3VsdCkgPT4gdm9pZCk6IHZvaWQge1xuICAgIHZhciB1ID0ge30gYXMgYnVpbGRlci5JSW50ZW50UmVjb2duaXplclJlc3VsdDtcblxuICAgIGRlYnVnbG9nKFwicmVjb2duaXppbmcgXCIgKyBjb250ZXh0Lm1lc3NhZ2UudGV4dCk7XG4gICAgaWYgKGNvbnRleHQubWVzc2FnZS50ZXh0LmluZGV4T2YoXCJzdGFydFwiKSA+PSAwKSB7XG4gICAgICB1LmludGVudCA9IFwiU2hvd0VudGl0eVwiO1xuICAgICAgdS5zY29yZSA9IDAuOTtcbiAgICAgIHZhciBlMSA9IHt9IGFzIGJ1aWxkZXIuSUVudGl0eTtcbiAgICAgIGUxLnN0YXJ0SW5kZXggPSBcInN0YXJ0IFwiLmxlbmd0aDtcbiAgICAgIGUxLmVuZEluZGV4ID0gY29udGV4dC5tZXNzYWdlLnRleHQubGVuZ3RoO1xuICAgICAgZTEuc2NvcmUgPSAwLjM7XG4gICAgICB1LmVudGl0aWVzID0gW2UxXTtcbiAgICAgIGNhbGxiYWNrKHVuZGVmaW5lZCwgdSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGNvbnRleHQubWVzc2FnZS50ZXh0LmluZGV4T2YoXCJ0cmFpblwiKSA+PSAwKSB7XG4gICAgICB1LmludGVudCA9IFwidHJhaW5cIjtcbiAgICAgIHUuc2NvcmUgPSAwLjk7XG4gICAgICB2YXIgZTEgPSB7fSBhcyBidWlsZGVyLklFbnRpdHk7XG4gICAgICBlMS5zdGFydEluZGV4ID0gXCJ0cmFpbiBcIi5sZW5ndGg7XG4gICAgICBlMS5lbmRJbmRleCA9IGNvbnRleHQubWVzc2FnZS50ZXh0Lmxlbmd0aDtcbiAgICAgIGUxLnNjb3JlID0gMC4zO1xuICAgICAgdS5lbnRpdGllcyA9IFtlMV07XG4gICAgICBjYWxsYmFjayh1bmRlZmluZWQsIHUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoY29udGV4dC5tZXNzYWdlLnRleHQuaW5kZXhPZihcImxlYXJuXCIpID49IDApIHtcbiAgICAgIHUuaW50ZW50ID0gXCJsZWFyblwiO1xuICAgICAgdS5zY29yZSA9IDAuOTtcbiAgICAgIHZhciBlMSA9IHt9IGFzIGJ1aWxkZXIuSUVudGl0eTtcbiAgICAgIGUxLnR5cGUgPSBcInRyYWluRmFjdFwiO1xuICAgICAgZTEuc3RhcnRJbmRleCA9IFwidHJhaW4gXCIubGVuZ3RoO1xuICAgICAgZTEuZW5kSW5kZXggPSBjb250ZXh0Lm1lc3NhZ2UudGV4dC5sZW5ndGg7XG4gICAgICBlMS5zY29yZSA9IDAuMztcbiAgICAgIHUuZW50aXRpZXMgPSBbZTFdO1xuICAgICAgY2FsbGJhY2sodW5kZWZpbmVkLCB1KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGNvbnRleHQubWVzc2FnZS50ZXh0LmluZGV4T2YoXCJoZWxwXCIpID49IDApIHtcbiAgICAgIHUuaW50ZW50ID0gXCJoZWxwXCI7XG4gICAgICB1LnNjb3JlID0gMC45O1xuICAgICAgdmFyIGUxID0ge30gYXMgYnVpbGRlci5JRW50aXR5O1xuICAgICAgZTEuc3RhcnRJbmRleCA9IFwidHJhaW4gXCIubGVuZ3RoO1xuICAgICAgZTEuZW5kSW5kZXggPSBjb250ZXh0Lm1lc3NhZ2UudGV4dC5sZW5ndGg7XG4gICAgICBlMS5zY29yZSA9IDAuMztcbiAgICAgIHUuZW50aXRpZXMgPSBbZTFdO1xuICAgICAgY2FsbGJhY2sodW5kZWZpbmVkLCB1KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGNvbnRleHQubWVzc2FnZS50ZXh0LmluZGV4T2YoXCJleGl0XCIpID49IDApIHtcbiAgICAgIHUuaW50ZW50ID0gXCJleGl0XCI7XG4gICAgICB1LnNjb3JlID0gMC45O1xuICAgICAgdmFyIGUxID0ge30gYXMgYnVpbGRlci5JRW50aXR5O1xuICAgICAgZTEuc3RhcnRJbmRleCA9IFwiZXhpdCBcIi5sZW5ndGg7XG4gICAgICBlMS5lbmRJbmRleCA9IGNvbnRleHQubWVzc2FnZS50ZXh0Lmxlbmd0aDtcbiAgICAgIGUxLnNjb3JlID0gMC4zO1xuICAgICAgdS5lbnRpdGllcyA9IFtlMV07XG4gICAgICBjYWxsYmFjayh1bmRlZmluZWQsIHUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoY29udGV4dC5tZXNzYWdlLnRleHQuaW5kZXhPZihcIndyb25nXCIpID49IDApIHtcbiAgICAgIHUuaW50ZW50ID0gXCJ3cm9uZ1wiO1xuICAgICAgdS5zY29yZSA9IDAuOTtcbiAgICAgIHZhciBlMSA9IHt9IGFzIGJ1aWxkZXIuSUVudGl0eTtcbiAgICAgIGUxLnN0YXJ0SW5kZXggPSBcImV4aXQgXCIubGVuZ3RoO1xuICAgICAgZTEuZW5kSW5kZXggPSBjb250ZXh0Lm1lc3NhZ2UudGV4dC5sZW5ndGg7XG4gICAgICBlMS5zY29yZSA9IDAuMztcbiAgICAgIHUuZW50aXRpZXMgPSBbZTFdO1xuICAgICAgY2FsbGJhY2sodW5kZWZpbmVkLCB1KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZGVidWdsb2coJ3JlY29nbml6aW5nIG5vdGhpbmcnKTtcbiAgICB1LmludGVudCA9IFwiTm9uZVwiO1xuICAgIHUuc2NvcmUgPSAwLjE7XG4gICAgdmFyIGUxID0ge30gYXMgYnVpbGRlci5JRW50aXR5O1xuICAgIGUxLnN0YXJ0SW5kZXggPSBcImV4aXQgXCIubGVuZ3RoO1xuICAgIGUxLmVuZEluZGV4ID0gY29udGV4dC5tZXNzYWdlLnRleHQubGVuZ3RoO1xuICAgIGUxLnNjb3JlID0gMC4xO1xuICAgIHUuZW50aXRpZXMgPSBbXTtcbiAgICBjYWxsYmFjayh1bmRlZmluZWQsIHUpO1xuICB9XG59XG5cblxuY2xhc3MgU2ltcGxlVXBEb3duUmVjb2duaXplciBpbXBsZW1lbnRzIGJ1aWxkZXIuSUludGVudFJlY29nbml6ZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcblxuICB9XG5cbiAgcmVjb2duaXplKGNvbnRleHQ6IGJ1aWxkZXIuSVJlY29nbml6ZUNvbnRleHQsIGNhbGxiYWNrOiAoZXJyOiBFcnJvciwgcmVzdWx0OiBidWlsZGVyLklJbnRlbnRSZWNvZ25pemVyUmVzdWx0KSA9PiB2b2lkKTogdm9pZCB7XG4gICAgdmFyIHUgPSB7fSBhcyBidWlsZGVyLklJbnRlbnRSZWNvZ25pemVyUmVzdWx0O1xuXG4gICAgZGVidWdsb2coXCJyZWNvZ25pemluZyBcIiArIGNvbnRleHQubWVzc2FnZS50ZXh0KTtcbiAgICBpZiAoY29udGV4dC5tZXNzYWdlLnRleHQuaW5kZXhPZihcImRvd25cIikgPj0gMCkge1xuICAgICAgdS5pbnRlbnQgPSBcImludGVudC5kb3duXCI7XG4gICAgICB1LnNjb3JlID0gMC45O1xuICAgICAgdmFyIGUxID0ge30gYXMgYnVpbGRlci5JRW50aXR5O1xuICAgICAgZTEuc3RhcnRJbmRleCA9IFwic3RhcnQgXCIubGVuZ3RoO1xuICAgICAgZTEuZW5kSW5kZXggPSBjb250ZXh0Lm1lc3NhZ2UudGV4dC5sZW5ndGg7XG4gICAgICBlMS5zY29yZSA9IDAuMztcbiAgICAgIHUuZW50aXRpZXMgPSBbZTFdO1xuICAgICAgY2FsbGJhY2sodW5kZWZpbmVkLCB1KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGNvbnRleHQubWVzc2FnZS50ZXh0LmluZGV4T2YoXCJ1cFwiKSA+PSAwKSB7XG4gICAgICB1LmludGVudCA9IFwiaW50ZW50LnVwXCI7XG4gICAgICB1LnNjb3JlID0gMC45O1xuICAgICAgdmFyIGUxID0ge30gYXMgYnVpbGRlci5JRW50aXR5O1xuICAgICAgZTEuc3RhcnRJbmRleCA9IFwidXBcIi5sZW5ndGg7XG4gICAgICBlMS5lbmRJbmRleCA9IGNvbnRleHQubWVzc2FnZS50ZXh0Lmxlbmd0aDtcbiAgICAgIGUxLnNjb3JlID0gMC4zO1xuICAgICAgdS5lbnRpdGllcyA9IFtlMV07XG4gICAgICBjYWxsYmFjayh1bmRlZmluZWQsIHUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkZWJ1Z2xvZygncmVjb2duaXppbmcgbm90aGluZycpO1xuICAgIHUuaW50ZW50ID0gXCJOb25lXCI7XG4gICAgdS5zY29yZSA9IDAuMTtcbiAgICB2YXIgZTEgPSB7fSBhcyBidWlsZGVyLklFbnRpdHk7XG4gICAgZTEuc3RhcnRJbmRleCA9IFwiZXhpdCBcIi5sZW5ndGg7XG4gICAgZTEuZW5kSW5kZXggPSBjb250ZXh0Lm1lc3NhZ2UudGV4dC5sZW5ndGg7XG4gICAgZTEuc2NvcmUgPSAwLjE7XG4gICAgdS5lbnRpdGllcyA9IFtdO1xuICAgIGNhbGxiYWNrKHVuZGVmaW5lZCwgdSk7XG4gIH1cbn1cblxuY29uc3QgQW55T2JqZWN0ID0gT2JqZWN0IGFzIGFueTtcbi8vIGdsb2JhbFR1bm5lbC5pbml0aWFsaXplKHtcbi8vICBob3N0OiAncHJveHkuZXh4eGFtcGxlLmNvbScsXG4vLyAgcG9ydDogODA4MFxuLy8gfSlcblxuLy8gQ3JlYXRlIGJvdCBhbmQgYmluZCB0byBjb25zb2xlXG4vLyB2YXIgY29ubmVjdG9yID0gbmV3IGh0bWxjb25uZWN0b3IuSFRNTENvbm5lY3RvcigpXG5cbi8vIGNvbm5lY3Rvci5zZXRBbnN3ZXJIb29rKGZ1bmN0aW9uIChzQW5zd2VyKSB7XG4vLyAgY29uc29sZS5sb2coJ0dvdCBhbnN3ZXIgOiAnICsgc0Fuc3dlciArICdcXG4nKVxuLy8gfSlcblxudmFyIGJvdDtcbi8vIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuLy8gICBjb25uZWN0b3IucHJvY2Vzc01lc3NhZ2UoJ3N0YXJ0IHVuaXQgdGVzdCBBQkMgJylcbi8vIH0sIDUwMDApXG5cbmltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzJztcblxudmFyIG9KU09OID0gSlNPTi5wYXJzZSgnJyArIGZzLnJlYWRGaWxlU3luYygnLi9yZXNvdXJjZXMvbW9kZWwvaW50ZW50cy5qc29uJykpO1xudmFyIG9SdWxlcyA9IFBsYWluUmVjb2duaXplci5wYXJzZVJ1bGVzKG9KU09OKTtcbi8vIHZhciBSZWNvZ25pemVyID0gbmV3IChyZWNvZ25pemVyLlJlZ0V4cFJlY29nbml6ZXIpKG9SdWxlcyk7XG5cblxuZnVuY3Rpb24gbG9nUXVlcnkoc2Vzc2lvbjogYnVpbGRlci5TZXNzaW9uLCBpbnRlbnQ6IHN0cmluZywgcmVzdWx0PzogQXJyYXk8SU1hdGNoLklUb29sTWF0Y2g+KSB7XG5cbiAgZnMuYXBwZW5kRmlsZSgnLi9sb2dzL3Nob3dtZXF1ZXJpZXMudHh0JywgXCJcXG5cIiArIEpTT04uc3RyaW5naWZ5KHtcbiAgICB0ZXh0OiBzZXNzaW9uLm1lc3NhZ2UudGV4dCxcbiAgICB0aW1lc3RhbXA6IHNlc3Npb24ubWVzc2FnZS50aW1lc3RhbXAsXG4gICAgaW50ZW50OiBpbnRlbnQsXG4gICAgcmVzOiByZXN1bHQgJiYgcmVzdWx0Lmxlbmd0aCAmJiBNYXRjaC5Ub29sTWF0Y2guZHVtcE5pY2UocmVzdWx0WzBdKSB8fCBcIjBcIixcbiAgICBjb252ZXJzYXRpb25JZDogc2Vzc2lvbi5tZXNzYWdlLmFkZHJlc3NcbiAgICAmJiBzZXNzaW9uLm1lc3NhZ2UuYWRkcmVzcy5jb252ZXJzYXRpb25cbiAgICAmJiBzZXNzaW9uLm1lc3NhZ2UuYWRkcmVzcy5jb252ZXJzYXRpb24uaWQgfHwgXCJcIixcbiAgICB1c2VyaWQ6IHNlc3Npb24ubWVzc2FnZS5hZGRyZXNzXG4gICAgJiYgc2Vzc2lvbi5tZXNzYWdlLmFkZHJlc3MudXNlclxuICAgICYmIHNlc3Npb24ubWVzc2FnZS5hZGRyZXNzLnVzZXIuaWQgfHwgXCJcIlxuICB9KSwgZnVuY3Rpb24gKGVyciwgcmVzKSB7XG4gICAgaWYgKGVycikge1xuICAgICAgZGVidWdsb2coXCJsb2dnaW5nIGZhaWxlZCBcIiArIGVycik7XG4gICAgfVxuICB9KTtcbn1cblxuXG5cbmZ1bmN0aW9uIGxvZ1F1ZXJ5V2hhdElzKHNlc3Npb246IGJ1aWxkZXIuU2Vzc2lvbiwgaW50ZW50OiBzdHJpbmcsIHJlc3VsdD86IEFycmF5PElNYXRjaC5JV2hhdElzQW5zd2VyPikge1xuXG4gIGZzLmFwcGVuZEZpbGUoJy4vbG9ncy9zaG93bWVxdWVyaWVzLnR4dCcsIFwiXFxuXCIgKyBKU09OLnN0cmluZ2lmeSh7XG4gICAgdGV4dDogc2Vzc2lvbi5tZXNzYWdlLnRleHQsXG4gICAgdGltZXN0YW1wOiBzZXNzaW9uLm1lc3NhZ2UudGltZXN0YW1wLFxuICAgIGludGVudDogaW50ZW50LFxuICAgIHJlczogcmVzdWx0ICYmIHJlc3VsdC5sZW5ndGggJiYgV2hhdElzLmR1bXBOaWNlKHJlc3VsdFswXSkgfHwgXCIwXCIsXG4gICAgY29udmVyc2F0aW9uSWQ6IHNlc3Npb24ubWVzc2FnZS5hZGRyZXNzXG4gICAgJiYgc2Vzc2lvbi5tZXNzYWdlLmFkZHJlc3MuY29udmVyc2F0aW9uXG4gICAgJiYgc2Vzc2lvbi5tZXNzYWdlLmFkZHJlc3MuY29udmVyc2F0aW9uLmlkIHx8IFwiXCIsXG4gICAgdXNlcmlkOiBzZXNzaW9uLm1lc3NhZ2UuYWRkcmVzc1xuICAgICYmIHNlc3Npb24ubWVzc2FnZS5hZGRyZXNzLnVzZXJcbiAgICAmJiBzZXNzaW9uLm1lc3NhZ2UuYWRkcmVzcy51c2VyLmlkIHx8IFwiXCJcbiAgfSksIGZ1bmN0aW9uIChlcnIsIHJlcykge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIGRlYnVnbG9nKFwibG9nZ2luZyBmYWlsZWQgXCIgKyBlcnIpO1xuICAgIH1cbiAgfSk7XG59XG5cbnZhciBnd29yZHMgPSB7fTtcbi8qKlxuICogQ29uc3RydWN0IGEgYm90XG4gKiBAcGFyYW0gY29ubmVjdG9yIHtDb25uZWN0b3J9IHRoZSBjb25uZWN0b3IgdG8gdXNlXG4gKiBIVE1MQ29ubmVjdG9yXG4gKiBvciBjb25uZWN0b3IgPSBuZXcgYnVpbGRlci5Db25zb2xlQ29ubmVjdG9yKCkubGlzdGVuKClcbiAqL1xuZnVuY3Rpb24gbWFrZUJvdChjb25uZWN0b3IpIHtcbiAgYm90ID0gbmV3IGJ1aWxkZXIuVW5pdmVyc2FsQm90KGNvbm5lY3Rvcik7XG5cblxuXG4gIC8vIENyZWF0ZSBMVUlTIHJlY29nbml6ZXIgdGhhdCBwb2ludHMgYXQgb3VyIG1vZGVsIGFuZCBhZGQgaXQgYXMgdGhlIHJvb3QgJy8nIGRpYWxvZyBmb3Igb3VyIENvcnRhbmEgQm90LlxuICAvLyB2YXIgbW9kZWwgPSBzZW5zaXRpdmUubW9kZWx1cmw7XG4gIC8vIHZhciBtb2RlbCA9ICdodHRwczovL2FwaS5wcm9qZWN0b3hmb3JkLmFpL2x1aXMvdjIuMC9hcHBzL2M0MTNiMmVmLTM4MmMtNDViZC04ZmYwLWY3NmQ2MGUyYTgyMT9zdWJzY3JpcHRpb24ta2V5PWMyMTM5OGI1OTgwYTRjZTA5ZjQ3NGJiZmVlOTNiODkyJnE9J1xuICB2YXIgcmVjb2duaXplciA9IG5ldyBQbGFpblJlY29nbml6ZXIuUmVnRXhwUmVjb2duaXplcihvUnVsZXMpO1xuXG4gIHZhciBkaWFsb2cgPSBuZXcgYnVpbGRlci5JbnRlbnREaWFsb2coeyByZWNvZ25pemVyczogW3JlY29nbml6ZXJdIH0pO1xuICAvLyBkaWFsb2cub25CZWdpbihmdW5jdGlvbihzZXNzaW9uLGFyZ3MpIHtcbiAgLy8gY29uc29sZS5sb2coXCJiZWdpbm5pbmcgLi4uXCIpXG4gIC8vIHNlc3Npb24uZGlhbG9nRGF0YS5yZXRyeVByb21wdCA9IGFyZ3MgJiYgYXJncy5yZXRyeVByb21wdCB8fCBcIkkgYW0gc29ycnlcIlxuICAvLyBzZXNzaW9uLnNlbmQoXCJXaGF0IGRvIHlvdSB3YW50P1wiKVxuICAvL1xuICAvLyB9KVxuXG4gIHZhciBkaWFsb2dVcERvd24gPSBuZXcgYnVpbGRlci5JbnRlbnREaWFsb2coeyByZWNvZ25pemVyczogW25ldyBTaW1wbGVVcERvd25SZWNvZ25pemVyKCldIH0pO1xuXG4gIGJvdC5kaWFsb2coJy91cGRvd24nLCBkaWFsb2dVcERvd24pO1xuICBkaWFsb2dVcERvd24ub25CZWdpbihmdW5jdGlvbiAoc2Vzc2lvbikge1xuICAgIHNlc3Npb24uc2VuZChcIkhpIHRoZXJlLCB1cGRvd24gaXMgd2FpdGluZyBmb3IgeW91XCIpO1xuICB9KVxuXG4gIGRpYWxvZ1VwRG93bi5tYXRjaGVzKCdpbnRlbnQudXAnLCBbXG4gICAgZnVuY3Rpb24gKHNlc3Npb24sIGFyZ3MsIG5leHQpIHtcbiAgICAgIHNlc3Npb24uZGlhbG9nRGF0YS5hYmMgPSBhcmdzIHx8IHt9O1xuICAgICAgYnVpbGRlci5Qcm9tcHRzLnRleHQoc2Vzc2lvbiwgJ3lvdSB3YW50IHRvIGdvIHVwJyk7XG4gICAgfSxcbiAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgcmVzdWx0cywgbmV4dCkge1xuICAgICAgc2Vzc2lvbi5kaWFsb2dEYXRhLmFiYyA9IHJlc3VsdHMucmVwb25zZTtcbiAgICAgIG5leHQoKTtcbiAgICB9LFxuICAgIGZ1bmN0aW9uIChzZXNzaW9uLCByZXN1bHRzKSB7XG4gICAgICBzZXNzaW9uLmVuZERpYWxvZ1dpdGhSZXN1bHQoeyByZXNwb25zZTogc2Vzc2lvbi5kaWFsb2dEYXRhLmFiYyB9KTtcbiAgICB9XG4gIF1cbiAgKTtcblxuICBkaWFsb2dVcERvd24ubWF0Y2hlcygnaW50ZW50LmRvd24nLCBbXG4gICAgZnVuY3Rpb24gKHNlc3Npb24sIGFyZ3MsIG5leHQpIHtcbiAgICAgIHNlc3Npb24uZGlhbG9nRGF0YS5hYmMgPSBhcmdzIHx8IHt9O1xuICAgICAgYnVpbGRlci5Qcm9tcHRzLnRleHQoc2Vzc2lvbiwgJ3lvdSB3YW50IHRvIGdvIGRvd24hJyk7XG4gICAgfSxcbiAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgcmVzdWx0cywgbmV4dCkge1xuICAgICAgc2Vzc2lvbi5kaWFsb2dEYXRhLmFiYyA9IC0xOyAvLyByZXN1bHRzLnJlcG9uc2U7XG4gICAgICBuZXh0KCk7XG4gICAgfSxcbiAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgcmVzdWx0cykge1xuICAgICAgc2Vzc2lvbi5zZW5kKFwic3RpbGwgZ29pbmcgZG93bj9cIik7XG4gICAgfVxuICBdXG4gICk7XG4gIGRpYWxvZ1VwRG93bi5vbkRlZmF1bHQoZnVuY3Rpb24gKHNlc3Npb24pIHtcbiAgICBsb2dRdWVyeShzZXNzaW9uLCBcIm9uRGVmYXVsdFwiKTtcbiAgICBzZXNzaW9uLnNlbmQoXCJZb3UgYXJlIHRyYXBwZWQgaW4gYSBkaWFsb2cgd2hpY2ggb25seSB1bmRlcnN0YW5kcyB1cCBhbmQgZG93biwgb25lIG9mIHRoZW0gd2lsbCBnZXQgeW91IG91dFwiKTtcbiAgICAvL2J1aWxkZXIuRGlhbG9nQWN0aW9uLnNlbmQoJ0lcXCdtIHNvcnJ5IEkgZGlkblxcJ3QgdW5kZXJzdGFuZC4gSSBjYW4gb25seSBzaG93IHN0YXJ0IGFuZCByaW5nJyk7XG4gIH0pO1xuXG5cbiAgYm90LmRpYWxvZygnL3RyYWluJywgW1xuICAgIGZ1bmN0aW9uIChzZXNzaW9uLCBhcmdzLCBuZXh0KSB7XG4gICAgICBzZXNzaW9uLmRpYWxnb0RhdGEuYWJjID0gYXJncyB8fCB7fTtcbiAgICAgIGJ1aWxkZXIuUHJvbXB0cy50ZXh0KHNlc3Npb24sICdEbyB5b3Ugd2FudCB0byB0cmFpbiBtZScpO1xuICAgIH0sXG4gICAgZnVuY3Rpb24gKHNlc3Npb24sIHJlc3VsdHMsIG5leHQpIHtcbiAgICAgIHNlc3Npb24uZGlhbG9nRGF0YS5hYmMgPSByZXN1bHRzLnJlcG9uc2U7XG4gICAgfSxcbiAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgcmVzdWx0cykge1xuICAgICAgc2Vzc2lvbi5lbmREaWFsb2dXaXRoUmVzdWx0KHsgcmVzcG9uc2U6IHNlc3Npb24uRGlhbG9nRGF0YS5hYmMgfSk7XG4gICAgfVxuICBdKTtcblxuXG4gIGJvdC5kaWFsb2coJy8nLCBkaWFsb2cpO1xuXG4gIGRpYWxvZy5tYXRjaGVzKCdTaG93TWUnLCBbXG4gICAgZnVuY3Rpb24gKHNlc3Npb24sIGFyZ3MsIG5leHQpIHtcbiAgICAgIHZhciBpc0NvbWJpbmVkSW5kZXggPSB7fTtcbiAgICAgIHZhciBvTmV3RW50aXR5O1xuICAgICAgLy8gZXhwZWN0aW5nIGVudGl0eSBBMVxuICAgICAgZGVidWdsb2coXCJTaG93IEVudGl0eVwiKTtcbiAgICAgIGRlYnVnbG9nKCdyYXc6ICcgKyBKU09OLnN0cmluZ2lmeShhcmdzLmVudGl0aWVzKSwgdW5kZWZpbmVkLCAyKTtcbiAgICAgIHZhciBhMSA9IGJ1aWxkZXIuRW50aXR5UmVjb2duaXplci5maW5kRW50aXR5KGFyZ3MuZW50aXRpZXMsICdBMScpO1xuICAgICAgY29uc3QgcmVzdWx0ID0gQW5hbHl6ZS5hbmFseXplQWxsKGExLmVudGl0eSxcbiAgICAgICAgdGhlTW9kZWwubVJ1bGVzLCB0aGVNb2RlbC50b29scywgZ3dvcmRzKTtcbiAgICAgIGxvZ1F1ZXJ5KHNlc3Npb24sICdTaG93TWUnLCByZXN1bHQpO1xuICAgICAgLy8gdGVzdC5leHBlY3QoMylcbiAgICAgIC8vICB0ZXN0LmRlZXBFcXVhbChyZXN1bHQud2VpZ2h0LCAxMjAsICdjb3JyZWN0IHdlaWdodCcpO1xuICAgICAgaWYgKCFyZXN1bHQgfHwgcmVzdWx0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBuZXh0KCk7XG4gICAgICB9XG4gICAgICAvLyBkZWJ1Z2xvZygncmVzdWx0IDogJyArIEpTT04uc3RyaW5naWZ5KHJlc3VsdCwgdW5kZWZpbmVkLCAyKSk7XG4gICAgICBkZWJ1Z2xvZygnYmVzdCByZXN1bHQgOiAnICsgSlNPTi5zdHJpbmdpZnkocmVzdWx0WzBdIHx8IHt9LCB1bmRlZmluZWQsIDIpKTtcbiAgICAgIGRlYnVnbG9nKCd0b3AgOiAnICsgTWF0Y2guVG9vbE1hdGNoLmR1bXBXZWlnaHRzVG9wKHJlc3VsdCwgeyB0b3A6IDMgfSkpO1xuXG5cbiAgICAgIGlmIChBbmFseXplLmlzQ29tcGxldGUocmVzdWx0WzBdKSkge1xuICAgICAgICBzZXNzaW9uLmRpYWxvZ0RhdGEucmVzdWx0ID0gcmVzdWx0WzBdO1xuICAgICAgICAvLyAgICBzZXNzaW9uLnNlbmQoJ1Nob3dpbmcgZW50aXR5IC4uLicpO1xuICAgICAgICBuZXh0KCk7XG4gICAgICB9IGVsc2UgaWYgKEFuYWx5emUuZ2V0UHJvbXB0KHJlc3VsdFswXSkpIHtcbiAgICAgICAgdmFyIHByb21wdCA9IEFuYWx5emUuZ2V0UHJvbXB0KHJlc3VsdFswXSk7XG4gICAgICAgIHNlc3Npb24uZGlhbG9nRGF0YS5yZXN1bHQgPSByZXN1bHRbMF07XG4gICAgICAgIHNlc3Npb24uZGlhbG9nRGF0YS5wcm9tcHQgPSBwcm9tcHQ7XG4gICAgICAgIGRpYWxvZ2xvZyhcIlNob3dNZVwiLCBzZXNzaW9uLHNlbmQoXCJOb3QgZW5vdWdoIGluZm9ybWF0aW9uIHN1cHBsaWVkOiBcIiArIE1hdGNoLlRvb2xNYXRjaC5kdW1wTmljZShcbiAgICAgICAgICBzZXNzaW9uLmRpYWxvZ0RhdGEucmVzdWx0XG4gICAgICAgICkpKTtcbiAgICAgICAgYnVpbGRlci5Qcm9tcHRzLnRleHQoc2Vzc2lvbiwgcHJvbXB0LnRleHQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGJlc3QgPSByZXN1bHQubGVuZ3RoID8gTWF0Y2guVG9vbE1hdGNoLmR1bXBOaWNlKHJlc3VsdFswXSkgOiBcIjxub3RoaW5nPlwiO1xuICAgICAgICBkaWFsb2dsb2coXCJTaG93TWVcIiwgc2Vzc2lvbiwgc2VuZCgnSSBkaWQgbm90IHVuZGVyc3RhbmQgdGhpcycgKyBiZXN0KSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgcmVzdWx0cywgbmV4dCkge1xuICAgICAgdmFyIHJlc3VsdCA9IHNlc3Npb24uZGlhbG9nRGF0YS5yZXN1bHQ7XG4gICAgICBpZiAoIXJlc3VsdCB8fCByZXN1bHQubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIG5leHQoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHJlc3VsdHMucmVzcG9uc2UpIHtcbiAgICAgICAgLy8gc29tZSBwcm9tcHRpbmdcbiAgICAgICAgQW5hbHl6ZS5zZXRQcm9tcHQoc2Vzc2lvbi5kaWFsb2dEYXRhLnJlc3VsdCwgc2Vzc2lvbi5kaWFsb2dEYXRhLnByb21wdCwgcmVzdWx0cy5yZXNwb25zZSk7XG4gICAgICB9XG4gICAgICBpZiAoQW5hbHl6ZS5pc0NvbXBsZXRlKHNlc3Npb24uZGlhbG9nRGF0YS5yZXN1bHQpKSB7XG4gICAgICAgIG5leHQoKTtcbiAgICAgIH0gZWxzZSBpZiAoQW5hbHl6ZS5nZXRQcm9tcHQoc2Vzc2lvbi5kaWFsb2dEYXRhLnJlc3VsdCkpIHtcbiAgICAgICAgdmFyIHByb21wdCA9IEFuYWx5emUuZ2V0UHJvbXB0KHNlc3Npb24uZGlhbG9nRGF0YS5yZXN1bHQpO1xuICAgICAgICBzZXNzaW9uLmRpYWxvZ0RhdGEucHJvbXB0ID0gcHJvbXB0O1xuICAgICAgICBidWlsZGVyLlByb21wdHMudGV4dChzZXNzaW9uLCBwcm9tcHQudGV4dCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgcmVzdWx0cywgbmV4dCkge1xuICAgICAgdmFyIHJlc3VsdCA9IHNlc3Npb24uZGlhbG9nRGF0YS5yZXN1bHQ7XG4gICAgICBpZiAocmVzdWx0cy5yZXNwb25zZSkge1xuICAgICAgICAvLyBzb21lIHByb21wdGluZ1xuICAgICAgICBBbmFseXplLnNldFByb21wdChzZXNzaW9uLmRpYWxvZ0RhdGEucmVzdWx0LFxuICAgICAgICAgIHNlc3Npb24uZGlhbG9nRGF0YS5wcm9tcHQsIHJlc3VsdHMucmVzcG9uc2UpO1xuICAgICAgfVxuICAgICAgaWYgKEFuYWx5emUuaXNDb21wbGV0ZShzZXNzaW9uLmRpYWxvZ0RhdGEucmVzdWx0KSkge1xuICAgICAgICBjb25zdCBleGVjID0gRXhlY1NlcnZlci5leGVjVG9vbChzZXNzaW9uLmRpYWxvZ0RhdGEucmVzdWx0IGFzIElNYXRjaC5JVG9vbE1hdGNoLCB0aGVNb2RlbC5yZWNvcmRzKTtcblxuICAgICAgICB2YXIgcmVwbHkgPSBuZXcgYnVpbGRlci5NZXNzYWdlKHNlc3Npb24pXG4gICAgICAgICAgLnRleHQoZXhlYy50ZXh0KVxuICAgICAgICAgIC5hZGRFbnRpdHkoZXhlYy5hY3Rpb24pO1xuICAgICAgICAvLyAuYWRkQXR0YWNobWVudCh7IGZhbGxiYWNrVGV4dDogXCJJIGRvbid0IGtub3dcIiwgY29udGVudFR5cGU6ICdpbWFnZS9qcGVnJywgY29udGVudFVybDogXCJ3d3cud29tYmF0Lm9yZ1wiIH0pO1xuICAgICAgICBkaWFsb2dsb2coXCJTaG93TWVcIixzZXNzaW9uLHNlbmQocmVwbHkpKTtcblxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHNlc3Npb24uZGlhbG9nRGF0YS5yZXN1bHQpIHtcbiAgICAgICAgICBkaWFsb2dsb2coXCJTaG93TWVcIixcbiAgICAgICAgICBzZXNzaW9uLHNlbmQoXCJOb3QgZW5vdWdoIGluZm9ybWF0aW9uIHN1cHBsaWVkOiBcIiArIE1hdGNoLlRvb2xNYXRjaC5kdW1wTmljZShcbiAgICAgICAgICAgIHNlc3Npb24uZGlhbG9nRGF0YS5yZXN1bHRcbiAgICAgICAgICApKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGlhbG9nbG9nKFwiU2hvd01lXCIsIHNlc3Npb24sIHNlbmQoXCJJIGRpZCBub3QgZ2V0IHdoYXQgeW91IHdhbnRcIikpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgXSk7XG5cbiAgZGlhbG9nLm1hdGNoZXMoJ1doYXRJcycsIFtcbiAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgYXJncywgbmV4dCkge1xuICAgICAgdmFyIGlzQ29tYmluZWRJbmRleCA9IHt9O1xuICAgICAgdmFyIG9OZXdFbnRpdHk7XG4gICAgICAvLyBleHBlY3RpbmcgZW50aXR5IEExXG4gICAgICB2YXIgbWVzc2FnZSA9IHNlc3Npb24ubWVzc2FnZS50ZXh0O1xuICAgICAgZGVidWdsb2coXCJXaGF0SXMgRW50aXRpZXNcIik7XG4gICAgICBkZWJ1Z2xvZygncmF3OiAnICsgSlNPTi5zdHJpbmdpZnkoYXJncy5lbnRpdGllcyksIHVuZGVmaW5lZCwgMik7XG4gICAgICB2YXIgY2F0ZWdvcnlFbnRpdHkgPSBidWlsZGVyLkVudGl0eVJlY29nbml6ZXIuZmluZEVudGl0eShhcmdzLmVudGl0aWVzLCAnY2F0ZWdvcnknKTtcbiAgICAgIHZhciBjYXRlZ29yeSA9IGNhdGVnb3J5RW50aXR5LmVudGl0eTtcbiAgICAgIHZhciBhMSA9IGJ1aWxkZXIuRW50aXR5UmVjb2duaXplci5maW5kRW50aXR5KGFyZ3MuZW50aXRpZXMsICdBMScpO1xuXG4gICAgICB2YXIgY2F0ID0gV2hhdElzLmFuYWx5emVDYXRlZ29yeShjYXRlZ29yeSwgdGhlTW9kZWwubVJ1bGVzLCBtZXNzYWdlKTtcbiAgICAgIGlmICghY2F0KSB7XG4gICAgICAgIHNlc3Npb24uc2VuZCgnSSBkb25cXCd0IGtub3cgYW55dGhpbmcgYWJvdXQgXCInICsgY2F0ZWdvcnkgKyAnXCInKTtcbiAgICAgICAgLy8gbmV4dCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBkZWJ1Z2xvZygnY2F0ZWdvcnkgaWRlbnRpZmllZDonICsgY2F0KTtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IFdoYXRJcy5yZXNvbHZlQ2F0ZWdvcnkoY2F0LCBhMS5lbnRpdHksXG4gICAgICAgIHRoZU1vZGVsLm1SdWxlcywgdGhlTW9kZWwucmVjb3Jkcyk7XG4gICAgICBkZWJ1Z2xvZygnd2hhdGlzIHJlc3VsdDonICsgSlNPTi5zdHJpbmdpZnkocmVzdWx0KSk7XG4gICAgICBsb2dRdWVyeVdoYXRJcyhzZXNzaW9uLCAnV2hhdElzJywgcmVzdWx0KTtcbiAgICAgIHZhciBpbmRpcyA9IFdoYXRJcy5pc0luZGlzY3JpbWluYXRlUmVzdWx0KHJlc3VsdCk7XG4gICAgICBpZiAoaW5kaXMpIHtcbiAgICAgICAgc2Vzc2lvbi5zZW5kKGluZGlzKTtcbiAgICAgICAgLy8gbmV4dCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoIXJlc3VsdCB8fCByZXN1bHQubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGRpYWxvZ2xvZyhcIldoYXRJc1wiLHNlc3Npb24sc2VuZCgnSSBkb25cXCd0IGtub3cgYW55dGhpbmcgYWJvdXQgXCInICsgY2F0ICsgXCIgKFwiICsgY2F0ZWdvcnkgKyAnKVxcXCIgaW4gcmVsYXRpb24gdG8gXCInICsgYTEuZW50aXR5ICsgJ1wiJykpO1xuICAgICAgICAvLyBuZXh0KCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGRlYnVnbG9nKCdyZXN1bHQgOiAnICsgSlNPTi5zdHJpbmdpZnkocmVzdWx0LCB1bmRlZmluZWQsIDIpKTtcbiAgICAgICAgZGVidWdsb2coJ2Jlc3QgcmVzdWx0IDogJyArIEpTT04uc3RyaW5naWZ5KHJlc3VsdFswXSB8fCB7fSwgdW5kZWZpbmVkLCAyKSk7XG4gICAgICAgIGRlYnVnbG9nKCd0b3AgOiAnICsgV2hhdElzLmR1bXBXZWlnaHRzVG9wKHJlc3VsdCwgeyB0b3A6IDMgfSkpO1xuICAgICAgICAvLyBUT0RPIGNsZWFuc2VkIHNlbnRlbmNlXG4gICAgICAgIGRpYWxvZ2xvZyhcIldoYXRJc1wiLHNlc3Npb24sc2VuZCgnVGhlICcgKyBjYXRlZ29yeSArICcgb2YgJyArIGExLmVudGl0eSArICcgaXMgJyArIHJlc3VsdFswXS5yZXN1bHQgKyBcIlxcblwiKSk7IC8vICArIEpTT04uc3RyaW5naWZ5KHJlc3VsdFswXSkpO1xuICAgICAgfVxuICAgIH1cbiAgXSk7XG5cblxuICBkaWFsb2cubWF0Y2hlcygnTGlzdEFsbCcsIFtcbiAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgYXJncywgbmV4dCkge1xuICAgICAgdmFyIGlzQ29tYmluZWRJbmRleCA9IHt9O1xuICAgICAgdmFyIG9OZXdFbnRpdHk7XG4gICAgICAvLyBleHBlY3RpbmcgZW50aXR5IEExXG4gICAgICB2YXIgbWVzc2FnZSA9IHNlc3Npb24ubWVzc2FnZS50ZXh0O1xuICAgICAgZGVidWdsb2coXCJJbnRlbnQgOiBMaXN0QWxsXCIpO1xuICAgICAgZGVidWdsb2coJ3JhdzogJyArIEpTT04uc3RyaW5naWZ5KGFyZ3MuZW50aXRpZXMpLCB1bmRlZmluZWQsIDIpO1xuICAgICAgdmFyIGNhdGVnb3J5RW50aXR5ID0gYnVpbGRlci5FbnRpdHlSZWNvZ25pemVyLmZpbmRFbnRpdHkoYXJncy5lbnRpdGllcywgJ2NhdGVnb3JpZXMnKTtcbiAgICAgIHZhciBjYXRlZ29yeSA9IGNhdGVnb3J5RW50aXR5LmVudGl0eTtcbiAgICAgIHZhciBhMSA9IGJ1aWxkZXIuRW50aXR5UmVjb2duaXplci5maW5kRW50aXR5KGFyZ3MuZW50aXRpZXMsICdpbnN0aCcpO1xuICAgICAgaWYgKGNhdGVnb3J5ID09PSBcImNhdGVnb3JpZXNcIikge1xuICAgICAgICAvLyBkbyB3ZSBoYXZlIGEgZmlsdGVyID9cbiAgICAgICAgdmFyIGRvbWFpbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYoYTEgJiYgYTEuZW50aXR5KSB7XG4gICAgICAgICAgZG9tYWluID0gTGlzdEFsbC5pbmZlckRvbWFpbih0aGVNb2RlbCwgYTEuZW50aXR5KTtcbiAgICAgICAgfVxuICAgICAgICBpZiggIWRvbWFpbikge1xuICAgICAgICAgIHZhciByZXMgPSB0aGVNb2RlbC5jYXRlZ29yeS5qb2luKFwiO1xcblwiKTtcbiAgICAgICAgICBkaWFsb2dsb2coXCJMaXN0QWxsXCIsc2Vzc2lvbixzZW5kKFwibXkgY2F0ZWdvcmllcyBhcmUgLi4uXFxuXCIgKyByZXMpKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIGFSZXMgPSBNb2RlbC5nZXRDYXRlZ29yaWVzRm9yRG9tYWluKHRoZU1vZGVsLCBkb21haW4pO1xuICAgICAgICAgICB2YXIgcmVzID0gYVJlcy5qb2luKFwiO1xcblwiKTtcbiAgICAgICAgICBkaWFsb2dsb2coXCJMaXN0QWxsXCIsc2Vzc2lvbixzZW5kKFwibXkgY2F0ZWdvcmllcyBpbiBkb21haW4gXFxcIlwiICsgZG9tYWluICsgXCJcXFwiIGFyZSAuLi5cXG5cIiArIHJlcykpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGNhdGVnb3J5ID09PSBcImRvbWFpbnNcIikge1xuICAgICAgICB2YXIgcmVzID0gdGhlTW9kZWwuZG9tYWlucy5qb2luKFwiO1xcblwiKTtcbiAgICAgICAgc2Vzc2lvbi5zZW5kKFwibXkgZG9tYWlucyBhcmUgLi4uXFxuXCIgKyByZXMpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoY2F0ZWdvcnkgPT09IFwidG9vbHNcIikge1xuICAgICAgICB2YXIgcmVzID0gdGhlTW9kZWwudG9vbHMubWFwKGZ1bmN0aW9uIChvVG9vbCkge1xuICAgICAgICAgIHJldHVybiBvVG9vbC5uYW1lO1xuICAgICAgICB9KS5qb2luKFwiO1xcblwiKTtcbiAgICAgICAgZGlhbG9nbG9nKFwiTGlzdEFsbFwiLCBzZXNzaW9uLHNlbmQoXCJteSB0b29scyBhcmUgLi4uXFxuXCIgKyByZXMpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIGNhdCA9IFdoYXRJcy5hbmFseXplQ2F0ZWdvcnkoY2F0ZWdvcnksIHRoZU1vZGVsLm1SdWxlcywgbWVzc2FnZSk7XG4gICAgICBpZiAoIWNhdCkge1xuICAgICAgICBkaWFsb2dsb2coXCJMaXN0QWxsXCIsc2Vzc2lvbixzZW5kKCdJIGRvblxcJ3Qga25vdyBhbnl0aGluZyBhYm91dCBcIicgKyBjYXRlZ29yeSArICdcIicpKTtcbiAgICAgICAgLy8gbmV4dCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBkZWJ1Z2xvZygnY2F0ZWdvcnkgaWRlbnRpZmllZDonICsgY2F0KTtcbiAgICAgIGlmIChhMSAmJiBhMS5lbnRpdHkpIHtcbiAgICAgICAgZGVidWdsb2coJ2dvdCBmaWx0ZXI6JyArIGExLmVudGl0eSk7XG4gICAgICAgIHZhciByZXN1bHQxID0gTGlzdEFsbC5saXN0QWxsV2l0aENvbnRleHQoY2F0LCBhMS5lbnRpdHksXG4gICAgICAgICAgdGhlTW9kZWwubVJ1bGVzLCB0aGVNb2RlbC5yZWNvcmRzKTtcbiAgICAgICAgLy8gVE9ETyBjbGFzc2lmeWluZyB0aGUgc3RyaW5nIHR3aWNlIGlzIGEgdGVycmlibGUgd2FzdGVcbiAgICAgICAgaWYgKCFyZXN1bHQxLmxlbmd0aCkge1xuICAgICAgICAgIGRlYnVnbG9nKCdnb2luZyBmb3IgaGF2aW5nJyk7XG4gICAgICAgICAgcmVzdWx0MSA9IExpc3RBbGwubGlzdEFsbEhhdmluZ0NvbnRleHQoY2F0LCBhMS5lbnRpdHksIHRoZU1vZGVsLm1SdWxlcyxcbiAgICAgICAgICAgIHRoZU1vZGVsLnJlY29yZHMpO1xuICAgICAgICB9XG4gICAgICAgIGRlYnVnbG9nKCdsaXN0YWxsIHJlc3VsdDonICsgSlNPTi5zdHJpbmdpZnkocmVzdWx0MSkpO1xuICAgICAgICB2YXIgam9pbnJlc3VsdHMgPSBMaXN0QWxsLmpvaW5SZXN1bHRzKHJlc3VsdDEpO1xuICAgICAgICBsb2dRdWVyeVdoYXRJcyhzZXNzaW9uLCAnTGlzdEFsbCcsIHJlc3VsdDEpO1xuICAgICAgICBpZihqb2lucmVzdWx0cy5sZW5ndGggKXtcbiAgICAgICAgICBkaWFsb2dsb2coXCJMaXN0QWxsXCIsc2Vzc2lvbixzZW5kKFwidGhlIFwiICsgY2F0ZWdvcnkgKyBcIiBmb3IgXCIgKyBhMS5lbnRpdHkgKyBcIiBhcmUgLi4uXFxuXCIgKyBqb2lucmVzdWx0cy5qb2luKFwiO1xcblwiKSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRpYWxvZ2xvZyhcIkxpc3RBbGxcIixzZXNzaW9uLHNlbmQoXCJpIGRpZCBub3QgZmluZCBhbnkgXCIgKyBjYXRlZ29yeSArIFwiIGZvciBcIiArIGExLmVudGl0eSArIFwiLlxcblwiICsgam9pbnJlc3VsdHMuam9pbihcIjtcXG5cIikpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBubyBlbnRpdHksIGUuZy4gbGlzdCBhbGwgY291bnRyaWVzXG4gICAgICAgIC8vXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IExpc3RBbGwubGlzdEFsbEhhdmluZ0NvbnRleHQoY2F0LCBjYXQsIHRoZU1vZGVsLm1SdWxlcywgdGhlTW9kZWwucmVjb3Jkcyk7XG4gICAgICAgIGxvZ1F1ZXJ5V2hhdElzKHNlc3Npb24sICdMaXN0QWxsJywgcmVzdWx0KTtcblxuICAgICAgICBpZiAocmVzdWx0Lmxlbmd0aCkge1xuICAgICAgICAgIGRlYnVnbG9nKCdsaXN0YWxsIHJlc3VsdDonICsgSlNPTi5zdHJpbmdpZnkocmVzdWx0KSk7XG4gICAgICAgICAgdmFyIGpvaW5yZXN1bHRzID0gTGlzdEFsbC5qb2luUmVzdWx0cyhyZXN1bHQpO1xuICAgICAgICAgIHZhciByZXNwb25zZSA9IFwidGhlIFwiICsgY2F0ZWdvcnkgKyBcIiBhcmUgLi4uXFxuXCIgKyBqb2lucmVzdWx0cy5qb2luKFwiO1xcblwiKTtcbiAgICAgICAgICBkaWFsb2dsb2coXCJMaXN0QWxsXCIsc2Vzc2lvbixzZW5kKHJlc3BvbnNlKSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciByZXNwb25zZSA9IFwiRm91bmQgbm8gZGF0YSBoYXZpbmcgXFxcIlwiICsgY2F0ICsgXCJcXFwiXCJcbiAgICAgICAgICBkaWFsb2dsb2coXCJMaXN0QWxsXCIsc2Vzc2lvbixzZW5kKHJlc3BvbnNlKSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICBdKTtcblxuXG4gIGRpYWxvZy5tYXRjaGVzKCdXcm9uZycsIFtcbiAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgYXJncywgbmV4dCkge1xuICAgICAgICBkaWFsb2dMb2dnZXIoIHtcbiAgICAgICAgICBzZXNzaW9uOiBzZXNzaW9uLFxuICAgICAgICAgIGludGVudCA6IFwiV3JvbmdcIixcbiAgICAgICAgICByZXNwb25zZSA6ICc8YmVnaW4gdXBkb3duPidcbiAgICAgICAgfSk7XG4gICAgICBzZXNzaW9uLmJlZ2luRGlhbG9nKCcvdXBkb3duJywgc2Vzc2lvbi51c2VyRGF0YS5jb3VudCk7XG4gICAgfSxcbiAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgcmVzdWx0cywgbmV4dCkge1xuICAgICAgdmFyIGFsYXJtID0gc2Vzc2lvbi5kaWFsb2dEYXRhLmFsYXJtO1xuICAgICAgc2Vzc2lvbi5zZW5kKFwiYmFjayBmcm9tIHdyb25nIDogXCIgKyBKU09OLnN0cmluZ2lmeShyZXN1bHRzKSk7XG4gICAgICBuZXh0KCk7XG4gICAgfSxcbiAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgcmVzdWx0cykge1xuICAgICAgc2Vzc2lvbi5zZW5kKCdlbmQgb2Ygd3JvbmcnKTtcbiAgICB9XG4gIF0pO1xuXG4gIGRpYWxvZy5tYXRjaGVzKCdFeGl0JywgW1xuICAgIGZ1bmN0aW9uIChzZXNzaW9uLCBhcmdzLCBuZXh0KSB7XG4gICAgICBkZWJ1Z2xvZygnZXhpdCA6Jyk7XG4gICAgICBkZWJ1Z2xvZygnZXhpdCcgKyBKU09OLnN0cmluZ2lmeShhcmdzLmVudGl0aWVzKSk7XG4gICAgICAgIGRpYWxvZ0xvZ2dlcigge1xuICAgICAgICAgIHNlc3Npb246IHNlc3Npb24sXG4gICAgICAgICAgaW50ZW50IDogXCJFeGl0XCIsXG4gICAgICAgICAgcmVzcG9uc2UgOiAneW91IGFyZSBpbiBhIGxvZ2ljIGxvb3AnXG4gICAgICAgIH0pO1xuICAgICAgc2Vzc2lvbi5zZW5kKFwieW91IGFyZSBpbiBhIGxvZ2ljIGxvb3AgXCIpO1xuICAgIH1cbiAgXSk7XG4gIGRpYWxvZy5tYXRjaGVzKCdIZWxwJywgW1xuICAgIGZ1bmN0aW9uIChzZXNzaW9uLCBhcmdzLCBuZXh0KSB7XG4gICAgICBkZWJ1Z2xvZygnaGVscCA6Jyk7XG4gICAgICBkZWJ1Z2xvZygnaGVscCcpO1xuICAgICAgc2Vzc2lvbi5zZW5kKFwiSSBrbm93IGFib3V0IC4uLi4gPGNhdGVnb3JpZXM+PlwiKTtcbiAgICB9XG4gIF0pO1xuXG5cblxuICAvLyBBZGQgaW50ZW50IGhhbmRsZXJzXG4gIGRpYWxvZy5tYXRjaGVzKCd0cmFpbicsIFtcbiAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgYXJncywgbmV4dCkge1xuICAgICAgZGVidWdsb2coJ3RyYWluJyk7XG4gICAgICAvLyBSZXNvbHZlIGFuZCBzdG9yZSBhbnkgZW50aXRpZXMgcGFzc2VkIGZyb20gTFVJUy5cbiAgICAgIHZhciB0aXRsZSA9IGJ1aWxkZXIuRW50aXR5UmVjb2duaXplci5maW5kRW50aXR5KGFyZ3MuZW50aXRpZXMsICdidWlsdGluLmFsYXJtLnRpdGxlJyk7XG4gICAgICB2YXIgdGltZSA9IGJ1aWxkZXIuRW50aXR5UmVjb2duaXplci5yZXNvbHZlVGltZShhcmdzLmVudGl0aWVzKTtcbiAgICAgIHZhciBhbGFybSA9IHNlc3Npb24uZGlhbG9nRGF0YS5hbGFybSA9IHtcbiAgICAgICAgdGl0bGU6IHRpdGxlID8gdGl0bGUuZW50aXR5IDogbnVsbCxcbiAgICAgICAgdGltZXN0YW1wOiB0aW1lID8gdGltZS5nZXRUaW1lKCkgOiBudWxsXG4gICAgICB9O1xuICAgICAgLy8gUHJvbXB0IGZvciB0aXRsZVxuICAgICAgICBpZiAoIWFsYXJtLnRpdGxlKSB7XG4gICAgICAgICAgZGlhbG9nTG9nZ2VyKCB7XG4gICAgICAgICAgc2Vzc2lvbjogc2Vzc2lvbixcbiAgICAgICAgICBpbnRlbnQgOiBcInRyYWluXCIsXG4gICAgICAgICAgcmVzcG9uc2UgOiAnV2hhdCBmYWN0IHdvdWxkIHlvdSBsaWtlIHRvIHRyYWluPydcbiAgICAgICAgfSk7XG4gICAgICAgIGJ1aWxkZXIuUHJvbXB0cy50ZXh0KHNlc3Npb24sICdXaGF0IGZhY3Qgd291bGQgeW91IGxpa2UgdG8gdHJhaW4/Jyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXh0KCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgcmVzdWx0cywgbmV4dCkge1xuICAgICAgdmFyIGFsYXJtID0gc2Vzc2lvbi5kaWFsb2dEYXRhLmFsYXJtO1xuICAgICAgaWYgKHJlc3VsdHMucmVzcG9uc2UpIHtcbiAgICAgICAgYWxhcm0udGl0bGUgPSByZXN1bHRzLnJlc3BvbnNlO1xuICAgICAgfVxuXG4gICAgICAvLyBQcm9tcHQgZm9yIHRpbWUgKHRpdGxlIHdpbGwgYmUgYmxhbmsgaWYgdGhlIHVzZXIgc2FpZCBjYW5jZWwpXG4gICAgICBpZiAoYWxhcm0udGl0bGUgJiYgIWFsYXJtLnRpbWVzdGFtcCkge1xuXG5cbiAgICAgICAgYnVpbGRlci5Qcm9tcHRzLnRpbWUoc2Vzc2lvbiwgJ1doYXQgdGltZSB3b3VsZCB5b3UgbGlrZSB0byBzZXQgdGhlIGFsYXJtIGZvcj8nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5leHQoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGZ1bmN0aW9uIChzZXNzaW9uLCByZXN1bHRzKSB7XG4gICAgICB2YXIgYWxhcm0gPSBzZXNzaW9uLmRpYWxvZ0RhdGEuYWxhcm07XG4gICAgICBpZiAocmVzdWx0cy5yZXNwb25zZSkge1xuICAgICAgICB2YXIgdGltZSA9IGJ1aWxkZXIuRW50aXR5UmVjb2duaXplci5yZXNvbHZlVGltZShbcmVzdWx0cy5yZXNwb25zZV0pO1xuICAgICAgICBhbGFybS50aW1lc3RhbXAgPSB0aW1lID8gdGltZS5nZXRUaW1lKCkgOiBudWxsO1xuICAgICAgfVxuICAgICAgLy8gU2V0IHRoZSBhbGFybSAoaWYgdGl0bGUgb3IgdGltZXN0YW1wIGlzIGJsYW5rIHRoZSB1c2VyIHNhaWQgY2FuY2VsKVxuICAgICAgaWYgKGFsYXJtLnRpdGxlICYmIGFsYXJtLnRpbWVzdGFtcCkge1xuICAgICAgICAvLyBTYXZlIGFkZHJlc3Mgb2Ygd2hvIHRvIG5vdGlmeSBhbmQgd3JpdGUgdG8gc2NoZWR1bGVyLlxuICAgICAgICBhbGFybS5hZGRyZXNzID0gc2Vzc2lvbi5tZXNzYWdlLmFkZHJlc3M7XG4gICAgICAgIC8vYWxhcm1zW2FsYXJtLnRpdGxlXSA9IGFsYXJtO1xuXG4gICAgICAgIC8vIFNlbmQgY29uZmlybWF0aW9uIHRvIHVzZXJcbiAgICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZShhbGFybS50aW1lc3RhbXApO1xuICAgICAgICB2YXIgaXNBTSA9IGRhdGUuZ2V0SG91cnMoKSA8IDEyO1xuICAgICAgICBzZXNzaW9uLnNlbmQoJ0NyZWF0aW5nIGFsYXJtIG5hbWVkIFwiJXNcIiBmb3IgJWQvJWQvJWQgJWQ6JTAyZCVzJyxcbiAgICAgICAgICBhbGFybS50aXRsZSxcbiAgICAgICAgICBkYXRlLmdldE1vbnRoKCkgKyAxLCBkYXRlLmdldERhdGUoKSwgZGF0ZS5nZXRGdWxsWWVhcigpLFxuICAgICAgICAgIGlzQU0gPyBkYXRlLmdldEhvdXJzKCkgOiBkYXRlLmdldEhvdXJzKCkgLSAxMiwgZGF0ZS5nZXRNaW51dGVzKCksIGlzQU0gPyAnYW0nIDogJ3BtJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZXNzaW9uLnNlbmQoJ09rLi4uIG5vIHByb2JsZW0uJyk7XG4gICAgICB9XG4gICAgfVxuICBdKTtcblxuICBkaWFsb2cub25EZWZhdWx0KGZ1bmN0aW9uIChzZXNzaW9uKSB7XG4gICAgbG9nUXVlcnkoc2Vzc2lvbiwgXCJvbkRlZmF1bHRcIik7XG4gICAgdmFyIGVsaXphID0gZ2V0RWxpemFCb3QoZ2V0Q29udmVyc2F0aW9uSWQoc2Vzc2lvbikpO1xuICAgIHZhciByZXBseSA9IGVsaXphLnRyYW5zZm9ybShzZXNzaW9uLm1lc3NhZ2UudGV4dCk7XG4gICAgZGlhbG9nbG9nKFwiZWxpemFcIixzZXNzaW9uLHNlbmQocmVwbHkpKTtcbiAgICAvL25ldyBFaWx6YWJvdFxuICAgIC8vc2Vzc2lvbi5zZW5kKFwiSSBkbyBub3QgdW5kZXJzdGFuZCB0aGlzIGF0IGFsbFwiKTtcbiAgICAvL2J1aWxkZXIuRGlhbG9nQWN0aW9uLnNlbmQoJ0lcXCdtIHNvcnJ5IEkgZGlkblxcJ3QgdW5kZXJzdGFuZC4gSSBjYW4gb25seSBzaG93IHN0YXJ0IGFuZCByaW5nJyk7XG4gIH0pO1xuXG4gIC8qXG4gIC8vIFZlcnkgc2ltcGxlIGFsYXJtIHNjaGVkdWxlclxuICB2YXIgYWxhcm1zID0ge307XG4gIHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbm93ID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgZm9yICh2YXIga2V5IGluIGFsYXJtcykge1xuICAgICAgdmFyIGFsYXJtID0gYWxhcm1zW2tleV07XG4gICAgICBpZiAobm93ID49IGFsYXJtLnRpbWVzdGFtcCkge1xuICAgICAgICB2YXIgbXNnID0gbmV3IGJ1aWxkZXIuTWVzc2FnZSgpXG4gICAgICAgICAgLmFkZHJlc3MoYWxhcm0uYWRkcmVzcylcbiAgICAgICAgICAudGV4dCgnSGVyZVxcJ3MgeW91ciBcXCclc1xcJyBhbGFybS4nLCBhbGFybS50aXRsZSk7XG4gICAgICAgIGJvdC5zZW5kKG1zZyk7XG4gICAgICAgIGRlbGV0ZSBhbGFybXNba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIDE1MDAwKTtcbiAgKi9cbn1cblxuaWYgKG1vZHVsZSkge1xuICBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBtYWtlQm90OiBtYWtlQm90XG4gIH07XG59XG4iLCIvKipcbiAqIFRoZSBib3QgaW1wbGVtZW50YXRpb25cbiAqXG4gKiBJbnN0YW50aWF0ZSBhcHNzaW5nIGEgY29ubmVjdG9yIHZpYVxuICogbWFrZUJvdFxuICpcbiAqL1xuLyoqXG4gKiBAZmlsZVxuICogQG1vZHVsZSBqZnNlYi5mZGV2c3RhcnQuc21hcnRkaWFsb2dcbiAqIEBjb3B5cmlnaHQgKGMpIDIwMTYgR2VyZCBGb3JzdG1hbm5cbiAqL1xuLy9kZWNsYXJlIG1vZHVsZSAnZWxpemFib3QnIHsgfTtcbi8vZGVjbGFyZSBtb2R1bGUgJ3dpbnN0b24tcGcnIHsgfTtcbi8vZGVsY2FyZSBtb2R1bGUgJ3dpbnN0b24nIHt9O1xuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgYnVpbGRlciA9IHJlcXVpcmUoJ2JvdGJ1aWxkZXInKTtcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJyk7XG52YXIgTWF0Y2ggPSByZXF1aXJlKCcuLi9tYXRjaC9tYXRjaCcpO1xudmFyIEFuYWx5emUgPSByZXF1aXJlKCcuLi9tYXRjaC9hbmFseXplJyk7XG52YXIgV2hhdElzID0gcmVxdWlyZSgnLi4vbWF0Y2gvd2hhdGlzJyk7XG52YXIgTGlzdEFsbCA9IHJlcXVpcmUoJy4uL21hdGNoL2xpc3RhbGwnKTtcbnZhciBEaWFsb2dMb2dnZXIgPSByZXF1aXJlKCcuLi91dGlscy9kaWFsb2dsb2dnZXInKTtcbnZhciBwcm9jZXNzID0gcmVxdWlyZSgncHJvY2VzcycpO1xudmFyIGRidXJsID0gcHJvY2Vzcy5lbnYuREFUQUJBU0VfVVJMIHx8IFwiXCI7XG52YXIgcGdsb2NhbHVybCA9IFwicG9zdGdyZXM6Ly9qb2U6YWJjZGVmQGxvY2FsaG9zdDo1NDMyL2Fib3RcIjtcbnZhciBkYnVybCA9IHByb2Nlc3MuZW52LkRBVEFCQVNFX1VSTCB8fCBwZ2xvY2FsdXJsO1xudmFyIHBnID0gcmVxdWlyZSgncGcnKTtcbnZhciBvID0gcGc7XG5vLmRlZmF1bHRzLnNzbCA9IHRydWU7XG52YXIgZGlhbG9nTG9nZ2VyID0gRGlhbG9nTG9nZ2VyLmxvZ2dlcihcInNtYXJ0Ym90XCIsIGRidXJsLCBwZyk7XG5mdW5jdGlvbiBzZW5kKG8pIHsgcmV0dXJuIG87IH1cbjtcbmZ1bmN0aW9uIGRpYWxvZ2xvZyhpbnRlbnQsIHNlc3Npb24sIHJlc3BvbnNlKSB7XG4gICAgdmFyIHNSZXNwb25zZTtcbiAgICB2YXIgc0FjdGlvbjtcbiAgICBpZiAodHlwZW9mIHJlc3BvbnNlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHNBY3Rpb24gPSBcIlwiO1xuICAgICAgICBzUmVzcG9uc2UgPSByZXNwb25zZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHZhciBhTWVzc2FnZSA9IHJlc3BvbnNlO1xuICAgICAgICB2YXIgaU1lc3NhZ2UgPSBhTWVzc2FnZS50b01lc3NhZ2UoKTtcbiAgICAgICAgc1Jlc3BvbnNlID0gaU1lc3NhZ2UudGV4dDtcbiAgICAgICAgc0FjdGlvbiA9IChpTWVzc2FnZS5lbnRpdGllcyAmJiBpTWVzc2FnZS5lbnRpdGllc1swXSkgPyAoSlNPTi5zdHJpbmdpZnkoaU1lc3NhZ2UuZW50aXRpZXMgJiYgaU1lc3NhZ2UuZW50aXRpZXNbMF0pKSA6IFwiXCI7XG4gICAgfVxuICAgIGRpYWxvZ0xvZ2dlcih7XG4gICAgICAgIGludGVudDogaW50ZW50LFxuICAgICAgICBzZXNzaW9uOiBzZXNzaW9uLFxuICAgICAgICByZXNwb25zZTogc1Jlc3BvbnNlLFxuICAgICAgICBhY3Rpb246IHNBY3Rpb25cbiAgICB9KTtcbiAgICBzZXNzaW9uLnNlbmQocmVzcG9uc2UpO1xufVxuLy9jb25zdCBwZ0xvZ2dlciA9IG5ldyBQZ0xvZ2dlcih7XG4vLyAgbmFtZTogJ3Rlc3QtbG9nZ2VyJyxcbi8vICBsZXZlbDogJ2RlYnVnJyxcbi8vICBjb25uU3RyaW5nOiAncG9zdGdyZXM6Ly91YnVudHVAbG9jYWxob3N0OjU0MzIvY2lyY2xlX3Rlc3QnLFxuLy8gIHRhYmxlTmFtZTogJ3dpbnN0b25fbG9ncycsXG4vL30pO1xuLy93aW5zdG9uLmFkZCh3aW5zdG9uLnRyYW5zcG9ydHMuRmlsZSwgeyBmaWxlbmFtZTogJ3dpbnN0b25fb3V0LmxvZycsIHRpbWVzdGFtcCA6IHRydWUgfSk7XG4vLyAgd2luc3Rvbi5yZW1vdmUod2luc3Rvbi50cmFuc3BvcnRzLkNvbnNvbGUpO1xuLy93aW5zdG9uLmFkZChwZ0xvZ2dlcik7XG4vKlxuY29uc3QgbG9nZ2VyID0gbmV3IHdpbnN0b24uTG9nZ2VyKHtcbiAgdHJhbnNwb3J0czogW1xuICAgIG5ldyB3aW5zdG9uLnRyYW5zcG9ydHMuQ29uc29sZSh7XG4gICAgICBjb2xvcjogdHJ1ZSxcbiAgICAgIHRpbWVzdGFtcDogdHJ1ZSxcbiAgICB9KSxcbiAgICBwZ0xvZ2dlcixcbiAgXVxufSk7XG4qL1xuLy9wZ0xvZ2dlci5pbml0VGFibGUoZG9uZSk7XG52YXIgZWxpemFib3QgPSByZXF1aXJlKCcuLi9leHRlcm4vZWxpemFib3QvZWxpemFib3QnKTtcbi8vaW1wb3J0ICogYXMgZWxpemFib3QgZnJvbSAnZWxpemFib3QnO1xudmFyIGRlYnVnbG9nID0gZGVidWcoJ3NtYXJ0ZGlhbG9nJyk7XG52YXIgUGxhaW5SZWNvZ25pemVyID0gcmVxdWlyZSgnLi9wbGFpbnJlY29nbml6ZXInKTtcbi8vdmFyIGJ1aWxkZXIgPSByZXF1aXJlKCdib3RidWlsZGVyJyk7XG52YXIgZGlzcGF0Y2hlciA9IHJlcXVpcmUoJy4uL21hdGNoL2Rpc3BhdGNoZXIuanMnKS5kaXNwYXRjaGVyO1xuZnVuY3Rpb24gZ2V0Q29udmVyc2F0aW9uSWQoc2Vzc2lvbikge1xuICAgIHJldHVybiBzZXNzaW9uLm1lc3NhZ2UgJiZcbiAgICAgICAgc2Vzc2lvbi5tZXNzYWdlLmFkZHJlc3MgJiZcbiAgICAgICAgc2Vzc2lvbi5tZXNzYWdlLmFkZHJlc3MuY29udmVyc2F0aW9uLmlkO1xufVxudmFyIGVsaXphYm90cyA9IHt9O1xuZnVuY3Rpb24gZ2V0RWxpemFCb3QoaWQpIHtcbiAgICBpZiAoIWVsaXphYm90c1tpZF0pIHtcbiAgICAgICAgZWxpemFib3RzW2lkXSA9IHtcbiAgICAgICAgICAgIGFjY2VzczogbmV3IERhdGUoKSxcbiAgICAgICAgICAgIGVsaXphYm90OiBuZXcgZWxpemFib3QoKVxuICAgICAgICB9O1xuICAgIH1cbiAgICBlbGl6YWJvdHNbaWRdLmFjY2VzcyA9IG5ldyBEYXRlKCk7XG4gICAgcmV0dXJuIGVsaXphYm90c1tpZF0uZWxpemFib3Q7XG59XG52YXIgbmV3RmxvdyA9IHRydWU7XG52YXIgTW9kZWwgPSByZXF1aXJlKCcuLi9tb2RlbC9tb2RlbCcpO1xudmFyIEV4ZWNTZXJ2ZXIgPSByZXF1aXJlKCcuLi9leGVjL2V4ZWNzZXJ2ZXInKTtcbnZhciB0aGVNb2RlbCA9IE1vZGVsLmxvYWRNb2RlbHMoKTtcbmlmIChuZXdGbG93KSB7XG59XG5lbHNlIHtcbn1cbnZhciBTaW1wbGVSZWNvZ25pemVyID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTaW1wbGVSZWNvZ25pemVyKCkge1xuICAgIH1cbiAgICBTaW1wbGVSZWNvZ25pemVyLnByb3RvdHlwZS5yZWNvZ25pemUgPSBmdW5jdGlvbiAoY29udGV4dCwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIHUgPSB7fTtcbiAgICAgICAgZGVidWdsb2coXCJyZWNvZ25pemluZyBcIiArIGNvbnRleHQubWVzc2FnZS50ZXh0KTtcbiAgICAgICAgaWYgKGNvbnRleHQubWVzc2FnZS50ZXh0LmluZGV4T2YoXCJzdGFydFwiKSA+PSAwKSB7XG4gICAgICAgICAgICB1LmludGVudCA9IFwiU2hvd0VudGl0eVwiO1xuICAgICAgICAgICAgdS5zY29yZSA9IDAuOTtcbiAgICAgICAgICAgIHZhciBlMSA9IHt9O1xuICAgICAgICAgICAgZTEuc3RhcnRJbmRleCA9IFwic3RhcnQgXCIubGVuZ3RoO1xuICAgICAgICAgICAgZTEuZW5kSW5kZXggPSBjb250ZXh0Lm1lc3NhZ2UudGV4dC5sZW5ndGg7XG4gICAgICAgICAgICBlMS5zY29yZSA9IDAuMztcbiAgICAgICAgICAgIHUuZW50aXRpZXMgPSBbZTFdO1xuICAgICAgICAgICAgY2FsbGJhY2sodW5kZWZpbmVkLCB1KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29udGV4dC5tZXNzYWdlLnRleHQuaW5kZXhPZihcInRyYWluXCIpID49IDApIHtcbiAgICAgICAgICAgIHUuaW50ZW50ID0gXCJ0cmFpblwiO1xuICAgICAgICAgICAgdS5zY29yZSA9IDAuOTtcbiAgICAgICAgICAgIHZhciBlMSA9IHt9O1xuICAgICAgICAgICAgZTEuc3RhcnRJbmRleCA9IFwidHJhaW4gXCIubGVuZ3RoO1xuICAgICAgICAgICAgZTEuZW5kSW5kZXggPSBjb250ZXh0Lm1lc3NhZ2UudGV4dC5sZW5ndGg7XG4gICAgICAgICAgICBlMS5zY29yZSA9IDAuMztcbiAgICAgICAgICAgIHUuZW50aXRpZXMgPSBbZTFdO1xuICAgICAgICAgICAgY2FsbGJhY2sodW5kZWZpbmVkLCB1KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29udGV4dC5tZXNzYWdlLnRleHQuaW5kZXhPZihcImxlYXJuXCIpID49IDApIHtcbiAgICAgICAgICAgIHUuaW50ZW50ID0gXCJsZWFyblwiO1xuICAgICAgICAgICAgdS5zY29yZSA9IDAuOTtcbiAgICAgICAgICAgIHZhciBlMSA9IHt9O1xuICAgICAgICAgICAgZTEudHlwZSA9IFwidHJhaW5GYWN0XCI7XG4gICAgICAgICAgICBlMS5zdGFydEluZGV4ID0gXCJ0cmFpbiBcIi5sZW5ndGg7XG4gICAgICAgICAgICBlMS5lbmRJbmRleCA9IGNvbnRleHQubWVzc2FnZS50ZXh0Lmxlbmd0aDtcbiAgICAgICAgICAgIGUxLnNjb3JlID0gMC4zO1xuICAgICAgICAgICAgdS5lbnRpdGllcyA9IFtlMV07XG4gICAgICAgICAgICBjYWxsYmFjayh1bmRlZmluZWQsIHUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb250ZXh0Lm1lc3NhZ2UudGV4dC5pbmRleE9mKFwiaGVscFwiKSA+PSAwKSB7XG4gICAgICAgICAgICB1LmludGVudCA9IFwiaGVscFwiO1xuICAgICAgICAgICAgdS5zY29yZSA9IDAuOTtcbiAgICAgICAgICAgIHZhciBlMSA9IHt9O1xuICAgICAgICAgICAgZTEuc3RhcnRJbmRleCA9IFwidHJhaW4gXCIubGVuZ3RoO1xuICAgICAgICAgICAgZTEuZW5kSW5kZXggPSBjb250ZXh0Lm1lc3NhZ2UudGV4dC5sZW5ndGg7XG4gICAgICAgICAgICBlMS5zY29yZSA9IDAuMztcbiAgICAgICAgICAgIHUuZW50aXRpZXMgPSBbZTFdO1xuICAgICAgICAgICAgY2FsbGJhY2sodW5kZWZpbmVkLCB1KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29udGV4dC5tZXNzYWdlLnRleHQuaW5kZXhPZihcImV4aXRcIikgPj0gMCkge1xuICAgICAgICAgICAgdS5pbnRlbnQgPSBcImV4aXRcIjtcbiAgICAgICAgICAgIHUuc2NvcmUgPSAwLjk7XG4gICAgICAgICAgICB2YXIgZTEgPSB7fTtcbiAgICAgICAgICAgIGUxLnN0YXJ0SW5kZXggPSBcImV4aXQgXCIubGVuZ3RoO1xuICAgICAgICAgICAgZTEuZW5kSW5kZXggPSBjb250ZXh0Lm1lc3NhZ2UudGV4dC5sZW5ndGg7XG4gICAgICAgICAgICBlMS5zY29yZSA9IDAuMztcbiAgICAgICAgICAgIHUuZW50aXRpZXMgPSBbZTFdO1xuICAgICAgICAgICAgY2FsbGJhY2sodW5kZWZpbmVkLCB1KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29udGV4dC5tZXNzYWdlLnRleHQuaW5kZXhPZihcIndyb25nXCIpID49IDApIHtcbiAgICAgICAgICAgIHUuaW50ZW50ID0gXCJ3cm9uZ1wiO1xuICAgICAgICAgICAgdS5zY29yZSA9IDAuOTtcbiAgICAgICAgICAgIHZhciBlMSA9IHt9O1xuICAgICAgICAgICAgZTEuc3RhcnRJbmRleCA9IFwiZXhpdCBcIi5sZW5ndGg7XG4gICAgICAgICAgICBlMS5lbmRJbmRleCA9IGNvbnRleHQubWVzc2FnZS50ZXh0Lmxlbmd0aDtcbiAgICAgICAgICAgIGUxLnNjb3JlID0gMC4zO1xuICAgICAgICAgICAgdS5lbnRpdGllcyA9IFtlMV07XG4gICAgICAgICAgICBjYWxsYmFjayh1bmRlZmluZWQsIHUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGRlYnVnbG9nKCdyZWNvZ25pemluZyBub3RoaW5nJyk7XG4gICAgICAgIHUuaW50ZW50ID0gXCJOb25lXCI7XG4gICAgICAgIHUuc2NvcmUgPSAwLjE7XG4gICAgICAgIHZhciBlMSA9IHt9O1xuICAgICAgICBlMS5zdGFydEluZGV4ID0gXCJleGl0IFwiLmxlbmd0aDtcbiAgICAgICAgZTEuZW5kSW5kZXggPSBjb250ZXh0Lm1lc3NhZ2UudGV4dC5sZW5ndGg7XG4gICAgICAgIGUxLnNjb3JlID0gMC4xO1xuICAgICAgICB1LmVudGl0aWVzID0gW107XG4gICAgICAgIGNhbGxiYWNrKHVuZGVmaW5lZCwgdSk7XG4gICAgfTtcbiAgICByZXR1cm4gU2ltcGxlUmVjb2duaXplcjtcbn0oKSk7XG52YXIgU2ltcGxlVXBEb3duUmVjb2duaXplciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2ltcGxlVXBEb3duUmVjb2duaXplcigpIHtcbiAgICB9XG4gICAgU2ltcGxlVXBEb3duUmVjb2duaXplci5wcm90b3R5cGUucmVjb2duaXplID0gZnVuY3Rpb24gKGNvbnRleHQsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciB1ID0ge307XG4gICAgICAgIGRlYnVnbG9nKFwicmVjb2duaXppbmcgXCIgKyBjb250ZXh0Lm1lc3NhZ2UudGV4dCk7XG4gICAgICAgIGlmIChjb250ZXh0Lm1lc3NhZ2UudGV4dC5pbmRleE9mKFwiZG93blwiKSA+PSAwKSB7XG4gICAgICAgICAgICB1LmludGVudCA9IFwiaW50ZW50LmRvd25cIjtcbiAgICAgICAgICAgIHUuc2NvcmUgPSAwLjk7XG4gICAgICAgICAgICB2YXIgZTEgPSB7fTtcbiAgICAgICAgICAgIGUxLnN0YXJ0SW5kZXggPSBcInN0YXJ0IFwiLmxlbmd0aDtcbiAgICAgICAgICAgIGUxLmVuZEluZGV4ID0gY29udGV4dC5tZXNzYWdlLnRleHQubGVuZ3RoO1xuICAgICAgICAgICAgZTEuc2NvcmUgPSAwLjM7XG4gICAgICAgICAgICB1LmVudGl0aWVzID0gW2UxXTtcbiAgICAgICAgICAgIGNhbGxiYWNrKHVuZGVmaW5lZCwgdSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbnRleHQubWVzc2FnZS50ZXh0LmluZGV4T2YoXCJ1cFwiKSA+PSAwKSB7XG4gICAgICAgICAgICB1LmludGVudCA9IFwiaW50ZW50LnVwXCI7XG4gICAgICAgICAgICB1LnNjb3JlID0gMC45O1xuICAgICAgICAgICAgdmFyIGUxID0ge307XG4gICAgICAgICAgICBlMS5zdGFydEluZGV4ID0gXCJ1cFwiLmxlbmd0aDtcbiAgICAgICAgICAgIGUxLmVuZEluZGV4ID0gY29udGV4dC5tZXNzYWdlLnRleHQubGVuZ3RoO1xuICAgICAgICAgICAgZTEuc2NvcmUgPSAwLjM7XG4gICAgICAgICAgICB1LmVudGl0aWVzID0gW2UxXTtcbiAgICAgICAgICAgIGNhbGxiYWNrKHVuZGVmaW5lZCwgdSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZGVidWdsb2coJ3JlY29nbml6aW5nIG5vdGhpbmcnKTtcbiAgICAgICAgdS5pbnRlbnQgPSBcIk5vbmVcIjtcbiAgICAgICAgdS5zY29yZSA9IDAuMTtcbiAgICAgICAgdmFyIGUxID0ge307XG4gICAgICAgIGUxLnN0YXJ0SW5kZXggPSBcImV4aXQgXCIubGVuZ3RoO1xuICAgICAgICBlMS5lbmRJbmRleCA9IGNvbnRleHQubWVzc2FnZS50ZXh0Lmxlbmd0aDtcbiAgICAgICAgZTEuc2NvcmUgPSAwLjE7XG4gICAgICAgIHUuZW50aXRpZXMgPSBbXTtcbiAgICAgICAgY2FsbGJhY2sodW5kZWZpbmVkLCB1KTtcbiAgICB9O1xuICAgIHJldHVybiBTaW1wbGVVcERvd25SZWNvZ25pemVyO1xufSgpKTtcbnZhciBBbnlPYmplY3QgPSBPYmplY3Q7XG4vLyBnbG9iYWxUdW5uZWwuaW5pdGlhbGl6ZSh7XG4vLyAgaG9zdDogJ3Byb3h5LmV4eHhhbXBsZS5jb20nLFxuLy8gIHBvcnQ6IDgwODBcbi8vIH0pXG4vLyBDcmVhdGUgYm90IGFuZCBiaW5kIHRvIGNvbnNvbGVcbi8vIHZhciBjb25uZWN0b3IgPSBuZXcgaHRtbGNvbm5lY3Rvci5IVE1MQ29ubmVjdG9yKClcbi8vIGNvbm5lY3Rvci5zZXRBbnN3ZXJIb29rKGZ1bmN0aW9uIChzQW5zd2VyKSB7XG4vLyAgY29uc29sZS5sb2coJ0dvdCBhbnN3ZXIgOiAnICsgc0Fuc3dlciArICdcXG4nKVxuLy8gfSlcbnZhciBib3Q7XG4vLyBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbi8vICAgY29ubmVjdG9yLnByb2Nlc3NNZXNzYWdlKCdzdGFydCB1bml0IHRlc3QgQUJDICcpXG4vLyB9LCA1MDAwKVxudmFyIGZzID0gcmVxdWlyZSgnZnMnKTtcbnZhciBvSlNPTiA9IEpTT04ucGFyc2UoJycgKyBmcy5yZWFkRmlsZVN5bmMoJy4vcmVzb3VyY2VzL21vZGVsL2ludGVudHMuanNvbicpKTtcbnZhciBvUnVsZXMgPSBQbGFpblJlY29nbml6ZXIucGFyc2VSdWxlcyhvSlNPTik7XG4vLyB2YXIgUmVjb2duaXplciA9IG5ldyAocmVjb2duaXplci5SZWdFeHBSZWNvZ25pemVyKShvUnVsZXMpO1xuZnVuY3Rpb24gbG9nUXVlcnkoc2Vzc2lvbiwgaW50ZW50LCByZXN1bHQpIHtcbiAgICBmcy5hcHBlbmRGaWxlKCcuL2xvZ3Mvc2hvd21lcXVlcmllcy50eHQnLCBcIlxcblwiICsgSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICB0ZXh0OiBzZXNzaW9uLm1lc3NhZ2UudGV4dCxcbiAgICAgICAgdGltZXN0YW1wOiBzZXNzaW9uLm1lc3NhZ2UudGltZXN0YW1wLFxuICAgICAgICBpbnRlbnQ6IGludGVudCxcbiAgICAgICAgcmVzOiByZXN1bHQgJiYgcmVzdWx0Lmxlbmd0aCAmJiBNYXRjaC5Ub29sTWF0Y2guZHVtcE5pY2UocmVzdWx0WzBdKSB8fCBcIjBcIixcbiAgICAgICAgY29udmVyc2F0aW9uSWQ6IHNlc3Npb24ubWVzc2FnZS5hZGRyZXNzXG4gICAgICAgICAgICAmJiBzZXNzaW9uLm1lc3NhZ2UuYWRkcmVzcy5jb252ZXJzYXRpb25cbiAgICAgICAgICAgICYmIHNlc3Npb24ubWVzc2FnZS5hZGRyZXNzLmNvbnZlcnNhdGlvbi5pZCB8fCBcIlwiLFxuICAgICAgICB1c2VyaWQ6IHNlc3Npb24ubWVzc2FnZS5hZGRyZXNzXG4gICAgICAgICAgICAmJiBzZXNzaW9uLm1lc3NhZ2UuYWRkcmVzcy51c2VyXG4gICAgICAgICAgICAmJiBzZXNzaW9uLm1lc3NhZ2UuYWRkcmVzcy51c2VyLmlkIHx8IFwiXCJcbiAgICB9KSwgZnVuY3Rpb24gKGVyciwgcmVzKSB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgIGRlYnVnbG9nKFwibG9nZ2luZyBmYWlsZWQgXCIgKyBlcnIpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5mdW5jdGlvbiBsb2dRdWVyeVdoYXRJcyhzZXNzaW9uLCBpbnRlbnQsIHJlc3VsdCkge1xuICAgIGZzLmFwcGVuZEZpbGUoJy4vbG9ncy9zaG93bWVxdWVyaWVzLnR4dCcsIFwiXFxuXCIgKyBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIHRleHQ6IHNlc3Npb24ubWVzc2FnZS50ZXh0LFxuICAgICAgICB0aW1lc3RhbXA6IHNlc3Npb24ubWVzc2FnZS50aW1lc3RhbXAsXG4gICAgICAgIGludGVudDogaW50ZW50LFxuICAgICAgICByZXM6IHJlc3VsdCAmJiByZXN1bHQubGVuZ3RoICYmIFdoYXRJcy5kdW1wTmljZShyZXN1bHRbMF0pIHx8IFwiMFwiLFxuICAgICAgICBjb252ZXJzYXRpb25JZDogc2Vzc2lvbi5tZXNzYWdlLmFkZHJlc3NcbiAgICAgICAgICAgICYmIHNlc3Npb24ubWVzc2FnZS5hZGRyZXNzLmNvbnZlcnNhdGlvblxuICAgICAgICAgICAgJiYgc2Vzc2lvbi5tZXNzYWdlLmFkZHJlc3MuY29udmVyc2F0aW9uLmlkIHx8IFwiXCIsXG4gICAgICAgIHVzZXJpZDogc2Vzc2lvbi5tZXNzYWdlLmFkZHJlc3NcbiAgICAgICAgICAgICYmIHNlc3Npb24ubWVzc2FnZS5hZGRyZXNzLnVzZXJcbiAgICAgICAgICAgICYmIHNlc3Npb24ubWVzc2FnZS5hZGRyZXNzLnVzZXIuaWQgfHwgXCJcIlxuICAgIH0pLCBmdW5jdGlvbiAoZXJyLCByZXMpIHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgZGVidWdsb2coXCJsb2dnaW5nIGZhaWxlZCBcIiArIGVycik7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbnZhciBnd29yZHMgPSB7fTtcbi8qKlxuICogQ29uc3RydWN0IGEgYm90XG4gKiBAcGFyYW0gY29ubmVjdG9yIHtDb25uZWN0b3J9IHRoZSBjb25uZWN0b3IgdG8gdXNlXG4gKiBIVE1MQ29ubmVjdG9yXG4gKiBvciBjb25uZWN0b3IgPSBuZXcgYnVpbGRlci5Db25zb2xlQ29ubmVjdG9yKCkubGlzdGVuKClcbiAqL1xuZnVuY3Rpb24gbWFrZUJvdChjb25uZWN0b3IpIHtcbiAgICBib3QgPSBuZXcgYnVpbGRlci5Vbml2ZXJzYWxCb3QoY29ubmVjdG9yKTtcbiAgICAvLyBDcmVhdGUgTFVJUyByZWNvZ25pemVyIHRoYXQgcG9pbnRzIGF0IG91ciBtb2RlbCBhbmQgYWRkIGl0IGFzIHRoZSByb290ICcvJyBkaWFsb2cgZm9yIG91ciBDb3J0YW5hIEJvdC5cbiAgICAvLyB2YXIgbW9kZWwgPSBzZW5zaXRpdmUubW9kZWx1cmw7XG4gICAgLy8gdmFyIG1vZGVsID0gJ2h0dHBzOi8vYXBpLnByb2plY3RveGZvcmQuYWkvbHVpcy92Mi4wL2FwcHMvYzQxM2IyZWYtMzgyYy00NWJkLThmZjAtZjc2ZDYwZTJhODIxP3N1YnNjcmlwdGlvbi1rZXk9YzIxMzk4YjU5ODBhNGNlMDlmNDc0YmJmZWU5M2I4OTImcT0nXG4gICAgdmFyIHJlY29nbml6ZXIgPSBuZXcgUGxhaW5SZWNvZ25pemVyLlJlZ0V4cFJlY29nbml6ZXIob1J1bGVzKTtcbiAgICB2YXIgZGlhbG9nID0gbmV3IGJ1aWxkZXIuSW50ZW50RGlhbG9nKHsgcmVjb2duaXplcnM6IFtyZWNvZ25pemVyXSB9KTtcbiAgICAvLyBkaWFsb2cub25CZWdpbihmdW5jdGlvbihzZXNzaW9uLGFyZ3MpIHtcbiAgICAvLyBjb25zb2xlLmxvZyhcImJlZ2lubmluZyAuLi5cIilcbiAgICAvLyBzZXNzaW9uLmRpYWxvZ0RhdGEucmV0cnlQcm9tcHQgPSBhcmdzICYmIGFyZ3MucmV0cnlQcm9tcHQgfHwgXCJJIGFtIHNvcnJ5XCJcbiAgICAvLyBzZXNzaW9uLnNlbmQoXCJXaGF0IGRvIHlvdSB3YW50P1wiKVxuICAgIC8vXG4gICAgLy8gfSlcbiAgICB2YXIgZGlhbG9nVXBEb3duID0gbmV3IGJ1aWxkZXIuSW50ZW50RGlhbG9nKHsgcmVjb2duaXplcnM6IFtuZXcgU2ltcGxlVXBEb3duUmVjb2duaXplcigpXSB9KTtcbiAgICBib3QuZGlhbG9nKCcvdXBkb3duJywgZGlhbG9nVXBEb3duKTtcbiAgICBkaWFsb2dVcERvd24ub25CZWdpbihmdW5jdGlvbiAoc2Vzc2lvbikge1xuICAgICAgICBzZXNzaW9uLnNlbmQoXCJIaSB0aGVyZSwgdXBkb3duIGlzIHdhaXRpbmcgZm9yIHlvdVwiKTtcbiAgICB9KTtcbiAgICBkaWFsb2dVcERvd24ubWF0Y2hlcygnaW50ZW50LnVwJywgW1xuICAgICAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgYXJncywgbmV4dCkge1xuICAgICAgICAgICAgc2Vzc2lvbi5kaWFsb2dEYXRhLmFiYyA9IGFyZ3MgfHwge307XG4gICAgICAgICAgICBidWlsZGVyLlByb21wdHMudGV4dChzZXNzaW9uLCAneW91IHdhbnQgdG8gZ28gdXAnKTtcbiAgICAgICAgfSxcbiAgICAgICAgZnVuY3Rpb24gKHNlc3Npb24sIHJlc3VsdHMsIG5leHQpIHtcbiAgICAgICAgICAgIHNlc3Npb24uZGlhbG9nRGF0YS5hYmMgPSByZXN1bHRzLnJlcG9uc2U7XG4gICAgICAgICAgICBuZXh0KCk7XG4gICAgICAgIH0sXG4gICAgICAgIGZ1bmN0aW9uIChzZXNzaW9uLCByZXN1bHRzKSB7XG4gICAgICAgICAgICBzZXNzaW9uLmVuZERpYWxvZ1dpdGhSZXN1bHQoeyByZXNwb25zZTogc2Vzc2lvbi5kaWFsb2dEYXRhLmFiYyB9KTtcbiAgICAgICAgfVxuICAgIF0pO1xuICAgIGRpYWxvZ1VwRG93bi5tYXRjaGVzKCdpbnRlbnQuZG93bicsIFtcbiAgICAgICAgZnVuY3Rpb24gKHNlc3Npb24sIGFyZ3MsIG5leHQpIHtcbiAgICAgICAgICAgIHNlc3Npb24uZGlhbG9nRGF0YS5hYmMgPSBhcmdzIHx8IHt9O1xuICAgICAgICAgICAgYnVpbGRlci5Qcm9tcHRzLnRleHQoc2Vzc2lvbiwgJ3lvdSB3YW50IHRvIGdvIGRvd24hJyk7XG4gICAgICAgIH0sXG4gICAgICAgIGZ1bmN0aW9uIChzZXNzaW9uLCByZXN1bHRzLCBuZXh0KSB7XG4gICAgICAgICAgICBzZXNzaW9uLmRpYWxvZ0RhdGEuYWJjID0gLTE7IC8vIHJlc3VsdHMucmVwb25zZTtcbiAgICAgICAgICAgIG5leHQoKTtcbiAgICAgICAgfSxcbiAgICAgICAgZnVuY3Rpb24gKHNlc3Npb24sIHJlc3VsdHMpIHtcbiAgICAgICAgICAgIHNlc3Npb24uc2VuZChcInN0aWxsIGdvaW5nIGRvd24/XCIpO1xuICAgICAgICB9XG4gICAgXSk7XG4gICAgZGlhbG9nVXBEb3duLm9uRGVmYXVsdChmdW5jdGlvbiAoc2Vzc2lvbikge1xuICAgICAgICBsb2dRdWVyeShzZXNzaW9uLCBcIm9uRGVmYXVsdFwiKTtcbiAgICAgICAgc2Vzc2lvbi5zZW5kKFwiWW91IGFyZSB0cmFwcGVkIGluIGEgZGlhbG9nIHdoaWNoIG9ubHkgdW5kZXJzdGFuZHMgdXAgYW5kIGRvd24sIG9uZSBvZiB0aGVtIHdpbGwgZ2V0IHlvdSBvdXRcIik7XG4gICAgICAgIC8vYnVpbGRlci5EaWFsb2dBY3Rpb24uc2VuZCgnSVxcJ20gc29ycnkgSSBkaWRuXFwndCB1bmRlcnN0YW5kLiBJIGNhbiBvbmx5IHNob3cgc3RhcnQgYW5kIHJpbmcnKTtcbiAgICB9KTtcbiAgICBib3QuZGlhbG9nKCcvdHJhaW4nLCBbXG4gICAgICAgIGZ1bmN0aW9uIChzZXNzaW9uLCBhcmdzLCBuZXh0KSB7XG4gICAgICAgICAgICBzZXNzaW9uLmRpYWxnb0RhdGEuYWJjID0gYXJncyB8fCB7fTtcbiAgICAgICAgICAgIGJ1aWxkZXIuUHJvbXB0cy50ZXh0KHNlc3Npb24sICdEbyB5b3Ugd2FudCB0byB0cmFpbiBtZScpO1xuICAgICAgICB9LFxuICAgICAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgcmVzdWx0cywgbmV4dCkge1xuICAgICAgICAgICAgc2Vzc2lvbi5kaWFsb2dEYXRhLmFiYyA9IHJlc3VsdHMucmVwb25zZTtcbiAgICAgICAgfSxcbiAgICAgICAgZnVuY3Rpb24gKHNlc3Npb24sIHJlc3VsdHMpIHtcbiAgICAgICAgICAgIHNlc3Npb24uZW5kRGlhbG9nV2l0aFJlc3VsdCh7IHJlc3BvbnNlOiBzZXNzaW9uLkRpYWxvZ0RhdGEuYWJjIH0pO1xuICAgICAgICB9XG4gICAgXSk7XG4gICAgYm90LmRpYWxvZygnLycsIGRpYWxvZyk7XG4gICAgZGlhbG9nLm1hdGNoZXMoJ1Nob3dNZScsIFtcbiAgICAgICAgZnVuY3Rpb24gKHNlc3Npb24sIGFyZ3MsIG5leHQpIHtcbiAgICAgICAgICAgIHZhciBpc0NvbWJpbmVkSW5kZXggPSB7fTtcbiAgICAgICAgICAgIHZhciBvTmV3RW50aXR5O1xuICAgICAgICAgICAgLy8gZXhwZWN0aW5nIGVudGl0eSBBMVxuICAgICAgICAgICAgZGVidWdsb2coXCJTaG93IEVudGl0eVwiKTtcbiAgICAgICAgICAgIGRlYnVnbG9nKCdyYXc6ICcgKyBKU09OLnN0cmluZ2lmeShhcmdzLmVudGl0aWVzKSwgdW5kZWZpbmVkLCAyKTtcbiAgICAgICAgICAgIHZhciBhMSA9IGJ1aWxkZXIuRW50aXR5UmVjb2duaXplci5maW5kRW50aXR5KGFyZ3MuZW50aXRpZXMsICdBMScpO1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IEFuYWx5emUuYW5hbHl6ZUFsbChhMS5lbnRpdHksIHRoZU1vZGVsLm1SdWxlcywgdGhlTW9kZWwudG9vbHMsIGd3b3Jkcyk7XG4gICAgICAgICAgICBsb2dRdWVyeShzZXNzaW9uLCAnU2hvd01lJywgcmVzdWx0KTtcbiAgICAgICAgICAgIC8vIHRlc3QuZXhwZWN0KDMpXG4gICAgICAgICAgICAvLyAgdGVzdC5kZWVwRXF1YWwocmVzdWx0LndlaWdodCwgMTIwLCAnY29ycmVjdCB3ZWlnaHQnKTtcbiAgICAgICAgICAgIGlmICghcmVzdWx0IHx8IHJlc3VsdC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICBuZXh0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBkZWJ1Z2xvZygncmVzdWx0IDogJyArIEpTT04uc3RyaW5naWZ5KHJlc3VsdCwgdW5kZWZpbmVkLCAyKSk7XG4gICAgICAgICAgICBkZWJ1Z2xvZygnYmVzdCByZXN1bHQgOiAnICsgSlNPTi5zdHJpbmdpZnkocmVzdWx0WzBdIHx8IHt9LCB1bmRlZmluZWQsIDIpKTtcbiAgICAgICAgICAgIGRlYnVnbG9nKCd0b3AgOiAnICsgTWF0Y2guVG9vbE1hdGNoLmR1bXBXZWlnaHRzVG9wKHJlc3VsdCwgeyB0b3A6IDMgfSkpO1xuICAgICAgICAgICAgaWYgKEFuYWx5emUuaXNDb21wbGV0ZShyZXN1bHRbMF0pKSB7XG4gICAgICAgICAgICAgICAgc2Vzc2lvbi5kaWFsb2dEYXRhLnJlc3VsdCA9IHJlc3VsdFswXTtcbiAgICAgICAgICAgICAgICAvLyAgICBzZXNzaW9uLnNlbmQoJ1Nob3dpbmcgZW50aXR5IC4uLicpO1xuICAgICAgICAgICAgICAgIG5leHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKEFuYWx5emUuZ2V0UHJvbXB0KHJlc3VsdFswXSkpIHtcbiAgICAgICAgICAgICAgICB2YXIgcHJvbXB0ID0gQW5hbHl6ZS5nZXRQcm9tcHQocmVzdWx0WzBdKTtcbiAgICAgICAgICAgICAgICBzZXNzaW9uLmRpYWxvZ0RhdGEucmVzdWx0ID0gcmVzdWx0WzBdO1xuICAgICAgICAgICAgICAgIHNlc3Npb24uZGlhbG9nRGF0YS5wcm9tcHQgPSBwcm9tcHQ7XG4gICAgICAgICAgICAgICAgZGlhbG9nbG9nKFwiU2hvd01lXCIsIHNlc3Npb24sIHNlbmQoXCJOb3QgZW5vdWdoIGluZm9ybWF0aW9uIHN1cHBsaWVkOiBcIiArIE1hdGNoLlRvb2xNYXRjaC5kdW1wTmljZShzZXNzaW9uLmRpYWxvZ0RhdGEucmVzdWx0KSkpO1xuICAgICAgICAgICAgICAgIGJ1aWxkZXIuUHJvbXB0cy50ZXh0KHNlc3Npb24sIHByb21wdC50ZXh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBiZXN0ID0gcmVzdWx0Lmxlbmd0aCA/IE1hdGNoLlRvb2xNYXRjaC5kdW1wTmljZShyZXN1bHRbMF0pIDogXCI8bm90aGluZz5cIjtcbiAgICAgICAgICAgICAgICBkaWFsb2dsb2coXCJTaG93TWVcIiwgc2Vzc2lvbiwgc2VuZCgnSSBkaWQgbm90IHVuZGVyc3RhbmQgdGhpcycgKyBiZXN0KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGZ1bmN0aW9uIChzZXNzaW9uLCByZXN1bHRzLCBuZXh0KSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gc2Vzc2lvbi5kaWFsb2dEYXRhLnJlc3VsdDtcbiAgICAgICAgICAgIGlmICghcmVzdWx0IHx8IHJlc3VsdC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICBuZXh0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocmVzdWx0cy5yZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIC8vIHNvbWUgcHJvbXB0aW5nXG4gICAgICAgICAgICAgICAgQW5hbHl6ZS5zZXRQcm9tcHQoc2Vzc2lvbi5kaWFsb2dEYXRhLnJlc3VsdCwgc2Vzc2lvbi5kaWFsb2dEYXRhLnByb21wdCwgcmVzdWx0cy5yZXNwb25zZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoQW5hbHl6ZS5pc0NvbXBsZXRlKHNlc3Npb24uZGlhbG9nRGF0YS5yZXN1bHQpKSB7XG4gICAgICAgICAgICAgICAgbmV4dCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoQW5hbHl6ZS5nZXRQcm9tcHQoc2Vzc2lvbi5kaWFsb2dEYXRhLnJlc3VsdCkpIHtcbiAgICAgICAgICAgICAgICB2YXIgcHJvbXB0ID0gQW5hbHl6ZS5nZXRQcm9tcHQoc2Vzc2lvbi5kaWFsb2dEYXRhLnJlc3VsdCk7XG4gICAgICAgICAgICAgICAgc2Vzc2lvbi5kaWFsb2dEYXRhLnByb21wdCA9IHByb21wdDtcbiAgICAgICAgICAgICAgICBidWlsZGVyLlByb21wdHMudGV4dChzZXNzaW9uLCBwcm9tcHQudGV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGZ1bmN0aW9uIChzZXNzaW9uLCByZXN1bHRzLCBuZXh0KSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gc2Vzc2lvbi5kaWFsb2dEYXRhLnJlc3VsdDtcbiAgICAgICAgICAgIGlmIChyZXN1bHRzLnJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgLy8gc29tZSBwcm9tcHRpbmdcbiAgICAgICAgICAgICAgICBBbmFseXplLnNldFByb21wdChzZXNzaW9uLmRpYWxvZ0RhdGEucmVzdWx0LCBzZXNzaW9uLmRpYWxvZ0RhdGEucHJvbXB0LCByZXN1bHRzLnJlc3BvbnNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChBbmFseXplLmlzQ29tcGxldGUoc2Vzc2lvbi5kaWFsb2dEYXRhLnJlc3VsdCkpIHtcbiAgICAgICAgICAgICAgICB2YXIgZXhlYyA9IEV4ZWNTZXJ2ZXIuZXhlY1Rvb2woc2Vzc2lvbi5kaWFsb2dEYXRhLnJlc3VsdCwgdGhlTW9kZWwucmVjb3Jkcyk7XG4gICAgICAgICAgICAgICAgdmFyIHJlcGx5ID0gbmV3IGJ1aWxkZXIuTWVzc2FnZShzZXNzaW9uKVxuICAgICAgICAgICAgICAgICAgICAudGV4dChleGVjLnRleHQpXG4gICAgICAgICAgICAgICAgICAgIC5hZGRFbnRpdHkoZXhlYy5hY3Rpb24pO1xuICAgICAgICAgICAgICAgIC8vIC5hZGRBdHRhY2htZW50KHsgZmFsbGJhY2tUZXh0OiBcIkkgZG9uJ3Qga25vd1wiLCBjb250ZW50VHlwZTogJ2ltYWdlL2pwZWcnLCBjb250ZW50VXJsOiBcInd3dy53b21iYXQub3JnXCIgfSk7XG4gICAgICAgICAgICAgICAgZGlhbG9nbG9nKFwiU2hvd01lXCIsIHNlc3Npb24sIHNlbmQocmVwbHkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChzZXNzaW9uLmRpYWxvZ0RhdGEucmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIGRpYWxvZ2xvZyhcIlNob3dNZVwiLCBzZXNzaW9uLCBzZW5kKFwiTm90IGVub3VnaCBpbmZvcm1hdGlvbiBzdXBwbGllZDogXCIgKyBNYXRjaC5Ub29sTWF0Y2guZHVtcE5pY2Uoc2Vzc2lvbi5kaWFsb2dEYXRhLnJlc3VsdCkpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGRpYWxvZ2xvZyhcIlNob3dNZVwiLCBzZXNzaW9uLCBzZW5kKFwiSSBkaWQgbm90IGdldCB3aGF0IHlvdSB3YW50XCIpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgXSk7XG4gICAgZGlhbG9nLm1hdGNoZXMoJ1doYXRJcycsIFtcbiAgICAgICAgZnVuY3Rpb24gKHNlc3Npb24sIGFyZ3MsIG5leHQpIHtcbiAgICAgICAgICAgIHZhciBpc0NvbWJpbmVkSW5kZXggPSB7fTtcbiAgICAgICAgICAgIHZhciBvTmV3RW50aXR5O1xuICAgICAgICAgICAgLy8gZXhwZWN0aW5nIGVudGl0eSBBMVxuICAgICAgICAgICAgdmFyIG1lc3NhZ2UgPSBzZXNzaW9uLm1lc3NhZ2UudGV4dDtcbiAgICAgICAgICAgIGRlYnVnbG9nKFwiV2hhdElzIEVudGl0aWVzXCIpO1xuICAgICAgICAgICAgZGVidWdsb2coJ3JhdzogJyArIEpTT04uc3RyaW5naWZ5KGFyZ3MuZW50aXRpZXMpLCB1bmRlZmluZWQsIDIpO1xuICAgICAgICAgICAgdmFyIGNhdGVnb3J5RW50aXR5ID0gYnVpbGRlci5FbnRpdHlSZWNvZ25pemVyLmZpbmRFbnRpdHkoYXJncy5lbnRpdGllcywgJ2NhdGVnb3J5Jyk7XG4gICAgICAgICAgICB2YXIgY2F0ZWdvcnkgPSBjYXRlZ29yeUVudGl0eS5lbnRpdHk7XG4gICAgICAgICAgICB2YXIgYTEgPSBidWlsZGVyLkVudGl0eVJlY29nbml6ZXIuZmluZEVudGl0eShhcmdzLmVudGl0aWVzLCAnQTEnKTtcbiAgICAgICAgICAgIHZhciBjYXQgPSBXaGF0SXMuYW5hbHl6ZUNhdGVnb3J5KGNhdGVnb3J5LCB0aGVNb2RlbC5tUnVsZXMsIG1lc3NhZ2UpO1xuICAgICAgICAgICAgaWYgKCFjYXQpIHtcbiAgICAgICAgICAgICAgICBzZXNzaW9uLnNlbmQoJ0kgZG9uXFwndCBrbm93IGFueXRoaW5nIGFib3V0IFwiJyArIGNhdGVnb3J5ICsgJ1wiJyk7XG4gICAgICAgICAgICAgICAgLy8gbmV4dCgpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlYnVnbG9nKCdjYXRlZ29yeSBpZGVudGlmaWVkOicgKyBjYXQpO1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFdoYXRJcy5yZXNvbHZlQ2F0ZWdvcnkoY2F0LCBhMS5lbnRpdHksIHRoZU1vZGVsLm1SdWxlcywgdGhlTW9kZWwucmVjb3Jkcyk7XG4gICAgICAgICAgICBkZWJ1Z2xvZygnd2hhdGlzIHJlc3VsdDonICsgSlNPTi5zdHJpbmdpZnkocmVzdWx0KSk7XG4gICAgICAgICAgICBsb2dRdWVyeVdoYXRJcyhzZXNzaW9uLCAnV2hhdElzJywgcmVzdWx0KTtcbiAgICAgICAgICAgIHZhciBpbmRpcyA9IFdoYXRJcy5pc0luZGlzY3JpbWluYXRlUmVzdWx0KHJlc3VsdCk7XG4gICAgICAgICAgICBpZiAoaW5kaXMpIHtcbiAgICAgICAgICAgICAgICBzZXNzaW9uLnNlbmQoaW5kaXMpO1xuICAgICAgICAgICAgICAgIC8vIG5leHQoKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXJlc3VsdCB8fCByZXN1bHQubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgZGlhbG9nbG9nKFwiV2hhdElzXCIsIHNlc3Npb24sIHNlbmQoJ0kgZG9uXFwndCBrbm93IGFueXRoaW5nIGFib3V0IFwiJyArIGNhdCArIFwiIChcIiArIGNhdGVnb3J5ICsgJylcXFwiIGluIHJlbGF0aW9uIHRvIFwiJyArIGExLmVudGl0eSArICdcIicpKTtcbiAgICAgICAgICAgICAgICAvLyBuZXh0KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gZGVidWdsb2coJ3Jlc3VsdCA6ICcgKyBKU09OLnN0cmluZ2lmeShyZXN1bHQsIHVuZGVmaW5lZCwgMikpO1xuICAgICAgICAgICAgICAgIGRlYnVnbG9nKCdiZXN0IHJlc3VsdCA6ICcgKyBKU09OLnN0cmluZ2lmeShyZXN1bHRbMF0gfHwge30sIHVuZGVmaW5lZCwgMikpO1xuICAgICAgICAgICAgICAgIGRlYnVnbG9nKCd0b3AgOiAnICsgV2hhdElzLmR1bXBXZWlnaHRzVG9wKHJlc3VsdCwgeyB0b3A6IDMgfSkpO1xuICAgICAgICAgICAgICAgIC8vIFRPRE8gY2xlYW5zZWQgc2VudGVuY2VcbiAgICAgICAgICAgICAgICBkaWFsb2dsb2coXCJXaGF0SXNcIiwgc2Vzc2lvbiwgc2VuZCgnVGhlICcgKyBjYXRlZ29yeSArICcgb2YgJyArIGExLmVudGl0eSArICcgaXMgJyArIHJlc3VsdFswXS5yZXN1bHQgKyBcIlxcblwiKSk7IC8vICArIEpTT04uc3RyaW5naWZ5KHJlc3VsdFswXSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgXSk7XG4gICAgZGlhbG9nLm1hdGNoZXMoJ0xpc3RBbGwnLCBbXG4gICAgICAgIGZ1bmN0aW9uIChzZXNzaW9uLCBhcmdzLCBuZXh0KSB7XG4gICAgICAgICAgICB2YXIgaXNDb21iaW5lZEluZGV4ID0ge307XG4gICAgICAgICAgICB2YXIgb05ld0VudGl0eTtcbiAgICAgICAgICAgIC8vIGV4cGVjdGluZyBlbnRpdHkgQTFcbiAgICAgICAgICAgIHZhciBtZXNzYWdlID0gc2Vzc2lvbi5tZXNzYWdlLnRleHQ7XG4gICAgICAgICAgICBkZWJ1Z2xvZyhcIkludGVudCA6IExpc3RBbGxcIik7XG4gICAgICAgICAgICBkZWJ1Z2xvZygncmF3OiAnICsgSlNPTi5zdHJpbmdpZnkoYXJncy5lbnRpdGllcyksIHVuZGVmaW5lZCwgMik7XG4gICAgICAgICAgICB2YXIgY2F0ZWdvcnlFbnRpdHkgPSBidWlsZGVyLkVudGl0eVJlY29nbml6ZXIuZmluZEVudGl0eShhcmdzLmVudGl0aWVzLCAnY2F0ZWdvcmllcycpO1xuICAgICAgICAgICAgdmFyIGNhdGVnb3J5ID0gY2F0ZWdvcnlFbnRpdHkuZW50aXR5O1xuICAgICAgICAgICAgdmFyIGExID0gYnVpbGRlci5FbnRpdHlSZWNvZ25pemVyLmZpbmRFbnRpdHkoYXJncy5lbnRpdGllcywgJ2luc3RoJyk7XG4gICAgICAgICAgICBpZiAoY2F0ZWdvcnkgPT09IFwiY2F0ZWdvcmllc1wiKSB7XG4gICAgICAgICAgICAgICAgLy8gZG8gd2UgaGF2ZSBhIGZpbHRlciA/XG4gICAgICAgICAgICAgICAgdmFyIGRvbWFpbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBpZiAoYTEgJiYgYTEuZW50aXR5KSB7XG4gICAgICAgICAgICAgICAgICAgIGRvbWFpbiA9IExpc3RBbGwuaW5mZXJEb21haW4odGhlTW9kZWwsIGExLmVudGl0eSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghZG9tYWluKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXMgPSB0aGVNb2RlbC5jYXRlZ29yeS5qb2luKFwiO1xcblwiKTtcbiAgICAgICAgICAgICAgICAgICAgZGlhbG9nbG9nKFwiTGlzdEFsbFwiLCBzZXNzaW9uLCBzZW5kKFwibXkgY2F0ZWdvcmllcyBhcmUgLi4uXFxuXCIgKyByZXMpKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFSZXMgPSBNb2RlbC5nZXRDYXRlZ29yaWVzRm9yRG9tYWluKHRoZU1vZGVsLCBkb21haW4pO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzID0gYVJlcy5qb2luKFwiO1xcblwiKTtcbiAgICAgICAgICAgICAgICAgICAgZGlhbG9nbG9nKFwiTGlzdEFsbFwiLCBzZXNzaW9uLCBzZW5kKFwibXkgY2F0ZWdvcmllcyBpbiBkb21haW4gXFxcIlwiICsgZG9tYWluICsgXCJcXFwiIGFyZSAuLi5cXG5cIiArIHJlcykpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNhdGVnb3J5ID09PSBcImRvbWFpbnNcIikge1xuICAgICAgICAgICAgICAgIHZhciByZXMgPSB0aGVNb2RlbC5kb21haW5zLmpvaW4oXCI7XFxuXCIpO1xuICAgICAgICAgICAgICAgIHNlc3Npb24uc2VuZChcIm15IGRvbWFpbnMgYXJlIC4uLlxcblwiICsgcmVzKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY2F0ZWdvcnkgPT09IFwidG9vbHNcIikge1xuICAgICAgICAgICAgICAgIHZhciByZXMgPSB0aGVNb2RlbC50b29scy5tYXAoZnVuY3Rpb24gKG9Ub29sKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvVG9vbC5uYW1lO1xuICAgICAgICAgICAgICAgIH0pLmpvaW4oXCI7XFxuXCIpO1xuICAgICAgICAgICAgICAgIGRpYWxvZ2xvZyhcIkxpc3RBbGxcIiwgc2Vzc2lvbiwgc2VuZChcIm15IHRvb2xzIGFyZSAuLi5cXG5cIiArIHJlcykpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBjYXQgPSBXaGF0SXMuYW5hbHl6ZUNhdGVnb3J5KGNhdGVnb3J5LCB0aGVNb2RlbC5tUnVsZXMsIG1lc3NhZ2UpO1xuICAgICAgICAgICAgaWYgKCFjYXQpIHtcbiAgICAgICAgICAgICAgICBkaWFsb2dsb2coXCJMaXN0QWxsXCIsIHNlc3Npb24sIHNlbmQoJ0kgZG9uXFwndCBrbm93IGFueXRoaW5nIGFib3V0IFwiJyArIGNhdGVnb3J5ICsgJ1wiJykpO1xuICAgICAgICAgICAgICAgIC8vIG5leHQoKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWJ1Z2xvZygnY2F0ZWdvcnkgaWRlbnRpZmllZDonICsgY2F0KTtcbiAgICAgICAgICAgIGlmIChhMSAmJiBhMS5lbnRpdHkpIHtcbiAgICAgICAgICAgICAgICBkZWJ1Z2xvZygnZ290IGZpbHRlcjonICsgYTEuZW50aXR5KTtcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0MSA9IExpc3RBbGwubGlzdEFsbFdpdGhDb250ZXh0KGNhdCwgYTEuZW50aXR5LCB0aGVNb2RlbC5tUnVsZXMsIHRoZU1vZGVsLnJlY29yZHMpO1xuICAgICAgICAgICAgICAgIC8vIFRPRE8gY2xhc3NpZnlpbmcgdGhlIHN0cmluZyB0d2ljZSBpcyBhIHRlcnJpYmxlIHdhc3RlXG4gICAgICAgICAgICAgICAgaWYgKCFyZXN1bHQxLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBkZWJ1Z2xvZygnZ29pbmcgZm9yIGhhdmluZycpO1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQxID0gTGlzdEFsbC5saXN0QWxsSGF2aW5nQ29udGV4dChjYXQsIGExLmVudGl0eSwgdGhlTW9kZWwubVJ1bGVzLCB0aGVNb2RlbC5yZWNvcmRzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGVidWdsb2coJ2xpc3RhbGwgcmVzdWx0OicgKyBKU09OLnN0cmluZ2lmeShyZXN1bHQxKSk7XG4gICAgICAgICAgICAgICAgdmFyIGpvaW5yZXN1bHRzID0gTGlzdEFsbC5qb2luUmVzdWx0cyhyZXN1bHQxKTtcbiAgICAgICAgICAgICAgICBsb2dRdWVyeVdoYXRJcyhzZXNzaW9uLCAnTGlzdEFsbCcsIHJlc3VsdDEpO1xuICAgICAgICAgICAgICAgIGlmIChqb2lucmVzdWx0cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgZGlhbG9nbG9nKFwiTGlzdEFsbFwiLCBzZXNzaW9uLCBzZW5kKFwidGhlIFwiICsgY2F0ZWdvcnkgKyBcIiBmb3IgXCIgKyBhMS5lbnRpdHkgKyBcIiBhcmUgLi4uXFxuXCIgKyBqb2lucmVzdWx0cy5qb2luKFwiO1xcblwiKSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZGlhbG9nbG9nKFwiTGlzdEFsbFwiLCBzZXNzaW9uLCBzZW5kKFwiaSBkaWQgbm90IGZpbmQgYW55IFwiICsgY2F0ZWdvcnkgKyBcIiBmb3IgXCIgKyBhMS5lbnRpdHkgKyBcIi5cXG5cIiArIGpvaW5yZXN1bHRzLmpvaW4oXCI7XFxuXCIpKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIG5vIGVudGl0eSwgZS5nLiBsaXN0IGFsbCBjb3VudHJpZXNcbiAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBMaXN0QWxsLmxpc3RBbGxIYXZpbmdDb250ZXh0KGNhdCwgY2F0LCB0aGVNb2RlbC5tUnVsZXMsIHRoZU1vZGVsLnJlY29yZHMpO1xuICAgICAgICAgICAgICAgIGxvZ1F1ZXJ5V2hhdElzKHNlc3Npb24sICdMaXN0QWxsJywgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBkZWJ1Z2xvZygnbGlzdGFsbCByZXN1bHQ6JyArIEpTT04uc3RyaW5naWZ5KHJlc3VsdCkpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgam9pbnJlc3VsdHMgPSBMaXN0QWxsLmpvaW5SZXN1bHRzKHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXNwb25zZSA9IFwidGhlIFwiICsgY2F0ZWdvcnkgKyBcIiBhcmUgLi4uXFxuXCIgKyBqb2lucmVzdWx0cy5qb2luKFwiO1xcblwiKTtcbiAgICAgICAgICAgICAgICAgICAgZGlhbG9nbG9nKFwiTGlzdEFsbFwiLCBzZXNzaW9uLCBzZW5kKHJlc3BvbnNlKSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXNwb25zZSA9IFwiRm91bmQgbm8gZGF0YSBoYXZpbmcgXFxcIlwiICsgY2F0ICsgXCJcXFwiXCI7XG4gICAgICAgICAgICAgICAgICAgIGRpYWxvZ2xvZyhcIkxpc3RBbGxcIiwgc2Vzc2lvbiwgc2VuZChyZXNwb25zZSkpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgXSk7XG4gICAgZGlhbG9nLm1hdGNoZXMoJ1dyb25nJywgW1xuICAgICAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgYXJncywgbmV4dCkge1xuICAgICAgICAgICAgZGlhbG9nTG9nZ2VyKHtcbiAgICAgICAgICAgICAgICBzZXNzaW9uOiBzZXNzaW9uLFxuICAgICAgICAgICAgICAgIGludGVudDogXCJXcm9uZ1wiLFxuICAgICAgICAgICAgICAgIHJlc3BvbnNlOiAnPGJlZ2luIHVwZG93bj4nXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHNlc3Npb24uYmVnaW5EaWFsb2coJy91cGRvd24nLCBzZXNzaW9uLnVzZXJEYXRhLmNvdW50KTtcbiAgICAgICAgfSxcbiAgICAgICAgZnVuY3Rpb24gKHNlc3Npb24sIHJlc3VsdHMsIG5leHQpIHtcbiAgICAgICAgICAgIHZhciBhbGFybSA9IHNlc3Npb24uZGlhbG9nRGF0YS5hbGFybTtcbiAgICAgICAgICAgIHNlc3Npb24uc2VuZChcImJhY2sgZnJvbSB3cm9uZyA6IFwiICsgSlNPTi5zdHJpbmdpZnkocmVzdWx0cykpO1xuICAgICAgICAgICAgbmV4dCgpO1xuICAgICAgICB9LFxuICAgICAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgcmVzdWx0cykge1xuICAgICAgICAgICAgc2Vzc2lvbi5zZW5kKCdlbmQgb2Ygd3JvbmcnKTtcbiAgICAgICAgfVxuICAgIF0pO1xuICAgIGRpYWxvZy5tYXRjaGVzKCdFeGl0JywgW1xuICAgICAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgYXJncywgbmV4dCkge1xuICAgICAgICAgICAgZGVidWdsb2coJ2V4aXQgOicpO1xuICAgICAgICAgICAgZGVidWdsb2coJ2V4aXQnICsgSlNPTi5zdHJpbmdpZnkoYXJncy5lbnRpdGllcykpO1xuICAgICAgICAgICAgZGlhbG9nTG9nZ2VyKHtcbiAgICAgICAgICAgICAgICBzZXNzaW9uOiBzZXNzaW9uLFxuICAgICAgICAgICAgICAgIGludGVudDogXCJFeGl0XCIsXG4gICAgICAgICAgICAgICAgcmVzcG9uc2U6ICd5b3UgYXJlIGluIGEgbG9naWMgbG9vcCdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgc2Vzc2lvbi5zZW5kKFwieW91IGFyZSBpbiBhIGxvZ2ljIGxvb3AgXCIpO1xuICAgICAgICB9XG4gICAgXSk7XG4gICAgZGlhbG9nLm1hdGNoZXMoJ0hlbHAnLCBbXG4gICAgICAgIGZ1bmN0aW9uIChzZXNzaW9uLCBhcmdzLCBuZXh0KSB7XG4gICAgICAgICAgICBkZWJ1Z2xvZygnaGVscCA6Jyk7XG4gICAgICAgICAgICBkZWJ1Z2xvZygnaGVscCcpO1xuICAgICAgICAgICAgc2Vzc2lvbi5zZW5kKFwiSSBrbm93IGFib3V0IC4uLi4gPGNhdGVnb3JpZXM+PlwiKTtcbiAgICAgICAgfVxuICAgIF0pO1xuICAgIC8vIEFkZCBpbnRlbnQgaGFuZGxlcnNcbiAgICBkaWFsb2cubWF0Y2hlcygndHJhaW4nLCBbXG4gICAgICAgIGZ1bmN0aW9uIChzZXNzaW9uLCBhcmdzLCBuZXh0KSB7XG4gICAgICAgICAgICBkZWJ1Z2xvZygndHJhaW4nKTtcbiAgICAgICAgICAgIC8vIFJlc29sdmUgYW5kIHN0b3JlIGFueSBlbnRpdGllcyBwYXNzZWQgZnJvbSBMVUlTLlxuICAgICAgICAgICAgdmFyIHRpdGxlID0gYnVpbGRlci5FbnRpdHlSZWNvZ25pemVyLmZpbmRFbnRpdHkoYXJncy5lbnRpdGllcywgJ2J1aWx0aW4uYWxhcm0udGl0bGUnKTtcbiAgICAgICAgICAgIHZhciB0aW1lID0gYnVpbGRlci5FbnRpdHlSZWNvZ25pemVyLnJlc29sdmVUaW1lKGFyZ3MuZW50aXRpZXMpO1xuICAgICAgICAgICAgdmFyIGFsYXJtID0gc2Vzc2lvbi5kaWFsb2dEYXRhLmFsYXJtID0ge1xuICAgICAgICAgICAgICAgIHRpdGxlOiB0aXRsZSA/IHRpdGxlLmVudGl0eSA6IG51bGwsXG4gICAgICAgICAgICAgICAgdGltZXN0YW1wOiB0aW1lID8gdGltZS5nZXRUaW1lKCkgOiBudWxsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLy8gUHJvbXB0IGZvciB0aXRsZVxuICAgICAgICAgICAgaWYgKCFhbGFybS50aXRsZSkge1xuICAgICAgICAgICAgICAgIGRpYWxvZ0xvZ2dlcih7XG4gICAgICAgICAgICAgICAgICAgIHNlc3Npb246IHNlc3Npb24sXG4gICAgICAgICAgICAgICAgICAgIGludGVudDogXCJ0cmFpblwiLFxuICAgICAgICAgICAgICAgICAgICByZXNwb25zZTogJ1doYXQgZmFjdCB3b3VsZCB5b3UgbGlrZSB0byB0cmFpbj8nXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgYnVpbGRlci5Qcm9tcHRzLnRleHQoc2Vzc2lvbiwgJ1doYXQgZmFjdCB3b3VsZCB5b3UgbGlrZSB0byB0cmFpbj8nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG5leHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZnVuY3Rpb24gKHNlc3Npb24sIHJlc3VsdHMsIG5leHQpIHtcbiAgICAgICAgICAgIHZhciBhbGFybSA9IHNlc3Npb24uZGlhbG9nRGF0YS5hbGFybTtcbiAgICAgICAgICAgIGlmIChyZXN1bHRzLnJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgYWxhcm0udGl0bGUgPSByZXN1bHRzLnJlc3BvbnNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gUHJvbXB0IGZvciB0aW1lICh0aXRsZSB3aWxsIGJlIGJsYW5rIGlmIHRoZSB1c2VyIHNhaWQgY2FuY2VsKVxuICAgICAgICAgICAgaWYgKGFsYXJtLnRpdGxlICYmICFhbGFybS50aW1lc3RhbXApIHtcbiAgICAgICAgICAgICAgICBidWlsZGVyLlByb21wdHMudGltZShzZXNzaW9uLCAnV2hhdCB0aW1lIHdvdWxkIHlvdSBsaWtlIHRvIHNldCB0aGUgYWxhcm0gZm9yPycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbmV4dCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgcmVzdWx0cykge1xuICAgICAgICAgICAgdmFyIGFsYXJtID0gc2Vzc2lvbi5kaWFsb2dEYXRhLmFsYXJtO1xuICAgICAgICAgICAgaWYgKHJlc3VsdHMucmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGltZSA9IGJ1aWxkZXIuRW50aXR5UmVjb2duaXplci5yZXNvbHZlVGltZShbcmVzdWx0cy5yZXNwb25zZV0pO1xuICAgICAgICAgICAgICAgIGFsYXJtLnRpbWVzdGFtcCA9IHRpbWUgPyB0aW1lLmdldFRpbWUoKSA6IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBTZXQgdGhlIGFsYXJtIChpZiB0aXRsZSBvciB0aW1lc3RhbXAgaXMgYmxhbmsgdGhlIHVzZXIgc2FpZCBjYW5jZWwpXG4gICAgICAgICAgICBpZiAoYWxhcm0udGl0bGUgJiYgYWxhcm0udGltZXN0YW1wKSB7XG4gICAgICAgICAgICAgICAgLy8gU2F2ZSBhZGRyZXNzIG9mIHdobyB0byBub3RpZnkgYW5kIHdyaXRlIHRvIHNjaGVkdWxlci5cbiAgICAgICAgICAgICAgICBhbGFybS5hZGRyZXNzID0gc2Vzc2lvbi5tZXNzYWdlLmFkZHJlc3M7XG4gICAgICAgICAgICAgICAgLy9hbGFybXNbYWxhcm0udGl0bGVdID0gYWxhcm07XG4gICAgICAgICAgICAgICAgLy8gU2VuZCBjb25maXJtYXRpb24gdG8gdXNlclxuICAgICAgICAgICAgICAgIHZhciBkYXRlID0gbmV3IERhdGUoYWxhcm0udGltZXN0YW1wKTtcbiAgICAgICAgICAgICAgICB2YXIgaXNBTSA9IGRhdGUuZ2V0SG91cnMoKSA8IDEyO1xuICAgICAgICAgICAgICAgIHNlc3Npb24uc2VuZCgnQ3JlYXRpbmcgYWxhcm0gbmFtZWQgXCIlc1wiIGZvciAlZC8lZC8lZCAlZDolMDJkJXMnLCBhbGFybS50aXRsZSwgZGF0ZS5nZXRNb250aCgpICsgMSwgZGF0ZS5nZXREYXRlKCksIGRhdGUuZ2V0RnVsbFllYXIoKSwgaXNBTSA/IGRhdGUuZ2V0SG91cnMoKSA6IGRhdGUuZ2V0SG91cnMoKSAtIDEyLCBkYXRlLmdldE1pbnV0ZXMoKSwgaXNBTSA/ICdhbScgOiAncG0nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHNlc3Npb24uc2VuZCgnT2suLi4gbm8gcHJvYmxlbS4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF0pO1xuICAgIGRpYWxvZy5vbkRlZmF1bHQoZnVuY3Rpb24gKHNlc3Npb24pIHtcbiAgICAgICAgbG9nUXVlcnkoc2Vzc2lvbiwgXCJvbkRlZmF1bHRcIik7XG4gICAgICAgIHZhciBlbGl6YSA9IGdldEVsaXphQm90KGdldENvbnZlcnNhdGlvbklkKHNlc3Npb24pKTtcbiAgICAgICAgdmFyIHJlcGx5ID0gZWxpemEudHJhbnNmb3JtKHNlc3Npb24ubWVzc2FnZS50ZXh0KTtcbiAgICAgICAgZGlhbG9nbG9nKFwiZWxpemFcIiwgc2Vzc2lvbiwgc2VuZChyZXBseSkpO1xuICAgICAgICAvL25ldyBFaWx6YWJvdFxuICAgICAgICAvL3Nlc3Npb24uc2VuZChcIkkgZG8gbm90IHVuZGVyc3RhbmQgdGhpcyBhdCBhbGxcIik7XG4gICAgICAgIC8vYnVpbGRlci5EaWFsb2dBY3Rpb24uc2VuZCgnSVxcJ20gc29ycnkgSSBkaWRuXFwndCB1bmRlcnN0YW5kLiBJIGNhbiBvbmx5IHNob3cgc3RhcnQgYW5kIHJpbmcnKTtcbiAgICB9KTtcbiAgICAvKlxuICAgIC8vIFZlcnkgc2ltcGxlIGFsYXJtIHNjaGVkdWxlclxuICAgIHZhciBhbGFybXMgPSB7fTtcbiAgICBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgbm93ID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgICBmb3IgKHZhciBrZXkgaW4gYWxhcm1zKSB7XG4gICAgICAgIHZhciBhbGFybSA9IGFsYXJtc1trZXldO1xuICAgICAgICBpZiAobm93ID49IGFsYXJtLnRpbWVzdGFtcCkge1xuICAgICAgICAgIHZhciBtc2cgPSBuZXcgYnVpbGRlci5NZXNzYWdlKClcbiAgICAgICAgICAgIC5hZGRyZXNzKGFsYXJtLmFkZHJlc3MpXG4gICAgICAgICAgICAudGV4dCgnSGVyZVxcJ3MgeW91ciBcXCclc1xcJyBhbGFybS4nLCBhbGFybS50aXRsZSk7XG4gICAgICAgICAgYm90LnNlbmQobXNnKTtcbiAgICAgICAgICBkZWxldGUgYWxhcm1zW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCAxNTAwMCk7XG4gICAgKi9cbn1cbmlmIChtb2R1bGUpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICAgICAgbWFrZUJvdDogbWFrZUJvdFxuICAgIH07XG59XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
