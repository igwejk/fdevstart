/**
 * The bot implementation
 *
 * Instantiate apssing a connector via
 * makeBot
 *
 */
/**
 * @file
 * @module jfseb.fdevstart.smartdialog
 * @copyright (c) 2016 Gerd Forstmann
 */
//declare module 'elizabot' { };
//declare module 'winston-pg' { };
//delcare module 'winston' {};
"use strict";

var builder = require('botbuilder');
var debug = require('debug');
var Match = require('../match/match');
var Analyze = require('../match/analyze');
var BreakDown = require('../match/breakdown');
var WhatIs = require('../match/whatis');
var ListAll = require('../match/listall');
var Describe = require('../match/describe');
var Utils = require('../utils/utils');
var _ = require('lodash');
var DialogLogger = require('../utils/dialoglogger');
var process = require('process');
var dburl = process.env.DATABASE_URL || "";
var pglocalurl = "postgres://joe:abcdef@localhost:5432/abot";
var dburl = process.env.DATABASE_URL || pglocalurl;
var pg = require('pg');
var o = pg;
o.defaults.ssl = true;
var dialogLogger = DialogLogger.logger("smartbot", dburl, pg);
function send(o) {
    return o;
}
;
function dialoglog(intent, session, response) {
    var sResponse;
    var sAction;
    if (typeof response === "string") {
        sAction = "";
        sResponse = response;
    } else {
        var aMessage = response;
        var iMessage = aMessage.toMessage();
        sResponse = iMessage.text;
        sAction = iMessage.entities && iMessage.entities[0] ? JSON.stringify(iMessage.entities && iMessage.entities[0]) : "";
    }
    dialogLogger({
        intent: intent,
        session: session,
        response: sResponse,
        action: sAction
    });
    session.send(response);
}
//const pgLogger = new PgLogger({
//  name: 'test-logger',
//  level: 'debug',
//  connString: 'postgres://ubuntu@localhost:5432/circle_test',
//  tableName: 'winston_logs',
//});
//winston.add(winston.transports.File, { filename: 'winston_out.log', timestamp : true });
//  winston.remove(winston.transports.Console);
//winston.add(pgLogger);
/*
const logger = new winston.Logger({
  transports: [
    new winston.transports.Console({
      color: true,
      timestamp: true,
    }),
    pgLogger,
  ]
});
*/
//pgLogger.initTable(done);
var elizabot = require('../extern/elizabot/elizabot.js');
//import * as elizabot from 'elizabot';
var debuglog = debug('smartdialog');
var PlainRecognizer = require('./plainrecognizer');
//var builder = require('botbuilder');
var dispatcher = require('../match/dispatcher.js').dispatcher;
function getConversationId(session) {
    return session.message && session.message.address && session.message.address.conversation.id;
}
var elizabots = {};
function getElizaBot(id) {
    if (!elizabots[id]) {
        elizabots[id] = {
            access: new Date(),
            elizabot: new elizabot()
        };
    }
    elizabots[id].access = new Date();
    return elizabots[id].elizabot;
}
var newFlow = true;
var Model = require('../model/model');
var ExecServer = require('../exec/execserver');
var theDefaultModel = Model.loadModels();
var models = {};
function loadModel(modelPath) {
    modelPath = modelPath || "";
    if (!models[modelPath]) {
        models[modelPath] = Model.loadModels(modelPath);
    }
    return models[modelPath];
}
if (newFlow) {} else {}
function isAnonymous(userid) {
    return userid.indexOf("ano:") === 0;
}
function restrictLoggedOn(session, arr) {
    var userid = session.message.address && session.message.address.user && session.message.address.user.id || "";
    if (process.env.ABOT_EMAIL_USER && isAnonymous(userid)) {
        if (arr.length < 6) {
            return arr;
        }
        var len = arr.length;
        var res = arr.slice(0, Math.min(Math.max(Math.floor(arr.length / 3), 7), arr.length));
        if (typeof arr[0] === "string") {
            var delta = len - res.length;
            res.push("... and " + delta + " more entries for registered users");
        }
        return res;
    }
    return arr;
}
/*
export class SimpleRecognizer implements builder.IIntentRecognizer {
  constructor() {

  }

  recognize(context: builder.IRecognizeContext, callback: (err: Error, result: builder.IIntentRecognizerResult) => void): void {
    var u = {} as builder.IIntentRecognizerResult;

    debuglog("recognizing " + context.message.text);
    if (context.message.text.indexOf("start") >= 0) {
      u.intent = "ShowEntity";
      u.score = 0.9;
      var e1 = {} as builder.IEntity;
      e1.startIndex = "start ".length;
      e1.endIndex = context.message.text.length;
      e1.score = 0.3;
      u.entities = [e1];
      callback(undefined, u);
      return;
    }

    if (context.message.text.indexOf("train") >= 0) {
      u.intent = "train";
      u.score = 0.9;
      var e1 = {} as builder.IEntity;
      e1.startIndex = "train ".length;
      e1.endIndex = context.message.text.length;
      e1.score = 0.3;
      u.entities = [e1];
      callback(undefined, u);
      return;
    }
    if (context.message.text.indexOf("learn") >= 0) {
      u.intent = "learn";
      u.score = 0.9;
      var e1 = {} as builder.IEntity;
      e1.type = "trainFact";
      e1.startIndex = "train ".length;
      e1.endIndex = context.message.text.length;
      e1.score = 0.3;
      u.entities = [e1];
      callback(undefined, u);
      return;
    }
    if (context.message.text.indexOf("help") >= 0) {
      u.intent = "help";
      u.score = 0.9;
      var e1 = {} as builder.IEntity;
      e1.startIndex = "train ".length;
      e1.endIndex = context.message.text.length;
      e1.score = 0.3;
      u.entities = [e1];
      callback(undefined, u);
      return;
    }
    if (context.message.text.indexOf("exit") >= 0) {
      u.intent = "exit";
      u.score = 0.9;
      var e1 = {} as builder.IEntity;
      e1.startIndex = "exit ".length;
      e1.endIndex = context.message.text.length;
      e1.score = 0.3;
      u.entities = [e1];
      callback(undefined, u);
      return;
    }
    if (context.message.text.indexOf("wrong") >= 0) {
      u.intent = "wrong";
      u.score = 0.9;
      var e1 = {} as builder.IEntity;
      e1.startIndex = "exit ".length;
      e1.endIndex = context.message.text.length;
      e1.score = 0.3;
      u.entities = [e1];
      callback(undefined, u);
      return;
    }
    debuglog('recognizing nothing');
    u.intent = "None";
    u.score = 0.1;
    var e1 = {} as builder.IEntity;
    e1.startIndex = "exit ".length;
    e1.endIndex = context.message.text.length;
    e1.score = 0.1;
    u.entities = [];
    callback(undefined, u);
  }
}
*/
var aTrainReplies = ["Thank you for sharing this suggestion with us", "Thank for for this valuable information.", "Thank for for this interesting fact!", "Thats a plethoria of information.", "That's a nugget of information.", "Lovely, I may consider you input.", "Well done, anything more to let me know?", "I do appreciate your teaching and my learning experience, or was it the other way round?", "Your helpful input has been stored in some dusty corner of the World wide web!", "Thank you for my learning experience!", "I have incorporated your valuable suggestion in the wisdom of the internet"];
var aTrainDialog = aTrainReplies;
var aTrainExitHint = ["\ntype \"done\" when you are done training me.", "", "", "", "\nremember, you are stuck here instructing me, type \"done\" to return.", ""];
var aEnterTrain = ["So you think this is wrong? You can offer your advise here.\n Type \"done\" if you are done with instructing me", "Feel free to offer me your better solution here.\n", "Some say \"The secret to happiness is to lower your expectations to the point they are already met.\", \nt if you could help me to becomde better, instruct me.", "Feel free to offer me your better solution here.\n Type \"done\" if you are done with instructing me", "Feel free to offer me your better solution here.\n Type \"done\" if you are done with instructing me"];
var aBackFromTraining = ["Puuh, back from training! Now for the easy part ...", "Live and don't learn, that's us. Naah, we'll see.", "The secret to happiness is to lower your expectations to the point they are already met.", "Thanks for having this lecture session, now back to our usual self."];
var aTrainNoKlingon = ["He who master the dark arts of SAP must not dwell in the earthly realms of Start Trek.", "SAP is a cloud company, not a space company.", "The depth of R/3 are deeper than Deep Space 42.", "My brainpower is fully absorbed with mastering other realms.", "For the wosap, the sky is the limit. Feel free to check out nasa.gov .", "The future is SAP or IBM blue, not space black.", "That's left to some musky future."];
exports.aResponsesOnTooLong = ["Your input should be eloquent in it's brevity. This one was too long.", "my wisdom is severly bound by my limited input processing capabilities. Could you formulate a shorter input? Thank you.", "The length of you input indicates you probably know more about the topic than me? Can i humbly ask you to formulate a shorter question?", '\"What ever you want to teach, be brief\" (Horace). While this does not always applies to my answers, it is require for your questions. Please try again with a refined questions.', 'I understand more than 4-letter words, but not more than 20 word sentences. Please try to shorten your input.', 'the sky is the limit? Air force member or not, you can ask longer questions than \"the sky\", but not this long', 'My answers may be exhaustive, but I understand more than 4-letter words, but not more than 20 word sentences. Sorry.', 'Our conversation must be highly assymmetric: my answers may be verbose and exhaustive and fuzzy, questions and input must be brief. Try to reformulate it'];
exports.metawordsDescriptions = {
    "category": "an attribute of a record in a model, example: a Planet has a \"name\" attribute",
    "domain": "a group of facts which are typically unrelated",
    "key": "an attribute value (of a category) which  is unique for the record",
    "tool": "is potentialy command to execute",
    "record": "a specific set of \"fact\"s of a domain, a \"record\" has a set of attributes values (\"fact\"s) of the categories, often a record has a \"key\"",
    "fact": "a specific category value of a record in a domain, may be a \"key\" value"
};
function getRandomResult(arr) {
    return arr[Math.floor(Math.random() * arr.length) % arr.length];
}
var SimpleUpDownRecognizer = function () {
    function SimpleUpDownRecognizer() {}
    SimpleUpDownRecognizer.prototype.recognize = function (context, callback) {
        var u = {};
        debuglog("recognizing " + context.message.text);
        if (context.message.text.indexOf("down") >= 0) {
            u.intent = "intent.down";
            u.score = 0.9;
            var e1 = {};
            e1.startIndex = "start ".length;
            e1.endIndex = context.message.text.length;
            e1.score = 0.3;
            u.entities = [e1];
            callback(undefined, u);
            return;
        }
        if (context.message.text.indexOf("up") >= 0) {
            u.intent = "intent.up";
            u.score = 0.9;
            var e1 = {};
            e1.startIndex = "up".length;
            e1.endIndex = context.message.text.length;
            e1.score = 0.3;
            u.entities = [e1];
            callback(undefined, u);
            return;
        }
        if (context.message.text.indexOf("done") >= 0) {
            u.intent = "intent.up";
            u.score = 0.9;
            var e1 = {};
            e1.startIndex = "up".length;
            e1.endIndex = context.message.text.length;
            e1.score = 0.3;
            u.entities = [e1];
            callback(undefined, u);
            return;
        }
        if (context.message.text.indexOf("exit") >= 0) {
            u.intent = "intent.up";
            u.score = 0.9;
            var e1 = {};
            e1.startIndex = "up".length;
            e1.endIndex = context.message.text.length;
            e1.score = 0.3;
            u.entities = [e1];
            callback(undefined, u);
            return;
        }
        if (context.message.text.indexOf("quit") >= 0) {
            u.intent = "intent.up";
            u.score = 0.9;
            var e1 = {};
            e1.startIndex = "up".length;
            e1.endIndex = context.message.text.length;
            e1.score = 0.3;
            u.entities = [e1];
            callback(undefined, u);
            return;
        }
        debuglog('recognizing nothing');
        u.intent = "None";
        u.score = 0.1;
        var e1 = {};
        e1.startIndex = "exit ".length;
        e1.endIndex = context.message.text.length;
        e1.score = 0.1;
        u.entities = [];
        callback(undefined, u);
    };
    return SimpleUpDownRecognizer;
}();
exports.SimpleUpDownRecognizer = SimpleUpDownRecognizer;
var AnyObject = Object;
// globalTunnel.initialize({
//  host: 'proxy.exxxample.com',
//  port: 8080
// })
// Create bot and bind to console
// var connector = new htmlconnector.HTMLConnector()
// connector.setAnswerHook(function (sAnswer) {
//  console.log('Got answer : ' + sAnswer + '\n')
// })
var bot;
// setTimeout(function () {
//   connector.processMessage('start unit test ABC ')
// }, 5000)
var fs = require('fs');
var oJSON = JSON.parse('' + fs.readFileSync('./resources/model/intents.json'));
var oRules = PlainRecognizer.parseRules(oJSON);
// var Recognizer = new (recognizer.RegExpRecognizer)(oRules);
function logQuery(session, intent, result) {
    fs.appendFile('./logs/showmequeries.txt', "\n" + JSON.stringify({
        text: session.message.text,
        timestamp: session.message.timestamp,
        intent: intent,
        res: result && result.length && Match.ToolMatch.dumpNice(result[0]) || "0",
        conversationId: session.message.address && session.message.address.conversation && session.message.address.conversation.id || "",
        userid: session.message.address && session.message.address.user && session.message.address.user.id || ""
    }), function (err, res) {
        if (err) {
            debuglog("logging failed " + err);
        }
    });
}
function logQueryWhatIs(session, intent, result) {
    fs.appendFile('./logs/showmequeries.txt', "\n" + JSON.stringify({
        text: session.message.text,
        timestamp: session.message.timestamp,
        intent: intent,
        res: result && result.length && WhatIs.dumpNice(result[0]) || "0",
        conversationId: session.message.address && session.message.address.conversation && session.message.address.conversation.id || "",
        userid: session.message.address && session.message.address.user && session.message.address.user.id || ""
    }), function (err, res) {
        if (err) {
            debuglog("logging failed " + err);
        }
    });
}
function logQueryWhatIsTupel(session, intent, result) {
    fs.appendFile('./logs/showmequeries.txt', "\n" + JSON.stringify({
        text: session.message.text,
        timestamp: session.message.timestamp,
        intent: intent,
        res: result && result.length && WhatIs.dumpNiceTupel(result[0]) || "0",
        conversationId: session.message.address && session.message.address.conversation && session.message.address.conversation.id || "",
        userid: session.message.address && session.message.address.user && session.message.address.user.id || ""
    }), function (err, res) {
        if (err) {
            debuglog("logging failed " + err);
        }
    });
}
var gwords = {};
/**
 * Construct a bot
 * @param connector {Connector} the connector to use
 * HTMLConnector
 * or connector = new builder.ConsoleConnector().listen()
 */
function makeBot(connector, modelPath) {
    var theModel = loadModel(modelPath);
    bot = new builder.UniversalBot(connector);
    // Create LUIS recognizer that points at our model and add it as the root '/' dialog for our Cortana Bot.
    // var model = sensitive.modelurl;
    // var model = 'https://api.projectoxford.ai/luis/v2.0/apps/c413b2ef-382c-45bd-8ff0-f76d60e2a821?subscription-key=c21398b5980a4ce09f474bbfee93b892&q='
    var recognizer = new PlainRecognizer.RegExpRecognizer(oRules);
    var dialog = new builder.IntentDialog({ recognizers: [recognizer] });
    // dialog.onBegin(function(session,args) {
    // console.log("beginning ...")
    // session.dialogData.retryPrompt = args && args.retryPrompt || "I am sorry"
    // session.send("What do you want?")
    //
    // })
    var dialogUpDown = new builder.IntentDialog({ recognizers: [new SimpleUpDownRecognizer()] });
    bot.dialog('/updown', dialogUpDown);
    dialogUpDown.onBegin(function (session) {
        dialoglog("TrainMe", session, send(getRandomResult(aEnterTrain)));
        //session.send("Hi there, updown is waiting for you");
    });
    dialogUpDown.matches('intent.up', [function (session, args, next) {
        session.dialogData.abc = args || {};
        builder.Prompts.text(session, 'you want to exit training? type \"done\" again.');
    }, function (session, results, next) {
        session.dialogData.abc = results.reponse;
        next();
    }, function (session, results) {
        session.endDialogWithResult({ response: session.dialogData.abc });
    }]);
    dialogUpDown.matches('intent.down', [function (session, args, next) {
        session.dialogData.abc = args || {};
        builder.Prompts.text(session, 'you want to go down!');
    }, function (session, results, next) {
        session.dialogData.abc = -1; // results.reponse;
        next();
    }, function (session, results) {
        session.send("still going down?");
    }]);
    dialogUpDown.onDefault(function (session) {
        logQuery(session, "onDefault");
        var res = getRandomResult(aTrainDialog) + getRandomResult(aTrainExitHint);
        dialoglog("TrainMe", session, send(res));
    });
    bot.dialog('/train', [function (session, args, next) {
        session.dialgoData.abc = args || {};
        builder.Prompts.text(session, 'Do you want to train me');
    }, function (session, results, next) {
        session.dialogData.abc = results.reponse;
    }, function (session, results) {
        session.endDialogWithResult({ response: session.DialogData.abc });
    }]);
    bot.dialog('/', dialog);
    dialog.matches('ShowMe', [function (session, args, next) {
        var isCombinedIndex = {};
        var oNewEntity;
        // expecting entity A1
        debuglog("Show Entity");
        debuglog('raw: ' + JSON.stringify(args.entities), undefined, 2);
        var a1 = builder.EntityRecognizer.findEntity(args.entities, 'A1');
        var result = Analyze.analyzeAll(a1.entity, theModel.rules, theModel.tools, gwords);
        logQuery(session, 'ShowMe', result);
        // test.expect(3)
        //  test.deepEqual(result.weight, 120, 'correct weight');
        if (!result || result.length === 0) {
            next();
        }
        // debuglog('result : ' + JSON.stringify(result, undefined, 2));
        debuglog('best result : ' + JSON.stringify(result[0] || {}, undefined, 2));
        debuglog('top : ' + Match.ToolMatch.dumpWeightsTop(result, { top: 3 }));
        if (Analyze.isComplete(result[0])) {
            session.dialogData.result = result[0];
            //    session.send('Showing entity ...');
            next();
        } else if (Analyze.getPrompt(result[0])) {
            var prompt = Analyze.getPrompt(result[0]);
            session.dialogData.result = result[0];
            session.dialogData.prompt = prompt;
            dialoglog("ShowMe", session, send("Not enough information supplied: " + Match.ToolMatch.dumpNice(session.dialogData.result)));
            builder.Prompts.text(session, prompt.text);
        } else {
            var best = result.length ? Match.ToolMatch.dumpNice(result[0]) : "<nothing>";
            dialoglog("ShowMe", session, send('I did not understand this' + best));
        }
    }, function (session, results, next) {
        var result = session.dialogData.result;
        if (!result || result.length === 0) {
            next();
        }
        if (results.response) {
            // some prompting
            Analyze.setPrompt(session.dialogData.result, session.dialogData.prompt, results.response);
        }
        if (Analyze.isComplete(session.dialogData.result)) {
            next();
        } else if (Analyze.getPrompt(session.dialogData.result)) {
            var prompt = Analyze.getPrompt(session.dialogData.result);
            session.dialogData.prompt = prompt;
            builder.Prompts.text(session, prompt.text);
        }
    }, function (session, results, next) {
        var result = session.dialogData.result;
        if (results.response) {
            // some prompting
            Analyze.setPrompt(session.dialogData.result, session.dialogData.prompt, results.response);
        }
        if (Analyze.isComplete(session.dialogData.result)) {
            var exec = ExecServer.execTool(session.dialogData.result, theModel.records);
            var reply = new builder.Message(session).text(exec.text).addEntity(exec.action);
            // .addAttachment({ fallbackText: "I don't know", contentType: 'image/jpeg', contentUrl: "www.wombat.org" });
            dialoglog("ShowMe", session, send(reply));
        } else {
            if (session.dialogData.result) {
                dialoglog("ShowMe", session, send("Not enough information supplied: " + Match.ToolMatch.dumpNice(session.dialogData.result)));
            } else {
                dialoglog("ShowMe", session, send("I did not get what you want"));
            }
        }
    }]);
    dialog.matches('WhatIs', [function (session, args, next) {
        var isCombinedIndex = {};
        var oNewEntity;
        // expecting entity A1
        var message = session.message.text;
        debuglog("WhatIs Entities");
        debuglog('raw: ' + JSON.stringify(args.entities), undefined, 2);
        var categoryEntity = builder.EntityRecognizer.findEntity(args.entities, 'category');
        var category = categoryEntity.entity;
        var a1 = builder.EntityRecognizer.findEntity(args.entities, 'A1');
        var cats = [];
        try {
            cats = WhatIs.analyzeCategoryMult2(category, theModel.rules, message);
            debuglog("here cats" + cats.join(","));
        } catch (e) {
            if (e) {
                debuglog("here exception" + e);
                dialoglog("WhatIs", session, send('I don\'t know anything about "' + category + (e ? '(' + e.toString() + ')' : "")));
                // next();
                return;
            }
        }
        var cat = undefined;
        // we have some cats, (or at least one)
        if (cats.length === 1) {
            cat = cats[0];
            if (!cat) {
                session.send('I don\'t know anything about "' + category + '"');
                // next();
                return;
            }
        }
        if (cats.length === 1) {
            debuglog('category identified:' + cat);
            var result = WhatIs.resolveCategory(cat, a1.entity, theModel.rules, theModel.records);
            debuglog('whatis result:' + JSON.stringify(result));
            logQueryWhatIs(session, 'WhatIs', result);
            var indis = WhatIs.isIndiscriminateResult(result);
            if (indis) {
                session.send(indis);
                // next();
                return;
            }
            if (!result || result.length === 0) {
                dialoglog("WhatIs", session, send('I don\'t know anything about "' + cat + " (" + category + ')\" in relation to "' + a1.entity + '"'));
                // next();
                return;
            } else {
                // debuglog('result : ' + JSON.stringify(result, undefined, 2));
                debuglog('best result : ' + JSON.stringify(result[0] || {}, undefined, 2));
                debuglog('top : ' + WhatIs.dumpWeightsTop(result, { top: 3 }));
                // TODO cleansed sentence
                dialoglog("WhatIs", session, send('The ' + category + ' of ' + a1.entity + ' is ' + result[0].result + "\n")); //  + JSON.stringify(result[0]));
            }
        } // single category
        else {
                debuglog('categories identified:' + cats.join(","));
                var resultArr = WhatIs.resolveCategories(cats, a1.entity, theModel);
                debuglog('whatis result:' + JSON.stringify(resultArr));
                logQueryWhatIsTupel(session, 'WhatIs', resultArr);
                var indis = WhatIs.isIndiscriminateResultTupel(resultArr);
                if (indis) {
                    session.send(indis);
                    // next();
                    return;
                }
                if (!resultArr || resultArr.length === 0) {
                    dialoglog("WhatIs", session, send('I don\'t know anything about "' + category + "\" (" + Utils.listToQuotedCommaAnd(cats) + ')\" in relation to "' + a1.entity + '"'));
                    // next();
                    return;
                } else {
                    // debuglog('result : ' + JSON.stringify(result, undefined, 2));
                    debuglog('best result : ' + JSON.stringify(resultArr[0] || {}, undefined, 2));
                    //debuglog('top : ' + WhatIs.dumpWeightsTop(resultArr, { top: 3 }));
                    // TODO cleansed sentence
                    dialoglog("WhatIs", session, send('The ' + Utils.listToQuotedCommaAnd(cats) + ' of ' + a1.entity + ' are ' + Utils.listToQuotedCommaAnd(resultArr[0].result) + '\n')); //  + JSON.stringify(result[0]));
                }
            } //endif multiple categories
    }]);
    dialog.matches('ListAll', [function (session, args, next) {
        var isCombinedIndex = {};
        var oNewEntity;
        // expecting entity A1
        var message = session.message.text;
        debuglog("Intent : ListAll");
        debuglog('raw: ' + JSON.stringify(args.entities), undefined, 2);
        var categoryEntity = builder.EntityRecognizer.findEntity(args.entities, 'categories');
        var category = categoryEntity.entity;
        var a1 = builder.EntityRecognizer.findEntity(args.entities, 'insth');
        if (category === "categories") {
            // do we have a filter ?
            var domain = undefined;
            if (a1 && a1.entity) {
                domain = ListAll.inferDomain(theModel, a1.entity);
            }
            if (!domain) {
                var res = restrictLoggedOn(session, theModel.category).join(";\n");
                if (a1 && a1.entity) {
                    dialoglog("ListAll", session, send("I did not infer a domain restriction from \"" + a1.entity + "\", all my categories are ...\n" + res));
                } else {
                    dialoglog("ListAll", session, send("my categories are ...\n" + res));
                }
                return;
            } else {
                var aRes = Model.getCategoriesForDomain(theModel, domain);
                var res = restrictLoggedOn(session, aRes).join(";\n");
                dialoglog("ListAll", session, send("my categories in domain \"" + domain + "\" are ...\n" + res));
                return;
            }
        }
        if (category === "domains") {
            var res = restrictLoggedOn(session, theModel.domains).join(";\n");
            dialoglog("ListAll", session, send("my domains are ...\n" + res));
            return;
        }
        if (category === "tools") {
            var res = restrictLoggedOn(session, theModel.tools).map(function (oTool) {
                return oTool.name;
            }).join(";\n");
            dialoglog("ListAll", session, send("my tools are ...\n" + res));
            return;
        }
        var cats = [];
        try {
            cats = WhatIs.analyzeCategoryMult2(category, theModel.rules, message);
            debuglog("here cats" + cats.join(","));
        } catch (e) {
            if (e) {
                debuglog("here exception" + e);
                dialoglog("WhatIs", session, send('I don\'t know anything about "' + category + '"(' + e.toString() + ')'));
                // next();
                return;
            }
        }
        if (!cats || cats.length === 0) {
            dialoglog("ListAll", session, send('I don\'t know anything about "' + category + '"'));
            // next();
            return;
        }
        var cat = "";
        if (cats.length === 1) {
            cat = cats[0];
        }
        if (cats.length === 1) {
            debuglog('category identified:' + cat);
            if (a1 && a1.entity) {
                debuglog('got filter:' + a1.entity);
                var categorySet = Model.getAllRecordCategoriesForTargetCategory(theModel, cat, true);
                var result1 = ListAll.listAllWithContext(cat, a1.entity, theModel.rules, theModel.records, categorySet);
                // TODO classifying the string twice is a terrible waste
                if (!result1.length) {
                    debuglog('going for having');
                    var categorySetFull = Model.getAllRecordCategoriesForTargetCategory(theModel, cat, false);
                    result1 = ListAll.listAllHavingContext(cat, a1.entity, theModel.rules, theModel.records, categorySetFull);
                }
                debuglog('listall result:' + JSON.stringify(result1));
                var joinresults = restrictLoggedOn(session, ListAll.joinResults(result1));
                logQueryWhatIs(session, 'ListAll', result1);
                if (joinresults.length) {
                    dialoglog("ListAll", session, send("the " + category + " for " + a1.entity + " are ...\n" + joinresults.join(";\n")));
                } else {
                    dialoglog("ListAll", session, send("i did not find any " + category + " for " + a1.entity + ".\n" + joinresults.join(";\n")));
                }
                return;
            } else {
                // no entity, e.g. list all countries
                //
                var categorySetFull = Model.getAllRecordCategoriesForTargetCategory(theModel, cat, false);
                var result = ListAll.listAllHavingContext(cat, cat, theModel.rules, theModel.records, categorySetFull);
                logQueryWhatIs(session, 'ListAll', result);
                if (result.length) {
                    debuglog('listall result:' + JSON.stringify(result));
                    var joinresults = [];
                    debuglog("here is cat>" + cat);
                    if (cat !== "example question") {
                        joinresults = restrictLoggedOn(session, ListAll.joinResults(result));
                    } else {
                        joinresults = ListAll.joinResults(result);
                    }
                    var response = "the " + category + " are ...\n" + joinresults.join(";\n");
                    dialoglog("ListAll", session, send(response));
                    return;
                } else {
                    var response = "Found no data having \"" + cat + "\"";
                    dialoglog("ListAll", session, send(response));
                    return;
                }
            }
        } else {
            // multiple categories
            debuglog('categories identified:' + cats.join(","));
            if (a1 && a1.entity) {
                debuglog('got filter:' + a1.entity);
                try {
                    var categorySet = Model.getAllRecordCategoriesForTargetCategories(theModel, cats, true);
                } catch (e) {
                    debuglog("here exception" + e);
                    dialoglog("WhatIs", session, send('I cannot combine "' + category + '(' + e.toString() + ')'));
                    return;
                }
                var result1T = ListAll.listAllTupelWithContext(cats, a1.entity, theModel.rules, theModel.records, categorySet);
                // TODO classifying the string twice is a terrible waste
                if (!result1T.length) {
                    debuglog('going for having');
                    var categorySetFull = Model.getAllRecordCategoriesForTargetCategories(theModel, cats, false);
                    result1T = ListAll.listAllTupelHavingContext(cats, a1.entity, theModel.rules, theModel.records, categorySetFull);
                }
                debuglog('listall result:' + JSON.stringify(result1T));
                var joinresults = restrictLoggedOn(session, ListAll.joinResultsTupel(result1T));
                logQueryWhatIsTupel(session, 'ListAll', result1T);
                if (joinresults.length) {
                    dialoglog("ListAll", session, send("the " + category + " for " + a1.entity + " are ...\n" + joinresults.join(";\n")));
                } else {
                    dialoglog("ListAll", session, send("i did not find any " + category + " for " + a1.entity + ".\n" + joinresults.join(";\n")));
                }
                return;
            } else {
                // no entity, e.g. list all countries
                //
                var categorySetFull = {};
                try {
                    categorySetFull = Model.getAllRecordCategoriesForTargetCategories(theModel, cats, false);
                } catch (e) {
                    debuglog("here exception" + e);
                    dialoglog("WhatIs", session, send('I cannot combine "' + category + '(' + e.toString() + ')'));
                    // next();
                    return;
                }
                var resultT = ListAll.listAllTupelHavingContext(cats, "\"" + cats.join("\" \"") + "\"", theModel.rules, theModel.records, categorySetFull);
                logQueryWhatIsTupel(session, 'ListAll', resultT);
                if (resultT.length) {
                    debuglog('listall result:' + JSON.stringify(resultT));
                    var joinresults = [];
                    debuglog("here is cat>" + cats.join(", "));
                    if (cat !== "example question") {
                        joinresults = restrictLoggedOn(session, ListAll.joinResultsTupel(resultT));
                    } else {
                        joinresults = ListAll.joinResultsTupel(resultT);
                    }
                    var response = "the " + category + " are ...\n" + joinresults.join(";\n");
                    dialoglog("ListAll", session, send(response));
                    return;
                } else {
                    var response = "Found no data having \"" + cat + "\"";
                    dialoglog("ListAll", session, send(response));
                    return;
                }
            }
        }
    }]);
    dialog.matches('Describe', [function (session, args, next) {
        var isCombinedIndex = {};
        var oNewEntity;
        // expecting entity A1
        var message = session.message.text;
        debuglog("Intent : Describe");
        debuglog('raw: ' + JSON.stringify(args.entities), undefined, 2);
        var factEntity = builder.EntityRecognizer.findEntity(args.entities, 'A1');
        var factOrCat = factEntity && factEntity.entity;
        var domainEntity = builder.EntityRecognizer.findEntity(args.entities, 'D');
        var domainS = domainEntity && domainEntity.entity;
        var filterDomain = undefined;
        if (domainS) {
            filterDomain = ListAll.inferDomain(theModel, domainS);
            debuglog("got domain" + filterDomain);
            if (!filterDomain) {
                dialoglog("Describe", session, send("I did not infer a domain restriction from \"" + domainS + "\". Specify an existing domain. (List all domains) to get exact names.\n"));
                return;
            }
        }
        debuglog("factOrCat is" + factOrCat);
        if (exports.metawordsDescriptions[factOrCat.toLowerCase()]) {
            // do we have a filter ?
            var prefix = "";
            if (filterDomain) {
                prefix = '"in domain "' + filterDomain + '" make no sense when matching a metaword.\n';
            }
            debuglog("showing meta result");
            dialoglog("Describe", session, send(prefix + '"' + factOrCat + '" is ' + exports.metawordsDescriptions[factOrCat.toLowerCase()] + ""));
            return;
        }
        var categories = [];
        if (WhatIs.splitAtCommaAnd(factOrCat).length > 1) {
            dialoglog("Describe", session, send("Whoa, i can only explain one thing at a time, not \"" + factOrCat + "\". Please ask one at a time."));
            return;
        }
        var category = WhatIs.analyzeCategory(factOrCat, theModel.rules, message);
        var catResults = [];
        if (category) {
            //TODO
            catResults = Describe.describeCategory(category, filterDomain, theModel, message);
        }
        var resFact = Describe.describeFactInDomain(factOrCat, filterDomain, theModel);
        if (catResults) {
            var prefixed = catResults.map(function (res) {
                return Describe.sloppyOrExact(factOrCat, category, theModel) + "  " + res;
            });
        }
        if (catResults.length) {
            resFact = prefixed.join("\n");
            +"\n" + resFact;
        }
        dialoglog("Describe", session, send(resFact));
        /*
            var aRes = Model.getCategoriesForDomain(theModel, domain);
             var res = restrictLoggedOn(session, aRes).join(";\n");
            dialoglog("ListAll",session,send("my categories in domain \"" + domain + "\" are ...\n" + res));
            return;
          }
        }
        if (category === "domains") {
          var res = restrictLoggedOn(session, theModel.domains).join(";\n");
          dialoglog("ListAll",session, send("my domains are ...\n" + res));
          return;
        }
        if (category === "tools") {
          var res = restrictLoggedOn(session, theModel.tools).map(function (oTool) {
            return oTool.name;
          }).join(";\n");
          dialoglog("ListAll", session,send("my tools are ...\n" + res));
          return;
        }
        */
        /*
        var cats = [];
          try {
          cats = WhatIs.analyzeCategoryMult2(category, theModel.rules, message);
          debuglog("here cats" + cats.join(","));
        } catch (e) {
            if(e) {
              debuglog("here exception" + e);
              dialoglog("WhatIs",session,send('I don\'t know anything about "' + category + '"(' + e.toString() + ')'));
              // next();
              return;
            }
        }
        if (!cats || (cats.length === 0)) {
          dialoglog("ListAll",session,send('I don\'t know anything about "' + category + '"'));
          // next();
          return;
        }
        var cat = "";
        if( cats.length === 1) {
          cat = cats[0];
        }
        if( cats.length === 1) {
          debuglog('category identified:' + cat);
          if (a1 && a1.entity) {
            debuglog('got filter:' + a1.entity);
            var categorySet = Model.getAllRecordCategoriesForTargetCategory(theModel, cat, true);
            var result1 = ListAll.listAllWithContext(cat, a1.entity,
              theModel.rules, theModel.records, categorySet);
            // TODO classifying the string twice is a terrible waste
            if (!result1.length) {
              debuglog('going for having');
              var categorySetFull = Model.getAllRecordCategoriesForTargetCategory(theModel, cat, false);
              result1 = ListAll.listAllHavingContext(cat, a1.entity, theModel.rules,
                theModel.records, categorySetFull);
            }
            debuglog('listall result:' + JSON.stringify(result1));
            var joinresults = restrictLoggedOn(session, ListAll.joinResults(result1));
            logQueryWhatIs(session, 'ListAll', result1);
            if(joinresults.length ){
              dialoglog("ListAll",session,send("the " + category + " for " + a1.entity + " are ...\n" + joinresults.join(";\n")));
            } else {
              dialoglog("ListAll",session,send("i did not find any " + category + " for " + a1.entity + ".\n" + joinresults.join(";\n")));
            }
            return;
          } else {
            // no entity, e.g. list all countries
            //
            var categorySetFull = Model.getAllRecordCategoriesForTargetCategory(theModel, cat, false);
            var result = ListAll.listAllHavingContext(cat, cat, theModel.rules, theModel.records, categorySetFull);
            logQueryWhatIs(session, 'ListAll', result);
            if (result.length) {
              debuglog('listall result:' + JSON.stringify(result));
              var joinresults = [];
              debuglog("here is cat>" + cat);
              if(cat !== "example question") {
                joinresults = restrictLoggedOn(session, ListAll.joinResults(result));
              } else {
                joinresults = ListAll.joinResults(result);
              }
              var response = "the " + category + " are ...\n" + joinresults.join(";\n");
              dialoglog("ListAll",session,send(response));
              return;
            } else {
              var response = "Found no data having \"" + cat + "\""
              dialoglog("ListAll",session,send(response));
              return;
            }
          }
        } else {
          // multiple categories
          debuglog('categories identified:' + cats.join(","));
          if (a1 && a1.entity) {
            debuglog('got filter:' + a1.entity);
            try {
            var categorySet = Model.getAllRecordCategoriesForTargetCategories(theModel, cats, true);
            } catch(e) {
                debuglog("here exception" + e);
                dialoglog("WhatIs",session,send('I cannot combine "' + category + '(' + e.toString() + ')'));
                return;
            }
            var result1T = ListAll.listAllTupelWithContext(cats, a1.entity,
              theModel.rules, theModel.records, categorySet);
            // TODO classifying the string twice is a terrible waste
            if (!result1T.length) {
              debuglog('going for having');
              var categorySetFull = Model.getAllRecordCategoriesForTargetCategories(theModel, cats, false);
              result1T = ListAll.listAllTupelHavingContext(cats, a1.entity, theModel.rules,
                theModel.records, categorySetFull);
            }
            debuglog('listall result:' + JSON.stringify(result1T));
            var joinresults = restrictLoggedOn(session, ListAll.joinResultsTupel(result1T));
            logQueryWhatIsTupel(session, 'ListAll', result1T);
            if(joinresults.length ){
              dialoglog("ListAll",session,send("the " + category + " for " + a1.entity + " are ...\n" + joinresults.join(";\n")));
            } else {
              dialoglog("ListAll",session,send("i did not find any " + category + " for " + a1.entity + ".\n" + joinresults.join(";\n")));
            }
            return;
          } else {
            // no entity, e.g. list all countries
            //
            var categorySetFull = {} as { [key : string] : boolean};
            try {
              categorySetFull = Model.getAllRecordCategoriesForTargetCategories(theModel, cats, false);
            } catch(e) {
                debuglog("here exception" + e);
                dialoglog("WhatIs",session,send('I cannot combine "' + category + '(' + e.toString() + ')'));
            // next();
                return;
            }
            var resultT = ListAll.listAllTupelHavingContext(cats, "\"" + cats.join("\" \"") + "\"", theModel.rules, theModel.records, categorySetFull);
            logQueryWhatIsTupel(session, 'ListAll', resultT);
            if (resultT.length) {
              debuglog('listall result:' + JSON.stringify(resultT));
              var joinresults = [];
              debuglog("here is cat>" + cats.join(", "));
              if(cat !== "example question") {
                joinresults = restrictLoggedOn(session, ListAll.joinResultsTupel(resultT));
              } else {
                joinresults = ListAll.joinResultsTupel(resultT);
              }
              var response = "the " + category + " are ...\n" + joinresults.join(";\n");
              dialoglog("ListAll",session,send(response));
              return;
            } else {
              var response = "Found no data having \"" + cat + "\""
              dialoglog("ListAll",session,send(response));
              return;
            }
          }
        }
          */
    }]);
    dialog.matches('ListAllBinOp', [function (session, args, next) {
        var isCombinedIndex = {};
        var oNewEntity;
        // expecting entity A1
        var message = session.message.text;
        debuglog("Intent : ListAllBinOp");
        debuglog('raw: ' + JSON.stringify(args.entities), undefined, 2);
        var categoryEntity = builder.EntityRecognizer.findEntity(args.entities, 'category');
        var categoryWord = categoryEntity.entity;
        var opEntity = builder.EntityRecognizer.findEntity(args.entities, 'operator');
        var operatorWord = opEntity && opEntity.entity;
        // categorize as operator ?
        var filterDomainEntity = builder.EntityRecognizer.findEntity(args.entities, 'domain');
        var filterDomainS = filterDomainEntity && filterDomainEntity.entity;
        var operator = WhatIs.analyzeOperator(operatorWord, theModel.rules, message);
        var category = WhatIs.analyzeCategory(categoryWord, theModel.rules, message);
        var operatorArgs = Model.getOperator(theModel, operator);
        var a2 = builder.EntityRecognizer.findEntity(args.entities, 'A2');
        if (!operator) {
            var s = "Unknown operator " + operatorWord + ", this is a model bug, check operators.json and intents.json";
            dialoglog("ListAllBinOp", session, send("ouch, this was in internal error. Recovering from a weird operator \"" + operatorWord + "\"\n"));
            throw new Error(s);
        }
        var filterDomain = undefined;
        if (filterDomainS) {
            debuglog("found a domainString" + filterDomainS);
            filterDomain = ListAll.inferDomain(theModel, filterDomainS);
            debuglog("got domain" + filterDomain);
            if (!filterDomain) {
                dialoglog("Describe", session, send("I did not infer a domain restriction from \"" + filterDomainS + "\". Specify an existing domain. (List all domains) to get exact names.\n"));
                return;
            }
        }
        var fragment = a2 && a2.entity;
        fragment = BreakDown.trimQuoted(BreakDown.trimQuotedSpaced(fragment));
        debuglog("fragment after trimming \"" + fragment + "\"");
        if (categoryWord === "categories") {
            // do we have a filter?
            var aFilteredCategories = ListAll.filterStringListByOp(operatorArgs, fragment, theModel.category);
            if (filterDomain) {
                var catsForDomain = Model.getCategoriesForDomain(theModel, filterDomain);
                aFilteredCategories = _.intersection(aFilteredCategories, catsForDomain);
            }
            res = restrictLoggedOn(session, aFilteredCategories).join(";\n");
            if (res.length) {
                if (filterDomain) {
                    dialoglog("ListAllBinOp", session, send("my categories " + operator + " \"" + fragment + "\" in domain \"" + filterDomain + "\" are ...\n" + res));
                } else {
                    dialoglog("ListAllBinOp", session, send("my categories " + operator + " \"" + fragment + "\" are ...\n" + res));
                }
            } else {
                dialoglog("ListAllBinOp", session, send('I have no categories ' + operator + ' "' + fragment + '"'));
            }
            return;
        } else if (categoryWord === "domains") {
            var aRes = ListAll.filterStringListByOp(operatorArgs, fragment, theModel.domains);
            res = restrictLoggedOn(session, aRes).join(";\n");
            if (res.length) {
                dialoglog("ListAllBinOp", session, send("my domains " + operator + ' "' + fragment + '" are ...\n' + res));
            } else {
                dialoglog("ListAllBinOp", session, send('I have no domains ' + operator + ' "' + fragment + '"'));
            }
            return;
        } else if (categoryWord === "tools") {
            var aRes = ListAll.filterStringListByOp(operatorArgs, fragment, theModel.tools.map(function (oTool) {
                return oTool.name;
            }));
            var res = restrictLoggedOn(session, aRes).join(";\n");
            if (res.length) {
                dialoglog("ListAllBinOp", session, send("my tools " + operator + ' "' + fragment + '" are ...\n' + res));
            } else {
                dialoglog("ListAllBinOp", session, send("I have no tools " + operator + ' "' + fragment + '"'));
            }
            return;
        } else {
            var cat = WhatIs.analyzeCategory(categoryWord, theModel.rules, message);
            if (!cat) {
                dialoglog("ListAllBinOp", session, send('I don\'t know anything about "' + categoryWord + '"'));
                // next();
                return;
            }
            debuglog('category identified:' + cat);
            var aRes = ListAll.getCategoryOpFilterAsDistinctStrings(operatorArgs, fragment, category, theModel.records, filterDomain);
            var res = restrictLoggedOn(session, aRes).join(";\n");
            var infixExplain = '';
            if (!ListAll.likelyPluralDiff(category, categoryWord)) {
                infixExplain = '("' + category + '")';
            }
            if (res.length) {
                if (filterDomain) {
                    dialoglog("ListAllBinOp", session, send("my " + categoryWord + infixExplain + " " + operator + " \"" + fragment + "\" in domain \"" + filterDomain + "\" are ...\n" + res));
                } else {
                    dialoglog("ListAllBinOp", session, send("my " + categoryWord + infixExplain + " " + operator + " \"" + fragment + "\" are ...\n" + res));
                }
            } else {
                dialoglog("ListAllBinOp", session, send('I have no ' + categoryWord + infixExplain + ' ' + operator + ' "' + fragment + '"'));
            }
            return;
        }
    }]);
    dialog.matches('TrainMe', [function (session, args, next) {
        var isCombinedIndex = {};
        var oNewEntity;
        // expecting entity A1
        var message = session.message.text;
        debuglog("Intent : Train");
        debuglog('raw: ' + JSON.stringify(args.entities), undefined, 2);
        var categoryEntity = builder.EntityRecognizer.findEntity(args.entities, 'categories');
        if (message.toLowerCase().indexOf("kronos") >= 0 || message.toLowerCase().indexOf("klingon") >= 0) {
            dialoglog("TrainMe", session, send(getRandomResult(aTrainNoKlingon)));
            return;
        }
        var res = getRandomResult(aTrainReplies);
        dialoglog("TrainMe", session, send(res));
    }]);
    dialog.matches('TooLong', [function (session, args, next) {
        var isCombinedIndex = {};
        var oNewEntity;
        // expecting entity A1
        var message = session.message.text;
        debuglog("Intent : TooLong");
        debuglog('raw: ' + JSON.stringify(args.entities), undefined, 2);
        var categoryEntity = builder.EntityRecognizer.findEntity(args.entities, 'categories');
        dialoglog("TooLong", session, send(getRandomResult(exports.aResponsesOnTooLong)));
    }]);
    dialog.matches('Wrong', [function (session, args, next) {
        dialogLogger({
            session: session,
            intent: "Wrong",
            response: '<begin updown>'
        });
        session.beginDialog('/updown', session.userData.count);
    }, function (session, results, next) {
        var alarm = session.dialogData.alarm;
        next();
    }, function (session, results) {
        session.send(getRandomResult(aBackFromTraining)); //  + JSON.stringify(results));
        //session.send('end of wrong');
    }]);
    dialog.matches('Exit', [function (session, args, next) {
        debuglog('exit :');
        debuglog('exit' + JSON.stringify(args.entities));
        dialogLogger({
            session: session,
            intent: "Exit",
            response: 'you are in a logic loop'
        });
        session.send("you are in a logic loop ");
    }]);
    dialog.matches('Help', [function (session, args, next) {
        debuglog('help :');
        debuglog('help');
        session.send("I know about .... <categories>>");
    }]);
    // Add intent handlers
    dialog.matches('train', [function (session, args, next) {
        debuglog('train');
        // Resolve and store any entities passed from LUIS.
        var title = builder.EntityRecognizer.findEntity(args.entities, 'builtin.alarm.title');
        var time = builder.EntityRecognizer.resolveTime(args.entities);
        var alarm = session.dialogData.alarm = {
            title: title ? title.entity : null,
            timestamp: time ? time.getTime() : null
        };
        // Prompt for title
        if (!alarm.title) {
            dialogLogger({
                session: session,
                intent: "train",
                response: 'What fact would you like to train?'
            });
            builder.Prompts.text(session, 'What fact would you like to train?');
        } else {
            next();
        }
    }, function (session, results, next) {
        var alarm = session.dialogData.alarm;
        if (results.response) {
            alarm.title = results.response;
        }
        // Prompt for time (title will be blank if the user said cancel)
        if (alarm.title && !alarm.timestamp) {
            builder.Prompts.time(session, 'What time would you like to set the alarm for?');
        } else {
            next();
        }
    }, function (session, results) {
        var alarm = session.dialogData.alarm;
        if (results.response) {
            var time = builder.EntityRecognizer.resolveTime([results.response]);
            alarm.timestamp = time ? time.getTime() : null;
        }
        // Set the alarm (if title or timestamp is blank the user said cancel)
        if (alarm.title && alarm.timestamp) {
            // Save address of who to notify and write to scheduler.
            alarm.address = session.message.address;
            //alarms[alarm.title] = alarm;
            // Send confirmation to user
            var date = new Date(alarm.timestamp);
            var isAM = date.getHours() < 12;
            session.send('Creating alarm named "%s" for %d/%d/%d %d:%02d%s', alarm.title, date.getMonth() + 1, date.getDate(), date.getFullYear(), isAM ? date.getHours() : date.getHours() - 12, date.getMinutes(), isAM ? 'am' : 'pm');
        } else {
            session.send('Ok... no problem.');
        }
    }]);
    dialog.onDefault(function (session) {
        logQuery(session, "onDefault");
        var eliza = getElizaBot(getConversationId(session));
        var reply = eliza.transform(session.message.text);
        dialoglog("eliza", session, send(reply));
        //new Eilzabot
        //session.send("I do not understand this at all");
        //builder.DialogAction.send('I\'m sorry I didn\'t understand. I can only show start and ring');
    });
    /*
    // Very simple alarm scheduler
    var alarms = {};
    setInterval(function () {
      var now = new Date().getTime();
      for (var key in alarms) {
        var alarm = alarms[key];
        if (now >= alarm.timestamp) {
          var msg = new builder.Message()
            .address(alarm.address)
            .text('Here\'s your \'%s\' alarm.', alarm.title);
          bot.send(msg);
          delete alarms[key];
        }
      }
    }, 15000);
    */
}
if (module) {
    module.exports = {
        SimpleUpDownRecognizer: SimpleUpDownRecognizer,
        aResponsesOnTooLong: exports.aResponsesOnTooLong,
        metawordsDescriptions: exports.metawordsDescriptions,
        makeBot: makeBot
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9ib3Qvc21hcnRkaWFsb2cudHMiLCJib3Qvc21hcnRkaWFsb2cuanMiXSwibmFtZXMiOlsiYnVpbGRlciIsInJlcXVpcmUiLCJkZWJ1ZyIsIk1hdGNoIiwiQW5hbHl6ZSIsIkJyZWFrRG93biIsIldoYXRJcyIsIkxpc3RBbGwiLCJEZXNjcmliZSIsIlV0aWxzIiwiXyIsIkRpYWxvZ0xvZ2dlciIsInByb2Nlc3MiLCJkYnVybCIsImVudiIsIkRBVEFCQVNFX1VSTCIsInBnbG9jYWx1cmwiLCJwZyIsIm8iLCJkZWZhdWx0cyIsInNzbCIsImRpYWxvZ0xvZ2dlciIsImxvZ2dlciIsInNlbmQiLCJkaWFsb2dsb2ciLCJpbnRlbnQiLCJzZXNzaW9uIiwicmVzcG9uc2UiLCJzUmVzcG9uc2UiLCJzQWN0aW9uIiwiYU1lc3NhZ2UiLCJpTWVzc2FnZSIsInRvTWVzc2FnZSIsInRleHQiLCJlbnRpdGllcyIsIkpTT04iLCJzdHJpbmdpZnkiLCJhY3Rpb24iLCJlbGl6YWJvdCIsImRlYnVnbG9nIiwiUGxhaW5SZWNvZ25pemVyIiwiZGlzcGF0Y2hlciIsImdldENvbnZlcnNhdGlvbklkIiwibWVzc2FnZSIsImFkZHJlc3MiLCJjb252ZXJzYXRpb24iLCJpZCIsImVsaXphYm90cyIsImdldEVsaXphQm90IiwiYWNjZXNzIiwiRGF0ZSIsIm5ld0Zsb3ciLCJNb2RlbCIsIkV4ZWNTZXJ2ZXIiLCJ0aGVEZWZhdWx0TW9kZWwiLCJsb2FkTW9kZWxzIiwibW9kZWxzIiwibG9hZE1vZGVsIiwibW9kZWxQYXRoIiwiaXNBbm9ueW1vdXMiLCJ1c2VyaWQiLCJpbmRleE9mIiwicmVzdHJpY3RMb2dnZWRPbiIsImFyciIsInVzZXIiLCJBQk9UX0VNQUlMX1VTRVIiLCJsZW5ndGgiLCJsZW4iLCJyZXMiLCJzbGljZSIsIk1hdGgiLCJtaW4iLCJtYXgiLCJmbG9vciIsImRlbHRhIiwicHVzaCIsImFUcmFpblJlcGxpZXMiLCJhVHJhaW5EaWFsb2ciLCJhVHJhaW5FeGl0SGludCIsImFFbnRlclRyYWluIiwiYUJhY2tGcm9tVHJhaW5pbmciLCJhVHJhaW5Ob0tsaW5nb24iLCJleHBvcnRzIiwiYVJlc3BvbnNlc09uVG9vTG9uZyIsIm1ldGF3b3Jkc0Rlc2NyaXB0aW9ucyIsImdldFJhbmRvbVJlc3VsdCIsInJhbmRvbSIsIlNpbXBsZVVwRG93blJlY29nbml6ZXIiLCJwcm90b3R5cGUiLCJyZWNvZ25pemUiLCJjb250ZXh0IiwiY2FsbGJhY2siLCJ1Iiwic2NvcmUiLCJlMSIsInN0YXJ0SW5kZXgiLCJlbmRJbmRleCIsInVuZGVmaW5lZCIsIkFueU9iamVjdCIsIk9iamVjdCIsImJvdCIsImZzIiwib0pTT04iLCJwYXJzZSIsInJlYWRGaWxlU3luYyIsIm9SdWxlcyIsInBhcnNlUnVsZXMiLCJsb2dRdWVyeSIsInJlc3VsdCIsImFwcGVuZEZpbGUiLCJ0aW1lc3RhbXAiLCJUb29sTWF0Y2giLCJkdW1wTmljZSIsImNvbnZlcnNhdGlvbklkIiwiZXJyIiwibG9nUXVlcnlXaGF0SXMiLCJsb2dRdWVyeVdoYXRJc1R1cGVsIiwiZHVtcE5pY2VUdXBlbCIsImd3b3JkcyIsIm1ha2VCb3QiLCJjb25uZWN0b3IiLCJ0aGVNb2RlbCIsIlVuaXZlcnNhbEJvdCIsInJlY29nbml6ZXIiLCJSZWdFeHBSZWNvZ25pemVyIiwiZGlhbG9nIiwiSW50ZW50RGlhbG9nIiwicmVjb2duaXplcnMiLCJkaWFsb2dVcERvd24iLCJvbkJlZ2luIiwibWF0Y2hlcyIsImFyZ3MiLCJuZXh0IiwiZGlhbG9nRGF0YSIsImFiYyIsIlByb21wdHMiLCJyZXN1bHRzIiwicmVwb25zZSIsImVuZERpYWxvZ1dpdGhSZXN1bHQiLCJvbkRlZmF1bHQiLCJkaWFsZ29EYXRhIiwiRGlhbG9nRGF0YSIsImlzQ29tYmluZWRJbmRleCIsIm9OZXdFbnRpdHkiLCJhMSIsIkVudGl0eVJlY29nbml6ZXIiLCJmaW5kRW50aXR5IiwiYW5hbHl6ZUFsbCIsImVudGl0eSIsInJ1bGVzIiwidG9vbHMiLCJkdW1wV2VpZ2h0c1RvcCIsInRvcCIsImlzQ29tcGxldGUiLCJnZXRQcm9tcHQiLCJwcm9tcHQiLCJiZXN0Iiwic2V0UHJvbXB0IiwiZXhlYyIsImV4ZWNUb29sIiwicmVjb3JkcyIsInJlcGx5IiwiTWVzc2FnZSIsImFkZEVudGl0eSIsImNhdGVnb3J5RW50aXR5IiwiY2F0ZWdvcnkiLCJjYXRzIiwiYW5hbHl6ZUNhdGVnb3J5TXVsdDIiLCJqb2luIiwiZSIsInRvU3RyaW5nIiwiY2F0IiwicmVzb2x2ZUNhdGVnb3J5IiwiaW5kaXMiLCJpc0luZGlzY3JpbWluYXRlUmVzdWx0IiwicmVzdWx0QXJyIiwicmVzb2x2ZUNhdGVnb3JpZXMiLCJpc0luZGlzY3JpbWluYXRlUmVzdWx0VHVwZWwiLCJsaXN0VG9RdW90ZWRDb21tYUFuZCIsImRvbWFpbiIsImluZmVyRG9tYWluIiwiYVJlcyIsImdldENhdGVnb3JpZXNGb3JEb21haW4iLCJkb21haW5zIiwibWFwIiwib1Rvb2wiLCJuYW1lIiwiY2F0ZWdvcnlTZXQiLCJnZXRBbGxSZWNvcmRDYXRlZ29yaWVzRm9yVGFyZ2V0Q2F0ZWdvcnkiLCJyZXN1bHQxIiwibGlzdEFsbFdpdGhDb250ZXh0IiwiY2F0ZWdvcnlTZXRGdWxsIiwibGlzdEFsbEhhdmluZ0NvbnRleHQiLCJqb2lucmVzdWx0cyIsImpvaW5SZXN1bHRzIiwiZ2V0QWxsUmVjb3JkQ2F0ZWdvcmllc0ZvclRhcmdldENhdGVnb3JpZXMiLCJyZXN1bHQxVCIsImxpc3RBbGxUdXBlbFdpdGhDb250ZXh0IiwibGlzdEFsbFR1cGVsSGF2aW5nQ29udGV4dCIsImpvaW5SZXN1bHRzVHVwZWwiLCJyZXN1bHRUIiwiZmFjdEVudGl0eSIsImZhY3RPckNhdCIsImRvbWFpbkVudGl0eSIsImRvbWFpblMiLCJmaWx0ZXJEb21haW4iLCJ0b0xvd2VyQ2FzZSIsInByZWZpeCIsImNhdGVnb3JpZXMiLCJzcGxpdEF0Q29tbWFBbmQiLCJhbmFseXplQ2F0ZWdvcnkiLCJjYXRSZXN1bHRzIiwiZGVzY3JpYmVDYXRlZ29yeSIsInJlc0ZhY3QiLCJkZXNjcmliZUZhY3RJbkRvbWFpbiIsInByZWZpeGVkIiwic2xvcHB5T3JFeGFjdCIsImNhdGVnb3J5V29yZCIsIm9wRW50aXR5Iiwib3BlcmF0b3JXb3JkIiwiZmlsdGVyRG9tYWluRW50aXR5IiwiZmlsdGVyRG9tYWluUyIsIm9wZXJhdG9yIiwiYW5hbHl6ZU9wZXJhdG9yIiwib3BlcmF0b3JBcmdzIiwiZ2V0T3BlcmF0b3IiLCJhMiIsInMiLCJFcnJvciIsImZyYWdtZW50IiwidHJpbVF1b3RlZCIsInRyaW1RdW90ZWRTcGFjZWQiLCJhRmlsdGVyZWRDYXRlZ29yaWVzIiwiZmlsdGVyU3RyaW5nTGlzdEJ5T3AiLCJjYXRzRm9yRG9tYWluIiwiaW50ZXJzZWN0aW9uIiwiZ2V0Q2F0ZWdvcnlPcEZpbHRlckFzRGlzdGluY3RTdHJpbmdzIiwiaW5maXhFeHBsYWluIiwibGlrZWx5UGx1cmFsRGlmZiIsImJlZ2luRGlhbG9nIiwidXNlckRhdGEiLCJjb3VudCIsImFsYXJtIiwidGl0bGUiLCJ0aW1lIiwicmVzb2x2ZVRpbWUiLCJnZXRUaW1lIiwiZGF0ZSIsImlzQU0iLCJnZXRIb3VycyIsImdldE1vbnRoIiwiZ2V0RGF0ZSIsImdldEZ1bGxZZWFyIiwiZ2V0TWludXRlcyIsImVsaXphIiwidHJhbnNmb3JtIiwibW9kdWxlIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7OztBQU9BOzs7OztBQUtBO0FBQ0E7QUFDQTtBQ0NBOztBRENBLElBQVlBLFVBQU9DLFFBQU0sWUFBTixDQUFuQjtBQUNBLElBQVlDLFFBQUtELFFBQU0sT0FBTixDQUFqQjtBQUdBLElBQVlFLFFBQUtGLFFBQU0sZ0JBQU4sQ0FBakI7QUFFQSxJQUFZRyxVQUFPSCxRQUFNLGtCQUFOLENBQW5CO0FBQ0EsSUFBWUksWUFBU0osUUFBTSxvQkFBTixDQUFyQjtBQUVBLElBQVlLLFNBQU1MLFFBQU0saUJBQU4sQ0FBbEI7QUFDQSxJQUFZTSxVQUFPTixRQUFNLGtCQUFOLENBQW5CO0FBQ0EsSUFBWU8sV0FBUVAsUUFBTSxtQkFBTixDQUFwQjtBQUNBLElBQVlRLFFBQUtSLFFBQU0sZ0JBQU4sQ0FBakI7QUFFQSxJQUFZUyxJQUFDVCxRQUFNLFFBQU4sQ0FBYjtBQUVBLElBQVlVLGVBQVlWLFFBQU0sdUJBQU4sQ0FBeEI7QUFFQSxJQUFZVyxVQUFPWCxRQUFNLFNBQU4sQ0FBbkI7QUFFQSxJQUFJWSxRQUFRRCxRQUFRRSxHQUFSLENBQVlDLFlBQVosSUFBNEIsRUFBeEM7QUFFQSxJQUFJQyxhQUFhLDJDQUFqQjtBQUNBLElBQUlILFFBQVFELFFBQVFFLEdBQVIsQ0FBWUMsWUFBWixJQUE0QkMsVUFBeEM7QUFFQSxJQUFZQyxLQUFFaEIsUUFBTSxJQUFOLENBQWQ7QUFDQSxJQUFJaUIsSUFBSUQsRUFBUjtBQUNBQyxFQUFFQyxRQUFGLENBQVdDLEdBQVgsR0FBaUIsSUFBakI7QUFDQSxJQUFJQyxlQUFlVixhQUFhVyxNQUFiLENBQW9CLFVBQXBCLEVBQWdDVCxLQUFoQyxFQUF1Q0ksRUFBdkMsQ0FBbkI7QUFHQSxTQUFBTSxJQUFBLENBQXlDTCxDQUF6QyxFQUE2QztBQUFPLFdBQU9BLENBQVA7QUFBVztBQUFBO0FBQy9ELFNBQUFNLFNBQUEsQ0FBbUJDLE1BQW5CLEVBQW1DQyxPQUFuQyxFQUE2REMsUUFBN0QsRUFBc0Y7QUFDcEYsUUFBSUMsU0FBSjtBQUNBLFFBQUlDLE9BQUo7QUFDQSxRQUFJLE9BQU9GLFFBQVAsS0FBb0IsUUFBeEIsRUFBa0M7QUFDaENFLGtCQUFVLEVBQVY7QUFDQUQsb0JBQVlELFFBQVo7QUFDRCxLQUhELE1BR087QUFDTCxZQUFJRyxXQUE0QkgsUUFBaEM7QUFDQSxZQUFJSSxXQUE2QkQsU0FBU0UsU0FBVCxFQUFqQztBQUNBSixvQkFBWUcsU0FBU0UsSUFBckI7QUFDQUosa0JBQVdFLFNBQVNHLFFBQVQsSUFBcUJILFNBQVNHLFFBQVQsQ0FBa0IsQ0FBbEIsQ0FBdEIsR0FBK0NDLEtBQUtDLFNBQUwsQ0FBZUwsU0FBU0csUUFBVCxJQUFxQkgsU0FBU0csUUFBVCxDQUFrQixDQUFsQixDQUFwQyxDQUEvQyxHQUE0RyxFQUF0SDtBQUNEO0FBQ0RiLGlCQUFhO0FBQ1hJLGdCQUFRQSxNQURHO0FBRVhDLGlCQUFTQSxPQUZFO0FBR1hDLGtCQUFVQyxTQUhDO0FBSVhTLGdCQUFRUjtBQUpHLEtBQWI7QUFNQUgsWUFBUUgsSUFBUixDQUFhSSxRQUFiO0FBQ0Q7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFFQTs7Ozs7Ozs7Ozs7QUFXQTtBQUdBLElBQUlXLFdBQVdyQyxRQUFRLGdDQUFSLENBQWY7QUFDQTtBQUVBLElBQUlzQyxXQUFXckMsTUFBTSxhQUFOLENBQWY7QUFDQSxJQUFZc0Msa0JBQWV2QyxRQUFNLG1CQUFOLENBQTNCO0FBQ0E7QUFFQSxJQUFJd0MsYUFBYXhDLFFBQVEsd0JBQVIsRUFBa0N3QyxVQUFuRDtBQUdBLFNBQUFDLGlCQUFBLENBQTJCaEIsT0FBM0IsRUFBbUQ7QUFDakQsV0FBT0EsUUFBUWlCLE9BQVIsSUFDTGpCLFFBQVFpQixPQUFSLENBQWdCQyxPQURYLElBRUxsQixRQUFRaUIsT0FBUixDQUFnQkMsT0FBaEIsQ0FBd0JDLFlBQXhCLENBQXFDQyxFQUZ2QztBQUdEO0FBRUQsSUFBSUMsWUFBWSxFQUFoQjtBQUVBLFNBQUFDLFdBQUEsQ0FBcUJGLEVBQXJCLEVBQStCO0FBQzdCLFFBQUksQ0FBQ0MsVUFBVUQsRUFBVixDQUFMLEVBQW9CO0FBQ2xCQyxrQkFBVUQsRUFBVixJQUFnQjtBQUNkRyxvQkFBUSxJQUFJQyxJQUFKLEVBRE07QUFFZFosc0JBQVUsSUFBSUEsUUFBSjtBQUZJLFNBQWhCO0FBSUQ7QUFDRFMsY0FBVUQsRUFBVixFQUFjRyxNQUFkLEdBQXVCLElBQUlDLElBQUosRUFBdkI7QUFDQSxXQUFPSCxVQUFVRCxFQUFWLEVBQWNSLFFBQXJCO0FBQ0Q7QUFLRCxJQUFJYSxVQUFVLElBQWQ7QUFFQSxJQUFZQyxRQUFLbkQsUUFBTSxnQkFBTixDQUFqQjtBQUNBLElBQVlvRCxhQUFVcEQsUUFBTSxvQkFBTixDQUF0QjtBQUVBLElBQU1xRCxrQkFBa0JGLE1BQU1HLFVBQU4sRUFBeEI7QUFFQSxJQUFJQyxTQUFTLEVBQWI7QUFFQSxTQUFBQyxTQUFBLENBQW1CQyxTQUFuQixFQUFxQztBQUNuQ0EsZ0JBQVlBLGFBQWEsRUFBekI7QUFDQSxRQUFJLENBQUNGLE9BQU9FLFNBQVAsQ0FBTCxFQUF3QjtBQUN0QkYsZUFBT0UsU0FBUCxJQUFvQk4sTUFBTUcsVUFBTixDQUFpQkcsU0FBakIsQ0FBcEI7QUFDRDtBQUNELFdBQU9GLE9BQU9FLFNBQVAsQ0FBUDtBQUNEO0FBRUQsSUFBSVAsT0FBSixFQUFhLENBRVosQ0FGRCxNQUVPLENBS047QUFFRCxTQUFBUSxXQUFBLENBQXFCQyxNQUFyQixFQUFtQztBQUNqQyxXQUFPQSxPQUFPQyxPQUFQLENBQWUsTUFBZixNQUEyQixDQUFsQztBQUNEO0FBRUQsU0FBQUMsZ0JBQUEsQ0FBMEJwQyxPQUExQixFQUFvRHFDLEdBQXBELEVBQThEO0FBQzVELFFBQUlILFNBQVNsQyxRQUFRaUIsT0FBUixDQUFnQkMsT0FBaEIsSUFDUmxCLFFBQVFpQixPQUFSLENBQWdCQyxPQUFoQixDQUF3Qm9CLElBRGhCLElBRVJ0QyxRQUFRaUIsT0FBUixDQUFnQkMsT0FBaEIsQ0FBd0JvQixJQUF4QixDQUE2QmxCLEVBRnJCLElBRTJCLEVBRnhDO0FBR0EsUUFBSWxDLFFBQVFFLEdBQVIsQ0FBWW1ELGVBQVosSUFBK0JOLFlBQVlDLE1BQVosQ0FBbkMsRUFBd0Q7QUFDdEQsWUFBSUcsSUFBSUcsTUFBSixHQUFhLENBQWpCLEVBQW9CO0FBQ2xCLG1CQUFPSCxHQUFQO0FBQ0Q7QUFDRCxZQUFJSSxNQUFNSixJQUFJRyxNQUFkO0FBQ0EsWUFBSUUsTUFBTUwsSUFBSU0sS0FBSixDQUFVLENBQVYsRUFBYUMsS0FBS0MsR0FBTCxDQUFTRCxLQUFLRSxHQUFMLENBQVNGLEtBQUtHLEtBQUwsQ0FBV1YsSUFBSUcsTUFBSixHQUFhLENBQXhCLENBQVQsRUFBcUMsQ0FBckMsQ0FBVCxFQUFrREgsSUFBSUcsTUFBdEQsQ0FBYixDQUFWO0FBQ0EsWUFBSSxPQUFPSCxJQUFJLENBQUosQ0FBUCxLQUFrQixRQUF0QixFQUFnQztBQUM5QixnQkFBSVcsUUFBUVAsTUFBTUMsSUFBSUYsTUFBdEI7QUFDQUUsZ0JBQUlPLElBQUosQ0FBUyxhQUFhRCxLQUFiLEdBQXFCLG9DQUE5QjtBQUNEO0FBQ0QsZUFBT04sR0FBUDtBQUNEO0FBQ0QsV0FBT0wsR0FBUDtBQUNEO0FBRUQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTJGQSxJQUFNYSxnQkFBZ0IsQ0FBQywrQ0FBRCxFQUNwQiwwQ0FEb0IsRUFFcEIsc0NBRm9CLEVBR3BCLG1DQUhvQixFQUlwQixpQ0FKb0IsRUFLcEIsbUNBTG9CLEVBTXBCLDBDQU5vQixFQU9wQiwwRkFQb0IsRUFRcEIsZ0ZBUm9CLEVBU3BCLHVDQVRvQixFQVVwQiw0RUFWb0IsQ0FBdEI7QUFhQSxJQUFJQyxlQUFlRCxhQUFuQjtBQUVBLElBQUlFLGlCQUFpQixDQUNuQixnREFEbUIsRUFFbkIsRUFGbUIsRUFHbkIsRUFIbUIsRUFJbkIsRUFKbUIsRUFLbkIseUVBTG1CLEVBTW5CLEVBTm1CLENBQXJCO0FBUUEsSUFBTUMsY0FBYyxDQUFDLGlIQUFELEVBQ2xCLG9EQURrQixFQUVsQixpS0FGa0IsRUFHbEIsc0dBSGtCLEVBSWxCLHNHQUprQixDQUFwQjtBQVFBLElBQU1DLG9CQUFvQixDQUN4QixxREFEd0IsRUFFeEIsbURBRndCLEVBR3hCLDBGQUh3QixFQUl4QixxRUFKd0IsQ0FBMUI7QUFRQSxJQUFNQyxrQkFBa0IsQ0FDdEIsd0ZBRHNCLEVBRXRCLDhDQUZzQixFQUd0QixpREFIc0IsRUFJdEIsOERBSnNCLEVBS3RCLHdFQUxzQixFQU10QixpREFOc0IsRUFPdEIsbUNBUHNCLENBQXhCO0FBVWFDLFFBQUFDLG1CQUFBLEdBQXNCLENBQ2pDLHVFQURpQyxFQUVqQyx5SEFGaUMsRUFHakMseUlBSGlDLEVBSWpDLG9MQUppQyxFQUtqQywrR0FMaUMsRUFNakMsaUhBTmlDLEVBT2pDLHNIQVBpQyxFQVFqQywySkFSaUMsQ0FBdEI7QUFZQUQsUUFBQUUscUJBQUEsR0FBd0I7QUFDN0IsZ0JBQVksaUZBRGlCO0FBRTdCLGNBQVUsZ0RBRm1CO0FBRzdCLFdBQU8sb0VBSHNCO0FBSTdCLFlBQVEsa0NBSnFCO0FBSzdCLGNBQVUsa0pBTG1CO0FBTTdCLFlBQVE7QUFOcUIsQ0FBeEI7QUFTYixTQUFBQyxlQUFBLENBQXlCdEIsR0FBekIsRUFBc0M7QUFDcEMsV0FBT0EsSUFBSU8sS0FBS0csS0FBTCxDQUFXSCxLQUFLZ0IsTUFBTCxLQUFnQnZCLElBQUlHLE1BQS9CLElBQXlDSCxJQUFJRyxNQUFqRCxDQUFQO0FBQ0Q7QUFFRCxJQUFBcUIseUJBQUEsWUFBQTtBQUNFLGFBQUFBLHNCQUFBLEdBQUEsQ0FFQztBQUVEQSwyQkFBQUMsU0FBQSxDQUFBQyxTQUFBLEdBQUEsVUFBVUMsT0FBVixFQUE4Q0MsUUFBOUMsRUFBcUg7QUFDbkgsWUFBSUMsSUFBSSxFQUFSO0FBRUFyRCxpQkFBUyxpQkFBaUJtRCxRQUFRL0MsT0FBUixDQUFnQlYsSUFBMUM7QUFDQSxZQUFJeUQsUUFBUS9DLE9BQVIsQ0FBZ0JWLElBQWhCLENBQXFCNEIsT0FBckIsQ0FBNkIsTUFBN0IsS0FBd0MsQ0FBNUMsRUFBK0M7QUFDN0MrQixjQUFFbkUsTUFBRixHQUFXLGFBQVg7QUFDQW1FLGNBQUVDLEtBQUYsR0FBVSxHQUFWO0FBQ0EsZ0JBQUlDLEtBQUssRUFBVDtBQUNBQSxlQUFHQyxVQUFILEdBQWdCLFNBQVM3QixNQUF6QjtBQUNBNEIsZUFBR0UsUUFBSCxHQUFjTixRQUFRL0MsT0FBUixDQUFnQlYsSUFBaEIsQ0FBcUJpQyxNQUFuQztBQUNBNEIsZUFBR0QsS0FBSCxHQUFXLEdBQVg7QUFDQUQsY0FBRTFELFFBQUYsR0FBYSxDQUFDNEQsRUFBRCxDQUFiO0FBQ0FILHFCQUFTTSxTQUFULEVBQW9CTCxDQUFwQjtBQUNBO0FBQ0Q7QUFDRCxZQUFJRixRQUFRL0MsT0FBUixDQUFnQlYsSUFBaEIsQ0FBcUI0QixPQUFyQixDQUE2QixJQUE3QixLQUFzQyxDQUExQyxFQUE2QztBQUMzQytCLGNBQUVuRSxNQUFGLEdBQVcsV0FBWDtBQUNBbUUsY0FBRUMsS0FBRixHQUFVLEdBQVY7QUFDQSxnQkFBSUMsS0FBSyxFQUFUO0FBQ0FBLGVBQUdDLFVBQUgsR0FBZ0IsS0FBSzdCLE1BQXJCO0FBQ0E0QixlQUFHRSxRQUFILEdBQWNOLFFBQVEvQyxPQUFSLENBQWdCVixJQUFoQixDQUFxQmlDLE1BQW5DO0FBQ0E0QixlQUFHRCxLQUFILEdBQVcsR0FBWDtBQUNBRCxjQUFFMUQsUUFBRixHQUFhLENBQUM0RCxFQUFELENBQWI7QUFDQUgscUJBQVNNLFNBQVQsRUFBb0JMLENBQXBCO0FBQ0E7QUFDRDtBQUNELFlBQUlGLFFBQVEvQyxPQUFSLENBQWdCVixJQUFoQixDQUFxQjRCLE9BQXJCLENBQTZCLE1BQTdCLEtBQXdDLENBQTVDLEVBQStDO0FBQzdDK0IsY0FBRW5FLE1BQUYsR0FBVyxXQUFYO0FBQ0FtRSxjQUFFQyxLQUFGLEdBQVUsR0FBVjtBQUNBLGdCQUFJQyxLQUFLLEVBQVQ7QUFDQUEsZUFBR0MsVUFBSCxHQUFnQixLQUFLN0IsTUFBckI7QUFDQTRCLGVBQUdFLFFBQUgsR0FBY04sUUFBUS9DLE9BQVIsQ0FBZ0JWLElBQWhCLENBQXFCaUMsTUFBbkM7QUFDQTRCLGVBQUdELEtBQUgsR0FBVyxHQUFYO0FBQ0FELGNBQUUxRCxRQUFGLEdBQWEsQ0FBQzRELEVBQUQsQ0FBYjtBQUNBSCxxQkFBU00sU0FBVCxFQUFvQkwsQ0FBcEI7QUFDQTtBQUNEO0FBQ0QsWUFBSUYsUUFBUS9DLE9BQVIsQ0FBZ0JWLElBQWhCLENBQXFCNEIsT0FBckIsQ0FBNkIsTUFBN0IsS0FBd0MsQ0FBNUMsRUFBK0M7QUFDN0MrQixjQUFFbkUsTUFBRixHQUFXLFdBQVg7QUFDQW1FLGNBQUVDLEtBQUYsR0FBVSxHQUFWO0FBQ0EsZ0JBQUlDLEtBQUssRUFBVDtBQUNBQSxlQUFHQyxVQUFILEdBQWdCLEtBQUs3QixNQUFyQjtBQUNBNEIsZUFBR0UsUUFBSCxHQUFjTixRQUFRL0MsT0FBUixDQUFnQlYsSUFBaEIsQ0FBcUJpQyxNQUFuQztBQUNBNEIsZUFBR0QsS0FBSCxHQUFXLEdBQVg7QUFDQUQsY0FBRTFELFFBQUYsR0FBYSxDQUFDNEQsRUFBRCxDQUFiO0FBQ0FILHFCQUFTTSxTQUFULEVBQW9CTCxDQUFwQjtBQUNBO0FBQ0Q7QUFDRCxZQUFJRixRQUFRL0MsT0FBUixDQUFnQlYsSUFBaEIsQ0FBcUI0QixPQUFyQixDQUE2QixNQUE3QixLQUF3QyxDQUE1QyxFQUErQztBQUM3QytCLGNBQUVuRSxNQUFGLEdBQVcsV0FBWDtBQUNBbUUsY0FBRUMsS0FBRixHQUFVLEdBQVY7QUFDQSxnQkFBSUMsS0FBSyxFQUFUO0FBQ0FBLGVBQUdDLFVBQUgsR0FBZ0IsS0FBSzdCLE1BQXJCO0FBQ0E0QixlQUFHRSxRQUFILEdBQWNOLFFBQVEvQyxPQUFSLENBQWdCVixJQUFoQixDQUFxQmlDLE1BQW5DO0FBQ0E0QixlQUFHRCxLQUFILEdBQVcsR0FBWDtBQUNBRCxjQUFFMUQsUUFBRixHQUFhLENBQUM0RCxFQUFELENBQWI7QUFDQUgscUJBQVNNLFNBQVQsRUFBb0JMLENBQXBCO0FBQ0E7QUFDRDtBQUNEckQsaUJBQVMscUJBQVQ7QUFDQXFELFVBQUVuRSxNQUFGLEdBQVcsTUFBWDtBQUNBbUUsVUFBRUMsS0FBRixHQUFVLEdBQVY7QUFDQSxZQUFJQyxLQUFLLEVBQVQ7QUFDQUEsV0FBR0MsVUFBSCxHQUFnQixRQUFRN0IsTUFBeEI7QUFDQTRCLFdBQUdFLFFBQUgsR0FBY04sUUFBUS9DLE9BQVIsQ0FBZ0JWLElBQWhCLENBQXFCaUMsTUFBbkM7QUFDQTRCLFdBQUdELEtBQUgsR0FBVyxHQUFYO0FBQ0FELFVBQUUxRCxRQUFGLEdBQWEsRUFBYjtBQUNBeUQsaUJBQVNNLFNBQVQsRUFBb0JMLENBQXBCO0FBQ0QsS0FwRUQ7QUFxRUYsV0FBQUwsc0JBQUE7QUExRUEsQ0FBQSxFQUFBO0FBQWFMLFFBQUFLLHNCQUFBLEdBQXNCQSxzQkFBdEI7QUE0RWIsSUFBTVcsWUFBWUMsTUFBbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQSxJQUFJQyxHQUFKO0FBQ0E7QUFDQTtBQUNBO0FBRUEsSUFBWUMsS0FBRXBHLFFBQU0sSUFBTixDQUFkO0FBRUEsSUFBSXFHLFFBQVFuRSxLQUFLb0UsS0FBTCxDQUFXLEtBQUtGLEdBQUdHLFlBQUgsQ0FBZ0IsZ0NBQWhCLENBQWhCLENBQVo7QUFDQSxJQUFJQyxTQUFTakUsZ0JBQWdCa0UsVUFBaEIsQ0FBMkJKLEtBQTNCLENBQWI7QUFDQTtBQUdBLFNBQUFLLFFBQUEsQ0FBa0JqRixPQUFsQixFQUE0Q0QsTUFBNUMsRUFBNERtRixNQUE1RCxFQUE2RjtBQUUzRlAsT0FBR1EsVUFBSCxDQUFjLDBCQUFkLEVBQTBDLE9BQU8xRSxLQUFLQyxTQUFMLENBQWU7QUFDOURILGNBQU1QLFFBQVFpQixPQUFSLENBQWdCVixJQUR3QztBQUU5RDZFLG1CQUFXcEYsUUFBUWlCLE9BQVIsQ0FBZ0JtRSxTQUZtQztBQUc5RHJGLGdCQUFRQSxNQUhzRDtBQUk5RDJDLGFBQUt3QyxVQUFVQSxPQUFPMUMsTUFBakIsSUFBMkIvRCxNQUFNNEcsU0FBTixDQUFnQkMsUUFBaEIsQ0FBeUJKLE9BQU8sQ0FBUCxDQUF6QixDQUEzQixJQUFrRSxHQUpUO0FBSzlESyx3QkFBZ0J2RixRQUFRaUIsT0FBUixDQUFnQkMsT0FBaEIsSUFDYmxCLFFBQVFpQixPQUFSLENBQWdCQyxPQUFoQixDQUF3QkMsWUFEWCxJQUVibkIsUUFBUWlCLE9BQVIsQ0FBZ0JDLE9BQWhCLENBQXdCQyxZQUF4QixDQUFxQ0MsRUFGeEIsSUFFOEIsRUFQZ0I7QUFROURjLGdCQUFRbEMsUUFBUWlCLE9BQVIsQ0FBZ0JDLE9BQWhCLElBQ0xsQixRQUFRaUIsT0FBUixDQUFnQkMsT0FBaEIsQ0FBd0JvQixJQURuQixJQUVMdEMsUUFBUWlCLE9BQVIsQ0FBZ0JDLE9BQWhCLENBQXdCb0IsSUFBeEIsQ0FBNkJsQixFQUZ4QixJQUU4QjtBQVZ3QixLQUFmLENBQWpELEVBV0ksVUFBVW9FLEdBQVYsRUFBZTlDLEdBQWYsRUFBa0I7QUFDcEIsWUFBSThDLEdBQUosRUFBUztBQUNQM0UscUJBQVMsb0JBQW9CMkUsR0FBN0I7QUFDRDtBQUNGLEtBZkQ7QUFnQkQ7QUFJRCxTQUFBQyxjQUFBLENBQXdCekYsT0FBeEIsRUFBa0RELE1BQWxELEVBQWtFbUYsTUFBbEUsRUFBc0c7QUFFcEdQLE9BQUdRLFVBQUgsQ0FBYywwQkFBZCxFQUEwQyxPQUFPMUUsS0FBS0MsU0FBTCxDQUFlO0FBQzlESCxjQUFNUCxRQUFRaUIsT0FBUixDQUFnQlYsSUFEd0M7QUFFOUQ2RSxtQkFBV3BGLFFBQVFpQixPQUFSLENBQWdCbUUsU0FGbUM7QUFHOURyRixnQkFBUUEsTUFIc0Q7QUFJOUQyQyxhQUFLd0MsVUFBVUEsT0FBTzFDLE1BQWpCLElBQTJCNUQsT0FBTzBHLFFBQVAsQ0FBZ0JKLE9BQU8sQ0FBUCxDQUFoQixDQUEzQixJQUF5RCxHQUpBO0FBSzlESyx3QkFBZ0J2RixRQUFRaUIsT0FBUixDQUFnQkMsT0FBaEIsSUFDYmxCLFFBQVFpQixPQUFSLENBQWdCQyxPQUFoQixDQUF3QkMsWUFEWCxJQUVibkIsUUFBUWlCLE9BQVIsQ0FBZ0JDLE9BQWhCLENBQXdCQyxZQUF4QixDQUFxQ0MsRUFGeEIsSUFFOEIsRUFQZ0I7QUFROURjLGdCQUFRbEMsUUFBUWlCLE9BQVIsQ0FBZ0JDLE9BQWhCLElBQ0xsQixRQUFRaUIsT0FBUixDQUFnQkMsT0FBaEIsQ0FBd0JvQixJQURuQixJQUVMdEMsUUFBUWlCLE9BQVIsQ0FBZ0JDLE9BQWhCLENBQXdCb0IsSUFBeEIsQ0FBNkJsQixFQUZ4QixJQUU4QjtBQVZ3QixLQUFmLENBQWpELEVBV0ksVUFBVW9FLEdBQVYsRUFBZTlDLEdBQWYsRUFBa0I7QUFDcEIsWUFBSThDLEdBQUosRUFBUztBQUNQM0UscUJBQVMsb0JBQW9CMkUsR0FBN0I7QUFDRDtBQUNGLEtBZkQ7QUFnQkQ7QUFFRCxTQUFBRSxtQkFBQSxDQUE2QjFGLE9BQTdCLEVBQXVERCxNQUF2RCxFQUF1RW1GLE1BQXZFLEVBQWdIO0FBRTlHUCxPQUFHUSxVQUFILENBQWMsMEJBQWQsRUFBMEMsT0FBTzFFLEtBQUtDLFNBQUwsQ0FBZTtBQUM5REgsY0FBTVAsUUFBUWlCLE9BQVIsQ0FBZ0JWLElBRHdDO0FBRTlENkUsbUJBQVdwRixRQUFRaUIsT0FBUixDQUFnQm1FLFNBRm1DO0FBRzlEckYsZ0JBQVFBLE1BSHNEO0FBSTlEMkMsYUFBS3dDLFVBQVVBLE9BQU8xQyxNQUFqQixJQUEyQjVELE9BQU8rRyxhQUFQLENBQXFCVCxPQUFPLENBQVAsQ0FBckIsQ0FBM0IsSUFBOEQsR0FKTDtBQUs5REssd0JBQWdCdkYsUUFBUWlCLE9BQVIsQ0FBZ0JDLE9BQWhCLElBQ2JsQixRQUFRaUIsT0FBUixDQUFnQkMsT0FBaEIsQ0FBd0JDLFlBRFgsSUFFYm5CLFFBQVFpQixPQUFSLENBQWdCQyxPQUFoQixDQUF3QkMsWUFBeEIsQ0FBcUNDLEVBRnhCLElBRThCLEVBUGdCO0FBUTlEYyxnQkFBUWxDLFFBQVFpQixPQUFSLENBQWdCQyxPQUFoQixJQUNMbEIsUUFBUWlCLE9BQVIsQ0FBZ0JDLE9BQWhCLENBQXdCb0IsSUFEbkIsSUFFTHRDLFFBQVFpQixPQUFSLENBQWdCQyxPQUFoQixDQUF3Qm9CLElBQXhCLENBQTZCbEIsRUFGeEIsSUFFOEI7QUFWd0IsS0FBZixDQUFqRCxFQVdJLFVBQVVvRSxHQUFWLEVBQWU5QyxHQUFmLEVBQWtCO0FBQ3BCLFlBQUk4QyxHQUFKLEVBQVM7QUFDUDNFLHFCQUFTLG9CQUFvQjJFLEdBQTdCO0FBQ0Q7QUFDRixLQWZEO0FBZ0JEO0FBRUQsSUFBSUksU0FBUyxFQUFiO0FBQ0E7Ozs7OztBQU1BLFNBQUFDLE9BQUEsQ0FBaUJDLFNBQWpCLEVBQTRCOUQsU0FBNUIsRUFBOEM7QUFFNUMsUUFBSStELFdBQVdoRSxVQUFVQyxTQUFWLENBQWY7QUFDQTBDLFVBQU0sSUFBSXBHLFFBQVEwSCxZQUFaLENBQXlCRixTQUF6QixDQUFOO0FBSUE7QUFDQTtBQUNBO0FBQ0EsUUFBSUcsYUFBYSxJQUFJbkYsZ0JBQWdCb0YsZ0JBQXBCLENBQXFDbkIsTUFBckMsQ0FBakI7QUFFQSxRQUFJb0IsU0FBUyxJQUFJN0gsUUFBUThILFlBQVosQ0FBeUIsRUFBRUMsYUFBYSxDQUFDSixVQUFELENBQWYsRUFBekIsQ0FBYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBLFFBQUlLLGVBQWUsSUFBSWhJLFFBQVE4SCxZQUFaLENBQXlCLEVBQUVDLGFBQWEsQ0FBQyxJQUFJeEMsc0JBQUosRUFBRCxDQUFmLEVBQXpCLENBQW5CO0FBRUFhLFFBQUl5QixNQUFKLENBQVcsU0FBWCxFQUFzQkcsWUFBdEI7QUFDQUEsaUJBQWFDLE9BQWIsQ0FBcUIsVUFBVXZHLE9BQVYsRUFBaUI7QUFDcENGLGtCQUFVLFNBQVYsRUFBcUJFLE9BQXJCLEVBQThCSCxLQUFLOEQsZ0JBQWdCTixXQUFoQixDQUFMLENBQTlCO0FBQ0E7QUFDRCxLQUhEO0FBS0FpRCxpQkFBYUUsT0FBYixDQUFxQixXQUFyQixFQUFrQyxDQUNoQyxVQUFVeEcsT0FBVixFQUFtQnlHLElBQW5CLEVBQXlCQyxJQUF6QixFQUE2QjtBQUMzQjFHLGdCQUFRMkcsVUFBUixDQUFtQkMsR0FBbkIsR0FBeUJILFFBQVEsRUFBakM7QUFDQW5JLGdCQUFRdUksT0FBUixDQUFnQnRHLElBQWhCLENBQXFCUCxPQUFyQixFQUE4QixpREFBOUI7QUFDRCxLQUorQixFQUtoQyxVQUFVQSxPQUFWLEVBQW1COEcsT0FBbkIsRUFBNEJKLElBQTVCLEVBQWdDO0FBQzlCMUcsZ0JBQVEyRyxVQUFSLENBQW1CQyxHQUFuQixHQUF5QkUsUUFBUUMsT0FBakM7QUFDQUw7QUFDRCxLQVIrQixFQVNoQyxVQUFVMUcsT0FBVixFQUFtQjhHLE9BQW5CLEVBQTBCO0FBQ3hCOUcsZ0JBQVFnSCxtQkFBUixDQUE0QixFQUFFL0csVUFBVUQsUUFBUTJHLFVBQVIsQ0FBbUJDLEdBQS9CLEVBQTVCO0FBQ0QsS0FYK0IsQ0FBbEM7QUFlQU4saUJBQWFFLE9BQWIsQ0FBcUIsYUFBckIsRUFBb0MsQ0FDbEMsVUFBVXhHLE9BQVYsRUFBbUJ5RyxJQUFuQixFQUF5QkMsSUFBekIsRUFBNkI7QUFDM0IxRyxnQkFBUTJHLFVBQVIsQ0FBbUJDLEdBQW5CLEdBQXlCSCxRQUFRLEVBQWpDO0FBQ0FuSSxnQkFBUXVJLE9BQVIsQ0FBZ0J0RyxJQUFoQixDQUFxQlAsT0FBckIsRUFBOEIsc0JBQTlCO0FBQ0QsS0FKaUMsRUFLbEMsVUFBVUEsT0FBVixFQUFtQjhHLE9BQW5CLEVBQTRCSixJQUE1QixFQUFnQztBQUM5QjFHLGdCQUFRMkcsVUFBUixDQUFtQkMsR0FBbkIsR0FBeUIsQ0FBQyxDQUExQixDQUQ4QixDQUNEO0FBQzdCRjtBQUNELEtBUmlDLEVBU2xDLFVBQVUxRyxPQUFWLEVBQW1COEcsT0FBbkIsRUFBMEI7QUFDeEI5RyxnQkFBUUgsSUFBUixDQUFhLG1CQUFiO0FBQ0QsS0FYaUMsQ0FBcEM7QUFjQXlHLGlCQUFhVyxTQUFiLENBQXVCLFVBQVVqSCxPQUFWLEVBQWlCO0FBQ3RDaUYsaUJBQVNqRixPQUFULEVBQWtCLFdBQWxCO0FBQ0EsWUFBSTBDLE1BQU1pQixnQkFBZ0JSLFlBQWhCLElBQWdDUSxnQkFBZ0JQLGNBQWhCLENBQTFDO0FBQ0F0RCxrQkFBVSxTQUFWLEVBQXFCRSxPQUFyQixFQUE4QkgsS0FBSzZDLEdBQUwsQ0FBOUI7QUFDRCxLQUpEO0FBT0FnQyxRQUFJeUIsTUFBSixDQUFXLFFBQVgsRUFBcUIsQ0FDbkIsVUFBVW5HLE9BQVYsRUFBbUJ5RyxJQUFuQixFQUF5QkMsSUFBekIsRUFBNkI7QUFDM0IxRyxnQkFBUWtILFVBQVIsQ0FBbUJOLEdBQW5CLEdBQXlCSCxRQUFRLEVBQWpDO0FBQ0FuSSxnQkFBUXVJLE9BQVIsQ0FBZ0J0RyxJQUFoQixDQUFxQlAsT0FBckIsRUFBOEIseUJBQTlCO0FBQ0QsS0FKa0IsRUFLbkIsVUFBVUEsT0FBVixFQUFtQjhHLE9BQW5CLEVBQTRCSixJQUE1QixFQUFnQztBQUM5QjFHLGdCQUFRMkcsVUFBUixDQUFtQkMsR0FBbkIsR0FBeUJFLFFBQVFDLE9BQWpDO0FBQ0QsS0FQa0IsRUFRbkIsVUFBVS9HLE9BQVYsRUFBbUI4RyxPQUFuQixFQUEwQjtBQUN4QjlHLGdCQUFRZ0gsbUJBQVIsQ0FBNEIsRUFBRS9HLFVBQVVELFFBQVFtSCxVQUFSLENBQW1CUCxHQUEvQixFQUE1QjtBQUNELEtBVmtCLENBQXJCO0FBY0FsQyxRQUFJeUIsTUFBSixDQUFXLEdBQVgsRUFBZ0JBLE1BQWhCO0FBRUFBLFdBQU9LLE9BQVAsQ0FBZSxRQUFmLEVBQXlCLENBQ3ZCLFVBQVV4RyxPQUFWLEVBQW1CeUcsSUFBbkIsRUFBeUJDLElBQXpCLEVBQTZCO0FBQzNCLFlBQUlVLGtCQUFrQixFQUF0QjtBQUNBLFlBQUlDLFVBQUo7QUFDQTtBQUNBeEcsaUJBQVMsYUFBVDtBQUNBQSxpQkFBUyxVQUFVSixLQUFLQyxTQUFMLENBQWUrRixLQUFLakcsUUFBcEIsQ0FBbkIsRUFBa0QrRCxTQUFsRCxFQUE2RCxDQUE3RDtBQUNBLFlBQUkrQyxLQUFLaEosUUFBUWlKLGdCQUFSLENBQXlCQyxVQUF6QixDQUFvQ2YsS0FBS2pHLFFBQXpDLEVBQW1ELElBQW5ELENBQVQ7QUFDQSxZQUFNMEUsU0FBU3hHLFFBQVErSSxVQUFSLENBQW1CSCxHQUFHSSxNQUF0QixFQUNiM0IsU0FBUzRCLEtBREksRUFDRzVCLFNBQVM2QixLQURaLEVBQ21CaEMsTUFEbkIsQ0FBZjtBQUVBWCxpQkFBU2pGLE9BQVQsRUFBa0IsUUFBbEIsRUFBNEJrRixNQUE1QjtBQUNBO0FBQ0E7QUFDQSxZQUFJLENBQUNBLE1BQUQsSUFBV0EsT0FBTzFDLE1BQVAsS0FBa0IsQ0FBakMsRUFBb0M7QUFDbENrRTtBQUNEO0FBQ0Q7QUFDQTdGLGlCQUFTLG1CQUFtQkosS0FBS0MsU0FBTCxDQUFld0UsT0FBTyxDQUFQLEtBQWEsRUFBNUIsRUFBZ0NYLFNBQWhDLEVBQTJDLENBQTNDLENBQTVCO0FBQ0ExRCxpQkFBUyxXQUFXcEMsTUFBTTRHLFNBQU4sQ0FBZ0J3QyxjQUFoQixDQUErQjNDLE1BQS9CLEVBQXVDLEVBQUU0QyxLQUFLLENBQVAsRUFBdkMsQ0FBcEI7QUFHQSxZQUFJcEosUUFBUXFKLFVBQVIsQ0FBbUI3QyxPQUFPLENBQVAsQ0FBbkIsQ0FBSixFQUFtQztBQUNqQ2xGLG9CQUFRMkcsVUFBUixDQUFtQnpCLE1BQW5CLEdBQTRCQSxPQUFPLENBQVAsQ0FBNUI7QUFDQTtBQUNBd0I7QUFDRCxTQUpELE1BSU8sSUFBSWhJLFFBQVFzSixTQUFSLENBQWtCOUMsT0FBTyxDQUFQLENBQWxCLENBQUosRUFBa0M7QUFDdkMsZ0JBQUkrQyxTQUFTdkosUUFBUXNKLFNBQVIsQ0FBa0I5QyxPQUFPLENBQVAsQ0FBbEIsQ0FBYjtBQUNBbEYsb0JBQVEyRyxVQUFSLENBQW1CekIsTUFBbkIsR0FBNEJBLE9BQU8sQ0FBUCxDQUE1QjtBQUNBbEYsb0JBQVEyRyxVQUFSLENBQW1Cc0IsTUFBbkIsR0FBNEJBLE1BQTVCO0FBQ0FuSSxzQkFBVSxRQUFWLEVBQW9CRSxPQUFwQixFQUE2QkgsS0FBSyxzQ0FBc0NwQixNQUFNNEcsU0FBTixDQUFnQkMsUUFBaEIsQ0FDdEV0RixRQUFRMkcsVUFBUixDQUFtQnpCLE1BRG1ELENBQTNDLENBQTdCO0FBR0E1RyxvQkFBUXVJLE9BQVIsQ0FBZ0J0RyxJQUFoQixDQUFxQlAsT0FBckIsRUFBOEJpSSxPQUFPMUgsSUFBckM7QUFDRCxTQVJNLE1BUUE7QUFDTCxnQkFBSTJILE9BQU9oRCxPQUFPMUMsTUFBUCxHQUFnQi9ELE1BQU00RyxTQUFOLENBQWdCQyxRQUFoQixDQUF5QkosT0FBTyxDQUFQLENBQXpCLENBQWhCLEdBQXNELFdBQWpFO0FBQ0FwRixzQkFBVSxRQUFWLEVBQW9CRSxPQUFwQixFQUE2QkgsS0FBSyw4QkFBOEJxSSxJQUFuQyxDQUE3QjtBQUNEO0FBQ0YsS0FyQ3NCLEVBc0N2QixVQUFVbEksT0FBVixFQUFtQjhHLE9BQW5CLEVBQTRCSixJQUE1QixFQUFnQztBQUM5QixZQUFJeEIsU0FBU2xGLFFBQVEyRyxVQUFSLENBQW1CekIsTUFBaEM7QUFDQSxZQUFJLENBQUNBLE1BQUQsSUFBV0EsT0FBTzFDLE1BQVAsS0FBa0IsQ0FBakMsRUFBb0M7QUFDbENrRTtBQUNEO0FBRUQsWUFBSUksUUFBUTdHLFFBQVosRUFBc0I7QUFDcEI7QUFDQXZCLG9CQUFReUosU0FBUixDQUFrQm5JLFFBQVEyRyxVQUFSLENBQW1CekIsTUFBckMsRUFBNkNsRixRQUFRMkcsVUFBUixDQUFtQnNCLE1BQWhFLEVBQXdFbkIsUUFBUTdHLFFBQWhGO0FBQ0Q7QUFDRCxZQUFJdkIsUUFBUXFKLFVBQVIsQ0FBbUIvSCxRQUFRMkcsVUFBUixDQUFtQnpCLE1BQXRDLENBQUosRUFBbUQ7QUFDakR3QjtBQUNELFNBRkQsTUFFTyxJQUFJaEksUUFBUXNKLFNBQVIsQ0FBa0JoSSxRQUFRMkcsVUFBUixDQUFtQnpCLE1BQXJDLENBQUosRUFBa0Q7QUFDdkQsZ0JBQUkrQyxTQUFTdkosUUFBUXNKLFNBQVIsQ0FBa0JoSSxRQUFRMkcsVUFBUixDQUFtQnpCLE1BQXJDLENBQWI7QUFDQWxGLG9CQUFRMkcsVUFBUixDQUFtQnNCLE1BQW5CLEdBQTRCQSxNQUE1QjtBQUNBM0osb0JBQVF1SSxPQUFSLENBQWdCdEcsSUFBaEIsQ0FBcUJQLE9BQXJCLEVBQThCaUksT0FBTzFILElBQXJDO0FBQ0Q7QUFDRixLQXZEc0IsRUF3RHZCLFVBQVVQLE9BQVYsRUFBbUI4RyxPQUFuQixFQUE0QkosSUFBNUIsRUFBZ0M7QUFDOUIsWUFBSXhCLFNBQVNsRixRQUFRMkcsVUFBUixDQUFtQnpCLE1BQWhDO0FBQ0EsWUFBSTRCLFFBQVE3RyxRQUFaLEVBQXNCO0FBQ3BCO0FBQ0F2QixvQkFBUXlKLFNBQVIsQ0FBa0JuSSxRQUFRMkcsVUFBUixDQUFtQnpCLE1BQXJDLEVBQ0VsRixRQUFRMkcsVUFBUixDQUFtQnNCLE1BRHJCLEVBQzZCbkIsUUFBUTdHLFFBRHJDO0FBRUQ7QUFDRCxZQUFJdkIsUUFBUXFKLFVBQVIsQ0FBbUIvSCxRQUFRMkcsVUFBUixDQUFtQnpCLE1BQXRDLENBQUosRUFBbUQ7QUFDakQsZ0JBQU1rRCxPQUFPekcsV0FBVzBHLFFBQVgsQ0FBb0JySSxRQUFRMkcsVUFBUixDQUFtQnpCLE1BQXZDLEVBQW9FYSxTQUFTdUMsT0FBN0UsQ0FBYjtBQUVBLGdCQUFJQyxRQUFRLElBQUlqSyxRQUFRa0ssT0FBWixDQUFvQnhJLE9BQXBCLEVBQ1RPLElBRFMsQ0FDSjZILEtBQUs3SCxJQURELEVBRVRrSSxTQUZTLENBRUNMLEtBQUt6SCxNQUZOLENBQVo7QUFHQTtBQUNBYixzQkFBVSxRQUFWLEVBQW9CRSxPQUFwQixFQUE2QkgsS0FBSzBJLEtBQUwsQ0FBN0I7QUFFRCxTQVRELE1BU087QUFDTCxnQkFBSXZJLFFBQVEyRyxVQUFSLENBQW1CekIsTUFBdkIsRUFBK0I7QUFDN0JwRiwwQkFBVSxRQUFWLEVBQ0VFLE9BREYsRUFDV0gsS0FBSyxzQ0FBc0NwQixNQUFNNEcsU0FBTixDQUFnQkMsUUFBaEIsQ0FDbER0RixRQUFRMkcsVUFBUixDQUFtQnpCLE1BRCtCLENBQTNDLENBRFg7QUFJRCxhQUxELE1BS087QUFDTHBGLDBCQUFVLFFBQVYsRUFBb0JFLE9BQXBCLEVBQTZCSCxLQUFLLDZCQUFMLENBQTdCO0FBQ0Q7QUFDRjtBQUNGLEtBbEZzQixDQUF6QjtBQXFGQXNHLFdBQU9LLE9BQVAsQ0FBZSxRQUFmLEVBQXlCLENBQ3ZCLFVBQVV4RyxPQUFWLEVBQW1CeUcsSUFBbkIsRUFBeUJDLElBQXpCLEVBQTZCO0FBQzNCLFlBQUlVLGtCQUFrQixFQUF0QjtBQUNBLFlBQUlDLFVBQUo7QUFDQTtBQUNBLFlBQUlwRyxVQUFVakIsUUFBUWlCLE9BQVIsQ0FBZ0JWLElBQTlCO0FBQ0FNLGlCQUFTLGlCQUFUO0FBQ0FBLGlCQUFTLFVBQVVKLEtBQUtDLFNBQUwsQ0FBZStGLEtBQUtqRyxRQUFwQixDQUFuQixFQUFrRCtELFNBQWxELEVBQTZELENBQTdEO0FBQ0EsWUFBSW1FLGlCQUFpQnBLLFFBQVFpSixnQkFBUixDQUF5QkMsVUFBekIsQ0FBb0NmLEtBQUtqRyxRQUF6QyxFQUFtRCxVQUFuRCxDQUFyQjtBQUNBLFlBQUltSSxXQUFXRCxlQUFlaEIsTUFBOUI7QUFDQSxZQUFJSixLQUFLaEosUUFBUWlKLGdCQUFSLENBQXlCQyxVQUF6QixDQUFvQ2YsS0FBS2pHLFFBQXpDLEVBQW1ELElBQW5ELENBQVQ7QUFDQSxZQUFJb0ksT0FBTyxFQUFYO0FBQ0EsWUFBSTtBQUNGQSxtQkFBT2hLLE9BQU9pSyxvQkFBUCxDQUE0QkYsUUFBNUIsRUFBc0M1QyxTQUFTNEIsS0FBL0MsRUFBc0QxRyxPQUF0RCxDQUFQO0FBQ0FKLHFCQUFTLGNBQWMrSCxLQUFLRSxJQUFMLENBQVUsR0FBVixDQUF2QjtBQUNBLFNBSEYsQ0FHRSxPQUFPQyxDQUFQLEVBQVU7QUFDVixnQkFBSUEsQ0FBSixFQUFPO0FBQ0xsSSx5QkFBUyxtQkFBbUJrSSxDQUE1QjtBQUNBakosMEJBQVUsUUFBVixFQUFvQkUsT0FBcEIsRUFBNkJILEtBQUssbUNBQW1DOEksUUFBbkMsSUFDL0JJLElBQUksTUFBTUEsRUFBRUMsUUFBRixFQUFOLEdBQXFCLEdBQXpCLEdBQStCLEVBREEsQ0FBTCxDQUE3QjtBQUVBO0FBQ0E7QUFDRDtBQUNGO0FBRUQsWUFBSUMsTUFBTTFFLFNBQVY7QUFDQTtBQUNBLFlBQUlxRSxLQUFLcEcsTUFBTCxLQUFnQixDQUFwQixFQUF1QjtBQUNyQnlHLGtCQUFNTCxLQUFLLENBQUwsQ0FBTjtBQUNBLGdCQUFJLENBQUNLLEdBQUwsRUFBVTtBQUNSakosd0JBQVFILElBQVIsQ0FBYSxtQ0FBbUM4SSxRQUFuQyxHQUE4QyxHQUEzRDtBQUNBO0FBQ0E7QUFDRDtBQUNGO0FBQ0QsWUFBSUMsS0FBS3BHLE1BQUwsS0FBZ0IsQ0FBcEIsRUFBdUI7QUFDckIzQixxQkFBUyx5QkFBeUJvSSxHQUFsQztBQUNBLGdCQUFNL0QsU0FBU3RHLE9BQU9zSyxlQUFQLENBQXVCRCxHQUF2QixFQUE0QjNCLEdBQUdJLE1BQS9CLEVBQ2IzQixTQUFTNEIsS0FESSxFQUNHNUIsU0FBU3VDLE9BRFosQ0FBZjtBQUVBekgscUJBQVMsbUJBQW1CSixLQUFLQyxTQUFMLENBQWV3RSxNQUFmLENBQTVCO0FBQ0FPLDJCQUFlekYsT0FBZixFQUF3QixRQUF4QixFQUFrQ2tGLE1BQWxDO0FBQ0EsZ0JBQUlpRSxRQUFRdkssT0FBT3dLLHNCQUFQLENBQThCbEUsTUFBOUIsQ0FBWjtBQUNBLGdCQUFJaUUsS0FBSixFQUFXO0FBQ1RuSix3QkFBUUgsSUFBUixDQUFhc0osS0FBYjtBQUNBO0FBQ0E7QUFDRDtBQUNELGdCQUFJLENBQUNqRSxNQUFELElBQVdBLE9BQU8xQyxNQUFQLEtBQWtCLENBQWpDLEVBQW9DO0FBQ2xDMUMsMEJBQVUsUUFBVixFQUFvQkUsT0FBcEIsRUFBNkJILEtBQUssbUNBQW1Db0osR0FBbkMsR0FBeUMsSUFBekMsR0FBZ0ROLFFBQWhELEdBQTJELHNCQUEzRCxHQUFvRnJCLEdBQUdJLE1BQXZGLEdBQWdHLEdBQXJHLENBQTdCO0FBQ0E7QUFDQTtBQUNELGFBSkQsTUFJTztBQUNMO0FBQ0E3Ryx5QkFBUyxtQkFBbUJKLEtBQUtDLFNBQUwsQ0FBZXdFLE9BQU8sQ0FBUCxLQUFhLEVBQTVCLEVBQWdDWCxTQUFoQyxFQUEyQyxDQUEzQyxDQUE1QjtBQUNBMUQseUJBQVMsV0FBV2pDLE9BQU9pSixjQUFQLENBQXNCM0MsTUFBdEIsRUFBOEIsRUFBRTRDLEtBQUssQ0FBUCxFQUE5QixDQUFwQjtBQUNBO0FBQ0FoSSwwQkFBVSxRQUFWLEVBQW9CRSxPQUFwQixFQUE2QkgsS0FBSyxTQUFTOEksUUFBVCxHQUFvQixNQUFwQixHQUE2QnJCLEdBQUdJLE1BQWhDLEdBQXlDLE1BQXpDLEdBQWtEeEMsT0FBTyxDQUFQLEVBQVVBLE1BQTVELEdBQXFFLElBQTFFLENBQTdCLEVBTEssQ0FLMEc7QUFDaEg7QUFDRixTQXZCRCxDQXVCRTtBQXZCRixhQXdCSztBQUNIckUseUJBQVMsMkJBQTJCK0gsS0FBS0UsSUFBTCxDQUFVLEdBQVYsQ0FBcEM7QUFDQSxvQkFBTU8sWUFBWXpLLE9BQU8wSyxpQkFBUCxDQUF5QlYsSUFBekIsRUFBK0J0QixHQUFHSSxNQUFsQyxFQUNoQjNCLFFBRGdCLENBQWxCO0FBRUFsRix5QkFBUyxtQkFBbUJKLEtBQUtDLFNBQUwsQ0FBZTJJLFNBQWYsQ0FBNUI7QUFDQTNELG9DQUFvQjFGLE9BQXBCLEVBQTZCLFFBQTdCLEVBQXVDcUosU0FBdkM7QUFDQSxvQkFBSUYsUUFBUXZLLE9BQU8ySywyQkFBUCxDQUFtQ0YsU0FBbkMsQ0FBWjtBQUNBLG9CQUFJRixLQUFKLEVBQVc7QUFDVG5KLDRCQUFRSCxJQUFSLENBQWFzSixLQUFiO0FBQ0E7QUFDQTtBQUNEO0FBQ0Qsb0JBQUksQ0FBQ0UsU0FBRCxJQUFjQSxVQUFVN0csTUFBVixLQUFxQixDQUF2QyxFQUEwQztBQUN4QzFDLDhCQUFVLFFBQVYsRUFBb0JFLE9BQXBCLEVBQTZCSCxLQUFLLG1DQUFtQzhJLFFBQW5DLEdBQThDLE1BQTlDLEdBQXVENUosTUFBTXlLLG9CQUFOLENBQTJCWixJQUEzQixDQUF2RCxHQUEwRixzQkFBMUYsR0FBbUh0QixHQUFHSSxNQUF0SCxHQUErSCxHQUFwSSxDQUE3QjtBQUNBO0FBQ0E7QUFDRCxpQkFKRCxNQUlPO0FBQ0w7QUFDQTdHLDZCQUFTLG1CQUFtQkosS0FBS0MsU0FBTCxDQUFlMkksVUFBVSxDQUFWLEtBQWdCLEVBQS9CLEVBQW1DOUUsU0FBbkMsRUFBOEMsQ0FBOUMsQ0FBNUI7QUFDQTtBQUNBO0FBQ0F6RSw4QkFBVSxRQUFWLEVBQW9CRSxPQUFwQixFQUE2QkgsS0FBSyxTQUFTZCxNQUFNeUssb0JBQU4sQ0FBMkJaLElBQTNCLENBQVQsR0FBNEMsTUFBNUMsR0FBcUR0QixHQUFHSSxNQUF4RCxHQUFpRSxPQUFqRSxHQUEyRTNJLE1BQU15SyxvQkFBTixDQUEyQkgsVUFBVSxDQUFWLEVBQWFuRSxNQUF4QyxDQUEzRSxHQUE2SCxJQUFsSSxDQUE3QixFQUxLLENBS2tLO0FBQ3hLO0FBQ0YsYUFqRjBCLENBaUZ6QjtBQUNILEtBbkZzQixDQUF6QjtBQXVGQWlCLFdBQU9LLE9BQVAsQ0FBZSxTQUFmLEVBQTBCLENBQ3hCLFVBQVV4RyxPQUFWLEVBQW1CeUcsSUFBbkIsRUFBeUJDLElBQXpCLEVBQTZCO0FBQzNCLFlBQUlVLGtCQUFrQixFQUF0QjtBQUNBLFlBQUlDLFVBQUo7QUFDQTtBQUNBLFlBQUlwRyxVQUFVakIsUUFBUWlCLE9BQVIsQ0FBZ0JWLElBQTlCO0FBQ0FNLGlCQUFTLGtCQUFUO0FBQ0FBLGlCQUFTLFVBQVVKLEtBQUtDLFNBQUwsQ0FBZStGLEtBQUtqRyxRQUFwQixDQUFuQixFQUFrRCtELFNBQWxELEVBQTZELENBQTdEO0FBQ0EsWUFBSW1FLGlCQUFpQnBLLFFBQVFpSixnQkFBUixDQUF5QkMsVUFBekIsQ0FBb0NmLEtBQUtqRyxRQUF6QyxFQUFtRCxZQUFuRCxDQUFyQjtBQUNBLFlBQUltSSxXQUFXRCxlQUFlaEIsTUFBOUI7QUFDQSxZQUFJSixLQUFLaEosUUFBUWlKLGdCQUFSLENBQXlCQyxVQUF6QixDQUFvQ2YsS0FBS2pHLFFBQXpDLEVBQW1ELE9BQW5ELENBQVQ7QUFDQSxZQUFJbUksYUFBYSxZQUFqQixFQUErQjtBQUM3QjtBQUNBLGdCQUFJYyxTQUFTbEYsU0FBYjtBQUNBLGdCQUFJK0MsTUFBTUEsR0FBR0ksTUFBYixFQUFxQjtBQUNuQitCLHlCQUFTNUssUUFBUTZLLFdBQVIsQ0FBb0IzRCxRQUFwQixFQUE4QnVCLEdBQUdJLE1BQWpDLENBQVQ7QUFDRDtBQUNELGdCQUFJLENBQUMrQixNQUFMLEVBQWE7QUFDWCxvQkFBSS9HLE1BQU1OLGlCQUFpQnBDLE9BQWpCLEVBQTBCK0YsU0FBUzRDLFFBQW5DLEVBQTZDRyxJQUE3QyxDQUFrRCxLQUFsRCxDQUFWO0FBQ0Esb0JBQUl4QixNQUFNQSxHQUFHSSxNQUFiLEVBQXFCO0FBQ25CNUgsOEJBQVUsU0FBVixFQUFxQkUsT0FBckIsRUFBOEJILEtBQUssaURBQWlEeUgsR0FBR0ksTUFBcEQsR0FBNkQsaUNBQTdELEdBQWlHaEYsR0FBdEcsQ0FBOUI7QUFDRCxpQkFGRCxNQUVPO0FBQ0w1Qyw4QkFBVSxTQUFWLEVBQXFCRSxPQUFyQixFQUE4QkgsS0FBSyw0QkFBNEI2QyxHQUFqQyxDQUE5QjtBQUNEO0FBQ0Q7QUFDRCxhQVJELE1BUU87QUFDTCxvQkFBSWlILE9BQU9qSSxNQUFNa0ksc0JBQU4sQ0FBNkI3RCxRQUE3QixFQUF1QzBELE1BQXZDLENBQVg7QUFDQSxvQkFBSS9HLE1BQU1OLGlCQUFpQnBDLE9BQWpCLEVBQTBCMkosSUFBMUIsRUFBZ0NiLElBQWhDLENBQXFDLEtBQXJDLENBQVY7QUFDQWhKLDBCQUFVLFNBQVYsRUFBcUJFLE9BQXJCLEVBQThCSCxLQUFLLCtCQUErQjRKLE1BQS9CLEdBQXdDLGNBQXhDLEdBQXlEL0csR0FBOUQsQ0FBOUI7QUFDQTtBQUNEO0FBQ0Y7QUFDRCxZQUFJaUcsYUFBYSxTQUFqQixFQUE0QjtBQUMxQixnQkFBSWpHLE1BQU1OLGlCQUFpQnBDLE9BQWpCLEVBQTBCK0YsU0FBUzhELE9BQW5DLEVBQTRDZixJQUE1QyxDQUFpRCxLQUFqRCxDQUFWO0FBQ0FoSixzQkFBVSxTQUFWLEVBQXFCRSxPQUFyQixFQUE4QkgsS0FBSyx5QkFBeUI2QyxHQUE5QixDQUE5QjtBQUNBO0FBQ0Q7QUFDRCxZQUFJaUcsYUFBYSxPQUFqQixFQUEwQjtBQUN4QixnQkFBSWpHLE1BQU1OLGlCQUFpQnBDLE9BQWpCLEVBQTBCK0YsU0FBUzZCLEtBQW5DLEVBQTBDa0MsR0FBMUMsQ0FBOEMsVUFBVUMsS0FBVixFQUFlO0FBQ3JFLHVCQUFPQSxNQUFNQyxJQUFiO0FBQ0QsYUFGUyxFQUVQbEIsSUFGTyxDQUVGLEtBRkUsQ0FBVjtBQUdBaEosc0JBQVUsU0FBVixFQUFxQkUsT0FBckIsRUFBOEJILEtBQUssdUJBQXVCNkMsR0FBNUIsQ0FBOUI7QUFDQTtBQUNEO0FBQ0QsWUFBSWtHLE9BQU8sRUFBWDtBQUNBLFlBQUk7QUFDRkEsbUJBQU9oSyxPQUFPaUssb0JBQVAsQ0FBNEJGLFFBQTVCLEVBQXNDNUMsU0FBUzRCLEtBQS9DLEVBQXNEMUcsT0FBdEQsQ0FBUDtBQUNBSixxQkFBUyxjQUFjK0gsS0FBS0UsSUFBTCxDQUFVLEdBQVYsQ0FBdkI7QUFDQSxTQUhGLENBR0UsT0FBT0MsQ0FBUCxFQUFVO0FBQ1YsZ0JBQUlBLENBQUosRUFBTztBQUNMbEkseUJBQVMsbUJBQW1Ca0ksQ0FBNUI7QUFDQWpKLDBCQUFVLFFBQVYsRUFBb0JFLE9BQXBCLEVBQTZCSCxLQUFLLG1DQUFtQzhJLFFBQW5DLEdBQThDLElBQTlDLEdBQXFESSxFQUFFQyxRQUFGLEVBQXJELEdBQW9FLEdBQXpFLENBQTdCO0FBQ0E7QUFDQTtBQUNEO0FBQ0Y7QUFDRCxZQUFJLENBQUNKLElBQUQsSUFBVUEsS0FBS3BHLE1BQUwsS0FBZ0IsQ0FBOUIsRUFBa0M7QUFDaEMxQyxzQkFBVSxTQUFWLEVBQXFCRSxPQUFyQixFQUE4QkgsS0FBSyxtQ0FBbUM4SSxRQUFuQyxHQUE4QyxHQUFuRCxDQUE5QjtBQUNBO0FBQ0E7QUFDRDtBQUNELFlBQUlNLE1BQU0sRUFBVjtBQUNBLFlBQUlMLEtBQUtwRyxNQUFMLEtBQWdCLENBQXBCLEVBQXVCO0FBQ3JCeUcsa0JBQU1MLEtBQUssQ0FBTCxDQUFOO0FBQ0Q7QUFDRCxZQUFJQSxLQUFLcEcsTUFBTCxLQUFnQixDQUFwQixFQUF1QjtBQUNyQjNCLHFCQUFTLHlCQUF5Qm9JLEdBQWxDO0FBQ0EsZ0JBQUkzQixNQUFNQSxHQUFHSSxNQUFiLEVBQXFCO0FBQ25CN0cseUJBQVMsZ0JBQWdCeUcsR0FBR0ksTUFBNUI7QUFDQSxvQkFBSXVDLGNBQWN2SSxNQUFNd0ksdUNBQU4sQ0FBOENuRSxRQUE5QyxFQUF3RGtELEdBQXhELEVBQTZELElBQTdELENBQWxCO0FBQ0Esb0JBQUlrQixVQUFVdEwsUUFBUXVMLGtCQUFSLENBQTJCbkIsR0FBM0IsRUFBZ0MzQixHQUFHSSxNQUFuQyxFQUNaM0IsU0FBUzRCLEtBREcsRUFDSTVCLFNBQVN1QyxPQURiLEVBQ3NCMkIsV0FEdEIsQ0FBZDtBQUVBO0FBQ0Esb0JBQUksQ0FBQ0UsUUFBUTNILE1BQWIsRUFBcUI7QUFDbkIzQiw2QkFBUyxrQkFBVDtBQUNBLHdCQUFJd0osa0JBQWtCM0ksTUFBTXdJLHVDQUFOLENBQThDbkUsUUFBOUMsRUFBd0RrRCxHQUF4RCxFQUE2RCxLQUE3RCxDQUF0QjtBQUNBa0IsOEJBQVV0TCxRQUFReUwsb0JBQVIsQ0FBNkJyQixHQUE3QixFQUFrQzNCLEdBQUdJLE1BQXJDLEVBQTZDM0IsU0FBUzRCLEtBQXRELEVBQ1I1QixTQUFTdUMsT0FERCxFQUNVK0IsZUFEVixDQUFWO0FBRUQ7QUFDRHhKLHlCQUFTLG9CQUFvQkosS0FBS0MsU0FBTCxDQUFleUosT0FBZixDQUE3QjtBQUNBLG9CQUFJSSxjQUFjbkksaUJBQWlCcEMsT0FBakIsRUFBMEJuQixRQUFRMkwsV0FBUixDQUFvQkwsT0FBcEIsQ0FBMUIsQ0FBbEI7QUFDQTFFLCtCQUFlekYsT0FBZixFQUF3QixTQUF4QixFQUFtQ21LLE9BQW5DO0FBQ0Esb0JBQUlJLFlBQVkvSCxNQUFoQixFQUF3QjtBQUN0QjFDLDhCQUFVLFNBQVYsRUFBcUJFLE9BQXJCLEVBQThCSCxLQUFLLFNBQVM4SSxRQUFULEdBQW9CLE9BQXBCLEdBQThCckIsR0FBR0ksTUFBakMsR0FBMEMsWUFBMUMsR0FBeUQ2QyxZQUFZekIsSUFBWixDQUFpQixLQUFqQixDQUE5RCxDQUE5QjtBQUNELGlCQUZELE1BRU87QUFDTGhKLDhCQUFVLFNBQVYsRUFBcUJFLE9BQXJCLEVBQThCSCxLQUFLLHdCQUF3QjhJLFFBQXhCLEdBQW1DLE9BQW5DLEdBQTZDckIsR0FBR0ksTUFBaEQsR0FBeUQsS0FBekQsR0FBaUU2QyxZQUFZekIsSUFBWixDQUFpQixLQUFqQixDQUF0RSxDQUE5QjtBQUNEO0FBQ0Q7QUFDRCxhQXJCRCxNQXFCTztBQUNMO0FBQ0E7QUFDQSxvQkFBSXVCLGtCQUFrQjNJLE1BQU13SSx1Q0FBTixDQUE4Q25FLFFBQTlDLEVBQXdEa0QsR0FBeEQsRUFBNkQsS0FBN0QsQ0FBdEI7QUFDQSxvQkFBSS9ELFNBQVNyRyxRQUFReUwsb0JBQVIsQ0FBNkJyQixHQUE3QixFQUFrQ0EsR0FBbEMsRUFBdUNsRCxTQUFTNEIsS0FBaEQsRUFBdUQ1QixTQUFTdUMsT0FBaEUsRUFBeUUrQixlQUF6RSxDQUFiO0FBQ0E1RSwrQkFBZXpGLE9BQWYsRUFBd0IsU0FBeEIsRUFBbUNrRixNQUFuQztBQUNBLG9CQUFJQSxPQUFPMUMsTUFBWCxFQUFtQjtBQUNqQjNCLDZCQUFTLG9CQUFvQkosS0FBS0MsU0FBTCxDQUFld0UsTUFBZixDQUE3QjtBQUNBLHdCQUFJcUYsY0FBYyxFQUFsQjtBQUNBMUosNkJBQVMsaUJBQWlCb0ksR0FBMUI7QUFDQSx3QkFBSUEsUUFBUSxrQkFBWixFQUFnQztBQUM5QnNCLHNDQUFjbkksaUJBQWlCcEMsT0FBakIsRUFBMEJuQixRQUFRMkwsV0FBUixDQUFvQnRGLE1BQXBCLENBQTFCLENBQWQ7QUFDRCxxQkFGRCxNQUVPO0FBQ0xxRixzQ0FBYzFMLFFBQVEyTCxXQUFSLENBQW9CdEYsTUFBcEIsQ0FBZDtBQUNEO0FBQ0Qsd0JBQUlqRixXQUFXLFNBQVMwSSxRQUFULEdBQW9CLFlBQXBCLEdBQW1DNEIsWUFBWXpCLElBQVosQ0FBaUIsS0FBakIsQ0FBbEQ7QUFDQWhKLDhCQUFVLFNBQVYsRUFBcUJFLE9BQXJCLEVBQThCSCxLQUFLSSxRQUFMLENBQTlCO0FBQ0E7QUFDRCxpQkFaRCxNQVlPO0FBQ0wsd0JBQUlBLFdBQVcsNEJBQTRCZ0osR0FBNUIsR0FBa0MsSUFBakQ7QUFDQW5KLDhCQUFVLFNBQVYsRUFBcUJFLE9BQXJCLEVBQThCSCxLQUFLSSxRQUFMLENBQTlCO0FBQ0E7QUFDRDtBQUNGO0FBQ0YsU0EvQ0QsTUErQ087QUFDTDtBQUNBWSxxQkFBUywyQkFBMkIrSCxLQUFLRSxJQUFMLENBQVUsR0FBVixDQUFwQztBQUNBLGdCQUFJeEIsTUFBTUEsR0FBR0ksTUFBYixFQUFxQjtBQUNuQjdHLHlCQUFTLGdCQUFnQnlHLEdBQUdJLE1BQTVCO0FBQ0Esb0JBQUk7QUFDRix3QkFBSXVDLGNBQWN2SSxNQUFNK0kseUNBQU4sQ0FBZ0QxRSxRQUFoRCxFQUEwRDZDLElBQTFELEVBQWdFLElBQWhFLENBQWxCO0FBQ0EsaUJBRkYsQ0FFRSxPQUFPRyxDQUFQLEVBQVU7QUFDVmxJLDZCQUFTLG1CQUFtQmtJLENBQTVCO0FBQ0FqSiw4QkFBVSxRQUFWLEVBQW9CRSxPQUFwQixFQUE2QkgsS0FBSyx1QkFBdUI4SSxRQUF2QixHQUFrQyxHQUFsQyxHQUF3Q0ksRUFBRUMsUUFBRixFQUF4QyxHQUF1RCxHQUE1RCxDQUE3QjtBQUNBO0FBQ0Q7QUFDRCxvQkFBSTBCLFdBQVc3TCxRQUFROEwsdUJBQVIsQ0FBZ0MvQixJQUFoQyxFQUFzQ3RCLEdBQUdJLE1BQXpDLEVBQ2IzQixTQUFTNEIsS0FESSxFQUNHNUIsU0FBU3VDLE9BRFosRUFDcUIyQixXQURyQixDQUFmO0FBRUE7QUFDQSxvQkFBSSxDQUFDUyxTQUFTbEksTUFBZCxFQUFzQjtBQUNwQjNCLDZCQUFTLGtCQUFUO0FBQ0Esd0JBQUl3SixrQkFBa0IzSSxNQUFNK0kseUNBQU4sQ0FBZ0QxRSxRQUFoRCxFQUEwRDZDLElBQTFELEVBQWdFLEtBQWhFLENBQXRCO0FBQ0E4QiwrQkFBVzdMLFFBQVErTCx5QkFBUixDQUFrQ2hDLElBQWxDLEVBQXdDdEIsR0FBR0ksTUFBM0MsRUFBbUQzQixTQUFTNEIsS0FBNUQsRUFDVDVCLFNBQVN1QyxPQURBLEVBQ1MrQixlQURULENBQVg7QUFFRDtBQUNEeEoseUJBQVMsb0JBQW9CSixLQUFLQyxTQUFMLENBQWVnSyxRQUFmLENBQTdCO0FBQ0Esb0JBQUlILGNBQWNuSSxpQkFBaUJwQyxPQUFqQixFQUEwQm5CLFFBQVFnTSxnQkFBUixDQUF5QkgsUUFBekIsQ0FBMUIsQ0FBbEI7QUFDQWhGLG9DQUFvQjFGLE9BQXBCLEVBQTZCLFNBQTdCLEVBQXdDMEssUUFBeEM7QUFDQSxvQkFBSUgsWUFBWS9ILE1BQWhCLEVBQXdCO0FBQ3RCMUMsOEJBQVUsU0FBVixFQUFxQkUsT0FBckIsRUFBOEJILEtBQUssU0FBUzhJLFFBQVQsR0FBb0IsT0FBcEIsR0FBOEJyQixHQUFHSSxNQUFqQyxHQUEwQyxZQUExQyxHQUF5RDZDLFlBQVl6QixJQUFaLENBQWlCLEtBQWpCLENBQTlELENBQTlCO0FBQ0QsaUJBRkQsTUFFTztBQUNMaEosOEJBQVUsU0FBVixFQUFxQkUsT0FBckIsRUFBOEJILEtBQUssd0JBQXdCOEksUUFBeEIsR0FBbUMsT0FBbkMsR0FBNkNyQixHQUFHSSxNQUFoRCxHQUF5RCxLQUF6RCxHQUFpRTZDLFlBQVl6QixJQUFaLENBQWlCLEtBQWpCLENBQXRFLENBQTlCO0FBQ0Q7QUFDRDtBQUNELGFBM0JELE1BMkJPO0FBQ0w7QUFDQTtBQUNBLG9CQUFJdUIsa0JBQWtCLEVBQXRCO0FBQ0Esb0JBQUk7QUFDRkEsc0NBQWtCM0ksTUFBTStJLHlDQUFOLENBQWdEMUUsUUFBaEQsRUFBMEQ2QyxJQUExRCxFQUFnRSxLQUFoRSxDQUFsQjtBQUNBLGlCQUZGLENBRUUsT0FBT0csQ0FBUCxFQUFVO0FBQ1ZsSSw2QkFBUyxtQkFBbUJrSSxDQUE1QjtBQUNBakosOEJBQVUsUUFBVixFQUFvQkUsT0FBcEIsRUFBNkJILEtBQUssdUJBQXVCOEksUUFBdkIsR0FBa0MsR0FBbEMsR0FBd0NJLEVBQUVDLFFBQUYsRUFBeEMsR0FBdUQsR0FBNUQsQ0FBN0I7QUFDQTtBQUNBO0FBQ0Q7QUFDRCxvQkFBSThCLFVBQVVqTSxRQUFRK0wseUJBQVIsQ0FBa0NoQyxJQUFsQyxFQUF3QyxPQUFPQSxLQUFLRSxJQUFMLENBQVUsT0FBVixDQUFQLEdBQTRCLElBQXBFLEVBQTBFL0MsU0FBUzRCLEtBQW5GLEVBQTBGNUIsU0FBU3VDLE9BQW5HLEVBQTRHK0IsZUFBNUcsQ0FBZDtBQUNBM0Usb0NBQW9CMUYsT0FBcEIsRUFBNkIsU0FBN0IsRUFBd0M4SyxPQUF4QztBQUNBLG9CQUFJQSxRQUFRdEksTUFBWixFQUFvQjtBQUNsQjNCLDZCQUFTLG9CQUFvQkosS0FBS0MsU0FBTCxDQUFlb0ssT0FBZixDQUE3QjtBQUNBLHdCQUFJUCxjQUFjLEVBQWxCO0FBQ0ExSiw2QkFBUyxpQkFBaUIrSCxLQUFLRSxJQUFMLENBQVUsSUFBVixDQUExQjtBQUNBLHdCQUFJRyxRQUFRLGtCQUFaLEVBQWdDO0FBQzlCc0Isc0NBQWNuSSxpQkFBaUJwQyxPQUFqQixFQUEwQm5CLFFBQVFnTSxnQkFBUixDQUF5QkMsT0FBekIsQ0FBMUIsQ0FBZDtBQUNELHFCQUZELE1BRU87QUFDTFAsc0NBQWMxTCxRQUFRZ00sZ0JBQVIsQ0FBeUJDLE9BQXpCLENBQWQ7QUFDRDtBQUNELHdCQUFJN0ssV0FBVyxTQUFTMEksUUFBVCxHQUFvQixZQUFwQixHQUFtQzRCLFlBQVl6QixJQUFaLENBQWlCLEtBQWpCLENBQWxEO0FBQ0FoSiw4QkFBVSxTQUFWLEVBQXFCRSxPQUFyQixFQUE4QkgsS0FBS0ksUUFBTCxDQUE5QjtBQUNBO0FBQ0QsaUJBWkQsTUFZTztBQUNMLHdCQUFJQSxXQUFXLDRCQUE0QmdKLEdBQTVCLEdBQWtDLElBQWpEO0FBQ0FuSiw4QkFBVSxTQUFWLEVBQXFCRSxPQUFyQixFQUE4QkgsS0FBS0ksUUFBTCxDQUE5QjtBQUNBO0FBQ0Q7QUFDRjtBQUNGO0FBQ0YsS0EvS3VCLENBQTFCO0FBa0xBa0csV0FBT0ssT0FBUCxDQUFlLFVBQWYsRUFBMkIsQ0FDekIsVUFBVXhHLE9BQVYsRUFBbUJ5RyxJQUFuQixFQUF5QkMsSUFBekIsRUFBNkI7QUFDM0IsWUFBSVUsa0JBQWtCLEVBQXRCO0FBQ0EsWUFBSUMsVUFBSjtBQUNBO0FBQ0EsWUFBSXBHLFVBQVVqQixRQUFRaUIsT0FBUixDQUFnQlYsSUFBOUI7QUFDQU0saUJBQVMsbUJBQVQ7QUFDQUEsaUJBQVMsVUFBVUosS0FBS0MsU0FBTCxDQUFlK0YsS0FBS2pHLFFBQXBCLENBQW5CLEVBQWtEK0QsU0FBbEQsRUFBNkQsQ0FBN0Q7QUFDQSxZQUFJd0csYUFBYXpNLFFBQVFpSixnQkFBUixDQUF5QkMsVUFBekIsQ0FBb0NmLEtBQUtqRyxRQUF6QyxFQUFtRCxJQUFuRCxDQUFqQjtBQUNBLFlBQUl3SyxZQUFZRCxjQUFjQSxXQUFXckQsTUFBekM7QUFDQSxZQUFJdUQsZUFBZTNNLFFBQVFpSixnQkFBUixDQUF5QkMsVUFBekIsQ0FBb0NmLEtBQUtqRyxRQUF6QyxFQUFtRCxHQUFuRCxDQUFuQjtBQUNBLFlBQUkwSyxVQUFVRCxnQkFBZ0JBLGFBQWF2RCxNQUEzQztBQUNBLFlBQUl5RCxlQUFlNUcsU0FBbkI7QUFDQSxZQUFJMkcsT0FBSixFQUFhO0FBQ1hDLDJCQUFldE0sUUFBUTZLLFdBQVIsQ0FBb0IzRCxRQUFwQixFQUE4Qm1GLE9BQTlCLENBQWY7QUFDQXJLLHFCQUFTLGVBQWVzSyxZQUF4QjtBQUNBLGdCQUFJLENBQUNBLFlBQUwsRUFBbUI7QUFDakJyTCwwQkFBVSxVQUFWLEVBQXNCRSxPQUF0QixFQUErQkgsS0FBSyxpREFBaURxTCxPQUFqRCxHQUEyRCwwRUFBaEUsQ0FBL0I7QUFDQTtBQUNEO0FBQ0Y7QUFFRHJLLGlCQUFTLGlCQUFpQm1LLFNBQTFCO0FBQ0EsWUFBSXhILFFBQUFFLHFCQUFBLENBQXNCc0gsVUFBVUksV0FBVixFQUF0QixDQUFKLEVBQW9EO0FBQ2xEO0FBQ0EsZ0JBQUlDLFNBQVMsRUFBYjtBQUNBLGdCQUFJRixZQUFKLEVBQWtCO0FBQ2hCRSx5QkFBUyxpQkFBaUJGLFlBQWpCLEdBQWdDLDZDQUF6QztBQUNEO0FBQ0R0SyxxQkFBUyxxQkFBVDtBQUNBZixzQkFBVSxVQUFWLEVBQXNCRSxPQUF0QixFQUErQkgsS0FBS3dMLFNBQVMsR0FBVCxHQUFlTCxTQUFmLEdBQTJCLE9BQTNCLEdBQXFDeEgsUUFBQUUscUJBQUEsQ0FBc0JzSCxVQUFVSSxXQUFWLEVBQXRCLENBQXJDLEdBQXNGLEVBQTNGLENBQS9CO0FBQ0E7QUFDRDtBQUNELFlBQUlFLGFBQWEsRUFBakI7QUFDQSxZQUFJMU0sT0FBTzJNLGVBQVAsQ0FBdUJQLFNBQXZCLEVBQWtDeEksTUFBbEMsR0FBMkMsQ0FBL0MsRUFBa0Q7QUFDaEQxQyxzQkFBVSxVQUFWLEVBQXNCRSxPQUF0QixFQUErQkgsS0FBSyx5REFBeURtTCxTQUF6RCxHQUFxRSwrQkFBMUUsQ0FBL0I7QUFDQTtBQUVEO0FBQ0QsWUFBSXJDLFdBQVcvSixPQUFPNE0sZUFBUCxDQUF1QlIsU0FBdkIsRUFBa0NqRixTQUFTNEIsS0FBM0MsRUFBa0QxRyxPQUFsRCxDQUFmO0FBQ0EsWUFBSXdLLGFBQWEsRUFBakI7QUFDQSxZQUFJOUMsUUFBSixFQUFjO0FBQ1o7QUFDQThDLHlCQUFhM00sU0FBUzRNLGdCQUFULENBQTBCL0MsUUFBMUIsRUFBbUN3QyxZQUFuQyxFQUFpRHBGLFFBQWpELEVBQTBEOUUsT0FBMUQsQ0FBYjtBQUNEO0FBQ0QsWUFBSTBLLFVBQVU3TSxTQUFTOE0sb0JBQVQsQ0FBOEJaLFNBQTlCLEVBQXlDRyxZQUF6QyxFQUFzRHBGLFFBQXRELENBQWQ7QUFDQSxZQUFHMEYsVUFBSCxFQUFlO0FBQ2YsZ0JBQUlJLFdBQVdKLFdBQVczQixHQUFYLENBQWUsVUFBQXBILEdBQUEsRUFBRztBQUMvQix1QkFBRzVELFNBQVNnTixhQUFULENBQXVCZCxTQUF2QixFQUFpQ3JDLFFBQWpDLEVBQTJDNUMsUUFBM0MsSUFBb0QsSUFBcEQsR0FBeURyRCxHQUE1RDtBQUFpRSxhQURwRCxDQUFmO0FBRUM7QUFDRCxZQUFHK0ksV0FBV2pKLE1BQWQsRUFBc0I7QUFDcEJtSixzQkFBVUUsU0FBUy9DLElBQVQsQ0FBYyxJQUFkLENBQVY7QUFBK0IsYUFBRSxJQUFGLEdBQVM2QyxPQUFUO0FBQ2hDO0FBQ0Q3TCxrQkFBVSxVQUFWLEVBQXNCRSxPQUF0QixFQUErQkgsS0FBSzhMLE9BQUwsQ0FBL0I7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFxQkE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFxSUQsS0FoTndCLENBQTNCO0FBb05BeEYsV0FBT0ssT0FBUCxDQUFlLGNBQWYsRUFBK0IsQ0FDN0IsVUFBVXhHLE9BQVYsRUFBbUJ5RyxJQUFuQixFQUF5QkMsSUFBekIsRUFBNkI7QUFDM0IsWUFBSVUsa0JBQWtCLEVBQXRCO0FBQ0EsWUFBSUMsVUFBSjtBQUNBO0FBQ0EsWUFBSXBHLFVBQVVqQixRQUFRaUIsT0FBUixDQUFnQlYsSUFBOUI7QUFDQU0saUJBQVMsdUJBQVQ7QUFDQUEsaUJBQVMsVUFBVUosS0FBS0MsU0FBTCxDQUFlK0YsS0FBS2pHLFFBQXBCLENBQW5CLEVBQWtEK0QsU0FBbEQsRUFBNkQsQ0FBN0Q7QUFDQSxZQUFJbUUsaUJBQWlCcEssUUFBUWlKLGdCQUFSLENBQXlCQyxVQUF6QixDQUFvQ2YsS0FBS2pHLFFBQXpDLEVBQW1ELFVBQW5ELENBQXJCO0FBQ0EsWUFBSXVMLGVBQWVyRCxlQUFlaEIsTUFBbEM7QUFDQSxZQUFJc0UsV0FBVzFOLFFBQVFpSixnQkFBUixDQUF5QkMsVUFBekIsQ0FBb0NmLEtBQUtqRyxRQUF6QyxFQUFtRCxVQUFuRCxDQUFmO0FBQ0EsWUFBSXlMLGVBQWVELFlBQWFBLFNBQVN0RSxNQUF6QztBQUNBO0FBQ0EsWUFBSXdFLHFCQUFzQjVOLFFBQVFpSixnQkFBUixDQUF5QkMsVUFBekIsQ0FBb0NmLEtBQUtqRyxRQUF6QyxFQUFtRCxRQUFuRCxDQUExQjtBQUNBLFlBQUkyTCxnQkFBZ0JELHNCQUFzQkEsbUJBQW1CeEUsTUFBN0Q7QUFDQSxZQUFJMEUsV0FBV3hOLE9BQU95TixlQUFQLENBQXVCSixZQUF2QixFQUFxQ2xHLFNBQVM0QixLQUE5QyxFQUFxRDFHLE9BQXJELENBQWY7QUFDQSxZQUFJMEgsV0FBVy9KLE9BQU80TSxlQUFQLENBQXVCTyxZQUF2QixFQUFxQ2hHLFNBQVM0QixLQUE5QyxFQUFxRDFHLE9BQXJELENBQWY7QUFDQSxZQUFJcUwsZUFBZTVLLE1BQU02SyxXQUFOLENBQWtCeEcsUUFBbEIsRUFBNEJxRyxRQUE1QixDQUFuQjtBQUNBLFlBQUlJLEtBQUtsTyxRQUFRaUosZ0JBQVIsQ0FBeUJDLFVBQXpCLENBQW9DZixLQUFLakcsUUFBekMsRUFBbUQsSUFBbkQsQ0FBVDtBQUNBLFlBQUksQ0FBQzRMLFFBQUwsRUFBZTtBQUNiLGdCQUFJSyxJQUFJLHNCQUFzQlIsWUFBdEIsR0FBcUMsOERBQTdDO0FBQ0FuTSxzQkFBVSxjQUFWLEVBQTBCRSxPQUExQixFQUFtQ0gsS0FBSywwRUFDcENvTSxZQURvQyxHQUNyQixNQURnQixDQUFuQztBQUVBLGtCQUFNLElBQUlTLEtBQUosQ0FBVUQsQ0FBVixDQUFOO0FBQ0Q7QUFDRCxZQUFJdEIsZUFBZTVHLFNBQW5CO0FBQ0EsWUFBSTRILGFBQUosRUFBbUI7QUFDakJ0TCxxQkFBUyx5QkFBeUJzTCxhQUFsQztBQUNBaEIsMkJBQWV0TSxRQUFRNkssV0FBUixDQUFvQjNELFFBQXBCLEVBQThCb0csYUFBOUIsQ0FBZjtBQUNBdEwscUJBQVMsZUFBZXNLLFlBQXhCO0FBQ0EsZ0JBQUksQ0FBQ0EsWUFBTCxFQUFtQjtBQUNqQnJMLDBCQUFVLFVBQVYsRUFBc0JFLE9BQXRCLEVBQStCSCxLQUFLLGlEQUFpRHNNLGFBQWpELEdBQWlFLDBFQUF0RSxDQUEvQjtBQUNBO0FBQ0Q7QUFDRjtBQUVELFlBQUlRLFdBQVdILE1BQU1BLEdBQUc5RSxNQUF4QjtBQUNBaUYsbUJBQVdoTyxVQUFVaU8sVUFBVixDQUFxQmpPLFVBQVVrTyxnQkFBVixDQUEyQkYsUUFBM0IsQ0FBckIsQ0FBWDtBQUNBOUwsaUJBQVMsK0JBQStCOEwsUUFBL0IsR0FBMEMsSUFBbkQ7QUFDQSxZQUFJWixpQkFBaUIsWUFBckIsRUFBbUM7QUFDakM7QUFDQSxnQkFBSWUsc0JBQXNCak8sUUFBUWtPLG9CQUFSLENBQTZCVCxZQUE3QixFQUEyQ0ssUUFBM0MsRUFBcUQ1RyxTQUFTNEMsUUFBOUQsQ0FBMUI7QUFDQSxnQkFBR3dDLFlBQUgsRUFBaUI7QUFDZixvQkFBSTZCLGdCQUFnQnRMLE1BQU1rSSxzQkFBTixDQUE2QjdELFFBQTdCLEVBQXNDb0YsWUFBdEMsQ0FBcEI7QUFDQTJCLHNDQUFzQjlOLEVBQUVpTyxZQUFGLENBQWVILG1CQUFmLEVBQW1DRSxhQUFuQyxDQUF0QjtBQUNEO0FBQ0R0SyxrQkFBTU4saUJBQWlCcEMsT0FBakIsRUFBMEI4TSxtQkFBMUIsRUFBK0NoRSxJQUEvQyxDQUFvRCxLQUFwRCxDQUFOO0FBQ0EsZ0JBQUlwRyxJQUFJRixNQUFSLEVBQWdCO0FBQ2Qsb0JBQUcySSxZQUFILEVBQWlCO0FBQ2ZyTCw4QkFBVSxjQUFWLEVBQTBCRSxPQUExQixFQUFtQ0gsS0FBSyxtQkFBaUJ1TSxRQUFqQixHQUF5QixLQUF6QixHQUE4Qk8sUUFBOUIsR0FBc0MsaUJBQXRDLEdBQXNEeEIsWUFBdEQsR0FBa0UsY0FBbEUsR0FBa0Z6SSxHQUF2RixDQUFuQztBQUNELGlCQUZELE1BRU07QUFDSjVDLDhCQUFVLGNBQVYsRUFBMEJFLE9BQTFCLEVBQW1DSCxLQUFLLG1CQUFpQnVNLFFBQWpCLEdBQXlCLEtBQXpCLEdBQThCTyxRQUE5QixHQUFzQyxjQUF0QyxHQUFzRGpLLEdBQTNELENBQW5DO0FBQ0Q7QUFDRixhQU5ELE1BTU87QUFDTDVDLDBCQUFVLGNBQVYsRUFBMEJFLE9BQTFCLEVBQW1DSCxLQUFLLDBCQUEwQnVNLFFBQTFCLEdBQXFDLElBQXJDLEdBQTRDTyxRQUE1QyxHQUF1RCxHQUE1RCxDQUFuQztBQUNEO0FBQ0Q7QUFDRCxTQWxCRCxNQW1CSyxJQUFJWixpQkFBaUIsU0FBckIsRUFBZ0M7QUFDbkMsZ0JBQUlwQyxPQUFPOUssUUFBUWtPLG9CQUFSLENBQTZCVCxZQUE3QixFQUEyQ0ssUUFBM0MsRUFBcUQ1RyxTQUFTOEQsT0FBOUQsQ0FBWDtBQUNBbkgsa0JBQU1OLGlCQUFpQnBDLE9BQWpCLEVBQTBCMkosSUFBMUIsRUFBZ0NiLElBQWhDLENBQXFDLEtBQXJDLENBQU47QUFDQSxnQkFBSXBHLElBQUlGLE1BQVIsRUFBZ0I7QUFDZDFDLDBCQUFVLGNBQVYsRUFBMEJFLE9BQTFCLEVBQW1DSCxLQUFLLGdCQUFnQnVNLFFBQWhCLEdBQTJCLElBQTNCLEdBQWtDTyxRQUFsQyxHQUE2QyxhQUE3QyxHQUE2RGpLLEdBQWxFLENBQW5DO0FBQ0QsYUFGRCxNQUVPO0FBQ0w1QywwQkFBVSxjQUFWLEVBQTBCRSxPQUExQixFQUFtQ0gsS0FBSyx1QkFBdUJ1TSxRQUF2QixHQUFrQyxJQUFsQyxHQUF5Q08sUUFBekMsR0FBb0QsR0FBekQsQ0FBbkM7QUFDRDtBQUNEO0FBQ0QsU0FUSSxNQVVBLElBQUlaLGlCQUFpQixPQUFyQixFQUE4QjtBQUNqQyxnQkFBSXBDLE9BQU85SyxRQUFRa08sb0JBQVIsQ0FBNkJULFlBQTdCLEVBQTJDSyxRQUEzQyxFQUFxRDVHLFNBQVM2QixLQUFULENBQWVrQyxHQUFmLENBQzlELFVBQVVDLEtBQVYsRUFBZTtBQUFJLHVCQUFPQSxNQUFNQyxJQUFiO0FBQW9CLGFBRHVCLENBQXJELENBQVg7QUFFQSxnQkFBSXRILE1BQU1OLGlCQUFpQnBDLE9BQWpCLEVBQTBCMkosSUFBMUIsRUFBZ0NiLElBQWhDLENBQXFDLEtBQXJDLENBQVY7QUFDQSxnQkFBSXBHLElBQUlGLE1BQVIsRUFBZ0I7QUFDZDFDLDBCQUFVLGNBQVYsRUFBMEJFLE9BQTFCLEVBQW1DSCxLQUFLLGNBQWN1TSxRQUFkLEdBQXlCLElBQXpCLEdBQWdDTyxRQUFoQyxHQUEyQyxhQUEzQyxHQUEyRGpLLEdBQWhFLENBQW5DO0FBQ0QsYUFGRCxNQUVPO0FBQ0w1QywwQkFBVSxjQUFWLEVBQTBCRSxPQUExQixFQUFtQ0gsS0FBSyxxQkFBcUJ1TSxRQUFyQixHQUFnQyxJQUFoQyxHQUF1Q08sUUFBdkMsR0FBa0QsR0FBdkQsQ0FBbkM7QUFDRDtBQUNEO0FBQ0QsU0FWSSxNQVdBO0FBQ0gsZ0JBQUkxRCxNQUFNckssT0FBTzRNLGVBQVAsQ0FBdUJPLFlBQXZCLEVBQXFDaEcsU0FBUzRCLEtBQTlDLEVBQXFEMUcsT0FBckQsQ0FBVjtBQUNBLGdCQUFJLENBQUNnSSxHQUFMLEVBQVU7QUFDUm5KLDBCQUFVLGNBQVYsRUFBMEJFLE9BQTFCLEVBQW1DSCxLQUFLLG1DQUFtQ2tNLFlBQW5DLEdBQWtELEdBQXZELENBQW5DO0FBQ0E7QUFDQTtBQUNEO0FBQ0RsTCxxQkFBUyx5QkFBeUJvSSxHQUFsQztBQUNBLGdCQUFJVSxPQUFPOUssUUFBUXFPLG9DQUFSLENBQTZDWixZQUE3QyxFQUEyREssUUFBM0QsRUFBcUVoRSxRQUFyRSxFQUErRTVDLFNBQVN1QyxPQUF4RixFQUFpRzZDLFlBQWpHLENBQVg7QUFDQSxnQkFBSXpJLE1BQU1OLGlCQUFpQnBDLE9BQWpCLEVBQTBCMkosSUFBMUIsRUFBZ0NiLElBQWhDLENBQXFDLEtBQXJDLENBQVY7QUFDQSxnQkFBSXFFLGVBQWUsRUFBbkI7QUFDQSxnQkFBSSxDQUFDdE8sUUFBUXVPLGdCQUFSLENBQXlCekUsUUFBekIsRUFBbUNvRCxZQUFuQyxDQUFMLEVBQXVEO0FBQ3JEb0IsK0JBQWUsT0FBT3hFLFFBQVAsR0FBa0IsSUFBakM7QUFDRDtBQUNELGdCQUFJakcsSUFBSUYsTUFBUixFQUFnQjtBQUNkLG9CQUFJMkksWUFBSixFQUFrQjtBQUNoQnJMLDhCQUFVLGNBQVYsRUFBMEJFLE9BQTFCLEVBQW1DSCxLQUFLLFFBQU1rTSxZQUFOLEdBQXFCb0IsWUFBckIsR0FBaUMsR0FBakMsR0FBcUNmLFFBQXJDLEdBQTZDLEtBQTdDLEdBQWtETyxRQUFsRCxHQUEwRCxpQkFBMUQsR0FBMEV4QixZQUExRSxHQUFzRixjQUF0RixHQUFzR3pJLEdBQTNHLENBQW5DO0FBRUQsaUJBSEQsTUFHTztBQUNMNUMsOEJBQVUsY0FBVixFQUEwQkUsT0FBMUIsRUFBbUNILEtBQUssUUFBTWtNLFlBQU4sR0FBcUJvQixZQUFyQixHQUFpQyxHQUFqQyxHQUFxQ2YsUUFBckMsR0FBNkMsS0FBN0MsR0FBa0RPLFFBQWxELEdBQTBELGNBQTFELEdBQTBFakssR0FBL0UsQ0FBbkM7QUFDRDtBQUNGLGFBUEQsTUFPTztBQUNMNUMsMEJBQVUsY0FBVixFQUEwQkUsT0FBMUIsRUFBbUNILEtBQUssZUFBZWtNLFlBQWYsR0FBOEJvQixZQUE5QixHQUE2QyxHQUE3QyxHQUFtRGYsUUFBbkQsR0FBOEQsSUFBOUQsR0FBcUVPLFFBQXJFLEdBQWdGLEdBQXJGLENBQW5DO0FBQ0Q7QUFDRDtBQUNEO0FBQ0YsS0F6RzRCLENBQS9CO0FBNEdBeEcsV0FBT0ssT0FBUCxDQUFlLFNBQWYsRUFBMEIsQ0FDeEIsVUFBVXhHLE9BQVYsRUFBbUJ5RyxJQUFuQixFQUF5QkMsSUFBekIsRUFBNkI7QUFDM0IsWUFBSVUsa0JBQWtCLEVBQXRCO0FBQ0EsWUFBSUMsVUFBSjtBQUNBO0FBQ0EsWUFBSXBHLFVBQVVqQixRQUFRaUIsT0FBUixDQUFnQlYsSUFBOUI7QUFDQU0saUJBQVMsZ0JBQVQ7QUFDQUEsaUJBQVMsVUFBVUosS0FBS0MsU0FBTCxDQUFlK0YsS0FBS2pHLFFBQXBCLENBQW5CLEVBQWtEK0QsU0FBbEQsRUFBNkQsQ0FBN0Q7QUFDQSxZQUFJbUUsaUJBQWlCcEssUUFBUWlKLGdCQUFSLENBQXlCQyxVQUF6QixDQUFvQ2YsS0FBS2pHLFFBQXpDLEVBQW1ELFlBQW5ELENBQXJCO0FBQ0EsWUFBSVMsUUFBUW1LLFdBQVIsR0FBc0JqSixPQUF0QixDQUE4QixRQUE5QixLQUEyQyxDQUEzQyxJQUFnRGxCLFFBQVFtSyxXQUFSLEdBQXNCakosT0FBdEIsQ0FBOEIsU0FBOUIsS0FBNEMsQ0FBaEcsRUFBbUc7QUFDakdyQyxzQkFBVSxTQUFWLEVBQXFCRSxPQUFyQixFQUE4QkgsS0FBSzhELGdCQUFnQkosZUFBaEIsQ0FBTCxDQUE5QjtBQUNBO0FBQ0Q7QUFDRCxZQUFJYixNQUFNaUIsZ0JBQWdCVCxhQUFoQixDQUFWO0FBQ0FwRCxrQkFBVSxTQUFWLEVBQXFCRSxPQUFyQixFQUE4QkgsS0FBSzZDLEdBQUwsQ0FBOUI7QUFDRCxLQWZ1QixDQUExQjtBQWtCQXlELFdBQU9LLE9BQVAsQ0FBZSxTQUFmLEVBQTBCLENBQ3hCLFVBQVV4RyxPQUFWLEVBQW1CeUcsSUFBbkIsRUFBeUJDLElBQXpCLEVBQTZCO0FBQzNCLFlBQUlVLGtCQUFrQixFQUF0QjtBQUNBLFlBQUlDLFVBQUo7QUFDQTtBQUNBLFlBQUlwRyxVQUFVakIsUUFBUWlCLE9BQVIsQ0FBZ0JWLElBQTlCO0FBQ0FNLGlCQUFTLGtCQUFUO0FBQ0FBLGlCQUFTLFVBQVVKLEtBQUtDLFNBQUwsQ0FBZStGLEtBQUtqRyxRQUFwQixDQUFuQixFQUFrRCtELFNBQWxELEVBQTZELENBQTdEO0FBQ0EsWUFBSW1FLGlCQUFpQnBLLFFBQVFpSixnQkFBUixDQUF5QkMsVUFBekIsQ0FBb0NmLEtBQUtqRyxRQUF6QyxFQUFtRCxZQUFuRCxDQUFyQjtBQUNBVixrQkFBVSxTQUFWLEVBQXFCRSxPQUFyQixFQUE4QkgsS0FBSzhELGdCQUFnQkgsUUFBQUMsbUJBQWhCLENBQUwsQ0FBOUI7QUFDRCxLQVZ1QixDQUExQjtBQWNBMEMsV0FBT0ssT0FBUCxDQUFlLE9BQWYsRUFBd0IsQ0FDdEIsVUFBVXhHLE9BQVYsRUFBbUJ5RyxJQUFuQixFQUF5QkMsSUFBekIsRUFBNkI7QUFDM0IvRyxxQkFBYTtBQUNYSyxxQkFBU0EsT0FERTtBQUVYRCxvQkFBUSxPQUZHO0FBR1hFLHNCQUFVO0FBSEMsU0FBYjtBQUtBRCxnQkFBUXFOLFdBQVIsQ0FBb0IsU0FBcEIsRUFBK0JyTixRQUFRc04sUUFBUixDQUFpQkMsS0FBaEQ7QUFDRCxLQVJxQixFQVN0QixVQUFVdk4sT0FBVixFQUFtQjhHLE9BQW5CLEVBQTRCSixJQUE1QixFQUFnQztBQUM5QixZQUFJOEcsUUFBUXhOLFFBQVEyRyxVQUFSLENBQW1CNkcsS0FBL0I7QUFDQTlHO0FBQ0QsS0FacUIsRUFhdEIsVUFBVTFHLE9BQVYsRUFBbUI4RyxPQUFuQixFQUEwQjtBQUN4QjlHLGdCQUFRSCxJQUFSLENBQWE4RCxnQkFBZ0JMLGlCQUFoQixDQUFiLEVBRHdCLENBQzBCO0FBQ2xEO0FBQ0QsS0FoQnFCLENBQXhCO0FBbUJBNkMsV0FBT0ssT0FBUCxDQUFlLE1BQWYsRUFBdUIsQ0FDckIsVUFBVXhHLE9BQVYsRUFBbUJ5RyxJQUFuQixFQUF5QkMsSUFBekIsRUFBNkI7QUFDM0I3RixpQkFBUyxRQUFUO0FBQ0FBLGlCQUFTLFNBQVNKLEtBQUtDLFNBQUwsQ0FBZStGLEtBQUtqRyxRQUFwQixDQUFsQjtBQUNBYixxQkFBYTtBQUNYSyxxQkFBU0EsT0FERTtBQUVYRCxvQkFBUSxNQUZHO0FBR1hFLHNCQUFVO0FBSEMsU0FBYjtBQUtBRCxnQkFBUUgsSUFBUixDQUFhLDBCQUFiO0FBQ0QsS0FWb0IsQ0FBdkI7QUFZQXNHLFdBQU9LLE9BQVAsQ0FBZSxNQUFmLEVBQXVCLENBQ3JCLFVBQVV4RyxPQUFWLEVBQW1CeUcsSUFBbkIsRUFBeUJDLElBQXpCLEVBQTZCO0FBQzNCN0YsaUJBQVMsUUFBVDtBQUNBQSxpQkFBUyxNQUFUO0FBQ0FiLGdCQUFRSCxJQUFSLENBQWEsaUNBQWI7QUFDRCxLQUxvQixDQUF2QjtBQVFBO0FBQ0FzRyxXQUFPSyxPQUFQLENBQWUsT0FBZixFQUF3QixDQUN0QixVQUFVeEcsT0FBVixFQUFtQnlHLElBQW5CLEVBQXlCQyxJQUF6QixFQUE2QjtBQUMzQjdGLGlCQUFTLE9BQVQ7QUFDQTtBQUNBLFlBQUk0TSxRQUFRblAsUUFBUWlKLGdCQUFSLENBQXlCQyxVQUF6QixDQUFvQ2YsS0FBS2pHLFFBQXpDLEVBQW1ELHFCQUFuRCxDQUFaO0FBQ0EsWUFBSWtOLE9BQU9wUCxRQUFRaUosZ0JBQVIsQ0FBeUJvRyxXQUF6QixDQUFxQ2xILEtBQUtqRyxRQUExQyxDQUFYO0FBQ0EsWUFBSWdOLFFBQVF4TixRQUFRMkcsVUFBUixDQUFtQjZHLEtBQW5CLEdBQTJCO0FBQ3JDQyxtQkFBT0EsUUFBUUEsTUFBTS9GLE1BQWQsR0FBdUIsSUFETztBQUVyQ3RDLHVCQUFXc0ksT0FBT0EsS0FBS0UsT0FBTCxFQUFQLEdBQXdCO0FBRkUsU0FBdkM7QUFJQTtBQUNBLFlBQUksQ0FBQ0osTUFBTUMsS0FBWCxFQUFrQjtBQUNoQjlOLHlCQUFhO0FBQ1hLLHlCQUFTQSxPQURFO0FBRVhELHdCQUFRLE9BRkc7QUFHWEUsMEJBQVU7QUFIQyxhQUFiO0FBS0EzQixvQkFBUXVJLE9BQVIsQ0FBZ0J0RyxJQUFoQixDQUFxQlAsT0FBckIsRUFBOEIsb0NBQTlCO0FBQ0QsU0FQRCxNQU9PO0FBQ0wwRztBQUNEO0FBQ0YsS0FyQnFCLEVBc0J0QixVQUFVMUcsT0FBVixFQUFtQjhHLE9BQW5CLEVBQTRCSixJQUE1QixFQUFnQztBQUM5QixZQUFJOEcsUUFBUXhOLFFBQVEyRyxVQUFSLENBQW1CNkcsS0FBL0I7QUFDQSxZQUFJMUcsUUFBUTdHLFFBQVosRUFBc0I7QUFDcEJ1TixrQkFBTUMsS0FBTixHQUFjM0csUUFBUTdHLFFBQXRCO0FBQ0Q7QUFFRDtBQUNBLFlBQUl1TixNQUFNQyxLQUFOLElBQWUsQ0FBQ0QsTUFBTXBJLFNBQTFCLEVBQXFDO0FBR25DOUcsb0JBQVF1SSxPQUFSLENBQWdCNkcsSUFBaEIsQ0FBcUIxTixPQUFyQixFQUE4QixnREFBOUI7QUFDRCxTQUpELE1BSU87QUFDTDBHO0FBQ0Q7QUFDRixLQXBDcUIsRUFxQ3RCLFVBQVUxRyxPQUFWLEVBQW1COEcsT0FBbkIsRUFBMEI7QUFDeEIsWUFBSTBHLFFBQVF4TixRQUFRMkcsVUFBUixDQUFtQjZHLEtBQS9CO0FBQ0EsWUFBSTFHLFFBQVE3RyxRQUFaLEVBQXNCO0FBQ3BCLGdCQUFJeU4sT0FBT3BQLFFBQVFpSixnQkFBUixDQUF5Qm9HLFdBQXpCLENBQXFDLENBQUM3RyxRQUFRN0csUUFBVCxDQUFyQyxDQUFYO0FBQ0F1TixrQkFBTXBJLFNBQU4sR0FBa0JzSSxPQUFPQSxLQUFLRSxPQUFMLEVBQVAsR0FBd0IsSUFBMUM7QUFDRDtBQUNEO0FBQ0EsWUFBSUosTUFBTUMsS0FBTixJQUFlRCxNQUFNcEksU0FBekIsRUFBb0M7QUFDbEM7QUFDQW9JLGtCQUFNdE0sT0FBTixHQUFnQmxCLFFBQVFpQixPQUFSLENBQWdCQyxPQUFoQztBQUNBO0FBRUE7QUFDQSxnQkFBSTJNLE9BQU8sSUFBSXJNLElBQUosQ0FBU2dNLE1BQU1wSSxTQUFmLENBQVg7QUFDQSxnQkFBSTBJLE9BQU9ELEtBQUtFLFFBQUwsS0FBa0IsRUFBN0I7QUFDQS9OLG9CQUFRSCxJQUFSLENBQWEsa0RBQWIsRUFDRTJOLE1BQU1DLEtBRFIsRUFFRUksS0FBS0csUUFBTCxLQUFrQixDQUZwQixFQUV1QkgsS0FBS0ksT0FBTCxFQUZ2QixFQUV1Q0osS0FBS0ssV0FBTCxFQUZ2QyxFQUdFSixPQUFPRCxLQUFLRSxRQUFMLEVBQVAsR0FBeUJGLEtBQUtFLFFBQUwsS0FBa0IsRUFIN0MsRUFHaURGLEtBQUtNLFVBQUwsRUFIakQsRUFHb0VMLE9BQU8sSUFBUCxHQUFjLElBSGxGO0FBSUQsU0FaRCxNQVlPO0FBQ0w5TixvQkFBUUgsSUFBUixDQUFhLG1CQUFiO0FBQ0Q7QUFDRixLQTNEcUIsQ0FBeEI7QUE4REFzRyxXQUFPYyxTQUFQLENBQWlCLFVBQVVqSCxPQUFWLEVBQWlCO0FBQ2hDaUYsaUJBQVNqRixPQUFULEVBQWtCLFdBQWxCO0FBQ0EsWUFBSW9PLFFBQVE5TSxZQUFZTixrQkFBa0JoQixPQUFsQixDQUFaLENBQVo7QUFDQSxZQUFJdUksUUFBUTZGLE1BQU1DLFNBQU4sQ0FBZ0JyTyxRQUFRaUIsT0FBUixDQUFnQlYsSUFBaEMsQ0FBWjtBQUNBVCxrQkFBVSxPQUFWLEVBQW1CRSxPQUFuQixFQUE0QkgsS0FBSzBJLEtBQUwsQ0FBNUI7QUFDQTtBQUNBO0FBQ0E7QUFDRCxLQVJEO0FBVUE7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJEO0FBRUQsSUFBSStGLE1BQUosRUFBWTtBQUNWQSxXQUFPOUssT0FBUCxHQUFpQjtBQUNmSyxnQ0FBd0JBLHNCQURUO0FBRWZKLDZCQUFxQkQsUUFBQUMsbUJBRk47QUFHZkMsK0JBQXdCRixRQUFBRSxxQkFIVDtBQUlmbUMsaUJBQVNBO0FBSk0sS0FBakI7QUFNRCIsImZpbGUiOiJib3Qvc21hcnRkaWFsb2cuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoZSBib3QgaW1wbGVtZW50YXRpb25cbiAqXG4gKiBJbnN0YW50aWF0ZSBhcHNzaW5nIGEgY29ubmVjdG9yIHZpYVxuICogbWFrZUJvdFxuICpcbiAqL1xuLyoqXG4gKiBAZmlsZVxuICogQG1vZHVsZSBqZnNlYi5mZGV2c3RhcnQuc21hcnRkaWFsb2dcbiAqIEBjb3B5cmlnaHQgKGMpIDIwMTYgR2VyZCBGb3JzdG1hbm5cbiAqL1xuLy9kZWNsYXJlIG1vZHVsZSAnZWxpemFib3QnIHsgfTtcbi8vZGVjbGFyZSBtb2R1bGUgJ3dpbnN0b24tcGcnIHsgfTtcbi8vZGVsY2FyZSBtb2R1bGUgJ3dpbnN0b24nIHt9O1xuXG5pbXBvcnQgKiBhcyBidWlsZGVyIGZyb20gJ2JvdGJ1aWxkZXInO1xuaW1wb3J0ICogYXMgZGVidWcgZnJvbSAnZGVidWcnO1xuXG5pbXBvcnQgKiBhcyBFeGVjIGZyb20gJy4uL2V4ZWMvZXhlYyc7XG5pbXBvcnQgKiBhcyBNYXRjaCBmcm9tICcuLi9tYXRjaC9tYXRjaCc7XG5cbmltcG9ydCAqIGFzIEFuYWx5emUgZnJvbSAnLi4vbWF0Y2gvYW5hbHl6ZSc7XG5pbXBvcnQgKiBhcyBCcmVha0Rvd24gZnJvbSAnLi4vbWF0Y2gvYnJlYWtkb3duJztcblxuaW1wb3J0ICogYXMgV2hhdElzIGZyb20gJy4uL21hdGNoL3doYXRpcyc7XG5pbXBvcnQgKiBhcyBMaXN0QWxsIGZyb20gJy4uL21hdGNoL2xpc3RhbGwnO1xuaW1wb3J0ICogYXMgRGVzY3JpYmUgZnJvbSAnLi4vbWF0Y2gvZGVzY3JpYmUnO1xuaW1wb3J0ICogYXMgVXRpbHMgZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xuXG5pbXBvcnQgKiBhcyBfIGZyb20gJ2xvZGFzaCc7XG5cbmltcG9ydCAqIGFzIERpYWxvZ0xvZ2dlciBmcm9tICcuLi91dGlscy9kaWFsb2dsb2dnZXInO1xuXG5pbXBvcnQgKiBhcyBwcm9jZXNzIGZyb20gJ3Byb2Nlc3MnO1xuXG52YXIgZGJ1cmwgPSBwcm9jZXNzLmVudi5EQVRBQkFTRV9VUkwgfHwgXCJcIjtcblxudmFyIHBnbG9jYWx1cmwgPSBcInBvc3RncmVzOi8vam9lOmFiY2RlZkBsb2NhbGhvc3Q6NTQzMi9hYm90XCI7XG52YXIgZGJ1cmwgPSBwcm9jZXNzLmVudi5EQVRBQkFTRV9VUkwgfHwgcGdsb2NhbHVybDtcblxuaW1wb3J0ICogYXMgcGcgZnJvbSAncGcnO1xudmFyIG8gPSBwZyBhcyBhbnk7XG5vLmRlZmF1bHRzLnNzbCA9IHRydWU7XG52YXIgZGlhbG9nTG9nZ2VyID0gRGlhbG9nTG9nZ2VyLmxvZ2dlcihcInNtYXJ0Ym90XCIsIGRidXJsLCBwZyk7XG5cbnR5cGUgc3RyaW5nT3JNZXNzYWdlID0gc3RyaW5nIHwgYnVpbGRlci5NZXNzYWdlO1xuZnVuY3Rpb24gc2VuZDxUIGV4dGVuZHMgc3RyaW5nT3JNZXNzYWdlPihvOiBUKTogVCB7IHJldHVybiBvOyB9O1xuZnVuY3Rpb24gZGlhbG9nbG9nKGludGVudDogc3RyaW5nLCBzZXNzaW9uOiBidWlsZGVyLlNlc3Npb24sIHJlc3BvbnNlOiBzdHJpbmdPck1lc3NhZ2UpIHtcbiAgdmFyIHNSZXNwb25zZTogc3RyaW5nO1xuICB2YXIgc0FjdGlvbjogc3RyaW5nO1xuICBpZiAodHlwZW9mIHJlc3BvbnNlID09PSBcInN0cmluZ1wiKSB7XG4gICAgc0FjdGlvbiA9IFwiXCI7XG4gICAgc1Jlc3BvbnNlID0gcmVzcG9uc2U7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGFNZXNzYWdlOiBidWlsZGVyLk1lc3NhZ2UgPSByZXNwb25zZTtcbiAgICB2YXIgaU1lc3NhZ2U6IGJ1aWxkZXIuSU1lc3NhZ2UgPSBhTWVzc2FnZS50b01lc3NhZ2UoKTtcbiAgICBzUmVzcG9uc2UgPSBpTWVzc2FnZS50ZXh0O1xuICAgIHNBY3Rpb24gPSAoaU1lc3NhZ2UuZW50aXRpZXMgJiYgaU1lc3NhZ2UuZW50aXRpZXNbMF0pID8gKEpTT04uc3RyaW5naWZ5KGlNZXNzYWdlLmVudGl0aWVzICYmIGlNZXNzYWdlLmVudGl0aWVzWzBdKSkgOiBcIlwiO1xuICB9XG4gIGRpYWxvZ0xvZ2dlcih7XG4gICAgaW50ZW50OiBpbnRlbnQsXG4gICAgc2Vzc2lvbjogc2Vzc2lvbixcbiAgICByZXNwb25zZTogc1Jlc3BvbnNlLFxuICAgIGFjdGlvbjogc0FjdGlvblxuICB9KTtcbiAgc2Vzc2lvbi5zZW5kKHJlc3BvbnNlKTtcbn1cblxuLy9jb25zdCBwZ0xvZ2dlciA9IG5ldyBQZ0xvZ2dlcih7XG4vLyAgbmFtZTogJ3Rlc3QtbG9nZ2VyJyxcbi8vICBsZXZlbDogJ2RlYnVnJyxcbi8vICBjb25uU3RyaW5nOiAncG9zdGdyZXM6Ly91YnVudHVAbG9jYWxob3N0OjU0MzIvY2lyY2xlX3Rlc3QnLFxuLy8gIHRhYmxlTmFtZTogJ3dpbnN0b25fbG9ncycsXG4vL30pO1xuXG5cblxuLy93aW5zdG9uLmFkZCh3aW5zdG9uLnRyYW5zcG9ydHMuRmlsZSwgeyBmaWxlbmFtZTogJ3dpbnN0b25fb3V0LmxvZycsIHRpbWVzdGFtcCA6IHRydWUgfSk7XG4vLyAgd2luc3Rvbi5yZW1vdmUod2luc3Rvbi50cmFuc3BvcnRzLkNvbnNvbGUpO1xuLy93aW5zdG9uLmFkZChwZ0xvZ2dlcik7XG5cbi8qXG5jb25zdCBsb2dnZXIgPSBuZXcgd2luc3Rvbi5Mb2dnZXIoe1xuICB0cmFuc3BvcnRzOiBbXG4gICAgbmV3IHdpbnN0b24udHJhbnNwb3J0cy5Db25zb2xlKHtcbiAgICAgIGNvbG9yOiB0cnVlLFxuICAgICAgdGltZXN0YW1wOiB0cnVlLFxuICAgIH0pLFxuICAgIHBnTG9nZ2VyLFxuICBdXG59KTtcbiovXG4vL3BnTG9nZ2VyLmluaXRUYWJsZShkb25lKTtcblxuXG52YXIgZWxpemFib3QgPSByZXF1aXJlKCcuLi9leHRlcm4vZWxpemFib3QvZWxpemFib3QuanMnKTtcbi8vaW1wb3J0ICogYXMgZWxpemFib3QgZnJvbSAnZWxpemFib3QnO1xuXG5sZXQgZGVidWdsb2cgPSBkZWJ1Zygnc21hcnRkaWFsb2cnKTtcbmltcG9ydCAqIGFzIFBsYWluUmVjb2duaXplciBmcm9tICcuL3BsYWlucmVjb2duaXplcic7XG4vL3ZhciBidWlsZGVyID0gcmVxdWlyZSgnYm90YnVpbGRlcicpO1xuXG52YXIgZGlzcGF0Y2hlciA9IHJlcXVpcmUoJy4uL21hdGNoL2Rpc3BhdGNoZXIuanMnKS5kaXNwYXRjaGVyO1xuXG5cbmZ1bmN0aW9uIGdldENvbnZlcnNhdGlvbklkKHNlc3Npb246IGJ1aWxkZXIuU2Vzc2lvbik6IHN0cmluZyB7XG4gIHJldHVybiBzZXNzaW9uLm1lc3NhZ2UgJiZcbiAgICBzZXNzaW9uLm1lc3NhZ2UuYWRkcmVzcyAmJlxuICAgIHNlc3Npb24ubWVzc2FnZS5hZGRyZXNzLmNvbnZlcnNhdGlvbi5pZDtcbn1cblxudmFyIGVsaXphYm90cyA9IHt9O1xuXG5mdW5jdGlvbiBnZXRFbGl6YUJvdChpZDogc3RyaW5nKSB7XG4gIGlmICghZWxpemFib3RzW2lkXSkge1xuICAgIGVsaXphYm90c1tpZF0gPSB7XG4gICAgICBhY2Nlc3M6IG5ldyBEYXRlKCksXG4gICAgICBlbGl6YWJvdDogbmV3IGVsaXphYm90KClcbiAgICB9O1xuICB9XG4gIGVsaXphYm90c1tpZF0uYWNjZXNzID0gbmV3IERhdGUoKTtcbiAgcmV0dXJuIGVsaXphYm90c1tpZF0uZWxpemFib3Q7XG59XG5cbmltcG9ydCAqIGFzIElNYXRjaCBmcm9tICcuLi9tYXRjaC9pZm1hdGNoJztcbmltcG9ydCAqIGFzIFRvb2xzIGZyb20gJy4uL21hdGNoL3Rvb2xzJztcblxudmFyIG5ld0Zsb3cgPSB0cnVlO1xuXG5pbXBvcnQgKiBhcyBNb2RlbCBmcm9tICcuLi9tb2RlbC9tb2RlbCc7XG5pbXBvcnQgKiBhcyBFeGVjU2VydmVyIGZyb20gJy4uL2V4ZWMvZXhlY3NlcnZlcic7XG5cbmNvbnN0IHRoZURlZmF1bHRNb2RlbCA9IE1vZGVsLmxvYWRNb2RlbHMoKTtcblxudmFyIG1vZGVscyA9IHt9O1xuXG5mdW5jdGlvbiBsb2FkTW9kZWwobW9kZWxQYXRoPzogc3RyaW5nKTogSU1hdGNoLklNb2RlbHMge1xuICBtb2RlbFBhdGggPSBtb2RlbFBhdGggfHwgXCJcIjtcbiAgaWYgKCFtb2RlbHNbbW9kZWxQYXRoXSkge1xuICAgIG1vZGVsc1ttb2RlbFBhdGhdID0gTW9kZWwubG9hZE1vZGVscyhtb2RlbFBhdGgpO1xuICB9XG4gIHJldHVybiBtb2RlbHNbbW9kZWxQYXRoXTtcbn1cblxuaWYgKG5ld0Zsb3cpIHtcblxufSBlbHNlIHtcblxuICAvL2NvbnN0IHRvb2xzID0gVG9vbHMuZ2V0VG9vbHMoKTtcbiAgLy9jb25zdCBJbnB1dEZpbHRlclJ1bGVzID0gcmVxdWlyZSgnLi4vbWF0Y2gvaW5wdXRGaWx0ZXJSdWxlcy5qcycpO1xuICAvL2NvbnN0IG1SdWxlcyA9IElucHV0RmlsdGVyUnVsZXMuZ2V0TVJ1bGVzU2FtcGxlKCk7XG59XG5cbmZ1bmN0aW9uIGlzQW5vbnltb3VzKHVzZXJpZDogc3RyaW5nKTogYm9vbGVhbiB7XG4gIHJldHVybiB1c2VyaWQuaW5kZXhPZihcImFubzpcIikgPT09IDA7XG59XG5cbmZ1bmN0aW9uIHJlc3RyaWN0TG9nZ2VkT24oc2Vzc2lvbjogYnVpbGRlci5TZXNzaW9uLCBhcnI6IGFueVtdKTogYW55W10ge1xuICB2YXIgdXNlcmlkID0gc2Vzc2lvbi5tZXNzYWdlLmFkZHJlc3NcbiAgICAmJiBzZXNzaW9uLm1lc3NhZ2UuYWRkcmVzcy51c2VyXG4gICAgJiYgc2Vzc2lvbi5tZXNzYWdlLmFkZHJlc3MudXNlci5pZCB8fCBcIlwiO1xuICBpZiAocHJvY2Vzcy5lbnYuQUJPVF9FTUFJTF9VU0VSICYmIGlzQW5vbnltb3VzKHVzZXJpZCkpIHtcbiAgICBpZiAoYXJyLmxlbmd0aCA8IDYpIHtcbiAgICAgIHJldHVybiBhcnI7XG4gICAgfVxuICAgIHZhciBsZW4gPSBhcnIubGVuZ3RoO1xuICAgIHZhciByZXMgPSBhcnIuc2xpY2UoMCwgTWF0aC5taW4oTWF0aC5tYXgoTWF0aC5mbG9vcihhcnIubGVuZ3RoIC8gMyksIDcpLCBhcnIubGVuZ3RoKSk7XG4gICAgaWYgKHR5cGVvZiBhcnJbMF0gPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHZhciBkZWx0YSA9IGxlbiAtIHJlcy5sZW5ndGg7XG4gICAgICByZXMucHVzaChcIi4uLiBhbmQgXCIgKyBkZWx0YSArIFwiIG1vcmUgZW50cmllcyBmb3IgcmVnaXN0ZXJlZCB1c2Vyc1wiKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbiAgfVxuICByZXR1cm4gYXJyO1xufVxuXG4vKlxuZXhwb3J0IGNsYXNzIFNpbXBsZVJlY29nbml6ZXIgaW1wbGVtZW50cyBidWlsZGVyLklJbnRlbnRSZWNvZ25pemVyIHtcbiAgY29uc3RydWN0b3IoKSB7XG5cbiAgfVxuXG4gIHJlY29nbml6ZShjb250ZXh0OiBidWlsZGVyLklSZWNvZ25pemVDb250ZXh0LCBjYWxsYmFjazogKGVycjogRXJyb3IsIHJlc3VsdDogYnVpbGRlci5JSW50ZW50UmVjb2duaXplclJlc3VsdCkgPT4gdm9pZCk6IHZvaWQge1xuICAgIHZhciB1ID0ge30gYXMgYnVpbGRlci5JSW50ZW50UmVjb2duaXplclJlc3VsdDtcblxuICAgIGRlYnVnbG9nKFwicmVjb2duaXppbmcgXCIgKyBjb250ZXh0Lm1lc3NhZ2UudGV4dCk7XG4gICAgaWYgKGNvbnRleHQubWVzc2FnZS50ZXh0LmluZGV4T2YoXCJzdGFydFwiKSA+PSAwKSB7XG4gICAgICB1LmludGVudCA9IFwiU2hvd0VudGl0eVwiO1xuICAgICAgdS5zY29yZSA9IDAuOTtcbiAgICAgIHZhciBlMSA9IHt9IGFzIGJ1aWxkZXIuSUVudGl0eTtcbiAgICAgIGUxLnN0YXJ0SW5kZXggPSBcInN0YXJ0IFwiLmxlbmd0aDtcbiAgICAgIGUxLmVuZEluZGV4ID0gY29udGV4dC5tZXNzYWdlLnRleHQubGVuZ3RoO1xuICAgICAgZTEuc2NvcmUgPSAwLjM7XG4gICAgICB1LmVudGl0aWVzID0gW2UxXTtcbiAgICAgIGNhbGxiYWNrKHVuZGVmaW5lZCwgdSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGNvbnRleHQubWVzc2FnZS50ZXh0LmluZGV4T2YoXCJ0cmFpblwiKSA+PSAwKSB7XG4gICAgICB1LmludGVudCA9IFwidHJhaW5cIjtcbiAgICAgIHUuc2NvcmUgPSAwLjk7XG4gICAgICB2YXIgZTEgPSB7fSBhcyBidWlsZGVyLklFbnRpdHk7XG4gICAgICBlMS5zdGFydEluZGV4ID0gXCJ0cmFpbiBcIi5sZW5ndGg7XG4gICAgICBlMS5lbmRJbmRleCA9IGNvbnRleHQubWVzc2FnZS50ZXh0Lmxlbmd0aDtcbiAgICAgIGUxLnNjb3JlID0gMC4zO1xuICAgICAgdS5lbnRpdGllcyA9IFtlMV07XG4gICAgICBjYWxsYmFjayh1bmRlZmluZWQsIHUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoY29udGV4dC5tZXNzYWdlLnRleHQuaW5kZXhPZihcImxlYXJuXCIpID49IDApIHtcbiAgICAgIHUuaW50ZW50ID0gXCJsZWFyblwiO1xuICAgICAgdS5zY29yZSA9IDAuOTtcbiAgICAgIHZhciBlMSA9IHt9IGFzIGJ1aWxkZXIuSUVudGl0eTtcbiAgICAgIGUxLnR5cGUgPSBcInRyYWluRmFjdFwiO1xuICAgICAgZTEuc3RhcnRJbmRleCA9IFwidHJhaW4gXCIubGVuZ3RoO1xuICAgICAgZTEuZW5kSW5kZXggPSBjb250ZXh0Lm1lc3NhZ2UudGV4dC5sZW5ndGg7XG4gICAgICBlMS5zY29yZSA9IDAuMztcbiAgICAgIHUuZW50aXRpZXMgPSBbZTFdO1xuICAgICAgY2FsbGJhY2sodW5kZWZpbmVkLCB1KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGNvbnRleHQubWVzc2FnZS50ZXh0LmluZGV4T2YoXCJoZWxwXCIpID49IDApIHtcbiAgICAgIHUuaW50ZW50ID0gXCJoZWxwXCI7XG4gICAgICB1LnNjb3JlID0gMC45O1xuICAgICAgdmFyIGUxID0ge30gYXMgYnVpbGRlci5JRW50aXR5O1xuICAgICAgZTEuc3RhcnRJbmRleCA9IFwidHJhaW4gXCIubGVuZ3RoO1xuICAgICAgZTEuZW5kSW5kZXggPSBjb250ZXh0Lm1lc3NhZ2UudGV4dC5sZW5ndGg7XG4gICAgICBlMS5zY29yZSA9IDAuMztcbiAgICAgIHUuZW50aXRpZXMgPSBbZTFdO1xuICAgICAgY2FsbGJhY2sodW5kZWZpbmVkLCB1KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGNvbnRleHQubWVzc2FnZS50ZXh0LmluZGV4T2YoXCJleGl0XCIpID49IDApIHtcbiAgICAgIHUuaW50ZW50ID0gXCJleGl0XCI7XG4gICAgICB1LnNjb3JlID0gMC45O1xuICAgICAgdmFyIGUxID0ge30gYXMgYnVpbGRlci5JRW50aXR5O1xuICAgICAgZTEuc3RhcnRJbmRleCA9IFwiZXhpdCBcIi5sZW5ndGg7XG4gICAgICBlMS5lbmRJbmRleCA9IGNvbnRleHQubWVzc2FnZS50ZXh0Lmxlbmd0aDtcbiAgICAgIGUxLnNjb3JlID0gMC4zO1xuICAgICAgdS5lbnRpdGllcyA9IFtlMV07XG4gICAgICBjYWxsYmFjayh1bmRlZmluZWQsIHUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoY29udGV4dC5tZXNzYWdlLnRleHQuaW5kZXhPZihcIndyb25nXCIpID49IDApIHtcbiAgICAgIHUuaW50ZW50ID0gXCJ3cm9uZ1wiO1xuICAgICAgdS5zY29yZSA9IDAuOTtcbiAgICAgIHZhciBlMSA9IHt9IGFzIGJ1aWxkZXIuSUVudGl0eTtcbiAgICAgIGUxLnN0YXJ0SW5kZXggPSBcImV4aXQgXCIubGVuZ3RoO1xuICAgICAgZTEuZW5kSW5kZXggPSBjb250ZXh0Lm1lc3NhZ2UudGV4dC5sZW5ndGg7XG4gICAgICBlMS5zY29yZSA9IDAuMztcbiAgICAgIHUuZW50aXRpZXMgPSBbZTFdO1xuICAgICAgY2FsbGJhY2sodW5kZWZpbmVkLCB1KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZGVidWdsb2coJ3JlY29nbml6aW5nIG5vdGhpbmcnKTtcbiAgICB1LmludGVudCA9IFwiTm9uZVwiO1xuICAgIHUuc2NvcmUgPSAwLjE7XG4gICAgdmFyIGUxID0ge30gYXMgYnVpbGRlci5JRW50aXR5O1xuICAgIGUxLnN0YXJ0SW5kZXggPSBcImV4aXQgXCIubGVuZ3RoO1xuICAgIGUxLmVuZEluZGV4ID0gY29udGV4dC5tZXNzYWdlLnRleHQubGVuZ3RoO1xuICAgIGUxLnNjb3JlID0gMC4xO1xuICAgIHUuZW50aXRpZXMgPSBbXTtcbiAgICBjYWxsYmFjayh1bmRlZmluZWQsIHUpO1xuICB9XG59XG4qL1xuXG5jb25zdCBhVHJhaW5SZXBsaWVzID0gW1wiVGhhbmsgeW91IGZvciBzaGFyaW5nIHRoaXMgc3VnZ2VzdGlvbiB3aXRoIHVzXCIsXG4gIFwiVGhhbmsgZm9yIGZvciB0aGlzIHZhbHVhYmxlIGluZm9ybWF0aW9uLlwiLFxuICBcIlRoYW5rIGZvciBmb3IgdGhpcyBpbnRlcmVzdGluZyBmYWN0IVwiLFxuICBcIlRoYXRzIGEgcGxldGhvcmlhIG9mIGluZm9ybWF0aW9uLlwiLFxuICBcIlRoYXQncyBhIG51Z2dldCBvZiBpbmZvcm1hdGlvbi5cIixcbiAgXCJMb3ZlbHksIEkgbWF5IGNvbnNpZGVyIHlvdSBpbnB1dC5cIixcbiAgXCJXZWxsIGRvbmUsIGFueXRoaW5nIG1vcmUgdG8gbGV0IG1lIGtub3c/XCIsXG4gIFwiSSBkbyBhcHByZWNpYXRlIHlvdXIgdGVhY2hpbmcgYW5kIG15IGxlYXJuaW5nIGV4cGVyaWVuY2UsIG9yIHdhcyBpdCB0aGUgb3RoZXIgd2F5IHJvdW5kP1wiLFxuICBcIllvdXIgaGVscGZ1bCBpbnB1dCBoYXMgYmVlbiBzdG9yZWQgaW4gc29tZSBkdXN0eSBjb3JuZXIgb2YgdGhlIFdvcmxkIHdpZGUgd2ViIVwiLFxuICBcIlRoYW5rIHlvdSBmb3IgbXkgbGVhcm5pbmcgZXhwZXJpZW5jZSFcIixcbiAgXCJJIGhhdmUgaW5jb3Jwb3JhdGVkIHlvdXIgdmFsdWFibGUgc3VnZ2VzdGlvbiBpbiB0aGUgd2lzZG9tIG9mIHRoZSBpbnRlcm5ldFwiXG5dO1xuXG52YXIgYVRyYWluRGlhbG9nID0gYVRyYWluUmVwbGllcztcblxudmFyIGFUcmFpbkV4aXRIaW50ID0gW1xuICBcIlxcbnR5cGUgXFxcImRvbmVcXFwiIHdoZW4geW91IGFyZSBkb25lIHRyYWluaW5nIG1lLlwiLFxuICBcIlwiLFxuICBcIlwiLFxuICBcIlwiLFxuICBcIlxcbnJlbWVtYmVyLCB5b3UgYXJlIHN0dWNrIGhlcmUgaW5zdHJ1Y3RpbmcgbWUsIHR5cGUgXFxcImRvbmVcXFwiIHRvIHJldHVybi5cIixcbiAgXCJcIl07XG5cbmNvbnN0IGFFbnRlclRyYWluID0gW1wiU28geW91IHRoaW5rIHRoaXMgaXMgd3Jvbmc/IFlvdSBjYW4gb2ZmZXIgeW91ciBhZHZpc2UgaGVyZS5cXG4gVHlwZSBcXFwiZG9uZVxcXCIgaWYgeW91IGFyZSBkb25lIHdpdGggaW5zdHJ1Y3RpbmcgbWVcIixcbiAgXCJGZWVsIGZyZWUgdG8gb2ZmZXIgbWUgeW91ciBiZXR0ZXIgc29sdXRpb24gaGVyZS5cXG5cIixcbiAgXCJTb21lIHNheSBcXFwiVGhlIHNlY3JldCB0byBoYXBwaW5lc3MgaXMgdG8gbG93ZXIgeW91ciBleHBlY3RhdGlvbnMgdG8gdGhlIHBvaW50IHRoZXkgYXJlIGFscmVhZHkgbWV0LlxcXCIsIFxcbnQgaWYgeW91IGNvdWxkIGhlbHAgbWUgdG8gYmVjb21kZSBiZXR0ZXIsIGluc3RydWN0IG1lLlwiLFxuICBcIkZlZWwgZnJlZSB0byBvZmZlciBtZSB5b3VyIGJldHRlciBzb2x1dGlvbiBoZXJlLlxcbiBUeXBlIFxcXCJkb25lXFxcIiBpZiB5b3UgYXJlIGRvbmUgd2l0aCBpbnN0cnVjdGluZyBtZVwiLFxuICBcIkZlZWwgZnJlZSB0byBvZmZlciBtZSB5b3VyIGJldHRlciBzb2x1dGlvbiBoZXJlLlxcbiBUeXBlIFxcXCJkb25lXFxcIiBpZiB5b3UgYXJlIGRvbmUgd2l0aCBpbnN0cnVjdGluZyBtZVwiLFxuXTtcblxuXG5jb25zdCBhQmFja0Zyb21UcmFpbmluZyA9IFtcbiAgXCJQdXVoLCBiYWNrIGZyb20gdHJhaW5pbmchIE5vdyBmb3IgdGhlIGVhc3kgcGFydCAuLi5cIixcbiAgXCJMaXZlIGFuZCBkb24ndCBsZWFybiwgdGhhdCdzIHVzLiBOYWFoLCB3ZSdsbCBzZWUuXCIsXG4gIFwiVGhlIHNlY3JldCB0byBoYXBwaW5lc3MgaXMgdG8gbG93ZXIgeW91ciBleHBlY3RhdGlvbnMgdG8gdGhlIHBvaW50IHRoZXkgYXJlIGFscmVhZHkgbWV0LlwiLFxuICBcIlRoYW5rcyBmb3IgaGF2aW5nIHRoaXMgbGVjdHVyZSBzZXNzaW9uLCBub3cgYmFjayB0byBvdXIgdXN1YWwgc2VsZi5cIlxuXTtcblxuXG5jb25zdCBhVHJhaW5Ob0tsaW5nb24gPSBbXG4gIFwiSGUgd2hvIG1hc3RlciB0aGUgZGFyayBhcnRzIG9mIFNBUCBtdXN0IG5vdCBkd2VsbCBpbiB0aGUgZWFydGhseSByZWFsbXMgb2YgU3RhcnQgVHJlay5cIixcbiAgXCJTQVAgaXMgYSBjbG91ZCBjb21wYW55LCBub3QgYSBzcGFjZSBjb21wYW55LlwiLFxuICBcIlRoZSBkZXB0aCBvZiBSLzMgYXJlIGRlZXBlciB0aGFuIERlZXAgU3BhY2UgNDIuXCIsXG4gIFwiTXkgYnJhaW5wb3dlciBpcyBmdWxseSBhYnNvcmJlZCB3aXRoIG1hc3RlcmluZyBvdGhlciByZWFsbXMuXCIsXG4gIFwiRm9yIHRoZSB3b3NhcCwgdGhlIHNreSBpcyB0aGUgbGltaXQuIEZlZWwgZnJlZSB0byBjaGVjayBvdXQgbmFzYS5nb3YgLlwiLFxuICBcIlRoZSBmdXR1cmUgaXMgU0FQIG9yIElCTSBibHVlLCBub3Qgc3BhY2UgYmxhY2suXCIsXG4gIFwiVGhhdCdzIGxlZnQgdG8gc29tZSBtdXNreSBmdXR1cmUuXCJcbl1cblxuZXhwb3J0IGNvbnN0IGFSZXNwb25zZXNPblRvb0xvbmcgPSBbXG4gIFwiWW91ciBpbnB1dCBzaG91bGQgYmUgZWxvcXVlbnQgaW4gaXQncyBicmV2aXR5LiBUaGlzIG9uZSB3YXMgdG9vIGxvbmcuXCIsXG4gIFwibXkgd2lzZG9tIGlzIHNldmVybHkgYm91bmQgYnkgbXkgbGltaXRlZCBpbnB1dCBwcm9jZXNzaW5nIGNhcGFiaWxpdGllcy4gQ291bGQgeW91IGZvcm11bGF0ZSBhIHNob3J0ZXIgaW5wdXQ/IFRoYW5rIHlvdS5cIixcbiAgXCJUaGUgbGVuZ3RoIG9mIHlvdSBpbnB1dCBpbmRpY2F0ZXMgeW91IHByb2JhYmx5IGtub3cgbW9yZSBhYm91dCB0aGUgdG9waWMgdGhhbiBtZT8gQ2FuIGkgaHVtYmx5IGFzayB5b3UgdG8gZm9ybXVsYXRlIGEgc2hvcnRlciBxdWVzdGlvbj9cIixcbiAgJ1xcXCJXaGF0IGV2ZXIgeW91IHdhbnQgdG8gdGVhY2gsIGJlIGJyaWVmXFxcIiAoSG9yYWNlKS4gV2hpbGUgdGhpcyBkb2VzIG5vdCBhbHdheXMgYXBwbGllcyB0byBteSBhbnN3ZXJzLCBpdCBpcyByZXF1aXJlIGZvciB5b3VyIHF1ZXN0aW9ucy4gUGxlYXNlIHRyeSBhZ2FpbiB3aXRoIGEgcmVmaW5lZCBxdWVzdGlvbnMuJyxcbiAgJ0kgdW5kZXJzdGFuZCBtb3JlIHRoYW4gNC1sZXR0ZXIgd29yZHMsIGJ1dCBub3QgbW9yZSB0aGFuIDIwIHdvcmQgc2VudGVuY2VzLiBQbGVhc2UgdHJ5IHRvIHNob3J0ZW4geW91ciBpbnB1dC4nLFxuICAndGhlIHNreSBpcyB0aGUgbGltaXQ/IEFpciBmb3JjZSBtZW1iZXIgb3Igbm90LCB5b3UgY2FuIGFzayBsb25nZXIgcXVlc3Rpb25zIHRoYW4gXFxcInRoZSBza3lcXFwiLCBidXQgbm90IHRoaXMgbG9uZycsXG4gICdNeSBhbnN3ZXJzIG1heSBiZSBleGhhdXN0aXZlLCBidXQgSSB1bmRlcnN0YW5kIG1vcmUgdGhhbiA0LWxldHRlciB3b3JkcywgYnV0IG5vdCBtb3JlIHRoYW4gMjAgd29yZCBzZW50ZW5jZXMuIFNvcnJ5LicsXG4gICdPdXIgY29udmVyc2F0aW9uIG11c3QgYmUgaGlnaGx5IGFzc3ltbWV0cmljOiBteSBhbnN3ZXJzIG1heSBiZSB2ZXJib3NlIGFuZCBleGhhdXN0aXZlIGFuZCBmdXp6eSwgcXVlc3Rpb25zIGFuZCBpbnB1dCBtdXN0IGJlIGJyaWVmLiBUcnkgdG8gcmVmb3JtdWxhdGUgaXQnLFxuXTtcblxuXG5leHBvcnQgY29uc3QgbWV0YXdvcmRzRGVzY3JpcHRpb25zID0ge1xuICAgICAgICBcImNhdGVnb3J5XCI6IFwiYW4gYXR0cmlidXRlIG9mIGEgcmVjb3JkIGluIGEgbW9kZWwsIGV4YW1wbGU6IGEgUGxhbmV0IGhhcyBhIFxcXCJuYW1lXFxcIiBhdHRyaWJ1dGVcIixcbiAgICAgICAgXCJkb21haW5cIjogXCJhIGdyb3VwIG9mIGZhY3RzIHdoaWNoIGFyZSB0eXBpY2FsbHkgdW5yZWxhdGVkXCIsXG4gICAgICAgIFwia2V5XCI6IFwiYW4gYXR0cmlidXRlIHZhbHVlIChvZiBhIGNhdGVnb3J5KSB3aGljaCAgaXMgdW5pcXVlIGZvciB0aGUgcmVjb3JkXCIsXG4gICAgICAgIFwidG9vbFwiOiBcImlzIHBvdGVudGlhbHkgY29tbWFuZCB0byBleGVjdXRlXCIsXG4gICAgICAgIFwicmVjb3JkXCI6IFwiYSBzcGVjaWZpYyBzZXQgb2YgXFxcImZhY3RcXFwicyBvZiBhIGRvbWFpbiwgYSBcXFwicmVjb3JkXFxcIiBoYXMgYSBzZXQgb2YgYXR0cmlidXRlcyB2YWx1ZXMgKFxcXCJmYWN0XFxcInMpIG9mIHRoZSBjYXRlZ29yaWVzLCBvZnRlbiBhIHJlY29yZCBoYXMgYSBcXFwia2V5XFxcIlwiLFxuICAgICAgICBcImZhY3RcIjogXCJhIHNwZWNpZmljIGNhdGVnb3J5IHZhbHVlIG9mIGEgcmVjb3JkIGluIGEgZG9tYWluLCBtYXkgYmUgYSBcXFwia2V5XFxcIiB2YWx1ZVwiLFxuICAgICAgfTtcblxuZnVuY3Rpb24gZ2V0UmFuZG9tUmVzdWx0KGFycjogc3RyaW5nW10pOiBzdHJpbmcge1xuICByZXR1cm4gYXJyW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGFyci5sZW5ndGgpICUgYXJyLmxlbmd0aF07XG59XG5cbmV4cG9ydCBjbGFzcyBTaW1wbGVVcERvd25SZWNvZ25pemVyIGltcGxlbWVudHMgYnVpbGRlci5JSW50ZW50UmVjb2duaXplciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuXG4gIH1cblxuICByZWNvZ25pemUoY29udGV4dDogYnVpbGRlci5JUmVjb2duaXplQ29udGV4dCwgY2FsbGJhY2s6IChlcnI6IEVycm9yLCByZXN1bHQ6IGJ1aWxkZXIuSUludGVudFJlY29nbml6ZXJSZXN1bHQpID0+IHZvaWQpOiB2b2lkIHtcbiAgICB2YXIgdSA9IHt9IGFzIGJ1aWxkZXIuSUludGVudFJlY29nbml6ZXJSZXN1bHQ7XG5cbiAgICBkZWJ1Z2xvZyhcInJlY29nbml6aW5nIFwiICsgY29udGV4dC5tZXNzYWdlLnRleHQpO1xuICAgIGlmIChjb250ZXh0Lm1lc3NhZ2UudGV4dC5pbmRleE9mKFwiZG93blwiKSA+PSAwKSB7XG4gICAgICB1LmludGVudCA9IFwiaW50ZW50LmRvd25cIjtcbiAgICAgIHUuc2NvcmUgPSAwLjk7XG4gICAgICB2YXIgZTEgPSB7fSBhcyBidWlsZGVyLklFbnRpdHk7XG4gICAgICBlMS5zdGFydEluZGV4ID0gXCJzdGFydCBcIi5sZW5ndGg7XG4gICAgICBlMS5lbmRJbmRleCA9IGNvbnRleHQubWVzc2FnZS50ZXh0Lmxlbmd0aDtcbiAgICAgIGUxLnNjb3JlID0gMC4zO1xuICAgICAgdS5lbnRpdGllcyA9IFtlMV07XG4gICAgICBjYWxsYmFjayh1bmRlZmluZWQsIHUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoY29udGV4dC5tZXNzYWdlLnRleHQuaW5kZXhPZihcInVwXCIpID49IDApIHtcbiAgICAgIHUuaW50ZW50ID0gXCJpbnRlbnQudXBcIjtcbiAgICAgIHUuc2NvcmUgPSAwLjk7XG4gICAgICB2YXIgZTEgPSB7fSBhcyBidWlsZGVyLklFbnRpdHk7XG4gICAgICBlMS5zdGFydEluZGV4ID0gXCJ1cFwiLmxlbmd0aDtcbiAgICAgIGUxLmVuZEluZGV4ID0gY29udGV4dC5tZXNzYWdlLnRleHQubGVuZ3RoO1xuICAgICAgZTEuc2NvcmUgPSAwLjM7XG4gICAgICB1LmVudGl0aWVzID0gW2UxXTtcbiAgICAgIGNhbGxiYWNrKHVuZGVmaW5lZCwgdSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChjb250ZXh0Lm1lc3NhZ2UudGV4dC5pbmRleE9mKFwiZG9uZVwiKSA+PSAwKSB7XG4gICAgICB1LmludGVudCA9IFwiaW50ZW50LnVwXCI7XG4gICAgICB1LnNjb3JlID0gMC45O1xuICAgICAgdmFyIGUxID0ge30gYXMgYnVpbGRlci5JRW50aXR5O1xuICAgICAgZTEuc3RhcnRJbmRleCA9IFwidXBcIi5sZW5ndGg7XG4gICAgICBlMS5lbmRJbmRleCA9IGNvbnRleHQubWVzc2FnZS50ZXh0Lmxlbmd0aDtcbiAgICAgIGUxLnNjb3JlID0gMC4zO1xuICAgICAgdS5lbnRpdGllcyA9IFtlMV07XG4gICAgICBjYWxsYmFjayh1bmRlZmluZWQsIHUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoY29udGV4dC5tZXNzYWdlLnRleHQuaW5kZXhPZihcImV4aXRcIikgPj0gMCkge1xuICAgICAgdS5pbnRlbnQgPSBcImludGVudC51cFwiO1xuICAgICAgdS5zY29yZSA9IDAuOTtcbiAgICAgIHZhciBlMSA9IHt9IGFzIGJ1aWxkZXIuSUVudGl0eTtcbiAgICAgIGUxLnN0YXJ0SW5kZXggPSBcInVwXCIubGVuZ3RoO1xuICAgICAgZTEuZW5kSW5kZXggPSBjb250ZXh0Lm1lc3NhZ2UudGV4dC5sZW5ndGg7XG4gICAgICBlMS5zY29yZSA9IDAuMztcbiAgICAgIHUuZW50aXRpZXMgPSBbZTFdO1xuICAgICAgY2FsbGJhY2sodW5kZWZpbmVkLCB1KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGNvbnRleHQubWVzc2FnZS50ZXh0LmluZGV4T2YoXCJxdWl0XCIpID49IDApIHtcbiAgICAgIHUuaW50ZW50ID0gXCJpbnRlbnQudXBcIjtcbiAgICAgIHUuc2NvcmUgPSAwLjk7XG4gICAgICB2YXIgZTEgPSB7fSBhcyBidWlsZGVyLklFbnRpdHk7XG4gICAgICBlMS5zdGFydEluZGV4ID0gXCJ1cFwiLmxlbmd0aDtcbiAgICAgIGUxLmVuZEluZGV4ID0gY29udGV4dC5tZXNzYWdlLnRleHQubGVuZ3RoO1xuICAgICAgZTEuc2NvcmUgPSAwLjM7XG4gICAgICB1LmVudGl0aWVzID0gW2UxXTtcbiAgICAgIGNhbGxiYWNrKHVuZGVmaW5lZCwgdSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGRlYnVnbG9nKCdyZWNvZ25pemluZyBub3RoaW5nJyk7XG4gICAgdS5pbnRlbnQgPSBcIk5vbmVcIjtcbiAgICB1LnNjb3JlID0gMC4xO1xuICAgIHZhciBlMSA9IHt9IGFzIGJ1aWxkZXIuSUVudGl0eTtcbiAgICBlMS5zdGFydEluZGV4ID0gXCJleGl0IFwiLmxlbmd0aDtcbiAgICBlMS5lbmRJbmRleCA9IGNvbnRleHQubWVzc2FnZS50ZXh0Lmxlbmd0aDtcbiAgICBlMS5zY29yZSA9IDAuMTtcbiAgICB1LmVudGl0aWVzID0gW107XG4gICAgY2FsbGJhY2sodW5kZWZpbmVkLCB1KTtcbiAgfVxufVxuXG5jb25zdCBBbnlPYmplY3QgPSBPYmplY3QgYXMgYW55O1xuLy8gZ2xvYmFsVHVubmVsLmluaXRpYWxpemUoe1xuLy8gIGhvc3Q6ICdwcm94eS5leHh4YW1wbGUuY29tJyxcbi8vICBwb3J0OiA4MDgwXG4vLyB9KVxuXG4vLyBDcmVhdGUgYm90IGFuZCBiaW5kIHRvIGNvbnNvbGVcbi8vIHZhciBjb25uZWN0b3IgPSBuZXcgaHRtbGNvbm5lY3Rvci5IVE1MQ29ubmVjdG9yKClcblxuLy8gY29ubmVjdG9yLnNldEFuc3dlckhvb2soZnVuY3Rpb24gKHNBbnN3ZXIpIHtcbi8vICBjb25zb2xlLmxvZygnR290IGFuc3dlciA6ICcgKyBzQW5zd2VyICsgJ1xcbicpXG4vLyB9KVxuXG52YXIgYm90O1xuLy8gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4vLyAgIGNvbm5lY3Rvci5wcm9jZXNzTWVzc2FnZSgnc3RhcnQgdW5pdCB0ZXN0IEFCQyAnKVxuLy8gfSwgNTAwMClcblxuaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnO1xuXG52YXIgb0pTT04gPSBKU09OLnBhcnNlKCcnICsgZnMucmVhZEZpbGVTeW5jKCcuL3Jlc291cmNlcy9tb2RlbC9pbnRlbnRzLmpzb24nKSk7XG52YXIgb1J1bGVzID0gUGxhaW5SZWNvZ25pemVyLnBhcnNlUnVsZXMob0pTT04pO1xuLy8gdmFyIFJlY29nbml6ZXIgPSBuZXcgKHJlY29nbml6ZXIuUmVnRXhwUmVjb2duaXplcikob1J1bGVzKTtcblxuXG5mdW5jdGlvbiBsb2dRdWVyeShzZXNzaW9uOiBidWlsZGVyLlNlc3Npb24sIGludGVudDogc3RyaW5nLCByZXN1bHQ/OiBBcnJheTxJTWF0Y2guSVRvb2xNYXRjaD4pIHtcblxuICBmcy5hcHBlbmRGaWxlKCcuL2xvZ3Mvc2hvd21lcXVlcmllcy50eHQnLCBcIlxcblwiICsgSlNPTi5zdHJpbmdpZnkoe1xuICAgIHRleHQ6IHNlc3Npb24ubWVzc2FnZS50ZXh0LFxuICAgIHRpbWVzdGFtcDogc2Vzc2lvbi5tZXNzYWdlLnRpbWVzdGFtcCxcbiAgICBpbnRlbnQ6IGludGVudCxcbiAgICByZXM6IHJlc3VsdCAmJiByZXN1bHQubGVuZ3RoICYmIE1hdGNoLlRvb2xNYXRjaC5kdW1wTmljZShyZXN1bHRbMF0pIHx8IFwiMFwiLFxuICAgIGNvbnZlcnNhdGlvbklkOiBzZXNzaW9uLm1lc3NhZ2UuYWRkcmVzc1xuICAgICYmIHNlc3Npb24ubWVzc2FnZS5hZGRyZXNzLmNvbnZlcnNhdGlvblxuICAgICYmIHNlc3Npb24ubWVzc2FnZS5hZGRyZXNzLmNvbnZlcnNhdGlvbi5pZCB8fCBcIlwiLFxuICAgIHVzZXJpZDogc2Vzc2lvbi5tZXNzYWdlLmFkZHJlc3NcbiAgICAmJiBzZXNzaW9uLm1lc3NhZ2UuYWRkcmVzcy51c2VyXG4gICAgJiYgc2Vzc2lvbi5tZXNzYWdlLmFkZHJlc3MudXNlci5pZCB8fCBcIlwiXG4gIH0pLCBmdW5jdGlvbiAoZXJyLCByZXMpIHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICBkZWJ1Z2xvZyhcImxvZ2dpbmcgZmFpbGVkIFwiICsgZXJyKTtcbiAgICB9XG4gIH0pO1xufVxuXG5cblxuZnVuY3Rpb24gbG9nUXVlcnlXaGF0SXMoc2Vzc2lvbjogYnVpbGRlci5TZXNzaW9uLCBpbnRlbnQ6IHN0cmluZywgcmVzdWx0PzogQXJyYXk8SU1hdGNoLklXaGF0SXNBbnN3ZXI+KSB7XG5cbiAgZnMuYXBwZW5kRmlsZSgnLi9sb2dzL3Nob3dtZXF1ZXJpZXMudHh0JywgXCJcXG5cIiArIEpTT04uc3RyaW5naWZ5KHtcbiAgICB0ZXh0OiBzZXNzaW9uLm1lc3NhZ2UudGV4dCxcbiAgICB0aW1lc3RhbXA6IHNlc3Npb24ubWVzc2FnZS50aW1lc3RhbXAsXG4gICAgaW50ZW50OiBpbnRlbnQsXG4gICAgcmVzOiByZXN1bHQgJiYgcmVzdWx0Lmxlbmd0aCAmJiBXaGF0SXMuZHVtcE5pY2UocmVzdWx0WzBdKSB8fCBcIjBcIixcbiAgICBjb252ZXJzYXRpb25JZDogc2Vzc2lvbi5tZXNzYWdlLmFkZHJlc3NcbiAgICAmJiBzZXNzaW9uLm1lc3NhZ2UuYWRkcmVzcy5jb252ZXJzYXRpb25cbiAgICAmJiBzZXNzaW9uLm1lc3NhZ2UuYWRkcmVzcy5jb252ZXJzYXRpb24uaWQgfHwgXCJcIixcbiAgICB1c2VyaWQ6IHNlc3Npb24ubWVzc2FnZS5hZGRyZXNzXG4gICAgJiYgc2Vzc2lvbi5tZXNzYWdlLmFkZHJlc3MudXNlclxuICAgICYmIHNlc3Npb24ubWVzc2FnZS5hZGRyZXNzLnVzZXIuaWQgfHwgXCJcIlxuICB9KSwgZnVuY3Rpb24gKGVyciwgcmVzKSB7XG4gICAgaWYgKGVycikge1xuICAgICAgZGVidWdsb2coXCJsb2dnaW5nIGZhaWxlZCBcIiArIGVycik7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gbG9nUXVlcnlXaGF0SXNUdXBlbChzZXNzaW9uOiBidWlsZGVyLlNlc3Npb24sIGludGVudDogc3RyaW5nLCByZXN1bHQ/OiBBcnJheTxJTWF0Y2guSVdoYXRJc1R1cGVsQW5zd2VyPikge1xuXG4gIGZzLmFwcGVuZEZpbGUoJy4vbG9ncy9zaG93bWVxdWVyaWVzLnR4dCcsIFwiXFxuXCIgKyBKU09OLnN0cmluZ2lmeSh7XG4gICAgdGV4dDogc2Vzc2lvbi5tZXNzYWdlLnRleHQsXG4gICAgdGltZXN0YW1wOiBzZXNzaW9uLm1lc3NhZ2UudGltZXN0YW1wLFxuICAgIGludGVudDogaW50ZW50LFxuICAgIHJlczogcmVzdWx0ICYmIHJlc3VsdC5sZW5ndGggJiYgV2hhdElzLmR1bXBOaWNlVHVwZWwocmVzdWx0WzBdKSB8fCBcIjBcIixcbiAgICBjb252ZXJzYXRpb25JZDogc2Vzc2lvbi5tZXNzYWdlLmFkZHJlc3NcbiAgICAmJiBzZXNzaW9uLm1lc3NhZ2UuYWRkcmVzcy5jb252ZXJzYXRpb25cbiAgICAmJiBzZXNzaW9uLm1lc3NhZ2UuYWRkcmVzcy5jb252ZXJzYXRpb24uaWQgfHwgXCJcIixcbiAgICB1c2VyaWQ6IHNlc3Npb24ubWVzc2FnZS5hZGRyZXNzXG4gICAgJiYgc2Vzc2lvbi5tZXNzYWdlLmFkZHJlc3MudXNlclxuICAgICYmIHNlc3Npb24ubWVzc2FnZS5hZGRyZXNzLnVzZXIuaWQgfHwgXCJcIlxuICB9KSwgZnVuY3Rpb24gKGVyciwgcmVzKSB7XG4gICAgaWYgKGVycikge1xuICAgICAgZGVidWdsb2coXCJsb2dnaW5nIGZhaWxlZCBcIiArIGVycik7XG4gICAgfVxuICB9KTtcbn1cblxudmFyIGd3b3JkcyA9IHt9O1xuLyoqXG4gKiBDb25zdHJ1Y3QgYSBib3RcbiAqIEBwYXJhbSBjb25uZWN0b3Ige0Nvbm5lY3Rvcn0gdGhlIGNvbm5lY3RvciB0byB1c2VcbiAqIEhUTUxDb25uZWN0b3JcbiAqIG9yIGNvbm5lY3RvciA9IG5ldyBidWlsZGVyLkNvbnNvbGVDb25uZWN0b3IoKS5saXN0ZW4oKVxuICovXG5mdW5jdGlvbiBtYWtlQm90KGNvbm5lY3RvciwgbW9kZWxQYXRoPzogc3RyaW5nKSB7XG5cbiAgdmFyIHRoZU1vZGVsID0gbG9hZE1vZGVsKG1vZGVsUGF0aCk7XG4gIGJvdCA9IG5ldyBidWlsZGVyLlVuaXZlcnNhbEJvdChjb25uZWN0b3IpO1xuXG5cblxuICAvLyBDcmVhdGUgTFVJUyByZWNvZ25pemVyIHRoYXQgcG9pbnRzIGF0IG91ciBtb2RlbCBhbmQgYWRkIGl0IGFzIHRoZSByb290ICcvJyBkaWFsb2cgZm9yIG91ciBDb3J0YW5hIEJvdC5cbiAgLy8gdmFyIG1vZGVsID0gc2Vuc2l0aXZlLm1vZGVsdXJsO1xuICAvLyB2YXIgbW9kZWwgPSAnaHR0cHM6Ly9hcGkucHJvamVjdG94Zm9yZC5haS9sdWlzL3YyLjAvYXBwcy9jNDEzYjJlZi0zODJjLTQ1YmQtOGZmMC1mNzZkNjBlMmE4MjE/c3Vic2NyaXB0aW9uLWtleT1jMjEzOThiNTk4MGE0Y2UwOWY0NzRiYmZlZTkzYjg5MiZxPSdcbiAgdmFyIHJlY29nbml6ZXIgPSBuZXcgUGxhaW5SZWNvZ25pemVyLlJlZ0V4cFJlY29nbml6ZXIob1J1bGVzKTtcblxuICB2YXIgZGlhbG9nID0gbmV3IGJ1aWxkZXIuSW50ZW50RGlhbG9nKHsgcmVjb2duaXplcnM6IFtyZWNvZ25pemVyXSB9KTtcbiAgLy8gZGlhbG9nLm9uQmVnaW4oZnVuY3Rpb24oc2Vzc2lvbixhcmdzKSB7XG4gIC8vIGNvbnNvbGUubG9nKFwiYmVnaW5uaW5nIC4uLlwiKVxuICAvLyBzZXNzaW9uLmRpYWxvZ0RhdGEucmV0cnlQcm9tcHQgPSBhcmdzICYmIGFyZ3MucmV0cnlQcm9tcHQgfHwgXCJJIGFtIHNvcnJ5XCJcbiAgLy8gc2Vzc2lvbi5zZW5kKFwiV2hhdCBkbyB5b3Ugd2FudD9cIilcbiAgLy9cbiAgLy8gfSlcblxuICB2YXIgZGlhbG9nVXBEb3duID0gbmV3IGJ1aWxkZXIuSW50ZW50RGlhbG9nKHsgcmVjb2duaXplcnM6IFtuZXcgU2ltcGxlVXBEb3duUmVjb2duaXplcigpXSB9KTtcblxuICBib3QuZGlhbG9nKCcvdXBkb3duJywgZGlhbG9nVXBEb3duKTtcbiAgZGlhbG9nVXBEb3duLm9uQmVnaW4oZnVuY3Rpb24gKHNlc3Npb24pIHtcbiAgICBkaWFsb2dsb2coXCJUcmFpbk1lXCIsIHNlc3Npb24sIHNlbmQoZ2V0UmFuZG9tUmVzdWx0KGFFbnRlclRyYWluKSkpO1xuICAgIC8vc2Vzc2lvbi5zZW5kKFwiSGkgdGhlcmUsIHVwZG93biBpcyB3YWl0aW5nIGZvciB5b3VcIik7XG4gIH0pXG5cbiAgZGlhbG9nVXBEb3duLm1hdGNoZXMoJ2ludGVudC51cCcsIFtcbiAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgYXJncywgbmV4dCkge1xuICAgICAgc2Vzc2lvbi5kaWFsb2dEYXRhLmFiYyA9IGFyZ3MgfHwge307XG4gICAgICBidWlsZGVyLlByb21wdHMudGV4dChzZXNzaW9uLCAneW91IHdhbnQgdG8gZXhpdCB0cmFpbmluZz8gdHlwZSBcXFwiZG9uZVxcXCIgYWdhaW4uJyk7XG4gICAgfSxcbiAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgcmVzdWx0cywgbmV4dCkge1xuICAgICAgc2Vzc2lvbi5kaWFsb2dEYXRhLmFiYyA9IHJlc3VsdHMucmVwb25zZTtcbiAgICAgIG5leHQoKTtcbiAgICB9LFxuICAgIGZ1bmN0aW9uIChzZXNzaW9uLCByZXN1bHRzKSB7XG4gICAgICBzZXNzaW9uLmVuZERpYWxvZ1dpdGhSZXN1bHQoeyByZXNwb25zZTogc2Vzc2lvbi5kaWFsb2dEYXRhLmFiYyB9KTtcbiAgICB9XG4gIF1cbiAgKTtcblxuICBkaWFsb2dVcERvd24ubWF0Y2hlcygnaW50ZW50LmRvd24nLCBbXG4gICAgZnVuY3Rpb24gKHNlc3Npb24sIGFyZ3MsIG5leHQpIHtcbiAgICAgIHNlc3Npb24uZGlhbG9nRGF0YS5hYmMgPSBhcmdzIHx8IHt9O1xuICAgICAgYnVpbGRlci5Qcm9tcHRzLnRleHQoc2Vzc2lvbiwgJ3lvdSB3YW50IHRvIGdvIGRvd24hJyk7XG4gICAgfSxcbiAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgcmVzdWx0cywgbmV4dCkge1xuICAgICAgc2Vzc2lvbi5kaWFsb2dEYXRhLmFiYyA9IC0xOyAvLyByZXN1bHRzLnJlcG9uc2U7XG4gICAgICBuZXh0KCk7XG4gICAgfSxcbiAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgcmVzdWx0cykge1xuICAgICAgc2Vzc2lvbi5zZW5kKFwic3RpbGwgZ29pbmcgZG93bj9cIik7XG4gICAgfVxuICBdXG4gICk7XG4gIGRpYWxvZ1VwRG93bi5vbkRlZmF1bHQoZnVuY3Rpb24gKHNlc3Npb24pIHtcbiAgICBsb2dRdWVyeShzZXNzaW9uLCBcIm9uRGVmYXVsdFwiKTtcbiAgICB2YXIgcmVzID0gZ2V0UmFuZG9tUmVzdWx0KGFUcmFpbkRpYWxvZykgKyBnZXRSYW5kb21SZXN1bHQoYVRyYWluRXhpdEhpbnQpO1xuICAgIGRpYWxvZ2xvZyhcIlRyYWluTWVcIiwgc2Vzc2lvbiwgc2VuZChyZXMpKTtcbiAgfSk7XG5cblxuICBib3QuZGlhbG9nKCcvdHJhaW4nLCBbXG4gICAgZnVuY3Rpb24gKHNlc3Npb24sIGFyZ3MsIG5leHQpIHtcbiAgICAgIHNlc3Npb24uZGlhbGdvRGF0YS5hYmMgPSBhcmdzIHx8IHt9O1xuICAgICAgYnVpbGRlci5Qcm9tcHRzLnRleHQoc2Vzc2lvbiwgJ0RvIHlvdSB3YW50IHRvIHRyYWluIG1lJyk7XG4gICAgfSxcbiAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgcmVzdWx0cywgbmV4dCkge1xuICAgICAgc2Vzc2lvbi5kaWFsb2dEYXRhLmFiYyA9IHJlc3VsdHMucmVwb25zZTtcbiAgICB9LFxuICAgIGZ1bmN0aW9uIChzZXNzaW9uLCByZXN1bHRzKSB7XG4gICAgICBzZXNzaW9uLmVuZERpYWxvZ1dpdGhSZXN1bHQoeyByZXNwb25zZTogc2Vzc2lvbi5EaWFsb2dEYXRhLmFiYyB9KTtcbiAgICB9XG4gIF0pO1xuXG5cbiAgYm90LmRpYWxvZygnLycsIGRpYWxvZyk7XG5cbiAgZGlhbG9nLm1hdGNoZXMoJ1Nob3dNZScsIFtcbiAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgYXJncywgbmV4dCkge1xuICAgICAgdmFyIGlzQ29tYmluZWRJbmRleCA9IHt9O1xuICAgICAgdmFyIG9OZXdFbnRpdHk7XG4gICAgICAvLyBleHBlY3RpbmcgZW50aXR5IEExXG4gICAgICBkZWJ1Z2xvZyhcIlNob3cgRW50aXR5XCIpO1xuICAgICAgZGVidWdsb2coJ3JhdzogJyArIEpTT04uc3RyaW5naWZ5KGFyZ3MuZW50aXRpZXMpLCB1bmRlZmluZWQsIDIpO1xuICAgICAgdmFyIGExID0gYnVpbGRlci5FbnRpdHlSZWNvZ25pemVyLmZpbmRFbnRpdHkoYXJncy5lbnRpdGllcywgJ0ExJyk7XG4gICAgICBjb25zdCByZXN1bHQgPSBBbmFseXplLmFuYWx5emVBbGwoYTEuZW50aXR5LFxuICAgICAgICB0aGVNb2RlbC5ydWxlcywgdGhlTW9kZWwudG9vbHMsIGd3b3Jkcyk7XG4gICAgICBsb2dRdWVyeShzZXNzaW9uLCAnU2hvd01lJywgcmVzdWx0KTtcbiAgICAgIC8vIHRlc3QuZXhwZWN0KDMpXG4gICAgICAvLyAgdGVzdC5kZWVwRXF1YWwocmVzdWx0LndlaWdodCwgMTIwLCAnY29ycmVjdCB3ZWlnaHQnKTtcbiAgICAgIGlmICghcmVzdWx0IHx8IHJlc3VsdC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgbmV4dCgpO1xuICAgICAgfVxuICAgICAgLy8gZGVidWdsb2coJ3Jlc3VsdCA6ICcgKyBKU09OLnN0cmluZ2lmeShyZXN1bHQsIHVuZGVmaW5lZCwgMikpO1xuICAgICAgZGVidWdsb2coJ2Jlc3QgcmVzdWx0IDogJyArIEpTT04uc3RyaW5naWZ5KHJlc3VsdFswXSB8fCB7fSwgdW5kZWZpbmVkLCAyKSk7XG4gICAgICBkZWJ1Z2xvZygndG9wIDogJyArIE1hdGNoLlRvb2xNYXRjaC5kdW1wV2VpZ2h0c1RvcChyZXN1bHQsIHsgdG9wOiAzIH0pKTtcblxuXG4gICAgICBpZiAoQW5hbHl6ZS5pc0NvbXBsZXRlKHJlc3VsdFswXSkpIHtcbiAgICAgICAgc2Vzc2lvbi5kaWFsb2dEYXRhLnJlc3VsdCA9IHJlc3VsdFswXTtcbiAgICAgICAgLy8gICAgc2Vzc2lvbi5zZW5kKCdTaG93aW5nIGVudGl0eSAuLi4nKTtcbiAgICAgICAgbmV4dCgpO1xuICAgICAgfSBlbHNlIGlmIChBbmFseXplLmdldFByb21wdChyZXN1bHRbMF0pKSB7XG4gICAgICAgIHZhciBwcm9tcHQgPSBBbmFseXplLmdldFByb21wdChyZXN1bHRbMF0pO1xuICAgICAgICBzZXNzaW9uLmRpYWxvZ0RhdGEucmVzdWx0ID0gcmVzdWx0WzBdO1xuICAgICAgICBzZXNzaW9uLmRpYWxvZ0RhdGEucHJvbXB0ID0gcHJvbXB0O1xuICAgICAgICBkaWFsb2dsb2coXCJTaG93TWVcIiwgc2Vzc2lvbiwgc2VuZChcIk5vdCBlbm91Z2ggaW5mb3JtYXRpb24gc3VwcGxpZWQ6IFwiICsgTWF0Y2guVG9vbE1hdGNoLmR1bXBOaWNlKFxuICAgICAgICAgIHNlc3Npb24uZGlhbG9nRGF0YS5yZXN1bHRcbiAgICAgICAgKSkpO1xuICAgICAgICBidWlsZGVyLlByb21wdHMudGV4dChzZXNzaW9uLCBwcm9tcHQudGV4dCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgYmVzdCA9IHJlc3VsdC5sZW5ndGggPyBNYXRjaC5Ub29sTWF0Y2guZHVtcE5pY2UocmVzdWx0WzBdKSA6IFwiPG5vdGhpbmc+XCI7XG4gICAgICAgIGRpYWxvZ2xvZyhcIlNob3dNZVwiLCBzZXNzaW9uLCBzZW5kKCdJIGRpZCBub3QgdW5kZXJzdGFuZCB0aGlzJyArIGJlc3QpKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGZ1bmN0aW9uIChzZXNzaW9uLCByZXN1bHRzLCBuZXh0KSB7XG4gICAgICB2YXIgcmVzdWx0ID0gc2Vzc2lvbi5kaWFsb2dEYXRhLnJlc3VsdDtcbiAgICAgIGlmICghcmVzdWx0IHx8IHJlc3VsdC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgbmV4dCgpO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVzdWx0cy5yZXNwb25zZSkge1xuICAgICAgICAvLyBzb21lIHByb21wdGluZ1xuICAgICAgICBBbmFseXplLnNldFByb21wdChzZXNzaW9uLmRpYWxvZ0RhdGEucmVzdWx0LCBzZXNzaW9uLmRpYWxvZ0RhdGEucHJvbXB0LCByZXN1bHRzLnJlc3BvbnNlKTtcbiAgICAgIH1cbiAgICAgIGlmIChBbmFseXplLmlzQ29tcGxldGUoc2Vzc2lvbi5kaWFsb2dEYXRhLnJlc3VsdCkpIHtcbiAgICAgICAgbmV4dCgpO1xuICAgICAgfSBlbHNlIGlmIChBbmFseXplLmdldFByb21wdChzZXNzaW9uLmRpYWxvZ0RhdGEucmVzdWx0KSkge1xuICAgICAgICB2YXIgcHJvbXB0ID0gQW5hbHl6ZS5nZXRQcm9tcHQoc2Vzc2lvbi5kaWFsb2dEYXRhLnJlc3VsdCk7XG4gICAgICAgIHNlc3Npb24uZGlhbG9nRGF0YS5wcm9tcHQgPSBwcm9tcHQ7XG4gICAgICAgIGJ1aWxkZXIuUHJvbXB0cy50ZXh0KHNlc3Npb24sIHByb21wdC50ZXh0KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGZ1bmN0aW9uIChzZXNzaW9uLCByZXN1bHRzLCBuZXh0KSB7XG4gICAgICB2YXIgcmVzdWx0ID0gc2Vzc2lvbi5kaWFsb2dEYXRhLnJlc3VsdDtcbiAgICAgIGlmIChyZXN1bHRzLnJlc3BvbnNlKSB7XG4gICAgICAgIC8vIHNvbWUgcHJvbXB0aW5nXG4gICAgICAgIEFuYWx5emUuc2V0UHJvbXB0KHNlc3Npb24uZGlhbG9nRGF0YS5yZXN1bHQsXG4gICAgICAgICAgc2Vzc2lvbi5kaWFsb2dEYXRhLnByb21wdCwgcmVzdWx0cy5yZXNwb25zZSk7XG4gICAgICB9XG4gICAgICBpZiAoQW5hbHl6ZS5pc0NvbXBsZXRlKHNlc3Npb24uZGlhbG9nRGF0YS5yZXN1bHQpKSB7XG4gICAgICAgIGNvbnN0IGV4ZWMgPSBFeGVjU2VydmVyLmV4ZWNUb29sKHNlc3Npb24uZGlhbG9nRGF0YS5yZXN1bHQgYXMgSU1hdGNoLklUb29sTWF0Y2gsIHRoZU1vZGVsLnJlY29yZHMpO1xuXG4gICAgICAgIHZhciByZXBseSA9IG5ldyBidWlsZGVyLk1lc3NhZ2Uoc2Vzc2lvbilcbiAgICAgICAgICAudGV4dChleGVjLnRleHQpXG4gICAgICAgICAgLmFkZEVudGl0eShleGVjLmFjdGlvbik7XG4gICAgICAgIC8vIC5hZGRBdHRhY2htZW50KHsgZmFsbGJhY2tUZXh0OiBcIkkgZG9uJ3Qga25vd1wiLCBjb250ZW50VHlwZTogJ2ltYWdlL2pwZWcnLCBjb250ZW50VXJsOiBcInd3dy53b21iYXQub3JnXCIgfSk7XG4gICAgICAgIGRpYWxvZ2xvZyhcIlNob3dNZVwiLCBzZXNzaW9uLCBzZW5kKHJlcGx5KSk7XG5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChzZXNzaW9uLmRpYWxvZ0RhdGEucmVzdWx0KSB7XG4gICAgICAgICAgZGlhbG9nbG9nKFwiU2hvd01lXCIsXG4gICAgICAgICAgICBzZXNzaW9uLCBzZW5kKFwiTm90IGVub3VnaCBpbmZvcm1hdGlvbiBzdXBwbGllZDogXCIgKyBNYXRjaC5Ub29sTWF0Y2guZHVtcE5pY2UoXG4gICAgICAgICAgICAgIHNlc3Npb24uZGlhbG9nRGF0YS5yZXN1bHRcbiAgICAgICAgICAgICkpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkaWFsb2dsb2coXCJTaG93TWVcIiwgc2Vzc2lvbiwgc2VuZChcIkkgZGlkIG5vdCBnZXQgd2hhdCB5b3Ugd2FudFwiKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICBdKTtcblxuICBkaWFsb2cubWF0Y2hlcygnV2hhdElzJywgW1xuICAgIGZ1bmN0aW9uIChzZXNzaW9uLCBhcmdzLCBuZXh0KSB7XG4gICAgICB2YXIgaXNDb21iaW5lZEluZGV4ID0ge307XG4gICAgICB2YXIgb05ld0VudGl0eTtcbiAgICAgIC8vIGV4cGVjdGluZyBlbnRpdHkgQTFcbiAgICAgIHZhciBtZXNzYWdlID0gc2Vzc2lvbi5tZXNzYWdlLnRleHQ7XG4gICAgICBkZWJ1Z2xvZyhcIldoYXRJcyBFbnRpdGllc1wiKTtcbiAgICAgIGRlYnVnbG9nKCdyYXc6ICcgKyBKU09OLnN0cmluZ2lmeShhcmdzLmVudGl0aWVzKSwgdW5kZWZpbmVkLCAyKTtcbiAgICAgIHZhciBjYXRlZ29yeUVudGl0eSA9IGJ1aWxkZXIuRW50aXR5UmVjb2duaXplci5maW5kRW50aXR5KGFyZ3MuZW50aXRpZXMsICdjYXRlZ29yeScpO1xuICAgICAgdmFyIGNhdGVnb3J5ID0gY2F0ZWdvcnlFbnRpdHkuZW50aXR5O1xuICAgICAgdmFyIGExID0gYnVpbGRlci5FbnRpdHlSZWNvZ25pemVyLmZpbmRFbnRpdHkoYXJncy5lbnRpdGllcywgJ0ExJyk7XG4gICAgICB2YXIgY2F0cyA9IFtdO1xuICAgICAgdHJ5IHtcbiAgICAgICAgY2F0cyA9IFdoYXRJcy5hbmFseXplQ2F0ZWdvcnlNdWx0MihjYXRlZ29yeSwgdGhlTW9kZWwucnVsZXMsIG1lc3NhZ2UpO1xuICAgICAgICBkZWJ1Z2xvZyhcImhlcmUgY2F0c1wiICsgY2F0cy5qb2luKFwiLFwiKSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChlKSB7XG4gICAgICAgICAgZGVidWdsb2coXCJoZXJlIGV4Y2VwdGlvblwiICsgZSk7XG4gICAgICAgICAgZGlhbG9nbG9nKFwiV2hhdElzXCIsIHNlc3Npb24sIHNlbmQoJ0kgZG9uXFwndCBrbm93IGFueXRoaW5nIGFib3V0IFwiJyArIGNhdGVnb3J5ICtcbiAgICAgICAgICAgIChlID8gJygnICsgZS50b1N0cmluZygpICsgJyknIDogXCJcIikpKTtcbiAgICAgICAgICAvLyBuZXh0KCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBjYXQgPSB1bmRlZmluZWQ7XG4gICAgICAvLyB3ZSBoYXZlIHNvbWUgY2F0cywgKG9yIGF0IGxlYXN0IG9uZSlcbiAgICAgIGlmIChjYXRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBjYXQgPSBjYXRzWzBdO1xuICAgICAgICBpZiAoIWNhdCkge1xuICAgICAgICAgIHNlc3Npb24uc2VuZCgnSSBkb25cXCd0IGtub3cgYW55dGhpbmcgYWJvdXQgXCInICsgY2F0ZWdvcnkgKyAnXCInKTtcbiAgICAgICAgICAvLyBuZXh0KCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoY2F0cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgZGVidWdsb2coJ2NhdGVnb3J5IGlkZW50aWZpZWQ6JyArIGNhdCk7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFdoYXRJcy5yZXNvbHZlQ2F0ZWdvcnkoY2F0LCBhMS5lbnRpdHksXG4gICAgICAgICAgdGhlTW9kZWwucnVsZXMsIHRoZU1vZGVsLnJlY29yZHMpO1xuICAgICAgICBkZWJ1Z2xvZygnd2hhdGlzIHJlc3VsdDonICsgSlNPTi5zdHJpbmdpZnkocmVzdWx0KSk7XG4gICAgICAgIGxvZ1F1ZXJ5V2hhdElzKHNlc3Npb24sICdXaGF0SXMnLCByZXN1bHQpO1xuICAgICAgICB2YXIgaW5kaXMgPSBXaGF0SXMuaXNJbmRpc2NyaW1pbmF0ZVJlc3VsdChyZXN1bHQpO1xuICAgICAgICBpZiAoaW5kaXMpIHtcbiAgICAgICAgICBzZXNzaW9uLnNlbmQoaW5kaXMpO1xuICAgICAgICAgIC8vIG5leHQoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFyZXN1bHQgfHwgcmVzdWx0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIGRpYWxvZ2xvZyhcIldoYXRJc1wiLCBzZXNzaW9uLCBzZW5kKCdJIGRvblxcJ3Qga25vdyBhbnl0aGluZyBhYm91dCBcIicgKyBjYXQgKyBcIiAoXCIgKyBjYXRlZ29yeSArICcpXFxcIiBpbiByZWxhdGlvbiB0byBcIicgKyBhMS5lbnRpdHkgKyAnXCInKSk7XG4gICAgICAgICAgLy8gbmV4dCgpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBkZWJ1Z2xvZygncmVzdWx0IDogJyArIEpTT04uc3RyaW5naWZ5KHJlc3VsdCwgdW5kZWZpbmVkLCAyKSk7XG4gICAgICAgICAgZGVidWdsb2coJ2Jlc3QgcmVzdWx0IDogJyArIEpTT04uc3RyaW5naWZ5KHJlc3VsdFswXSB8fCB7fSwgdW5kZWZpbmVkLCAyKSk7XG4gICAgICAgICAgZGVidWdsb2coJ3RvcCA6ICcgKyBXaGF0SXMuZHVtcFdlaWdodHNUb3AocmVzdWx0LCB7IHRvcDogMyB9KSk7XG4gICAgICAgICAgLy8gVE9ETyBjbGVhbnNlZCBzZW50ZW5jZVxuICAgICAgICAgIGRpYWxvZ2xvZyhcIldoYXRJc1wiLCBzZXNzaW9uLCBzZW5kKCdUaGUgJyArIGNhdGVnb3J5ICsgJyBvZiAnICsgYTEuZW50aXR5ICsgJyBpcyAnICsgcmVzdWx0WzBdLnJlc3VsdCArIFwiXFxuXCIpKTsgLy8gICsgSlNPTi5zdHJpbmdpZnkocmVzdWx0WzBdKSk7XG4gICAgICAgIH1cbiAgICAgIH0gLy8gc2luZ2xlIGNhdGVnb3J5XG4gICAgICBlbHNlIHtcbiAgICAgICAgZGVidWdsb2coJ2NhdGVnb3JpZXMgaWRlbnRpZmllZDonICsgY2F0cy5qb2luKFwiLFwiKSk7XG4gICAgICAgIGNvbnN0IHJlc3VsdEFyciA9IFdoYXRJcy5yZXNvbHZlQ2F0ZWdvcmllcyhjYXRzLCBhMS5lbnRpdHksXG4gICAgICAgICAgdGhlTW9kZWwpO1xuICAgICAgICBkZWJ1Z2xvZygnd2hhdGlzIHJlc3VsdDonICsgSlNPTi5zdHJpbmdpZnkocmVzdWx0QXJyKSk7XG4gICAgICAgIGxvZ1F1ZXJ5V2hhdElzVHVwZWwoc2Vzc2lvbiwgJ1doYXRJcycsIHJlc3VsdEFycik7XG4gICAgICAgIHZhciBpbmRpcyA9IFdoYXRJcy5pc0luZGlzY3JpbWluYXRlUmVzdWx0VHVwZWwocmVzdWx0QXJyKTtcbiAgICAgICAgaWYgKGluZGlzKSB7XG4gICAgICAgICAgc2Vzc2lvbi5zZW5kKGluZGlzKTtcbiAgICAgICAgICAvLyBuZXh0KCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghcmVzdWx0QXJyIHx8IHJlc3VsdEFyci5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBkaWFsb2dsb2coXCJXaGF0SXNcIiwgc2Vzc2lvbiwgc2VuZCgnSSBkb25cXCd0IGtub3cgYW55dGhpbmcgYWJvdXQgXCInICsgY2F0ZWdvcnkgKyBcIlxcXCIgKFwiICsgVXRpbHMubGlzdFRvUXVvdGVkQ29tbWFBbmQoY2F0cykgKyAnKVxcXCIgaW4gcmVsYXRpb24gdG8gXCInICsgYTEuZW50aXR5ICsgJ1wiJykpO1xuICAgICAgICAgIC8vIG5leHQoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gZGVidWdsb2coJ3Jlc3VsdCA6ICcgKyBKU09OLnN0cmluZ2lmeShyZXN1bHQsIHVuZGVmaW5lZCwgMikpO1xuICAgICAgICAgIGRlYnVnbG9nKCdiZXN0IHJlc3VsdCA6ICcgKyBKU09OLnN0cmluZ2lmeShyZXN1bHRBcnJbMF0gfHwge30sIHVuZGVmaW5lZCwgMikpO1xuICAgICAgICAgIC8vZGVidWdsb2coJ3RvcCA6ICcgKyBXaGF0SXMuZHVtcFdlaWdodHNUb3AocmVzdWx0QXJyLCB7IHRvcDogMyB9KSk7XG4gICAgICAgICAgLy8gVE9ETyBjbGVhbnNlZCBzZW50ZW5jZVxuICAgICAgICAgIGRpYWxvZ2xvZyhcIldoYXRJc1wiLCBzZXNzaW9uLCBzZW5kKCdUaGUgJyArIFV0aWxzLmxpc3RUb1F1b3RlZENvbW1hQW5kKGNhdHMpICsgJyBvZiAnICsgYTEuZW50aXR5ICsgJyBhcmUgJyArIFV0aWxzLmxpc3RUb1F1b3RlZENvbW1hQW5kKHJlc3VsdEFyclswXS5yZXN1bHQpICsgJ1xcbicpKTsgLy8gICsgSlNPTi5zdHJpbmdpZnkocmVzdWx0WzBdKSk7XG4gICAgICAgIH1cbiAgICAgIH0gLy9lbmRpZiBtdWx0aXBsZSBjYXRlZ29yaWVzXG4gICAgfVxuICBdKTtcblxuXG4gIGRpYWxvZy5tYXRjaGVzKCdMaXN0QWxsJywgW1xuICAgIGZ1bmN0aW9uIChzZXNzaW9uLCBhcmdzLCBuZXh0KSB7XG4gICAgICB2YXIgaXNDb21iaW5lZEluZGV4ID0ge307XG4gICAgICB2YXIgb05ld0VudGl0eTtcbiAgICAgIC8vIGV4cGVjdGluZyBlbnRpdHkgQTFcbiAgICAgIHZhciBtZXNzYWdlID0gc2Vzc2lvbi5tZXNzYWdlLnRleHQ7XG4gICAgICBkZWJ1Z2xvZyhcIkludGVudCA6IExpc3RBbGxcIik7XG4gICAgICBkZWJ1Z2xvZygncmF3OiAnICsgSlNPTi5zdHJpbmdpZnkoYXJncy5lbnRpdGllcyksIHVuZGVmaW5lZCwgMik7XG4gICAgICB2YXIgY2F0ZWdvcnlFbnRpdHkgPSBidWlsZGVyLkVudGl0eVJlY29nbml6ZXIuZmluZEVudGl0eShhcmdzLmVudGl0aWVzLCAnY2F0ZWdvcmllcycpO1xuICAgICAgdmFyIGNhdGVnb3J5ID0gY2F0ZWdvcnlFbnRpdHkuZW50aXR5O1xuICAgICAgdmFyIGExID0gYnVpbGRlci5FbnRpdHlSZWNvZ25pemVyLmZpbmRFbnRpdHkoYXJncy5lbnRpdGllcywgJ2luc3RoJyk7XG4gICAgICBpZiAoY2F0ZWdvcnkgPT09IFwiY2F0ZWdvcmllc1wiKSB7XG4gICAgICAgIC8vIGRvIHdlIGhhdmUgYSBmaWx0ZXIgP1xuICAgICAgICB2YXIgZG9tYWluID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAoYTEgJiYgYTEuZW50aXR5KSB7XG4gICAgICAgICAgZG9tYWluID0gTGlzdEFsbC5pbmZlckRvbWFpbih0aGVNb2RlbCwgYTEuZW50aXR5KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWRvbWFpbikge1xuICAgICAgICAgIHZhciByZXMgPSByZXN0cmljdExvZ2dlZE9uKHNlc3Npb24sIHRoZU1vZGVsLmNhdGVnb3J5KS5qb2luKFwiO1xcblwiKTtcbiAgICAgICAgICBpZiAoYTEgJiYgYTEuZW50aXR5KSB7XG4gICAgICAgICAgICBkaWFsb2dsb2coXCJMaXN0QWxsXCIsIHNlc3Npb24sIHNlbmQoXCJJIGRpZCBub3QgaW5mZXIgYSBkb21haW4gcmVzdHJpY3Rpb24gZnJvbSBcXFwiXCIgKyBhMS5lbnRpdHkgKyBcIlxcXCIsIGFsbCBteSBjYXRlZ29yaWVzIGFyZSAuLi5cXG5cIiArIHJlcykpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkaWFsb2dsb2coXCJMaXN0QWxsXCIsIHNlc3Npb24sIHNlbmQoXCJteSBjYXRlZ29yaWVzIGFyZSAuLi5cXG5cIiArIHJlcykpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIGFSZXMgPSBNb2RlbC5nZXRDYXRlZ29yaWVzRm9yRG9tYWluKHRoZU1vZGVsLCBkb21haW4pO1xuICAgICAgICAgIHZhciByZXMgPSByZXN0cmljdExvZ2dlZE9uKHNlc3Npb24sIGFSZXMpLmpvaW4oXCI7XFxuXCIpO1xuICAgICAgICAgIGRpYWxvZ2xvZyhcIkxpc3RBbGxcIiwgc2Vzc2lvbiwgc2VuZChcIm15IGNhdGVnb3JpZXMgaW4gZG9tYWluIFxcXCJcIiArIGRvbWFpbiArIFwiXFxcIiBhcmUgLi4uXFxuXCIgKyByZXMpKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChjYXRlZ29yeSA9PT0gXCJkb21haW5zXCIpIHtcbiAgICAgICAgdmFyIHJlcyA9IHJlc3RyaWN0TG9nZ2VkT24oc2Vzc2lvbiwgdGhlTW9kZWwuZG9tYWlucykuam9pbihcIjtcXG5cIik7XG4gICAgICAgIGRpYWxvZ2xvZyhcIkxpc3RBbGxcIiwgc2Vzc2lvbiwgc2VuZChcIm15IGRvbWFpbnMgYXJlIC4uLlxcblwiICsgcmVzKSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChjYXRlZ29yeSA9PT0gXCJ0b29sc1wiKSB7XG4gICAgICAgIHZhciByZXMgPSByZXN0cmljdExvZ2dlZE9uKHNlc3Npb24sIHRoZU1vZGVsLnRvb2xzKS5tYXAoZnVuY3Rpb24gKG9Ub29sKSB7XG4gICAgICAgICAgcmV0dXJuIG9Ub29sLm5hbWU7XG4gICAgICAgIH0pLmpvaW4oXCI7XFxuXCIpO1xuICAgICAgICBkaWFsb2dsb2coXCJMaXN0QWxsXCIsIHNlc3Npb24sIHNlbmQoXCJteSB0b29scyBhcmUgLi4uXFxuXCIgKyByZXMpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIGNhdHMgPSBbXTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNhdHMgPSBXaGF0SXMuYW5hbHl6ZUNhdGVnb3J5TXVsdDIoY2F0ZWdvcnksIHRoZU1vZGVsLnJ1bGVzLCBtZXNzYWdlKTtcbiAgICAgICAgZGVidWdsb2coXCJoZXJlIGNhdHNcIiArIGNhdHMuam9pbihcIixcIikpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoZSkge1xuICAgICAgICAgIGRlYnVnbG9nKFwiaGVyZSBleGNlcHRpb25cIiArIGUpO1xuICAgICAgICAgIGRpYWxvZ2xvZyhcIldoYXRJc1wiLCBzZXNzaW9uLCBzZW5kKCdJIGRvblxcJ3Qga25vdyBhbnl0aGluZyBhYm91dCBcIicgKyBjYXRlZ29yeSArICdcIignICsgZS50b1N0cmluZygpICsgJyknKSk7XG4gICAgICAgICAgLy8gbmV4dCgpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCFjYXRzIHx8IChjYXRzLmxlbmd0aCA9PT0gMCkpIHtcbiAgICAgICAgZGlhbG9nbG9nKFwiTGlzdEFsbFwiLCBzZXNzaW9uLCBzZW5kKCdJIGRvblxcJ3Qga25vdyBhbnl0aGluZyBhYm91dCBcIicgKyBjYXRlZ29yeSArICdcIicpKTtcbiAgICAgICAgLy8gbmV4dCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgY2F0ID0gXCJcIjtcbiAgICAgIGlmIChjYXRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBjYXQgPSBjYXRzWzBdO1xuICAgICAgfVxuICAgICAgaWYgKGNhdHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIGRlYnVnbG9nKCdjYXRlZ29yeSBpZGVudGlmaWVkOicgKyBjYXQpO1xuICAgICAgICBpZiAoYTEgJiYgYTEuZW50aXR5KSB7XG4gICAgICAgICAgZGVidWdsb2coJ2dvdCBmaWx0ZXI6JyArIGExLmVudGl0eSk7XG4gICAgICAgICAgdmFyIGNhdGVnb3J5U2V0ID0gTW9kZWwuZ2V0QWxsUmVjb3JkQ2F0ZWdvcmllc0ZvclRhcmdldENhdGVnb3J5KHRoZU1vZGVsLCBjYXQsIHRydWUpO1xuICAgICAgICAgIHZhciByZXN1bHQxID0gTGlzdEFsbC5saXN0QWxsV2l0aENvbnRleHQoY2F0LCBhMS5lbnRpdHksXG4gICAgICAgICAgICB0aGVNb2RlbC5ydWxlcywgdGhlTW9kZWwucmVjb3JkcywgY2F0ZWdvcnlTZXQpO1xuICAgICAgICAgIC8vIFRPRE8gY2xhc3NpZnlpbmcgdGhlIHN0cmluZyB0d2ljZSBpcyBhIHRlcnJpYmxlIHdhc3RlXG4gICAgICAgICAgaWYgKCFyZXN1bHQxLmxlbmd0aCkge1xuICAgICAgICAgICAgZGVidWdsb2coJ2dvaW5nIGZvciBoYXZpbmcnKTtcbiAgICAgICAgICAgIHZhciBjYXRlZ29yeVNldEZ1bGwgPSBNb2RlbC5nZXRBbGxSZWNvcmRDYXRlZ29yaWVzRm9yVGFyZ2V0Q2F0ZWdvcnkodGhlTW9kZWwsIGNhdCwgZmFsc2UpO1xuICAgICAgICAgICAgcmVzdWx0MSA9IExpc3RBbGwubGlzdEFsbEhhdmluZ0NvbnRleHQoY2F0LCBhMS5lbnRpdHksIHRoZU1vZGVsLnJ1bGVzLFxuICAgICAgICAgICAgICB0aGVNb2RlbC5yZWNvcmRzLCBjYXRlZ29yeVNldEZ1bGwpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBkZWJ1Z2xvZygnbGlzdGFsbCByZXN1bHQ6JyArIEpTT04uc3RyaW5naWZ5KHJlc3VsdDEpKTtcbiAgICAgICAgICB2YXIgam9pbnJlc3VsdHMgPSByZXN0cmljdExvZ2dlZE9uKHNlc3Npb24sIExpc3RBbGwuam9pblJlc3VsdHMocmVzdWx0MSkpO1xuICAgICAgICAgIGxvZ1F1ZXJ5V2hhdElzKHNlc3Npb24sICdMaXN0QWxsJywgcmVzdWx0MSk7XG4gICAgICAgICAgaWYgKGpvaW5yZXN1bHRzLmxlbmd0aCkge1xuICAgICAgICAgICAgZGlhbG9nbG9nKFwiTGlzdEFsbFwiLCBzZXNzaW9uLCBzZW5kKFwidGhlIFwiICsgY2F0ZWdvcnkgKyBcIiBmb3IgXCIgKyBhMS5lbnRpdHkgKyBcIiBhcmUgLi4uXFxuXCIgKyBqb2lucmVzdWx0cy5qb2luKFwiO1xcblwiKSkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkaWFsb2dsb2coXCJMaXN0QWxsXCIsIHNlc3Npb24sIHNlbmQoXCJpIGRpZCBub3QgZmluZCBhbnkgXCIgKyBjYXRlZ29yeSArIFwiIGZvciBcIiArIGExLmVudGl0eSArIFwiLlxcblwiICsgam9pbnJlc3VsdHMuam9pbihcIjtcXG5cIikpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIG5vIGVudGl0eSwgZS5nLiBsaXN0IGFsbCBjb3VudHJpZXNcbiAgICAgICAgICAvL1xuICAgICAgICAgIHZhciBjYXRlZ29yeVNldEZ1bGwgPSBNb2RlbC5nZXRBbGxSZWNvcmRDYXRlZ29yaWVzRm9yVGFyZ2V0Q2F0ZWdvcnkodGhlTW9kZWwsIGNhdCwgZmFsc2UpO1xuICAgICAgICAgIHZhciByZXN1bHQgPSBMaXN0QWxsLmxpc3RBbGxIYXZpbmdDb250ZXh0KGNhdCwgY2F0LCB0aGVNb2RlbC5ydWxlcywgdGhlTW9kZWwucmVjb3JkcywgY2F0ZWdvcnlTZXRGdWxsKTtcbiAgICAgICAgICBsb2dRdWVyeVdoYXRJcyhzZXNzaW9uLCAnTGlzdEFsbCcsIHJlc3VsdCk7XG4gICAgICAgICAgaWYgKHJlc3VsdC5sZW5ndGgpIHtcbiAgICAgICAgICAgIGRlYnVnbG9nKCdsaXN0YWxsIHJlc3VsdDonICsgSlNPTi5zdHJpbmdpZnkocmVzdWx0KSk7XG4gICAgICAgICAgICB2YXIgam9pbnJlc3VsdHMgPSBbXTtcbiAgICAgICAgICAgIGRlYnVnbG9nKFwiaGVyZSBpcyBjYXQ+XCIgKyBjYXQpO1xuICAgICAgICAgICAgaWYgKGNhdCAhPT0gXCJleGFtcGxlIHF1ZXN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgam9pbnJlc3VsdHMgPSByZXN0cmljdExvZ2dlZE9uKHNlc3Npb24sIExpc3RBbGwuam9pblJlc3VsdHMocmVzdWx0KSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBqb2lucmVzdWx0cyA9IExpc3RBbGwuam9pblJlc3VsdHMocmVzdWx0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciByZXNwb25zZSA9IFwidGhlIFwiICsgY2F0ZWdvcnkgKyBcIiBhcmUgLi4uXFxuXCIgKyBqb2lucmVzdWx0cy5qb2luKFwiO1xcblwiKTtcbiAgICAgICAgICAgIGRpYWxvZ2xvZyhcIkxpc3RBbGxcIiwgc2Vzc2lvbiwgc2VuZChyZXNwb25zZSkpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgcmVzcG9uc2UgPSBcIkZvdW5kIG5vIGRhdGEgaGF2aW5nIFxcXCJcIiArIGNhdCArIFwiXFxcIlwiXG4gICAgICAgICAgICBkaWFsb2dsb2coXCJMaXN0QWxsXCIsIHNlc3Npb24sIHNlbmQocmVzcG9uc2UpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIG11bHRpcGxlIGNhdGVnb3JpZXNcbiAgICAgICAgZGVidWdsb2coJ2NhdGVnb3JpZXMgaWRlbnRpZmllZDonICsgY2F0cy5qb2luKFwiLFwiKSk7XG4gICAgICAgIGlmIChhMSAmJiBhMS5lbnRpdHkpIHtcbiAgICAgICAgICBkZWJ1Z2xvZygnZ290IGZpbHRlcjonICsgYTEuZW50aXR5KTtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIGNhdGVnb3J5U2V0ID0gTW9kZWwuZ2V0QWxsUmVjb3JkQ2F0ZWdvcmllc0ZvclRhcmdldENhdGVnb3JpZXModGhlTW9kZWwsIGNhdHMsIHRydWUpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGRlYnVnbG9nKFwiaGVyZSBleGNlcHRpb25cIiArIGUpO1xuICAgICAgICAgICAgZGlhbG9nbG9nKFwiV2hhdElzXCIsIHNlc3Npb24sIHNlbmQoJ0kgY2Fubm90IGNvbWJpbmUgXCInICsgY2F0ZWdvcnkgKyAnKCcgKyBlLnRvU3RyaW5nKCkgKyAnKScpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIHJlc3VsdDFUID0gTGlzdEFsbC5saXN0QWxsVHVwZWxXaXRoQ29udGV4dChjYXRzLCBhMS5lbnRpdHksXG4gICAgICAgICAgICB0aGVNb2RlbC5ydWxlcywgdGhlTW9kZWwucmVjb3JkcywgY2F0ZWdvcnlTZXQpO1xuICAgICAgICAgIC8vIFRPRE8gY2xhc3NpZnlpbmcgdGhlIHN0cmluZyB0d2ljZSBpcyBhIHRlcnJpYmxlIHdhc3RlXG4gICAgICAgICAgaWYgKCFyZXN1bHQxVC5sZW5ndGgpIHtcbiAgICAgICAgICAgIGRlYnVnbG9nKCdnb2luZyBmb3IgaGF2aW5nJyk7XG4gICAgICAgICAgICB2YXIgY2F0ZWdvcnlTZXRGdWxsID0gTW9kZWwuZ2V0QWxsUmVjb3JkQ2F0ZWdvcmllc0ZvclRhcmdldENhdGVnb3JpZXModGhlTW9kZWwsIGNhdHMsIGZhbHNlKTtcbiAgICAgICAgICAgIHJlc3VsdDFUID0gTGlzdEFsbC5saXN0QWxsVHVwZWxIYXZpbmdDb250ZXh0KGNhdHMsIGExLmVudGl0eSwgdGhlTW9kZWwucnVsZXMsXG4gICAgICAgICAgICAgIHRoZU1vZGVsLnJlY29yZHMsIGNhdGVnb3J5U2V0RnVsbCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGRlYnVnbG9nKCdsaXN0YWxsIHJlc3VsdDonICsgSlNPTi5zdHJpbmdpZnkocmVzdWx0MVQpKTtcbiAgICAgICAgICB2YXIgam9pbnJlc3VsdHMgPSByZXN0cmljdExvZ2dlZE9uKHNlc3Npb24sIExpc3RBbGwuam9pblJlc3VsdHNUdXBlbChyZXN1bHQxVCkpO1xuICAgICAgICAgIGxvZ1F1ZXJ5V2hhdElzVHVwZWwoc2Vzc2lvbiwgJ0xpc3RBbGwnLCByZXN1bHQxVCk7XG4gICAgICAgICAgaWYgKGpvaW5yZXN1bHRzLmxlbmd0aCkge1xuICAgICAgICAgICAgZGlhbG9nbG9nKFwiTGlzdEFsbFwiLCBzZXNzaW9uLCBzZW5kKFwidGhlIFwiICsgY2F0ZWdvcnkgKyBcIiBmb3IgXCIgKyBhMS5lbnRpdHkgKyBcIiBhcmUgLi4uXFxuXCIgKyBqb2lucmVzdWx0cy5qb2luKFwiO1xcblwiKSkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkaWFsb2dsb2coXCJMaXN0QWxsXCIsIHNlc3Npb24sIHNlbmQoXCJpIGRpZCBub3QgZmluZCBhbnkgXCIgKyBjYXRlZ29yeSArIFwiIGZvciBcIiArIGExLmVudGl0eSArIFwiLlxcblwiICsgam9pbnJlc3VsdHMuam9pbihcIjtcXG5cIikpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIG5vIGVudGl0eSwgZS5nLiBsaXN0IGFsbCBjb3VudHJpZXNcbiAgICAgICAgICAvL1xuICAgICAgICAgIHZhciBjYXRlZ29yeVNldEZ1bGwgPSB7fSBhcyB7IFtrZXk6IHN0cmluZ106IGJvb2xlYW4gfTtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgY2F0ZWdvcnlTZXRGdWxsID0gTW9kZWwuZ2V0QWxsUmVjb3JkQ2F0ZWdvcmllc0ZvclRhcmdldENhdGVnb3JpZXModGhlTW9kZWwsIGNhdHMsIGZhbHNlKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBkZWJ1Z2xvZyhcImhlcmUgZXhjZXB0aW9uXCIgKyBlKTtcbiAgICAgICAgICAgIGRpYWxvZ2xvZyhcIldoYXRJc1wiLCBzZXNzaW9uLCBzZW5kKCdJIGNhbm5vdCBjb21iaW5lIFwiJyArIGNhdGVnb3J5ICsgJygnICsgZS50b1N0cmluZygpICsgJyknKSk7XG4gICAgICAgICAgICAvLyBuZXh0KCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciByZXN1bHRUID0gTGlzdEFsbC5saXN0QWxsVHVwZWxIYXZpbmdDb250ZXh0KGNhdHMsIFwiXFxcIlwiICsgY2F0cy5qb2luKFwiXFxcIiBcXFwiXCIpICsgXCJcXFwiXCIsIHRoZU1vZGVsLnJ1bGVzLCB0aGVNb2RlbC5yZWNvcmRzLCBjYXRlZ29yeVNldEZ1bGwpO1xuICAgICAgICAgIGxvZ1F1ZXJ5V2hhdElzVHVwZWwoc2Vzc2lvbiwgJ0xpc3RBbGwnLCByZXN1bHRUKTtcbiAgICAgICAgICBpZiAocmVzdWx0VC5sZW5ndGgpIHtcbiAgICAgICAgICAgIGRlYnVnbG9nKCdsaXN0YWxsIHJlc3VsdDonICsgSlNPTi5zdHJpbmdpZnkocmVzdWx0VCkpO1xuICAgICAgICAgICAgdmFyIGpvaW5yZXN1bHRzID0gW107XG4gICAgICAgICAgICBkZWJ1Z2xvZyhcImhlcmUgaXMgY2F0PlwiICsgY2F0cy5qb2luKFwiLCBcIikpO1xuICAgICAgICAgICAgaWYgKGNhdCAhPT0gXCJleGFtcGxlIHF1ZXN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgam9pbnJlc3VsdHMgPSByZXN0cmljdExvZ2dlZE9uKHNlc3Npb24sIExpc3RBbGwuam9pblJlc3VsdHNUdXBlbChyZXN1bHRUKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBqb2lucmVzdWx0cyA9IExpc3RBbGwuam9pblJlc3VsdHNUdXBlbChyZXN1bHRUKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciByZXNwb25zZSA9IFwidGhlIFwiICsgY2F0ZWdvcnkgKyBcIiBhcmUgLi4uXFxuXCIgKyBqb2lucmVzdWx0cy5qb2luKFwiO1xcblwiKTtcbiAgICAgICAgICAgIGRpYWxvZ2xvZyhcIkxpc3RBbGxcIiwgc2Vzc2lvbiwgc2VuZChyZXNwb25zZSkpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgcmVzcG9uc2UgPSBcIkZvdW5kIG5vIGRhdGEgaGF2aW5nIFxcXCJcIiArIGNhdCArIFwiXFxcIlwiXG4gICAgICAgICAgICBkaWFsb2dsb2coXCJMaXN0QWxsXCIsIHNlc3Npb24sIHNlbmQocmVzcG9uc2UpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIF0pO1xuXG4gIGRpYWxvZy5tYXRjaGVzKCdEZXNjcmliZScsIFtcbiAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgYXJncywgbmV4dCkge1xuICAgICAgdmFyIGlzQ29tYmluZWRJbmRleCA9IHt9O1xuICAgICAgdmFyIG9OZXdFbnRpdHk7XG4gICAgICAvLyBleHBlY3RpbmcgZW50aXR5IEExXG4gICAgICB2YXIgbWVzc2FnZSA9IHNlc3Npb24ubWVzc2FnZS50ZXh0O1xuICAgICAgZGVidWdsb2coXCJJbnRlbnQgOiBEZXNjcmliZVwiKTtcbiAgICAgIGRlYnVnbG9nKCdyYXc6ICcgKyBKU09OLnN0cmluZ2lmeShhcmdzLmVudGl0aWVzKSwgdW5kZWZpbmVkLCAyKTtcbiAgICAgIHZhciBmYWN0RW50aXR5ID0gYnVpbGRlci5FbnRpdHlSZWNvZ25pemVyLmZpbmRFbnRpdHkoYXJncy5lbnRpdGllcywgJ0ExJyk7XG4gICAgICB2YXIgZmFjdE9yQ2F0ID0gZmFjdEVudGl0eSAmJiBmYWN0RW50aXR5LmVudGl0eTtcbiAgICAgIHZhciBkb21haW5FbnRpdHkgPSBidWlsZGVyLkVudGl0eVJlY29nbml6ZXIuZmluZEVudGl0eShhcmdzLmVudGl0aWVzLCAnRCcpO1xuICAgICAgdmFyIGRvbWFpblMgPSBkb21haW5FbnRpdHkgJiYgZG9tYWluRW50aXR5LmVudGl0eTtcbiAgICAgIHZhciBmaWx0ZXJEb21haW4gPSB1bmRlZmluZWQ7XG4gICAgICBpZiAoZG9tYWluUykge1xuICAgICAgICBmaWx0ZXJEb21haW4gPSBMaXN0QWxsLmluZmVyRG9tYWluKHRoZU1vZGVsLCBkb21haW5TKTtcbiAgICAgICAgZGVidWdsb2coXCJnb3QgZG9tYWluXCIgKyBmaWx0ZXJEb21haW4pO1xuICAgICAgICBpZiAoIWZpbHRlckRvbWFpbikge1xuICAgICAgICAgIGRpYWxvZ2xvZyhcIkRlc2NyaWJlXCIsIHNlc3Npb24sIHNlbmQoXCJJIGRpZCBub3QgaW5mZXIgYSBkb21haW4gcmVzdHJpY3Rpb24gZnJvbSBcXFwiXCIgKyBkb21haW5TICsgXCJcXFwiLiBTcGVjaWZ5IGFuIGV4aXN0aW5nIGRvbWFpbi4gKExpc3QgYWxsIGRvbWFpbnMpIHRvIGdldCBleGFjdCBuYW1lcy5cXG5cIikpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBkZWJ1Z2xvZyhcImZhY3RPckNhdCBpc1wiICsgZmFjdE9yQ2F0KTtcbiAgICAgIGlmIChtZXRhd29yZHNEZXNjcmlwdGlvbnNbZmFjdE9yQ2F0LnRvTG93ZXJDYXNlKCldKSB7XG4gICAgICAgIC8vIGRvIHdlIGhhdmUgYSBmaWx0ZXIgP1xuICAgICAgICB2YXIgcHJlZml4ID0gXCJcIjtcbiAgICAgICAgaWYgKGZpbHRlckRvbWFpbikge1xuICAgICAgICAgIHByZWZpeCA9ICdcImluIGRvbWFpbiBcIicgKyBmaWx0ZXJEb21haW4gKyAnXCIgbWFrZSBubyBzZW5zZSB3aGVuIG1hdGNoaW5nIGEgbWV0YXdvcmQuXFxuJztcbiAgICAgICAgfVxuICAgICAgICBkZWJ1Z2xvZyhcInNob3dpbmcgbWV0YSByZXN1bHRcIik7XG4gICAgICAgIGRpYWxvZ2xvZyhcIkRlc2NyaWJlXCIsIHNlc3Npb24sIHNlbmQocHJlZml4ICsgJ1wiJyArIGZhY3RPckNhdCArICdcIiBpcyAnICsgbWV0YXdvcmRzRGVzY3JpcHRpb25zW2ZhY3RPckNhdC50b0xvd2VyQ2FzZSgpXSArIFwiXCIpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIGNhdGVnb3JpZXMgPSBbXTtcbiAgICAgIGlmIChXaGF0SXMuc3BsaXRBdENvbW1hQW5kKGZhY3RPckNhdCkubGVuZ3RoID4gMSkge1xuICAgICAgICBkaWFsb2dsb2coXCJEZXNjcmliZVwiLCBzZXNzaW9uLCBzZW5kKFwiV2hvYSwgaSBjYW4gb25seSBleHBsYWluIG9uZSB0aGluZyBhdCBhIHRpbWUsIG5vdCBcXFwiXCIgKyBmYWN0T3JDYXQgKyBcIlxcXCIuIFBsZWFzZSBhc2sgb25lIGF0IGEgdGltZS5cIikpO1xuICAgICAgICByZXR1cm47XG4gICAgICAgIC8vIGdldERvbWFpbnNGb3JDYXRlZ29yeVxuICAgICAgfVxuICAgICAgdmFyIGNhdGVnb3J5ID0gV2hhdElzLmFuYWx5emVDYXRlZ29yeShmYWN0T3JDYXQsIHRoZU1vZGVsLnJ1bGVzLCBtZXNzYWdlKTtcbiAgICAgIHZhciBjYXRSZXN1bHRzID0gW107XG4gICAgICBpZiAoY2F0ZWdvcnkpIHtcbiAgICAgICAgLy9UT0RPXG4gICAgICAgIGNhdFJlc3VsdHMgPSBEZXNjcmliZS5kZXNjcmliZUNhdGVnb3J5KGNhdGVnb3J5LGZpbHRlckRvbWFpbiwgdGhlTW9kZWwsbWVzc2FnZSk7XG4gICAgICB9XG4gICAgICB2YXIgcmVzRmFjdCA9IERlc2NyaWJlLmRlc2NyaWJlRmFjdEluRG9tYWluKGZhY3RPckNhdCwgZmlsdGVyRG9tYWluLHRoZU1vZGVsKTtcbiAgICAgIGlmKGNhdFJlc3VsdHMpIHtcbiAgICAgIHZhciBwcmVmaXhlZCA9IGNhdFJlc3VsdHMubWFwKHJlcyA9PlxuICAgICAgICBgJHtEZXNjcmliZS5zbG9wcHlPckV4YWN0KGZhY3RPckNhdCxjYXRlZ29yeSwgdGhlTW9kZWwpfSAgJHtyZXN9YCApO1xuICAgICAgfVxuICAgICAgaWYoY2F0UmVzdWx0cy5sZW5ndGgpIHtcbiAgICAgICAgcmVzRmFjdCA9IHByZWZpeGVkLmpvaW4oXCJcXG5cIik7ICsgXCJcXG5cIiArIHJlc0ZhY3Q7XG4gICAgICB9XG4gICAgICBkaWFsb2dsb2coXCJEZXNjcmliZVwiLCBzZXNzaW9uLCBzZW5kKHJlc0ZhY3QpKTtcbiAgICAgIC8qXG4gICAgICAgICAgdmFyIGFSZXMgPSBNb2RlbC5nZXRDYXRlZ29yaWVzRm9yRG9tYWluKHRoZU1vZGVsLCBkb21haW4pO1xuICAgICAgICAgICB2YXIgcmVzID0gcmVzdHJpY3RMb2dnZWRPbihzZXNzaW9uLCBhUmVzKS5qb2luKFwiO1xcblwiKTtcbiAgICAgICAgICBkaWFsb2dsb2coXCJMaXN0QWxsXCIsc2Vzc2lvbixzZW5kKFwibXkgY2F0ZWdvcmllcyBpbiBkb21haW4gXFxcIlwiICsgZG9tYWluICsgXCJcXFwiIGFyZSAuLi5cXG5cIiArIHJlcykpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGNhdGVnb3J5ID09PSBcImRvbWFpbnNcIikge1xuICAgICAgICB2YXIgcmVzID0gcmVzdHJpY3RMb2dnZWRPbihzZXNzaW9uLCB0aGVNb2RlbC5kb21haW5zKS5qb2luKFwiO1xcblwiKTtcbiAgICAgICAgZGlhbG9nbG9nKFwiTGlzdEFsbFwiLHNlc3Npb24sIHNlbmQoXCJteSBkb21haW5zIGFyZSAuLi5cXG5cIiArIHJlcykpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoY2F0ZWdvcnkgPT09IFwidG9vbHNcIikge1xuICAgICAgICB2YXIgcmVzID0gcmVzdHJpY3RMb2dnZWRPbihzZXNzaW9uLCB0aGVNb2RlbC50b29scykubWFwKGZ1bmN0aW9uIChvVG9vbCkge1xuICAgICAgICAgIHJldHVybiBvVG9vbC5uYW1lO1xuICAgICAgICB9KS5qb2luKFwiO1xcblwiKTtcbiAgICAgICAgZGlhbG9nbG9nKFwiTGlzdEFsbFwiLCBzZXNzaW9uLHNlbmQoXCJteSB0b29scyBhcmUgLi4uXFxuXCIgKyByZXMpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgKi9cblxuICAgICAgLypcbiAgICAgIHZhciBjYXRzID0gW107XG4gICAgICAgIHRyeSB7XG4gICAgICAgIGNhdHMgPSBXaGF0SXMuYW5hbHl6ZUNhdGVnb3J5TXVsdDIoY2F0ZWdvcnksIHRoZU1vZGVsLnJ1bGVzLCBtZXNzYWdlKTtcbiAgICAgICAgZGVidWdsb2coXCJoZXJlIGNhdHNcIiArIGNhdHMuam9pbihcIixcIikpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGlmKGUpIHtcbiAgICAgICAgICAgIGRlYnVnbG9nKFwiaGVyZSBleGNlcHRpb25cIiArIGUpO1xuICAgICAgICAgICAgZGlhbG9nbG9nKFwiV2hhdElzXCIsc2Vzc2lvbixzZW5kKCdJIGRvblxcJ3Qga25vdyBhbnl0aGluZyBhYm91dCBcIicgKyBjYXRlZ29yeSArICdcIignICsgZS50b1N0cmluZygpICsgJyknKSk7XG4gICAgICAgICAgICAvLyBuZXh0KCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCFjYXRzIHx8IChjYXRzLmxlbmd0aCA9PT0gMCkpIHtcbiAgICAgICAgZGlhbG9nbG9nKFwiTGlzdEFsbFwiLHNlc3Npb24sc2VuZCgnSSBkb25cXCd0IGtub3cgYW55dGhpbmcgYWJvdXQgXCInICsgY2F0ZWdvcnkgKyAnXCInKSk7XG4gICAgICAgIC8vIG5leHQoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIGNhdCA9IFwiXCI7XG4gICAgICBpZiggY2F0cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgY2F0ID0gY2F0c1swXTtcbiAgICAgIH1cbiAgICAgIGlmKCBjYXRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBkZWJ1Z2xvZygnY2F0ZWdvcnkgaWRlbnRpZmllZDonICsgY2F0KTtcbiAgICAgICAgaWYgKGExICYmIGExLmVudGl0eSkge1xuICAgICAgICAgIGRlYnVnbG9nKCdnb3QgZmlsdGVyOicgKyBhMS5lbnRpdHkpO1xuICAgICAgICAgIHZhciBjYXRlZ29yeVNldCA9IE1vZGVsLmdldEFsbFJlY29yZENhdGVnb3JpZXNGb3JUYXJnZXRDYXRlZ29yeSh0aGVNb2RlbCwgY2F0LCB0cnVlKTtcbiAgICAgICAgICB2YXIgcmVzdWx0MSA9IExpc3RBbGwubGlzdEFsbFdpdGhDb250ZXh0KGNhdCwgYTEuZW50aXR5LFxuICAgICAgICAgICAgdGhlTW9kZWwucnVsZXMsIHRoZU1vZGVsLnJlY29yZHMsIGNhdGVnb3J5U2V0KTtcbiAgICAgICAgICAvLyBUT0RPIGNsYXNzaWZ5aW5nIHRoZSBzdHJpbmcgdHdpY2UgaXMgYSB0ZXJyaWJsZSB3YXN0ZVxuICAgICAgICAgIGlmICghcmVzdWx0MS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGRlYnVnbG9nKCdnb2luZyBmb3IgaGF2aW5nJyk7XG4gICAgICAgICAgICB2YXIgY2F0ZWdvcnlTZXRGdWxsID0gTW9kZWwuZ2V0QWxsUmVjb3JkQ2F0ZWdvcmllc0ZvclRhcmdldENhdGVnb3J5KHRoZU1vZGVsLCBjYXQsIGZhbHNlKTtcbiAgICAgICAgICAgIHJlc3VsdDEgPSBMaXN0QWxsLmxpc3RBbGxIYXZpbmdDb250ZXh0KGNhdCwgYTEuZW50aXR5LCB0aGVNb2RlbC5ydWxlcyxcbiAgICAgICAgICAgICAgdGhlTW9kZWwucmVjb3JkcywgY2F0ZWdvcnlTZXRGdWxsKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZGVidWdsb2coJ2xpc3RhbGwgcmVzdWx0OicgKyBKU09OLnN0cmluZ2lmeShyZXN1bHQxKSk7XG4gICAgICAgICAgdmFyIGpvaW5yZXN1bHRzID0gcmVzdHJpY3RMb2dnZWRPbihzZXNzaW9uLCBMaXN0QWxsLmpvaW5SZXN1bHRzKHJlc3VsdDEpKTtcbiAgICAgICAgICBsb2dRdWVyeVdoYXRJcyhzZXNzaW9uLCAnTGlzdEFsbCcsIHJlc3VsdDEpO1xuICAgICAgICAgIGlmKGpvaW5yZXN1bHRzLmxlbmd0aCApe1xuICAgICAgICAgICAgZGlhbG9nbG9nKFwiTGlzdEFsbFwiLHNlc3Npb24sc2VuZChcInRoZSBcIiArIGNhdGVnb3J5ICsgXCIgZm9yIFwiICsgYTEuZW50aXR5ICsgXCIgYXJlIC4uLlxcblwiICsgam9pbnJlc3VsdHMuam9pbihcIjtcXG5cIikpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGlhbG9nbG9nKFwiTGlzdEFsbFwiLHNlc3Npb24sc2VuZChcImkgZGlkIG5vdCBmaW5kIGFueSBcIiArIGNhdGVnb3J5ICsgXCIgZm9yIFwiICsgYTEuZW50aXR5ICsgXCIuXFxuXCIgKyBqb2lucmVzdWx0cy5qb2luKFwiO1xcblwiKSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gbm8gZW50aXR5LCBlLmcuIGxpc3QgYWxsIGNvdW50cmllc1xuICAgICAgICAgIC8vXG4gICAgICAgICAgdmFyIGNhdGVnb3J5U2V0RnVsbCA9IE1vZGVsLmdldEFsbFJlY29yZENhdGVnb3JpZXNGb3JUYXJnZXRDYXRlZ29yeSh0aGVNb2RlbCwgY2F0LCBmYWxzZSk7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IExpc3RBbGwubGlzdEFsbEhhdmluZ0NvbnRleHQoY2F0LCBjYXQsIHRoZU1vZGVsLnJ1bGVzLCB0aGVNb2RlbC5yZWNvcmRzLCBjYXRlZ29yeVNldEZ1bGwpO1xuICAgICAgICAgIGxvZ1F1ZXJ5V2hhdElzKHNlc3Npb24sICdMaXN0QWxsJywgcmVzdWx0KTtcbiAgICAgICAgICBpZiAocmVzdWx0Lmxlbmd0aCkge1xuICAgICAgICAgICAgZGVidWdsb2coJ2xpc3RhbGwgcmVzdWx0OicgKyBKU09OLnN0cmluZ2lmeShyZXN1bHQpKTtcbiAgICAgICAgICAgIHZhciBqb2lucmVzdWx0cyA9IFtdO1xuICAgICAgICAgICAgZGVidWdsb2coXCJoZXJlIGlzIGNhdD5cIiArIGNhdCk7XG4gICAgICAgICAgICBpZihjYXQgIT09IFwiZXhhbXBsZSBxdWVzdGlvblwiKSB7XG4gICAgICAgICAgICAgIGpvaW5yZXN1bHRzID0gcmVzdHJpY3RMb2dnZWRPbihzZXNzaW9uLCBMaXN0QWxsLmpvaW5SZXN1bHRzKHJlc3VsdCkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgam9pbnJlc3VsdHMgPSBMaXN0QWxsLmpvaW5SZXN1bHRzKHJlc3VsdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgcmVzcG9uc2UgPSBcInRoZSBcIiArIGNhdGVnb3J5ICsgXCIgYXJlIC4uLlxcblwiICsgam9pbnJlc3VsdHMuam9pbihcIjtcXG5cIik7XG4gICAgICAgICAgICBkaWFsb2dsb2coXCJMaXN0QWxsXCIsc2Vzc2lvbixzZW5kKHJlc3BvbnNlKSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciByZXNwb25zZSA9IFwiRm91bmQgbm8gZGF0YSBoYXZpbmcgXFxcIlwiICsgY2F0ICsgXCJcXFwiXCJcbiAgICAgICAgICAgIGRpYWxvZ2xvZyhcIkxpc3RBbGxcIixzZXNzaW9uLHNlbmQocmVzcG9uc2UpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIG11bHRpcGxlIGNhdGVnb3JpZXNcbiAgICAgICAgZGVidWdsb2coJ2NhdGVnb3JpZXMgaWRlbnRpZmllZDonICsgY2F0cy5qb2luKFwiLFwiKSk7XG4gICAgICAgIGlmIChhMSAmJiBhMS5lbnRpdHkpIHtcbiAgICAgICAgICBkZWJ1Z2xvZygnZ290IGZpbHRlcjonICsgYTEuZW50aXR5KTtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgIHZhciBjYXRlZ29yeVNldCA9IE1vZGVsLmdldEFsbFJlY29yZENhdGVnb3JpZXNGb3JUYXJnZXRDYXRlZ29yaWVzKHRoZU1vZGVsLCBjYXRzLCB0cnVlKTtcbiAgICAgICAgICB9IGNhdGNoKGUpIHtcbiAgICAgICAgICAgICAgZGVidWdsb2coXCJoZXJlIGV4Y2VwdGlvblwiICsgZSk7XG4gICAgICAgICAgICAgIGRpYWxvZ2xvZyhcIldoYXRJc1wiLHNlc3Npb24sc2VuZCgnSSBjYW5ub3QgY29tYmluZSBcIicgKyBjYXRlZ29yeSArICcoJyArIGUudG9TdHJpbmcoKSArICcpJykpO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciByZXN1bHQxVCA9IExpc3RBbGwubGlzdEFsbFR1cGVsV2l0aENvbnRleHQoY2F0cywgYTEuZW50aXR5LFxuICAgICAgICAgICAgdGhlTW9kZWwucnVsZXMsIHRoZU1vZGVsLnJlY29yZHMsIGNhdGVnb3J5U2V0KTtcbiAgICAgICAgICAvLyBUT0RPIGNsYXNzaWZ5aW5nIHRoZSBzdHJpbmcgdHdpY2UgaXMgYSB0ZXJyaWJsZSB3YXN0ZVxuICAgICAgICAgIGlmICghcmVzdWx0MVQubGVuZ3RoKSB7XG4gICAgICAgICAgICBkZWJ1Z2xvZygnZ29pbmcgZm9yIGhhdmluZycpO1xuICAgICAgICAgICAgdmFyIGNhdGVnb3J5U2V0RnVsbCA9IE1vZGVsLmdldEFsbFJlY29yZENhdGVnb3JpZXNGb3JUYXJnZXRDYXRlZ29yaWVzKHRoZU1vZGVsLCBjYXRzLCBmYWxzZSk7XG4gICAgICAgICAgICByZXN1bHQxVCA9IExpc3RBbGwubGlzdEFsbFR1cGVsSGF2aW5nQ29udGV4dChjYXRzLCBhMS5lbnRpdHksIHRoZU1vZGVsLnJ1bGVzLFxuICAgICAgICAgICAgICB0aGVNb2RlbC5yZWNvcmRzLCBjYXRlZ29yeVNldEZ1bGwpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBkZWJ1Z2xvZygnbGlzdGFsbCByZXN1bHQ6JyArIEpTT04uc3RyaW5naWZ5KHJlc3VsdDFUKSk7XG4gICAgICAgICAgdmFyIGpvaW5yZXN1bHRzID0gcmVzdHJpY3RMb2dnZWRPbihzZXNzaW9uLCBMaXN0QWxsLmpvaW5SZXN1bHRzVHVwZWwocmVzdWx0MVQpKTtcbiAgICAgICAgICBsb2dRdWVyeVdoYXRJc1R1cGVsKHNlc3Npb24sICdMaXN0QWxsJywgcmVzdWx0MVQpO1xuICAgICAgICAgIGlmKGpvaW5yZXN1bHRzLmxlbmd0aCApe1xuICAgICAgICAgICAgZGlhbG9nbG9nKFwiTGlzdEFsbFwiLHNlc3Npb24sc2VuZChcInRoZSBcIiArIGNhdGVnb3J5ICsgXCIgZm9yIFwiICsgYTEuZW50aXR5ICsgXCIgYXJlIC4uLlxcblwiICsgam9pbnJlc3VsdHMuam9pbihcIjtcXG5cIikpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGlhbG9nbG9nKFwiTGlzdEFsbFwiLHNlc3Npb24sc2VuZChcImkgZGlkIG5vdCBmaW5kIGFueSBcIiArIGNhdGVnb3J5ICsgXCIgZm9yIFwiICsgYTEuZW50aXR5ICsgXCIuXFxuXCIgKyBqb2lucmVzdWx0cy5qb2luKFwiO1xcblwiKSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gbm8gZW50aXR5LCBlLmcuIGxpc3QgYWxsIGNvdW50cmllc1xuICAgICAgICAgIC8vXG4gICAgICAgICAgdmFyIGNhdGVnb3J5U2V0RnVsbCA9IHt9IGFzIHsgW2tleSA6IHN0cmluZ10gOiBib29sZWFufTtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgY2F0ZWdvcnlTZXRGdWxsID0gTW9kZWwuZ2V0QWxsUmVjb3JkQ2F0ZWdvcmllc0ZvclRhcmdldENhdGVnb3JpZXModGhlTW9kZWwsIGNhdHMsIGZhbHNlKTtcbiAgICAgICAgICB9IGNhdGNoKGUpIHtcbiAgICAgICAgICAgICAgZGVidWdsb2coXCJoZXJlIGV4Y2VwdGlvblwiICsgZSk7XG4gICAgICAgICAgICAgIGRpYWxvZ2xvZyhcIldoYXRJc1wiLHNlc3Npb24sc2VuZCgnSSBjYW5ub3QgY29tYmluZSBcIicgKyBjYXRlZ29yeSArICcoJyArIGUudG9TdHJpbmcoKSArICcpJykpO1xuICAgICAgICAgIC8vIG5leHQoKTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgcmVzdWx0VCA9IExpc3RBbGwubGlzdEFsbFR1cGVsSGF2aW5nQ29udGV4dChjYXRzLCBcIlxcXCJcIiArIGNhdHMuam9pbihcIlxcXCIgXFxcIlwiKSArIFwiXFxcIlwiLCB0aGVNb2RlbC5ydWxlcywgdGhlTW9kZWwucmVjb3JkcywgY2F0ZWdvcnlTZXRGdWxsKTtcbiAgICAgICAgICBsb2dRdWVyeVdoYXRJc1R1cGVsKHNlc3Npb24sICdMaXN0QWxsJywgcmVzdWx0VCk7XG4gICAgICAgICAgaWYgKHJlc3VsdFQubGVuZ3RoKSB7XG4gICAgICAgICAgICBkZWJ1Z2xvZygnbGlzdGFsbCByZXN1bHQ6JyArIEpTT04uc3RyaW5naWZ5KHJlc3VsdFQpKTtcbiAgICAgICAgICAgIHZhciBqb2lucmVzdWx0cyA9IFtdO1xuICAgICAgICAgICAgZGVidWdsb2coXCJoZXJlIGlzIGNhdD5cIiArIGNhdHMuam9pbihcIiwgXCIpKTtcbiAgICAgICAgICAgIGlmKGNhdCAhPT0gXCJleGFtcGxlIHF1ZXN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgam9pbnJlc3VsdHMgPSByZXN0cmljdExvZ2dlZE9uKHNlc3Npb24sIExpc3RBbGwuam9pblJlc3VsdHNUdXBlbChyZXN1bHRUKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBqb2lucmVzdWx0cyA9IExpc3RBbGwuam9pblJlc3VsdHNUdXBlbChyZXN1bHRUKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciByZXNwb25zZSA9IFwidGhlIFwiICsgY2F0ZWdvcnkgKyBcIiBhcmUgLi4uXFxuXCIgKyBqb2lucmVzdWx0cy5qb2luKFwiO1xcblwiKTtcbiAgICAgICAgICAgIGRpYWxvZ2xvZyhcIkxpc3RBbGxcIixzZXNzaW9uLHNlbmQocmVzcG9uc2UpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHJlc3BvbnNlID0gXCJGb3VuZCBubyBkYXRhIGhhdmluZyBcXFwiXCIgKyBjYXQgKyBcIlxcXCJcIlxuICAgICAgICAgICAgZGlhbG9nbG9nKFwiTGlzdEFsbFwiLHNlc3Npb24sc2VuZChyZXNwb25zZSkpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgICAqL1xuICAgIH1cbiAgXSk7XG5cblxuICBkaWFsb2cubWF0Y2hlcygnTGlzdEFsbEJpbk9wJywgW1xuICAgIGZ1bmN0aW9uIChzZXNzaW9uLCBhcmdzLCBuZXh0KSB7XG4gICAgICB2YXIgaXNDb21iaW5lZEluZGV4ID0ge307XG4gICAgICB2YXIgb05ld0VudGl0eTtcbiAgICAgIC8vIGV4cGVjdGluZyBlbnRpdHkgQTFcbiAgICAgIHZhciBtZXNzYWdlID0gc2Vzc2lvbi5tZXNzYWdlLnRleHQ7XG4gICAgICBkZWJ1Z2xvZyhcIkludGVudCA6IExpc3RBbGxCaW5PcFwiKTtcbiAgICAgIGRlYnVnbG9nKCdyYXc6ICcgKyBKU09OLnN0cmluZ2lmeShhcmdzLmVudGl0aWVzKSwgdW5kZWZpbmVkLCAyKTtcbiAgICAgIHZhciBjYXRlZ29yeUVudGl0eSA9IGJ1aWxkZXIuRW50aXR5UmVjb2duaXplci5maW5kRW50aXR5KGFyZ3MuZW50aXRpZXMsICdjYXRlZ29yeScpO1xuICAgICAgdmFyIGNhdGVnb3J5V29yZCA9IGNhdGVnb3J5RW50aXR5LmVudGl0eTtcbiAgICAgIHZhciBvcEVudGl0eSA9IGJ1aWxkZXIuRW50aXR5UmVjb2duaXplci5maW5kRW50aXR5KGFyZ3MuZW50aXRpZXMsICdvcGVyYXRvcicpO1xuICAgICAgdmFyIG9wZXJhdG9yV29yZCA9IG9wRW50aXR5ICYmICBvcEVudGl0eS5lbnRpdHk7XG4gICAgICAvLyBjYXRlZ29yaXplIGFzIG9wZXJhdG9yID9cbiAgICAgIHZhciBmaWx0ZXJEb21haW5FbnRpdHkgPSAgYnVpbGRlci5FbnRpdHlSZWNvZ25pemVyLmZpbmRFbnRpdHkoYXJncy5lbnRpdGllcywgJ2RvbWFpbicpO1xuICAgICAgdmFyIGZpbHRlckRvbWFpblMgPSBmaWx0ZXJEb21haW5FbnRpdHkgJiYgZmlsdGVyRG9tYWluRW50aXR5LmVudGl0eTtcbiAgICAgIHZhciBvcGVyYXRvciA9IFdoYXRJcy5hbmFseXplT3BlcmF0b3Iob3BlcmF0b3JXb3JkLCB0aGVNb2RlbC5ydWxlcywgbWVzc2FnZSk7XG4gICAgICB2YXIgY2F0ZWdvcnkgPSBXaGF0SXMuYW5hbHl6ZUNhdGVnb3J5KGNhdGVnb3J5V29yZCwgdGhlTW9kZWwucnVsZXMsIG1lc3NhZ2UpO1xuICAgICAgdmFyIG9wZXJhdG9yQXJncyA9IE1vZGVsLmdldE9wZXJhdG9yKHRoZU1vZGVsLCBvcGVyYXRvcik7XG4gICAgICB2YXIgYTIgPSBidWlsZGVyLkVudGl0eVJlY29nbml6ZXIuZmluZEVudGl0eShhcmdzLmVudGl0aWVzLCAnQTInKTtcbiAgICAgIGlmICghb3BlcmF0b3IpIHtcbiAgICAgICAgdmFyIHMgPSBcIlVua25vd24gb3BlcmF0b3IgXCIgKyBvcGVyYXRvcldvcmQgKyBcIiwgdGhpcyBpcyBhIG1vZGVsIGJ1ZywgY2hlY2sgb3BlcmF0b3JzLmpzb24gYW5kIGludGVudHMuanNvblwiO1xuICAgICAgICBkaWFsb2dsb2coXCJMaXN0QWxsQmluT3BcIiwgc2Vzc2lvbiwgc2VuZChcIm91Y2gsIHRoaXMgd2FzIGluIGludGVybmFsIGVycm9yLiBSZWNvdmVyaW5nIGZyb20gYSB3ZWlyZCBvcGVyYXRvciBcXFwiXCJcbiAgICAgICAgICArIG9wZXJhdG9yV29yZCArIFwiXFxcIlxcblwiKSk7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihzKTtcbiAgICAgIH1cbiAgICAgIHZhciBmaWx0ZXJEb21haW4gPSB1bmRlZmluZWQ7XG4gICAgICBpZiAoZmlsdGVyRG9tYWluUykge1xuICAgICAgICBkZWJ1Z2xvZyhcImZvdW5kIGEgZG9tYWluU3RyaW5nXCIgKyBmaWx0ZXJEb21haW5TKTtcbiAgICAgICAgZmlsdGVyRG9tYWluID0gTGlzdEFsbC5pbmZlckRvbWFpbih0aGVNb2RlbCwgZmlsdGVyRG9tYWluUyk7XG4gICAgICAgIGRlYnVnbG9nKFwiZ290IGRvbWFpblwiICsgZmlsdGVyRG9tYWluKTtcbiAgICAgICAgaWYgKCFmaWx0ZXJEb21haW4pIHtcbiAgICAgICAgICBkaWFsb2dsb2coXCJEZXNjcmliZVwiLCBzZXNzaW9uLCBzZW5kKFwiSSBkaWQgbm90IGluZmVyIGEgZG9tYWluIHJlc3RyaWN0aW9uIGZyb20gXFxcIlwiICsgZmlsdGVyRG9tYWluUyArIFwiXFxcIi4gU3BlY2lmeSBhbiBleGlzdGluZyBkb21haW4uIChMaXN0IGFsbCBkb21haW5zKSB0byBnZXQgZXhhY3QgbmFtZXMuXFxuXCIpKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIGZyYWdtZW50ID0gYTIgJiYgYTIuZW50aXR5O1xuICAgICAgZnJhZ21lbnQgPSBCcmVha0Rvd24udHJpbVF1b3RlZChCcmVha0Rvd24udHJpbVF1b3RlZFNwYWNlZChmcmFnbWVudCkpO1xuICAgICAgZGVidWdsb2coXCJmcmFnbWVudCBhZnRlciB0cmltbWluZyBcXFwiXCIgKyBmcmFnbWVudCArIFwiXFxcIlwiKTtcbiAgICAgIGlmIChjYXRlZ29yeVdvcmQgPT09IFwiY2F0ZWdvcmllc1wiKSB7XG4gICAgICAgIC8vIGRvIHdlIGhhdmUgYSBmaWx0ZXI/XG4gICAgICAgIHZhciBhRmlsdGVyZWRDYXRlZ29yaWVzID0gTGlzdEFsbC5maWx0ZXJTdHJpbmdMaXN0QnlPcChvcGVyYXRvckFyZ3MsIGZyYWdtZW50LCB0aGVNb2RlbC5jYXRlZ29yeSk7XG4gICAgICAgIGlmKGZpbHRlckRvbWFpbikge1xuICAgICAgICAgIHZhciBjYXRzRm9yRG9tYWluID0gTW9kZWwuZ2V0Q2F0ZWdvcmllc0ZvckRvbWFpbih0aGVNb2RlbCxmaWx0ZXJEb21haW4pO1xuICAgICAgICAgIGFGaWx0ZXJlZENhdGVnb3JpZXMgPSBfLmludGVyc2VjdGlvbihhRmlsdGVyZWRDYXRlZ29yaWVzLGNhdHNGb3JEb21haW4pO1xuICAgICAgICB9XG4gICAgICAgIHJlcyA9IHJlc3RyaWN0TG9nZ2VkT24oc2Vzc2lvbiwgYUZpbHRlcmVkQ2F0ZWdvcmllcykuam9pbihcIjtcXG5cIik7XG4gICAgICAgIGlmIChyZXMubGVuZ3RoKSB7XG4gICAgICAgICAgaWYoZmlsdGVyRG9tYWluKSB7XG4gICAgICAgICAgICBkaWFsb2dsb2coXCJMaXN0QWxsQmluT3BcIiwgc2Vzc2lvbiwgc2VuZChgbXkgY2F0ZWdvcmllcyAke29wZXJhdG9yfSBcIiR7ZnJhZ21lbnR9XCIgaW4gZG9tYWluIFwiJHtmaWx0ZXJEb21haW59XCIgYXJlIC4uLlxcbmAgKyByZXMpKTtcbiAgICAgICAgICB9ZWxzZSB7XG4gICAgICAgICAgICBkaWFsb2dsb2coXCJMaXN0QWxsQmluT3BcIiwgc2Vzc2lvbiwgc2VuZChgbXkgY2F0ZWdvcmllcyAke29wZXJhdG9yfSBcIiR7ZnJhZ21lbnR9XCIgYXJlIC4uLlxcbmAgKyByZXMpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGlhbG9nbG9nKFwiTGlzdEFsbEJpbk9wXCIsIHNlc3Npb24sIHNlbmQoJ0kgaGF2ZSBubyBjYXRlZ29yaWVzICcgKyBvcGVyYXRvciArICcgXCInICsgZnJhZ21lbnQgKyAnXCInKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoY2F0ZWdvcnlXb3JkID09PSBcImRvbWFpbnNcIikge1xuICAgICAgICB2YXIgYVJlcyA9IExpc3RBbGwuZmlsdGVyU3RyaW5nTGlzdEJ5T3Aob3BlcmF0b3JBcmdzLCBmcmFnbWVudCwgdGhlTW9kZWwuZG9tYWlucyk7XG4gICAgICAgIHJlcyA9IHJlc3RyaWN0TG9nZ2VkT24oc2Vzc2lvbiwgYVJlcykuam9pbihcIjtcXG5cIik7XG4gICAgICAgIGlmIChyZXMubGVuZ3RoKSB7XG4gICAgICAgICAgZGlhbG9nbG9nKFwiTGlzdEFsbEJpbk9wXCIsIHNlc3Npb24sIHNlbmQoXCJteSBkb21haW5zIFwiICsgb3BlcmF0b3IgKyAnIFwiJyArIGZyYWdtZW50ICsgJ1wiIGFyZSAuLi5cXG4nICsgcmVzKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGlhbG9nbG9nKFwiTGlzdEFsbEJpbk9wXCIsIHNlc3Npb24sIHNlbmQoJ0kgaGF2ZSBubyBkb21haW5zICcgKyBvcGVyYXRvciArICcgXCInICsgZnJhZ21lbnQgKyAnXCInKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoY2F0ZWdvcnlXb3JkID09PSBcInRvb2xzXCIpIHtcbiAgICAgICAgdmFyIGFSZXMgPSBMaXN0QWxsLmZpbHRlclN0cmluZ0xpc3RCeU9wKG9wZXJhdG9yQXJncywgZnJhZ21lbnQsIHRoZU1vZGVsLnRvb2xzLm1hcChcbiAgICAgICAgICBmdW5jdGlvbiAob1Rvb2wpIHsgcmV0dXJuIG9Ub29sLm5hbWU7IH0pKTtcbiAgICAgICAgdmFyIHJlcyA9IHJlc3RyaWN0TG9nZ2VkT24oc2Vzc2lvbiwgYVJlcykuam9pbihcIjtcXG5cIik7XG4gICAgICAgIGlmIChyZXMubGVuZ3RoKSB7XG4gICAgICAgICAgZGlhbG9nbG9nKFwiTGlzdEFsbEJpbk9wXCIsIHNlc3Npb24sIHNlbmQoXCJteSB0b29scyBcIiArIG9wZXJhdG9yICsgJyBcIicgKyBmcmFnbWVudCArICdcIiBhcmUgLi4uXFxuJyArIHJlcykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRpYWxvZ2xvZyhcIkxpc3RBbGxCaW5PcFwiLCBzZXNzaW9uLCBzZW5kKFwiSSBoYXZlIG5vIHRvb2xzIFwiICsgb3BlcmF0b3IgKyAnIFwiJyArIGZyYWdtZW50ICsgJ1wiJykpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGVsc2UgeyAvLyBjYXRlZ29yeSBpcyBjYXRlZ29yeVxuICAgICAgICB2YXIgY2F0ID0gV2hhdElzLmFuYWx5emVDYXRlZ29yeShjYXRlZ29yeVdvcmQsIHRoZU1vZGVsLnJ1bGVzLCBtZXNzYWdlKTtcbiAgICAgICAgaWYgKCFjYXQpIHtcbiAgICAgICAgICBkaWFsb2dsb2coXCJMaXN0QWxsQmluT3BcIiwgc2Vzc2lvbiwgc2VuZCgnSSBkb25cXCd0IGtub3cgYW55dGhpbmcgYWJvdXQgXCInICsgY2F0ZWdvcnlXb3JkICsgJ1wiJykpO1xuICAgICAgICAgIC8vIG5leHQoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZGVidWdsb2coJ2NhdGVnb3J5IGlkZW50aWZpZWQ6JyArIGNhdCk7XG4gICAgICAgIHZhciBhUmVzID0gTGlzdEFsbC5nZXRDYXRlZ29yeU9wRmlsdGVyQXNEaXN0aW5jdFN0cmluZ3Mob3BlcmF0b3JBcmdzLCBmcmFnbWVudCwgY2F0ZWdvcnksIHRoZU1vZGVsLnJlY29yZHMsIGZpbHRlckRvbWFpbik7XG4gICAgICAgIHZhciByZXMgPSByZXN0cmljdExvZ2dlZE9uKHNlc3Npb24sIGFSZXMpLmpvaW4oXCI7XFxuXCIpO1xuICAgICAgICB2YXIgaW5maXhFeHBsYWluID0gJydcbiAgICAgICAgaWYgKCFMaXN0QWxsLmxpa2VseVBsdXJhbERpZmYoY2F0ZWdvcnksIGNhdGVnb3J5V29yZCkpIHtcbiAgICAgICAgICBpbmZpeEV4cGxhaW4gPSAnKFwiJyArIGNhdGVnb3J5ICsgJ1wiKSc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlcy5sZW5ndGgpIHtcbiAgICAgICAgICBpZiAoZmlsdGVyRG9tYWluKSB7XG4gICAgICAgICAgICBkaWFsb2dsb2coXCJMaXN0QWxsQmluT3BcIiwgc2Vzc2lvbiwgc2VuZChgbXkgJHtjYXRlZ29yeVdvcmR9JHtpbmZpeEV4cGxhaW59ICR7b3BlcmF0b3J9IFwiJHtmcmFnbWVudH1cIiBpbiBkb21haW4gXCIke2ZpbHRlckRvbWFpbn1cIiBhcmUgLi4uXFxuYCArIHJlcykpO1xuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRpYWxvZ2xvZyhcIkxpc3RBbGxCaW5PcFwiLCBzZXNzaW9uLCBzZW5kKGBteSAke2NhdGVnb3J5V29yZH0ke2luZml4RXhwbGFpbn0gJHtvcGVyYXRvcn0gXCIke2ZyYWdtZW50fVwiIGFyZSAuLi5cXG5gICsgcmVzKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRpYWxvZ2xvZyhcIkxpc3RBbGxCaW5PcFwiLCBzZXNzaW9uLCBzZW5kKCdJIGhhdmUgbm8gJyArIGNhdGVnb3J5V29yZCArIGluZml4RXhwbGFpbiArICcgJyArIG9wZXJhdG9yICsgJyBcIicgKyBmcmFnbWVudCArICdcIicpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICBdKTtcblxuICBkaWFsb2cubWF0Y2hlcygnVHJhaW5NZScsIFtcbiAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgYXJncywgbmV4dCkge1xuICAgICAgdmFyIGlzQ29tYmluZWRJbmRleCA9IHt9O1xuICAgICAgdmFyIG9OZXdFbnRpdHk7XG4gICAgICAvLyBleHBlY3RpbmcgZW50aXR5IEExXG4gICAgICB2YXIgbWVzc2FnZSA9IHNlc3Npb24ubWVzc2FnZS50ZXh0O1xuICAgICAgZGVidWdsb2coXCJJbnRlbnQgOiBUcmFpblwiKTtcbiAgICAgIGRlYnVnbG9nKCdyYXc6ICcgKyBKU09OLnN0cmluZ2lmeShhcmdzLmVudGl0aWVzKSwgdW5kZWZpbmVkLCAyKTtcbiAgICAgIHZhciBjYXRlZ29yeUVudGl0eSA9IGJ1aWxkZXIuRW50aXR5UmVjb2duaXplci5maW5kRW50aXR5KGFyZ3MuZW50aXRpZXMsICdjYXRlZ29yaWVzJyk7XG4gICAgICBpZiAobWVzc2FnZS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoXCJrcm9ub3NcIikgPj0gMCB8fCBtZXNzYWdlLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihcImtsaW5nb25cIikgPj0gMCkge1xuICAgICAgICBkaWFsb2dsb2coXCJUcmFpbk1lXCIsIHNlc3Npb24sIHNlbmQoZ2V0UmFuZG9tUmVzdWx0KGFUcmFpbk5vS2xpbmdvbikpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIHJlcyA9IGdldFJhbmRvbVJlc3VsdChhVHJhaW5SZXBsaWVzKTtcbiAgICAgIGRpYWxvZ2xvZyhcIlRyYWluTWVcIiwgc2Vzc2lvbiwgc2VuZChyZXMpKTtcbiAgICB9XG4gIF0pO1xuXG4gIGRpYWxvZy5tYXRjaGVzKCdUb29Mb25nJywgW1xuICAgIGZ1bmN0aW9uIChzZXNzaW9uLCBhcmdzLCBuZXh0KSB7XG4gICAgICB2YXIgaXNDb21iaW5lZEluZGV4ID0ge307XG4gICAgICB2YXIgb05ld0VudGl0eTtcbiAgICAgIC8vIGV4cGVjdGluZyBlbnRpdHkgQTFcbiAgICAgIHZhciBtZXNzYWdlID0gc2Vzc2lvbi5tZXNzYWdlLnRleHQ7XG4gICAgICBkZWJ1Z2xvZyhcIkludGVudCA6IFRvb0xvbmdcIik7XG4gICAgICBkZWJ1Z2xvZygncmF3OiAnICsgSlNPTi5zdHJpbmdpZnkoYXJncy5lbnRpdGllcyksIHVuZGVmaW5lZCwgMik7XG4gICAgICB2YXIgY2F0ZWdvcnlFbnRpdHkgPSBidWlsZGVyLkVudGl0eVJlY29nbml6ZXIuZmluZEVudGl0eShhcmdzLmVudGl0aWVzLCAnY2F0ZWdvcmllcycpO1xuICAgICAgZGlhbG9nbG9nKFwiVG9vTG9uZ1wiLCBzZXNzaW9uLCBzZW5kKGdldFJhbmRvbVJlc3VsdChhUmVzcG9uc2VzT25Ub29Mb25nKSkpO1xuICAgIH1cbiAgXSk7XG5cblxuICBkaWFsb2cubWF0Y2hlcygnV3JvbmcnLCBbXG4gICAgZnVuY3Rpb24gKHNlc3Npb24sIGFyZ3MsIG5leHQpIHtcbiAgICAgIGRpYWxvZ0xvZ2dlcih7XG4gICAgICAgIHNlc3Npb246IHNlc3Npb24sXG4gICAgICAgIGludGVudDogXCJXcm9uZ1wiLFxuICAgICAgICByZXNwb25zZTogJzxiZWdpbiB1cGRvd24+J1xuICAgICAgfSk7XG4gICAgICBzZXNzaW9uLmJlZ2luRGlhbG9nKCcvdXBkb3duJywgc2Vzc2lvbi51c2VyRGF0YS5jb3VudCk7XG4gICAgfSxcbiAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgcmVzdWx0cywgbmV4dCkge1xuICAgICAgdmFyIGFsYXJtID0gc2Vzc2lvbi5kaWFsb2dEYXRhLmFsYXJtO1xuICAgICAgbmV4dCgpO1xuICAgIH0sXG4gICAgZnVuY3Rpb24gKHNlc3Npb24sIHJlc3VsdHMpIHtcbiAgICAgIHNlc3Npb24uc2VuZChnZXRSYW5kb21SZXN1bHQoYUJhY2tGcm9tVHJhaW5pbmcpKTsgLy8gICsgSlNPTi5zdHJpbmdpZnkocmVzdWx0cykpO1xuICAgICAgLy9zZXNzaW9uLnNlbmQoJ2VuZCBvZiB3cm9uZycpO1xuICAgIH1cbiAgXSk7XG5cbiAgZGlhbG9nLm1hdGNoZXMoJ0V4aXQnLCBbXG4gICAgZnVuY3Rpb24gKHNlc3Npb24sIGFyZ3MsIG5leHQpIHtcbiAgICAgIGRlYnVnbG9nKCdleGl0IDonKTtcbiAgICAgIGRlYnVnbG9nKCdleGl0JyArIEpTT04uc3RyaW5naWZ5KGFyZ3MuZW50aXRpZXMpKTtcbiAgICAgIGRpYWxvZ0xvZ2dlcih7XG4gICAgICAgIHNlc3Npb246IHNlc3Npb24sXG4gICAgICAgIGludGVudDogXCJFeGl0XCIsXG4gICAgICAgIHJlc3BvbnNlOiAneW91IGFyZSBpbiBhIGxvZ2ljIGxvb3AnXG4gICAgICB9KTtcbiAgICAgIHNlc3Npb24uc2VuZChcInlvdSBhcmUgaW4gYSBsb2dpYyBsb29wIFwiKTtcbiAgICB9XG4gIF0pO1xuICBkaWFsb2cubWF0Y2hlcygnSGVscCcsIFtcbiAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgYXJncywgbmV4dCkge1xuICAgICAgZGVidWdsb2coJ2hlbHAgOicpO1xuICAgICAgZGVidWdsb2coJ2hlbHAnKTtcbiAgICAgIHNlc3Npb24uc2VuZChcIkkga25vdyBhYm91dCAuLi4uIDxjYXRlZ29yaWVzPj5cIik7XG4gICAgfVxuICBdKTtcblxuICAvLyBBZGQgaW50ZW50IGhhbmRsZXJzXG4gIGRpYWxvZy5tYXRjaGVzKCd0cmFpbicsIFtcbiAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgYXJncywgbmV4dCkge1xuICAgICAgZGVidWdsb2coJ3RyYWluJyk7XG4gICAgICAvLyBSZXNvbHZlIGFuZCBzdG9yZSBhbnkgZW50aXRpZXMgcGFzc2VkIGZyb20gTFVJUy5cbiAgICAgIHZhciB0aXRsZSA9IGJ1aWxkZXIuRW50aXR5UmVjb2duaXplci5maW5kRW50aXR5KGFyZ3MuZW50aXRpZXMsICdidWlsdGluLmFsYXJtLnRpdGxlJyk7XG4gICAgICB2YXIgdGltZSA9IGJ1aWxkZXIuRW50aXR5UmVjb2duaXplci5yZXNvbHZlVGltZShhcmdzLmVudGl0aWVzKTtcbiAgICAgIHZhciBhbGFybSA9IHNlc3Npb24uZGlhbG9nRGF0YS5hbGFybSA9IHtcbiAgICAgICAgdGl0bGU6IHRpdGxlID8gdGl0bGUuZW50aXR5IDogbnVsbCxcbiAgICAgICAgdGltZXN0YW1wOiB0aW1lID8gdGltZS5nZXRUaW1lKCkgOiBudWxsXG4gICAgICB9O1xuICAgICAgLy8gUHJvbXB0IGZvciB0aXRsZVxuICAgICAgaWYgKCFhbGFybS50aXRsZSkge1xuICAgICAgICBkaWFsb2dMb2dnZXIoe1xuICAgICAgICAgIHNlc3Npb246IHNlc3Npb24sXG4gICAgICAgICAgaW50ZW50OiBcInRyYWluXCIsXG4gICAgICAgICAgcmVzcG9uc2U6ICdXaGF0IGZhY3Qgd291bGQgeW91IGxpa2UgdG8gdHJhaW4/J1xuICAgICAgICB9KTtcbiAgICAgICAgYnVpbGRlci5Qcm9tcHRzLnRleHQoc2Vzc2lvbiwgJ1doYXQgZmFjdCB3b3VsZCB5b3UgbGlrZSB0byB0cmFpbj8nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5leHQoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGZ1bmN0aW9uIChzZXNzaW9uLCByZXN1bHRzLCBuZXh0KSB7XG4gICAgICB2YXIgYWxhcm0gPSBzZXNzaW9uLmRpYWxvZ0RhdGEuYWxhcm07XG4gICAgICBpZiAocmVzdWx0cy5yZXNwb25zZSkge1xuICAgICAgICBhbGFybS50aXRsZSA9IHJlc3VsdHMucmVzcG9uc2U7XG4gICAgICB9XG5cbiAgICAgIC8vIFByb21wdCBmb3IgdGltZSAodGl0bGUgd2lsbCBiZSBibGFuayBpZiB0aGUgdXNlciBzYWlkIGNhbmNlbClcbiAgICAgIGlmIChhbGFybS50aXRsZSAmJiAhYWxhcm0udGltZXN0YW1wKSB7XG5cblxuICAgICAgICBidWlsZGVyLlByb21wdHMudGltZShzZXNzaW9uLCAnV2hhdCB0aW1lIHdvdWxkIHlvdSBsaWtlIHRvIHNldCB0aGUgYWxhcm0gZm9yPycpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV4dCgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZnVuY3Rpb24gKHNlc3Npb24sIHJlc3VsdHMpIHtcbiAgICAgIHZhciBhbGFybSA9IHNlc3Npb24uZGlhbG9nRGF0YS5hbGFybTtcbiAgICAgIGlmIChyZXN1bHRzLnJlc3BvbnNlKSB7XG4gICAgICAgIHZhciB0aW1lID0gYnVpbGRlci5FbnRpdHlSZWNvZ25pemVyLnJlc29sdmVUaW1lKFtyZXN1bHRzLnJlc3BvbnNlXSk7XG4gICAgICAgIGFsYXJtLnRpbWVzdGFtcCA9IHRpbWUgPyB0aW1lLmdldFRpbWUoKSA6IG51bGw7XG4gICAgICB9XG4gICAgICAvLyBTZXQgdGhlIGFsYXJtIChpZiB0aXRsZSBvciB0aW1lc3RhbXAgaXMgYmxhbmsgdGhlIHVzZXIgc2FpZCBjYW5jZWwpXG4gICAgICBpZiAoYWxhcm0udGl0bGUgJiYgYWxhcm0udGltZXN0YW1wKSB7XG4gICAgICAgIC8vIFNhdmUgYWRkcmVzcyBvZiB3aG8gdG8gbm90aWZ5IGFuZCB3cml0ZSB0byBzY2hlZHVsZXIuXG4gICAgICAgIGFsYXJtLmFkZHJlc3MgPSBzZXNzaW9uLm1lc3NhZ2UuYWRkcmVzcztcbiAgICAgICAgLy9hbGFybXNbYWxhcm0udGl0bGVdID0gYWxhcm07XG5cbiAgICAgICAgLy8gU2VuZCBjb25maXJtYXRpb24gdG8gdXNlclxuICAgICAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKGFsYXJtLnRpbWVzdGFtcCk7XG4gICAgICAgIHZhciBpc0FNID0gZGF0ZS5nZXRIb3VycygpIDwgMTI7XG4gICAgICAgIHNlc3Npb24uc2VuZCgnQ3JlYXRpbmcgYWxhcm0gbmFtZWQgXCIlc1wiIGZvciAlZC8lZC8lZCAlZDolMDJkJXMnLFxuICAgICAgICAgIGFsYXJtLnRpdGxlLFxuICAgICAgICAgIGRhdGUuZ2V0TW9udGgoKSArIDEsIGRhdGUuZ2V0RGF0ZSgpLCBkYXRlLmdldEZ1bGxZZWFyKCksXG4gICAgICAgICAgaXNBTSA/IGRhdGUuZ2V0SG91cnMoKSA6IGRhdGUuZ2V0SG91cnMoKSAtIDEyLCBkYXRlLmdldE1pbnV0ZXMoKSwgaXNBTSA/ICdhbScgOiAncG0nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlc3Npb24uc2VuZCgnT2suLi4gbm8gcHJvYmxlbS4nKTtcbiAgICAgIH1cbiAgICB9XG4gIF0pO1xuXG4gIGRpYWxvZy5vbkRlZmF1bHQoZnVuY3Rpb24gKHNlc3Npb24pIHtcbiAgICBsb2dRdWVyeShzZXNzaW9uLCBcIm9uRGVmYXVsdFwiKTtcbiAgICB2YXIgZWxpemEgPSBnZXRFbGl6YUJvdChnZXRDb252ZXJzYXRpb25JZChzZXNzaW9uKSk7XG4gICAgdmFyIHJlcGx5ID0gZWxpemEudHJhbnNmb3JtKHNlc3Npb24ubWVzc2FnZS50ZXh0KTtcbiAgICBkaWFsb2dsb2coXCJlbGl6YVwiLCBzZXNzaW9uLCBzZW5kKHJlcGx5KSk7XG4gICAgLy9uZXcgRWlsemFib3RcbiAgICAvL3Nlc3Npb24uc2VuZChcIkkgZG8gbm90IHVuZGVyc3RhbmQgdGhpcyBhdCBhbGxcIik7XG4gICAgLy9idWlsZGVyLkRpYWxvZ0FjdGlvbi5zZW5kKCdJXFwnbSBzb3JyeSBJIGRpZG5cXCd0IHVuZGVyc3RhbmQuIEkgY2FuIG9ubHkgc2hvdyBzdGFydCBhbmQgcmluZycpO1xuICB9KTtcblxuICAvKlxuICAvLyBWZXJ5IHNpbXBsZSBhbGFybSBzY2hlZHVsZXJcbiAgdmFyIGFsYXJtcyA9IHt9O1xuICBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG5vdyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgIGZvciAodmFyIGtleSBpbiBhbGFybXMpIHtcbiAgICAgIHZhciBhbGFybSA9IGFsYXJtc1trZXldO1xuICAgICAgaWYgKG5vdyA+PSBhbGFybS50aW1lc3RhbXApIHtcbiAgICAgICAgdmFyIG1zZyA9IG5ldyBidWlsZGVyLk1lc3NhZ2UoKVxuICAgICAgICAgIC5hZGRyZXNzKGFsYXJtLmFkZHJlc3MpXG4gICAgICAgICAgLnRleHQoJ0hlcmVcXCdzIHlvdXIgXFwnJXNcXCcgYWxhcm0uJywgYWxhcm0udGl0bGUpO1xuICAgICAgICBib3Quc2VuZChtc2cpO1xuICAgICAgICBkZWxldGUgYWxhcm1zW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9LCAxNTAwMCk7XG4gICovXG59XG5cbmlmIChtb2R1bGUpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgU2ltcGxlVXBEb3duUmVjb2duaXplcjogU2ltcGxlVXBEb3duUmVjb2duaXplcixcbiAgICBhUmVzcG9uc2VzT25Ub29Mb25nOiBhUmVzcG9uc2VzT25Ub29Mb25nLFxuICAgIG1ldGF3b3Jkc0Rlc2NyaXB0aW9ucyA6IG1ldGF3b3Jkc0Rlc2NyaXB0aW9ucyxcbiAgICBtYWtlQm90OiBtYWtlQm90XG4gIH07XG59XG4iLCIvKipcbiAqIFRoZSBib3QgaW1wbGVtZW50YXRpb25cbiAqXG4gKiBJbnN0YW50aWF0ZSBhcHNzaW5nIGEgY29ubmVjdG9yIHZpYVxuICogbWFrZUJvdFxuICpcbiAqL1xuLyoqXG4gKiBAZmlsZVxuICogQG1vZHVsZSBqZnNlYi5mZGV2c3RhcnQuc21hcnRkaWFsb2dcbiAqIEBjb3B5cmlnaHQgKGMpIDIwMTYgR2VyZCBGb3JzdG1hbm5cbiAqL1xuLy9kZWNsYXJlIG1vZHVsZSAnZWxpemFib3QnIHsgfTtcbi8vZGVjbGFyZSBtb2R1bGUgJ3dpbnN0b24tcGcnIHsgfTtcbi8vZGVsY2FyZSBtb2R1bGUgJ3dpbnN0b24nIHt9O1xuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgYnVpbGRlciA9IHJlcXVpcmUoJ2JvdGJ1aWxkZXInKTtcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJyk7XG52YXIgTWF0Y2ggPSByZXF1aXJlKCcuLi9tYXRjaC9tYXRjaCcpO1xudmFyIEFuYWx5emUgPSByZXF1aXJlKCcuLi9tYXRjaC9hbmFseXplJyk7XG52YXIgQnJlYWtEb3duID0gcmVxdWlyZSgnLi4vbWF0Y2gvYnJlYWtkb3duJyk7XG52YXIgV2hhdElzID0gcmVxdWlyZSgnLi4vbWF0Y2gvd2hhdGlzJyk7XG52YXIgTGlzdEFsbCA9IHJlcXVpcmUoJy4uL21hdGNoL2xpc3RhbGwnKTtcbnZhciBEZXNjcmliZSA9IHJlcXVpcmUoJy4uL21hdGNoL2Rlc2NyaWJlJyk7XG52YXIgVXRpbHMgPSByZXF1aXJlKCcuLi91dGlscy91dGlscycpO1xudmFyIF8gPSByZXF1aXJlKCdsb2Rhc2gnKTtcbnZhciBEaWFsb2dMb2dnZXIgPSByZXF1aXJlKCcuLi91dGlscy9kaWFsb2dsb2dnZXInKTtcbnZhciBwcm9jZXNzID0gcmVxdWlyZSgncHJvY2VzcycpO1xudmFyIGRidXJsID0gcHJvY2Vzcy5lbnYuREFUQUJBU0VfVVJMIHx8IFwiXCI7XG52YXIgcGdsb2NhbHVybCA9IFwicG9zdGdyZXM6Ly9qb2U6YWJjZGVmQGxvY2FsaG9zdDo1NDMyL2Fib3RcIjtcbnZhciBkYnVybCA9IHByb2Nlc3MuZW52LkRBVEFCQVNFX1VSTCB8fCBwZ2xvY2FsdXJsO1xudmFyIHBnID0gcmVxdWlyZSgncGcnKTtcbnZhciBvID0gcGc7XG5vLmRlZmF1bHRzLnNzbCA9IHRydWU7XG52YXIgZGlhbG9nTG9nZ2VyID0gRGlhbG9nTG9nZ2VyLmxvZ2dlcihcInNtYXJ0Ym90XCIsIGRidXJsLCBwZyk7XG5mdW5jdGlvbiBzZW5kKG8pIHsgcmV0dXJuIG87IH1cbjtcbmZ1bmN0aW9uIGRpYWxvZ2xvZyhpbnRlbnQsIHNlc3Npb24sIHJlc3BvbnNlKSB7XG4gICAgdmFyIHNSZXNwb25zZTtcbiAgICB2YXIgc0FjdGlvbjtcbiAgICBpZiAodHlwZW9mIHJlc3BvbnNlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHNBY3Rpb24gPSBcIlwiO1xuICAgICAgICBzUmVzcG9uc2UgPSByZXNwb25zZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHZhciBhTWVzc2FnZSA9IHJlc3BvbnNlO1xuICAgICAgICB2YXIgaU1lc3NhZ2UgPSBhTWVzc2FnZS50b01lc3NhZ2UoKTtcbiAgICAgICAgc1Jlc3BvbnNlID0gaU1lc3NhZ2UudGV4dDtcbiAgICAgICAgc0FjdGlvbiA9IChpTWVzc2FnZS5lbnRpdGllcyAmJiBpTWVzc2FnZS5lbnRpdGllc1swXSkgPyAoSlNPTi5zdHJpbmdpZnkoaU1lc3NhZ2UuZW50aXRpZXMgJiYgaU1lc3NhZ2UuZW50aXRpZXNbMF0pKSA6IFwiXCI7XG4gICAgfVxuICAgIGRpYWxvZ0xvZ2dlcih7XG4gICAgICAgIGludGVudDogaW50ZW50LFxuICAgICAgICBzZXNzaW9uOiBzZXNzaW9uLFxuICAgICAgICByZXNwb25zZTogc1Jlc3BvbnNlLFxuICAgICAgICBhY3Rpb246IHNBY3Rpb25cbiAgICB9KTtcbiAgICBzZXNzaW9uLnNlbmQocmVzcG9uc2UpO1xufVxuLy9jb25zdCBwZ0xvZ2dlciA9IG5ldyBQZ0xvZ2dlcih7XG4vLyAgbmFtZTogJ3Rlc3QtbG9nZ2VyJyxcbi8vICBsZXZlbDogJ2RlYnVnJyxcbi8vICBjb25uU3RyaW5nOiAncG9zdGdyZXM6Ly91YnVudHVAbG9jYWxob3N0OjU0MzIvY2lyY2xlX3Rlc3QnLFxuLy8gIHRhYmxlTmFtZTogJ3dpbnN0b25fbG9ncycsXG4vL30pO1xuLy93aW5zdG9uLmFkZCh3aW5zdG9uLnRyYW5zcG9ydHMuRmlsZSwgeyBmaWxlbmFtZTogJ3dpbnN0b25fb3V0LmxvZycsIHRpbWVzdGFtcCA6IHRydWUgfSk7XG4vLyAgd2luc3Rvbi5yZW1vdmUod2luc3Rvbi50cmFuc3BvcnRzLkNvbnNvbGUpO1xuLy93aW5zdG9uLmFkZChwZ0xvZ2dlcik7XG4vKlxuY29uc3QgbG9nZ2VyID0gbmV3IHdpbnN0b24uTG9nZ2VyKHtcbiAgdHJhbnNwb3J0czogW1xuICAgIG5ldyB3aW5zdG9uLnRyYW5zcG9ydHMuQ29uc29sZSh7XG4gICAgICBjb2xvcjogdHJ1ZSxcbiAgICAgIHRpbWVzdGFtcDogdHJ1ZSxcbiAgICB9KSxcbiAgICBwZ0xvZ2dlcixcbiAgXVxufSk7XG4qL1xuLy9wZ0xvZ2dlci5pbml0VGFibGUoZG9uZSk7XG52YXIgZWxpemFib3QgPSByZXF1aXJlKCcuLi9leHRlcm4vZWxpemFib3QvZWxpemFib3QuanMnKTtcbi8vaW1wb3J0ICogYXMgZWxpemFib3QgZnJvbSAnZWxpemFib3QnO1xudmFyIGRlYnVnbG9nID0gZGVidWcoJ3NtYXJ0ZGlhbG9nJyk7XG52YXIgUGxhaW5SZWNvZ25pemVyID0gcmVxdWlyZSgnLi9wbGFpbnJlY29nbml6ZXInKTtcbi8vdmFyIGJ1aWxkZXIgPSByZXF1aXJlKCdib3RidWlsZGVyJyk7XG52YXIgZGlzcGF0Y2hlciA9IHJlcXVpcmUoJy4uL21hdGNoL2Rpc3BhdGNoZXIuanMnKS5kaXNwYXRjaGVyO1xuZnVuY3Rpb24gZ2V0Q29udmVyc2F0aW9uSWQoc2Vzc2lvbikge1xuICAgIHJldHVybiBzZXNzaW9uLm1lc3NhZ2UgJiZcbiAgICAgICAgc2Vzc2lvbi5tZXNzYWdlLmFkZHJlc3MgJiZcbiAgICAgICAgc2Vzc2lvbi5tZXNzYWdlLmFkZHJlc3MuY29udmVyc2F0aW9uLmlkO1xufVxudmFyIGVsaXphYm90cyA9IHt9O1xuZnVuY3Rpb24gZ2V0RWxpemFCb3QoaWQpIHtcbiAgICBpZiAoIWVsaXphYm90c1tpZF0pIHtcbiAgICAgICAgZWxpemFib3RzW2lkXSA9IHtcbiAgICAgICAgICAgIGFjY2VzczogbmV3IERhdGUoKSxcbiAgICAgICAgICAgIGVsaXphYm90OiBuZXcgZWxpemFib3QoKVxuICAgICAgICB9O1xuICAgIH1cbiAgICBlbGl6YWJvdHNbaWRdLmFjY2VzcyA9IG5ldyBEYXRlKCk7XG4gICAgcmV0dXJuIGVsaXphYm90c1tpZF0uZWxpemFib3Q7XG59XG52YXIgbmV3RmxvdyA9IHRydWU7XG52YXIgTW9kZWwgPSByZXF1aXJlKCcuLi9tb2RlbC9tb2RlbCcpO1xudmFyIEV4ZWNTZXJ2ZXIgPSByZXF1aXJlKCcuLi9leGVjL2V4ZWNzZXJ2ZXInKTtcbnZhciB0aGVEZWZhdWx0TW9kZWwgPSBNb2RlbC5sb2FkTW9kZWxzKCk7XG52YXIgbW9kZWxzID0ge307XG5mdW5jdGlvbiBsb2FkTW9kZWwobW9kZWxQYXRoKSB7XG4gICAgbW9kZWxQYXRoID0gbW9kZWxQYXRoIHx8IFwiXCI7XG4gICAgaWYgKCFtb2RlbHNbbW9kZWxQYXRoXSkge1xuICAgICAgICBtb2RlbHNbbW9kZWxQYXRoXSA9IE1vZGVsLmxvYWRNb2RlbHMobW9kZWxQYXRoKTtcbiAgICB9XG4gICAgcmV0dXJuIG1vZGVsc1ttb2RlbFBhdGhdO1xufVxuaWYgKG5ld0Zsb3cpIHtcbn1cbmVsc2Uge1xufVxuZnVuY3Rpb24gaXNBbm9ueW1vdXModXNlcmlkKSB7XG4gICAgcmV0dXJuIHVzZXJpZC5pbmRleE9mKFwiYW5vOlwiKSA9PT0gMDtcbn1cbmZ1bmN0aW9uIHJlc3RyaWN0TG9nZ2VkT24oc2Vzc2lvbiwgYXJyKSB7XG4gICAgdmFyIHVzZXJpZCA9IHNlc3Npb24ubWVzc2FnZS5hZGRyZXNzXG4gICAgICAgICYmIHNlc3Npb24ubWVzc2FnZS5hZGRyZXNzLnVzZXJcbiAgICAgICAgJiYgc2Vzc2lvbi5tZXNzYWdlLmFkZHJlc3MudXNlci5pZCB8fCBcIlwiO1xuICAgIGlmIChwcm9jZXNzLmVudi5BQk9UX0VNQUlMX1VTRVIgJiYgaXNBbm9ueW1vdXModXNlcmlkKSkge1xuICAgICAgICBpZiAoYXJyLmxlbmd0aCA8IDYpIHtcbiAgICAgICAgICAgIHJldHVybiBhcnI7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGxlbiA9IGFyci5sZW5ndGg7XG4gICAgICAgIHZhciByZXMgPSBhcnIuc2xpY2UoMCwgTWF0aC5taW4oTWF0aC5tYXgoTWF0aC5mbG9vcihhcnIubGVuZ3RoIC8gMyksIDcpLCBhcnIubGVuZ3RoKSk7XG4gICAgICAgIGlmICh0eXBlb2YgYXJyWzBdID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICB2YXIgZGVsdGEgPSBsZW4gLSByZXMubGVuZ3RoO1xuICAgICAgICAgICAgcmVzLnB1c2goXCIuLi4gYW5kIFwiICsgZGVsdGEgKyBcIiBtb3JlIGVudHJpZXMgZm9yIHJlZ2lzdGVyZWQgdXNlcnNcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG4gICAgcmV0dXJuIGFycjtcbn1cbi8qXG5leHBvcnQgY2xhc3MgU2ltcGxlUmVjb2duaXplciBpbXBsZW1lbnRzIGJ1aWxkZXIuSUludGVudFJlY29nbml6ZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcblxuICB9XG5cbiAgcmVjb2duaXplKGNvbnRleHQ6IGJ1aWxkZXIuSVJlY29nbml6ZUNvbnRleHQsIGNhbGxiYWNrOiAoZXJyOiBFcnJvciwgcmVzdWx0OiBidWlsZGVyLklJbnRlbnRSZWNvZ25pemVyUmVzdWx0KSA9PiB2b2lkKTogdm9pZCB7XG4gICAgdmFyIHUgPSB7fSBhcyBidWlsZGVyLklJbnRlbnRSZWNvZ25pemVyUmVzdWx0O1xuXG4gICAgZGVidWdsb2coXCJyZWNvZ25pemluZyBcIiArIGNvbnRleHQubWVzc2FnZS50ZXh0KTtcbiAgICBpZiAoY29udGV4dC5tZXNzYWdlLnRleHQuaW5kZXhPZihcInN0YXJ0XCIpID49IDApIHtcbiAgICAgIHUuaW50ZW50ID0gXCJTaG93RW50aXR5XCI7XG4gICAgICB1LnNjb3JlID0gMC45O1xuICAgICAgdmFyIGUxID0ge30gYXMgYnVpbGRlci5JRW50aXR5O1xuICAgICAgZTEuc3RhcnRJbmRleCA9IFwic3RhcnQgXCIubGVuZ3RoO1xuICAgICAgZTEuZW5kSW5kZXggPSBjb250ZXh0Lm1lc3NhZ2UudGV4dC5sZW5ndGg7XG4gICAgICBlMS5zY29yZSA9IDAuMztcbiAgICAgIHUuZW50aXRpZXMgPSBbZTFdO1xuICAgICAgY2FsbGJhY2sodW5kZWZpbmVkLCB1KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoY29udGV4dC5tZXNzYWdlLnRleHQuaW5kZXhPZihcInRyYWluXCIpID49IDApIHtcbiAgICAgIHUuaW50ZW50ID0gXCJ0cmFpblwiO1xuICAgICAgdS5zY29yZSA9IDAuOTtcbiAgICAgIHZhciBlMSA9IHt9IGFzIGJ1aWxkZXIuSUVudGl0eTtcbiAgICAgIGUxLnN0YXJ0SW5kZXggPSBcInRyYWluIFwiLmxlbmd0aDtcbiAgICAgIGUxLmVuZEluZGV4ID0gY29udGV4dC5tZXNzYWdlLnRleHQubGVuZ3RoO1xuICAgICAgZTEuc2NvcmUgPSAwLjM7XG4gICAgICB1LmVudGl0aWVzID0gW2UxXTtcbiAgICAgIGNhbGxiYWNrKHVuZGVmaW5lZCwgdSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChjb250ZXh0Lm1lc3NhZ2UudGV4dC5pbmRleE9mKFwibGVhcm5cIikgPj0gMCkge1xuICAgICAgdS5pbnRlbnQgPSBcImxlYXJuXCI7XG4gICAgICB1LnNjb3JlID0gMC45O1xuICAgICAgdmFyIGUxID0ge30gYXMgYnVpbGRlci5JRW50aXR5O1xuICAgICAgZTEudHlwZSA9IFwidHJhaW5GYWN0XCI7XG4gICAgICBlMS5zdGFydEluZGV4ID0gXCJ0cmFpbiBcIi5sZW5ndGg7XG4gICAgICBlMS5lbmRJbmRleCA9IGNvbnRleHQubWVzc2FnZS50ZXh0Lmxlbmd0aDtcbiAgICAgIGUxLnNjb3JlID0gMC4zO1xuICAgICAgdS5lbnRpdGllcyA9IFtlMV07XG4gICAgICBjYWxsYmFjayh1bmRlZmluZWQsIHUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoY29udGV4dC5tZXNzYWdlLnRleHQuaW5kZXhPZihcImhlbHBcIikgPj0gMCkge1xuICAgICAgdS5pbnRlbnQgPSBcImhlbHBcIjtcbiAgICAgIHUuc2NvcmUgPSAwLjk7XG4gICAgICB2YXIgZTEgPSB7fSBhcyBidWlsZGVyLklFbnRpdHk7XG4gICAgICBlMS5zdGFydEluZGV4ID0gXCJ0cmFpbiBcIi5sZW5ndGg7XG4gICAgICBlMS5lbmRJbmRleCA9IGNvbnRleHQubWVzc2FnZS50ZXh0Lmxlbmd0aDtcbiAgICAgIGUxLnNjb3JlID0gMC4zO1xuICAgICAgdS5lbnRpdGllcyA9IFtlMV07XG4gICAgICBjYWxsYmFjayh1bmRlZmluZWQsIHUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoY29udGV4dC5tZXNzYWdlLnRleHQuaW5kZXhPZihcImV4aXRcIikgPj0gMCkge1xuICAgICAgdS5pbnRlbnQgPSBcImV4aXRcIjtcbiAgICAgIHUuc2NvcmUgPSAwLjk7XG4gICAgICB2YXIgZTEgPSB7fSBhcyBidWlsZGVyLklFbnRpdHk7XG4gICAgICBlMS5zdGFydEluZGV4ID0gXCJleGl0IFwiLmxlbmd0aDtcbiAgICAgIGUxLmVuZEluZGV4ID0gY29udGV4dC5tZXNzYWdlLnRleHQubGVuZ3RoO1xuICAgICAgZTEuc2NvcmUgPSAwLjM7XG4gICAgICB1LmVudGl0aWVzID0gW2UxXTtcbiAgICAgIGNhbGxiYWNrKHVuZGVmaW5lZCwgdSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChjb250ZXh0Lm1lc3NhZ2UudGV4dC5pbmRleE9mKFwid3JvbmdcIikgPj0gMCkge1xuICAgICAgdS5pbnRlbnQgPSBcIndyb25nXCI7XG4gICAgICB1LnNjb3JlID0gMC45O1xuICAgICAgdmFyIGUxID0ge30gYXMgYnVpbGRlci5JRW50aXR5O1xuICAgICAgZTEuc3RhcnRJbmRleCA9IFwiZXhpdCBcIi5sZW5ndGg7XG4gICAgICBlMS5lbmRJbmRleCA9IGNvbnRleHQubWVzc2FnZS50ZXh0Lmxlbmd0aDtcbiAgICAgIGUxLnNjb3JlID0gMC4zO1xuICAgICAgdS5lbnRpdGllcyA9IFtlMV07XG4gICAgICBjYWxsYmFjayh1bmRlZmluZWQsIHUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkZWJ1Z2xvZygncmVjb2duaXppbmcgbm90aGluZycpO1xuICAgIHUuaW50ZW50ID0gXCJOb25lXCI7XG4gICAgdS5zY29yZSA9IDAuMTtcbiAgICB2YXIgZTEgPSB7fSBhcyBidWlsZGVyLklFbnRpdHk7XG4gICAgZTEuc3RhcnRJbmRleCA9IFwiZXhpdCBcIi5sZW5ndGg7XG4gICAgZTEuZW5kSW5kZXggPSBjb250ZXh0Lm1lc3NhZ2UudGV4dC5sZW5ndGg7XG4gICAgZTEuc2NvcmUgPSAwLjE7XG4gICAgdS5lbnRpdGllcyA9IFtdO1xuICAgIGNhbGxiYWNrKHVuZGVmaW5lZCwgdSk7XG4gIH1cbn1cbiovXG52YXIgYVRyYWluUmVwbGllcyA9IFtcIlRoYW5rIHlvdSBmb3Igc2hhcmluZyB0aGlzIHN1Z2dlc3Rpb24gd2l0aCB1c1wiLFxuICAgIFwiVGhhbmsgZm9yIGZvciB0aGlzIHZhbHVhYmxlIGluZm9ybWF0aW9uLlwiLFxuICAgIFwiVGhhbmsgZm9yIGZvciB0aGlzIGludGVyZXN0aW5nIGZhY3QhXCIsXG4gICAgXCJUaGF0cyBhIHBsZXRob3JpYSBvZiBpbmZvcm1hdGlvbi5cIixcbiAgICBcIlRoYXQncyBhIG51Z2dldCBvZiBpbmZvcm1hdGlvbi5cIixcbiAgICBcIkxvdmVseSwgSSBtYXkgY29uc2lkZXIgeW91IGlucHV0LlwiLFxuICAgIFwiV2VsbCBkb25lLCBhbnl0aGluZyBtb3JlIHRvIGxldCBtZSBrbm93P1wiLFxuICAgIFwiSSBkbyBhcHByZWNpYXRlIHlvdXIgdGVhY2hpbmcgYW5kIG15IGxlYXJuaW5nIGV4cGVyaWVuY2UsIG9yIHdhcyBpdCB0aGUgb3RoZXIgd2F5IHJvdW5kP1wiLFxuICAgIFwiWW91ciBoZWxwZnVsIGlucHV0IGhhcyBiZWVuIHN0b3JlZCBpbiBzb21lIGR1c3R5IGNvcm5lciBvZiB0aGUgV29ybGQgd2lkZSB3ZWIhXCIsXG4gICAgXCJUaGFuayB5b3UgZm9yIG15IGxlYXJuaW5nIGV4cGVyaWVuY2UhXCIsXG4gICAgXCJJIGhhdmUgaW5jb3Jwb3JhdGVkIHlvdXIgdmFsdWFibGUgc3VnZ2VzdGlvbiBpbiB0aGUgd2lzZG9tIG9mIHRoZSBpbnRlcm5ldFwiXG5dO1xudmFyIGFUcmFpbkRpYWxvZyA9IGFUcmFpblJlcGxpZXM7XG52YXIgYVRyYWluRXhpdEhpbnQgPSBbXG4gICAgXCJcXG50eXBlIFxcXCJkb25lXFxcIiB3aGVuIHlvdSBhcmUgZG9uZSB0cmFpbmluZyBtZS5cIixcbiAgICBcIlwiLFxuICAgIFwiXCIsXG4gICAgXCJcIixcbiAgICBcIlxcbnJlbWVtYmVyLCB5b3UgYXJlIHN0dWNrIGhlcmUgaW5zdHJ1Y3RpbmcgbWUsIHR5cGUgXFxcImRvbmVcXFwiIHRvIHJldHVybi5cIixcbiAgICBcIlwiXTtcbnZhciBhRW50ZXJUcmFpbiA9IFtcIlNvIHlvdSB0aGluayB0aGlzIGlzIHdyb25nPyBZb3UgY2FuIG9mZmVyIHlvdXIgYWR2aXNlIGhlcmUuXFxuIFR5cGUgXFxcImRvbmVcXFwiIGlmIHlvdSBhcmUgZG9uZSB3aXRoIGluc3RydWN0aW5nIG1lXCIsXG4gICAgXCJGZWVsIGZyZWUgdG8gb2ZmZXIgbWUgeW91ciBiZXR0ZXIgc29sdXRpb24gaGVyZS5cXG5cIixcbiAgICBcIlNvbWUgc2F5IFxcXCJUaGUgc2VjcmV0IHRvIGhhcHBpbmVzcyBpcyB0byBsb3dlciB5b3VyIGV4cGVjdGF0aW9ucyB0byB0aGUgcG9pbnQgdGhleSBhcmUgYWxyZWFkeSBtZXQuXFxcIiwgXFxudCBpZiB5b3UgY291bGQgaGVscCBtZSB0byBiZWNvbWRlIGJldHRlciwgaW5zdHJ1Y3QgbWUuXCIsXG4gICAgXCJGZWVsIGZyZWUgdG8gb2ZmZXIgbWUgeW91ciBiZXR0ZXIgc29sdXRpb24gaGVyZS5cXG4gVHlwZSBcXFwiZG9uZVxcXCIgaWYgeW91IGFyZSBkb25lIHdpdGggaW5zdHJ1Y3RpbmcgbWVcIixcbiAgICBcIkZlZWwgZnJlZSB0byBvZmZlciBtZSB5b3VyIGJldHRlciBzb2x1dGlvbiBoZXJlLlxcbiBUeXBlIFxcXCJkb25lXFxcIiBpZiB5b3UgYXJlIGRvbmUgd2l0aCBpbnN0cnVjdGluZyBtZVwiLFxuXTtcbnZhciBhQmFja0Zyb21UcmFpbmluZyA9IFtcbiAgICBcIlB1dWgsIGJhY2sgZnJvbSB0cmFpbmluZyEgTm93IGZvciB0aGUgZWFzeSBwYXJ0IC4uLlwiLFxuICAgIFwiTGl2ZSBhbmQgZG9uJ3QgbGVhcm4sIHRoYXQncyB1cy4gTmFhaCwgd2UnbGwgc2VlLlwiLFxuICAgIFwiVGhlIHNlY3JldCB0byBoYXBwaW5lc3MgaXMgdG8gbG93ZXIgeW91ciBleHBlY3RhdGlvbnMgdG8gdGhlIHBvaW50IHRoZXkgYXJlIGFscmVhZHkgbWV0LlwiLFxuICAgIFwiVGhhbmtzIGZvciBoYXZpbmcgdGhpcyBsZWN0dXJlIHNlc3Npb24sIG5vdyBiYWNrIHRvIG91ciB1c3VhbCBzZWxmLlwiXG5dO1xudmFyIGFUcmFpbk5vS2xpbmdvbiA9IFtcbiAgICBcIkhlIHdobyBtYXN0ZXIgdGhlIGRhcmsgYXJ0cyBvZiBTQVAgbXVzdCBub3QgZHdlbGwgaW4gdGhlIGVhcnRobHkgcmVhbG1zIG9mIFN0YXJ0IFRyZWsuXCIsXG4gICAgXCJTQVAgaXMgYSBjbG91ZCBjb21wYW55LCBub3QgYSBzcGFjZSBjb21wYW55LlwiLFxuICAgIFwiVGhlIGRlcHRoIG9mIFIvMyBhcmUgZGVlcGVyIHRoYW4gRGVlcCBTcGFjZSA0Mi5cIixcbiAgICBcIk15IGJyYWlucG93ZXIgaXMgZnVsbHkgYWJzb3JiZWQgd2l0aCBtYXN0ZXJpbmcgb3RoZXIgcmVhbG1zLlwiLFxuICAgIFwiRm9yIHRoZSB3b3NhcCwgdGhlIHNreSBpcyB0aGUgbGltaXQuIEZlZWwgZnJlZSB0byBjaGVjayBvdXQgbmFzYS5nb3YgLlwiLFxuICAgIFwiVGhlIGZ1dHVyZSBpcyBTQVAgb3IgSUJNIGJsdWUsIG5vdCBzcGFjZSBibGFjay5cIixcbiAgICBcIlRoYXQncyBsZWZ0IHRvIHNvbWUgbXVza3kgZnV0dXJlLlwiXG5dO1xuZXhwb3J0cy5hUmVzcG9uc2VzT25Ub29Mb25nID0gW1xuICAgIFwiWW91ciBpbnB1dCBzaG91bGQgYmUgZWxvcXVlbnQgaW4gaXQncyBicmV2aXR5LiBUaGlzIG9uZSB3YXMgdG9vIGxvbmcuXCIsXG4gICAgXCJteSB3aXNkb20gaXMgc2V2ZXJseSBib3VuZCBieSBteSBsaW1pdGVkIGlucHV0IHByb2Nlc3NpbmcgY2FwYWJpbGl0aWVzLiBDb3VsZCB5b3UgZm9ybXVsYXRlIGEgc2hvcnRlciBpbnB1dD8gVGhhbmsgeW91LlwiLFxuICAgIFwiVGhlIGxlbmd0aCBvZiB5b3UgaW5wdXQgaW5kaWNhdGVzIHlvdSBwcm9iYWJseSBrbm93IG1vcmUgYWJvdXQgdGhlIHRvcGljIHRoYW4gbWU/IENhbiBpIGh1bWJseSBhc2sgeW91IHRvIGZvcm11bGF0ZSBhIHNob3J0ZXIgcXVlc3Rpb24/XCIsXG4gICAgJ1xcXCJXaGF0IGV2ZXIgeW91IHdhbnQgdG8gdGVhY2gsIGJlIGJyaWVmXFxcIiAoSG9yYWNlKS4gV2hpbGUgdGhpcyBkb2VzIG5vdCBhbHdheXMgYXBwbGllcyB0byBteSBhbnN3ZXJzLCBpdCBpcyByZXF1aXJlIGZvciB5b3VyIHF1ZXN0aW9ucy4gUGxlYXNlIHRyeSBhZ2FpbiB3aXRoIGEgcmVmaW5lZCBxdWVzdGlvbnMuJyxcbiAgICAnSSB1bmRlcnN0YW5kIG1vcmUgdGhhbiA0LWxldHRlciB3b3JkcywgYnV0IG5vdCBtb3JlIHRoYW4gMjAgd29yZCBzZW50ZW5jZXMuIFBsZWFzZSB0cnkgdG8gc2hvcnRlbiB5b3VyIGlucHV0LicsXG4gICAgJ3RoZSBza3kgaXMgdGhlIGxpbWl0PyBBaXIgZm9yY2UgbWVtYmVyIG9yIG5vdCwgeW91IGNhbiBhc2sgbG9uZ2VyIHF1ZXN0aW9ucyB0aGFuIFxcXCJ0aGUgc2t5XFxcIiwgYnV0IG5vdCB0aGlzIGxvbmcnLFxuICAgICdNeSBhbnN3ZXJzIG1heSBiZSBleGhhdXN0aXZlLCBidXQgSSB1bmRlcnN0YW5kIG1vcmUgdGhhbiA0LWxldHRlciB3b3JkcywgYnV0IG5vdCBtb3JlIHRoYW4gMjAgd29yZCBzZW50ZW5jZXMuIFNvcnJ5LicsXG4gICAgJ091ciBjb252ZXJzYXRpb24gbXVzdCBiZSBoaWdobHkgYXNzeW1tZXRyaWM6IG15IGFuc3dlcnMgbWF5IGJlIHZlcmJvc2UgYW5kIGV4aGF1c3RpdmUgYW5kIGZ1enp5LCBxdWVzdGlvbnMgYW5kIGlucHV0IG11c3QgYmUgYnJpZWYuIFRyeSB0byByZWZvcm11bGF0ZSBpdCcsXG5dO1xuZXhwb3J0cy5tZXRhd29yZHNEZXNjcmlwdGlvbnMgPSB7XG4gICAgXCJjYXRlZ29yeVwiOiBcImFuIGF0dHJpYnV0ZSBvZiBhIHJlY29yZCBpbiBhIG1vZGVsLCBleGFtcGxlOiBhIFBsYW5ldCBoYXMgYSBcXFwibmFtZVxcXCIgYXR0cmlidXRlXCIsXG4gICAgXCJkb21haW5cIjogXCJhIGdyb3VwIG9mIGZhY3RzIHdoaWNoIGFyZSB0eXBpY2FsbHkgdW5yZWxhdGVkXCIsXG4gICAgXCJrZXlcIjogXCJhbiBhdHRyaWJ1dGUgdmFsdWUgKG9mIGEgY2F0ZWdvcnkpIHdoaWNoICBpcyB1bmlxdWUgZm9yIHRoZSByZWNvcmRcIixcbiAgICBcInRvb2xcIjogXCJpcyBwb3RlbnRpYWx5IGNvbW1hbmQgdG8gZXhlY3V0ZVwiLFxuICAgIFwicmVjb3JkXCI6IFwiYSBzcGVjaWZpYyBzZXQgb2YgXFxcImZhY3RcXFwicyBvZiBhIGRvbWFpbiwgYSBcXFwicmVjb3JkXFxcIiBoYXMgYSBzZXQgb2YgYXR0cmlidXRlcyB2YWx1ZXMgKFxcXCJmYWN0XFxcInMpIG9mIHRoZSBjYXRlZ29yaWVzLCBvZnRlbiBhIHJlY29yZCBoYXMgYSBcXFwia2V5XFxcIlwiLFxuICAgIFwiZmFjdFwiOiBcImEgc3BlY2lmaWMgY2F0ZWdvcnkgdmFsdWUgb2YgYSByZWNvcmQgaW4gYSBkb21haW4sIG1heSBiZSBhIFxcXCJrZXlcXFwiIHZhbHVlXCIsXG59O1xuZnVuY3Rpb24gZ2V0UmFuZG9tUmVzdWx0KGFycikge1xuICAgIHJldHVybiBhcnJbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogYXJyLmxlbmd0aCkgJSBhcnIubGVuZ3RoXTtcbn1cbnZhciBTaW1wbGVVcERvd25SZWNvZ25pemVyID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTaW1wbGVVcERvd25SZWNvZ25pemVyKCkge1xuICAgIH1cbiAgICBTaW1wbGVVcERvd25SZWNvZ25pemVyLnByb3RvdHlwZS5yZWNvZ25pemUgPSBmdW5jdGlvbiAoY29udGV4dCwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIHUgPSB7fTtcbiAgICAgICAgZGVidWdsb2coXCJyZWNvZ25pemluZyBcIiArIGNvbnRleHQubWVzc2FnZS50ZXh0KTtcbiAgICAgICAgaWYgKGNvbnRleHQubWVzc2FnZS50ZXh0LmluZGV4T2YoXCJkb3duXCIpID49IDApIHtcbiAgICAgICAgICAgIHUuaW50ZW50ID0gXCJpbnRlbnQuZG93blwiO1xuICAgICAgICAgICAgdS5zY29yZSA9IDAuOTtcbiAgICAgICAgICAgIHZhciBlMSA9IHt9O1xuICAgICAgICAgICAgZTEuc3RhcnRJbmRleCA9IFwic3RhcnQgXCIubGVuZ3RoO1xuICAgICAgICAgICAgZTEuZW5kSW5kZXggPSBjb250ZXh0Lm1lc3NhZ2UudGV4dC5sZW5ndGg7XG4gICAgICAgICAgICBlMS5zY29yZSA9IDAuMztcbiAgICAgICAgICAgIHUuZW50aXRpZXMgPSBbZTFdO1xuICAgICAgICAgICAgY2FsbGJhY2sodW5kZWZpbmVkLCB1KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29udGV4dC5tZXNzYWdlLnRleHQuaW5kZXhPZihcInVwXCIpID49IDApIHtcbiAgICAgICAgICAgIHUuaW50ZW50ID0gXCJpbnRlbnQudXBcIjtcbiAgICAgICAgICAgIHUuc2NvcmUgPSAwLjk7XG4gICAgICAgICAgICB2YXIgZTEgPSB7fTtcbiAgICAgICAgICAgIGUxLnN0YXJ0SW5kZXggPSBcInVwXCIubGVuZ3RoO1xuICAgICAgICAgICAgZTEuZW5kSW5kZXggPSBjb250ZXh0Lm1lc3NhZ2UudGV4dC5sZW5ndGg7XG4gICAgICAgICAgICBlMS5zY29yZSA9IDAuMztcbiAgICAgICAgICAgIHUuZW50aXRpZXMgPSBbZTFdO1xuICAgICAgICAgICAgY2FsbGJhY2sodW5kZWZpbmVkLCB1KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29udGV4dC5tZXNzYWdlLnRleHQuaW5kZXhPZihcImRvbmVcIikgPj0gMCkge1xuICAgICAgICAgICAgdS5pbnRlbnQgPSBcImludGVudC51cFwiO1xuICAgICAgICAgICAgdS5zY29yZSA9IDAuOTtcbiAgICAgICAgICAgIHZhciBlMSA9IHt9O1xuICAgICAgICAgICAgZTEuc3RhcnRJbmRleCA9IFwidXBcIi5sZW5ndGg7XG4gICAgICAgICAgICBlMS5lbmRJbmRleCA9IGNvbnRleHQubWVzc2FnZS50ZXh0Lmxlbmd0aDtcbiAgICAgICAgICAgIGUxLnNjb3JlID0gMC4zO1xuICAgICAgICAgICAgdS5lbnRpdGllcyA9IFtlMV07XG4gICAgICAgICAgICBjYWxsYmFjayh1bmRlZmluZWQsIHUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb250ZXh0Lm1lc3NhZ2UudGV4dC5pbmRleE9mKFwiZXhpdFwiKSA+PSAwKSB7XG4gICAgICAgICAgICB1LmludGVudCA9IFwiaW50ZW50LnVwXCI7XG4gICAgICAgICAgICB1LnNjb3JlID0gMC45O1xuICAgICAgICAgICAgdmFyIGUxID0ge307XG4gICAgICAgICAgICBlMS5zdGFydEluZGV4ID0gXCJ1cFwiLmxlbmd0aDtcbiAgICAgICAgICAgIGUxLmVuZEluZGV4ID0gY29udGV4dC5tZXNzYWdlLnRleHQubGVuZ3RoO1xuICAgICAgICAgICAgZTEuc2NvcmUgPSAwLjM7XG4gICAgICAgICAgICB1LmVudGl0aWVzID0gW2UxXTtcbiAgICAgICAgICAgIGNhbGxiYWNrKHVuZGVmaW5lZCwgdSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbnRleHQubWVzc2FnZS50ZXh0LmluZGV4T2YoXCJxdWl0XCIpID49IDApIHtcbiAgICAgICAgICAgIHUuaW50ZW50ID0gXCJpbnRlbnQudXBcIjtcbiAgICAgICAgICAgIHUuc2NvcmUgPSAwLjk7XG4gICAgICAgICAgICB2YXIgZTEgPSB7fTtcbiAgICAgICAgICAgIGUxLnN0YXJ0SW5kZXggPSBcInVwXCIubGVuZ3RoO1xuICAgICAgICAgICAgZTEuZW5kSW5kZXggPSBjb250ZXh0Lm1lc3NhZ2UudGV4dC5sZW5ndGg7XG4gICAgICAgICAgICBlMS5zY29yZSA9IDAuMztcbiAgICAgICAgICAgIHUuZW50aXRpZXMgPSBbZTFdO1xuICAgICAgICAgICAgY2FsbGJhY2sodW5kZWZpbmVkLCB1KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBkZWJ1Z2xvZygncmVjb2duaXppbmcgbm90aGluZycpO1xuICAgICAgICB1LmludGVudCA9IFwiTm9uZVwiO1xuICAgICAgICB1LnNjb3JlID0gMC4xO1xuICAgICAgICB2YXIgZTEgPSB7fTtcbiAgICAgICAgZTEuc3RhcnRJbmRleCA9IFwiZXhpdCBcIi5sZW5ndGg7XG4gICAgICAgIGUxLmVuZEluZGV4ID0gY29udGV4dC5tZXNzYWdlLnRleHQubGVuZ3RoO1xuICAgICAgICBlMS5zY29yZSA9IDAuMTtcbiAgICAgICAgdS5lbnRpdGllcyA9IFtdO1xuICAgICAgICBjYWxsYmFjayh1bmRlZmluZWQsIHUpO1xuICAgIH07XG4gICAgcmV0dXJuIFNpbXBsZVVwRG93blJlY29nbml6ZXI7XG59KCkpO1xuZXhwb3J0cy5TaW1wbGVVcERvd25SZWNvZ25pemVyID0gU2ltcGxlVXBEb3duUmVjb2duaXplcjtcbnZhciBBbnlPYmplY3QgPSBPYmplY3Q7XG4vLyBnbG9iYWxUdW5uZWwuaW5pdGlhbGl6ZSh7XG4vLyAgaG9zdDogJ3Byb3h5LmV4eHhhbXBsZS5jb20nLFxuLy8gIHBvcnQ6IDgwODBcbi8vIH0pXG4vLyBDcmVhdGUgYm90IGFuZCBiaW5kIHRvIGNvbnNvbGVcbi8vIHZhciBjb25uZWN0b3IgPSBuZXcgaHRtbGNvbm5lY3Rvci5IVE1MQ29ubmVjdG9yKClcbi8vIGNvbm5lY3Rvci5zZXRBbnN3ZXJIb29rKGZ1bmN0aW9uIChzQW5zd2VyKSB7XG4vLyAgY29uc29sZS5sb2coJ0dvdCBhbnN3ZXIgOiAnICsgc0Fuc3dlciArICdcXG4nKVxuLy8gfSlcbnZhciBib3Q7XG4vLyBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbi8vICAgY29ubmVjdG9yLnByb2Nlc3NNZXNzYWdlKCdzdGFydCB1bml0IHRlc3QgQUJDICcpXG4vLyB9LCA1MDAwKVxudmFyIGZzID0gcmVxdWlyZSgnZnMnKTtcbnZhciBvSlNPTiA9IEpTT04ucGFyc2UoJycgKyBmcy5yZWFkRmlsZVN5bmMoJy4vcmVzb3VyY2VzL21vZGVsL2ludGVudHMuanNvbicpKTtcbnZhciBvUnVsZXMgPSBQbGFpblJlY29nbml6ZXIucGFyc2VSdWxlcyhvSlNPTik7XG4vLyB2YXIgUmVjb2duaXplciA9IG5ldyAocmVjb2duaXplci5SZWdFeHBSZWNvZ25pemVyKShvUnVsZXMpO1xuZnVuY3Rpb24gbG9nUXVlcnkoc2Vzc2lvbiwgaW50ZW50LCByZXN1bHQpIHtcbiAgICBmcy5hcHBlbmRGaWxlKCcuL2xvZ3Mvc2hvd21lcXVlcmllcy50eHQnLCBcIlxcblwiICsgSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICB0ZXh0OiBzZXNzaW9uLm1lc3NhZ2UudGV4dCxcbiAgICAgICAgdGltZXN0YW1wOiBzZXNzaW9uLm1lc3NhZ2UudGltZXN0YW1wLFxuICAgICAgICBpbnRlbnQ6IGludGVudCxcbiAgICAgICAgcmVzOiByZXN1bHQgJiYgcmVzdWx0Lmxlbmd0aCAmJiBNYXRjaC5Ub29sTWF0Y2guZHVtcE5pY2UocmVzdWx0WzBdKSB8fCBcIjBcIixcbiAgICAgICAgY29udmVyc2F0aW9uSWQ6IHNlc3Npb24ubWVzc2FnZS5hZGRyZXNzXG4gICAgICAgICAgICAmJiBzZXNzaW9uLm1lc3NhZ2UuYWRkcmVzcy5jb252ZXJzYXRpb25cbiAgICAgICAgICAgICYmIHNlc3Npb24ubWVzc2FnZS5hZGRyZXNzLmNvbnZlcnNhdGlvbi5pZCB8fCBcIlwiLFxuICAgICAgICB1c2VyaWQ6IHNlc3Npb24ubWVzc2FnZS5hZGRyZXNzXG4gICAgICAgICAgICAmJiBzZXNzaW9uLm1lc3NhZ2UuYWRkcmVzcy51c2VyXG4gICAgICAgICAgICAmJiBzZXNzaW9uLm1lc3NhZ2UuYWRkcmVzcy51c2VyLmlkIHx8IFwiXCJcbiAgICB9KSwgZnVuY3Rpb24gKGVyciwgcmVzKSB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgIGRlYnVnbG9nKFwibG9nZ2luZyBmYWlsZWQgXCIgKyBlcnIpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5mdW5jdGlvbiBsb2dRdWVyeVdoYXRJcyhzZXNzaW9uLCBpbnRlbnQsIHJlc3VsdCkge1xuICAgIGZzLmFwcGVuZEZpbGUoJy4vbG9ncy9zaG93bWVxdWVyaWVzLnR4dCcsIFwiXFxuXCIgKyBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIHRleHQ6IHNlc3Npb24ubWVzc2FnZS50ZXh0LFxuICAgICAgICB0aW1lc3RhbXA6IHNlc3Npb24ubWVzc2FnZS50aW1lc3RhbXAsXG4gICAgICAgIGludGVudDogaW50ZW50LFxuICAgICAgICByZXM6IHJlc3VsdCAmJiByZXN1bHQubGVuZ3RoICYmIFdoYXRJcy5kdW1wTmljZShyZXN1bHRbMF0pIHx8IFwiMFwiLFxuICAgICAgICBjb252ZXJzYXRpb25JZDogc2Vzc2lvbi5tZXNzYWdlLmFkZHJlc3NcbiAgICAgICAgICAgICYmIHNlc3Npb24ubWVzc2FnZS5hZGRyZXNzLmNvbnZlcnNhdGlvblxuICAgICAgICAgICAgJiYgc2Vzc2lvbi5tZXNzYWdlLmFkZHJlc3MuY29udmVyc2F0aW9uLmlkIHx8IFwiXCIsXG4gICAgICAgIHVzZXJpZDogc2Vzc2lvbi5tZXNzYWdlLmFkZHJlc3NcbiAgICAgICAgICAgICYmIHNlc3Npb24ubWVzc2FnZS5hZGRyZXNzLnVzZXJcbiAgICAgICAgICAgICYmIHNlc3Npb24ubWVzc2FnZS5hZGRyZXNzLnVzZXIuaWQgfHwgXCJcIlxuICAgIH0pLCBmdW5jdGlvbiAoZXJyLCByZXMpIHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgZGVidWdsb2coXCJsb2dnaW5nIGZhaWxlZCBcIiArIGVycik7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGxvZ1F1ZXJ5V2hhdElzVHVwZWwoc2Vzc2lvbiwgaW50ZW50LCByZXN1bHQpIHtcbiAgICBmcy5hcHBlbmRGaWxlKCcuL2xvZ3Mvc2hvd21lcXVlcmllcy50eHQnLCBcIlxcblwiICsgSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICB0ZXh0OiBzZXNzaW9uLm1lc3NhZ2UudGV4dCxcbiAgICAgICAgdGltZXN0YW1wOiBzZXNzaW9uLm1lc3NhZ2UudGltZXN0YW1wLFxuICAgICAgICBpbnRlbnQ6IGludGVudCxcbiAgICAgICAgcmVzOiByZXN1bHQgJiYgcmVzdWx0Lmxlbmd0aCAmJiBXaGF0SXMuZHVtcE5pY2VUdXBlbChyZXN1bHRbMF0pIHx8IFwiMFwiLFxuICAgICAgICBjb252ZXJzYXRpb25JZDogc2Vzc2lvbi5tZXNzYWdlLmFkZHJlc3NcbiAgICAgICAgICAgICYmIHNlc3Npb24ubWVzc2FnZS5hZGRyZXNzLmNvbnZlcnNhdGlvblxuICAgICAgICAgICAgJiYgc2Vzc2lvbi5tZXNzYWdlLmFkZHJlc3MuY29udmVyc2F0aW9uLmlkIHx8IFwiXCIsXG4gICAgICAgIHVzZXJpZDogc2Vzc2lvbi5tZXNzYWdlLmFkZHJlc3NcbiAgICAgICAgICAgICYmIHNlc3Npb24ubWVzc2FnZS5hZGRyZXNzLnVzZXJcbiAgICAgICAgICAgICYmIHNlc3Npb24ubWVzc2FnZS5hZGRyZXNzLnVzZXIuaWQgfHwgXCJcIlxuICAgIH0pLCBmdW5jdGlvbiAoZXJyLCByZXMpIHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgZGVidWdsb2coXCJsb2dnaW5nIGZhaWxlZCBcIiArIGVycik7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbnZhciBnd29yZHMgPSB7fTtcbi8qKlxuICogQ29uc3RydWN0IGEgYm90XG4gKiBAcGFyYW0gY29ubmVjdG9yIHtDb25uZWN0b3J9IHRoZSBjb25uZWN0b3IgdG8gdXNlXG4gKiBIVE1MQ29ubmVjdG9yXG4gKiBvciBjb25uZWN0b3IgPSBuZXcgYnVpbGRlci5Db25zb2xlQ29ubmVjdG9yKCkubGlzdGVuKClcbiAqL1xuZnVuY3Rpb24gbWFrZUJvdChjb25uZWN0b3IsIG1vZGVsUGF0aCkge1xuICAgIHZhciB0aGVNb2RlbCA9IGxvYWRNb2RlbChtb2RlbFBhdGgpO1xuICAgIGJvdCA9IG5ldyBidWlsZGVyLlVuaXZlcnNhbEJvdChjb25uZWN0b3IpO1xuICAgIC8vIENyZWF0ZSBMVUlTIHJlY29nbml6ZXIgdGhhdCBwb2ludHMgYXQgb3VyIG1vZGVsIGFuZCBhZGQgaXQgYXMgdGhlIHJvb3QgJy8nIGRpYWxvZyBmb3Igb3VyIENvcnRhbmEgQm90LlxuICAgIC8vIHZhciBtb2RlbCA9IHNlbnNpdGl2ZS5tb2RlbHVybDtcbiAgICAvLyB2YXIgbW9kZWwgPSAnaHR0cHM6Ly9hcGkucHJvamVjdG94Zm9yZC5haS9sdWlzL3YyLjAvYXBwcy9jNDEzYjJlZi0zODJjLTQ1YmQtOGZmMC1mNzZkNjBlMmE4MjE/c3Vic2NyaXB0aW9uLWtleT1jMjEzOThiNTk4MGE0Y2UwOWY0NzRiYmZlZTkzYjg5MiZxPSdcbiAgICB2YXIgcmVjb2duaXplciA9IG5ldyBQbGFpblJlY29nbml6ZXIuUmVnRXhwUmVjb2duaXplcihvUnVsZXMpO1xuICAgIHZhciBkaWFsb2cgPSBuZXcgYnVpbGRlci5JbnRlbnREaWFsb2coeyByZWNvZ25pemVyczogW3JlY29nbml6ZXJdIH0pO1xuICAgIC8vIGRpYWxvZy5vbkJlZ2luKGZ1bmN0aW9uKHNlc3Npb24sYXJncykge1xuICAgIC8vIGNvbnNvbGUubG9nKFwiYmVnaW5uaW5nIC4uLlwiKVxuICAgIC8vIHNlc3Npb24uZGlhbG9nRGF0YS5yZXRyeVByb21wdCA9IGFyZ3MgJiYgYXJncy5yZXRyeVByb21wdCB8fCBcIkkgYW0gc29ycnlcIlxuICAgIC8vIHNlc3Npb24uc2VuZChcIldoYXQgZG8geW91IHdhbnQ/XCIpXG4gICAgLy9cbiAgICAvLyB9KVxuICAgIHZhciBkaWFsb2dVcERvd24gPSBuZXcgYnVpbGRlci5JbnRlbnREaWFsb2coeyByZWNvZ25pemVyczogW25ldyBTaW1wbGVVcERvd25SZWNvZ25pemVyKCldIH0pO1xuICAgIGJvdC5kaWFsb2coJy91cGRvd24nLCBkaWFsb2dVcERvd24pO1xuICAgIGRpYWxvZ1VwRG93bi5vbkJlZ2luKGZ1bmN0aW9uIChzZXNzaW9uKSB7XG4gICAgICAgIGRpYWxvZ2xvZyhcIlRyYWluTWVcIiwgc2Vzc2lvbiwgc2VuZChnZXRSYW5kb21SZXN1bHQoYUVudGVyVHJhaW4pKSk7XG4gICAgICAgIC8vc2Vzc2lvbi5zZW5kKFwiSGkgdGhlcmUsIHVwZG93biBpcyB3YWl0aW5nIGZvciB5b3VcIik7XG4gICAgfSk7XG4gICAgZGlhbG9nVXBEb3duLm1hdGNoZXMoJ2ludGVudC51cCcsIFtcbiAgICAgICAgZnVuY3Rpb24gKHNlc3Npb24sIGFyZ3MsIG5leHQpIHtcbiAgICAgICAgICAgIHNlc3Npb24uZGlhbG9nRGF0YS5hYmMgPSBhcmdzIHx8IHt9O1xuICAgICAgICAgICAgYnVpbGRlci5Qcm9tcHRzLnRleHQoc2Vzc2lvbiwgJ3lvdSB3YW50IHRvIGV4aXQgdHJhaW5pbmc/IHR5cGUgXFxcImRvbmVcXFwiIGFnYWluLicpO1xuICAgICAgICB9LFxuICAgICAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgcmVzdWx0cywgbmV4dCkge1xuICAgICAgICAgICAgc2Vzc2lvbi5kaWFsb2dEYXRhLmFiYyA9IHJlc3VsdHMucmVwb25zZTtcbiAgICAgICAgICAgIG5leHQoKTtcbiAgICAgICAgfSxcbiAgICAgICAgZnVuY3Rpb24gKHNlc3Npb24sIHJlc3VsdHMpIHtcbiAgICAgICAgICAgIHNlc3Npb24uZW5kRGlhbG9nV2l0aFJlc3VsdCh7IHJlc3BvbnNlOiBzZXNzaW9uLmRpYWxvZ0RhdGEuYWJjIH0pO1xuICAgICAgICB9XG4gICAgXSk7XG4gICAgZGlhbG9nVXBEb3duLm1hdGNoZXMoJ2ludGVudC5kb3duJywgW1xuICAgICAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgYXJncywgbmV4dCkge1xuICAgICAgICAgICAgc2Vzc2lvbi5kaWFsb2dEYXRhLmFiYyA9IGFyZ3MgfHwge307XG4gICAgICAgICAgICBidWlsZGVyLlByb21wdHMudGV4dChzZXNzaW9uLCAneW91IHdhbnQgdG8gZ28gZG93biEnKTtcbiAgICAgICAgfSxcbiAgICAgICAgZnVuY3Rpb24gKHNlc3Npb24sIHJlc3VsdHMsIG5leHQpIHtcbiAgICAgICAgICAgIHNlc3Npb24uZGlhbG9nRGF0YS5hYmMgPSAtMTsgLy8gcmVzdWx0cy5yZXBvbnNlO1xuICAgICAgICAgICAgbmV4dCgpO1xuICAgICAgICB9LFxuICAgICAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgcmVzdWx0cykge1xuICAgICAgICAgICAgc2Vzc2lvbi5zZW5kKFwic3RpbGwgZ29pbmcgZG93bj9cIik7XG4gICAgICAgIH1cbiAgICBdKTtcbiAgICBkaWFsb2dVcERvd24ub25EZWZhdWx0KGZ1bmN0aW9uIChzZXNzaW9uKSB7XG4gICAgICAgIGxvZ1F1ZXJ5KHNlc3Npb24sIFwib25EZWZhdWx0XCIpO1xuICAgICAgICB2YXIgcmVzID0gZ2V0UmFuZG9tUmVzdWx0KGFUcmFpbkRpYWxvZykgKyBnZXRSYW5kb21SZXN1bHQoYVRyYWluRXhpdEhpbnQpO1xuICAgICAgICBkaWFsb2dsb2coXCJUcmFpbk1lXCIsIHNlc3Npb24sIHNlbmQocmVzKSk7XG4gICAgfSk7XG4gICAgYm90LmRpYWxvZygnL3RyYWluJywgW1xuICAgICAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgYXJncywgbmV4dCkge1xuICAgICAgICAgICAgc2Vzc2lvbi5kaWFsZ29EYXRhLmFiYyA9IGFyZ3MgfHwge307XG4gICAgICAgICAgICBidWlsZGVyLlByb21wdHMudGV4dChzZXNzaW9uLCAnRG8geW91IHdhbnQgdG8gdHJhaW4gbWUnKTtcbiAgICAgICAgfSxcbiAgICAgICAgZnVuY3Rpb24gKHNlc3Npb24sIHJlc3VsdHMsIG5leHQpIHtcbiAgICAgICAgICAgIHNlc3Npb24uZGlhbG9nRGF0YS5hYmMgPSByZXN1bHRzLnJlcG9uc2U7XG4gICAgICAgIH0sXG4gICAgICAgIGZ1bmN0aW9uIChzZXNzaW9uLCByZXN1bHRzKSB7XG4gICAgICAgICAgICBzZXNzaW9uLmVuZERpYWxvZ1dpdGhSZXN1bHQoeyByZXNwb25zZTogc2Vzc2lvbi5EaWFsb2dEYXRhLmFiYyB9KTtcbiAgICAgICAgfVxuICAgIF0pO1xuICAgIGJvdC5kaWFsb2coJy8nLCBkaWFsb2cpO1xuICAgIGRpYWxvZy5tYXRjaGVzKCdTaG93TWUnLCBbXG4gICAgICAgIGZ1bmN0aW9uIChzZXNzaW9uLCBhcmdzLCBuZXh0KSB7XG4gICAgICAgICAgICB2YXIgaXNDb21iaW5lZEluZGV4ID0ge307XG4gICAgICAgICAgICB2YXIgb05ld0VudGl0eTtcbiAgICAgICAgICAgIC8vIGV4cGVjdGluZyBlbnRpdHkgQTFcbiAgICAgICAgICAgIGRlYnVnbG9nKFwiU2hvdyBFbnRpdHlcIik7XG4gICAgICAgICAgICBkZWJ1Z2xvZygncmF3OiAnICsgSlNPTi5zdHJpbmdpZnkoYXJncy5lbnRpdGllcyksIHVuZGVmaW5lZCwgMik7XG4gICAgICAgICAgICB2YXIgYTEgPSBidWlsZGVyLkVudGl0eVJlY29nbml6ZXIuZmluZEVudGl0eShhcmdzLmVudGl0aWVzLCAnQTEnKTtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBBbmFseXplLmFuYWx5emVBbGwoYTEuZW50aXR5LCB0aGVNb2RlbC5ydWxlcywgdGhlTW9kZWwudG9vbHMsIGd3b3Jkcyk7XG4gICAgICAgICAgICBsb2dRdWVyeShzZXNzaW9uLCAnU2hvd01lJywgcmVzdWx0KTtcbiAgICAgICAgICAgIC8vIHRlc3QuZXhwZWN0KDMpXG4gICAgICAgICAgICAvLyAgdGVzdC5kZWVwRXF1YWwocmVzdWx0LndlaWdodCwgMTIwLCAnY29ycmVjdCB3ZWlnaHQnKTtcbiAgICAgICAgICAgIGlmICghcmVzdWx0IHx8IHJlc3VsdC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICBuZXh0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBkZWJ1Z2xvZygncmVzdWx0IDogJyArIEpTT04uc3RyaW5naWZ5KHJlc3VsdCwgdW5kZWZpbmVkLCAyKSk7XG4gICAgICAgICAgICBkZWJ1Z2xvZygnYmVzdCByZXN1bHQgOiAnICsgSlNPTi5zdHJpbmdpZnkocmVzdWx0WzBdIHx8IHt9LCB1bmRlZmluZWQsIDIpKTtcbiAgICAgICAgICAgIGRlYnVnbG9nKCd0b3AgOiAnICsgTWF0Y2guVG9vbE1hdGNoLmR1bXBXZWlnaHRzVG9wKHJlc3VsdCwgeyB0b3A6IDMgfSkpO1xuICAgICAgICAgICAgaWYgKEFuYWx5emUuaXNDb21wbGV0ZShyZXN1bHRbMF0pKSB7XG4gICAgICAgICAgICAgICAgc2Vzc2lvbi5kaWFsb2dEYXRhLnJlc3VsdCA9IHJlc3VsdFswXTtcbiAgICAgICAgICAgICAgICAvLyAgICBzZXNzaW9uLnNlbmQoJ1Nob3dpbmcgZW50aXR5IC4uLicpO1xuICAgICAgICAgICAgICAgIG5leHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKEFuYWx5emUuZ2V0UHJvbXB0KHJlc3VsdFswXSkpIHtcbiAgICAgICAgICAgICAgICB2YXIgcHJvbXB0ID0gQW5hbHl6ZS5nZXRQcm9tcHQocmVzdWx0WzBdKTtcbiAgICAgICAgICAgICAgICBzZXNzaW9uLmRpYWxvZ0RhdGEucmVzdWx0ID0gcmVzdWx0WzBdO1xuICAgICAgICAgICAgICAgIHNlc3Npb24uZGlhbG9nRGF0YS5wcm9tcHQgPSBwcm9tcHQ7XG4gICAgICAgICAgICAgICAgZGlhbG9nbG9nKFwiU2hvd01lXCIsIHNlc3Npb24sIHNlbmQoXCJOb3QgZW5vdWdoIGluZm9ybWF0aW9uIHN1cHBsaWVkOiBcIiArIE1hdGNoLlRvb2xNYXRjaC5kdW1wTmljZShzZXNzaW9uLmRpYWxvZ0RhdGEucmVzdWx0KSkpO1xuICAgICAgICAgICAgICAgIGJ1aWxkZXIuUHJvbXB0cy50ZXh0KHNlc3Npb24sIHByb21wdC50ZXh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBiZXN0ID0gcmVzdWx0Lmxlbmd0aCA/IE1hdGNoLlRvb2xNYXRjaC5kdW1wTmljZShyZXN1bHRbMF0pIDogXCI8bm90aGluZz5cIjtcbiAgICAgICAgICAgICAgICBkaWFsb2dsb2coXCJTaG93TWVcIiwgc2Vzc2lvbiwgc2VuZCgnSSBkaWQgbm90IHVuZGVyc3RhbmQgdGhpcycgKyBiZXN0KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGZ1bmN0aW9uIChzZXNzaW9uLCByZXN1bHRzLCBuZXh0KSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gc2Vzc2lvbi5kaWFsb2dEYXRhLnJlc3VsdDtcbiAgICAgICAgICAgIGlmICghcmVzdWx0IHx8IHJlc3VsdC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICBuZXh0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocmVzdWx0cy5yZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIC8vIHNvbWUgcHJvbXB0aW5nXG4gICAgICAgICAgICAgICAgQW5hbHl6ZS5zZXRQcm9tcHQoc2Vzc2lvbi5kaWFsb2dEYXRhLnJlc3VsdCwgc2Vzc2lvbi5kaWFsb2dEYXRhLnByb21wdCwgcmVzdWx0cy5yZXNwb25zZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoQW5hbHl6ZS5pc0NvbXBsZXRlKHNlc3Npb24uZGlhbG9nRGF0YS5yZXN1bHQpKSB7XG4gICAgICAgICAgICAgICAgbmV4dCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoQW5hbHl6ZS5nZXRQcm9tcHQoc2Vzc2lvbi5kaWFsb2dEYXRhLnJlc3VsdCkpIHtcbiAgICAgICAgICAgICAgICB2YXIgcHJvbXB0ID0gQW5hbHl6ZS5nZXRQcm9tcHQoc2Vzc2lvbi5kaWFsb2dEYXRhLnJlc3VsdCk7XG4gICAgICAgICAgICAgICAgc2Vzc2lvbi5kaWFsb2dEYXRhLnByb21wdCA9IHByb21wdDtcbiAgICAgICAgICAgICAgICBidWlsZGVyLlByb21wdHMudGV4dChzZXNzaW9uLCBwcm9tcHQudGV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGZ1bmN0aW9uIChzZXNzaW9uLCByZXN1bHRzLCBuZXh0KSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gc2Vzc2lvbi5kaWFsb2dEYXRhLnJlc3VsdDtcbiAgICAgICAgICAgIGlmIChyZXN1bHRzLnJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgLy8gc29tZSBwcm9tcHRpbmdcbiAgICAgICAgICAgICAgICBBbmFseXplLnNldFByb21wdChzZXNzaW9uLmRpYWxvZ0RhdGEucmVzdWx0LCBzZXNzaW9uLmRpYWxvZ0RhdGEucHJvbXB0LCByZXN1bHRzLnJlc3BvbnNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChBbmFseXplLmlzQ29tcGxldGUoc2Vzc2lvbi5kaWFsb2dEYXRhLnJlc3VsdCkpIHtcbiAgICAgICAgICAgICAgICB2YXIgZXhlYyA9IEV4ZWNTZXJ2ZXIuZXhlY1Rvb2woc2Vzc2lvbi5kaWFsb2dEYXRhLnJlc3VsdCwgdGhlTW9kZWwucmVjb3Jkcyk7XG4gICAgICAgICAgICAgICAgdmFyIHJlcGx5ID0gbmV3IGJ1aWxkZXIuTWVzc2FnZShzZXNzaW9uKVxuICAgICAgICAgICAgICAgICAgICAudGV4dChleGVjLnRleHQpXG4gICAgICAgICAgICAgICAgICAgIC5hZGRFbnRpdHkoZXhlYy5hY3Rpb24pO1xuICAgICAgICAgICAgICAgIC8vIC5hZGRBdHRhY2htZW50KHsgZmFsbGJhY2tUZXh0OiBcIkkgZG9uJ3Qga25vd1wiLCBjb250ZW50VHlwZTogJ2ltYWdlL2pwZWcnLCBjb250ZW50VXJsOiBcInd3dy53b21iYXQub3JnXCIgfSk7XG4gICAgICAgICAgICAgICAgZGlhbG9nbG9nKFwiU2hvd01lXCIsIHNlc3Npb24sIHNlbmQocmVwbHkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChzZXNzaW9uLmRpYWxvZ0RhdGEucmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIGRpYWxvZ2xvZyhcIlNob3dNZVwiLCBzZXNzaW9uLCBzZW5kKFwiTm90IGVub3VnaCBpbmZvcm1hdGlvbiBzdXBwbGllZDogXCIgKyBNYXRjaC5Ub29sTWF0Y2guZHVtcE5pY2Uoc2Vzc2lvbi5kaWFsb2dEYXRhLnJlc3VsdCkpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGRpYWxvZ2xvZyhcIlNob3dNZVwiLCBzZXNzaW9uLCBzZW5kKFwiSSBkaWQgbm90IGdldCB3aGF0IHlvdSB3YW50XCIpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgXSk7XG4gICAgZGlhbG9nLm1hdGNoZXMoJ1doYXRJcycsIFtcbiAgICAgICAgZnVuY3Rpb24gKHNlc3Npb24sIGFyZ3MsIG5leHQpIHtcbiAgICAgICAgICAgIHZhciBpc0NvbWJpbmVkSW5kZXggPSB7fTtcbiAgICAgICAgICAgIHZhciBvTmV3RW50aXR5O1xuICAgICAgICAgICAgLy8gZXhwZWN0aW5nIGVudGl0eSBBMVxuICAgICAgICAgICAgdmFyIG1lc3NhZ2UgPSBzZXNzaW9uLm1lc3NhZ2UudGV4dDtcbiAgICAgICAgICAgIGRlYnVnbG9nKFwiV2hhdElzIEVudGl0aWVzXCIpO1xuICAgICAgICAgICAgZGVidWdsb2coJ3JhdzogJyArIEpTT04uc3RyaW5naWZ5KGFyZ3MuZW50aXRpZXMpLCB1bmRlZmluZWQsIDIpO1xuICAgICAgICAgICAgdmFyIGNhdGVnb3J5RW50aXR5ID0gYnVpbGRlci5FbnRpdHlSZWNvZ25pemVyLmZpbmRFbnRpdHkoYXJncy5lbnRpdGllcywgJ2NhdGVnb3J5Jyk7XG4gICAgICAgICAgICB2YXIgY2F0ZWdvcnkgPSBjYXRlZ29yeUVudGl0eS5lbnRpdHk7XG4gICAgICAgICAgICB2YXIgYTEgPSBidWlsZGVyLkVudGl0eVJlY29nbml6ZXIuZmluZEVudGl0eShhcmdzLmVudGl0aWVzLCAnQTEnKTtcbiAgICAgICAgICAgIHZhciBjYXRzID0gW107XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNhdHMgPSBXaGF0SXMuYW5hbHl6ZUNhdGVnb3J5TXVsdDIoY2F0ZWdvcnksIHRoZU1vZGVsLnJ1bGVzLCBtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICBkZWJ1Z2xvZyhcImhlcmUgY2F0c1wiICsgY2F0cy5qb2luKFwiLFwiKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGlmIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlYnVnbG9nKFwiaGVyZSBleGNlcHRpb25cIiArIGUpO1xuICAgICAgICAgICAgICAgICAgICBkaWFsb2dsb2coXCJXaGF0SXNcIiwgc2Vzc2lvbiwgc2VuZCgnSSBkb25cXCd0IGtub3cgYW55dGhpbmcgYWJvdXQgXCInICsgY2F0ZWdvcnkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgKGUgPyAnKCcgKyBlLnRvU3RyaW5nKCkgKyAnKScgOiBcIlwiKSkpO1xuICAgICAgICAgICAgICAgICAgICAvLyBuZXh0KCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgY2F0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgLy8gd2UgaGF2ZSBzb21lIGNhdHMsIChvciBhdCBsZWFzdCBvbmUpXG4gICAgICAgICAgICBpZiAoY2F0cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICBjYXQgPSBjYXRzWzBdO1xuICAgICAgICAgICAgICAgIGlmICghY2F0KSB7XG4gICAgICAgICAgICAgICAgICAgIHNlc3Npb24uc2VuZCgnSSBkb25cXCd0IGtub3cgYW55dGhpbmcgYWJvdXQgXCInICsgY2F0ZWdvcnkgKyAnXCInKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gbmV4dCgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNhdHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgZGVidWdsb2coJ2NhdGVnb3J5IGlkZW50aWZpZWQ6JyArIGNhdCk7XG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFdoYXRJcy5yZXNvbHZlQ2F0ZWdvcnkoY2F0LCBhMS5lbnRpdHksIHRoZU1vZGVsLnJ1bGVzLCB0aGVNb2RlbC5yZWNvcmRzKTtcbiAgICAgICAgICAgICAgICBkZWJ1Z2xvZygnd2hhdGlzIHJlc3VsdDonICsgSlNPTi5zdHJpbmdpZnkocmVzdWx0KSk7XG4gICAgICAgICAgICAgICAgbG9nUXVlcnlXaGF0SXMoc2Vzc2lvbiwgJ1doYXRJcycsIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgdmFyIGluZGlzID0gV2hhdElzLmlzSW5kaXNjcmltaW5hdGVSZXN1bHQocmVzdWx0KTtcbiAgICAgICAgICAgICAgICBpZiAoaW5kaXMpIHtcbiAgICAgICAgICAgICAgICAgICAgc2Vzc2lvbi5zZW5kKGluZGlzKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gbmV4dCgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghcmVzdWx0IHx8IHJlc3VsdC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZGlhbG9nbG9nKFwiV2hhdElzXCIsIHNlc3Npb24sIHNlbmQoJ0kgZG9uXFwndCBrbm93IGFueXRoaW5nIGFib3V0IFwiJyArIGNhdCArIFwiIChcIiArIGNhdGVnb3J5ICsgJylcXFwiIGluIHJlbGF0aW9uIHRvIFwiJyArIGExLmVudGl0eSArICdcIicpKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gbmV4dCgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBkZWJ1Z2xvZygncmVzdWx0IDogJyArIEpTT04uc3RyaW5naWZ5KHJlc3VsdCwgdW5kZWZpbmVkLCAyKSk7XG4gICAgICAgICAgICAgICAgICAgIGRlYnVnbG9nKCdiZXN0IHJlc3VsdCA6ICcgKyBKU09OLnN0cmluZ2lmeShyZXN1bHRbMF0gfHwge30sIHVuZGVmaW5lZCwgMikpO1xuICAgICAgICAgICAgICAgICAgICBkZWJ1Z2xvZygndG9wIDogJyArIFdoYXRJcy5kdW1wV2VpZ2h0c1RvcChyZXN1bHQsIHsgdG9wOiAzIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gVE9ETyBjbGVhbnNlZCBzZW50ZW5jZVxuICAgICAgICAgICAgICAgICAgICBkaWFsb2dsb2coXCJXaGF0SXNcIiwgc2Vzc2lvbiwgc2VuZCgnVGhlICcgKyBjYXRlZ29yeSArICcgb2YgJyArIGExLmVudGl0eSArICcgaXMgJyArIHJlc3VsdFswXS5yZXN1bHQgKyBcIlxcblwiKSk7IC8vICArIEpTT04uc3RyaW5naWZ5KHJlc3VsdFswXSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gLy8gc2luZ2xlIGNhdGVnb3J5XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBkZWJ1Z2xvZygnY2F0ZWdvcmllcyBpZGVudGlmaWVkOicgKyBjYXRzLmpvaW4oXCIsXCIpKTtcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0QXJyID0gV2hhdElzLnJlc29sdmVDYXRlZ29yaWVzKGNhdHMsIGExLmVudGl0eSwgdGhlTW9kZWwpO1xuICAgICAgICAgICAgICAgIGRlYnVnbG9nKCd3aGF0aXMgcmVzdWx0OicgKyBKU09OLnN0cmluZ2lmeShyZXN1bHRBcnIpKTtcbiAgICAgICAgICAgICAgICBsb2dRdWVyeVdoYXRJc1R1cGVsKHNlc3Npb24sICdXaGF0SXMnLCByZXN1bHRBcnIpO1xuICAgICAgICAgICAgICAgIHZhciBpbmRpcyA9IFdoYXRJcy5pc0luZGlzY3JpbWluYXRlUmVzdWx0VHVwZWwocmVzdWx0QXJyKTtcbiAgICAgICAgICAgICAgICBpZiAoaW5kaXMpIHtcbiAgICAgICAgICAgICAgICAgICAgc2Vzc2lvbi5zZW5kKGluZGlzKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gbmV4dCgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghcmVzdWx0QXJyIHx8IHJlc3VsdEFyci5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZGlhbG9nbG9nKFwiV2hhdElzXCIsIHNlc3Npb24sIHNlbmQoJ0kgZG9uXFwndCBrbm93IGFueXRoaW5nIGFib3V0IFwiJyArIGNhdGVnb3J5ICsgXCJcXFwiIChcIiArIFV0aWxzLmxpc3RUb1F1b3RlZENvbW1hQW5kKGNhdHMpICsgJylcXFwiIGluIHJlbGF0aW9uIHRvIFwiJyArIGExLmVudGl0eSArICdcIicpKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gbmV4dCgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBkZWJ1Z2xvZygncmVzdWx0IDogJyArIEpTT04uc3RyaW5naWZ5KHJlc3VsdCwgdW5kZWZpbmVkLCAyKSk7XG4gICAgICAgICAgICAgICAgICAgIGRlYnVnbG9nKCdiZXN0IHJlc3VsdCA6ICcgKyBKU09OLnN0cmluZ2lmeShyZXN1bHRBcnJbMF0gfHwge30sIHVuZGVmaW5lZCwgMikpO1xuICAgICAgICAgICAgICAgICAgICAvL2RlYnVnbG9nKCd0b3AgOiAnICsgV2hhdElzLmR1bXBXZWlnaHRzVG9wKHJlc3VsdEFyciwgeyB0b3A6IDMgfSkpO1xuICAgICAgICAgICAgICAgICAgICAvLyBUT0RPIGNsZWFuc2VkIHNlbnRlbmNlXG4gICAgICAgICAgICAgICAgICAgIGRpYWxvZ2xvZyhcIldoYXRJc1wiLCBzZXNzaW9uLCBzZW5kKCdUaGUgJyArIFV0aWxzLmxpc3RUb1F1b3RlZENvbW1hQW5kKGNhdHMpICsgJyBvZiAnICsgYTEuZW50aXR5ICsgJyBhcmUgJyArIFV0aWxzLmxpc3RUb1F1b3RlZENvbW1hQW5kKHJlc3VsdEFyclswXS5yZXN1bHQpICsgJ1xcbicpKTsgLy8gICsgSlNPTi5zdHJpbmdpZnkocmVzdWx0WzBdKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSAvL2VuZGlmIG11bHRpcGxlIGNhdGVnb3JpZXNcbiAgICAgICAgfVxuICAgIF0pO1xuICAgIGRpYWxvZy5tYXRjaGVzKCdMaXN0QWxsJywgW1xuICAgICAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgYXJncywgbmV4dCkge1xuICAgICAgICAgICAgdmFyIGlzQ29tYmluZWRJbmRleCA9IHt9O1xuICAgICAgICAgICAgdmFyIG9OZXdFbnRpdHk7XG4gICAgICAgICAgICAvLyBleHBlY3RpbmcgZW50aXR5IEExXG4gICAgICAgICAgICB2YXIgbWVzc2FnZSA9IHNlc3Npb24ubWVzc2FnZS50ZXh0O1xuICAgICAgICAgICAgZGVidWdsb2coXCJJbnRlbnQgOiBMaXN0QWxsXCIpO1xuICAgICAgICAgICAgZGVidWdsb2coJ3JhdzogJyArIEpTT04uc3RyaW5naWZ5KGFyZ3MuZW50aXRpZXMpLCB1bmRlZmluZWQsIDIpO1xuICAgICAgICAgICAgdmFyIGNhdGVnb3J5RW50aXR5ID0gYnVpbGRlci5FbnRpdHlSZWNvZ25pemVyLmZpbmRFbnRpdHkoYXJncy5lbnRpdGllcywgJ2NhdGVnb3JpZXMnKTtcbiAgICAgICAgICAgIHZhciBjYXRlZ29yeSA9IGNhdGVnb3J5RW50aXR5LmVudGl0eTtcbiAgICAgICAgICAgIHZhciBhMSA9IGJ1aWxkZXIuRW50aXR5UmVjb2duaXplci5maW5kRW50aXR5KGFyZ3MuZW50aXRpZXMsICdpbnN0aCcpO1xuICAgICAgICAgICAgaWYgKGNhdGVnb3J5ID09PSBcImNhdGVnb3JpZXNcIikge1xuICAgICAgICAgICAgICAgIC8vIGRvIHdlIGhhdmUgYSBmaWx0ZXIgP1xuICAgICAgICAgICAgICAgIHZhciBkb21haW4gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgaWYgKGExICYmIGExLmVudGl0eSkge1xuICAgICAgICAgICAgICAgICAgICBkb21haW4gPSBMaXN0QWxsLmluZmVyRG9tYWluKHRoZU1vZGVsLCBhMS5lbnRpdHkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIWRvbWFpbikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzID0gcmVzdHJpY3RMb2dnZWRPbihzZXNzaW9uLCB0aGVNb2RlbC5jYXRlZ29yeSkuam9pbihcIjtcXG5cIik7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhMSAmJiBhMS5lbnRpdHkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpYWxvZ2xvZyhcIkxpc3RBbGxcIiwgc2Vzc2lvbiwgc2VuZChcIkkgZGlkIG5vdCBpbmZlciBhIGRvbWFpbiByZXN0cmljdGlvbiBmcm9tIFxcXCJcIiArIGExLmVudGl0eSArIFwiXFxcIiwgYWxsIG15IGNhdGVnb3JpZXMgYXJlIC4uLlxcblwiICsgcmVzKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaWFsb2dsb2coXCJMaXN0QWxsXCIsIHNlc3Npb24sIHNlbmQoXCJteSBjYXRlZ29yaWVzIGFyZSAuLi5cXG5cIiArIHJlcykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhUmVzID0gTW9kZWwuZ2V0Q2F0ZWdvcmllc0ZvckRvbWFpbih0aGVNb2RlbCwgZG9tYWluKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlcyA9IHJlc3RyaWN0TG9nZ2VkT24oc2Vzc2lvbiwgYVJlcykuam9pbihcIjtcXG5cIik7XG4gICAgICAgICAgICAgICAgICAgIGRpYWxvZ2xvZyhcIkxpc3RBbGxcIiwgc2Vzc2lvbiwgc2VuZChcIm15IGNhdGVnb3JpZXMgaW4gZG9tYWluIFxcXCJcIiArIGRvbWFpbiArIFwiXFxcIiBhcmUgLi4uXFxuXCIgKyByZXMpKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjYXRlZ29yeSA9PT0gXCJkb21haW5zXCIpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVzID0gcmVzdHJpY3RMb2dnZWRPbihzZXNzaW9uLCB0aGVNb2RlbC5kb21haW5zKS5qb2luKFwiO1xcblwiKTtcbiAgICAgICAgICAgICAgICBkaWFsb2dsb2coXCJMaXN0QWxsXCIsIHNlc3Npb24sIHNlbmQoXCJteSBkb21haW5zIGFyZSAuLi5cXG5cIiArIHJlcykpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjYXRlZ29yeSA9PT0gXCJ0b29sc1wiKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlcyA9IHJlc3RyaWN0TG9nZ2VkT24oc2Vzc2lvbiwgdGhlTW9kZWwudG9vbHMpLm1hcChmdW5jdGlvbiAob1Rvb2wpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9Ub29sLm5hbWU7XG4gICAgICAgICAgICAgICAgfSkuam9pbihcIjtcXG5cIik7XG4gICAgICAgICAgICAgICAgZGlhbG9nbG9nKFwiTGlzdEFsbFwiLCBzZXNzaW9uLCBzZW5kKFwibXkgdG9vbHMgYXJlIC4uLlxcblwiICsgcmVzKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGNhdHMgPSBbXTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY2F0cyA9IFdoYXRJcy5hbmFseXplQ2F0ZWdvcnlNdWx0MihjYXRlZ29yeSwgdGhlTW9kZWwucnVsZXMsIG1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIGRlYnVnbG9nKFwiaGVyZSBjYXRzXCIgKyBjYXRzLmpvaW4oXCIsXCIpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVidWdsb2coXCJoZXJlIGV4Y2VwdGlvblwiICsgZSk7XG4gICAgICAgICAgICAgICAgICAgIGRpYWxvZ2xvZyhcIldoYXRJc1wiLCBzZXNzaW9uLCBzZW5kKCdJIGRvblxcJ3Qga25vdyBhbnl0aGluZyBhYm91dCBcIicgKyBjYXRlZ29yeSArICdcIignICsgZS50b1N0cmluZygpICsgJyknKSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIG5leHQoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghY2F0cyB8fCAoY2F0cy5sZW5ndGggPT09IDApKSB7XG4gICAgICAgICAgICAgICAgZGlhbG9nbG9nKFwiTGlzdEFsbFwiLCBzZXNzaW9uLCBzZW5kKCdJIGRvblxcJ3Qga25vdyBhbnl0aGluZyBhYm91dCBcIicgKyBjYXRlZ29yeSArICdcIicpKTtcbiAgICAgICAgICAgICAgICAvLyBuZXh0KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGNhdCA9IFwiXCI7XG4gICAgICAgICAgICBpZiAoY2F0cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICBjYXQgPSBjYXRzWzBdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNhdHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgZGVidWdsb2coJ2NhdGVnb3J5IGlkZW50aWZpZWQ6JyArIGNhdCk7XG4gICAgICAgICAgICAgICAgaWYgKGExICYmIGExLmVudGl0eSkge1xuICAgICAgICAgICAgICAgICAgICBkZWJ1Z2xvZygnZ290IGZpbHRlcjonICsgYTEuZW50aXR5KTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNhdGVnb3J5U2V0ID0gTW9kZWwuZ2V0QWxsUmVjb3JkQ2F0ZWdvcmllc0ZvclRhcmdldENhdGVnb3J5KHRoZU1vZGVsLCBjYXQsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0MSA9IExpc3RBbGwubGlzdEFsbFdpdGhDb250ZXh0KGNhdCwgYTEuZW50aXR5LCB0aGVNb2RlbC5ydWxlcywgdGhlTW9kZWwucmVjb3JkcywgY2F0ZWdvcnlTZXQpO1xuICAgICAgICAgICAgICAgICAgICAvLyBUT0RPIGNsYXNzaWZ5aW5nIHRoZSBzdHJpbmcgdHdpY2UgaXMgYSB0ZXJyaWJsZSB3YXN0ZVxuICAgICAgICAgICAgICAgICAgICBpZiAoIXJlc3VsdDEubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWJ1Z2xvZygnZ29pbmcgZm9yIGhhdmluZycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNhdGVnb3J5U2V0RnVsbCA9IE1vZGVsLmdldEFsbFJlY29yZENhdGVnb3JpZXNGb3JUYXJnZXRDYXRlZ29yeSh0aGVNb2RlbCwgY2F0LCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQxID0gTGlzdEFsbC5saXN0QWxsSGF2aW5nQ29udGV4dChjYXQsIGExLmVudGl0eSwgdGhlTW9kZWwucnVsZXMsIHRoZU1vZGVsLnJlY29yZHMsIGNhdGVnb3J5U2V0RnVsbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZGVidWdsb2coJ2xpc3RhbGwgcmVzdWx0OicgKyBKU09OLnN0cmluZ2lmeShyZXN1bHQxKSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBqb2lucmVzdWx0cyA9IHJlc3RyaWN0TG9nZ2VkT24oc2Vzc2lvbiwgTGlzdEFsbC5qb2luUmVzdWx0cyhyZXN1bHQxKSk7XG4gICAgICAgICAgICAgICAgICAgIGxvZ1F1ZXJ5V2hhdElzKHNlc3Npb24sICdMaXN0QWxsJywgcmVzdWx0MSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChqb2lucmVzdWx0cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpYWxvZ2xvZyhcIkxpc3RBbGxcIiwgc2Vzc2lvbiwgc2VuZChcInRoZSBcIiArIGNhdGVnb3J5ICsgXCIgZm9yIFwiICsgYTEuZW50aXR5ICsgXCIgYXJlIC4uLlxcblwiICsgam9pbnJlc3VsdHMuam9pbihcIjtcXG5cIikpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpYWxvZ2xvZyhcIkxpc3RBbGxcIiwgc2Vzc2lvbiwgc2VuZChcImkgZGlkIG5vdCBmaW5kIGFueSBcIiArIGNhdGVnb3J5ICsgXCIgZm9yIFwiICsgYTEuZW50aXR5ICsgXCIuXFxuXCIgKyBqb2lucmVzdWx0cy5qb2luKFwiO1xcblwiKSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIG5vIGVudGl0eSwgZS5nLiBsaXN0IGFsbCBjb3VudHJpZXNcbiAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgdmFyIGNhdGVnb3J5U2V0RnVsbCA9IE1vZGVsLmdldEFsbFJlY29yZENhdGVnb3JpZXNGb3JUYXJnZXRDYXRlZ29yeSh0aGVNb2RlbCwgY2F0LCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBMaXN0QWxsLmxpc3RBbGxIYXZpbmdDb250ZXh0KGNhdCwgY2F0LCB0aGVNb2RlbC5ydWxlcywgdGhlTW9kZWwucmVjb3JkcywgY2F0ZWdvcnlTZXRGdWxsKTtcbiAgICAgICAgICAgICAgICAgICAgbG9nUXVlcnlXaGF0SXMoc2Vzc2lvbiwgJ0xpc3RBbGwnLCByZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVidWdsb2coJ2xpc3RhbGwgcmVzdWx0OicgKyBKU09OLnN0cmluZ2lmeShyZXN1bHQpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBqb2lucmVzdWx0cyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVidWdsb2coXCJoZXJlIGlzIGNhdD5cIiArIGNhdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2F0ICE9PSBcImV4YW1wbGUgcXVlc3Rpb25cIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpvaW5yZXN1bHRzID0gcmVzdHJpY3RMb2dnZWRPbihzZXNzaW9uLCBMaXN0QWxsLmpvaW5SZXN1bHRzKHJlc3VsdCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgam9pbnJlc3VsdHMgPSBMaXN0QWxsLmpvaW5SZXN1bHRzKHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVzcG9uc2UgPSBcInRoZSBcIiArIGNhdGVnb3J5ICsgXCIgYXJlIC4uLlxcblwiICsgam9pbnJlc3VsdHMuam9pbihcIjtcXG5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaWFsb2dsb2coXCJMaXN0QWxsXCIsIHNlc3Npb24sIHNlbmQocmVzcG9uc2UpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXNwb25zZSA9IFwiRm91bmQgbm8gZGF0YSBoYXZpbmcgXFxcIlwiICsgY2F0ICsgXCJcXFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaWFsb2dsb2coXCJMaXN0QWxsXCIsIHNlc3Npb24sIHNlbmQocmVzcG9uc2UpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIG11bHRpcGxlIGNhdGVnb3JpZXNcbiAgICAgICAgICAgICAgICBkZWJ1Z2xvZygnY2F0ZWdvcmllcyBpZGVudGlmaWVkOicgKyBjYXRzLmpvaW4oXCIsXCIpKTtcbiAgICAgICAgICAgICAgICBpZiAoYTEgJiYgYTEuZW50aXR5KSB7XG4gICAgICAgICAgICAgICAgICAgIGRlYnVnbG9nKCdnb3QgZmlsdGVyOicgKyBhMS5lbnRpdHkpO1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNhdGVnb3J5U2V0ID0gTW9kZWwuZ2V0QWxsUmVjb3JkQ2F0ZWdvcmllc0ZvclRhcmdldENhdGVnb3JpZXModGhlTW9kZWwsIGNhdHMsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWJ1Z2xvZyhcImhlcmUgZXhjZXB0aW9uXCIgKyBlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpYWxvZ2xvZyhcIldoYXRJc1wiLCBzZXNzaW9uLCBzZW5kKCdJIGNhbm5vdCBjb21iaW5lIFwiJyArIGNhdGVnb3J5ICsgJygnICsgZS50b1N0cmluZygpICsgJyknKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdDFUID0gTGlzdEFsbC5saXN0QWxsVHVwZWxXaXRoQ29udGV4dChjYXRzLCBhMS5lbnRpdHksIHRoZU1vZGVsLnJ1bGVzLCB0aGVNb2RlbC5yZWNvcmRzLCBjYXRlZ29yeVNldCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRPRE8gY2xhc3NpZnlpbmcgdGhlIHN0cmluZyB0d2ljZSBpcyBhIHRlcnJpYmxlIHdhc3RlXG4gICAgICAgICAgICAgICAgICAgIGlmICghcmVzdWx0MVQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWJ1Z2xvZygnZ29pbmcgZm9yIGhhdmluZycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNhdGVnb3J5U2V0RnVsbCA9IE1vZGVsLmdldEFsbFJlY29yZENhdGVnb3JpZXNGb3JUYXJnZXRDYXRlZ29yaWVzKHRoZU1vZGVsLCBjYXRzLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQxVCA9IExpc3RBbGwubGlzdEFsbFR1cGVsSGF2aW5nQ29udGV4dChjYXRzLCBhMS5lbnRpdHksIHRoZU1vZGVsLnJ1bGVzLCB0aGVNb2RlbC5yZWNvcmRzLCBjYXRlZ29yeVNldEZ1bGwpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGRlYnVnbG9nKCdsaXN0YWxsIHJlc3VsdDonICsgSlNPTi5zdHJpbmdpZnkocmVzdWx0MVQpKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGpvaW5yZXN1bHRzID0gcmVzdHJpY3RMb2dnZWRPbihzZXNzaW9uLCBMaXN0QWxsLmpvaW5SZXN1bHRzVHVwZWwocmVzdWx0MVQpKTtcbiAgICAgICAgICAgICAgICAgICAgbG9nUXVlcnlXaGF0SXNUdXBlbChzZXNzaW9uLCAnTGlzdEFsbCcsIHJlc3VsdDFUKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGpvaW5yZXN1bHRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGlhbG9nbG9nKFwiTGlzdEFsbFwiLCBzZXNzaW9uLCBzZW5kKFwidGhlIFwiICsgY2F0ZWdvcnkgKyBcIiBmb3IgXCIgKyBhMS5lbnRpdHkgKyBcIiBhcmUgLi4uXFxuXCIgKyBqb2lucmVzdWx0cy5qb2luKFwiO1xcblwiKSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGlhbG9nbG9nKFwiTGlzdEFsbFwiLCBzZXNzaW9uLCBzZW5kKFwiaSBkaWQgbm90IGZpbmQgYW55IFwiICsgY2F0ZWdvcnkgKyBcIiBmb3IgXCIgKyBhMS5lbnRpdHkgKyBcIi5cXG5cIiArIGpvaW5yZXN1bHRzLmpvaW4oXCI7XFxuXCIpKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gbm8gZW50aXR5LCBlLmcuIGxpc3QgYWxsIGNvdW50cmllc1xuICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICB2YXIgY2F0ZWdvcnlTZXRGdWxsID0ge307XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRlZ29yeVNldEZ1bGwgPSBNb2RlbC5nZXRBbGxSZWNvcmRDYXRlZ29yaWVzRm9yVGFyZ2V0Q2F0ZWdvcmllcyh0aGVNb2RlbCwgY2F0cywgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWJ1Z2xvZyhcImhlcmUgZXhjZXB0aW9uXCIgKyBlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpYWxvZ2xvZyhcIldoYXRJc1wiLCBzZXNzaW9uLCBzZW5kKCdJIGNhbm5vdCBjb21iaW5lIFwiJyArIGNhdGVnb3J5ICsgJygnICsgZS50b1N0cmluZygpICsgJyknKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBuZXh0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdFQgPSBMaXN0QWxsLmxpc3RBbGxUdXBlbEhhdmluZ0NvbnRleHQoY2F0cywgXCJcXFwiXCIgKyBjYXRzLmpvaW4oXCJcXFwiIFxcXCJcIikgKyBcIlxcXCJcIiwgdGhlTW9kZWwucnVsZXMsIHRoZU1vZGVsLnJlY29yZHMsIGNhdGVnb3J5U2V0RnVsbCk7XG4gICAgICAgICAgICAgICAgICAgIGxvZ1F1ZXJ5V2hhdElzVHVwZWwoc2Vzc2lvbiwgJ0xpc3RBbGwnLCByZXN1bHRUKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdFQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWJ1Z2xvZygnbGlzdGFsbCByZXN1bHQ6JyArIEpTT04uc3RyaW5naWZ5KHJlc3VsdFQpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBqb2lucmVzdWx0cyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVidWdsb2coXCJoZXJlIGlzIGNhdD5cIiArIGNhdHMuam9pbihcIiwgXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjYXQgIT09IFwiZXhhbXBsZSBxdWVzdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgam9pbnJlc3VsdHMgPSByZXN0cmljdExvZ2dlZE9uKHNlc3Npb24sIExpc3RBbGwuam9pblJlc3VsdHNUdXBlbChyZXN1bHRUKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqb2lucmVzdWx0cyA9IExpc3RBbGwuam9pblJlc3VsdHNUdXBlbChyZXN1bHRUKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXNwb25zZSA9IFwidGhlIFwiICsgY2F0ZWdvcnkgKyBcIiBhcmUgLi4uXFxuXCIgKyBqb2lucmVzdWx0cy5qb2luKFwiO1xcblwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpYWxvZ2xvZyhcIkxpc3RBbGxcIiwgc2Vzc2lvbiwgc2VuZChyZXNwb25zZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3BvbnNlID0gXCJGb3VuZCBubyBkYXRhIGhhdmluZyBcXFwiXCIgKyBjYXQgKyBcIlxcXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpYWxvZ2xvZyhcIkxpc3RBbGxcIiwgc2Vzc2lvbiwgc2VuZChyZXNwb25zZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgXSk7XG4gICAgZGlhbG9nLm1hdGNoZXMoJ0Rlc2NyaWJlJywgW1xuICAgICAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgYXJncywgbmV4dCkge1xuICAgICAgICAgICAgdmFyIGlzQ29tYmluZWRJbmRleCA9IHt9O1xuICAgICAgICAgICAgdmFyIG9OZXdFbnRpdHk7XG4gICAgICAgICAgICAvLyBleHBlY3RpbmcgZW50aXR5IEExXG4gICAgICAgICAgICB2YXIgbWVzc2FnZSA9IHNlc3Npb24ubWVzc2FnZS50ZXh0O1xuICAgICAgICAgICAgZGVidWdsb2coXCJJbnRlbnQgOiBEZXNjcmliZVwiKTtcbiAgICAgICAgICAgIGRlYnVnbG9nKCdyYXc6ICcgKyBKU09OLnN0cmluZ2lmeShhcmdzLmVudGl0aWVzKSwgdW5kZWZpbmVkLCAyKTtcbiAgICAgICAgICAgIHZhciBmYWN0RW50aXR5ID0gYnVpbGRlci5FbnRpdHlSZWNvZ25pemVyLmZpbmRFbnRpdHkoYXJncy5lbnRpdGllcywgJ0ExJyk7XG4gICAgICAgICAgICB2YXIgZmFjdE9yQ2F0ID0gZmFjdEVudGl0eSAmJiBmYWN0RW50aXR5LmVudGl0eTtcbiAgICAgICAgICAgIHZhciBkb21haW5FbnRpdHkgPSBidWlsZGVyLkVudGl0eVJlY29nbml6ZXIuZmluZEVudGl0eShhcmdzLmVudGl0aWVzLCAnRCcpO1xuICAgICAgICAgICAgdmFyIGRvbWFpblMgPSBkb21haW5FbnRpdHkgJiYgZG9tYWluRW50aXR5LmVudGl0eTtcbiAgICAgICAgICAgIHZhciBmaWx0ZXJEb21haW4gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBpZiAoZG9tYWluUykge1xuICAgICAgICAgICAgICAgIGZpbHRlckRvbWFpbiA9IExpc3RBbGwuaW5mZXJEb21haW4odGhlTW9kZWwsIGRvbWFpblMpO1xuICAgICAgICAgICAgICAgIGRlYnVnbG9nKFwiZ290IGRvbWFpblwiICsgZmlsdGVyRG9tYWluKTtcbiAgICAgICAgICAgICAgICBpZiAoIWZpbHRlckRvbWFpbikge1xuICAgICAgICAgICAgICAgICAgICBkaWFsb2dsb2coXCJEZXNjcmliZVwiLCBzZXNzaW9uLCBzZW5kKFwiSSBkaWQgbm90IGluZmVyIGEgZG9tYWluIHJlc3RyaWN0aW9uIGZyb20gXFxcIlwiICsgZG9tYWluUyArIFwiXFxcIi4gU3BlY2lmeSBhbiBleGlzdGluZyBkb21haW4uIChMaXN0IGFsbCBkb21haW5zKSB0byBnZXQgZXhhY3QgbmFtZXMuXFxuXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlYnVnbG9nKFwiZmFjdE9yQ2F0IGlzXCIgKyBmYWN0T3JDYXQpO1xuICAgICAgICAgICAgaWYgKGV4cG9ydHMubWV0YXdvcmRzRGVzY3JpcHRpb25zW2ZhY3RPckNhdC50b0xvd2VyQ2FzZSgpXSkge1xuICAgICAgICAgICAgICAgIC8vIGRvIHdlIGhhdmUgYSBmaWx0ZXIgP1xuICAgICAgICAgICAgICAgIHZhciBwcmVmaXggPSBcIlwiO1xuICAgICAgICAgICAgICAgIGlmIChmaWx0ZXJEb21haW4pIHtcbiAgICAgICAgICAgICAgICAgICAgcHJlZml4ID0gJ1wiaW4gZG9tYWluIFwiJyArIGZpbHRlckRvbWFpbiArICdcIiBtYWtlIG5vIHNlbnNlIHdoZW4gbWF0Y2hpbmcgYSBtZXRhd29yZC5cXG4nO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkZWJ1Z2xvZyhcInNob3dpbmcgbWV0YSByZXN1bHRcIik7XG4gICAgICAgICAgICAgICAgZGlhbG9nbG9nKFwiRGVzY3JpYmVcIiwgc2Vzc2lvbiwgc2VuZChwcmVmaXggKyAnXCInICsgZmFjdE9yQ2F0ICsgJ1wiIGlzICcgKyBleHBvcnRzLm1ldGF3b3Jkc0Rlc2NyaXB0aW9uc1tmYWN0T3JDYXQudG9Mb3dlckNhc2UoKV0gKyBcIlwiKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGNhdGVnb3JpZXMgPSBbXTtcbiAgICAgICAgICAgIGlmIChXaGF0SXMuc3BsaXRBdENvbW1hQW5kKGZhY3RPckNhdCkubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgIGRpYWxvZ2xvZyhcIkRlc2NyaWJlXCIsIHNlc3Npb24sIHNlbmQoXCJXaG9hLCBpIGNhbiBvbmx5IGV4cGxhaW4gb25lIHRoaW5nIGF0IGEgdGltZSwgbm90IFxcXCJcIiArIGZhY3RPckNhdCArIFwiXFxcIi4gUGxlYXNlIGFzayBvbmUgYXQgYSB0aW1lLlwiKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGNhdGVnb3J5ID0gV2hhdElzLmFuYWx5emVDYXRlZ29yeShmYWN0T3JDYXQsIHRoZU1vZGVsLnJ1bGVzLCBtZXNzYWdlKTtcbiAgICAgICAgICAgIHZhciBjYXRSZXN1bHRzID0gW107XG4gICAgICAgICAgICBpZiAoY2F0ZWdvcnkpIHtcbiAgICAgICAgICAgICAgICAvL1RPRE9cbiAgICAgICAgICAgICAgICBjYXRSZXN1bHRzID0gRGVzY3JpYmUuZGVzY3JpYmVDYXRlZ29yeShjYXRlZ29yeSwgZmlsdGVyRG9tYWluLCB0aGVNb2RlbCwgbWVzc2FnZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgcmVzRmFjdCA9IERlc2NyaWJlLmRlc2NyaWJlRmFjdEluRG9tYWluKGZhY3RPckNhdCwgZmlsdGVyRG9tYWluLCB0aGVNb2RlbCk7XG4gICAgICAgICAgICBpZiAoY2F0UmVzdWx0cykge1xuICAgICAgICAgICAgICAgIHZhciBwcmVmaXhlZCA9IGNhdFJlc3VsdHMubWFwKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChEZXNjcmliZS5zbG9wcHlPckV4YWN0KGZhY3RPckNhdCwgY2F0ZWdvcnksIHRoZU1vZGVsKSArIFwiICBcIiArIHJlcyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY2F0UmVzdWx0cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICByZXNGYWN0ID0gcHJlZml4ZWQuam9pbihcIlxcblwiKTtcbiAgICAgICAgICAgICAgICArXCJcXG5cIiArIHJlc0ZhY3Q7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkaWFsb2dsb2coXCJEZXNjcmliZVwiLCBzZXNzaW9uLCBzZW5kKHJlc0ZhY3QpKTtcbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgdmFyIGFSZXMgPSBNb2RlbC5nZXRDYXRlZ29yaWVzRm9yRG9tYWluKHRoZU1vZGVsLCBkb21haW4pO1xuICAgICAgICAgICAgICAgICB2YXIgcmVzID0gcmVzdHJpY3RMb2dnZWRPbihzZXNzaW9uLCBhUmVzKS5qb2luKFwiO1xcblwiKTtcbiAgICAgICAgICAgICAgICBkaWFsb2dsb2coXCJMaXN0QWxsXCIsc2Vzc2lvbixzZW5kKFwibXkgY2F0ZWdvcmllcyBpbiBkb21haW4gXFxcIlwiICsgZG9tYWluICsgXCJcXFwiIGFyZSAuLi5cXG5cIiArIHJlcykpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNhdGVnb3J5ID09PSBcImRvbWFpbnNcIikge1xuICAgICAgICAgICAgICB2YXIgcmVzID0gcmVzdHJpY3RMb2dnZWRPbihzZXNzaW9uLCB0aGVNb2RlbC5kb21haW5zKS5qb2luKFwiO1xcblwiKTtcbiAgICAgICAgICAgICAgZGlhbG9nbG9nKFwiTGlzdEFsbFwiLHNlc3Npb24sIHNlbmQoXCJteSBkb21haW5zIGFyZSAuLi5cXG5cIiArIHJlcykpO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY2F0ZWdvcnkgPT09IFwidG9vbHNcIikge1xuICAgICAgICAgICAgICB2YXIgcmVzID0gcmVzdHJpY3RMb2dnZWRPbihzZXNzaW9uLCB0aGVNb2RlbC50b29scykubWFwKGZ1bmN0aW9uIChvVG9vbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvVG9vbC5uYW1lO1xuICAgICAgICAgICAgICB9KS5qb2luKFwiO1xcblwiKTtcbiAgICAgICAgICAgICAgZGlhbG9nbG9nKFwiTGlzdEFsbFwiLCBzZXNzaW9uLHNlbmQoXCJteSB0b29scyBhcmUgLi4uXFxuXCIgKyByZXMpKTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICB2YXIgY2F0cyA9IFtdO1xuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBjYXRzID0gV2hhdElzLmFuYWx5emVDYXRlZ29yeU11bHQyKGNhdGVnb3J5LCB0aGVNb2RlbC5ydWxlcywgbWVzc2FnZSk7XG4gICAgICAgICAgICAgIGRlYnVnbG9nKFwiaGVyZSBjYXRzXCIgKyBjYXRzLmpvaW4oXCIsXCIpKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBpZihlKSB7XG4gICAgICAgICAgICAgICAgICBkZWJ1Z2xvZyhcImhlcmUgZXhjZXB0aW9uXCIgKyBlKTtcbiAgICAgICAgICAgICAgICAgIGRpYWxvZ2xvZyhcIldoYXRJc1wiLHNlc3Npb24sc2VuZCgnSSBkb25cXCd0IGtub3cgYW55dGhpbmcgYWJvdXQgXCInICsgY2F0ZWdvcnkgKyAnXCIoJyArIGUudG9TdHJpbmcoKSArICcpJykpO1xuICAgICAgICAgICAgICAgICAgLy8gbmV4dCgpO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghY2F0cyB8fCAoY2F0cy5sZW5ndGggPT09IDApKSB7XG4gICAgICAgICAgICAgIGRpYWxvZ2xvZyhcIkxpc3RBbGxcIixzZXNzaW9uLHNlbmQoJ0kgZG9uXFwndCBrbm93IGFueXRoaW5nIGFib3V0IFwiJyArIGNhdGVnb3J5ICsgJ1wiJykpO1xuICAgICAgICAgICAgICAvLyBuZXh0KCk7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBjYXQgPSBcIlwiO1xuICAgICAgICAgICAgaWYoIGNhdHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgIGNhdCA9IGNhdHNbMF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiggY2F0cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgZGVidWdsb2coJ2NhdGVnb3J5IGlkZW50aWZpZWQ6JyArIGNhdCk7XG4gICAgICAgICAgICAgIGlmIChhMSAmJiBhMS5lbnRpdHkpIHtcbiAgICAgICAgICAgICAgICBkZWJ1Z2xvZygnZ290IGZpbHRlcjonICsgYTEuZW50aXR5KTtcbiAgICAgICAgICAgICAgICB2YXIgY2F0ZWdvcnlTZXQgPSBNb2RlbC5nZXRBbGxSZWNvcmRDYXRlZ29yaWVzRm9yVGFyZ2V0Q2F0ZWdvcnkodGhlTW9kZWwsIGNhdCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdDEgPSBMaXN0QWxsLmxpc3RBbGxXaXRoQ29udGV4dChjYXQsIGExLmVudGl0eSxcbiAgICAgICAgICAgICAgICAgIHRoZU1vZGVsLnJ1bGVzLCB0aGVNb2RlbC5yZWNvcmRzLCBjYXRlZ29yeVNldCk7XG4gICAgICAgICAgICAgICAgLy8gVE9ETyBjbGFzc2lmeWluZyB0aGUgc3RyaW5nIHR3aWNlIGlzIGEgdGVycmlibGUgd2FzdGVcbiAgICAgICAgICAgICAgICBpZiAoIXJlc3VsdDEubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICBkZWJ1Z2xvZygnZ29pbmcgZm9yIGhhdmluZycpO1xuICAgICAgICAgICAgICAgICAgdmFyIGNhdGVnb3J5U2V0RnVsbCA9IE1vZGVsLmdldEFsbFJlY29yZENhdGVnb3JpZXNGb3JUYXJnZXRDYXRlZ29yeSh0aGVNb2RlbCwgY2F0LCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICByZXN1bHQxID0gTGlzdEFsbC5saXN0QWxsSGF2aW5nQ29udGV4dChjYXQsIGExLmVudGl0eSwgdGhlTW9kZWwucnVsZXMsXG4gICAgICAgICAgICAgICAgICAgIHRoZU1vZGVsLnJlY29yZHMsIGNhdGVnb3J5U2V0RnVsbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRlYnVnbG9nKCdsaXN0YWxsIHJlc3VsdDonICsgSlNPTi5zdHJpbmdpZnkocmVzdWx0MSkpO1xuICAgICAgICAgICAgICAgIHZhciBqb2lucmVzdWx0cyA9IHJlc3RyaWN0TG9nZ2VkT24oc2Vzc2lvbiwgTGlzdEFsbC5qb2luUmVzdWx0cyhyZXN1bHQxKSk7XG4gICAgICAgICAgICAgICAgbG9nUXVlcnlXaGF0SXMoc2Vzc2lvbiwgJ0xpc3RBbGwnLCByZXN1bHQxKTtcbiAgICAgICAgICAgICAgICBpZihqb2lucmVzdWx0cy5sZW5ndGggKXtcbiAgICAgICAgICAgICAgICAgIGRpYWxvZ2xvZyhcIkxpc3RBbGxcIixzZXNzaW9uLHNlbmQoXCJ0aGUgXCIgKyBjYXRlZ29yeSArIFwiIGZvciBcIiArIGExLmVudGl0eSArIFwiIGFyZSAuLi5cXG5cIiArIGpvaW5yZXN1bHRzLmpvaW4oXCI7XFxuXCIpKSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGRpYWxvZ2xvZyhcIkxpc3RBbGxcIixzZXNzaW9uLHNlbmQoXCJpIGRpZCBub3QgZmluZCBhbnkgXCIgKyBjYXRlZ29yeSArIFwiIGZvciBcIiArIGExLmVudGl0eSArIFwiLlxcblwiICsgam9pbnJlc3VsdHMuam9pbihcIjtcXG5cIikpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIG5vIGVudGl0eSwgZS5nLiBsaXN0IGFsbCBjb3VudHJpZXNcbiAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgIHZhciBjYXRlZ29yeVNldEZ1bGwgPSBNb2RlbC5nZXRBbGxSZWNvcmRDYXRlZ29yaWVzRm9yVGFyZ2V0Q2F0ZWdvcnkodGhlTW9kZWwsIGNhdCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBMaXN0QWxsLmxpc3RBbGxIYXZpbmdDb250ZXh0KGNhdCwgY2F0LCB0aGVNb2RlbC5ydWxlcywgdGhlTW9kZWwucmVjb3JkcywgY2F0ZWdvcnlTZXRGdWxsKTtcbiAgICAgICAgICAgICAgICBsb2dRdWVyeVdoYXRJcyhzZXNzaW9uLCAnTGlzdEFsbCcsIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgIGRlYnVnbG9nKCdsaXN0YWxsIHJlc3VsdDonICsgSlNPTi5zdHJpbmdpZnkocmVzdWx0KSk7XG4gICAgICAgICAgICAgICAgICB2YXIgam9pbnJlc3VsdHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgIGRlYnVnbG9nKFwiaGVyZSBpcyBjYXQ+XCIgKyBjYXQpO1xuICAgICAgICAgICAgICAgICAgaWYoY2F0ICE9PSBcImV4YW1wbGUgcXVlc3Rpb25cIikge1xuICAgICAgICAgICAgICAgICAgICBqb2lucmVzdWx0cyA9IHJlc3RyaWN0TG9nZ2VkT24oc2Vzc2lvbiwgTGlzdEFsbC5qb2luUmVzdWx0cyhyZXN1bHQpKTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGpvaW5yZXN1bHRzID0gTGlzdEFsbC5qb2luUmVzdWx0cyhyZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgdmFyIHJlc3BvbnNlID0gXCJ0aGUgXCIgKyBjYXRlZ29yeSArIFwiIGFyZSAuLi5cXG5cIiArIGpvaW5yZXN1bHRzLmpvaW4oXCI7XFxuXCIpO1xuICAgICAgICAgICAgICAgICAgZGlhbG9nbG9nKFwiTGlzdEFsbFwiLHNlc3Npb24sc2VuZChyZXNwb25zZSkpO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICB2YXIgcmVzcG9uc2UgPSBcIkZvdW5kIG5vIGRhdGEgaGF2aW5nIFxcXCJcIiArIGNhdCArIFwiXFxcIlwiXG4gICAgICAgICAgICAgICAgICBkaWFsb2dsb2coXCJMaXN0QWxsXCIsc2Vzc2lvbixzZW5kKHJlc3BvbnNlKSk7XG4gICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBtdWx0aXBsZSBjYXRlZ29yaWVzXG4gICAgICAgICAgICAgIGRlYnVnbG9nKCdjYXRlZ29yaWVzIGlkZW50aWZpZWQ6JyArIGNhdHMuam9pbihcIixcIikpO1xuICAgICAgICAgICAgICBpZiAoYTEgJiYgYTEuZW50aXR5KSB7XG4gICAgICAgICAgICAgICAgZGVidWdsb2coJ2dvdCBmaWx0ZXI6JyArIGExLmVudGl0eSk7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB2YXIgY2F0ZWdvcnlTZXQgPSBNb2RlbC5nZXRBbGxSZWNvcmRDYXRlZ29yaWVzRm9yVGFyZ2V0Q2F0ZWdvcmllcyh0aGVNb2RlbCwgY2F0cywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlYnVnbG9nKFwiaGVyZSBleGNlcHRpb25cIiArIGUpO1xuICAgICAgICAgICAgICAgICAgICBkaWFsb2dsb2coXCJXaGF0SXNcIixzZXNzaW9uLHNlbmQoJ0kgY2Fubm90IGNvbWJpbmUgXCInICsgY2F0ZWdvcnkgKyAnKCcgKyBlLnRvU3RyaW5nKCkgKyAnKScpKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0MVQgPSBMaXN0QWxsLmxpc3RBbGxUdXBlbFdpdGhDb250ZXh0KGNhdHMsIGExLmVudGl0eSxcbiAgICAgICAgICAgICAgICAgIHRoZU1vZGVsLnJ1bGVzLCB0aGVNb2RlbC5yZWNvcmRzLCBjYXRlZ29yeVNldCk7XG4gICAgICAgICAgICAgICAgLy8gVE9ETyBjbGFzc2lmeWluZyB0aGUgc3RyaW5nIHR3aWNlIGlzIGEgdGVycmlibGUgd2FzdGVcbiAgICAgICAgICAgICAgICBpZiAoIXJlc3VsdDFULmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgZGVidWdsb2coJ2dvaW5nIGZvciBoYXZpbmcnKTtcbiAgICAgICAgICAgICAgICAgIHZhciBjYXRlZ29yeVNldEZ1bGwgPSBNb2RlbC5nZXRBbGxSZWNvcmRDYXRlZ29yaWVzRm9yVGFyZ2V0Q2F0ZWdvcmllcyh0aGVNb2RlbCwgY2F0cywgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgcmVzdWx0MVQgPSBMaXN0QWxsLmxpc3RBbGxUdXBlbEhhdmluZ0NvbnRleHQoY2F0cywgYTEuZW50aXR5LCB0aGVNb2RlbC5ydWxlcyxcbiAgICAgICAgICAgICAgICAgICAgdGhlTW9kZWwucmVjb3JkcywgY2F0ZWdvcnlTZXRGdWxsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGVidWdsb2coJ2xpc3RhbGwgcmVzdWx0OicgKyBKU09OLnN0cmluZ2lmeShyZXN1bHQxVCkpO1xuICAgICAgICAgICAgICAgIHZhciBqb2lucmVzdWx0cyA9IHJlc3RyaWN0TG9nZ2VkT24oc2Vzc2lvbiwgTGlzdEFsbC5qb2luUmVzdWx0c1R1cGVsKHJlc3VsdDFUKSk7XG4gICAgICAgICAgICAgICAgbG9nUXVlcnlXaGF0SXNUdXBlbChzZXNzaW9uLCAnTGlzdEFsbCcsIHJlc3VsdDFUKTtcbiAgICAgICAgICAgICAgICBpZihqb2lucmVzdWx0cy5sZW5ndGggKXtcbiAgICAgICAgICAgICAgICAgIGRpYWxvZ2xvZyhcIkxpc3RBbGxcIixzZXNzaW9uLHNlbmQoXCJ0aGUgXCIgKyBjYXRlZ29yeSArIFwiIGZvciBcIiArIGExLmVudGl0eSArIFwiIGFyZSAuLi5cXG5cIiArIGpvaW5yZXN1bHRzLmpvaW4oXCI7XFxuXCIpKSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGRpYWxvZ2xvZyhcIkxpc3RBbGxcIixzZXNzaW9uLHNlbmQoXCJpIGRpZCBub3QgZmluZCBhbnkgXCIgKyBjYXRlZ29yeSArIFwiIGZvciBcIiArIGExLmVudGl0eSArIFwiLlxcblwiICsgam9pbnJlc3VsdHMuam9pbihcIjtcXG5cIikpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIG5vIGVudGl0eSwgZS5nLiBsaXN0IGFsbCBjb3VudHJpZXNcbiAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgIHZhciBjYXRlZ29yeVNldEZ1bGwgPSB7fSBhcyB7IFtrZXkgOiBzdHJpbmddIDogYm9vbGVhbn07XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgIGNhdGVnb3J5U2V0RnVsbCA9IE1vZGVsLmdldEFsbFJlY29yZENhdGVnb3JpZXNGb3JUYXJnZXRDYXRlZ29yaWVzKHRoZU1vZGVsLCBjYXRzLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlYnVnbG9nKFwiaGVyZSBleGNlcHRpb25cIiArIGUpO1xuICAgICAgICAgICAgICAgICAgICBkaWFsb2dsb2coXCJXaGF0SXNcIixzZXNzaW9uLHNlbmQoJ0kgY2Fubm90IGNvbWJpbmUgXCInICsgY2F0ZWdvcnkgKyAnKCcgKyBlLnRvU3RyaW5nKCkgKyAnKScpKTtcbiAgICAgICAgICAgICAgICAvLyBuZXh0KCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdFQgPSBMaXN0QWxsLmxpc3RBbGxUdXBlbEhhdmluZ0NvbnRleHQoY2F0cywgXCJcXFwiXCIgKyBjYXRzLmpvaW4oXCJcXFwiIFxcXCJcIikgKyBcIlxcXCJcIiwgdGhlTW9kZWwucnVsZXMsIHRoZU1vZGVsLnJlY29yZHMsIGNhdGVnb3J5U2V0RnVsbCk7XG4gICAgICAgICAgICAgICAgbG9nUXVlcnlXaGF0SXNUdXBlbChzZXNzaW9uLCAnTGlzdEFsbCcsIHJlc3VsdFQpO1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHRULmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgZGVidWdsb2coJ2xpc3RhbGwgcmVzdWx0OicgKyBKU09OLnN0cmluZ2lmeShyZXN1bHRUKSk7XG4gICAgICAgICAgICAgICAgICB2YXIgam9pbnJlc3VsdHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgIGRlYnVnbG9nKFwiaGVyZSBpcyBjYXQ+XCIgKyBjYXRzLmpvaW4oXCIsIFwiKSk7XG4gICAgICAgICAgICAgICAgICBpZihjYXQgIT09IFwiZXhhbXBsZSBxdWVzdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGpvaW5yZXN1bHRzID0gcmVzdHJpY3RMb2dnZWRPbihzZXNzaW9uLCBMaXN0QWxsLmpvaW5SZXN1bHRzVHVwZWwocmVzdWx0VCkpO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgam9pbnJlc3VsdHMgPSBMaXN0QWxsLmpvaW5SZXN1bHRzVHVwZWwocmVzdWx0VCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB2YXIgcmVzcG9uc2UgPSBcInRoZSBcIiArIGNhdGVnb3J5ICsgXCIgYXJlIC4uLlxcblwiICsgam9pbnJlc3VsdHMuam9pbihcIjtcXG5cIik7XG4gICAgICAgICAgICAgICAgICBkaWFsb2dsb2coXCJMaXN0QWxsXCIsc2Vzc2lvbixzZW5kKHJlc3BvbnNlKSk7XG4gICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHZhciByZXNwb25zZSA9IFwiRm91bmQgbm8gZGF0YSBoYXZpbmcgXFxcIlwiICsgY2F0ICsgXCJcXFwiXCJcbiAgICAgICAgICAgICAgICAgIGRpYWxvZ2xvZyhcIkxpc3RBbGxcIixzZXNzaW9uLHNlbmQocmVzcG9uc2UpKTtcbiAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgKi9cbiAgICAgICAgfVxuICAgIF0pO1xuICAgIGRpYWxvZy5tYXRjaGVzKCdMaXN0QWxsQmluT3AnLCBbXG4gICAgICAgIGZ1bmN0aW9uIChzZXNzaW9uLCBhcmdzLCBuZXh0KSB7XG4gICAgICAgICAgICB2YXIgaXNDb21iaW5lZEluZGV4ID0ge307XG4gICAgICAgICAgICB2YXIgb05ld0VudGl0eTtcbiAgICAgICAgICAgIC8vIGV4cGVjdGluZyBlbnRpdHkgQTFcbiAgICAgICAgICAgIHZhciBtZXNzYWdlID0gc2Vzc2lvbi5tZXNzYWdlLnRleHQ7XG4gICAgICAgICAgICBkZWJ1Z2xvZyhcIkludGVudCA6IExpc3RBbGxCaW5PcFwiKTtcbiAgICAgICAgICAgIGRlYnVnbG9nKCdyYXc6ICcgKyBKU09OLnN0cmluZ2lmeShhcmdzLmVudGl0aWVzKSwgdW5kZWZpbmVkLCAyKTtcbiAgICAgICAgICAgIHZhciBjYXRlZ29yeUVudGl0eSA9IGJ1aWxkZXIuRW50aXR5UmVjb2duaXplci5maW5kRW50aXR5KGFyZ3MuZW50aXRpZXMsICdjYXRlZ29yeScpO1xuICAgICAgICAgICAgdmFyIGNhdGVnb3J5V29yZCA9IGNhdGVnb3J5RW50aXR5LmVudGl0eTtcbiAgICAgICAgICAgIHZhciBvcEVudGl0eSA9IGJ1aWxkZXIuRW50aXR5UmVjb2duaXplci5maW5kRW50aXR5KGFyZ3MuZW50aXRpZXMsICdvcGVyYXRvcicpO1xuICAgICAgICAgICAgdmFyIG9wZXJhdG9yV29yZCA9IG9wRW50aXR5ICYmIG9wRW50aXR5LmVudGl0eTtcbiAgICAgICAgICAgIC8vIGNhdGVnb3JpemUgYXMgb3BlcmF0b3IgP1xuICAgICAgICAgICAgdmFyIGZpbHRlckRvbWFpbkVudGl0eSA9IGJ1aWxkZXIuRW50aXR5UmVjb2duaXplci5maW5kRW50aXR5KGFyZ3MuZW50aXRpZXMsICdkb21haW4nKTtcbiAgICAgICAgICAgIHZhciBmaWx0ZXJEb21haW5TID0gZmlsdGVyRG9tYWluRW50aXR5ICYmIGZpbHRlckRvbWFpbkVudGl0eS5lbnRpdHk7XG4gICAgICAgICAgICB2YXIgb3BlcmF0b3IgPSBXaGF0SXMuYW5hbHl6ZU9wZXJhdG9yKG9wZXJhdG9yV29yZCwgdGhlTW9kZWwucnVsZXMsIG1lc3NhZ2UpO1xuICAgICAgICAgICAgdmFyIGNhdGVnb3J5ID0gV2hhdElzLmFuYWx5emVDYXRlZ29yeShjYXRlZ29yeVdvcmQsIHRoZU1vZGVsLnJ1bGVzLCBtZXNzYWdlKTtcbiAgICAgICAgICAgIHZhciBvcGVyYXRvckFyZ3MgPSBNb2RlbC5nZXRPcGVyYXRvcih0aGVNb2RlbCwgb3BlcmF0b3IpO1xuICAgICAgICAgICAgdmFyIGEyID0gYnVpbGRlci5FbnRpdHlSZWNvZ25pemVyLmZpbmRFbnRpdHkoYXJncy5lbnRpdGllcywgJ0EyJyk7XG4gICAgICAgICAgICBpZiAoIW9wZXJhdG9yKSB7XG4gICAgICAgICAgICAgICAgdmFyIHMgPSBcIlVua25vd24gb3BlcmF0b3IgXCIgKyBvcGVyYXRvcldvcmQgKyBcIiwgdGhpcyBpcyBhIG1vZGVsIGJ1ZywgY2hlY2sgb3BlcmF0b3JzLmpzb24gYW5kIGludGVudHMuanNvblwiO1xuICAgICAgICAgICAgICAgIGRpYWxvZ2xvZyhcIkxpc3RBbGxCaW5PcFwiLCBzZXNzaW9uLCBzZW5kKFwib3VjaCwgdGhpcyB3YXMgaW4gaW50ZXJuYWwgZXJyb3IuIFJlY292ZXJpbmcgZnJvbSBhIHdlaXJkIG9wZXJhdG9yIFxcXCJcIlxuICAgICAgICAgICAgICAgICAgICArIG9wZXJhdG9yV29yZCArIFwiXFxcIlxcblwiKSk7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGZpbHRlckRvbWFpbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGlmIChmaWx0ZXJEb21haW5TKSB7XG4gICAgICAgICAgICAgICAgZGVidWdsb2coXCJmb3VuZCBhIGRvbWFpblN0cmluZ1wiICsgZmlsdGVyRG9tYWluUyk7XG4gICAgICAgICAgICAgICAgZmlsdGVyRG9tYWluID0gTGlzdEFsbC5pbmZlckRvbWFpbih0aGVNb2RlbCwgZmlsdGVyRG9tYWluUyk7XG4gICAgICAgICAgICAgICAgZGVidWdsb2coXCJnb3QgZG9tYWluXCIgKyBmaWx0ZXJEb21haW4pO1xuICAgICAgICAgICAgICAgIGlmICghZmlsdGVyRG9tYWluKSB7XG4gICAgICAgICAgICAgICAgICAgIGRpYWxvZ2xvZyhcIkRlc2NyaWJlXCIsIHNlc3Npb24sIHNlbmQoXCJJIGRpZCBub3QgaW5mZXIgYSBkb21haW4gcmVzdHJpY3Rpb24gZnJvbSBcXFwiXCIgKyBmaWx0ZXJEb21haW5TICsgXCJcXFwiLiBTcGVjaWZ5IGFuIGV4aXN0aW5nIGRvbWFpbi4gKExpc3QgYWxsIGRvbWFpbnMpIHRvIGdldCBleGFjdCBuYW1lcy5cXG5cIikpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGZyYWdtZW50ID0gYTIgJiYgYTIuZW50aXR5O1xuICAgICAgICAgICAgZnJhZ21lbnQgPSBCcmVha0Rvd24udHJpbVF1b3RlZChCcmVha0Rvd24udHJpbVF1b3RlZFNwYWNlZChmcmFnbWVudCkpO1xuICAgICAgICAgICAgZGVidWdsb2coXCJmcmFnbWVudCBhZnRlciB0cmltbWluZyBcXFwiXCIgKyBmcmFnbWVudCArIFwiXFxcIlwiKTtcbiAgICAgICAgICAgIGlmIChjYXRlZ29yeVdvcmQgPT09IFwiY2F0ZWdvcmllc1wiKSB7XG4gICAgICAgICAgICAgICAgLy8gZG8gd2UgaGF2ZSBhIGZpbHRlcj9cbiAgICAgICAgICAgICAgICB2YXIgYUZpbHRlcmVkQ2F0ZWdvcmllcyA9IExpc3RBbGwuZmlsdGVyU3RyaW5nTGlzdEJ5T3Aob3BlcmF0b3JBcmdzLCBmcmFnbWVudCwgdGhlTW9kZWwuY2F0ZWdvcnkpO1xuICAgICAgICAgICAgICAgIGlmIChmaWx0ZXJEb21haW4pIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNhdHNGb3JEb21haW4gPSBNb2RlbC5nZXRDYXRlZ29yaWVzRm9yRG9tYWluKHRoZU1vZGVsLCBmaWx0ZXJEb21haW4pO1xuICAgICAgICAgICAgICAgICAgICBhRmlsdGVyZWRDYXRlZ29yaWVzID0gXy5pbnRlcnNlY3Rpb24oYUZpbHRlcmVkQ2F0ZWdvcmllcywgY2F0c0ZvckRvbWFpbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlcyA9IHJlc3RyaWN0TG9nZ2VkT24oc2Vzc2lvbiwgYUZpbHRlcmVkQ2F0ZWdvcmllcykuam9pbihcIjtcXG5cIik7XG4gICAgICAgICAgICAgICAgaWYgKHJlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpbHRlckRvbWFpbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGlhbG9nbG9nKFwiTGlzdEFsbEJpbk9wXCIsIHNlc3Npb24sIHNlbmQoKFwibXkgY2F0ZWdvcmllcyBcIiArIG9wZXJhdG9yICsgXCIgXFxcIlwiICsgZnJhZ21lbnQgKyBcIlxcXCIgaW4gZG9tYWluIFxcXCJcIiArIGZpbHRlckRvbWFpbiArIFwiXFxcIiBhcmUgLi4uXFxuXCIpICsgcmVzKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaWFsb2dsb2coXCJMaXN0QWxsQmluT3BcIiwgc2Vzc2lvbiwgc2VuZCgoXCJteSBjYXRlZ29yaWVzIFwiICsgb3BlcmF0b3IgKyBcIiBcXFwiXCIgKyBmcmFnbWVudCArIFwiXFxcIiBhcmUgLi4uXFxuXCIpICsgcmVzKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGRpYWxvZ2xvZyhcIkxpc3RBbGxCaW5PcFwiLCBzZXNzaW9uLCBzZW5kKCdJIGhhdmUgbm8gY2F0ZWdvcmllcyAnICsgb3BlcmF0b3IgKyAnIFwiJyArIGZyYWdtZW50ICsgJ1wiJykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjYXRlZ29yeVdvcmQgPT09IFwiZG9tYWluc1wiKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFSZXMgPSBMaXN0QWxsLmZpbHRlclN0cmluZ0xpc3RCeU9wKG9wZXJhdG9yQXJncywgZnJhZ21lbnQsIHRoZU1vZGVsLmRvbWFpbnMpO1xuICAgICAgICAgICAgICAgIHJlcyA9IHJlc3RyaWN0TG9nZ2VkT24oc2Vzc2lvbiwgYVJlcykuam9pbihcIjtcXG5cIik7XG4gICAgICAgICAgICAgICAgaWYgKHJlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgZGlhbG9nbG9nKFwiTGlzdEFsbEJpbk9wXCIsIHNlc3Npb24sIHNlbmQoXCJteSBkb21haW5zIFwiICsgb3BlcmF0b3IgKyAnIFwiJyArIGZyYWdtZW50ICsgJ1wiIGFyZSAuLi5cXG4nICsgcmVzKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBkaWFsb2dsb2coXCJMaXN0QWxsQmluT3BcIiwgc2Vzc2lvbiwgc2VuZCgnSSBoYXZlIG5vIGRvbWFpbnMgJyArIG9wZXJhdG9yICsgJyBcIicgKyBmcmFnbWVudCArICdcIicpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2F0ZWdvcnlXb3JkID09PSBcInRvb2xzXCIpIHtcbiAgICAgICAgICAgICAgICB2YXIgYVJlcyA9IExpc3RBbGwuZmlsdGVyU3RyaW5nTGlzdEJ5T3Aob3BlcmF0b3JBcmdzLCBmcmFnbWVudCwgdGhlTW9kZWwudG9vbHMubWFwKGZ1bmN0aW9uIChvVG9vbCkgeyByZXR1cm4gb1Rvb2wubmFtZTsgfSkpO1xuICAgICAgICAgICAgICAgIHZhciByZXMgPSByZXN0cmljdExvZ2dlZE9uKHNlc3Npb24sIGFSZXMpLmpvaW4oXCI7XFxuXCIpO1xuICAgICAgICAgICAgICAgIGlmIChyZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIGRpYWxvZ2xvZyhcIkxpc3RBbGxCaW5PcFwiLCBzZXNzaW9uLCBzZW5kKFwibXkgdG9vbHMgXCIgKyBvcGVyYXRvciArICcgXCInICsgZnJhZ21lbnQgKyAnXCIgYXJlIC4uLlxcbicgKyByZXMpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGRpYWxvZ2xvZyhcIkxpc3RBbGxCaW5PcFwiLCBzZXNzaW9uLCBzZW5kKFwiSSBoYXZlIG5vIHRvb2xzIFwiICsgb3BlcmF0b3IgKyAnIFwiJyArIGZyYWdtZW50ICsgJ1wiJykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgY2F0ID0gV2hhdElzLmFuYWx5emVDYXRlZ29yeShjYXRlZ29yeVdvcmQsIHRoZU1vZGVsLnJ1bGVzLCBtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICBpZiAoIWNhdCkge1xuICAgICAgICAgICAgICAgICAgICBkaWFsb2dsb2coXCJMaXN0QWxsQmluT3BcIiwgc2Vzc2lvbiwgc2VuZCgnSSBkb25cXCd0IGtub3cgYW55dGhpbmcgYWJvdXQgXCInICsgY2F0ZWdvcnlXb3JkICsgJ1wiJykpO1xuICAgICAgICAgICAgICAgICAgICAvLyBuZXh0KCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGVidWdsb2coJ2NhdGVnb3J5IGlkZW50aWZpZWQ6JyArIGNhdCk7XG4gICAgICAgICAgICAgICAgdmFyIGFSZXMgPSBMaXN0QWxsLmdldENhdGVnb3J5T3BGaWx0ZXJBc0Rpc3RpbmN0U3RyaW5ncyhvcGVyYXRvckFyZ3MsIGZyYWdtZW50LCBjYXRlZ29yeSwgdGhlTW9kZWwucmVjb3JkcywgZmlsdGVyRG9tYWluKTtcbiAgICAgICAgICAgICAgICB2YXIgcmVzID0gcmVzdHJpY3RMb2dnZWRPbihzZXNzaW9uLCBhUmVzKS5qb2luKFwiO1xcblwiKTtcbiAgICAgICAgICAgICAgICB2YXIgaW5maXhFeHBsYWluID0gJyc7XG4gICAgICAgICAgICAgICAgaWYgKCFMaXN0QWxsLmxpa2VseVBsdXJhbERpZmYoY2F0ZWdvcnksIGNhdGVnb3J5V29yZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5maXhFeHBsYWluID0gJyhcIicgKyBjYXRlZ29yeSArICdcIiknO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocmVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZmlsdGVyRG9tYWluKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaWFsb2dsb2coXCJMaXN0QWxsQmluT3BcIiwgc2Vzc2lvbiwgc2VuZCgoXCJteSBcIiArIGNhdGVnb3J5V29yZCArIGluZml4RXhwbGFpbiArIFwiIFwiICsgb3BlcmF0b3IgKyBcIiBcXFwiXCIgKyBmcmFnbWVudCArIFwiXFxcIiBpbiBkb21haW4gXFxcIlwiICsgZmlsdGVyRG9tYWluICsgXCJcXFwiIGFyZSAuLi5cXG5cIikgKyByZXMpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpYWxvZ2xvZyhcIkxpc3RBbGxCaW5PcFwiLCBzZXNzaW9uLCBzZW5kKChcIm15IFwiICsgY2F0ZWdvcnlXb3JkICsgaW5maXhFeHBsYWluICsgXCIgXCIgKyBvcGVyYXRvciArIFwiIFxcXCJcIiArIGZyYWdtZW50ICsgXCJcXFwiIGFyZSAuLi5cXG5cIikgKyByZXMpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZGlhbG9nbG9nKFwiTGlzdEFsbEJpbk9wXCIsIHNlc3Npb24sIHNlbmQoJ0kgaGF2ZSBubyAnICsgY2F0ZWdvcnlXb3JkICsgaW5maXhFeHBsYWluICsgJyAnICsgb3BlcmF0b3IgKyAnIFwiJyArIGZyYWdtZW50ICsgJ1wiJykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBdKTtcbiAgICBkaWFsb2cubWF0Y2hlcygnVHJhaW5NZScsIFtcbiAgICAgICAgZnVuY3Rpb24gKHNlc3Npb24sIGFyZ3MsIG5leHQpIHtcbiAgICAgICAgICAgIHZhciBpc0NvbWJpbmVkSW5kZXggPSB7fTtcbiAgICAgICAgICAgIHZhciBvTmV3RW50aXR5O1xuICAgICAgICAgICAgLy8gZXhwZWN0aW5nIGVudGl0eSBBMVxuICAgICAgICAgICAgdmFyIG1lc3NhZ2UgPSBzZXNzaW9uLm1lc3NhZ2UudGV4dDtcbiAgICAgICAgICAgIGRlYnVnbG9nKFwiSW50ZW50IDogVHJhaW5cIik7XG4gICAgICAgICAgICBkZWJ1Z2xvZygncmF3OiAnICsgSlNPTi5zdHJpbmdpZnkoYXJncy5lbnRpdGllcyksIHVuZGVmaW5lZCwgMik7XG4gICAgICAgICAgICB2YXIgY2F0ZWdvcnlFbnRpdHkgPSBidWlsZGVyLkVudGl0eVJlY29nbml6ZXIuZmluZEVudGl0eShhcmdzLmVudGl0aWVzLCAnY2F0ZWdvcmllcycpO1xuICAgICAgICAgICAgaWYgKG1lc3NhZ2UudG9Mb3dlckNhc2UoKS5pbmRleE9mKFwia3Jvbm9zXCIpID49IDAgfHwgbWVzc2FnZS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoXCJrbGluZ29uXCIpID49IDApIHtcbiAgICAgICAgICAgICAgICBkaWFsb2dsb2coXCJUcmFpbk1lXCIsIHNlc3Npb24sIHNlbmQoZ2V0UmFuZG9tUmVzdWx0KGFUcmFpbk5vS2xpbmdvbikpKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgcmVzID0gZ2V0UmFuZG9tUmVzdWx0KGFUcmFpblJlcGxpZXMpO1xuICAgICAgICAgICAgZGlhbG9nbG9nKFwiVHJhaW5NZVwiLCBzZXNzaW9uLCBzZW5kKHJlcykpO1xuICAgICAgICB9XG4gICAgXSk7XG4gICAgZGlhbG9nLm1hdGNoZXMoJ1Rvb0xvbmcnLCBbXG4gICAgICAgIGZ1bmN0aW9uIChzZXNzaW9uLCBhcmdzLCBuZXh0KSB7XG4gICAgICAgICAgICB2YXIgaXNDb21iaW5lZEluZGV4ID0ge307XG4gICAgICAgICAgICB2YXIgb05ld0VudGl0eTtcbiAgICAgICAgICAgIC8vIGV4cGVjdGluZyBlbnRpdHkgQTFcbiAgICAgICAgICAgIHZhciBtZXNzYWdlID0gc2Vzc2lvbi5tZXNzYWdlLnRleHQ7XG4gICAgICAgICAgICBkZWJ1Z2xvZyhcIkludGVudCA6IFRvb0xvbmdcIik7XG4gICAgICAgICAgICBkZWJ1Z2xvZygncmF3OiAnICsgSlNPTi5zdHJpbmdpZnkoYXJncy5lbnRpdGllcyksIHVuZGVmaW5lZCwgMik7XG4gICAgICAgICAgICB2YXIgY2F0ZWdvcnlFbnRpdHkgPSBidWlsZGVyLkVudGl0eVJlY29nbml6ZXIuZmluZEVudGl0eShhcmdzLmVudGl0aWVzLCAnY2F0ZWdvcmllcycpO1xuICAgICAgICAgICAgZGlhbG9nbG9nKFwiVG9vTG9uZ1wiLCBzZXNzaW9uLCBzZW5kKGdldFJhbmRvbVJlc3VsdChleHBvcnRzLmFSZXNwb25zZXNPblRvb0xvbmcpKSk7XG4gICAgICAgIH1cbiAgICBdKTtcbiAgICBkaWFsb2cubWF0Y2hlcygnV3JvbmcnLCBbXG4gICAgICAgIGZ1bmN0aW9uIChzZXNzaW9uLCBhcmdzLCBuZXh0KSB7XG4gICAgICAgICAgICBkaWFsb2dMb2dnZXIoe1xuICAgICAgICAgICAgICAgIHNlc3Npb246IHNlc3Npb24sXG4gICAgICAgICAgICAgICAgaW50ZW50OiBcIldyb25nXCIsXG4gICAgICAgICAgICAgICAgcmVzcG9uc2U6ICc8YmVnaW4gdXBkb3duPidcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgc2Vzc2lvbi5iZWdpbkRpYWxvZygnL3VwZG93bicsIHNlc3Npb24udXNlckRhdGEuY291bnQpO1xuICAgICAgICB9LFxuICAgICAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgcmVzdWx0cywgbmV4dCkge1xuICAgICAgICAgICAgdmFyIGFsYXJtID0gc2Vzc2lvbi5kaWFsb2dEYXRhLmFsYXJtO1xuICAgICAgICAgICAgbmV4dCgpO1xuICAgICAgICB9LFxuICAgICAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgcmVzdWx0cykge1xuICAgICAgICAgICAgc2Vzc2lvbi5zZW5kKGdldFJhbmRvbVJlc3VsdChhQmFja0Zyb21UcmFpbmluZykpOyAvLyAgKyBKU09OLnN0cmluZ2lmeShyZXN1bHRzKSk7XG4gICAgICAgICAgICAvL3Nlc3Npb24uc2VuZCgnZW5kIG9mIHdyb25nJyk7XG4gICAgICAgIH1cbiAgICBdKTtcbiAgICBkaWFsb2cubWF0Y2hlcygnRXhpdCcsIFtcbiAgICAgICAgZnVuY3Rpb24gKHNlc3Npb24sIGFyZ3MsIG5leHQpIHtcbiAgICAgICAgICAgIGRlYnVnbG9nKCdleGl0IDonKTtcbiAgICAgICAgICAgIGRlYnVnbG9nKCdleGl0JyArIEpTT04uc3RyaW5naWZ5KGFyZ3MuZW50aXRpZXMpKTtcbiAgICAgICAgICAgIGRpYWxvZ0xvZ2dlcih7XG4gICAgICAgICAgICAgICAgc2Vzc2lvbjogc2Vzc2lvbixcbiAgICAgICAgICAgICAgICBpbnRlbnQ6IFwiRXhpdFwiLFxuICAgICAgICAgICAgICAgIHJlc3BvbnNlOiAneW91IGFyZSBpbiBhIGxvZ2ljIGxvb3AnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHNlc3Npb24uc2VuZChcInlvdSBhcmUgaW4gYSBsb2dpYyBsb29wIFwiKTtcbiAgICAgICAgfVxuICAgIF0pO1xuICAgIGRpYWxvZy5tYXRjaGVzKCdIZWxwJywgW1xuICAgICAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgYXJncywgbmV4dCkge1xuICAgICAgICAgICAgZGVidWdsb2coJ2hlbHAgOicpO1xuICAgICAgICAgICAgZGVidWdsb2coJ2hlbHAnKTtcbiAgICAgICAgICAgIHNlc3Npb24uc2VuZChcIkkga25vdyBhYm91dCAuLi4uIDxjYXRlZ29yaWVzPj5cIik7XG4gICAgICAgIH1cbiAgICBdKTtcbiAgICAvLyBBZGQgaW50ZW50IGhhbmRsZXJzXG4gICAgZGlhbG9nLm1hdGNoZXMoJ3RyYWluJywgW1xuICAgICAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgYXJncywgbmV4dCkge1xuICAgICAgICAgICAgZGVidWdsb2coJ3RyYWluJyk7XG4gICAgICAgICAgICAvLyBSZXNvbHZlIGFuZCBzdG9yZSBhbnkgZW50aXRpZXMgcGFzc2VkIGZyb20gTFVJUy5cbiAgICAgICAgICAgIHZhciB0aXRsZSA9IGJ1aWxkZXIuRW50aXR5UmVjb2duaXplci5maW5kRW50aXR5KGFyZ3MuZW50aXRpZXMsICdidWlsdGluLmFsYXJtLnRpdGxlJyk7XG4gICAgICAgICAgICB2YXIgdGltZSA9IGJ1aWxkZXIuRW50aXR5UmVjb2duaXplci5yZXNvbHZlVGltZShhcmdzLmVudGl0aWVzKTtcbiAgICAgICAgICAgIHZhciBhbGFybSA9IHNlc3Npb24uZGlhbG9nRGF0YS5hbGFybSA9IHtcbiAgICAgICAgICAgICAgICB0aXRsZTogdGl0bGUgPyB0aXRsZS5lbnRpdHkgOiBudWxsLFxuICAgICAgICAgICAgICAgIHRpbWVzdGFtcDogdGltZSA/IHRpbWUuZ2V0VGltZSgpIDogbnVsbFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8vIFByb21wdCBmb3IgdGl0bGVcbiAgICAgICAgICAgIGlmICghYWxhcm0udGl0bGUpIHtcbiAgICAgICAgICAgICAgICBkaWFsb2dMb2dnZXIoe1xuICAgICAgICAgICAgICAgICAgICBzZXNzaW9uOiBzZXNzaW9uLFxuICAgICAgICAgICAgICAgICAgICBpbnRlbnQ6IFwidHJhaW5cIixcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2U6ICdXaGF0IGZhY3Qgd291bGQgeW91IGxpa2UgdG8gdHJhaW4/J1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGJ1aWxkZXIuUHJvbXB0cy50ZXh0KHNlc3Npb24sICdXaGF0IGZhY3Qgd291bGQgeW91IGxpa2UgdG8gdHJhaW4/Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBuZXh0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGZ1bmN0aW9uIChzZXNzaW9uLCByZXN1bHRzLCBuZXh0KSB7XG4gICAgICAgICAgICB2YXIgYWxhcm0gPSBzZXNzaW9uLmRpYWxvZ0RhdGEuYWxhcm07XG4gICAgICAgICAgICBpZiAocmVzdWx0cy5yZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIGFsYXJtLnRpdGxlID0gcmVzdWx0cy5yZXNwb25zZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFByb21wdCBmb3IgdGltZSAodGl0bGUgd2lsbCBiZSBibGFuayBpZiB0aGUgdXNlciBzYWlkIGNhbmNlbClcbiAgICAgICAgICAgIGlmIChhbGFybS50aXRsZSAmJiAhYWxhcm0udGltZXN0YW1wKSB7XG4gICAgICAgICAgICAgICAgYnVpbGRlci5Qcm9tcHRzLnRpbWUoc2Vzc2lvbiwgJ1doYXQgdGltZSB3b3VsZCB5b3UgbGlrZSB0byBzZXQgdGhlIGFsYXJtIGZvcj8nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG5leHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZnVuY3Rpb24gKHNlc3Npb24sIHJlc3VsdHMpIHtcbiAgICAgICAgICAgIHZhciBhbGFybSA9IHNlc3Npb24uZGlhbG9nRGF0YS5hbGFybTtcbiAgICAgICAgICAgIGlmIChyZXN1bHRzLnJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRpbWUgPSBidWlsZGVyLkVudGl0eVJlY29nbml6ZXIucmVzb2x2ZVRpbWUoW3Jlc3VsdHMucmVzcG9uc2VdKTtcbiAgICAgICAgICAgICAgICBhbGFybS50aW1lc3RhbXAgPSB0aW1lID8gdGltZS5nZXRUaW1lKCkgOiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gU2V0IHRoZSBhbGFybSAoaWYgdGl0bGUgb3IgdGltZXN0YW1wIGlzIGJsYW5rIHRoZSB1c2VyIHNhaWQgY2FuY2VsKVxuICAgICAgICAgICAgaWYgKGFsYXJtLnRpdGxlICYmIGFsYXJtLnRpbWVzdGFtcCkge1xuICAgICAgICAgICAgICAgIC8vIFNhdmUgYWRkcmVzcyBvZiB3aG8gdG8gbm90aWZ5IGFuZCB3cml0ZSB0byBzY2hlZHVsZXIuXG4gICAgICAgICAgICAgICAgYWxhcm0uYWRkcmVzcyA9IHNlc3Npb24ubWVzc2FnZS5hZGRyZXNzO1xuICAgICAgICAgICAgICAgIC8vYWxhcm1zW2FsYXJtLnRpdGxlXSA9IGFsYXJtO1xuICAgICAgICAgICAgICAgIC8vIFNlbmQgY29uZmlybWF0aW9uIHRvIHVzZXJcbiAgICAgICAgICAgICAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKGFsYXJtLnRpbWVzdGFtcCk7XG4gICAgICAgICAgICAgICAgdmFyIGlzQU0gPSBkYXRlLmdldEhvdXJzKCkgPCAxMjtcbiAgICAgICAgICAgICAgICBzZXNzaW9uLnNlbmQoJ0NyZWF0aW5nIGFsYXJtIG5hbWVkIFwiJXNcIiBmb3IgJWQvJWQvJWQgJWQ6JTAyZCVzJywgYWxhcm0udGl0bGUsIGRhdGUuZ2V0TW9udGgoKSArIDEsIGRhdGUuZ2V0RGF0ZSgpLCBkYXRlLmdldEZ1bGxZZWFyKCksIGlzQU0gPyBkYXRlLmdldEhvdXJzKCkgOiBkYXRlLmdldEhvdXJzKCkgLSAxMiwgZGF0ZS5nZXRNaW51dGVzKCksIGlzQU0gPyAnYW0nIDogJ3BtJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzZXNzaW9uLnNlbmQoJ09rLi4uIG5vIHByb2JsZW0uJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBdKTtcbiAgICBkaWFsb2cub25EZWZhdWx0KGZ1bmN0aW9uIChzZXNzaW9uKSB7XG4gICAgICAgIGxvZ1F1ZXJ5KHNlc3Npb24sIFwib25EZWZhdWx0XCIpO1xuICAgICAgICB2YXIgZWxpemEgPSBnZXRFbGl6YUJvdChnZXRDb252ZXJzYXRpb25JZChzZXNzaW9uKSk7XG4gICAgICAgIHZhciByZXBseSA9IGVsaXphLnRyYW5zZm9ybShzZXNzaW9uLm1lc3NhZ2UudGV4dCk7XG4gICAgICAgIGRpYWxvZ2xvZyhcImVsaXphXCIsIHNlc3Npb24sIHNlbmQocmVwbHkpKTtcbiAgICAgICAgLy9uZXcgRWlsemFib3RcbiAgICAgICAgLy9zZXNzaW9uLnNlbmQoXCJJIGRvIG5vdCB1bmRlcnN0YW5kIHRoaXMgYXQgYWxsXCIpO1xuICAgICAgICAvL2J1aWxkZXIuRGlhbG9nQWN0aW9uLnNlbmQoJ0lcXCdtIHNvcnJ5IEkgZGlkblxcJ3QgdW5kZXJzdGFuZC4gSSBjYW4gb25seSBzaG93IHN0YXJ0IGFuZCByaW5nJyk7XG4gICAgfSk7XG4gICAgLypcbiAgICAvLyBWZXJ5IHNpbXBsZSBhbGFybSBzY2hlZHVsZXJcbiAgICB2YXIgYWxhcm1zID0ge307XG4gICAgc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIG5vdyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgZm9yICh2YXIga2V5IGluIGFsYXJtcykge1xuICAgICAgICB2YXIgYWxhcm0gPSBhbGFybXNba2V5XTtcbiAgICAgICAgaWYgKG5vdyA+PSBhbGFybS50aW1lc3RhbXApIHtcbiAgICAgICAgICB2YXIgbXNnID0gbmV3IGJ1aWxkZXIuTWVzc2FnZSgpXG4gICAgICAgICAgICAuYWRkcmVzcyhhbGFybS5hZGRyZXNzKVxuICAgICAgICAgICAgLnRleHQoJ0hlcmVcXCdzIHlvdXIgXFwnJXNcXCcgYWxhcm0uJywgYWxhcm0udGl0bGUpO1xuICAgICAgICAgIGJvdC5zZW5kKG1zZyk7XG4gICAgICAgICAgZGVsZXRlIGFsYXJtc1trZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwgMTUwMDApO1xuICAgICovXG59XG5pZiAobW9kdWxlKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgICAgIFNpbXBsZVVwRG93blJlY29nbml6ZXI6IFNpbXBsZVVwRG93blJlY29nbml6ZXIsXG4gICAgICAgIGFSZXNwb25zZXNPblRvb0xvbmc6IGV4cG9ydHMuYVJlc3BvbnNlc09uVG9vTG9uZyxcbiAgICAgICAgbWV0YXdvcmRzRGVzY3JpcHRpb25zOiBleHBvcnRzLm1ldGF3b3Jkc0Rlc2NyaXB0aW9ucyxcbiAgICAgICAgbWFrZUJvdDogbWFrZUJvdFxuICAgIH07XG59XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
