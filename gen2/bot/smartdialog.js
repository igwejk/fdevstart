/**
 * The bot implementation
 *
 * Instantiate apssing a connector via
 * makeBot
 *
 */
/**
 * @file
 * @module jfseb.fdevstart.smartdialog
 * @copyright (c) 2016 Gerd Forstmann
 */
"use strict";

var builder = require('botbuilder');
var debug = require('debug');
var Exec = require('../exec/exec');
var Match = require('../match/match');
var Analyze = require('../match/analyze');
var debuglog = debug('smartdialog');
var PlainRecognizer = require('./plainrecognizer');
//var builder = require('botbuilder');
var dispatcher = require('../match/dispatcher.js').dispatcher;
var Tools = require('../match/tools');
var tools = Tools.getTools();
var InputFilterRules = require('../match/inputFilterRules.js');
var mRules = InputFilterRules.getMRulesSample();
var SimpleRecognizer = function () {
    function SimpleRecognizer() {}
    SimpleRecognizer.prototype.recognize = function (context, callback) {
        var u = {};
        console.log("recognizing " + context.message.text);
        if (context.message.text.indexOf("start") >= 0) {
            u.intent = "ShowEntity";
            u.score = 0.9;
            var e1 = {};
            e1.startIndex = "start ".length;
            e1.endIndex = context.message.text.length;
            e1.score = 0.3;
            u.entities = [e1];
            callback(undefined, u);
            return;
        }
        if (context.message.text.indexOf("train") >= 0) {
            u.intent = "train";
            u.score = 0.9;
            var e1 = {};
            e1.startIndex = "train ".length;
            e1.endIndex = context.message.text.length;
            e1.score = 0.3;
            u.entities = [e1];
            callback(undefined, u);
            return;
        }
        if (context.message.text.indexOf("learn") >= 0) {
            u.intent = "learn";
            u.score = 0.9;
            var e1 = {};
            e1.type = "trainFact";
            e1.startIndex = "train ".length;
            e1.endIndex = context.message.text.length;
            e1.score = 0.3;
            u.entities = [e1];
            callback(undefined, u);
            return;
        }
        if (context.message.text.indexOf("help") >= 0) {
            u.intent = "help";
            u.score = 0.9;
            var e1 = {};
            e1.startIndex = "train ".length;
            e1.endIndex = context.message.text.length;
            e1.score = 0.3;
            u.entities = [e1];
            callback(undefined, u);
            return;
        }
        if (context.message.text.indexOf("exit") >= 0) {
            u.intent = "exit";
            u.score = 0.9;
            var e1 = {};
            e1.startIndex = "exit ".length;
            e1.endIndex = context.message.text.length;
            e1.score = 0.3;
            u.entities = [e1];
            callback(undefined, u);
            return;
        }
        if (context.message.text.indexOf("wrong") >= 0) {
            u.intent = "wrong";
            u.score = 0.9;
            var e1 = {};
            e1.startIndex = "exit ".length;
            e1.endIndex = context.message.text.length;
            e1.score = 0.3;
            u.entities = [e1];
            callback(undefined, u);
            return;
        }
        console.log('recognizing nothing');
        u.intent = "None";
        u.score = 0.1;
        var e1 = {};
        e1.startIndex = "exit ".length;
        e1.endIndex = context.message.text.length;
        e1.score = 0.1;
        u.entities = [];
        callback(undefined, u);
    };
    return SimpleRecognizer;
}();
var SimpleUpDownRecognizer = function () {
    function SimpleUpDownRecognizer() {}
    SimpleUpDownRecognizer.prototype.recognize = function (context, callback) {
        var u = {};
        console.log("recognizing " + context.message.text);
        if (context.message.text.indexOf("down") >= 0) {
            u.intent = "intent.down";
            u.score = 0.9;
            var e1 = {};
            e1.startIndex = "start ".length;
            e1.endIndex = context.message.text.length;
            e1.score = 0.3;
            u.entities = [e1];
            callback(undefined, u);
            return;
        }
        if (context.message.text.indexOf("up") >= 0) {
            u.intent = "intent.up";
            u.score = 0.9;
            var e1 = {};
            e1.startIndex = "up".length;
            e1.endIndex = context.message.text.length;
            e1.score = 0.3;
            u.entities = [e1];
            callback(undefined, u);
            return;
        }
        console.log('recognizing nothing');
        u.intent = "None";
        u.score = 0.1;
        var e1 = {};
        e1.startIndex = "exit ".length;
        e1.endIndex = context.message.text.length;
        e1.score = 0.1;
        u.entities = [];
        callback(undefined, u);
    };
    return SimpleUpDownRecognizer;
}();
var AnyObject = Object;
// globalTunnel.initialize({
//  host: 'proxy.exxxample.com',
//  port: 8080
// })
// Create bot and bind to console
// var connector = new htmlconnector.HTMLConnector()
// connector.setAnswerHook(function (sAnswer) {
//  console.log('Got answer : ' + sAnswer + '\n')
// })
var bot;
// setTimeout(function () {
//   connector.processMessage('start unit test ABC ')
// }, 5000)
var fs = require('fs');
var oJSON = JSON.parse('' + fs.readFileSync('./resources/model/intents.json'));
var oRules = PlainRecognizer.parseRules(oJSON);
// var Recognizer = new (recognizer.RegExpRecognizer)(oRules);
function logQuery(session, intent, result) {
    fs.appendFile('./logs/showmequeries.txt', "\n" + JSON.stringify({
        text: session.message.text,
        timestamp: session.message.timestamp,
        intent: intent,
        res: result && result.length && Match.ToolMatch.dumpNice(result[0]) || "0",
        conversationId: session.message.address && session.message.address.conversation && session.message.address.conversation.id || "",
        userid: session.message.address && session.message.address.user && session.message.address.user.id || ""
    }), function (err, res) {
        if (err) {
            debuglog("logging failed " + err);
        }
    });
}
/**
 * Construct a bot
 * @param connector {Connector} the connector to use
 * HTMLConnector
 * or connector = new builder.ConsoleConnector().listen()
 */
function makeBot(connector) {
    bot = new builder.UniversalBot(connector);
    // Create LUIS recognizer that points at our model and add it as the root '/' dialog for our Cortana Bot.
    // var model = sensitive.modelurl;
    // var model = 'https://api.projectoxford.ai/luis/v2.0/apps/c413b2ef-382c-45bd-8ff0-f76d60e2a821?subscription-key=c21398b5980a4ce09f474bbfee93b892&q='
    var recognizer = new PlainRecognizer.RegExpRecognizer(oRules);
    var dialog = new builder.IntentDialog({ recognizers: [recognizer] });
    // dialog.onBegin(function(session,args) {
    // console.log("beginning ...")
    // session.dialogData.retryPrompt = args && args.retryPrompt || "I am sorry"
    // session.send("What do you want?")
    //
    // })
    var dialogUpDown = new builder.IntentDialog({ recognizers: [new SimpleUpDownRecognizer()] });
    bot.dialog('/updown', dialogUpDown);
    dialogUpDown.onBegin(function (session) {
        session.send("Hi there, updown is waiting for you");
    });
    dialogUpDown.matches('intent.up', [function (session, args, next) {
        session.dialogData.abc = args || {};
        builder.Prompts.text(session, 'you want to go up');
    }, function (session, results, next) {
        session.dialogData.abc = results.reponse;
        next();
    }, function (session, results) {
        session.endDialogWithResult({ response: session.dialogData.abc });
    }]);
    dialogUpDown.matches('intent.down', [function (session, args, next) {
        session.dialogData.abc = args || {};
        builder.Prompts.text(session, 'you want to go down!');
    }, function (session, results, next) {
        session.dialogData.abc = -1; // results.reponse;
        next();
    }, function (session, results) {
        session.send("still going down?");
    }]);
    dialogUpDown.onDefault(function (session) {
        logQuery(session, "onDefault");
        session.send("You are trapped in a dialog which only understands up and down, one of them will get you out");
        //builder.DialogAction.send('I\'m sorry I didn\'t understand. I can only show start and ring');
    });
    bot.dialog('/train', [function (session, args, next) {
        session.dialgoData.abc = args || {};
        builder.Prompts.text(session, 'Do you want to train me');
    }, function (session, results, next) {
        session.dialogData.abc = results.reponse;
    }, function (session, results) {
        session.endDialogWithResult({ response: session.DialogData.abc });
    }]);
    bot.dialog('/', dialog);
    dialog.matches('ShowMe', [function (session, args, next) {
        var isCombinedIndex = {};
        var oNewEntity;
        // expecting entity A1
        debuglog("Show Entity");
        console.log('raw: ' + JSON.stringify(args.entities), undefined, 2);
        var a1 = builder.EntityRecognizer.findEntity(args.entities, 'A1');
        /*
              var client = builder.EntityRecognizer.findEntity(args.entities, 'client');
              var systemObjectId = builder.EntityRecognizer.findEntity(combinedEntities, 'systemObjectId') ||
                builder.EntityRecognizer.findEntity(combinedEntities, 'SystemObject') ||
                builder.EntityRecognizer.findEntity(combinedEntities, 'builtin.number');
              var systemObjectCategory = builder.EntityRecognizer.findEntity(args.entities, 'SystemObjectCategory');
                     session.dialogData.system = {
                systemId: systemId,
                client: client
              };
        */
        /*
              var sSystemId = systemId && systemId.entity;
              var sClient = client && client.entity;
              var ssystemObjectId = systemObjectId && systemObjectId.entity;
              var sSystemObjectCategory = systemObjectCategory && systemObjectCategory.entity;
        */
        var result = Analyze.analyzeAll(a1.entity, mRules, tools);
        logQuery(session, 'ShowMe', result);
        // test.expect(3)
        //  test.deepEqual(result.weight, 120, 'correct weight');
        if (!result || result.length === 0) {
            next();
        }
        // debuglog('result : ' + JSON.stringify(result, undefined, 2));
        debuglog('best result : ' + JSON.stringify(result[0] || {}, undefined, 2));
        debuglog('top : ' + Match.ToolMatch.dumpWeightsTop(result, { top: 3 }));
        if (Analyze.isComplete(result[0])) {
            session.dialogData.result = result[0];
            session.send('Showing entity ...');
            next();
        } else if (Analyze.getPrompt(result[0])) {
            var prompt = Analyze.getPrompt(result[0]);
            session.dialogData.result = result[0];
            session.dialogData.prompt = prompt;
            session.send("Not enough information supplied: " + Match.ToolMatch.dumpNice(session.dialogData.result));
            builder.Prompts.text(session, prompt.text);
        } else {
            var best = result.length ? Match.ToolMatch.dumpNice(result[0]) : "<nothing>";
            //session.send('I did not understand this' + best);
            var reply = new builder.Message(session).text('I did not understand this' + best).addEntity({ url: "I don't know" });
            // .addAttachment({ fallbackText: "I don't know", contentType: 'image/jpeg', contentUrl: "www.wombat.org" });
            session.send(reply);
        }
        /*
              console.log('Show entities: ' + JSON.stringify(args.entities, undefined, 2));
                     // do the big analyis ...
                    var u = dispatcher.execShowEntity({
                systemId: sSystemId,
                client: sClient,
                tool: sTool,
                systemObjectCategory: sSystemObjectCategory,
                systemObjectId: ssystemObjectId
              })
        */
        //  session.send('Showing entity ...');
        //  console.log("show entity, Show session : " + JSON.stringify(session))
        // console.log("Show entity : " + JSON.stringify(args.entities))
    }, function (session, results, next) {
        var result = session.dialogData.result;
        if (!result || result.length === 0) {
            next();
        }
        if (results.response) {
            // some prompting
            Analyze.setPrompt(session.dialogData.result, session.dialogData.prompt, results.response);
        }
        if (Analyze.isComplete(session.dialogData.result)) {
            next();
        } else if (Analyze.getPrompt(session.dialogData.result)) {
            var prompt = Analyze.getPrompt(session.dialogData.result);
            session.dialogData.prompt = prompt;
            builder.Prompts.text(session, prompt.text);
        }
    }, function (session, results, next) {
        var result = session.dialogData.result;
        if (results.response) {
            // some prompting
            Analyze.setPrompt(session.dialogData.result, session.dialogData.prompt, results.response);
        }
        if (Analyze.isComplete(session.dialogData.result)) {
            session.send("starting  > " + Exec.execTool(session.dialogData.result));
        } else {
            if (session.dialogData.result) {
                session.send("Not enough information supplied: " + Match.ToolMatch.dumpNice(session.dialogData.result));
            } else {
                session.send("I did not get what you want");
            }
        }
    }]);
    dialog.matches('Wrong', [function (session, args, next) {
        session.beginDialog('/updown', session.userData.count);
    }, function (session, results, next) {
        var alarm = session.dialogData.alarm;
        session.send("back from wrong : " + JSON.stringify(results));
        next();
    }, function (session, results) {
        session.send('end of wrong');
    }]);
    dialog.matches('Exit', [function (session, args, next) {
        console.log('exit :');
        console.log('exit' + JSON.stringify(args.entities));
        session.send("you are in a logic loop ");
    }]);
    dialog.matches('Help', [function (session, args, next) {
        console.log('help :');
        console.log('help');
        session.send("I know about .... <categories>>");
    }]);
    // Add intent handlers
    dialog.matches('train', [function (session, args, next) {
        console.log('train');
        // Resolve and store any entities passed from LUIS.
        var title = builder.EntityRecognizer.findEntity(args.entities, 'builtin.alarm.title');
        var time = builder.EntityRecognizer.resolveTime(args.entities);
        var alarm = session.dialogData.alarm = {
            title: title ? title.entity : null,
            timestamp: time ? time.getTime() : null
        };
        // Prompt for title
        if (!alarm.title) {
            builder.Prompts.text(session, 'What fact would you like to train?');
        } else {
            next();
        }
    }, function (session, results, next) {
        var alarm = session.dialogData.alarm;
        if (results.response) {
            alarm.title = results.response;
        }
        // Prompt for time (title will be blank if the user said cancel)
        if (alarm.title && !alarm.timestamp) {
            builder.Prompts.time(session, 'What time would you like to set the alarm for?');
        } else {
            next();
        }
    }, function (session, results) {
        var alarm = session.dialogData.alarm;
        if (results.response) {
            var time = builder.EntityRecognizer.resolveTime([results.response]);
            alarm.timestamp = time ? time.getTime() : null;
        }
        // Set the alarm (if title or timestamp is blank the user said cancel)
        if (alarm.title && alarm.timestamp) {
            // Save address of who to notify and write to scheduler.
            alarm.address = session.message.address;
            //alarms[alarm.title] = alarm;
            // Send confirmation to user
            var date = new Date(alarm.timestamp);
            var isAM = date.getHours() < 12;
            session.send('Creating alarm named "%s" for %d/%d/%d %d:%02d%s', alarm.title, date.getMonth() + 1, date.getDate(), date.getFullYear(), isAM ? date.getHours() : date.getHours() - 12, date.getMinutes(), isAM ? 'am' : 'pm');
        } else {
            session.send('Ok... no problem.');
        }
    }]);
    dialog.onDefault(function (session) {
        logQuery(session, "onDefault");
        session.send("I do not understand this at all");
        //builder.DialogAction.send('I\'m sorry I didn\'t understand. I can only show start and ring');
    });
    /*
    // Very simple alarm scheduler
    var alarms = {};
    setInterval(function () {
      var now = new Date().getTime();
      for (var key in alarms) {
        var alarm = alarms[key];
        if (now >= alarm.timestamp) {
          var msg = new builder.Message()
            .address(alarm.address)
            .text('Here\'s your \'%s\' alarm.', alarm.title);
          bot.send(msg);
          delete alarms[key];
        }
      }
    }, 15000);
    */
}
if (module) {
    module.exports = {
        makeBot: makeBot
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9ib3Qvc21hcnRkaWFsb2cudHMiLCJib3Qvc21hcnRkaWFsb2cuanMiXSwibmFtZXMiOlsiYnVpbGRlciIsInJlcXVpcmUiLCJkZWJ1ZyIsIkV4ZWMiLCJNYXRjaCIsIkFuYWx5emUiLCJkZWJ1Z2xvZyIsIlBsYWluUmVjb2duaXplciIsImRpc3BhdGNoZXIiLCJUb29scyIsInRvb2xzIiwiZ2V0VG9vbHMiLCJJbnB1dEZpbHRlclJ1bGVzIiwibVJ1bGVzIiwiZ2V0TVJ1bGVzU2FtcGxlIiwiU2ltcGxlUmVjb2duaXplciIsInByb3RvdHlwZSIsInJlY29nbml6ZSIsImNvbnRleHQiLCJjYWxsYmFjayIsInUiLCJjb25zb2xlIiwibG9nIiwibWVzc2FnZSIsInRleHQiLCJpbmRleE9mIiwiaW50ZW50Iiwic2NvcmUiLCJlMSIsInN0YXJ0SW5kZXgiLCJsZW5ndGgiLCJlbmRJbmRleCIsImVudGl0aWVzIiwidW5kZWZpbmVkIiwidHlwZSIsIlNpbXBsZVVwRG93blJlY29nbml6ZXIiLCJBbnlPYmplY3QiLCJPYmplY3QiLCJib3QiLCJmcyIsIm9KU09OIiwiSlNPTiIsInBhcnNlIiwicmVhZEZpbGVTeW5jIiwib1J1bGVzIiwicGFyc2VSdWxlcyIsImxvZ1F1ZXJ5Iiwic2Vzc2lvbiIsInJlc3VsdCIsImFwcGVuZEZpbGUiLCJzdHJpbmdpZnkiLCJ0aW1lc3RhbXAiLCJyZXMiLCJUb29sTWF0Y2giLCJkdW1wTmljZSIsImNvbnZlcnNhdGlvbklkIiwiYWRkcmVzcyIsImNvbnZlcnNhdGlvbiIsImlkIiwidXNlcmlkIiwidXNlciIsImVyciIsIm1ha2VCb3QiLCJjb25uZWN0b3IiLCJVbml2ZXJzYWxCb3QiLCJyZWNvZ25pemVyIiwiUmVnRXhwUmVjb2duaXplciIsImRpYWxvZyIsIkludGVudERpYWxvZyIsInJlY29nbml6ZXJzIiwiZGlhbG9nVXBEb3duIiwib25CZWdpbiIsInNlbmQiLCJtYXRjaGVzIiwiYXJncyIsIm5leHQiLCJkaWFsb2dEYXRhIiwiYWJjIiwiUHJvbXB0cyIsInJlc3VsdHMiLCJyZXBvbnNlIiwiZW5kRGlhbG9nV2l0aFJlc3VsdCIsInJlc3BvbnNlIiwib25EZWZhdWx0IiwiZGlhbGdvRGF0YSIsIkRpYWxvZ0RhdGEiLCJpc0NvbWJpbmVkSW5kZXgiLCJvTmV3RW50aXR5IiwiYTEiLCJFbnRpdHlSZWNvZ25pemVyIiwiZmluZEVudGl0eSIsImFuYWx5emVBbGwiLCJlbnRpdHkiLCJkdW1wV2VpZ2h0c1RvcCIsInRvcCIsImlzQ29tcGxldGUiLCJnZXRQcm9tcHQiLCJwcm9tcHQiLCJiZXN0IiwicmVwbHkiLCJNZXNzYWdlIiwiYWRkRW50aXR5IiwidXJsIiwic2V0UHJvbXB0IiwiZXhlY1Rvb2wiLCJiZWdpbkRpYWxvZyIsInVzZXJEYXRhIiwiY291bnQiLCJhbGFybSIsInRpdGxlIiwidGltZSIsInJlc29sdmVUaW1lIiwiZ2V0VGltZSIsImRhdGUiLCJEYXRlIiwiaXNBTSIsImdldEhvdXJzIiwiZ2V0TW9udGgiLCJnZXREYXRlIiwiZ2V0RnVsbFllYXIiLCJnZXRNaW51dGVzIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7QUFPQTs7Ozs7QUNLQTs7QURFQSxJQUFZQSxVQUFPQyxRQUFNLFlBQU4sQ0FBbkI7QUFFQSxJQUFZQyxRQUFLRCxRQUFNLE9BQU4sQ0FBakI7QUFFQSxJQUFZRSxPQUFJRixRQUFNLGNBQU4sQ0FBaEI7QUFDQSxJQUFZRyxRQUFLSCxRQUFNLGdCQUFOLENBQWpCO0FBRUEsSUFBWUksVUFBT0osUUFBTSxrQkFBTixDQUFuQjtBQUVBLElBQUlLLFdBQVdKLE1BQU0sYUFBTixDQUFmO0FBQ0EsSUFBWUssa0JBQWVOLFFBQU0sbUJBQU4sQ0FBM0I7QUFDQTtBQUVBLElBQUlPLGFBQWFQLFFBQVEsd0JBQVIsRUFBa0NPLFVBQW5EO0FBSUEsSUFBWUMsUUFBS1IsUUFBTSxnQkFBTixDQUFqQjtBQUVBLElBQU1TLFFBQVFELE1BQU1FLFFBQU4sRUFBZDtBQUNBLElBQU1D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LEVBQVk7QUFDVkEsV0FBT0MsT0FBUCxHQUFpQjtBQUNmNUQsaUJBQVNBO0FBRE0sS0FBakI7QUFHRCIsImZpbGUiOiJib3Qvc21hcnRkaWFsb2cuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoZSBib3QgaW1wbGVtZW50YXRpb25cbiAqXG4gKiBJbnN0YW50aWF0ZSBhcHNzaW5nIGEgY29ubmVjdG9yIHZpYVxuICogbWFrZUJvdFxuICpcbiAqL1xuLyoqXG4gKiBAZmlsZVxuICogQG1vZHVsZSBqZnNlYi5mZGV2c3RhcnQuc21hcnRkaWFsb2dcbiAqIEBjb3B5cmlnaHQgKGMpIDIwMTYgR2VyZCBGb3JzdG1hbm5cbiAqL1xuXG5cbmltcG9ydCAqIGFzIGJ1aWxkZXIgZnJvbSAnYm90YnVpbGRlcic7XG5cbmltcG9ydCAqIGFzIGRlYnVnIGZyb20gJ2RlYnVnJztcblxuaW1wb3J0ICogYXMgRXhlYyBmcm9tICcuLi9leGVjL2V4ZWMnO1xuaW1wb3J0ICogYXMgTWF0Y2ggZnJvbSAnLi4vbWF0Y2gvbWF0Y2gnO1xuXG5pbXBvcnQgKiBhcyBBbmFseXplIGZyb20gJy4uL21hdGNoL2FuYWx5emUnO1xuXG5sZXQgZGVidWdsb2cgPSBkZWJ1Zygnc21hcnRkaWFsb2cnKTtcbmltcG9ydCAqIGFzIFBsYWluUmVjb2duaXplciBmcm9tICcuL3BsYWlucmVjb2duaXplcic7XG4vL3ZhciBidWlsZGVyID0gcmVxdWlyZSgnYm90YnVpbGRlcicpO1xuXG52YXIgZGlzcGF0Y2hlciA9IHJlcXVpcmUoJy4uL21hdGNoL2Rpc3BhdGNoZXIuanMnKS5kaXNwYXRjaGVyO1xuXG5cbmltcG9ydCAqIGFzIElNYXRjaCBmcm9tICcuLi9tYXRjaC9pZm1hdGNoJztcbmltcG9ydCAqIGFzIFRvb2xzIGZyb20gJy4uL21hdGNoL3Rvb2xzJztcblxuY29uc3QgdG9vbHMgPSBUb29scy5nZXRUb29scygpO1xuY29uc3QgSW5wdXRGaWx0ZXJSdWxlcyA9IHJlcXVpcmUoJy4uL21hdGNoL2lucHV0RmlsdGVyUnVsZXMuanMnKTtcbmNvbnN0IG1SdWxlcyA9IElucHV0RmlsdGVyUnVsZXMuZ2V0TVJ1bGVzU2FtcGxlKCk7XG5cblxuXG5jbGFzcyBTaW1wbGVSZWNvZ25pemVyIGltcGxlbWVudHMgYnVpbGRlci5JSW50ZW50UmVjb2duaXplciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuXG4gIH1cblxuICByZWNvZ25pemUoY29udGV4dDogYnVpbGRlci5JUmVjb2duaXplQ29udGV4dCwgY2FsbGJhY2s6IChlcnI6IEVycm9yLCByZXN1bHQ6IGJ1aWxkZXIuSUludGVudFJlY29nbml6ZXJSZXN1bHQpID0+IHZvaWQpOiB2b2lkIHtcbiAgICB2YXIgdSA9IHt9IGFzIGJ1aWxkZXIuSUludGVudFJlY29nbml6ZXJSZXN1bHQ7XG5cbiAgICBjb25zb2xlLmxvZyhcInJlY29nbml6aW5nIFwiICsgY29udGV4dC5tZXNzYWdlLnRleHQpO1xuICAgIGlmIChjb250ZXh0Lm1lc3NhZ2UudGV4dC5pbmRleE9mKFwic3RhcnRcIikgPj0gMCkge1xuICAgICAgdS5pbnRlbnQgPSBcIlNob3dFbnRpdHlcIjtcbiAgICAgIHUuc2NvcmUgPSAwLjk7XG4gICAgICB2YXIgZTEgPSB7fSBhcyBidWlsZGVyLklFbnRpdHk7XG4gICAgICBlMS5zdGFydEluZGV4ID0gXCJzdGFydCBcIi5sZW5ndGg7XG4gICAgICBlMS5lbmRJbmRleCA9IGNvbnRleHQubWVzc2FnZS50ZXh0Lmxlbmd0aDtcbiAgICAgIGUxLnNjb3JlID0gMC4zO1xuICAgICAgdS5lbnRpdGllcyA9IFtlMV07XG4gICAgICBjYWxsYmFjayh1bmRlZmluZWQsIHUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChjb250ZXh0Lm1lc3NhZ2UudGV4dC5pbmRleE9mKFwidHJhaW5cIikgPj0gMCkge1xuICAgICAgdS5pbnRlbnQgPSBcInRyYWluXCI7XG4gICAgICB1LnNjb3JlID0gMC45O1xuICAgICAgdmFyIGUxID0ge30gYXMgYnVpbGRlci5JRW50aXR5O1xuICAgICAgZTEuc3RhcnRJbmRleCA9IFwidHJhaW4gXCIubGVuZ3RoO1xuICAgICAgZTEuZW5kSW5kZXggPSBjb250ZXh0Lm1lc3NhZ2UudGV4dC5sZW5ndGg7XG4gICAgICBlMS5zY29yZSA9IDAuMztcbiAgICAgIHUuZW50aXRpZXMgPSBbZTFdO1xuICAgICAgY2FsbGJhY2sodW5kZWZpbmVkLCB1KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGNvbnRleHQubWVzc2FnZS50ZXh0LmluZGV4T2YoXCJsZWFyblwiKSA+PSAwKSB7XG4gICAgICB1LmludGVudCA9IFwibGVhcm5cIjtcbiAgICAgIHUuc2NvcmUgPSAwLjk7XG4gICAgICB2YXIgZTEgPSB7fSBhcyBidWlsZGVyLklFbnRpdHk7XG4gICAgICBlMS50eXBlID0gXCJ0cmFpbkZhY3RcIjtcbiAgICAgIGUxLnN0YXJ0SW5kZXggPSBcInRyYWluIFwiLmxlbmd0aDtcbiAgICAgIGUxLmVuZEluZGV4ID0gY29udGV4dC5tZXNzYWdlLnRleHQubGVuZ3RoO1xuICAgICAgZTEuc2NvcmUgPSAwLjM7XG4gICAgICB1LmVudGl0aWVzID0gW2UxXTtcbiAgICAgIGNhbGxiYWNrKHVuZGVmaW5lZCwgdSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChjb250ZXh0Lm1lc3NhZ2UudGV4dC5pbmRleE9mKFwiaGVscFwiKSA+PSAwKSB7XG4gICAgICB1LmludGVudCA9IFwiaGVscFwiO1xuICAgICAgdS5zY29yZSA9IDAuOTtcbiAgICAgIHZhciBlMSA9IHt9IGFzIGJ1aWxkZXIuSUVudGl0eTtcbiAgICAgIGUxLnN0YXJ0SW5kZXggPSBcInRyYWluIFwiLmxlbmd0aDtcbiAgICAgIGUxLmVuZEluZGV4ID0gY29udGV4dC5tZXNzYWdlLnRleHQubGVuZ3RoO1xuICAgICAgZTEuc2NvcmUgPSAwLjM7XG4gICAgICB1LmVudGl0aWVzID0gW2UxXTtcbiAgICAgIGNhbGxiYWNrKHVuZGVmaW5lZCwgdSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChjb250ZXh0Lm1lc3NhZ2UudGV4dC5pbmRleE9mKFwiZXhpdFwiKSA+PSAwKSB7XG4gICAgICB1LmludGVudCA9IFwiZXhpdFwiO1xuICAgICAgdS5zY29yZSA9IDAuOTtcbiAgICAgIHZhciBlMSA9IHt9IGFzIGJ1aWxkZXIuSUVudGl0eTtcbiAgICAgIGUxLnN0YXJ0SW5kZXggPSBcImV4aXQgXCIubGVuZ3RoO1xuICAgICAgZTEuZW5kSW5kZXggPSBjb250ZXh0Lm1lc3NhZ2UudGV4dC5sZW5ndGg7XG4gICAgICBlMS5zY29yZSA9IDAuMztcbiAgICAgIHUuZW50aXRpZXMgPSBbZTFdO1xuICAgICAgY2FsbGJhY2sodW5kZWZpbmVkLCB1KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGNvbnRleHQubWVzc2FnZS50ZXh0LmluZGV4T2YoXCJ3cm9uZ1wiKSA+PSAwKSB7XG4gICAgICB1LmludGVudCA9IFwid3JvbmdcIjtcbiAgICAgIHUuc2NvcmUgPSAwLjk7XG4gICAgICB2YXIgZTEgPSB7fSBhcyBidWlsZGVyLklFbnRpdHk7XG4gICAgICBlMS5zdGFydEluZGV4ID0gXCJleGl0IFwiLmxlbmd0aDtcbiAgICAgIGUxLmVuZEluZGV4ID0gY29udGV4dC5tZXNzYWdlLnRleHQubGVuZ3RoO1xuICAgICAgZTEuc2NvcmUgPSAwLjM7XG4gICAgICB1LmVudGl0aWVzID0gW2UxXTtcbiAgICAgIGNhbGxiYWNrKHVuZGVmaW5lZCwgdSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnNvbGUubG9nKCdyZWNvZ25pemluZyBub3RoaW5nJyk7XG4gICAgdS5pbnRlbnQgPSBcIk5vbmVcIjtcbiAgICB1LnNjb3JlID0gMC4xO1xuICAgIHZhciBlMSA9IHt9IGFzIGJ1aWxkZXIuSUVudGl0eTtcbiAgICBlMS5zdGFydEluZGV4ID0gXCJleGl0IFwiLmxlbmd0aDtcbiAgICBlMS5lbmRJbmRleCA9IGNvbnRleHQubWVzc2FnZS50ZXh0Lmxlbmd0aDtcbiAgICBlMS5zY29yZSA9IDAuMTtcbiAgICB1LmVudGl0aWVzID0gW107XG4gICAgY2FsbGJhY2sodW5kZWZpbmVkLCB1KTtcbiAgfVxufVxuXG5cbmNsYXNzIFNpbXBsZVVwRG93blJlY29nbml6ZXIgaW1wbGVtZW50cyBidWlsZGVyLklJbnRlbnRSZWNvZ25pemVyIHtcbiAgY29uc3RydWN0b3IoKSB7XG5cbiAgfVxuXG4gIHJlY29nbml6ZShjb250ZXh0OiBidWlsZGVyLklSZWNvZ25pemVDb250ZXh0LCBjYWxsYmFjazogKGVycjogRXJyb3IsIHJlc3VsdDogYnVpbGRlci5JSW50ZW50UmVjb2duaXplclJlc3VsdCkgPT4gdm9pZCk6IHZvaWQge1xuICAgIHZhciB1ID0ge30gYXMgYnVpbGRlci5JSW50ZW50UmVjb2duaXplclJlc3VsdDtcblxuICAgIGNvbnNvbGUubG9nKFwicmVjb2duaXppbmcgXCIgKyBjb250ZXh0Lm1lc3NhZ2UudGV4dCk7XG4gICAgaWYgKGNvbnRleHQubWVzc2FnZS50ZXh0LmluZGV4T2YoXCJkb3duXCIpID49IDApIHtcbiAgICAgIHUuaW50ZW50ID0gXCJpbnRlbnQuZG93blwiO1xuICAgICAgdS5zY29yZSA9IDAuOTtcbiAgICAgIHZhciBlMSA9IHt9IGFzIGJ1aWxkZXIuSUVudGl0eTtcbiAgICAgIGUxLnN0YXJ0SW5kZXggPSBcInN0YXJ0IFwiLmxlbmd0aDtcbiAgICAgIGUxLmVuZEluZGV4ID0gY29udGV4dC5tZXNzYWdlLnRleHQubGVuZ3RoO1xuICAgICAgZTEuc2NvcmUgPSAwLjM7XG4gICAgICB1LmVudGl0aWVzID0gW2UxXTtcbiAgICAgIGNhbGxiYWNrKHVuZGVmaW5lZCwgdSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChjb250ZXh0Lm1lc3NhZ2UudGV4dC5pbmRleE9mKFwidXBcIikgPj0gMCkge1xuICAgICAgdS5pbnRlbnQgPSBcImludGVudC51cFwiO1xuICAgICAgdS5zY29yZSA9IDAuOTtcbiAgICAgIHZhciBlMSA9IHt9IGFzIGJ1aWxkZXIuSUVudGl0eTtcbiAgICAgIGUxLnN0YXJ0SW5kZXggPSBcInVwXCIubGVuZ3RoO1xuICAgICAgZTEuZW5kSW5kZXggPSBjb250ZXh0Lm1lc3NhZ2UudGV4dC5sZW5ndGg7XG4gICAgICBlMS5zY29yZSA9IDAuMztcbiAgICAgIHUuZW50aXRpZXMgPSBbZTFdO1xuICAgICAgY2FsbGJhY2sodW5kZWZpbmVkLCB1KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc29sZS5sb2coJ3JlY29nbml6aW5nIG5vdGhpbmcnKTtcbiAgICB1LmludGVudCA9IFwiTm9uZVwiO1xuICAgIHUuc2NvcmUgPSAwLjE7XG4gICAgdmFyIGUxID0ge30gYXMgYnVpbGRlci5JRW50aXR5O1xuICAgIGUxLnN0YXJ0SW5kZXggPSBcImV4aXQgXCIubGVuZ3RoO1xuICAgIGUxLmVuZEluZGV4ID0gY29udGV4dC5tZXNzYWdlLnRleHQubGVuZ3RoO1xuICAgIGUxLnNjb3JlID0gMC4xO1xuICAgIHUuZW50aXRpZXMgPSBbXTtcbiAgICBjYWxsYmFjayh1bmRlZmluZWQsIHUpO1xuICB9XG59XG5cbmNvbnN0IEFueU9iamVjdCA9IE9iamVjdCBhcyBhbnk7XG4vLyBnbG9iYWxUdW5uZWwuaW5pdGlhbGl6ZSh7XG4vLyAgaG9zdDogJ3Byb3h5LmV4eHhhbXBsZS5jb20nLFxuLy8gIHBvcnQ6IDgwODBcbi8vIH0pXG5cbi8vIENyZWF0ZSBib3QgYW5kIGJpbmQgdG8gY29uc29sZVxuLy8gdmFyIGNvbm5lY3RvciA9IG5ldyBodG1sY29ubmVjdG9yLkhUTUxDb25uZWN0b3IoKVxuXG4vLyBjb25uZWN0b3Iuc2V0QW5zd2VySG9vayhmdW5jdGlvbiAoc0Fuc3dlcikge1xuLy8gIGNvbnNvbGUubG9nKCdHb3QgYW5zd2VyIDogJyArIHNBbnN3ZXIgKyAnXFxuJylcbi8vIH0pXG5cbnZhciBib3Q7XG4vLyBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbi8vICAgY29ubmVjdG9yLnByb2Nlc3NNZXNzYWdlKCdzdGFydCB1bml0IHRlc3QgQUJDICcpXG4vLyB9LCA1MDAwKVxuXG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7XG5cbnZhciBvSlNPTiA9IEpTT04ucGFyc2UoJycgKyBmcy5yZWFkRmlsZVN5bmMoJy4vcmVzb3VyY2VzL21vZGVsL2ludGVudHMuanNvbicpKTtcbnZhciBvUnVsZXMgPSBQbGFpblJlY29nbml6ZXIucGFyc2VSdWxlcyhvSlNPTik7XG4vLyB2YXIgUmVjb2duaXplciA9IG5ldyAocmVjb2duaXplci5SZWdFeHBSZWNvZ25pemVyKShvUnVsZXMpO1xuXG5cbmZ1bmN0aW9uIGxvZ1F1ZXJ5KHNlc3Npb24gOiBidWlsZGVyLlNlc3Npb24sIGludGVudCA6IHN0cmluZywgcmVzdWx0PyA6IEFycmF5PElNYXRjaC5JVG9vbE1hdGNoPikge1xuXG4gIGZzLmFwcGVuZEZpbGUoJy4vbG9ncy9zaG93bWVxdWVyaWVzLnR4dCcsXCJcXG5cIiArIEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICB0ZXh0IDogc2Vzc2lvbi5tZXNzYWdlLnRleHQsXG4gICAgICAgICAgdGltZXN0YW1wOiBzZXNzaW9uLm1lc3NhZ2UudGltZXN0YW1wLFxuICAgICAgICAgIGludGVudCA6IGludGVudCxcbiAgICAgICAgICByZXMgOiByZXN1bHQgJiYgcmVzdWx0Lmxlbmd0aCAmJiBNYXRjaC5Ub29sTWF0Y2guZHVtcE5pY2UocmVzdWx0WzBdKSB8fCBcIjBcIixcbiAgICAgICAgICBjb252ZXJzYXRpb25JZCA6IHNlc3Npb24ubWVzc2FnZS5hZGRyZXNzXG4gICAgICAgICAgICAgJiYgc2Vzc2lvbi5tZXNzYWdlLmFkZHJlc3MuY29udmVyc2F0aW9uXG4gICAgICAgICAgICAgJiYgc2Vzc2lvbi5tZXNzYWdlLmFkZHJlc3MuY29udmVyc2F0aW9uLmlkIHx8IFwiXCIsXG4gICAgICAgICAgdXNlcmlkIDogc2Vzc2lvbi5tZXNzYWdlLmFkZHJlc3NcbiAgICAgICAgICAgICAmJiBzZXNzaW9uLm1lc3NhZ2UuYWRkcmVzcy51c2VyXG4gICAgICAgICAgICAgJiYgc2Vzc2lvbi5tZXNzYWdlLmFkZHJlc3MudXNlci5pZCB8fCBcIlwiXG4gICAgICAgIH0pLCBmdW5jdGlvbihlcnIsIHJlcykge1xuICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgIGRlYnVnbG9nKFwibG9nZ2luZyBmYWlsZWQgXCIgKyBlcnIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG59XG5cbi8qKlxuICogQ29uc3RydWN0IGEgYm90XG4gKiBAcGFyYW0gY29ubmVjdG9yIHtDb25uZWN0b3J9IHRoZSBjb25uZWN0b3IgdG8gdXNlXG4gKiBIVE1MQ29ubmVjdG9yXG4gKiBvciBjb25uZWN0b3IgPSBuZXcgYnVpbGRlci5Db25zb2xlQ29ubmVjdG9yKCkubGlzdGVuKClcbiAqL1xuZnVuY3Rpb24gbWFrZUJvdChjb25uZWN0b3IpIHtcbiAgYm90ID0gbmV3IGJ1aWxkZXIuVW5pdmVyc2FsQm90KGNvbm5lY3Rvcik7XG5cblxuXG4gIC8vIENyZWF0ZSBMVUlTIHJlY29nbml6ZXIgdGhhdCBwb2ludHMgYXQgb3VyIG1vZGVsIGFuZCBhZGQgaXQgYXMgdGhlIHJvb3QgJy8nIGRpYWxvZyBmb3Igb3VyIENvcnRhbmEgQm90LlxuICAvLyB2YXIgbW9kZWwgPSBzZW5zaXRpdmUubW9kZWx1cmw7XG4gIC8vIHZhciBtb2RlbCA9ICdodHRwczovL2FwaS5wcm9qZWN0b3hmb3JkLmFpL2x1aXMvdjIuMC9hcHBzL2M0MTNiMmVmLTM4MmMtNDViZC04ZmYwLWY3NmQ2MGUyYTgyMT9zdWJzY3JpcHRpb24ta2V5PWMyMTM5OGI1OTgwYTRjZTA5ZjQ3NGJiZmVlOTNiODkyJnE9J1xuICB2YXIgcmVjb2duaXplciA9IG5ldyBQbGFpblJlY29nbml6ZXIuUmVnRXhwUmVjb2duaXplcihvUnVsZXMpO1xuXG4gIHZhciBkaWFsb2cgPSBuZXcgYnVpbGRlci5JbnRlbnREaWFsb2coeyByZWNvZ25pemVyczogW3JlY29nbml6ZXJdIH0pO1xuICAvLyBkaWFsb2cub25CZWdpbihmdW5jdGlvbihzZXNzaW9uLGFyZ3MpIHtcbiAgLy8gY29uc29sZS5sb2coXCJiZWdpbm5pbmcgLi4uXCIpXG4gIC8vIHNlc3Npb24uZGlhbG9nRGF0YS5yZXRyeVByb21wdCA9IGFyZ3MgJiYgYXJncy5yZXRyeVByb21wdCB8fCBcIkkgYW0gc29ycnlcIlxuICAvLyBzZXNzaW9uLnNlbmQoXCJXaGF0IGRvIHlvdSB3YW50P1wiKVxuICAvL1xuICAvLyB9KVxuXG4gIHZhciBkaWFsb2dVcERvd24gPSBuZXcgYnVpbGRlci5JbnRlbnREaWFsb2coeyByZWNvZ25pemVyczogW25ldyBTaW1wbGVVcERvd25SZWNvZ25pemVyKCldIH0pO1xuXG4gIGJvdC5kaWFsb2coJy91cGRvd24nLCBkaWFsb2dVcERvd24pO1xuICBkaWFsb2dVcERvd24ub25CZWdpbihmdW5jdGlvbiAoc2Vzc2lvbikge1xuICAgIHNlc3Npb24uc2VuZChcIkhpIHRoZXJlLCB1cGRvd24gaXMgd2FpdGluZyBmb3IgeW91XCIpO1xuICB9KVxuXG4gIGRpYWxvZ1VwRG93bi5tYXRjaGVzKCdpbnRlbnQudXAnLCBbXG4gICAgZnVuY3Rpb24gKHNlc3Npb24sIGFyZ3MsIG5leHQpIHtcbiAgICAgIHNlc3Npb24uZGlhbG9nRGF0YS5hYmMgPSBhcmdzIHx8IHt9O1xuICAgICAgYnVpbGRlci5Qcm9tcHRzLnRleHQoc2Vzc2lvbiwgJ3lvdSB3YW50IHRvIGdvIHVwJyk7XG4gICAgfSxcbiAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgcmVzdWx0cywgbmV4dCkge1xuICAgICAgc2Vzc2lvbi5kaWFsb2dEYXRhLmFiYyA9IHJlc3VsdHMucmVwb25zZTtcbiAgICAgIG5leHQoKTtcbiAgICB9LFxuICAgIGZ1bmN0aW9uIChzZXNzaW9uLCByZXN1bHRzKSB7XG4gICAgICBzZXNzaW9uLmVuZERpYWxvZ1dpdGhSZXN1bHQoeyByZXNwb25zZTogc2Vzc2lvbi5kaWFsb2dEYXRhLmFiYyB9KTtcbiAgICB9XG4gIF1cbiAgKTtcblxuICBkaWFsb2dVcERvd24ubWF0Y2hlcygnaW50ZW50LmRvd24nLCBbXG4gICAgZnVuY3Rpb24gKHNlc3Npb24sIGFyZ3MsIG5leHQpIHtcbiAgICAgIHNlc3Npb24uZGlhbG9nRGF0YS5hYmMgPSBhcmdzIHx8IHt9O1xuICAgICAgYnVpbGRlci5Qcm9tcHRzLnRleHQoc2Vzc2lvbiwgJ3lvdSB3YW50IHRvIGdvIGRvd24hJyk7XG4gICAgfSxcbiAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgcmVzdWx0cywgbmV4dCkge1xuICAgICAgc2Vzc2lvbi5kaWFsb2dEYXRhLmFiYyA9IC0xOyAvLyByZXN1bHRzLnJlcG9uc2U7XG4gICAgICBuZXh0KCk7XG4gICAgfSxcbiAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgcmVzdWx0cykge1xuICAgICAgc2Vzc2lvbi5zZW5kKFwic3RpbGwgZ29pbmcgZG93bj9cIik7XG4gICAgfVxuICBdXG4gICk7XG4gIGRpYWxvZ1VwRG93bi5vbkRlZmF1bHQoZnVuY3Rpb24oc2Vzc2lvbikge1xuICAgIGxvZ1F1ZXJ5KHNlc3Npb24sIFwib25EZWZhdWx0XCIpO1xuICAgIHNlc3Npb24uc2VuZChcIllvdSBhcmUgdHJhcHBlZCBpbiBhIGRpYWxvZyB3aGljaCBvbmx5IHVuZGVyc3RhbmRzIHVwIGFuZCBkb3duLCBvbmUgb2YgdGhlbSB3aWxsIGdldCB5b3Ugb3V0XCIpO1xuICAgIC8vYnVpbGRlci5EaWFsb2dBY3Rpb24uc2VuZCgnSVxcJ20gc29ycnkgSSBkaWRuXFwndCB1bmRlcnN0YW5kLiBJIGNhbiBvbmx5IHNob3cgc3RhcnQgYW5kIHJpbmcnKTtcbiAgfSk7XG5cblxuICBib3QuZGlhbG9nKCcvdHJhaW4nLCBbXG4gICAgZnVuY3Rpb24gKHNlc3Npb24sIGFyZ3MsIG5leHQpIHtcbiAgICAgIHNlc3Npb24uZGlhbGdvRGF0YS5hYmMgPSBhcmdzIHx8IHt9O1xuICAgICAgYnVpbGRlci5Qcm9tcHRzLnRleHQoc2Vzc2lvbiwgJ0RvIHlvdSB3YW50IHRvIHRyYWluIG1lJyk7XG4gICAgfSxcbiAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgcmVzdWx0cywgbmV4dCkge1xuICAgICAgc2Vzc2lvbi5kaWFsb2dEYXRhLmFiYyA9IHJlc3VsdHMucmVwb25zZTtcbiAgICB9LFxuICAgIGZ1bmN0aW9uIChzZXNzaW9uLCByZXN1bHRzKSB7XG4gICAgICBzZXNzaW9uLmVuZERpYWxvZ1dpdGhSZXN1bHQoeyByZXNwb25zZTogc2Vzc2lvbi5EaWFsb2dEYXRhLmFiYyB9KTtcbiAgICB9XG4gIF0pO1xuXG5cbiAgYm90LmRpYWxvZygnLycsIGRpYWxvZyk7XG5cbiAgZGlhbG9nLm1hdGNoZXMoJ1Nob3dNZScsIFtcbiAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgYXJncywgbmV4dCkge1xuICAgICAgdmFyIGlzQ29tYmluZWRJbmRleCA9IHt9O1xuICAgICAgdmFyIG9OZXdFbnRpdHk7XG4gICAgICAvLyBleHBlY3RpbmcgZW50aXR5IEExXG4gICAgICBkZWJ1Z2xvZyhcIlNob3cgRW50aXR5XCIpO1xuICAgICAgY29uc29sZS5sb2coJ3JhdzogJyArIEpTT04uc3RyaW5naWZ5KGFyZ3MuZW50aXRpZXMpLCB1bmRlZmluZWQsIDIpO1xuICAgICAgdmFyIGExID0gYnVpbGRlci5FbnRpdHlSZWNvZ25pemVyLmZpbmRFbnRpdHkoYXJncy5lbnRpdGllcywgJ0ExJyk7XG4gICAgICAvKlxuICAgICAgICAgICAgdmFyIGNsaWVudCA9IGJ1aWxkZXIuRW50aXR5UmVjb2duaXplci5maW5kRW50aXR5KGFyZ3MuZW50aXRpZXMsICdjbGllbnQnKTtcbiAgICAgICAgICAgIHZhciBzeXN0ZW1PYmplY3RJZCA9IGJ1aWxkZXIuRW50aXR5UmVjb2duaXplci5maW5kRW50aXR5KGNvbWJpbmVkRW50aXRpZXMsICdzeXN0ZW1PYmplY3RJZCcpIHx8XG4gICAgICAgICAgICAgIGJ1aWxkZXIuRW50aXR5UmVjb2duaXplci5maW5kRW50aXR5KGNvbWJpbmVkRW50aXRpZXMsICdTeXN0ZW1PYmplY3QnKSB8fFxuICAgICAgICAgICAgICBidWlsZGVyLkVudGl0eVJlY29nbml6ZXIuZmluZEVudGl0eShjb21iaW5lZEVudGl0aWVzLCAnYnVpbHRpbi5udW1iZXInKTtcbiAgICAgICAgICAgIHZhciBzeXN0ZW1PYmplY3RDYXRlZ29yeSA9IGJ1aWxkZXIuRW50aXR5UmVjb2duaXplci5maW5kRW50aXR5KGFyZ3MuZW50aXRpZXMsICdTeXN0ZW1PYmplY3RDYXRlZ29yeScpO1xuXG4gICAgICAgICAgICBzZXNzaW9uLmRpYWxvZ0RhdGEuc3lzdGVtID0ge1xuICAgICAgICAgICAgICBzeXN0ZW1JZDogc3lzdGVtSWQsXG4gICAgICAgICAgICAgIGNsaWVudDogY2xpZW50XG4gICAgICAgICAgICB9O1xuICAgICAgKi9cbiAgICAgIC8qXG4gICAgICAgICAgICB2YXIgc1N5c3RlbUlkID0gc3lzdGVtSWQgJiYgc3lzdGVtSWQuZW50aXR5O1xuICAgICAgICAgICAgdmFyIHNDbGllbnQgPSBjbGllbnQgJiYgY2xpZW50LmVudGl0eTtcbiAgICAgICAgICAgIHZhciBzc3lzdGVtT2JqZWN0SWQgPSBzeXN0ZW1PYmplY3RJZCAmJiBzeXN0ZW1PYmplY3RJZC5lbnRpdHk7XG4gICAgICAgICAgICB2YXIgc1N5c3RlbU9iamVjdENhdGVnb3J5ID0gc3lzdGVtT2JqZWN0Q2F0ZWdvcnkgJiYgc3lzdGVtT2JqZWN0Q2F0ZWdvcnkuZW50aXR5O1xuICAgICAgKi9cblxuICAgICAgY29uc3QgcmVzdWx0ID0gQW5hbHl6ZS5hbmFseXplQWxsKGExLmVudGl0eSxcbiAgICAgICAgbVJ1bGVzLCB0b29scyk7XG4gICAgICBsb2dRdWVyeShzZXNzaW9uLCdTaG93TWUnLHJlc3VsdCk7XG4gICAgICAvLyB0ZXN0LmV4cGVjdCgzKVxuICAgICAgLy8gIHRlc3QuZGVlcEVxdWFsKHJlc3VsdC53ZWlnaHQsIDEyMCwgJ2NvcnJlY3Qgd2VpZ2h0Jyk7XG4gICAgICBpZighcmVzdWx0IHx8IHJlc3VsdC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgbmV4dCgpO1xuICAgICAgfVxuICAgICAgLy8gZGVidWdsb2coJ3Jlc3VsdCA6ICcgKyBKU09OLnN0cmluZ2lmeShyZXN1bHQsIHVuZGVmaW5lZCwgMikpO1xuICAgICAgZGVidWdsb2coJ2Jlc3QgcmVzdWx0IDogJyArIEpTT04uc3RyaW5naWZ5KHJlc3VsdFswXSB8fCB7fSwgdW5kZWZpbmVkLCAyKSk7XG4gICAgICBkZWJ1Z2xvZygndG9wIDogJyArIE1hdGNoLlRvb2xNYXRjaC5kdW1wV2VpZ2h0c1RvcChyZXN1bHQsIHsgdG9wOiAzIH0pKTtcblxuXG4gICAgICBpZiAoQW5hbHl6ZS5pc0NvbXBsZXRlKHJlc3VsdFswXSkpIHtcbiAgICAgICAgc2Vzc2lvbi5kaWFsb2dEYXRhLnJlc3VsdCA9IHJlc3VsdFswXTtcbiAgICAgICAgc2Vzc2lvbi5zZW5kKCdTaG93aW5nIGVudGl0eSAuLi4nKTtcbiAgICAgICAgbmV4dCgpO1xuICAgICAgfSBlbHNlIGlmIChBbmFseXplLmdldFByb21wdChyZXN1bHRbMF0pKSB7XG4gICAgICAgIHZhciBwcm9tcHQgPSBBbmFseXplLmdldFByb21wdChyZXN1bHRbMF0pO1xuICAgICAgICBzZXNzaW9uLmRpYWxvZ0RhdGEucmVzdWx0ID0gcmVzdWx0WzBdO1xuICAgICAgICBzZXNzaW9uLmRpYWxvZ0RhdGEucHJvbXB0ID0gcHJvbXB0O1xuICAgICAgICBzZXNzaW9uLnNlbmQoXCJOb3QgZW5vdWdoIGluZm9ybWF0aW9uIHN1cHBsaWVkOiBcIiArIE1hdGNoLlRvb2xNYXRjaC5kdW1wTmljZShcbiAgICAgICAgICBzZXNzaW9uLmRpYWxvZ0RhdGEucmVzdWx0XG4gICAgICAgICkpO1xuICAgICAgICBidWlsZGVyLlByb21wdHMudGV4dChzZXNzaW9uLCBwcm9tcHQudGV4dCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgYmVzdCA9IHJlc3VsdC5sZW5ndGggPyBNYXRjaC5Ub29sTWF0Y2guZHVtcE5pY2UocmVzdWx0WzBdKSA6IFwiPG5vdGhpbmc+XCI7XG4gICAgICAgIC8vc2Vzc2lvbi5zZW5kKCdJIGRpZCBub3QgdW5kZXJzdGFuZCB0aGlzJyArIGJlc3QpO1xuICAgICAgICAgdmFyIHJlcGx5ID1cbiAgICAgIG5ldyBidWlsZGVyLk1lc3NhZ2Uoc2Vzc2lvbilcbiAgICAgICAgICAudGV4dCgnSSBkaWQgbm90IHVuZGVyc3RhbmQgdGhpcycgKyBiZXN0KVxuICAgICAgICAgIC5hZGRFbnRpdHkoeyB1cmwgOiBcIkkgZG9uJ3Qga25vd1wifSk7XG4gICAgICAgICAvLyAuYWRkQXR0YWNobWVudCh7IGZhbGxiYWNrVGV4dDogXCJJIGRvbid0IGtub3dcIiwgY29udGVudFR5cGU6ICdpbWFnZS9qcGVnJywgY29udGVudFVybDogXCJ3d3cud29tYmF0Lm9yZ1wiIH0pO1xuICAgICAgICBzZXNzaW9uLnNlbmQocmVwbHkpO1xuXG4gICAgICB9XG5cbiAgICAgIC8qXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnU2hvdyBlbnRpdGllczogJyArIEpTT04uc3RyaW5naWZ5KGFyZ3MuZW50aXRpZXMsIHVuZGVmaW5lZCwgMikpO1xuXG4gICAgICAgICAgICAvLyBkbyB0aGUgYmlnIGFuYWx5aXMgLi4uXG4gICAgICAgICAgICAgICAgICB2YXIgdSA9IGRpc3BhdGNoZXIuZXhlY1Nob3dFbnRpdHkoe1xuICAgICAgICAgICAgICBzeXN0ZW1JZDogc1N5c3RlbUlkLFxuICAgICAgICAgICAgICBjbGllbnQ6IHNDbGllbnQsXG4gICAgICAgICAgICAgIHRvb2w6IHNUb29sLFxuICAgICAgICAgICAgICBzeXN0ZW1PYmplY3RDYXRlZ29yeTogc1N5c3RlbU9iamVjdENhdGVnb3J5LFxuICAgICAgICAgICAgICBzeXN0ZW1PYmplY3RJZDogc3N5c3RlbU9iamVjdElkXG4gICAgICAgICAgICB9KVxuICAgICAgKi9cblxuICAgICAgLy8gIHNlc3Npb24uc2VuZCgnU2hvd2luZyBlbnRpdHkgLi4uJyk7XG5cbiAgICAgIC8vICBjb25zb2xlLmxvZyhcInNob3cgZW50aXR5LCBTaG93IHNlc3Npb24gOiBcIiArIEpTT04uc3RyaW5naWZ5KHNlc3Npb24pKVxuICAgICAgLy8gY29uc29sZS5sb2coXCJTaG93IGVudGl0eSA6IFwiICsgSlNPTi5zdHJpbmdpZnkoYXJncy5lbnRpdGllcykpXG4gICAgfSxcbiAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgcmVzdWx0cywgbmV4dCkge1xuICAgICAgdmFyIHJlc3VsdCA9IHNlc3Npb24uZGlhbG9nRGF0YS5yZXN1bHQ7XG4gICAgICBpZighcmVzdWx0IHx8IHJlc3VsdC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgbmV4dCgpO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVzdWx0cy5yZXNwb25zZSkge1xuICAgICAgICAvLyBzb21lIHByb21wdGluZ1xuICAgICAgICBBbmFseXplLnNldFByb21wdChzZXNzaW9uLmRpYWxvZ0RhdGEucmVzdWx0LCBzZXNzaW9uLmRpYWxvZ0RhdGEucHJvbXB0LCByZXN1bHRzLnJlc3BvbnNlKTtcbiAgICAgIH1cbiAgICAgIGlmIChBbmFseXplLmlzQ29tcGxldGUoc2Vzc2lvbi5kaWFsb2dEYXRhLnJlc3VsdCkpIHtcbiAgICAgICAgbmV4dCgpO1xuICAgICAgfSBlbHNlIGlmIChBbmFseXplLmdldFByb21wdChzZXNzaW9uLmRpYWxvZ0RhdGEucmVzdWx0KSkge1xuICAgICAgICB2YXIgcHJvbXB0ID0gQW5hbHl6ZS5nZXRQcm9tcHQoc2Vzc2lvbi5kaWFsb2dEYXRhLnJlc3VsdCk7XG4gICAgICAgIHNlc3Npb24uZGlhbG9nRGF0YS5wcm9tcHQgPSBwcm9tcHQ7XG4gICAgICAgIGJ1aWxkZXIuUHJvbXB0cy50ZXh0KHNlc3Npb24sIHByb21wdC50ZXh0KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGZ1bmN0aW9uIChzZXNzaW9uLCByZXN1bHRzLCBuZXh0KSB7XG4gICAgICB2YXIgcmVzdWx0ID0gc2Vzc2lvbi5kaWFsb2dEYXRhLnJlc3VsdDtcbiAgICAgIGlmIChyZXN1bHRzLnJlc3BvbnNlKSB7XG4gICAgICAgIC8vIHNvbWUgcHJvbXB0aW5nXG4gICAgICAgIEFuYWx5emUuc2V0UHJvbXB0KHNlc3Npb24uZGlhbG9nRGF0YS5yZXN1bHQsXG4gICAgICAgICAgc2Vzc2lvbi5kaWFsb2dEYXRhLnByb21wdCwgcmVzdWx0cy5yZXNwb25zZSk7XG4gICAgICB9XG4gICAgICBpZiAoQW5hbHl6ZS5pc0NvbXBsZXRlKHNlc3Npb24uZGlhbG9nRGF0YS5yZXN1bHQpKSB7XG4gICAgICAgIHNlc3Npb24uc2VuZChcInN0YXJ0aW5nICA+IFwiICsgRXhlYy5leGVjVG9vbChzZXNzaW9uLmRpYWxvZ0RhdGEucmVzdWx0KSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoc2Vzc2lvbi5kaWFsb2dEYXRhLnJlc3VsdCkge1xuICAgICAgICAgIHNlc3Npb24uc2VuZChcIk5vdCBlbm91Z2ggaW5mb3JtYXRpb24gc3VwcGxpZWQ6IFwiICsgTWF0Y2guVG9vbE1hdGNoLmR1bXBOaWNlKFxuICAgICAgICAgICAgc2Vzc2lvbi5kaWFsb2dEYXRhLnJlc3VsdFxuICAgICAgICAgICkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlc3Npb24uc2VuZChcIkkgZGlkIG5vdCBnZXQgd2hhdCB5b3Ugd2FudFwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gIF0pO1xuXG4gIGRpYWxvZy5tYXRjaGVzKCdXcm9uZycsIFtcbiAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgYXJncywgbmV4dCkge1xuICAgICAgc2Vzc2lvbi5iZWdpbkRpYWxvZygnL3VwZG93bicsIHNlc3Npb24udXNlckRhdGEuY291bnQpO1xuICAgIH0sXG4gICAgZnVuY3Rpb24gKHNlc3Npb24sIHJlc3VsdHMsIG5leHQpIHtcbiAgICAgIHZhciBhbGFybSA9IHNlc3Npb24uZGlhbG9nRGF0YS5hbGFybTtcbiAgICAgIHNlc3Npb24uc2VuZChcImJhY2sgZnJvbSB3cm9uZyA6IFwiICsgSlNPTi5zdHJpbmdpZnkocmVzdWx0cykpO1xuICAgICAgbmV4dCgpO1xuICAgIH0sXG4gICAgZnVuY3Rpb24gKHNlc3Npb24sIHJlc3VsdHMpIHtcbiAgICAgIHNlc3Npb24uc2VuZCgnZW5kIG9mIHdyb25nJyk7XG4gICAgfVxuICBdKTtcblxuICBkaWFsb2cubWF0Y2hlcygnRXhpdCcsIFtcbiAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgYXJncywgbmV4dCkge1xuICAgICAgY29uc29sZS5sb2coJ2V4aXQgOicpO1xuICAgICAgY29uc29sZS5sb2coJ2V4aXQnICsgSlNPTi5zdHJpbmdpZnkoYXJncy5lbnRpdGllcykpO1xuICAgICAgc2Vzc2lvbi5zZW5kKFwieW91IGFyZSBpbiBhIGxvZ2ljIGxvb3AgXCIpO1xuICAgIH1cbiAgXSk7XG4gIGRpYWxvZy5tYXRjaGVzKCdIZWxwJywgW1xuICAgIGZ1bmN0aW9uIChzZXNzaW9uLCBhcmdzLCBuZXh0KSB7XG4gICAgICBjb25zb2xlLmxvZygnaGVscCA6Jyk7XG4gICAgICBjb25zb2xlLmxvZygnaGVscCcpO1xuICAgICAgc2Vzc2lvbi5zZW5kKFwiSSBrbm93IGFib3V0IC4uLi4gPGNhdGVnb3JpZXM+PlwiKTtcbiAgICB9XG4gIF0pO1xuXG5cblxuICAvLyBBZGQgaW50ZW50IGhhbmRsZXJzXG4gIGRpYWxvZy5tYXRjaGVzKCd0cmFpbicsIFtcbiAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgYXJncywgbmV4dCkge1xuICAgICAgY29uc29sZS5sb2coJ3RyYWluJyk7XG4gICAgICAvLyBSZXNvbHZlIGFuZCBzdG9yZSBhbnkgZW50aXRpZXMgcGFzc2VkIGZyb20gTFVJUy5cbiAgICAgIHZhciB0aXRsZSA9IGJ1aWxkZXIuRW50aXR5UmVjb2duaXplci5maW5kRW50aXR5KGFyZ3MuZW50aXRpZXMsICdidWlsdGluLmFsYXJtLnRpdGxlJyk7XG4gICAgICB2YXIgdGltZSA9IGJ1aWxkZXIuRW50aXR5UmVjb2duaXplci5yZXNvbHZlVGltZShhcmdzLmVudGl0aWVzKTtcbiAgICAgIHZhciBhbGFybSA9IHNlc3Npb24uZGlhbG9nRGF0YS5hbGFybSA9IHtcbiAgICAgICAgdGl0bGU6IHRpdGxlID8gdGl0bGUuZW50aXR5IDogbnVsbCxcbiAgICAgICAgdGltZXN0YW1wOiB0aW1lID8gdGltZS5nZXRUaW1lKCkgOiBudWxsXG4gICAgICB9O1xuICAgICAgLy8gUHJvbXB0IGZvciB0aXRsZVxuICAgICAgaWYgKCFhbGFybS50aXRsZSkge1xuICAgICAgICBidWlsZGVyLlByb21wdHMudGV4dChzZXNzaW9uLCAnV2hhdCBmYWN0IHdvdWxkIHlvdSBsaWtlIHRvIHRyYWluPycpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV4dCgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZnVuY3Rpb24gKHNlc3Npb24sIHJlc3VsdHMsIG5leHQpIHtcbiAgICAgIHZhciBhbGFybSA9IHNlc3Npb24uZGlhbG9nRGF0YS5hbGFybTtcbiAgICAgIGlmIChyZXN1bHRzLnJlc3BvbnNlKSB7XG4gICAgICAgIGFsYXJtLnRpdGxlID0gcmVzdWx0cy5yZXNwb25zZTtcbiAgICAgIH1cblxuICAgICAgLy8gUHJvbXB0IGZvciB0aW1lICh0aXRsZSB3aWxsIGJlIGJsYW5rIGlmIHRoZSB1c2VyIHNhaWQgY2FuY2VsKVxuICAgICAgaWYgKGFsYXJtLnRpdGxlICYmICFhbGFybS50aW1lc3RhbXApIHtcbiAgICAgICAgYnVpbGRlci5Qcm9tcHRzLnRpbWUoc2Vzc2lvbiwgJ1doYXQgdGltZSB3b3VsZCB5b3UgbGlrZSB0byBzZXQgdGhlIGFsYXJtIGZvcj8nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5leHQoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGZ1bmN0aW9uIChzZXNzaW9uLCByZXN1bHRzKSB7XG4gICAgICB2YXIgYWxhcm0gPSBzZXNzaW9uLmRpYWxvZ0RhdGEuYWxhcm07XG4gICAgICBpZiAocmVzdWx0cy5yZXNwb25zZSkge1xuICAgICAgICB2YXIgdGltZSA9IGJ1aWxkZXIuRW50aXR5UmVjb2duaXplci5yZXNvbHZlVGltZShbcmVzdWx0cy5yZXNwb25zZV0pO1xuICAgICAgICBhbGFybS50aW1lc3RhbXAgPSB0aW1lID8gdGltZS5nZXRUaW1lKCkgOiBudWxsO1xuICAgICAgfVxuICAgICAgLy8gU2V0IHRoZSBhbGFybSAoaWYgdGl0bGUgb3IgdGltZXN0YW1wIGlzIGJsYW5rIHRoZSB1c2VyIHNhaWQgY2FuY2VsKVxuICAgICAgaWYgKGFsYXJtLnRpdGxlICYmIGFsYXJtLnRpbWVzdGFtcCkge1xuICAgICAgICAvLyBTYXZlIGFkZHJlc3Mgb2Ygd2hvIHRvIG5vdGlmeSBhbmQgd3JpdGUgdG8gc2NoZWR1bGVyLlxuICAgICAgICBhbGFybS5hZGRyZXNzID0gc2Vzc2lvbi5tZXNzYWdlLmFkZHJlc3M7XG4gICAgICAgIC8vYWxhcm1zW2FsYXJtLnRpdGxlXSA9IGFsYXJtO1xuXG4gICAgICAgIC8vIFNlbmQgY29uZmlybWF0aW9uIHRvIHVzZXJcbiAgICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZShhbGFybS50aW1lc3RhbXApO1xuICAgICAgICB2YXIgaXNBTSA9IGRhdGUuZ2V0SG91cnMoKSA8IDEyO1xuICAgICAgICBzZXNzaW9uLnNlbmQoJ0NyZWF0aW5nIGFsYXJtIG5hbWVkIFwiJXNcIiBmb3IgJWQvJWQvJWQgJWQ6JTAyZCVzJyxcbiAgICAgICAgICBhbGFybS50aXRsZSxcbiAgICAgICAgICBkYXRlLmdldE1vbnRoKCkgKyAxLCBkYXRlLmdldERhdGUoKSwgZGF0ZS5nZXRGdWxsWWVhcigpLFxuICAgICAgICAgIGlzQU0gPyBkYXRlLmdldEhvdXJzKCkgOiBkYXRlLmdldEhvdXJzKCkgLSAxMiwgZGF0ZS5nZXRNaW51dGVzKCksIGlzQU0gPyAnYW0nIDogJ3BtJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZXNzaW9uLnNlbmQoJ09rLi4uIG5vIHByb2JsZW0uJyk7XG4gICAgICB9XG4gICAgfVxuICBdKTtcblxuICBkaWFsb2cub25EZWZhdWx0KGZ1bmN0aW9uKHNlc3Npb24pIHtcbiAgICBsb2dRdWVyeShzZXNzaW9uLCBcIm9uRGVmYXVsdFwiKTtcbiAgICBzZXNzaW9uLnNlbmQoXCJJIGRvIG5vdCB1bmRlcnN0YW5kIHRoaXMgYXQgYWxsXCIpO1xuICAgIC8vYnVpbGRlci5EaWFsb2dBY3Rpb24uc2VuZCgnSVxcJ20gc29ycnkgSSBkaWRuXFwndCB1bmRlcnN0YW5kLiBJIGNhbiBvbmx5IHNob3cgc3RhcnQgYW5kIHJpbmcnKTtcbiAgfSk7XG5cbiAgLypcbiAgLy8gVmVyeSBzaW1wbGUgYWxhcm0gc2NoZWR1bGVyXG4gIHZhciBhbGFybXMgPSB7fTtcbiAgc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgIHZhciBub3cgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICBmb3IgKHZhciBrZXkgaW4gYWxhcm1zKSB7XG4gICAgICB2YXIgYWxhcm0gPSBhbGFybXNba2V5XTtcbiAgICAgIGlmIChub3cgPj0gYWxhcm0udGltZXN0YW1wKSB7XG4gICAgICAgIHZhciBtc2cgPSBuZXcgYnVpbGRlci5NZXNzYWdlKClcbiAgICAgICAgICAuYWRkcmVzcyhhbGFybS5hZGRyZXNzKVxuICAgICAgICAgIC50ZXh0KCdIZXJlXFwncyB5b3VyIFxcJyVzXFwnIGFsYXJtLicsIGFsYXJtLnRpdGxlKTtcbiAgICAgICAgYm90LnNlbmQobXNnKTtcbiAgICAgICAgZGVsZXRlIGFsYXJtc1trZXldO1xuICAgICAgfVxuICAgIH1cbiAgfSwgMTUwMDApO1xuICAqL1xufVxuXG5pZiAobW9kdWxlKSB7XG4gIG1vZHVsZS5leHBvcnRzID0ge1xuICAgIG1ha2VCb3Q6IG1ha2VCb3RcbiAgfTtcbn1cbiIsIi8qKlxuICogVGhlIGJvdCBpbXBsZW1lbnRhdGlvblxuICpcbiAqIEluc3RhbnRpYXRlIGFwc3NpbmcgYSBjb25uZWN0b3IgdmlhXG4gKiBtYWtlQm90XG4gKlxuICovXG4vKipcbiAqIEBmaWxlXG4gKiBAbW9kdWxlIGpmc2ViLmZkZXZzdGFydC5zbWFydGRpYWxvZ1xuICogQGNvcHlyaWdodCAoYykgMjAxNiBHZXJkIEZvcnN0bWFublxuICovXG5cInVzZSBzdHJpY3RcIjtcbnZhciBidWlsZGVyID0gcmVxdWlyZSgnYm90YnVpbGRlcicpO1xudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKTtcbnZhciBFeGVjID0gcmVxdWlyZSgnLi4vZXhlYy9leGVjJyk7XG52YXIgTWF0Y2ggPSByZXF1aXJlKCcuLi9tYXRjaC9tYXRjaCcpO1xudmFyIEFuYWx5emUgPSByZXF1aXJlKCcuLi9tYXRjaC9hbmFseXplJyk7XG52YXIgZGVidWdsb2cgPSBkZWJ1Zygnc21hcnRkaWFsb2cnKTtcbnZhciBQbGFpblJlY29nbml6ZXIgPSByZXF1aXJlKCcuL3BsYWlucmVjb2duaXplcicpO1xuLy92YXIgYnVpbGRlciA9IHJlcXVpcmUoJ2JvdGJ1aWxkZXInKTtcbnZhciBkaXNwYXRjaGVyID0gcmVxdWlyZSgnLi4vbWF0Y2gvZGlzcGF0Y2hlci5qcycpLmRpc3BhdGNoZXI7XG52YXIgVG9vbHMgPSByZXF1aXJlKCcuLi9tYXRjaC90b29scycpO1xudmFyIHRvb2xzID0gVG9vbHMuZ2V0VG9vbHMoKTtcbnZhciBJbnB1dEZpbHRlclJ1bGVzID0gcmVxdWlyZSgnLi4vbWF0Y2gvaW5wdXRGaWx0ZXJSdWxlcy5qcycpO1xudmFyIG1SdWxlcyA9IElucHV0RmlsdGVyUnVsZXMuZ2V0TVJ1bGVzU2FtcGxlKCk7XG52YXIgU2ltcGxlUmVjb2duaXplciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2ltcGxlUmVjb2duaXplcigpIHtcbiAgICB9XG4gICAgU2ltcGxlUmVjb2duaXplci5wcm90b3R5cGUucmVjb2duaXplID0gZnVuY3Rpb24gKGNvbnRleHQsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciB1ID0ge307XG4gICAgICAgIGNvbnNvbGUubG9nKFwicmVjb2duaXppbmcgXCIgKyBjb250ZXh0Lm1lc3NhZ2UudGV4dCk7XG4gICAgICAgIGlmIChjb250ZXh0Lm1lc3NhZ2UudGV4dC5pbmRleE9mKFwic3RhcnRcIikgPj0gMCkge1xuICAgICAgICAgICAgdS5pbnRlbnQgPSBcIlNob3dFbnRpdHlcIjtcbiAgICAgICAgICAgIHUuc2NvcmUgPSAwLjk7XG4gICAgICAgICAgICB2YXIgZTEgPSB7fTtcbiAgICAgICAgICAgIGUxLnN0YXJ0SW5kZXggPSBcInN0YXJ0IFwiLmxlbmd0aDtcbiAgICAgICAgICAgIGUxLmVuZEluZGV4ID0gY29udGV4dC5tZXNzYWdlLnRleHQubGVuZ3RoO1xuICAgICAgICAgICAgZTEuc2NvcmUgPSAwLjM7XG4gICAgICAgICAgICB1LmVudGl0aWVzID0gW2UxXTtcbiAgICAgICAgICAgIGNhbGxiYWNrKHVuZGVmaW5lZCwgdSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbnRleHQubWVzc2FnZS50ZXh0LmluZGV4T2YoXCJ0cmFpblwiKSA+PSAwKSB7XG4gICAgICAgICAgICB1LmludGVudCA9IFwidHJhaW5cIjtcbiAgICAgICAgICAgIHUuc2NvcmUgPSAwLjk7XG4gICAgICAgICAgICB2YXIgZTEgPSB7fTtcbiAgICAgICAgICAgIGUxLnN0YXJ0SW5kZXggPSBcInRyYWluIFwiLmxlbmd0aDtcbiAgICAgICAgICAgIGUxLmVuZEluZGV4ID0gY29udGV4dC5tZXNzYWdlLnRleHQubGVuZ3RoO1xuICAgICAgICAgICAgZTEuc2NvcmUgPSAwLjM7XG4gICAgICAgICAgICB1LmVudGl0aWVzID0gW2UxXTtcbiAgICAgICAgICAgIGNhbGxiYWNrKHVuZGVmaW5lZCwgdSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbnRleHQubWVzc2FnZS50ZXh0LmluZGV4T2YoXCJsZWFyblwiKSA+PSAwKSB7XG4gICAgICAgICAgICB1LmludGVudCA9IFwibGVhcm5cIjtcbiAgICAgICAgICAgIHUuc2NvcmUgPSAwLjk7XG4gICAgICAgICAgICB2YXIgZTEgPSB7fTtcbiAgICAgICAgICAgIGUxLnR5cGUgPSBcInRyYWluRmFjdFwiO1xuICAgICAgICAgICAgZTEuc3RhcnRJbmRleCA9IFwidHJhaW4gXCIubGVuZ3RoO1xuICAgICAgICAgICAgZTEuZW5kSW5kZXggPSBjb250ZXh0Lm1lc3NhZ2UudGV4dC5sZW5ndGg7XG4gICAgICAgICAgICBlMS5zY29yZSA9IDAuMztcbiAgICAgICAgICAgIHUuZW50aXRpZXMgPSBbZTFdO1xuICAgICAgICAgICAgY2FsbGJhY2sodW5kZWZpbmVkLCB1KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29udGV4dC5tZXNzYWdlLnRleHQuaW5kZXhPZihcImhlbHBcIikgPj0gMCkge1xuICAgICAgICAgICAgdS5pbnRlbnQgPSBcImhlbHBcIjtcbiAgICAgICAgICAgIHUuc2NvcmUgPSAwLjk7XG4gICAgICAgICAgICB2YXIgZTEgPSB7fTtcbiAgICAgICAgICAgIGUxLnN0YXJ0SW5kZXggPSBcInRyYWluIFwiLmxlbmd0aDtcbiAgICAgICAgICAgIGUxLmVuZEluZGV4ID0gY29udGV4dC5tZXNzYWdlLnRleHQubGVuZ3RoO1xuICAgICAgICAgICAgZTEuc2NvcmUgPSAwLjM7XG4gICAgICAgICAgICB1LmVudGl0aWVzID0gW2UxXTtcbiAgICAgICAgICAgIGNhbGxiYWNrKHVuZGVmaW5lZCwgdSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbnRleHQubWVzc2FnZS50ZXh0LmluZGV4T2YoXCJleGl0XCIpID49IDApIHtcbiAgICAgICAgICAgIHUuaW50ZW50ID0gXCJleGl0XCI7XG4gICAgICAgICAgICB1LnNjb3JlID0gMC45O1xuICAgICAgICAgICAgdmFyIGUxID0ge307XG4gICAgICAgICAgICBlMS5zdGFydEluZGV4ID0gXCJleGl0IFwiLmxlbmd0aDtcbiAgICAgICAgICAgIGUxLmVuZEluZGV4ID0gY29udGV4dC5tZXNzYWdlLnRleHQubGVuZ3RoO1xuICAgICAgICAgICAgZTEuc2NvcmUgPSAwLjM7XG4gICAgICAgICAgICB1LmVudGl0aWVzID0gW2UxXTtcbiAgICAgICAgICAgIGNhbGxiYWNrKHVuZGVmaW5lZCwgdSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbnRleHQubWVzc2FnZS50ZXh0LmluZGV4T2YoXCJ3cm9uZ1wiKSA+PSAwKSB7XG4gICAgICAgICAgICB1LmludGVudCA9IFwid3JvbmdcIjtcbiAgICAgICAgICAgIHUuc2NvcmUgPSAwLjk7XG4gICAgICAgICAgICB2YXIgZTEgPSB7fTtcbiAgICAgICAgICAgIGUxLnN0YXJ0SW5kZXggPSBcImV4aXQgXCIubGVuZ3RoO1xuICAgICAgICAgICAgZTEuZW5kSW5kZXggPSBjb250ZXh0Lm1lc3NhZ2UudGV4dC5sZW5ndGg7XG4gICAgICAgICAgICBlMS5zY29yZSA9IDAuMztcbiAgICAgICAgICAgIHUuZW50aXRpZXMgPSBbZTFdO1xuICAgICAgICAgICAgY2FsbGJhY2sodW5kZWZpbmVkLCB1KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLmxvZygncmVjb2duaXppbmcgbm90aGluZycpO1xuICAgICAgICB1LmludGVudCA9IFwiTm9uZVwiO1xuICAgICAgICB1LnNjb3JlID0gMC4xO1xuICAgICAgICB2YXIgZTEgPSB7fTtcbiAgICAgICAgZTEuc3RhcnRJbmRleCA9IFwiZXhpdCBcIi5sZW5ndGg7XG4gICAgICAgIGUxLmVuZEluZGV4ID0gY29udGV4dC5tZXNzYWdlLnRleHQubGVuZ3RoO1xuICAgICAgICBlMS5zY29yZSA9IDAuMTtcbiAgICAgICAgdS5lbnRpdGllcyA9IFtdO1xuICAgICAgICBjYWxsYmFjayh1bmRlZmluZWQsIHUpO1xuICAgIH07XG4gICAgcmV0dXJuIFNpbXBsZVJlY29nbml6ZXI7XG59KCkpO1xudmFyIFNpbXBsZVVwRG93blJlY29nbml6ZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNpbXBsZVVwRG93blJlY29nbml6ZXIoKSB7XG4gICAgfVxuICAgIFNpbXBsZVVwRG93blJlY29nbml6ZXIucHJvdG90eXBlLnJlY29nbml6ZSA9IGZ1bmN0aW9uIChjb250ZXh0LCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgdSA9IHt9O1xuICAgICAgICBjb25zb2xlLmxvZyhcInJlY29nbml6aW5nIFwiICsgY29udGV4dC5tZXNzYWdlLnRleHQpO1xuICAgICAgICBpZiAoY29udGV4dC5tZXNzYWdlLnRleHQuaW5kZXhPZihcImRvd25cIikgPj0gMCkge1xuICAgICAgICAgICAgdS5pbnRlbnQgPSBcImludGVudC5kb3duXCI7XG4gICAgICAgICAgICB1LnNjb3JlID0gMC45O1xuICAgICAgICAgICAgdmFyIGUxID0ge307XG4gICAgICAgICAgICBlMS5zdGFydEluZGV4ID0gXCJzdGFydCBcIi5sZW5ndGg7XG4gICAgICAgICAgICBlMS5lbmRJbmRleCA9IGNvbnRleHQubWVzc2FnZS50ZXh0Lmxlbmd0aDtcbiAgICAgICAgICAgIGUxLnNjb3JlID0gMC4zO1xuICAgICAgICAgICAgdS5lbnRpdGllcyA9IFtlMV07XG4gICAgICAgICAgICBjYWxsYmFjayh1bmRlZmluZWQsIHUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb250ZXh0Lm1lc3NhZ2UudGV4dC5pbmRleE9mKFwidXBcIikgPj0gMCkge1xuICAgICAgICAgICAgdS5pbnRlbnQgPSBcImludGVudC51cFwiO1xuICAgICAgICAgICAgdS5zY29yZSA9IDAuOTtcbiAgICAgICAgICAgIHZhciBlMSA9IHt9O1xuICAgICAgICAgICAgZTEuc3RhcnRJbmRleCA9IFwidXBcIi5sZW5ndGg7XG4gICAgICAgICAgICBlMS5lbmRJbmRleCA9IGNvbnRleHQubWVzc2FnZS50ZXh0Lmxlbmd0aDtcbiAgICAgICAgICAgIGUxLnNjb3JlID0gMC4zO1xuICAgICAgICAgICAgdS5lbnRpdGllcyA9IFtlMV07XG4gICAgICAgICAgICBjYWxsYmFjayh1bmRlZmluZWQsIHUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnNvbGUubG9nKCdyZWNvZ25pemluZyBub3RoaW5nJyk7XG4gICAgICAgIHUuaW50ZW50ID0gXCJOb25lXCI7XG4gICAgICAgIHUuc2NvcmUgPSAwLjE7XG4gICAgICAgIHZhciBlMSA9IHt9O1xuICAgICAgICBlMS5zdGFydEluZGV4ID0gXCJleGl0IFwiLmxlbmd0aDtcbiAgICAgICAgZTEuZW5kSW5kZXggPSBjb250ZXh0Lm1lc3NhZ2UudGV4dC5sZW5ndGg7XG4gICAgICAgIGUxLnNjb3JlID0gMC4xO1xuICAgICAgICB1LmVudGl0aWVzID0gW107XG4gICAgICAgIGNhbGxiYWNrKHVuZGVmaW5lZCwgdSk7XG4gICAgfTtcbiAgICByZXR1cm4gU2ltcGxlVXBEb3duUmVjb2duaXplcjtcbn0oKSk7XG52YXIgQW55T2JqZWN0ID0gT2JqZWN0O1xuLy8gZ2xvYmFsVHVubmVsLmluaXRpYWxpemUoe1xuLy8gIGhvc3Q6ICdwcm94eS5leHh4YW1wbGUuY29tJyxcbi8vICBwb3J0OiA4MDgwXG4vLyB9KVxuLy8gQ3JlYXRlIGJvdCBhbmQgYmluZCB0byBjb25zb2xlXG4vLyB2YXIgY29ubmVjdG9yID0gbmV3IGh0bWxjb25uZWN0b3IuSFRNTENvbm5lY3RvcigpXG4vLyBjb25uZWN0b3Iuc2V0QW5zd2VySG9vayhmdW5jdGlvbiAoc0Fuc3dlcikge1xuLy8gIGNvbnNvbGUubG9nKCdHb3QgYW5zd2VyIDogJyArIHNBbnN3ZXIgKyAnXFxuJylcbi8vIH0pXG52YXIgYm90O1xuLy8gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4vLyAgIGNvbm5lY3Rvci5wcm9jZXNzTWVzc2FnZSgnc3RhcnQgdW5pdCB0ZXN0IEFCQyAnKVxuLy8gfSwgNTAwMClcbnZhciBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG52YXIgb0pTT04gPSBKU09OLnBhcnNlKCcnICsgZnMucmVhZEZpbGVTeW5jKCcuL3Jlc291cmNlcy9tb2RlbC9pbnRlbnRzLmpzb24nKSk7XG52YXIgb1J1bGVzID0gUGxhaW5SZWNvZ25pemVyLnBhcnNlUnVsZXMob0pTT04pO1xuLy8gdmFyIFJlY29nbml6ZXIgPSBuZXcgKHJlY29nbml6ZXIuUmVnRXhwUmVjb2duaXplcikob1J1bGVzKTtcbmZ1bmN0aW9uIGxvZ1F1ZXJ5KHNlc3Npb24sIGludGVudCwgcmVzdWx0KSB7XG4gICAgZnMuYXBwZW5kRmlsZSgnLi9sb2dzL3Nob3dtZXF1ZXJpZXMudHh0JywgXCJcXG5cIiArIEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgdGV4dDogc2Vzc2lvbi5tZXNzYWdlLnRleHQsXG4gICAgICAgIHRpbWVzdGFtcDogc2Vzc2lvbi5tZXNzYWdlLnRpbWVzdGFtcCxcbiAgICAgICAgaW50ZW50OiBpbnRlbnQsXG4gICAgICAgIHJlczogcmVzdWx0ICYmIHJlc3VsdC5sZW5ndGggJiYgTWF0Y2guVG9vbE1hdGNoLmR1bXBOaWNlKHJlc3VsdFswXSkgfHwgXCIwXCIsXG4gICAgICAgIGNvbnZlcnNhdGlvbklkOiBzZXNzaW9uLm1lc3NhZ2UuYWRkcmVzc1xuICAgICAgICAgICAgJiYgc2Vzc2lvbi5tZXNzYWdlLmFkZHJlc3MuY29udmVyc2F0aW9uXG4gICAgICAgICAgICAmJiBzZXNzaW9uLm1lc3NhZ2UuYWRkcmVzcy5jb252ZXJzYXRpb24uaWQgfHwgXCJcIixcbiAgICAgICAgdXNlcmlkOiBzZXNzaW9uLm1lc3NhZ2UuYWRkcmVzc1xuICAgICAgICAgICAgJiYgc2Vzc2lvbi5tZXNzYWdlLmFkZHJlc3MudXNlclxuICAgICAgICAgICAgJiYgc2Vzc2lvbi5tZXNzYWdlLmFkZHJlc3MudXNlci5pZCB8fCBcIlwiXG4gICAgfSksIGZ1bmN0aW9uIChlcnIsIHJlcykge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICBkZWJ1Z2xvZyhcImxvZ2dpbmcgZmFpbGVkIFwiICsgZXJyKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuLyoqXG4gKiBDb25zdHJ1Y3QgYSBib3RcbiAqIEBwYXJhbSBjb25uZWN0b3Ige0Nvbm5lY3Rvcn0gdGhlIGNvbm5lY3RvciB0byB1c2VcbiAqIEhUTUxDb25uZWN0b3JcbiAqIG9yIGNvbm5lY3RvciA9IG5ldyBidWlsZGVyLkNvbnNvbGVDb25uZWN0b3IoKS5saXN0ZW4oKVxuICovXG5mdW5jdGlvbiBtYWtlQm90KGNvbm5lY3Rvcikge1xuICAgIGJvdCA9IG5ldyBidWlsZGVyLlVuaXZlcnNhbEJvdChjb25uZWN0b3IpO1xuICAgIC8vIENyZWF0ZSBMVUlTIHJlY29nbml6ZXIgdGhhdCBwb2ludHMgYXQgb3VyIG1vZGVsIGFuZCBhZGQgaXQgYXMgdGhlIHJvb3QgJy8nIGRpYWxvZyBmb3Igb3VyIENvcnRhbmEgQm90LlxuICAgIC8vIHZhciBtb2RlbCA9IHNlbnNpdGl2ZS5tb2RlbHVybDtcbiAgICAvLyB2YXIgbW9kZWwgPSAnaHR0cHM6Ly9hcGkucHJvamVjdG94Zm9yZC5haS9sdWlzL3YyLjAvYXBwcy9jNDEzYjJlZi0zODJjLTQ1YmQtOGZmMC1mNzZkNjBlMmE4MjE/c3Vic2NyaXB0aW9uLWtleT1jMjEzOThiNTk4MGE0Y2UwOWY0NzRiYmZlZTkzYjg5MiZxPSdcbiAgICB2YXIgcmVjb2duaXplciA9IG5ldyBQbGFpblJlY29nbml6ZXIuUmVnRXhwUmVjb2duaXplcihvUnVsZXMpO1xuICAgIHZhciBkaWFsb2cgPSBuZXcgYnVpbGRlci5JbnRlbnREaWFsb2coeyByZWNvZ25pemVyczogW3JlY29nbml6ZXJdIH0pO1xuICAgIC8vIGRpYWxvZy5vbkJlZ2luKGZ1bmN0aW9uKHNlc3Npb24sYXJncykge1xuICAgIC8vIGNvbnNvbGUubG9nKFwiYmVnaW5uaW5nIC4uLlwiKVxuICAgIC8vIHNlc3Npb24uZGlhbG9nRGF0YS5yZXRyeVByb21wdCA9IGFyZ3MgJiYgYXJncy5yZXRyeVByb21wdCB8fCBcIkkgYW0gc29ycnlcIlxuICAgIC8vIHNlc3Npb24uc2VuZChcIldoYXQgZG8geW91IHdhbnQ/XCIpXG4gICAgLy9cbiAgICAvLyB9KVxuICAgIHZhciBkaWFsb2dVcERvd24gPSBuZXcgYnVpbGRlci5JbnRlbnREaWFsb2coeyByZWNvZ25pemVyczogW25ldyBTaW1wbGVVcERvd25SZWNvZ25pemVyKCldIH0pO1xuICAgIGJvdC5kaWFsb2coJy91cGRvd24nLCBkaWFsb2dVcERvd24pO1xuICAgIGRpYWxvZ1VwRG93bi5vbkJlZ2luKGZ1bmN0aW9uIChzZXNzaW9uKSB7XG4gICAgICAgIHNlc3Npb24uc2VuZChcIkhpIHRoZXJlLCB1cGRvd24gaXMgd2FpdGluZyBmb3IgeW91XCIpO1xuICAgIH0pO1xuICAgIGRpYWxvZ1VwRG93bi5tYXRjaGVzKCdpbnRlbnQudXAnLCBbXG4gICAgICAgIGZ1bmN0aW9uIChzZXNzaW9uLCBhcmdzLCBuZXh0KSB7XG4gICAgICAgICAgICBzZXNzaW9uLmRpYWxvZ0RhdGEuYWJjID0gYXJncyB8fCB7fTtcbiAgICAgICAgICAgIGJ1aWxkZXIuUHJvbXB0cy50ZXh0KHNlc3Npb24sICd5b3Ugd2FudCB0byBnbyB1cCcpO1xuICAgICAgICB9LFxuICAgICAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgcmVzdWx0cywgbmV4dCkge1xuICAgICAgICAgICAgc2Vzc2lvbi5kaWFsb2dEYXRhLmFiYyA9IHJlc3VsdHMucmVwb25zZTtcbiAgICAgICAgICAgIG5leHQoKTtcbiAgICAgICAgfSxcbiAgICAgICAgZnVuY3Rpb24gKHNlc3Npb24sIHJlc3VsdHMpIHtcbiAgICAgICAgICAgIHNlc3Npb24uZW5kRGlhbG9nV2l0aFJlc3VsdCh7IHJlc3BvbnNlOiBzZXNzaW9uLmRpYWxvZ0RhdGEuYWJjIH0pO1xuICAgICAgICB9XG4gICAgXSk7XG4gICAgZGlhbG9nVXBEb3duLm1hdGNoZXMoJ2ludGVudC5kb3duJywgW1xuICAgICAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgYXJncywgbmV4dCkge1xuICAgICAgICAgICAgc2Vzc2lvbi5kaWFsb2dEYXRhLmFiYyA9IGFyZ3MgfHwge307XG4gICAgICAgICAgICBidWlsZGVyLlByb21wdHMudGV4dChzZXNzaW9uLCAneW91IHdhbnQgdG8gZ28gZG93biEnKTtcbiAgICAgICAgfSxcbiAgICAgICAgZnVuY3Rpb24gKHNlc3Npb24sIHJlc3VsdHMsIG5leHQpIHtcbiAgICAgICAgICAgIHNlc3Npb24uZGlhbG9nRGF0YS5hYmMgPSAtMTsgLy8gcmVzdWx0cy5yZXBvbnNlO1xuICAgICAgICAgICAgbmV4dCgpO1xuICAgICAgICB9LFxuICAgICAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgcmVzdWx0cykge1xuICAgICAgICAgICAgc2Vzc2lvbi5zZW5kKFwic3RpbGwgZ29pbmcgZG93bj9cIik7XG4gICAgICAgIH1cbiAgICBdKTtcbiAgICBkaWFsb2dVcERvd24ub25EZWZhdWx0KGZ1bmN0aW9uIChzZXNzaW9uKSB7XG4gICAgICAgIGxvZ1F1ZXJ5KHNlc3Npb24sIFwib25EZWZhdWx0XCIpO1xuICAgICAgICBzZXNzaW9uLnNlbmQoXCJZb3UgYXJlIHRyYXBwZWQgaW4gYSBkaWFsb2cgd2hpY2ggb25seSB1bmRlcnN0YW5kcyB1cCBhbmQgZG93biwgb25lIG9mIHRoZW0gd2lsbCBnZXQgeW91IG91dFwiKTtcbiAgICAgICAgLy9idWlsZGVyLkRpYWxvZ0FjdGlvbi5zZW5kKCdJXFwnbSBzb3JyeSBJIGRpZG5cXCd0IHVuZGVyc3RhbmQuIEkgY2FuIG9ubHkgc2hvdyBzdGFydCBhbmQgcmluZycpO1xuICAgIH0pO1xuICAgIGJvdC5kaWFsb2coJy90cmFpbicsIFtcbiAgICAgICAgZnVuY3Rpb24gKHNlc3Npb24sIGFyZ3MsIG5leHQpIHtcbiAgICAgICAgICAgIHNlc3Npb24uZGlhbGdvRGF0YS5hYmMgPSBhcmdzIHx8IHt9O1xuICAgICAgICAgICAgYnVpbGRlci5Qcm9tcHRzLnRleHQoc2Vzc2lvbiwgJ0RvIHlvdSB3YW50IHRvIHRyYWluIG1lJyk7XG4gICAgICAgIH0sXG4gICAgICAgIGZ1bmN0aW9uIChzZXNzaW9uLCByZXN1bHRzLCBuZXh0KSB7XG4gICAgICAgICAgICBzZXNzaW9uLmRpYWxvZ0RhdGEuYWJjID0gcmVzdWx0cy5yZXBvbnNlO1xuICAgICAgICB9LFxuICAgICAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgcmVzdWx0cykge1xuICAgICAgICAgICAgc2Vzc2lvbi5lbmREaWFsb2dXaXRoUmVzdWx0KHsgcmVzcG9uc2U6IHNlc3Npb24uRGlhbG9nRGF0YS5hYmMgfSk7XG4gICAgICAgIH1cbiAgICBdKTtcbiAgICBib3QuZGlhbG9nKCcvJywgZGlhbG9nKTtcbiAgICBkaWFsb2cubWF0Y2hlcygnU2hvd01lJywgW1xuICAgICAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgYXJncywgbmV4dCkge1xuICAgICAgICAgICAgdmFyIGlzQ29tYmluZWRJbmRleCA9IHt9O1xuICAgICAgICAgICAgdmFyIG9OZXdFbnRpdHk7XG4gICAgICAgICAgICAvLyBleHBlY3RpbmcgZW50aXR5IEExXG4gICAgICAgICAgICBkZWJ1Z2xvZyhcIlNob3cgRW50aXR5XCIpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ3JhdzogJyArIEpTT04uc3RyaW5naWZ5KGFyZ3MuZW50aXRpZXMpLCB1bmRlZmluZWQsIDIpO1xuICAgICAgICAgICAgdmFyIGExID0gYnVpbGRlci5FbnRpdHlSZWNvZ25pemVyLmZpbmRFbnRpdHkoYXJncy5lbnRpdGllcywgJ0ExJyk7XG4gICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgICAgdmFyIGNsaWVudCA9IGJ1aWxkZXIuRW50aXR5UmVjb2duaXplci5maW5kRW50aXR5KGFyZ3MuZW50aXRpZXMsICdjbGllbnQnKTtcbiAgICAgICAgICAgICAgICAgIHZhciBzeXN0ZW1PYmplY3RJZCA9IGJ1aWxkZXIuRW50aXR5UmVjb2duaXplci5maW5kRW50aXR5KGNvbWJpbmVkRW50aXRpZXMsICdzeXN0ZW1PYmplY3RJZCcpIHx8XG4gICAgICAgICAgICAgICAgICAgIGJ1aWxkZXIuRW50aXR5UmVjb2duaXplci5maW5kRW50aXR5KGNvbWJpbmVkRW50aXRpZXMsICdTeXN0ZW1PYmplY3QnKSB8fFxuICAgICAgICAgICAgICAgICAgICBidWlsZGVyLkVudGl0eVJlY29nbml6ZXIuZmluZEVudGl0eShjb21iaW5lZEVudGl0aWVzLCAnYnVpbHRpbi5udW1iZXInKTtcbiAgICAgICAgICAgICAgICAgIHZhciBzeXN0ZW1PYmplY3RDYXRlZ29yeSA9IGJ1aWxkZXIuRW50aXR5UmVjb2duaXplci5maW5kRW50aXR5KGFyZ3MuZW50aXRpZXMsICdTeXN0ZW1PYmplY3RDYXRlZ29yeScpO1xuICAgICAgXG4gICAgICAgICAgICAgICAgICBzZXNzaW9uLmRpYWxvZ0RhdGEuc3lzdGVtID0ge1xuICAgICAgICAgICAgICAgICAgICBzeXN0ZW1JZDogc3lzdGVtSWQsXG4gICAgICAgICAgICAgICAgICAgIGNsaWVudDogY2xpZW50XG4gICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgICB2YXIgc1N5c3RlbUlkID0gc3lzdGVtSWQgJiYgc3lzdGVtSWQuZW50aXR5O1xuICAgICAgICAgICAgICAgICAgdmFyIHNDbGllbnQgPSBjbGllbnQgJiYgY2xpZW50LmVudGl0eTtcbiAgICAgICAgICAgICAgICAgIHZhciBzc3lzdGVtT2JqZWN0SWQgPSBzeXN0ZW1PYmplY3RJZCAmJiBzeXN0ZW1PYmplY3RJZC5lbnRpdHk7XG4gICAgICAgICAgICAgICAgICB2YXIgc1N5c3RlbU9iamVjdENhdGVnb3J5ID0gc3lzdGVtT2JqZWN0Q2F0ZWdvcnkgJiYgc3lzdGVtT2JqZWN0Q2F0ZWdvcnkuZW50aXR5O1xuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBBbmFseXplLmFuYWx5emVBbGwoYTEuZW50aXR5LCBtUnVsZXMsIHRvb2xzKTtcbiAgICAgICAgICAgIGxvZ1F1ZXJ5KHNlc3Npb24sICdTaG93TWUnLCByZXN1bHQpO1xuICAgICAgICAgICAgLy8gdGVzdC5leHBlY3QoMylcbiAgICAgICAgICAgIC8vICB0ZXN0LmRlZXBFcXVhbChyZXN1bHQud2VpZ2h0LCAxMjAsICdjb3JyZWN0IHdlaWdodCcpO1xuICAgICAgICAgICAgaWYgKCFyZXN1bHQgfHwgcmVzdWx0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIG5leHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGRlYnVnbG9nKCdyZXN1bHQgOiAnICsgSlNPTi5zdHJpbmdpZnkocmVzdWx0LCB1bmRlZmluZWQsIDIpKTtcbiAgICAgICAgICAgIGRlYnVnbG9nKCdiZXN0IHJlc3VsdCA6ICcgKyBKU09OLnN0cmluZ2lmeShyZXN1bHRbMF0gfHwge30sIHVuZGVmaW5lZCwgMikpO1xuICAgICAgICAgICAgZGVidWdsb2coJ3RvcCA6ICcgKyBNYXRjaC5Ub29sTWF0Y2guZHVtcFdlaWdodHNUb3AocmVzdWx0LCB7IHRvcDogMyB9KSk7XG4gICAgICAgICAgICBpZiAoQW5hbHl6ZS5pc0NvbXBsZXRlKHJlc3VsdFswXSkpIHtcbiAgICAgICAgICAgICAgICBzZXNzaW9uLmRpYWxvZ0RhdGEucmVzdWx0ID0gcmVzdWx0WzBdO1xuICAgICAgICAgICAgICAgIHNlc3Npb24uc2VuZCgnU2hvd2luZyBlbnRpdHkgLi4uJyk7XG4gICAgICAgICAgICAgICAgbmV4dCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoQW5hbHl6ZS5nZXRQcm9tcHQocmVzdWx0WzBdKSkge1xuICAgICAgICAgICAgICAgIHZhciBwcm9tcHQgPSBBbmFseXplLmdldFByb21wdChyZXN1bHRbMF0pO1xuICAgICAgICAgICAgICAgIHNlc3Npb24uZGlhbG9nRGF0YS5yZXN1bHQgPSByZXN1bHRbMF07XG4gICAgICAgICAgICAgICAgc2Vzc2lvbi5kaWFsb2dEYXRhLnByb21wdCA9IHByb21wdDtcbiAgICAgICAgICAgICAgICBzZXNzaW9uLnNlbmQoXCJOb3QgZW5vdWdoIGluZm9ybWF0aW9uIHN1cHBsaWVkOiBcIiArIE1hdGNoLlRvb2xNYXRjaC5kdW1wTmljZShzZXNzaW9uLmRpYWxvZ0RhdGEucmVzdWx0KSk7XG4gICAgICAgICAgICAgICAgYnVpbGRlci5Qcm9tcHRzLnRleHQoc2Vzc2lvbiwgcHJvbXB0LnRleHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIGJlc3QgPSByZXN1bHQubGVuZ3RoID8gTWF0Y2guVG9vbE1hdGNoLmR1bXBOaWNlKHJlc3VsdFswXSkgOiBcIjxub3RoaW5nPlwiO1xuICAgICAgICAgICAgICAgIC8vc2Vzc2lvbi5zZW5kKCdJIGRpZCBub3QgdW5kZXJzdGFuZCB0aGlzJyArIGJlc3QpO1xuICAgICAgICAgICAgICAgIHZhciByZXBseSA9IG5ldyBidWlsZGVyLk1lc3NhZ2Uoc2Vzc2lvbilcbiAgICAgICAgICAgICAgICAgICAgLnRleHQoJ0kgZGlkIG5vdCB1bmRlcnN0YW5kIHRoaXMnICsgYmVzdClcbiAgICAgICAgICAgICAgICAgICAgLmFkZEVudGl0eSh7IHVybDogXCJJIGRvbid0IGtub3dcIiB9KTtcbiAgICAgICAgICAgICAgICAvLyAuYWRkQXR0YWNobWVudCh7IGZhbGxiYWNrVGV4dDogXCJJIGRvbid0IGtub3dcIiwgY29udGVudFR5cGU6ICdpbWFnZS9qcGVnJywgY29udGVudFVybDogXCJ3d3cud29tYmF0Lm9yZ1wiIH0pO1xuICAgICAgICAgICAgICAgIHNlc3Npb24uc2VuZChyZXBseSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1Nob3cgZW50aXRpZXM6ICcgKyBKU09OLnN0cmluZ2lmeShhcmdzLmVudGl0aWVzLCB1bmRlZmluZWQsIDIpKTtcbiAgICAgIFxuICAgICAgICAgICAgICAgICAgLy8gZG8gdGhlIGJpZyBhbmFseWlzIC4uLlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHUgPSBkaXNwYXRjaGVyLmV4ZWNTaG93RW50aXR5KHtcbiAgICAgICAgICAgICAgICAgICAgc3lzdGVtSWQ6IHNTeXN0ZW1JZCxcbiAgICAgICAgICAgICAgICAgICAgY2xpZW50OiBzQ2xpZW50LFxuICAgICAgICAgICAgICAgICAgICB0b29sOiBzVG9vbCxcbiAgICAgICAgICAgICAgICAgICAgc3lzdGVtT2JqZWN0Q2F0ZWdvcnk6IHNTeXN0ZW1PYmplY3RDYXRlZ29yeSxcbiAgICAgICAgICAgICAgICAgICAgc3lzdGVtT2JqZWN0SWQ6IHNzeXN0ZW1PYmplY3RJZFxuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICovXG4gICAgICAgICAgICAvLyAgc2Vzc2lvbi5zZW5kKCdTaG93aW5nIGVudGl0eSAuLi4nKTtcbiAgICAgICAgICAgIC8vICBjb25zb2xlLmxvZyhcInNob3cgZW50aXR5LCBTaG93IHNlc3Npb24gOiBcIiArIEpTT04uc3RyaW5naWZ5KHNlc3Npb24pKVxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJTaG93IGVudGl0eSA6IFwiICsgSlNPTi5zdHJpbmdpZnkoYXJncy5lbnRpdGllcykpXG4gICAgICAgIH0sXG4gICAgICAgIGZ1bmN0aW9uIChzZXNzaW9uLCByZXN1bHRzLCBuZXh0KSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gc2Vzc2lvbi5kaWFsb2dEYXRhLnJlc3VsdDtcbiAgICAgICAgICAgIGlmICghcmVzdWx0IHx8IHJlc3VsdC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICBuZXh0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocmVzdWx0cy5yZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIC8vIHNvbWUgcHJvbXB0aW5nXG4gICAgICAgICAgICAgICAgQW5hbHl6ZS5zZXRQcm9tcHQoc2Vzc2lvbi5kaWFsb2dEYXRhLnJlc3VsdCwgc2Vzc2lvbi5kaWFsb2dEYXRhLnByb21wdCwgcmVzdWx0cy5yZXNwb25zZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoQW5hbHl6ZS5pc0NvbXBsZXRlKHNlc3Npb24uZGlhbG9nRGF0YS5yZXN1bHQpKSB7XG4gICAgICAgICAgICAgICAgbmV4dCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoQW5hbHl6ZS5nZXRQcm9tcHQoc2Vzc2lvbi5kaWFsb2dEYXRhLnJlc3VsdCkpIHtcbiAgICAgICAgICAgICAgICB2YXIgcHJvbXB0ID0gQW5hbHl6ZS5nZXRQcm9tcHQoc2Vzc2lvbi5kaWFsb2dEYXRhLnJlc3VsdCk7XG4gICAgICAgICAgICAgICAgc2Vzc2lvbi5kaWFsb2dEYXRhLnByb21wdCA9IHByb21wdDtcbiAgICAgICAgICAgICAgICBidWlsZGVyLlByb21wdHMudGV4dChzZXNzaW9uLCBwcm9tcHQudGV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGZ1bmN0aW9uIChzZXNzaW9uLCByZXN1bHRzLCBuZXh0KSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gc2Vzc2lvbi5kaWFsb2dEYXRhLnJlc3VsdDtcbiAgICAgICAgICAgIGlmIChyZXN1bHRzLnJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgLy8gc29tZSBwcm9tcHRpbmdcbiAgICAgICAgICAgICAgICBBbmFseXplLnNldFByb21wdChzZXNzaW9uLmRpYWxvZ0RhdGEucmVzdWx0LCBzZXNzaW9uLmRpYWxvZ0RhdGEucHJvbXB0LCByZXN1bHRzLnJlc3BvbnNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChBbmFseXplLmlzQ29tcGxldGUoc2Vzc2lvbi5kaWFsb2dEYXRhLnJlc3VsdCkpIHtcbiAgICAgICAgICAgICAgICBzZXNzaW9uLnNlbmQoXCJzdGFydGluZyAgPiBcIiArIEV4ZWMuZXhlY1Rvb2woc2Vzc2lvbi5kaWFsb2dEYXRhLnJlc3VsdCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHNlc3Npb24uZGlhbG9nRGF0YS5yZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgc2Vzc2lvbi5zZW5kKFwiTm90IGVub3VnaCBpbmZvcm1hdGlvbiBzdXBwbGllZDogXCIgKyBNYXRjaC5Ub29sTWF0Y2guZHVtcE5pY2Uoc2Vzc2lvbi5kaWFsb2dEYXRhLnJlc3VsdCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc2Vzc2lvbi5zZW5kKFwiSSBkaWQgbm90IGdldCB3aGF0IHlvdSB3YW50XCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICBdKTtcbiAgICBkaWFsb2cubWF0Y2hlcygnV3JvbmcnLCBbXG4gICAgICAgIGZ1bmN0aW9uIChzZXNzaW9uLCBhcmdzLCBuZXh0KSB7XG4gICAgICAgICAgICBzZXNzaW9uLmJlZ2luRGlhbG9nKCcvdXBkb3duJywgc2Vzc2lvbi51c2VyRGF0YS5jb3VudCk7XG4gICAgICAgIH0sXG4gICAgICAgIGZ1bmN0aW9uIChzZXNzaW9uLCByZXN1bHRzLCBuZXh0KSB7XG4gICAgICAgICAgICB2YXIgYWxhcm0gPSBzZXNzaW9uLmRpYWxvZ0RhdGEuYWxhcm07XG4gICAgICAgICAgICBzZXNzaW9uLnNlbmQoXCJiYWNrIGZyb20gd3JvbmcgOiBcIiArIEpTT04uc3RyaW5naWZ5KHJlc3VsdHMpKTtcbiAgICAgICAgICAgIG5leHQoKTtcbiAgICAgICAgfSxcbiAgICAgICAgZnVuY3Rpb24gKHNlc3Npb24sIHJlc3VsdHMpIHtcbiAgICAgICAgICAgIHNlc3Npb24uc2VuZCgnZW5kIG9mIHdyb25nJyk7XG4gICAgICAgIH1cbiAgICBdKTtcbiAgICBkaWFsb2cubWF0Y2hlcygnRXhpdCcsIFtcbiAgICAgICAgZnVuY3Rpb24gKHNlc3Npb24sIGFyZ3MsIG5leHQpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdleGl0IDonKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdleGl0JyArIEpTT04uc3RyaW5naWZ5KGFyZ3MuZW50aXRpZXMpKTtcbiAgICAgICAgICAgIHNlc3Npb24uc2VuZChcInlvdSBhcmUgaW4gYSBsb2dpYyBsb29wIFwiKTtcbiAgICAgICAgfVxuICAgIF0pO1xuICAgIGRpYWxvZy5tYXRjaGVzKCdIZWxwJywgW1xuICAgICAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgYXJncywgbmV4dCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ2hlbHAgOicpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ2hlbHAnKTtcbiAgICAgICAgICAgIHNlc3Npb24uc2VuZChcIkkga25vdyBhYm91dCAuLi4uIDxjYXRlZ29yaWVzPj5cIik7XG4gICAgICAgIH1cbiAgICBdKTtcbiAgICAvLyBBZGQgaW50ZW50IGhhbmRsZXJzXG4gICAgZGlhbG9nLm1hdGNoZXMoJ3RyYWluJywgW1xuICAgICAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgYXJncywgbmV4dCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ3RyYWluJyk7XG4gICAgICAgICAgICAvLyBSZXNvbHZlIGFuZCBzdG9yZSBhbnkgZW50aXRpZXMgcGFzc2VkIGZyb20gTFVJUy5cbiAgICAgICAgICAgIHZhciB0aXRsZSA9IGJ1aWxkZXIuRW50aXR5UmVjb2duaXplci5maW5kRW50aXR5KGFyZ3MuZW50aXRpZXMsICdidWlsdGluLmFsYXJtLnRpdGxlJyk7XG4gICAgICAgICAgICB2YXIgdGltZSA9IGJ1aWxkZXIuRW50aXR5UmVjb2duaXplci5yZXNvbHZlVGltZShhcmdzLmVudGl0aWVzKTtcbiAgICAgICAgICAgIHZhciBhbGFybSA9IHNlc3Npb24uZGlhbG9nRGF0YS5hbGFybSA9IHtcbiAgICAgICAgICAgICAgICB0aXRsZTogdGl0bGUgPyB0aXRsZS5lbnRpdHkgOiBudWxsLFxuICAgICAgICAgICAgICAgIHRpbWVzdGFtcDogdGltZSA/IHRpbWUuZ2V0VGltZSgpIDogbnVsbFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8vIFByb21wdCBmb3IgdGl0bGVcbiAgICAgICAgICAgIGlmICghYWxhcm0udGl0bGUpIHtcbiAgICAgICAgICAgICAgICBidWlsZGVyLlByb21wdHMudGV4dChzZXNzaW9uLCAnV2hhdCBmYWN0IHdvdWxkIHlvdSBsaWtlIHRvIHRyYWluPycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbmV4dCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgcmVzdWx0cywgbmV4dCkge1xuICAgICAgICAgICAgdmFyIGFsYXJtID0gc2Vzc2lvbi5kaWFsb2dEYXRhLmFsYXJtO1xuICAgICAgICAgICAgaWYgKHJlc3VsdHMucmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICBhbGFybS50aXRsZSA9IHJlc3VsdHMucmVzcG9uc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBQcm9tcHQgZm9yIHRpbWUgKHRpdGxlIHdpbGwgYmUgYmxhbmsgaWYgdGhlIHVzZXIgc2FpZCBjYW5jZWwpXG4gICAgICAgICAgICBpZiAoYWxhcm0udGl0bGUgJiYgIWFsYXJtLnRpbWVzdGFtcCkge1xuICAgICAgICAgICAgICAgIGJ1aWxkZXIuUHJvbXB0cy50aW1lKHNlc3Npb24sICdXaGF0IHRpbWUgd291bGQgeW91IGxpa2UgdG8gc2V0IHRoZSBhbGFybSBmb3I/Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBuZXh0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGZ1bmN0aW9uIChzZXNzaW9uLCByZXN1bHRzKSB7XG4gICAgICAgICAgICB2YXIgYWxhcm0gPSBzZXNzaW9uLmRpYWxvZ0RhdGEuYWxhcm07XG4gICAgICAgICAgICBpZiAocmVzdWx0cy5yZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIHZhciB0aW1lID0gYnVpbGRlci5FbnRpdHlSZWNvZ25pemVyLnJlc29sdmVUaW1lKFtyZXN1bHRzLnJlc3BvbnNlXSk7XG4gICAgICAgICAgICAgICAgYWxhcm0udGltZXN0YW1wID0gdGltZSA/IHRpbWUuZ2V0VGltZSgpIDogbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFNldCB0aGUgYWxhcm0gKGlmIHRpdGxlIG9yIHRpbWVzdGFtcCBpcyBibGFuayB0aGUgdXNlciBzYWlkIGNhbmNlbClcbiAgICAgICAgICAgIGlmIChhbGFybS50aXRsZSAmJiBhbGFybS50aW1lc3RhbXApIHtcbiAgICAgICAgICAgICAgICAvLyBTYXZlIGFkZHJlc3Mgb2Ygd2hvIHRvIG5vdGlmeSBhbmQgd3JpdGUgdG8gc2NoZWR1bGVyLlxuICAgICAgICAgICAgICAgIGFsYXJtLmFkZHJlc3MgPSBzZXNzaW9uLm1lc3NhZ2UuYWRkcmVzcztcbiAgICAgICAgICAgICAgICAvL2FsYXJtc1thbGFybS50aXRsZV0gPSBhbGFybTtcbiAgICAgICAgICAgICAgICAvLyBTZW5kIGNvbmZpcm1hdGlvbiB0byB1c2VyXG4gICAgICAgICAgICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZShhbGFybS50aW1lc3RhbXApO1xuICAgICAgICAgICAgICAgIHZhciBpc0FNID0gZGF0ZS5nZXRIb3VycygpIDwgMTI7XG4gICAgICAgICAgICAgICAgc2Vzc2lvbi5zZW5kKCdDcmVhdGluZyBhbGFybSBuYW1lZCBcIiVzXCIgZm9yICVkLyVkLyVkICVkOiUwMmQlcycsIGFsYXJtLnRpdGxlLCBkYXRlLmdldE1vbnRoKCkgKyAxLCBkYXRlLmdldERhdGUoKSwgZGF0ZS5nZXRGdWxsWWVhcigpLCBpc0FNID8gZGF0ZS5nZXRIb3VycygpIDogZGF0ZS5nZXRIb3VycygpIC0gMTIsIGRhdGUuZ2V0TWludXRlcygpLCBpc0FNID8gJ2FtJyA6ICdwbScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc2Vzc2lvbi5zZW5kKCdPay4uLiBubyBwcm9ibGVtLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgXSk7XG4gICAgZGlhbG9nLm9uRGVmYXVsdChmdW5jdGlvbiAoc2Vzc2lvbikge1xuICAgICAgICBsb2dRdWVyeShzZXNzaW9uLCBcIm9uRGVmYXVsdFwiKTtcbiAgICAgICAgc2Vzc2lvbi5zZW5kKFwiSSBkbyBub3QgdW5kZXJzdGFuZCB0aGlzIGF0IGFsbFwiKTtcbiAgICAgICAgLy9idWlsZGVyLkRpYWxvZ0FjdGlvbi5zZW5kKCdJXFwnbSBzb3JyeSBJIGRpZG5cXCd0IHVuZGVyc3RhbmQuIEkgY2FuIG9ubHkgc2hvdyBzdGFydCBhbmQgcmluZycpO1xuICAgIH0pO1xuICAgIC8qXG4gICAgLy8gVmVyeSBzaW1wbGUgYWxhcm0gc2NoZWR1bGVyXG4gICAgdmFyIGFsYXJtcyA9IHt9O1xuICAgIHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBub3cgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgIGZvciAodmFyIGtleSBpbiBhbGFybXMpIHtcbiAgICAgICAgdmFyIGFsYXJtID0gYWxhcm1zW2tleV07XG4gICAgICAgIGlmIChub3cgPj0gYWxhcm0udGltZXN0YW1wKSB7XG4gICAgICAgICAgdmFyIG1zZyA9IG5ldyBidWlsZGVyLk1lc3NhZ2UoKVxuICAgICAgICAgICAgLmFkZHJlc3MoYWxhcm0uYWRkcmVzcylcbiAgICAgICAgICAgIC50ZXh0KCdIZXJlXFwncyB5b3VyIFxcJyVzXFwnIGFsYXJtLicsIGFsYXJtLnRpdGxlKTtcbiAgICAgICAgICBib3Quc2VuZChtc2cpO1xuICAgICAgICAgIGRlbGV0ZSBhbGFybXNba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIDE1MDAwKTtcbiAgICAqL1xufVxuaWYgKG1vZHVsZSkge1xuICAgIG1vZHVsZS5leHBvcnRzID0ge1xuICAgICAgICBtYWtlQm90OiBtYWtlQm90XG4gICAgfTtcbn1cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
