/**
 * The bot implementation
 *
 * Instantiate apssing a connector via
 * makeBot
 *
 */
/**
 * @file
 * @module jfseb.fdevstart.smartdialog
 * @copyright (c) 2016 Gerd Forstmann
 */
//declare module 'elizabot' { };
//declare module 'winston-pg' { };
//delcare module 'winston' {};
"use strict";

var builder = require('botbuilder');
var debug = require('debug');
var Match = require('../match/match');
var Analyze = require('../match/analyze');
var BreakDown = require('../match/breakdown');
var WhatIs = require('../match/whatis');
var ListAll = require('../match/listall');
var Describe = require('../match/describe');
var Utils = require('../utils/utils');
var _ = require('lodash');
var DialogLogger = require('../utils/dialoglogger');
var process = require('process');
var dburl = process.env.DATABASE_URL || "";
var pglocalurl = "postgres://joe:abcdef@localhost:5432/abot";
var dburl = process.env.DATABASE_URL || pglocalurl;
var pg = require('pg');
var o = pg;
if (!process.env.ABOT_DBNOSSL) {
    o.defaults.ssl = true; // Only used internally !
}
var dialogLogger = DialogLogger.logger("smartbot", dburl, pg);
function send(o) {
    return o;
}
;
function dialoglog(intent, session, response) {
    var sResponse;
    var sAction;
    if (typeof response === "string") {
        sAction = "";
        sResponse = response;
    } else {
        var aMessage = response;
        var iMessage = aMessage.toMessage();
        sResponse = iMessage.text;
        sAction = iMessage.entities && iMessage.entities[0] ? JSON.stringify(iMessage.entities && iMessage.entities[0]) : "";
    }
    dialogLogger({
        intent: intent,
        session: session,
        response: sResponse,
        action: sAction
    });
    session.send(response);
}
//const pgLogger = new PgLogger({
//  name: 'test-logger',
//  level: 'debug',
//  connString: 'postgres://ubuntu@localhost:5432/circle_test',
//  tableName: 'winston_logs',
//});
//winston.add(winston.transports.File, { filename: 'winston_out.log', timestamp : true });
//  winston.remove(winston.transports.Console);
//winston.add(pgLogger);
/*
const logger = new winston.Logger({
  transports: [
    new winston.transports.Console({
      color: true,
      timestamp: true,
    }),
    pgLogger,
  ]
});
*/
//pgLogger.initTable(done);
var elizabot = require('../extern/elizabot/elizabot.js');
//import * as elizabot from 'elizabot';
var debuglog = debug('smartdialog');
var PlainRecognizer = require('./plainrecognizer');
//var builder = require('botbuilder');
var dispatcher = require('../match/dispatcher.js').dispatcher;
function getConversationId(session) {
    return session.message && session.message.address && session.message.address.conversation.id;
}
var elizabots = {};
function getElizaBot(id) {
    if (!elizabots[id]) {
        elizabots[id] = {
            access: new Date(),
            elizabot: new elizabot()
        };
    }
    elizabots[id].access = new Date();
    return elizabots[id].elizabot;
}
var newFlow = true;
var Model = require('../model/model');
var ExecServer = require('../exec/execserver');
var theDefaultModel = Model.loadModels();
var models = {};
function loadModel(modelPath) {
    modelPath = modelPath || "";
    if (!models[modelPath]) {
        models[modelPath] = Model.loadModels(modelPath);
    }
    return models[modelPath];
}
if (newFlow) {} else {}
function isAnonymous(userid) {
    return userid.indexOf("ano:") === 0;
}
function restrictLoggedOn(session, arr) {
    var userid = session.message.address && session.message.address.user && session.message.address.user.id || "";
    if (process.env.ABOT_EMAIL_USER && isAnonymous(userid)) {
        if (arr.length < 6) {
            return arr;
        }
        var len = arr.length;
        var res = arr.slice(0, Math.min(Math.max(Math.floor(arr.length / 3), 7), arr.length));
        if (typeof arr[0] === "string") {
            var delta = len - res.length;
            res.push("... and " + delta + " more entries for registered users");
        }
        return res;
    }
    return arr;
}
/*
export class SimpleRecognizer implements builder.IIntentRecognizer {
  constructor() {

  }

  recognize(context: builder.IRecognizeContext, callback: (err: Error, result: builder.IIntentRecognizerResult) => void): void {
    var u = {} as builder.IIntentRecognizerResult;

    debuglog("recognizing " + context.message.text);
    if (context.message.text.indexOf("start") >= 0) {
      u.intent = "ShowEntity";
      u.score = 0.9;
      var e1 = {} as builder.IEntity;
      e1.startIndex = "start ".length;
      e1.endIndex = context.message.text.length;
      e1.score = 0.3;
      u.entities = [e1];
      callback(undefined, u);
      return;
    }

    if (context.message.text.indexOf("train") >= 0) {
      u.intent = "train";
      u.score = 0.9;
      var e1 = {} as builder.IEntity;
      e1.startIndex = "train ".length;
      e1.endIndex = context.message.text.length;
      e1.score = 0.3;
      u.entities = [e1];
      callback(undefined, u);
      return;
    }
    if (context.message.text.indexOf("learn") >= 0) {
      u.intent = "learn";
      u.score = 0.9;
      var e1 = {} as builder.IEntity;
      e1.type = "trainFact";
      e1.startIndex = "train ".length;
      e1.endIndex = context.message.text.length;
      e1.score = 0.3;
      u.entities = [e1];
      callback(undefined, u);
      return;
    }
    if (context.message.text.indexOf("help") >= 0) {
      u.intent = "help";
      u.score = 0.9;
      var e1 = {} as builder.IEntity;
      e1.startIndex = "train ".length;
      e1.endIndex = context.message.text.length;
      e1.score = 0.3;
      u.entities = [e1];
      callback(undefined, u);
      return;
    }
    if (context.message.text.indexOf("exit") >= 0) {
      u.intent = "exit";
      u.score = 0.9;
      var e1 = {} as builder.IEntity;
      e1.startIndex = "exit ".length;
      e1.endIndex = context.message.text.length;
      e1.score = 0.3;
      u.entities = [e1];
      callback(undefined, u);
      return;
    }
    if (context.message.text.indexOf("wrong") >= 0) {
      u.intent = "wrong";
      u.score = 0.9;
      var e1 = {} as builder.IEntity;
      e1.startIndex = "exit ".length;
      e1.endIndex = context.message.text.length;
      e1.score = 0.3;
      u.entities = [e1];
      callback(undefined, u);
      return;
    }
    debuglog('recognizing nothing');
    u.intent = "None";
    u.score = 0.1;
    var e1 = {} as builder.IEntity;
    e1.startIndex = "exit ".length;
    e1.endIndex = context.message.text.length;
    e1.score = 0.1;
    u.entities = [];
    callback(undefined, u);
  }
}
*/
var aTrainReplies = ["Thank you for sharing this suggestion with us", "Thank for for this valuable information.", "Thank for for this interesting fact!", "Thats a plethoria of information.", "That's a nugget of information.", "Lovely, I may consider you input.", "Well done, anything more to let me know?", "I do appreciate your teaching and my learning experience, or was it the other way round?", "Your helpful input has been stored in some dusty corner of the World wide web!", "Thank you for my learning experience!", "I have incorporated your valuable suggestion in the wisdom of the internet"];
var aTrainDialog = aTrainReplies;
var aTrainExitHint = ["\ntype \"done\" when you are done training me.", "", "", "", "\nremember, you are stuck here instructing me, type \"done\" to return.", ""];
var aEnterTrain = ['So you think this is wrong? You can offer your advise here.\n Type "done" if you are done with instructing me', 'Feel free to offer me your better solution here.\nType "done" if you are done with instructing me', 'Some say "The secret to happiness is to lower your expectations to the point they are already met.", \nt if you could help me to become better, instruct me.\n Type "done" if you are done with teaching me', 'Feel free to offer me your better solution here.\n Type "done" if you are done with instructing me', 'Feel free to offer me your better solution here.\n Type "done" if you are done with instructing me'];
var aBackFromTraining = ['Puuh, back from training! Now for the easy part ...\n ask me a new question.', 'Live and don\'t learn, that\'s us. Naah, we\'ll see.\nAsk me another question.', 'The secret to happiness is to lower your expectations to the point they are already met.\n Ask me a question.', 'Thanks for having this lecture session, now i am back to our usual self.\n Ask me a question.'];
var aTrainNoKlingon = ["He who master the dark arts of SAP must not dwell in the earthly realms of Start Trek.", "SAP is a cloud company, not a space company.", "The depth of R/3 are deeper than Deep Space 42.", "My brainpower is fully absorbed with mastering other realms.", "For the wosap, the sky is the limit. Feel free to check out nasa.gov .", "The future is SAP or IBM blue, not space black.", "That's left to some musky future."];
exports.aResponsesOnTooLong = ["Your input should be eloquent in it's brevity. This one was too long.", "my wisdom is severly bound by my limited input processing capabilities. Could you formulate a shorter input? Thank you.", "The length of you input indicates you probably know more about the topic than me? Can i humbly ask you to formulate a shorter question?", '\"What ever you want to teach, be brief\" (Horace). While this does not always applies to my answers, it is require for your questions. Please try again with a refined questions.', 'I understand more than 4-letter words, but not more than 20 word sentences. Please try to shorten your input.', 'the sky is the limit? Air force member or not, you can ask longer questions than \"the sky\", but not this long', 'My answers may be exhaustive, but I understand more than 4-letter words, but not more than 20 word sentences. Sorry.', 'Our conversation must be highly assymmetric: my answers may be verbose and exhaustive and fuzzy, questions and input must be brief. Try to reformulate it'];
exports.metawordsDescriptions = {
    "category": "an attribute of a record in a model, example: a Planet has a \"name\" attribute",
    "domain": "a group of facts which are typically unrelated",
    "key": "an attribute value (of a category) which  is unique for the record",
    "tool": "is potentialy command to execute",
    "record": "a specific set of \"fact\"s of a domain, a \"record\" has a set of attributes values (\"fact\"s) of the categories, often a record has a \"key\"",
    "fact": "a specific category value of a record in a domain, may be a \"key\" value"
};
function getRandomResult(arr) {
    return arr[Math.floor(Math.random() * arr.length) % arr.length];
}
var SimpleUpDownRecognizer = function () {
    function SimpleUpDownRecognizer() {}
    SimpleUpDownRecognizer.prototype.recognize = function (context, callback) {
        var u = {};
        debuglog("recognizing " + context.message.text);
        if (context.message.text.indexOf("down") >= 0) {
            u.intent = "intent.down";
            u.score = 0.9;
            var e1 = {};
            e1.startIndex = "start ".length;
            e1.endIndex = context.message.text.length;
            e1.score = 0.3;
            u.entities = [e1];
            callback(undefined, u);
            return;
        }
        if (context.message.text.indexOf("up") >= 0) {
            u.intent = "intent.up";
            u.score = 0.9;
            var e1 = {};
            e1.startIndex = "up".length;
            e1.endIndex = context.message.text.length;
            e1.score = 0.3;
            u.entities = [e1];
            callback(undefined, u);
            return;
        }
        if (context.message.text.indexOf("done") >= 0) {
            u.intent = "intent.up";
            u.score = 0.9;
            var e1 = {};
            e1.startIndex = "up".length;
            e1.endIndex = context.message.text.length;
            e1.score = 0.3;
            u.entities = [e1];
            callback(undefined, u);
            return;
        }
        if (context.message.text.indexOf("exit") >= 0) {
            u.intent = "intent.up";
            u.score = 0.9;
            var e1 = {};
            e1.startIndex = "up".length;
            e1.endIndex = context.message.text.length;
            e1.score = 0.3;
            u.entities = [e1];
            callback(undefined, u);
            return;
        }
        if (context.message.text.indexOf("quit") >= 0) {
            u.intent = "intent.up";
            u.score = 0.9;
            var e1 = {};
            e1.startIndex = "up".length;
            e1.endIndex = context.message.text.length;
            e1.score = 0.3;
            u.entities = [e1];
            callback(undefined, u);
            return;
        }
        debuglog('recognizing nothing');
        u.intent = "None";
        u.score = 0.1;
        var e1 = {};
        e1.startIndex = "exit ".length;
        e1.endIndex = context.message.text.length;
        e1.score = 0.1;
        u.entities = [];
        callback(undefined, u);
    };
    return SimpleUpDownRecognizer;
}();
exports.SimpleUpDownRecognizer = SimpleUpDownRecognizer;
var AnyObject = Object;
// globalTunnel.initialize({
//  host: 'proxy.exxxample.com',
//  port: 8080
// })
// Create bot and bind to console
// var connector = new htmlconnector.HTMLConnector()
// connector.setAnswerHook(function (sAnswer) {
//  console.log('Got answer : ' + sAnswer + '\n')
// })
var bot;
// setTimeout(function () {
//   connector.processMessage('start unit test ABC ')
// }, 5000)
var fs = require('fs');
var oJSON = JSON.parse('' + fs.readFileSync('./resources/model/intents.json'));
var oRules = PlainRecognizer.parseRules(oJSON);
// var Recognizer = new (recognizer.RegExpRecognizer)(oRules);
function logQuery(session, intent, result) {
    fs.appendFile('./logs/showmequeries.txt', "\n" + JSON.stringify({
        text: session.message.text,
        timestamp: session.message.timestamp,
        intent: intent,
        res: result && result.length && Match.ToolMatch.dumpNice(result[0]) || "0",
        conversationId: session.message.address && session.message.address.conversation && session.message.address.conversation.id || "",
        userid: session.message.address && session.message.address.user && session.message.address.user.id || ""
    }), function (err, res) {
        if (err) {
            debuglog("logging failed " + err);
        }
    });
}
function logQueryWhatIs(session, intent, result) {
    fs.appendFile('./logs/showmequeries.txt', "\n" + JSON.stringify({
        text: session.message.text,
        timestamp: session.message.timestamp,
        intent: intent,
        res: result && result.length && WhatIs.dumpNice(result[0]) || "0",
        conversationId: session.message.address && session.message.address.conversation && session.message.address.conversation.id || "",
        userid: session.message.address && session.message.address.user && session.message.address.user.id || ""
    }), function (err, res) {
        if (err) {
            debuglog("logging failed " + err);
        }
    });
}
function logQueryWhatIsTupel(session, intent, result) {
    fs.appendFile('./logs/showmequeries.txt', "\n" + JSON.stringify({
        text: session.message.text,
        timestamp: session.message.timestamp,
        intent: intent,
        res: result && result.length && WhatIs.dumpNiceTupel(result[0]) || "0",
        conversationId: session.message.address && session.message.address.conversation && session.message.address.conversation.id || "",
        userid: session.message.address && session.message.address.user && session.message.address.user.id || ""
    }), function (err, res) {
        if (err) {
            debuglog("logging failed " + err);
        }
    });
}
var gwords = {};
/**
 * Construct a bot
 * @param connector {Connector} the connector to use
 * HTMLConnector
 * or connector = new builder.ConsoleConnector().listen()
 */
function makeBot(connector, modelPath) {
    var theModel = loadModel(modelPath);
    bot = new builder.UniversalBot(connector);
    // Create LUIS recognizer that points at our model and add it as the root '/' dialog for our Cortana Bot.
    // var model = sensitive.modelurl;
    // var model = 'https://api.projectoxford.ai/luis/v2.0/apps/c413b2ef-382c-45bd-8ff0-f76d60e2a821?subscription-key=c21398b5980a4ce09f474bbfee93b892&q='
    var recognizer = new PlainRecognizer.RegExpRecognizer(oRules);
    var dialog = new builder.IntentDialog({ recognizers: [recognizer] });
    // dialog.onBegin(function(session,args) {
    // console.log("beginning ...")
    // session.dialogData.retryPrompt = args && args.retryPrompt || "I am sorry"
    // session.send("What do you want?")
    //
    // })
    var dialogUpDown = new builder.IntentDialog({ recognizers: [new SimpleUpDownRecognizer()] });
    bot.dialog('/updown', dialogUpDown);
    dialogUpDown.onBegin(function (session) {
        dialoglog("TrainMe", session, send(getRandomResult(aEnterTrain)));
        //session.send("Hi there, updown is waiting for you");
    });
    dialogUpDown.matches('intent.up', [function (session, args, next) {
        session.dialogData.abc = args || {};
        builder.Prompts.text(session, 'you want to exit training? type \"done\" again.');
    }, function (session, results, next) {
        session.dialogData.abc = results.reponse;
        next();
    }, function (session, results) {
        session.endDialogWithResult({ response: session.dialogData.abc });
    }]);
    dialogUpDown.matches('intent.down', [function (session, args, next) {
        session.dialogData.abc = args || {};
        builder.Prompts.text(session, 'you want to go down!');
    }, function (session, results, next) {
        session.dialogData.abc = -1; // results.reponse;
        next();
    }, function (session, results) {
        session.send("still going down?");
    }]);
    dialogUpDown.onDefault(function (session) {
        logQuery(session, "onDefault");
        var res = getRandomResult(aTrainDialog) + getRandomResult(aTrainExitHint);
        dialoglog("TrainMe", session, send(res));
    });
    bot.dialog('/train', [function (session, args, next) {
        session.dialgoData.abc = args || {};
        builder.Prompts.text(session, 'Do you want to train me');
    }, function (session, results, next) {
        session.dialogData.abc = results.reponse;
    }, function (session, results) {
        session.endDialogWithResult({ response: session.DialogData.abc });
    }]);
    bot.dialog('/', dialog);
    dialog.matches('ShowMe', [function (session, args, next) {
        var isCombinedIndex = {};
        var oNewEntity;
        // expecting entity A1
        debuglog("Show Entity");
        debuglog('raw: ' + JSON.stringify(args.entities), undefined, 2);
        var a1 = builder.EntityRecognizer.findEntity(args.entities, 'A1');
        var result = Analyze.analyzeAll(a1.entity, theModel.rules, theModel.tools, gwords);
        logQuery(session, 'ShowMe', result);
        // test.expect(3)
        //  test.deepEqual(result.weight, 120, 'correct weight');
        if (!result || result.length === 0) {
            next();
        }
        // debuglog('result : ' + JSON.stringify(result, undefined, 2));
        debuglog('best result : ' + JSON.stringify(result[0] || {}, undefined, 2));
        debuglog('top : ' + Match.ToolMatch.dumpWeightsTop(result, { top: 3 }));
        if (Analyze.isComplete(result[0])) {
            session.dialogData.result = result[0];
            //    session.send('Showing entity ...');
            next();
        } else if (Analyze.getPrompt(result[0])) {
            var prompt = Analyze.getPrompt(result[0]);
            session.dialogData.result = result[0];
            session.dialogData.prompt = prompt;
            dialoglog("ShowMe", session, send("Not enough information supplied: " + Match.ToolMatch.dumpNice(session.dialogData.result)));
            builder.Prompts.text(session, prompt.text);
        } else {
            var best = result.length ? Match.ToolMatch.dumpNice(result[0]) : "<nothing>";
            dialoglog("ShowMe", session, send('I did not understand this' + best));
        }
    }, function (session, results, next) {
        var result = session.dialogData.result;
        if (!result || result.length === 0) {
            next();
        }
        if (results.response) {
            // some prompting
            Analyze.setPrompt(session.dialogData.result, session.dialogData.prompt, results.response);
        }
        if (Analyze.isComplete(session.dialogData.result)) {
            next();
        } else if (Analyze.getPrompt(session.dialogData.result)) {
            var prompt = Analyze.getPrompt(session.dialogData.result);
            session.dialogData.prompt = prompt;
            builder.Prompts.text(session, prompt.text);
        }
    }, function (session, results, next) {
        var result = session.dialogData.result;
        if (results.response) {
            // some prompting
            Analyze.setPrompt(session.dialogData.result, session.dialogData.prompt, results.response);
        }
        if (Analyze.isComplete(session.dialogData.result)) {
            var exec = ExecServer.execTool(session.dialogData.result, theModel.records);
            var reply = new builder.Message(session).text(exec.text).addEntity(exec.action);
            // .addAttachment({ fallbackText: "I don't know", contentType: 'image/jpeg', contentUrl: "www.wombat.org" });
            dialoglog("ShowMe", session, send(reply));
        } else {
            if (session.dialogData.result) {
                dialoglog("ShowMe", session, send("Not enough information supplied: " + Match.ToolMatch.dumpNice(session.dialogData.result)));
            } else {
                dialoglog("ShowMe", session, send("I did not get what you want"));
            }
        }
    }]);
    dialog.matches('WhatIs', [function (session, args, next) {
        var isCombinedIndex = {};
        var oNewEntity;
        // expecting entity A1
        var message = session.message.text;
        debuglog("WhatIs Entities");
        debuglog('raw: ' + JSON.stringify(args.entities), undefined, 2);
        var categoryEntity = builder.EntityRecognizer.findEntity(args.entities, 'category');
        var category = categoryEntity.entity;
        var a1 = builder.EntityRecognizer.findEntity(args.entities, 'A1');
        var cats = [];
        try {
            cats = WhatIs.analyzeCategoryMult2(category, theModel.rules, message);
            debuglog("here cats" + cats.join(","));
        } catch (e) {
            if (e) {
                debuglog("here exception" + e);
                dialoglog("WhatIs", session, send('I don\'t know anything about "' + category + (e ? '(' + e.toString() + ')' : "")));
                // next();
                return;
            }
        }
        var cat = undefined;
        // we have some cats, (or at least one)
        if (cats.length === 1) {
            cat = cats[0];
            if (!cat) {
                session.send('I don\'t know anything about "' + category + '"');
                // next();
                return;
            }
        }
        if (cats.length === 1) {
            debuglog('category identified:' + cat);
            var result = WhatIs.resolveCategory(cat, a1.entity, theModel.rules, theModel.records);
            debuglog('whatis result:' + JSON.stringify(result));
            logQueryWhatIs(session, 'WhatIs', result);
            var indis = WhatIs.isIndiscriminateResult(result);
            if (indis) {
                session.send(indis);
                // next();
                return;
            }
            if (!result || result.length === 0) {
                dialoglog("WhatIs", session, send('I don\'t know anything about "' + cat + " (" + category + ')\" in relation to "' + a1.entity + '"'));
                // next();
                return;
            } else {
                // debuglog('result : ' + JSON.stringify(result, undefined, 2));
                debuglog('best result : ' + JSON.stringify(result[0] || {}, undefined, 2));
                debuglog('top : ' + WhatIs.dumpWeightsTop(result, { top: 3 }));
                // TODO cleansed sentence
                dialoglog("WhatIs", session, send('The ' + category + ' of ' + a1.entity + ' is ' + result[0].result + "\n")); //  + JSON.stringify(result[0]));
            }
        } // single category
        else {
                debuglog('categories identified:' + cats.join(","));
                var resultArr = WhatIs.resolveCategories(cats, a1.entity, theModel);
                debuglog('whatis result:' + JSON.stringify(resultArr));
                logQueryWhatIsTupel(session, 'WhatIs', resultArr);
                var indis = WhatIs.isIndiscriminateResultTupel(resultArr);
                if (indis) {
                    session.send(indis);
                    // next();
                    return;
                }
                if (!resultArr || resultArr.length === 0) {
                    dialoglog("WhatIs", session, send('I don\'t know anything about "' + category + "\" (" + Utils.listToQuotedCommaAnd(cats) + ')\" in relation to "' + a1.entity + '"'));
                    // next();
                    return;
                } else {
                    // debuglog('result : ' + JSON.stringify(result, undefined, 2));
                    debuglog('best result : ' + JSON.stringify(resultArr[0] || {}, undefined, 2));
                    //debuglog('top : ' + WhatIs.dumpWeightsTop(resultArr, { top: 3 }));
                    // TODO cleansed sentence
                    dialoglog("WhatIs", session, send('The ' + Utils.listToQuotedCommaAnd(cats) + ' of ' + a1.entity + ' are ' + Utils.listToQuotedCommaAnd(resultArr[0].result) + '\n')); //  + JSON.stringify(result[0]));
                }
            } //endif multiple categories
    }]);
    dialog.matches('ListAll', [function (session, args, next) {
        var isCombinedIndex = {};
        var oNewEntity;
        // expecting entity A1
        var message = session.message.text;
        debuglog("Intent : ListAll");
        debuglog('raw: ' + JSON.stringify(args.entities), undefined, 2);
        var categoryEntity = builder.EntityRecognizer.findEntity(args.entities, 'categories');
        var category = categoryEntity.entity;
        var a1 = builder.EntityRecognizer.findEntity(args.entities, 'insth');
        if (category === "categories") {
            // do we have a filter ?
            var domain = undefined;
            if (a1 && a1.entity) {
                domain = ListAll.inferDomain(theModel, a1.entity);
            }
            if (!domain) {
                var res = restrictLoggedOn(session, theModel.category).join(";\n");
                if (a1 && a1.entity) {
                    dialoglog("ListAll", session, send("I did not infer a domain restriction from \"" + a1.entity + "\", all my categories are ...\n" + res));
                } else {
                    dialoglog("ListAll", session, send("my categories are ...\n" + res));
                }
                return;
            } else {
                var aRes = Model.getCategoriesForDomain(theModel, domain);
                var res = restrictLoggedOn(session, aRes).join(";\n");
                dialoglog("ListAll", session, send("my categories in domain \"" + domain + "\" are ...\n" + res));
                return;
            }
        }
        if (category === "domains") {
            var res = restrictLoggedOn(session, theModel.domains).join(";\n");
            dialoglog("ListAll", session, send("my domains are ...\n" + res));
            return;
        }
        if (category === "tools") {
            var res = restrictLoggedOn(session, theModel.tools).map(function (oTool) {
                return oTool.name;
            }).join(";\n");
            dialoglog("ListAll", session, send("my tools are ...\n" + res));
            return;
        }
        var cats = [];
        try {
            cats = WhatIs.analyzeCategoryMult2(category, theModel.rules, message);
            debuglog("here cats" + cats.join(","));
        } catch (e) {
            if (e) {
                debuglog("here exception" + e);
                dialoglog("WhatIs", session, send('I don\'t know anything about "' + category + '"(' + e.toString() + ')'));
                // next();
                return;
            }
        }
        if (!cats || cats.length === 0) {
            dialoglog("ListAll", session, send('I don\'t know anything about "' + category + '"'));
            // next();
            return;
        }
        var cat = "";
        if (cats.length === 1) {
            cat = cats[0];
        }
        if (cats.length === 1) {
            debuglog('category identified:' + cat);
            if (a1 && a1.entity) {
                debuglog('got filter:' + a1.entity);
                var categorySet = Model.getAllRecordCategoriesForTargetCategory(theModel, cat, true);
                var result1 = ListAll.listAllWithContext(cat, a1.entity, theModel.rules, theModel.records, categorySet);
                // TODO classifying the string twice is a terrible waste
                if (!result1.length) {
                    debuglog('going for having');
                    var categorySetFull = Model.getAllRecordCategoriesForTargetCategory(theModel, cat, false);
                    result1 = ListAll.listAllHavingContext(cat, a1.entity, theModel.rules, theModel.records, categorySetFull);
                }
                debuglog('listall result:' + JSON.stringify(result1));
                var joinresults = restrictLoggedOn(session, ListAll.joinResults(result1));
                logQueryWhatIs(session, 'ListAll', result1);
                if (joinresults.length) {
                    dialoglog("ListAll", session, send("the " + category + " for " + a1.entity + " are ...\n" + joinresults.join(";\n")));
                } else {
                    dialoglog("ListAll", session, send("i did not find any " + category + " for " + a1.entity + ".\n" + joinresults.join(";\n")));
                }
                return;
            } else {
                // no entity, e.g. list all countries
                //
                var categorySetFull = Model.getAllRecordCategoriesForTargetCategory(theModel, cat, false);
                var result = ListAll.listAllHavingContext(cat, cat, theModel.rules, theModel.records, categorySetFull);
                logQueryWhatIs(session, 'ListAll', result);
                if (result.length) {
                    debuglog('listall result:' + JSON.stringify(result));
                    var joinresults = [];
                    debuglog("here is cat>" + cat);
                    if (cat !== "example question") {
                        joinresults = restrictLoggedOn(session, ListAll.joinResults(result));
                    } else {
                        joinresults = ListAll.joinResults(result);
                    }
                    var response = "the " + category + " are ...\n" + joinresults.join(";\n");
                    dialoglog("ListAll", session, send(response));
                    return;
                } else {
                    var response = "Found no data having \"" + cat + "\"";
                    dialoglog("ListAll", session, send(response));
                    return;
                }
            }
        } else {
            // multiple categories
            debuglog('categories identified:' + cats.join(","));
            if (a1 && a1.entity) {
                debuglog('got filter:' + a1.entity);
                try {
                    var categorySet = Model.getAllRecordCategoriesForTargetCategories(theModel, cats, true);
                } catch (e) {
                    debuglog("here exception" + e);
                    dialoglog("WhatIs", session, send('I cannot combine "' + category + '(' + e.toString() + ')'));
                    return;
                }
                var result1T = ListAll.listAllTupelWithContext(cats, a1.entity, theModel.rules, theModel.records, categorySet);
                // TODO classifying the string twice is a terrible waste
                if (!result1T.length) {
                    debuglog('going for having');
                    var categorySetFull = Model.getAllRecordCategoriesForTargetCategories(theModel, cats, false);
                    result1T = ListAll.listAllTupelHavingContext(cats, a1.entity, theModel.rules, theModel.records, categorySetFull);
                }
                debuglog('listall result:' + JSON.stringify(result1T));
                var joinresults = restrictLoggedOn(session, ListAll.joinResultsTupel(result1T));
                logQueryWhatIsTupel(session, 'ListAll', result1T);
                if (joinresults.length) {
                    dialoglog("ListAll", session, send("the " + category + " for " + a1.entity + " are ...\n" + joinresults.join(";\n")));
                } else {
                    dialoglog("ListAll", session, send("i did not find any " + category + " for " + a1.entity + ".\n" + joinresults.join(";\n")));
                }
                return;
            } else {
                // no entity, e.g. list all countries
                //
                var categorySetFull = {};
                try {
                    categorySetFull = Model.getAllRecordCategoriesForTargetCategories(theModel, cats, false);
                } catch (e) {
                    debuglog("here exception" + e);
                    dialoglog("WhatIs", session, send('I cannot combine "' + category + '(' + e.toString() + ')'));
                    // next();
                    return;
                }
                var resultT = ListAll.listAllTupelHavingContext(cats, "\"" + cats.join("\" \"") + "\"", theModel.rules, theModel.records, categorySetFull);
                logQueryWhatIsTupel(session, 'ListAll', resultT);
                if (resultT.length) {
                    debuglog('listall result:' + JSON.stringify(resultT));
                    var joinresults = [];
                    debuglog("here is cat>" + cats.join(", "));
                    if (cat !== "example question") {
                        joinresults = restrictLoggedOn(session, ListAll.joinResultsTupel(resultT));
                    } else {
                        joinresults = ListAll.joinResultsTupel(resultT);
                    }
                    var response = "the " + category + " are ...\n" + joinresults.join(";\n");
                    dialoglog("ListAll", session, send(response));
                    return;
                } else {
                    var response = "Found no data having \"" + cat + "\"";
                    dialoglog("ListAll", session, send(response));
                    return;
                }
            }
        }
    }]);
    dialog.matches('Describe', [function (session, args, next) {
        var isCombinedIndex = {};
        var oNewEntity;
        // expecting entity A1
        var message = session.message.text;
        debuglog("Intent : Describe");
        debuglog('raw: ' + JSON.stringify(args.entities), undefined, 2);
        var factEntity = builder.EntityRecognizer.findEntity(args.entities, 'A1');
        var factOrCat = factEntity && factEntity.entity;
        var domainEntity = builder.EntityRecognizer.findEntity(args.entities, 'D');
        var domainS = domainEntity && domainEntity.entity;
        var filterDomain = undefined;
        if (domainS) {
            filterDomain = ListAll.inferDomain(theModel, domainS);
            debuglog("got domain" + filterDomain);
            if (!filterDomain) {
                dialoglog("Describe", session, send("I did not infer a domain restriction from \"" + domainS + "\". Specify an existing domain. (List all domains) to get exact names.\n"));
                return;
            }
        }
        debuglog("factOrCat is" + factOrCat);
        if (exports.metawordsDescriptions[factOrCat.toLowerCase()]) {
            // do we have a filter ?
            var prefix = "";
            if (filterDomain) {
                prefix = '"in domain "' + filterDomain + '" make no sense when matching a metaword.\n';
            }
            debuglog("showing meta result");
            dialoglog("Describe", session, send(prefix + '"' + factOrCat + '" is ' + exports.metawordsDescriptions[factOrCat.toLowerCase()] + ""));
            return;
        }
        var categories = [];
        if (WhatIs.splitAtCommaAnd(factOrCat).length > 1) {
            dialoglog("Describe", session, send("Whoa, i can only explain one thing at a time, not \"" + factOrCat + "\". Please ask one at a time."));
            return;
        }
        var category = WhatIs.analyzeCategory(factOrCat, theModel.rules, message);
        var catResults = [];
        if (category) {
            //TODO
            catResults = Describe.describeCategory(category, filterDomain, theModel, message);
        }
        var resFact = Describe.describeFactInDomain(factOrCat, filterDomain, theModel);
        if (catResults) {
            var prefixed = catResults.map(function (res) {
                return Describe.sloppyOrExact(category, factOrCat, theModel) + "  " + res;
            });
        }
        if (catResults.length) {
            resFact = prefixed.join("\n");
            +"\n" + resFact;
        }
        dialoglog("Describe", session, send(resFact));
        /*
            var aRes = Model.getCategoriesForDomain(theModel, domain);
             var res = restrictLoggedOn(session, aRes).join(";\n");
            dialoglog("ListAll",session,send("my categories in domain \"" + domain + "\" are ...\n" + res));
            return;
          }
        }
        if (category === "domains") {
          var res = restrictLoggedOn(session, theModel.domains).join(";\n");
          dialoglog("ListAll",session, send("my domains are ...\n" + res));
          return;
        }
        if (category === "tools") {
          var res = restrictLoggedOn(session, theModel.tools).map(function (oTool) {
            return oTool.name;
          }).join(";\n");
          dialoglog("ListAll", session,send("my tools are ...\n" + res));
          return;
        }
        */
        /*
        var cats = [];
          try {
          cats = WhatIs.analyzeCategoryMult2(category, theModel.rules, message);
          debuglog("here cats" + cats.join(","));
        } catch (e) {
            if(e) {
              debuglog("here exception" + e);
              dialoglog("WhatIs",session,send('I don\'t know anything about "' + category + '"(' + e.toString() + ')'));
              // next();
              return;
            }
        }
        if (!cats || (cats.length === 0)) {
          dialoglog("ListAll",session,send('I don\'t know anything about "' + category + '"'));
          // next();
          return;
        }
        var cat = "";
        if( cats.length === 1) {
          cat = cats[0];
        }
        if( cats.length === 1) {
          debuglog('category identified:' + cat);
          if (a1 && a1.entity) {
            debuglog('got filter:' + a1.entity);
            var categorySet = Model.getAllRecordCategoriesForTargetCategory(theModel, cat, true);
            var result1 = ListAll.listAllWithContext(cat, a1.entity,
              theModel.rules, theModel.records, categorySet);
            // TODO classifying the string twice is a terrible waste
            if (!result1.length) {
              debuglog('going for having');
              var categorySetFull = Model.getAllRecordCategoriesForTargetCategory(theModel, cat, false);
              result1 = ListAll.listAllHavingContext(cat, a1.entity, theModel.rules,
                theModel.records, categorySetFull);
            }
            debuglog('listall result:' + JSON.stringify(result1));
            var joinresults = restrictLoggedOn(session, ListAll.joinResults(result1));
            logQueryWhatIs(session, 'ListAll', result1);
            if(joinresults.length ){
              dialoglog("ListAll",session,send("the " + category + " for " + a1.entity + " are ...\n" + joinresults.join(";\n")));
            } else {
              dialoglog("ListAll",session,send("i did not find any " + category + " for " + a1.entity + ".\n" + joinresults.join(";\n")));
            }
            return;
          } else {
            // no entity, e.g. list all countries
            //
            var categorySetFull = Model.getAllRecordCategoriesForTargetCategory(theModel, cat, false);
            var result = ListAll.listAllHavingContext(cat, cat, theModel.rules, theModel.records, categorySetFull);
            logQueryWhatIs(session, 'ListAll', result);
            if (result.length) {
              debuglog('listall result:' + JSON.stringify(result));
              var joinresults = [];
              debuglog("here is cat>" + cat);
              if(cat !== "example question") {
                joinresults = restrictLoggedOn(session, ListAll.joinResults(result));
              } else {
                joinresults = ListAll.joinResults(result);
              }
              var response = "the " + category + " are ...\n" + joinresults.join(";\n");
              dialoglog("ListAll",session,send(response));
              return;
            } else {
              var response = "Found no data having \"" + cat + "\""
              dialoglog("ListAll",session,send(response));
              return;
            }
          }
        } else {
          // multiple categories
          debuglog('categories identified:' + cats.join(","));
          if (a1 && a1.entity) {
            debuglog('got filter:' + a1.entity);
            try {
            var categorySet = Model.getAllRecordCategoriesForTargetCategories(theModel, cats, true);
            } catch(e) {
                debuglog("here exception" + e);
                dialoglog("WhatIs",session,send('I cannot combine "' + category + '(' + e.toString() + ')'));
                return;
            }
            var result1T = ListAll.listAllTupelWithContext(cats, a1.entity,
              theModel.rules, theModel.records, categorySet);
            // TODO classifying the string twice is a terrible waste
            if (!result1T.length) {
              debuglog('going for having');
              var categorySetFull = Model.getAllRecordCategoriesForTargetCategories(theModel, cats, false);
              result1T = ListAll.listAllTupelHavingContext(cats, a1.entity, theModel.rules,
                theModel.records, categorySetFull);
            }
            debuglog('listall result:' + JSON.stringify(result1T));
            var joinresults = restrictLoggedOn(session, ListAll.joinResultsTupel(result1T));
            logQueryWhatIsTupel(session, 'ListAll', result1T);
            if(joinresults.length ){
              dialoglog("ListAll",session,send("the " + category + " for " + a1.entity + " are ...\n" + joinresults.join(";\n")));
            } else {
              dialoglog("ListAll",session,send("i did not find any " + category + " for " + a1.entity + ".\n" + joinresults.join(";\n")));
            }
            return;
          } else {
            // no entity, e.g. list all countries
            //
            var categorySetFull = {} as { [key : string] : boolean};
            try {
              categorySetFull = Model.getAllRecordCategoriesForTargetCategories(theModel, cats, false);
            } catch(e) {
                debuglog("here exception" + e);
                dialoglog("WhatIs",session,send('I cannot combine "' + category + '(' + e.toString() + ')'));
            // next();
                return;
            }
            var resultT = ListAll.listAllTupelHavingContext(cats, "\"" + cats.join("\" \"") + "\"", theModel.rules, theModel.records, categorySetFull);
            logQueryWhatIsTupel(session, 'ListAll', resultT);
            if (resultT.length) {
              debuglog('listall result:' + JSON.stringify(resultT));
              var joinresults = [];
              debuglog("here is cat>" + cats.join(", "));
              if(cat !== "example question") {
                joinresults = restrictLoggedOn(session, ListAll.joinResultsTupel(resultT));
              } else {
                joinresults = ListAll.joinResultsTupel(resultT);
              }
              var response = "the " + category + " are ...\n" + joinresults.join(";\n");
              dialoglog("ListAll",session,send(response));
              return;
            } else {
              var response = "Found no data having \"" + cat + "\""
              dialoglog("ListAll",session,send(response));
              return;
            }
          }
        }
          */
    }]);
    dialog.matches('ListAllBinOp', [function (session, args, next) {
        var isCombinedIndex = {};
        var oNewEntity;
        // expecting entity A1
        var message = session.message.text;
        debuglog("Intent : ListAllBinOp");
        debuglog('raw: ' + JSON.stringify(args.entities), undefined, 2);
        var categoryEntity = builder.EntityRecognizer.findEntity(args.entities, 'category');
        var categoryWord = categoryEntity.entity;
        var opEntity = builder.EntityRecognizer.findEntity(args.entities, 'operator');
        var operatorWord = opEntity && opEntity.entity;
        // categorize as operator ?
        var filterDomainEntity = builder.EntityRecognizer.findEntity(args.entities, 'domain');
        var filterDomainS = filterDomainEntity && filterDomainEntity.entity;
        var operator = WhatIs.analyzeOperator(operatorWord, theModel.rules, message);
        var category = WhatIs.analyzeCategory(categoryWord, theModel.rules, message);
        var operatorArgs = Model.getOperator(theModel, operator);
        var a2 = builder.EntityRecognizer.findEntity(args.entities, 'A2');
        if (!operator) {
            var s = "Unknown operator " + operatorWord + ", this is a model bug, check operators.json and intents.json";
            dialoglog("ListAllBinOp", session, send("ouch, this was in internal error. Recovering from a weird operator \"" + operatorWord + "\"\n"));
            throw new Error(s);
        }
        var filterDomain = undefined;
        if (filterDomainS) {
            debuglog("found a domainString" + filterDomainS);
            filterDomain = ListAll.inferDomain(theModel, filterDomainS);
            debuglog("got domain" + filterDomain);
            if (!filterDomain) {
                dialoglog("Describe", session, send("I did not infer a domain restriction from \"" + filterDomainS + "\". Specify an existing domain. (List all domains) to get exact names.\n"));
                return;
            }
        }
        var fragment = a2 && a2.entity;
        fragment = BreakDown.trimQuoted(BreakDown.trimQuotedSpaced(fragment));
        debuglog("fragment after trimming \"" + fragment + "\"");
        if (categoryWord === "categories") {
            // do we have a filter?
            var aFilteredCategories = ListAll.filterStringListByOp(operatorArgs, fragment, theModel.category);
            if (filterDomain) {
                var catsForDomain = Model.getCategoriesForDomain(theModel, filterDomain);
                aFilteredCategories = _.intersection(aFilteredCategories, catsForDomain);
            }
            res = restrictLoggedOn(session, aFilteredCategories).join(";\n");
            if (res.length) {
                if (filterDomain) {
                    dialoglog("ListAllBinOp", session, send("my categories " + operator + " \"" + fragment + "\" in domain \"" + filterDomain + "\" are ...\n" + res));
                } else {
                    dialoglog("ListAllBinOp", session, send("my categories " + operator + " \"" + fragment + "\" are ...\n" + res));
                }
            } else {
                dialoglog("ListAllBinOp", session, send('I have no categories ' + operator + ' "' + fragment + '"'));
            }
            return;
        } else if (categoryWord === "domains") {
            var aRes = ListAll.filterStringListByOp(operatorArgs, fragment, theModel.domains);
            res = restrictLoggedOn(session, aRes).join(";\n");
            if (res.length) {
                dialoglog("ListAllBinOp", session, send("my domains " + operator + ' "' + fragment + '" are ...\n' + res));
            } else {
                dialoglog("ListAllBinOp", session, send('I have no domains ' + operator + ' "' + fragment + '"'));
            }
            return;
        } else if (categoryWord === "tools") {
            var aRes = ListAll.filterStringListByOp(operatorArgs, fragment, theModel.tools.map(function (oTool) {
                return oTool.name;
            }));
            var res = restrictLoggedOn(session, aRes).join(";\n");
            if (res.length) {
                dialoglog("ListAllBinOp", session, send("my tools " + operator + ' "' + fragment + '" are ...\n' + res));
            } else {
                dialoglog("ListAllBinOp", session, send("I have no tools " + operator + ' "' + fragment + '"'));
            }
            return;
        } else {
            var cat = WhatIs.analyzeCategory(categoryWord, theModel.rules, message);
            if (!cat) {
                dialoglog("ListAllBinOp", session, send('I don\'t know anything about "' + categoryWord + '"'));
                // next();
                return;
            }
            debuglog('category identified:' + cat);
            var aRes = ListAll.getCategoryOpFilterAsDistinctStrings(operatorArgs, fragment, category, theModel.records, filterDomain);
            var res = restrictLoggedOn(session, aRes).join(";\n");
            var infixExplain = '';
            if (!ListAll.likelyPluralDiff(category, categoryWord)) {
                infixExplain = '("' + category + '")';
            }
            if (res.length) {
                if (filterDomain) {
                    dialoglog("ListAllBinOp", session, send("my " + categoryWord + infixExplain + " " + operator + " \"" + fragment + "\" in domain \"" + filterDomain + "\" are ...\n" + res));
                } else {
                    dialoglog("ListAllBinOp", session, send("my " + categoryWord + infixExplain + " " + operator + " \"" + fragment + "\" are ...\n" + res));
                }
            } else {
                dialoglog("ListAllBinOp", session, send('I have no ' + categoryWord + infixExplain + ' ' + operator + ' "' + fragment + '"'));
            }
            return;
        }
    }]);
    dialog.matches('TrainMe', [function (session, args, next) {
        var isCombinedIndex = {};
        var oNewEntity;
        // expecting entity A1
        var message = session.message.text;
        debuglog("Intent : Train");
        debuglog('raw: ' + JSON.stringify(args.entities), undefined, 2);
        var categoryEntity = builder.EntityRecognizer.findEntity(args.entities, 'categories');
        if (message.toLowerCase().indexOf("kronos") >= 0 || message.toLowerCase().indexOf("klingon") >= 0) {
            dialoglog("TrainMe", session, send(getRandomResult(aTrainNoKlingon)));
            return;
        }
        var res = getRandomResult(aTrainReplies);
        dialoglog("TrainMe", session, send(res));
    }]);
    dialog.matches('TooLong', [function (session, args, next) {
        var isCombinedIndex = {};
        var oNewEntity;
        // expecting entity A1
        var message = session.message.text;
        debuglog("Intent : TooLong");
        debuglog('raw: ' + JSON.stringify(args.entities), undefined, 2);
        var categoryEntity = builder.EntityRecognizer.findEntity(args.entities, 'categories');
        dialoglog("TooLong", session, send(getRandomResult(exports.aResponsesOnTooLong)));
    }]);
    dialog.matches('Wrong', [function (session, args, next) {
        dialogLogger({
            session: session,
            intent: "Wrong",
            response: '<begin updown>'
        });
        session.beginDialog('/updown', session.userData.count);
    }, function (session, results, next) {
        var alarm = session.dialogData.alarm;
        next();
    }, function (session, results) {
        session.send(getRandomResult(aBackFromTraining)); //  + JSON.stringify(results));
        //session.send('end of wrong');
    }]);
    dialog.matches('Exit', [function (session, args, next) {
        debuglog('exit :');
        debuglog('exit' + JSON.stringify(args.entities));
        dialogLogger({
            session: session,
            intent: "Exit",
            response: 'you are in a logic loop'
        });
        session.send("you are in a logic loop ");
    }]);
    dialog.matches('Help', [function (session, args, next) {
        debuglog('help :');
        debuglog('help');
        session.send("I know about .... <categories>>");
    }]);
    // Add intent handlers
    dialog.matches('train', [function (session, args, next) {
        debuglog('train');
        // Resolve and store any entities passed from LUIS.
        var title = builder.EntityRecognizer.findEntity(args.entities, 'builtin.alarm.title');
        var time = builder.EntityRecognizer.resolveTime(args.entities);
        var alarm = session.dialogData.alarm = {
            title: title ? title.entity : null,
            timestamp: time ? time.getTime() : null
        };
        // Prompt for title
        if (!alarm.title) {
            dialogLogger({
                session: session,
                intent: "train",
                response: 'What fact would you like to train?'
            });
            builder.Prompts.text(session, 'What fact would you like to train?');
        } else {
            next();
        }
    }, function (session, results, next) {
        var alarm = session.dialogData.alarm;
        if (results.response) {
            alarm.title = results.response;
        }
        // Prompt for time (title will be blank if the user said cancel)
        if (alarm.title && !alarm.timestamp) {
            builder.Prompts.time(session, 'What time would you like to set the alarm for?');
        } else {
            next();
        }
    }, function (session, results) {
        var alarm = session.dialogData.alarm;
        if (results.response) {
            var time = builder.EntityRecognizer.resolveTime([results.response]);
            alarm.timestamp = time ? time.getTime() : null;
        }
        // Set the alarm (if title or timestamp is blank the user said cancel)
        if (alarm.title && alarm.timestamp) {
            // Save address of who to notify and write to scheduler.
            alarm.address = session.message.address;
            //alarms[alarm.title] = alarm;
            // Send confirmation to user
            var date = new Date(alarm.timestamp);
            var isAM = date.getHours() < 12;
            session.send('Creating alarm named "%s" for %d/%d/%d %d:%02d%s', alarm.title, date.getMonth() + 1, date.getDate(), date.getFullYear(), isAM ? date.getHours() : date.getHours() - 12, date.getMinutes(), isAM ? 'am' : 'pm');
        } else {
            session.send('Ok... no problem.');
        }
    }]);
    dialog.onDefault(function (session) {
        logQuery(session, "onDefault");
        var eliza = getElizaBot(getConversationId(session));
        var reply = eliza.transform(session.message.text);
        dialoglog("eliza", session, send(reply));
        //new Eilzabot
        //session.send("I do not understand this at all");
        //builder.DialogAction.send('I\'m sorry I didn\'t understand. I can only show start and ring');
    });
    /*
    // Very simple alarm scheduler
    var alarms = {};
    setInterval(function () {
      var now = new Date().getTime();
      for (var key in alarms) {
        var alarm = alarms[key];
        if (now >= alarm.timestamp) {
          var msg = new builder.Message()
            .address(alarm.address)
            .text('Here\'s your \'%s\' alarm.', alarm.title);
          bot.send(msg);
          delete alarms[key];
        }
      }
    }, 15000);
    */
}
if (module) {
    module.exports = {
        SimpleUpDownRecognizer: SimpleUpDownRecognizer,
        aResponsesOnTooLong: exports.aResponsesOnTooLong,
        metawordsDescriptions: exports.metawordsDescriptions,
        makeBot: makeBot
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9ib3Qvc21hcnRkaWFsb2cudHMiLCJib3Qvc21hcnRkaWFsb2cuanMiXSwibmFtZXMiOlsiYnVpbGRlciIsInJlcXVpcmUiLCJkZWJ1ZyIsIk1hdGNoIiwiQW5hbHl6ZSIsIkJyZWFrRG93biIsIldoYXRJcyIsIkxpc3RBbGwiLCJEZXNjcmliZSIsIlV0aWxzIiwiXyIsIkRpYWxvZ0xvZ2dlciIsInByb2Nlc3MiLCJkYnVybCIsImVudiIsIkRBVEFCQVNFX1VSTCIsInBnbG9jYWx1cmwiLCJwZyIsIm8iLCJBQk9UX0RCTk9TU0wiLCJkZWZhdWx0cyIsInNzbCIsImRpYWxvZ0xvZ2dlciIsImxvZ2dlciIsInNlbmQiLCJkaWFsb2dsb2ciLCJpbnRlbnQiLCJzZXNzaW9uIiwicmVzcG9uc2UiLCJzUmVzcG9uc2UiLCJzQWN0aW9uIiwiYU1lc3NhZ2UiLCJpTWVzc2FnZSIsInRvTWVzc2FnZSIsInRleHQiLCJlbnRpdGllcyIsIkpTT04iLCJzdHJpbmdpZnkiLCJhY3Rpb24iLCJlbGl6YWJvdCIsImRlYnVnbG9nIiwiUGxhaW5SZWNvZ25pemVyIiwiZGlzcGF0Y2hlciIsImdldENvbnZlcnNhdGlvbklkIiwibWVzc2FnZSIsImFkZHJlc3MiLCJjb252ZXJzYXRpb24iLCJpZCIsImVsaXphYm90cyIsImdldEVsaXphQm90IiwiYWNjZXNzIiwiRGF0ZSIsIm5ld0Zsb3ciLCJNb2RlbCIsIkV4ZWNTZXJ2ZXIiLCJ0aGVEZWZhdWx0TW9kZWwiLCJsb2FkTW9kZWxzIiwibW9kZWxzIiwibG9hZE1vZGVsIiwibW9kZWxQYXRoIiwiaXNBbm9ueW1vdXMiLCJ1c2VyaWQiLCJpbmRleE9mIiwicmVzdHJpY3RMb2dnZWRPbiIsImFyciIsInVzZXIiLCJBQk9UX0VNQUlMX1VTRVIiLCJsZW5ndGgiLCJsZW4iLCJyZXMiLCJzbGljZSIsIk1hdGgiLCJtaW4iLCJtYXgiLCJmbG9vciIsImRlbHRhIiwicHVzaCIsImFUcmFpblJlcGxpZXMiLCJhVHJhaW5EaWFsb2ciLCJhVHJhaW5FeGl0SGludCIsImFFbnRlclRyYWluIiwiYUJhY2tGcm9tVHJhaW5pbmciLCJhVHJhaW5Ob0tsaW5nb24iLCJleHBvcnRzIiwiYVJlc3BvbnNlc09uVG9vTG9uZyIsIm1ldGF3b3Jkc0Rlc2NyaXB0aW9ucyIsImdldFJhbmRvbVJlc3VsdCIsInJhbmRvbSIsIlNpbXBsZVVwRG93blJlY29nbml6ZXIiLCJwcm90b3R5cGUiLCJyZWNvZ25pemUiLCJjb250ZXh0IiwiY2FsbGJhY2siLCJ1Iiwic2NvcmUiLCJlMSIsInN0YXJ0SW5kZXgiLCJlbmRJbmRleCIsInVuZGVmaW5lZCIsIkFueU9iamVjdCIsIk9iamVjdCIsImJvdCIsImZzIiwib0pTT04iLCJwYXJzZSIsInJlYWRGaWxlU3luYyIsIm9SdWxlcyIsInBhcnNlUnVsZXMiLCJsb2dRdWVyeSIsInJlc3VsdCIsImFwcGVuZEZpbGUiLCJ0aW1lc3RhbXAiLCJUb29sTWF0Y2giLCJkdW1wTmljZSIsImNvbnZlcnNhdGlvbklkIiwiZXJyIiwibG9nUXVlcnlXaGF0SXMiLCJsb2dRdWVyeVdoYXRJc1R1cGVsIiwiZHVtcE5pY2VUdXBlbCIsImd3b3JkcyIsIm1ha2VCb3QiLCJjb25uZWN0b3IiLCJ0aGVNb2RlbCIsIlVuaXZlcnNhbEJvdCIsInJlY29nbml6ZXIiLCJSZWdFeHBSZWNvZ25pemVyIiwiZGlhbG9nIiwiSW50ZW50RGlhbG9nIiwicmVjb2duaXplcnMiLCJkaWFsb2dVcERvd24iLCJvbkJlZ2luIiwibWF0Y2hlcyIsImFyZ3MiLCJuZXh0IiwiZGlhbG9nRGF0YSIsImFiYyIsIlByb21wdHMiLCJyZXN1bHRzIiwicmVwb25zZSIsImVuZERpYWxvZ1dpdGhSZXN1bHQiLCJvbkRlZmF1bHQiLCJkaWFsZ29EYXRhIiwiRGlhbG9nRGF0YSIsImlzQ29tYmluZWRJbmRleCIsIm9OZXdFbnRpdHkiLCJhMSIsIkVudGl0eVJlY29nbml6ZXIiLCJmaW5kRW50aXR5IiwiYW5hbHl6ZUFsbCIsImVudGl0eSIsInJ1bGVzIiwidG9vbHMiLCJkdW1wV2VpZ2h0c1RvcCIsInRvcCIsImlzQ29tcGxldGUiLCJnZXRQcm9tcHQiLCJwcm9tcHQiLCJiZXN0Iiwic2V0UHJvbXB0IiwiZXhlYyIsImV4ZWNUb29sIiwicmVjb3JkcyIsInJlcGx5IiwiTWVzc2FnZSIsImFkZEVudGl0eSIsImNhdGVnb3J5RW50aXR5IiwiY2F0ZWdvcnkiLCJjYXRzIiwiYW5hbHl6ZUNhdGVnb3J5TXVsdDIiLCJqb2luIiwiZSIsInRvU3RyaW5nIiwiY2F0IiwicmVzb2x2ZUNhdGVnb3J5IiwiaW5kaXMiLCJpc0luZGlzY3JpbWluYXRlUmVzdWx0IiwicmVzdWx0QXJyIiwicmVzb2x2ZUNhdGVnb3JpZXMiLCJpc0luZGlzY3JpbWluYXRlUmVzdWx0VHVwZWwiLCJsaXN0VG9RdW90ZWRDb21tYUFuZCIsImRvbWFpbiIsImluZmVyRG9tYWluIiwiYVJlcyIsImdldENhdGVnb3JpZXNGb3JEb21haW4iLCJkb21haW5zIiwibWFwIiwib1Rvb2wiLCJuYW1lIiwiY2F0ZWdvcnlTZXQiLCJnZXRBbGxSZWNvcmRDYXRlZ29yaWVzRm9yVGFyZ2V0Q2F0ZWdvcnkiLCJyZXN1bHQxIiwibGlzdEFsbFdpdGhDb250ZXh0IiwiY2F0ZWdvcnlTZXRGdWxsIiwibGlzdEFsbEhhdmluZ0NvbnRleHQiLCJqb2lucmVzdWx0cyIsImpvaW5SZXN1bHRzIiwiZ2V0QWxsUmVjb3JkQ2F0ZWdvcmllc0ZvclRhcmdldENhdGVnb3JpZXMiLCJyZXN1bHQxVCIsImxpc3RBbGxUdXBlbFdpdGhDb250ZXh0IiwibGlzdEFsbFR1cGVsSGF2aW5nQ29udGV4dCIsImpvaW5SZXN1bHRzVHVwZWwiLCJyZXN1bHRUIiwiZmFjdEVudGl0eSIsImZhY3RPckNhdCIsImRvbWFpbkVudGl0eSIsImRvbWFpblMiLCJmaWx0ZXJEb21haW4iLCJ0b0xvd2VyQ2FzZSIsInByZWZpeCIsImNhdGVnb3JpZXMiLCJzcGxpdEF0Q29tbWFBbmQiLCJhbmFseXplQ2F0ZWdvcnkiLCJjYXRSZXN1bHRzIiwiZGVzY3JpYmVDYXRlZ29yeSIsInJlc0ZhY3QiLCJkZXNjcmliZUZhY3RJbkRvbWFpbiIsInByZWZpeGVkIiwic2xvcHB5T3JFeGFjdCIsImNhdGVnb3J5V29yZCIsIm9wRW50aXR5Iiwib3BlcmF0b3JXb3JkIiwiZmlsdGVyRG9tYWluRW50aXR5IiwiZmlsdGVyRG9tYWluUyIsIm9wZXJhdG9yIiwiYW5hbHl6ZU9wZXJhdG9yIiwib3BlcmF0b3JBcmdzIiwiZ2V0T3BlcmF0b3IiLCJhMiIsInMiLCJFcnJvciIsImZyYWdtZW50IiwidHJpbVF1b3RlZCIsInRyaW1RdW90ZWRTcGFjZWQiLCJhRmlsdGVyZWRDYXRlZ29yaWVzIiwiZmlsdGVyU3RyaW5nTGlzdEJ5T3AiLCJjYXRzRm9yRG9tYWluIiwiaW50ZXJzZWN0aW9uIiwiZ2V0Q2F0ZWdvcnlPcEZpbHRlckFzRGlzdGluY3RTdHJpbmdzIiwiaW5maXhFeHBsYWluIiwibGlrZWx5UGx1cmFsRGlmZiIsImJlZ2luRGlhbG9nIiwidXNlckRhdGEiLCJjb3VudCIsImFsYXJtIiwidGl0bGUiLCJ0aW1lIiwicmVzb2x2ZVRpbWUiLCJnZXRUaW1lIiwiZGF0ZSIsImlzQU0iLCJnZXRIb3VycyIsImdldE1vbnRoIiwiZ2V0RGF0ZSIsImdldEZ1bGxZZWFyIiwiZ2V0TWludXRlcyIsImVsaXphIiwidHJhbnNmb3JtIiwibW9kdWxlIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7OztBQU9BOzs7OztBQUtBO0FBQ0E7QUFDQTtBQ0NBOztBRENBLElBQVlBLFVBQU9DLFFBQU0sWUFBTixDQUFuQjtBQUNBLElBQVlDLFFBQUtELFFBQU0sT0FBTixDQUFqQjtBQUdBLElBQVlFLFFBQUtGLFFBQU0sZ0JBQU4sQ0FBakI7QUFFQSxJQUFZRyxVQUFPSCxRQUFNLGtCQUFOLENBQW5CO0FBQ0EsSUFBWUksWUFBU0osUUFBTSxvQkFBTixDQUFyQjtBQUVBLElBQVlLLFNBQU1MLFFBQU0saUJBQU4sQ0FBbEI7QUFDQSxJQUFZTSxVQUFPTixRQUFNLGtCQUFOLENBQW5CO0FBQ0EsSUFBWU8sV0FBUVAsUUFB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QUtLLFdBQUwsRUFGdkMsRUFHRUosT0FBT0QsS0FBS0UsUUFBTCxFQUFQLEdBQXlCRixLQUFLRSxRQUFMLEtBQWtCLEVBSDdDLEVBR2lERixLQUFLTSxVQUFMLEVBSGpELEVBR29FTCxPQUFPLElBQVAsR0FBYyxJQUhsRjtBQUlELFNBWkQsTUFZTztBQUNMOU4sb0JBQVFILElBQVIsQ0FBYSxtQkFBYjtBQUNEO0FBQ0YsS0EzRHFCLENBQXhCO0FBOERBc0csV0FBT2MsU0FBUCxDQUFpQixVQUFVakgsT0FBVixFQUFpQjtBQUNoQ2lGLGlCQUFTakYsT0FBVCxFQUFrQixXQUFsQjtBQUNBLFlBQUlvTyxRQUFROU0sWUFBWU4sa0JBQWtCaEIsT0FBbEIsQ0FBWixDQUFaO0FBQ0EsWUFBSXVJLFFBQVE2RixNQUFNQyxTQUFOLENBQWdCck8sUUFBUWlCLE9BQVIsQ0FBZ0JWLElBQWhDLENBQVo7QUFDQVQsa0JBQVUsT0FBVixFQUFtQkUsT0FBbkIsRUFBNEJILEtBQUswSSxLQUFMLENBQTVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0QsS0FSRDtBQVVBOzs7Ozs7Ozs7Ozs7Ozs7OztBQWlCRDtBQUVELElBQUkrRixNQUFKLEVBQVk7QUFDVkEsV0FBTzlLLE9BQVAsR0FBaUI7QUFDZkssZ0NBQXdCQSxzQkFEVDtBQUVmSiw2QkFBcUJELFFBQUFDLG1CQUZOO0FBR2ZDLCtCQUF3QkYsUUFBQUUscUJBSFQ7QUFJZm1DLGlCQUFTQTtBQUpNLEtBQWpCO0FBTUQiLCJmaWxlIjoiYm90L3NtYXJ0ZGlhbG9nLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUaGUgYm90IGltcGxlbWVudGF0aW9uXG4gKlxuICogSW5zdGFudGlhdGUgYXBzc2luZyBhIGNvbm5lY3RvciB2aWFcbiAqIG1ha2VCb3RcbiAqXG4gKi9cbi8qKlxuICogQGZpbGVcbiAqIEBtb2R1bGUgamZzZWIuZmRldnN0YXJ0LnNtYXJ0ZGlhbG9nXG4gKiBAY29weXJpZ2h0IChjKSAyMDE2IEdlcmQgRm9yc3RtYW5uXG4gKi9cbi8vZGVjbGFyZSBtb2R1bGUgJ2VsaXphYm90JyB7IH07XG4vL2RlY2xhcmUgbW9kdWxlICd3aW5zdG9uLXBnJyB7IH07XG4vL2RlbGNhcmUgbW9kdWxlICd3aW5zdG9uJyB7fTtcblxuaW1wb3J0ICogYXMgYnVpbGRlciBmcm9tICdib3RidWlsZGVyJztcbmltcG9ydCAqIGFzIGRlYnVnIGZyb20gJ2RlYnVnJztcblxuaW1wb3J0ICogYXMgRXhlYyBmcm9tICcuLi9leGVjL2V4ZWMnO1xuaW1wb3J0ICogYXMgTWF0Y2ggZnJvbSAnLi4vbWF0Y2gvbWF0Y2gnO1xuXG5pbXBvcnQgKiBhcyBBbmFseXplIGZyb20gJy4uL21hdGNoL2FuYWx5emUnO1xuaW1wb3J0ICogYXMgQnJlYWtEb3duIGZyb20gJy4uL21hdGNoL2JyZWFrZG93bic7XG5cbmltcG9ydCAqIGFzIFdoYXRJcyBmcm9tICcuLi9tYXRjaC93aGF0aXMnO1xuaW1wb3J0ICogYXMgTGlzdEFsbCBmcm9tICcuLi9tYXRjaC9saXN0YWxsJztcbmltcG9ydCAqIGFzIERlc2NyaWJlIGZyb20gJy4uL21hdGNoL2Rlc2NyaWJlJztcbmltcG9ydCAqIGFzIFV0aWxzIGZyb20gJy4uL3V0aWxzL3V0aWxzJztcblxuaW1wb3J0ICogYXMgXyBmcm9tICdsb2Rhc2gnO1xuXG5pbXBvcnQgKiBhcyBEaWFsb2dMb2dnZXIgZnJvbSAnLi4vdXRpbHMvZGlhbG9nbG9nZ2VyJztcblxuaW1wb3J0ICogYXMgcHJvY2VzcyBmcm9tICdwcm9jZXNzJztcblxudmFyIGRidXJsID0gcHJvY2Vzcy5lbnYuREFUQUJBU0VfVVJMIHx8IFwiXCI7XG5cbnZhciBwZ2xvY2FsdXJsID0gXCJwb3N0Z3JlczovL2pvZTphYmNkZWZAbG9jYWxob3N0OjU0MzIvYWJvdFwiO1xudmFyIGRidXJsID0gcHJvY2Vzcy5lbnYuREFUQUJBU0VfVVJMIHx8IHBnbG9jYWx1cmw7XG5pbXBvcnQgKiBhcyBwZyBmcm9tICdwZyc7XG52YXIgbyA9IHBnIGFzIGFueTtcbmlmKCEocHJvY2Vzcy5lbnYuQUJPVF9EQk5PU1NMKSkge1xuICBvLmRlZmF1bHRzLnNzbCA9IHRydWU7IC8vIE9ubHkgdXNlZCBpbnRlcm5hbGx5ICFcbn1cbnZhciBkaWFsb2dMb2dnZXIgPSBEaWFsb2dMb2dnZXIubG9nZ2VyKFwic21hcnRib3RcIiwgZGJ1cmwsIHBnKTtcblxudHlwZSBzdHJpbmdPck1lc3NhZ2UgPSBzdHJpbmcgfCBidWlsZGVyLk1lc3NhZ2U7XG5mdW5jdGlvbiBzZW5kPFQgZXh0ZW5kcyBzdHJpbmdPck1lc3NhZ2U+KG86IFQpOiBUIHsgcmV0dXJuIG87IH07XG5mdW5jdGlvbiBkaWFsb2dsb2coaW50ZW50OiBzdHJpbmcsIHNlc3Npb246IGJ1aWxkZXIuU2Vzc2lvbiwgcmVzcG9uc2U6IHN0cmluZ09yTWVzc2FnZSkge1xuICB2YXIgc1Jlc3BvbnNlOiBzdHJpbmc7XG4gIHZhciBzQWN0aW9uOiBzdHJpbmc7XG4gIGlmICh0eXBlb2YgcmVzcG9uc2UgPT09IFwic3RyaW5nXCIpIHtcbiAgICBzQWN0aW9uID0gXCJcIjtcbiAgICBzUmVzcG9uc2UgPSByZXNwb25zZTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgYU1lc3NhZ2U6IGJ1aWxkZXIuTWVzc2FnZSA9IHJlc3BvbnNlO1xuICAgIHZhciBpTWVzc2FnZTogYnVpbGRlci5JTWVzc2FnZSA9IGFNZXNzYWdlLnRvTWVzc2FnZSgpO1xuICAgIHNSZXNwb25zZSA9IGlNZXNzYWdlLnRleHQ7XG4gICAgc0FjdGlvbiA9IChpTWVzc2FnZS5lbnRpdGllcyAmJiBpTWVzc2FnZS5lbnRpdGllc1swXSkgPyAoSlNPTi5zdHJpbmdpZnkoaU1lc3NhZ2UuZW50aXRpZXMgJiYgaU1lc3NhZ2UuZW50aXRpZXNbMF0pKSA6IFwiXCI7XG4gIH1cbiAgZGlhbG9nTG9nZ2VyKHtcbiAgICBpbnRlbnQ6IGludGVudCxcbiAgICBzZXNzaW9uOiBzZXNzaW9uLFxuICAgIHJlc3BvbnNlOiBzUmVzcG9uc2UsXG4gICAgYWN0aW9uOiBzQWN0aW9uXG4gIH0pO1xuICBzZXNzaW9uLnNlbmQocmVzcG9uc2UpO1xufVxuXG4vL2NvbnN0IHBnTG9nZ2VyID0gbmV3IFBnTG9nZ2VyKHtcbi8vICBuYW1lOiAndGVzdC1sb2dnZXInLFxuLy8gIGxldmVsOiAnZGVidWcnLFxuLy8gIGNvbm5TdHJpbmc6ICdwb3N0Z3JlczovL3VidW50dUBsb2NhbGhvc3Q6NTQzMi9jaXJjbGVfdGVzdCcsXG4vLyAgdGFibGVOYW1lOiAnd2luc3Rvbl9sb2dzJyxcbi8vfSk7XG5cblxuXG4vL3dpbnN0b24uYWRkKHdpbnN0b24udHJhbnNwb3J0cy5GaWxlLCB7IGZpbGVuYW1lOiAnd2luc3Rvbl9vdXQubG9nJywgdGltZXN0YW1wIDogdHJ1ZSB9KTtcbi8vICB3aW5zdG9uLnJlbW92ZSh3aW5zdG9uLnRyYW5zcG9ydHMuQ29uc29sZSk7XG4vL3dpbnN0b24uYWRkKHBnTG9nZ2VyKTtcblxuLypcbmNvbnN0IGxvZ2dlciA9IG5ldyB3aW5zdG9uLkxvZ2dlcih7XG4gIHRyYW5zcG9ydHM6IFtcbiAgICBuZXcgd2luc3Rvbi50cmFuc3BvcnRzLkNvbnNvbGUoe1xuICAgICAgY29sb3I6IHRydWUsXG4gICAgICB0aW1lc3RhbXA6IHRydWUsXG4gICAgfSksXG4gICAgcGdMb2dnZXIsXG4gIF1cbn0pO1xuKi9cbi8vcGdMb2dnZXIuaW5pdFRhYmxlKGRvbmUpO1xuXG5cbnZhciBlbGl6YWJvdCA9IHJlcXVpcmUoJy4uL2V4dGVybi9lbGl6YWJvdC9lbGl6YWJvdC5qcycpO1xuLy9pbXBvcnQgKiBhcyBlbGl6YWJvdCBmcm9tICdlbGl6YWJvdCc7XG5cbmxldCBkZWJ1Z2xvZyA9IGRlYnVnKCdzbWFydGRpYWxvZycpO1xuaW1wb3J0ICogYXMgUGxhaW5SZWNvZ25pemVyIGZyb20gJy4vcGxhaW5yZWNvZ25pemVyJztcbi8vdmFyIGJ1aWxkZXIgPSByZXF1aXJlKCdib3RidWlsZGVyJyk7XG5cbnZhciBkaXNwYXRjaGVyID0gcmVxdWlyZSgnLi4vbWF0Y2gvZGlzcGF0Y2hlci5qcycpLmRpc3BhdGNoZXI7XG5cblxuZnVuY3Rpb24gZ2V0Q29udmVyc2F0aW9uSWQoc2Vzc2lvbjogYnVpbGRlci5TZXNzaW9uKTogc3RyaW5nIHtcbiAgcmV0dXJuIHNlc3Npb24ubWVzc2FnZSAmJlxuICAgIHNlc3Npb24ubWVzc2FnZS5hZGRyZXNzICYmXG4gICAgc2Vzc2lvbi5tZXNzYWdlLmFkZHJlc3MuY29udmVyc2F0aW9uLmlkO1xufVxuXG52YXIgZWxpemFib3RzID0ge307XG5cbmZ1bmN0aW9uIGdldEVsaXphQm90KGlkOiBzdHJpbmcpIHtcbiAgaWYgKCFlbGl6YWJvdHNbaWRdKSB7XG4gICAgZWxpemFib3RzW2lkXSA9IHtcbiAgICAgIGFjY2VzczogbmV3IERhdGUoKSxcbiAgICAgIGVsaXphYm90OiBuZXcgZWxpemFib3QoKVxuICAgIH07XG4gIH1cbiAgZWxpemFib3RzW2lkXS5hY2Nlc3MgPSBuZXcgRGF0ZSgpO1xuICByZXR1cm4gZWxpemFib3RzW2lkXS5lbGl6YWJvdDtcbn1cblxuaW1wb3J0ICogYXMgSU1hdGNoIGZyb20gJy4uL21hdGNoL2lmbWF0Y2gnO1xuaW1wb3J0ICogYXMgVG9vbHMgZnJvbSAnLi4vbWF0Y2gvdG9vbHMnO1xuXG52YXIgbmV3RmxvdyA9IHRydWU7XG5cbmltcG9ydCAqIGFzIE1vZGVsIGZyb20gJy4uL21vZGVsL21vZGVsJztcbmltcG9ydCAqIGFzIEV4ZWNTZXJ2ZXIgZnJvbSAnLi4vZXhlYy9leGVjc2VydmVyJztcblxuY29uc3QgdGhlRGVmYXVsdE1vZGVsID0gTW9kZWwubG9hZE1vZGVscygpO1xuXG52YXIgbW9kZWxzID0ge307XG5cbmZ1bmN0aW9uIGxvYWRNb2RlbChtb2RlbFBhdGg/OiBzdHJpbmcpOiBJTWF0Y2guSU1vZGVscyB7XG4gIG1vZGVsUGF0aCA9IG1vZGVsUGF0aCB8fCBcIlwiO1xuICBpZiAoIW1vZGVsc1ttb2RlbFBhdGhdKSB7XG4gICAgbW9kZWxzW21vZGVsUGF0aF0gPSBNb2RlbC5sb2FkTW9kZWxzKG1vZGVsUGF0aCk7XG4gIH1cbiAgcmV0dXJuIG1vZGVsc1ttb2RlbFBhdGhdO1xufVxuXG5pZiAobmV3Rmxvdykge1xuXG59IGVsc2Uge1xuXG4gIC8vY29uc3QgdG9vbHMgPSBUb29scy5nZXRUb29scygpO1xuICAvL2NvbnN0IElucHV0RmlsdGVyUnVsZXMgPSByZXF1aXJlKCcuLi9tYXRjaC9pbnB1dEZpbHRlclJ1bGVzLmpzJyk7XG4gIC8vY29uc3QgbVJ1bGVzID0gSW5wdXRGaWx0ZXJSdWxlcy5nZXRNUnVsZXNTYW1wbGUoKTtcbn1cblxuZnVuY3Rpb24gaXNBbm9ueW1vdXModXNlcmlkOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgcmV0dXJuIHVzZXJpZC5pbmRleE9mKFwiYW5vOlwiKSA9PT0gMDtcbn1cblxuZnVuY3Rpb24gcmVzdHJpY3RMb2dnZWRPbihzZXNzaW9uOiBidWlsZGVyLlNlc3Npb24sIGFycjogYW55W10pOiBhbnlbXSB7XG4gIHZhciB1c2VyaWQgPSBzZXNzaW9uLm1lc3NhZ2UuYWRkcmVzc1xuICAgICYmIHNlc3Npb24ubWVzc2FnZS5hZGRyZXNzLnVzZXJcbiAgICAmJiBzZXNzaW9uLm1lc3NhZ2UuYWRkcmVzcy51c2VyLmlkIHx8IFwiXCI7XG4gIGlmIChwcm9jZXNzLmVudi5BQk9UX0VNQUlMX1VTRVIgJiYgaXNBbm9ueW1vdXModXNlcmlkKSkge1xuICAgIGlmIChhcnIubGVuZ3RoIDwgNikge1xuICAgICAgcmV0dXJuIGFycjtcbiAgICB9XG4gICAgdmFyIGxlbiA9IGFyci5sZW5ndGg7XG4gICAgdmFyIHJlcyA9IGFyci5zbGljZSgwLCBNYXRoLm1pbihNYXRoLm1heChNYXRoLmZsb29yKGFyci5sZW5ndGggLyAzKSwgNyksIGFyci5sZW5ndGgpKTtcbiAgICBpZiAodHlwZW9mIGFyclswXSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgdmFyIGRlbHRhID0gbGVuIC0gcmVzLmxlbmd0aDtcbiAgICAgIHJlcy5wdXNoKFwiLi4uIGFuZCBcIiArIGRlbHRhICsgXCIgbW9yZSBlbnRyaWVzIGZvciByZWdpc3RlcmVkIHVzZXJzXCIpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9XG4gIHJldHVybiBhcnI7XG59XG5cbi8qXG5leHBvcnQgY2xhc3MgU2ltcGxlUmVjb2duaXplciBpbXBsZW1lbnRzIGJ1aWxkZXIuSUludGVudFJlY29nbml6ZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcblxuICB9XG5cbiAgcmVjb2duaXplKGNvbnRleHQ6IGJ1aWxkZXIuSVJlY29nbml6ZUNvbnRleHQsIGNhbGxiYWNrOiAoZXJyOiBFcnJvciwgcmVzdWx0OiBidWlsZGVyLklJbnRlbnRSZWNvZ25pemVyUmVzdWx0KSA9PiB2b2lkKTogdm9pZCB7XG4gICAgdmFyIHUgPSB7fSBhcyBidWlsZGVyLklJbnRlbnRSZWNvZ25pemVyUmVzdWx0O1xuXG4gICAgZGVidWdsb2coXCJyZWNvZ25pemluZyBcIiArIGNvbnRleHQubWVzc2FnZS50ZXh0KTtcbiAgICBpZiAoY29udGV4dC5tZXNzYWdlLnRleHQuaW5kZXhPZihcInN0YXJ0XCIpID49IDApIHtcbiAgICAgIHUuaW50ZW50ID0gXCJTaG93RW50aXR5XCI7XG4gICAgICB1LnNjb3JlID0gMC45O1xuICAgICAgdmFyIGUxID0ge30gYXMgYnVpbGRlci5JRW50aXR5O1xuICAgICAgZTEuc3RhcnRJbmRleCA9IFwic3RhcnQgXCIubGVuZ3RoO1xuICAgICAgZTEuZW5kSW5kZXggPSBjb250ZXh0Lm1lc3NhZ2UudGV4dC5sZW5ndGg7XG4gICAgICBlMS5zY29yZSA9IDAuMztcbiAgICAgIHUuZW50aXRpZXMgPSBbZTFdO1xuICAgICAgY2FsbGJhY2sodW5kZWZpbmVkLCB1KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoY29udGV4dC5tZXNzYWdlLnRleHQuaW5kZXhPZihcInRyYWluXCIpID49IDApIHtcbiAgICAgIHUuaW50ZW50ID0gXCJ0cmFpblwiO1xuICAgICAgdS5zY29yZSA9IDAuOTtcbiAgICAgIHZhciBlMSA9IHt9IGFzIGJ1aWxkZXIuSUVudGl0eTtcbiAgICAgIGUxLnN0YXJ0SW5kZXggPSBcInRyYWluIFwiLmxlbmd0aDtcbiAgICAgIGUxLmVuZEluZGV4ID0gY29udGV4dC5tZXNzYWdlLnRleHQubGVuZ3RoO1xuICAgICAgZTEuc2NvcmUgPSAwLjM7XG4gICAgICB1LmVudGl0aWVzID0gW2UxXTtcbiAgICAgIGNhbGxiYWNrKHVuZGVmaW5lZCwgdSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChjb250ZXh0Lm1lc3NhZ2UudGV4dC5pbmRleE9mKFwibGVhcm5cIikgPj0gMCkge1xuICAgICAgdS5pbnRlbnQgPSBcImxlYXJuXCI7XG4gICAgICB1LnNjb3JlID0gMC45O1xuICAgICAgdmFyIGUxID0ge30gYXMgYnVpbGRlci5JRW50aXR5O1xuICAgICAgZTEudHlwZSA9IFwidHJhaW5GYWN0XCI7XG4gICAgICBlMS5zdGFydEluZGV4ID0gXCJ0cmFpbiBcIi5sZW5ndGg7XG4gICAgICBlMS5lbmRJbmRleCA9IGNvbnRleHQubWVzc2FnZS50ZXh0Lmxlbmd0aDtcbiAgICAgIGUxLnNjb3JlID0gMC4zO1xuICAgICAgdS5lbnRpdGllcyA9IFtlMV07XG4gICAgICBjYWxsYmFjayh1bmRlZmluZWQsIHUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoY29udGV4dC5tZXNzYWdlLnRleHQuaW5kZXhPZihcImhlbHBcIikgPj0gMCkge1xuICAgICAgdS5pbnRlbnQgPSBcImhlbHBcIjtcbiAgICAgIHUuc2NvcmUgPSAwLjk7XG4gICAgICB2YXIgZTEgPSB7fSBhcyBidWlsZGVyLklFbnRpdHk7XG4gICAgICBlMS5zdGFydEluZGV4ID0gXCJ0cmFpbiBcIi5sZW5ndGg7XG4gICAgICBlMS5lbmRJbmRleCA9IGNvbnRleHQubWVzc2FnZS50ZXh0Lmxlbmd0aDtcbiAgICAgIGUxLnNjb3JlID0gMC4zO1xuICAgICAgdS5lbnRpdGllcyA9IFtlMV07XG4gICAgICBjYWxsYmFjayh1bmRlZmluZWQsIHUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoY29udGV4dC5tZXNzYWdlLnRleHQuaW5kZXhPZihcImV4aXRcIikgPj0gMCkge1xuICAgICAgdS5pbnRlbnQgPSBcImV4aXRcIjtcbiAgICAgIHUuc2NvcmUgPSAwLjk7XG4gICAgICB2YXIgZTEgPSB7fSBhcyBidWlsZGVyLklFbnRpdHk7XG4gICAgICBlMS5zdGFydEluZGV4ID0gXCJleGl0IFwiLmxlbmd0aDtcbiAgICAgIGUxLmVuZEluZGV4ID0gY29udGV4dC5tZXNzYWdlLnRleHQubGVuZ3RoO1xuICAgICAgZTEuc2NvcmUgPSAwLjM7XG4gICAgICB1LmVudGl0aWVzID0gW2UxXTtcbiAgICAgIGNhbGxiYWNrKHVuZGVmaW5lZCwgdSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChjb250ZXh0Lm1lc3NhZ2UudGV4dC5pbmRleE9mKFwid3JvbmdcIikgPj0gMCkge1xuICAgICAgdS5pbnRlbnQgPSBcIndyb25nXCI7XG4gICAgICB1LnNjb3JlID0gMC45O1xuICAgICAgdmFyIGUxID0ge30gYXMgYnVpbGRlci5JRW50aXR5O1xuICAgICAgZTEuc3RhcnRJbmRleCA9IFwiZXhpdCBcIi5sZW5ndGg7XG4gICAgICBlMS5lbmRJbmRleCA9IGNvbnRleHQubWVzc2FnZS50ZXh0Lmxlbmd0aDtcbiAgICAgIGUxLnNjb3JlID0gMC4zO1xuICAgICAgdS5lbnRpdGllcyA9IFtlMV07XG4gICAgICBjYWxsYmFjayh1bmRlZmluZWQsIHUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkZWJ1Z2xvZygncmVjb2duaXppbmcgbm90aGluZycpO1xuICAgIHUuaW50ZW50ID0gXCJOb25lXCI7XG4gICAgdS5zY29yZSA9IDAuMTtcbiAgICB2YXIgZTEgPSB7fSBhcyBidWlsZGVyLklFbnRpdHk7XG4gICAgZTEuc3RhcnRJbmRleCA9IFwiZXhpdCBcIi5sZW5ndGg7XG4gICAgZTEuZW5kSW5kZXggPSBjb250ZXh0Lm1lc3NhZ2UudGV4dC5sZW5ndGg7XG4gICAgZTEuc2NvcmUgPSAwLjE7XG4gICAgdS5lbnRpdGllcyA9IFtdO1xuICAgIGNhbGxiYWNrKHVuZGVmaW5lZCwgdSk7XG4gIH1cbn1cbiovXG5cbmNvbnN0IGFUcmFpblJlcGxpZXMgPSBbXCJUaGFuayB5b3UgZm9yIHNoYXJpbmcgdGhpcyBzdWdnZXN0aW9uIHdpdGggdXNcIixcbiAgXCJUaGFuayBmb3IgZm9yIHRoaXMgdmFsdWFibGUgaW5mb3JtYXRpb24uXCIsXG4gIFwiVGhhbmsgZm9yIGZvciB0aGlzIGludGVyZXN0aW5nIGZhY3QhXCIsXG4gIFwiVGhhdHMgYSBwbGV0aG9yaWEgb2YgaW5mb3JtYXRpb24uXCIsXG4gIFwiVGhhdCdzIGEgbnVnZ2V0IG9mIGluZm9ybWF0aW9uLlwiLFxuICBcIkxvdmVseSwgSSBtYXkgY29uc2lkZXIgeW91IGlucHV0LlwiLFxuICBcIldlbGwgZG9uZSwgYW55dGhpbmcgbW9yZSB0byBsZXQgbWUga25vdz9cIixcbiAgXCJJIGRvIGFwcHJlY2lhdGUgeW91ciB0ZWFjaGluZyBhbmQgbXkgbGVhcm5pbmcgZXhwZXJpZW5jZSwgb3Igd2FzIGl0IHRoZSBvdGhlciB3YXkgcm91bmQ/XCIsXG4gIFwiWW91ciBoZWxwZnVsIGlucHV0IGhhcyBiZWVuIHN0b3JlZCBpbiBzb21lIGR1c3R5IGNvcm5lciBvZiB0aGUgV29ybGQgd2lkZSB3ZWIhXCIsXG4gIFwiVGhhbmsgeW91IGZvciBteSBsZWFybmluZyBleHBlcmllbmNlIVwiLFxuICBcIkkgaGF2ZSBpbmNvcnBvcmF0ZWQgeW91ciB2YWx1YWJsZSBzdWdnZXN0aW9uIGluIHRoZSB3aXNkb20gb2YgdGhlIGludGVybmV0XCJcbl07XG5cbnZhciBhVHJhaW5EaWFsb2cgPSBhVHJhaW5SZXBsaWVzO1xuXG52YXIgYVRyYWluRXhpdEhpbnQgPSBbXG4gIFwiXFxudHlwZSBcXFwiZG9uZVxcXCIgd2hlbiB5b3UgYXJlIGRvbmUgdHJhaW5pbmcgbWUuXCIsXG4gIFwiXCIsXG4gIFwiXCIsXG4gIFwiXCIsXG4gIFwiXFxucmVtZW1iZXIsIHlvdSBhcmUgc3R1Y2sgaGVyZSBpbnN0cnVjdGluZyBtZSwgdHlwZSBcXFwiZG9uZVxcXCIgdG8gcmV0dXJuLlwiLFxuICBcIlwiXTtcblxuY29uc3QgYUVudGVyVHJhaW4gPSBbJ1NvIHlvdSB0aGluayB0aGlzIGlzIHdyb25nPyBZb3UgY2FuIG9mZmVyIHlvdXIgYWR2aXNlIGhlcmUuXFxuIFR5cGUgXCJkb25lXCIgaWYgeW91IGFyZSBkb25lIHdpdGggaW5zdHJ1Y3RpbmcgbWUnLFxuICAnRmVlbCBmcmVlIHRvIG9mZmVyIG1lIHlvdXIgYmV0dGVyIHNvbHV0aW9uIGhlcmUuXFxuVHlwZSBcImRvbmVcIiBpZiB5b3UgYXJlIGRvbmUgd2l0aCBpbnN0cnVjdGluZyBtZScsXG4gICdTb21lIHNheSBcIlRoZSBzZWNyZXQgdG8gaGFwcGluZXNzIGlzIHRvIGxvd2VyIHlvdXIgZXhwZWN0YXRpb25zIHRvIHRoZSBwb2ludCB0aGV5IGFyZSBhbHJlYWR5IG1ldC5cIiwgXFxudCBpZiB5b3UgY291bGQgaGVscCBtZSB0byBiZWNvbWUgYmV0dGVyLCBpbnN0cnVjdCBtZS5cXG4gVHlwZSBcImRvbmVcIiBpZiB5b3UgYXJlIGRvbmUgd2l0aCB0ZWFjaGluZyBtZScsXG4gICdGZWVsIGZyZWUgdG8gb2ZmZXIgbWUgeW91ciBiZXR0ZXIgc29sdXRpb24gaGVyZS5cXG4gVHlwZSBcImRvbmVcIiBpZiB5b3UgYXJlIGRvbmUgd2l0aCBpbnN0cnVjdGluZyBtZScsXG4gICdGZWVsIGZyZWUgdG8gb2ZmZXIgbWUgeW91ciBiZXR0ZXIgc29sdXRpb24gaGVyZS5cXG4gVHlwZSBcImRvbmVcIiBpZiB5b3UgYXJlIGRvbmUgd2l0aCBpbnN0cnVjdGluZyBtZScsXG5dO1xuY29uc3QgYUJhY2tGcm9tVHJhaW5pbmcgPSBbXG4gICdQdXVoLCBiYWNrIGZyb20gdHJhaW5pbmchIE5vdyBmb3IgdGhlIGVhc3kgcGFydCAuLi5cXG4gYXNrIG1lIGEgbmV3IHF1ZXN0aW9uLicsXG4gICdMaXZlIGFuZCBkb25cXCd0IGxlYXJuLCB0aGF0XFwncyB1cy4gTmFhaCwgd2VcXCdsbCBzZWUuXFxuQXNrIG1lIGFub3RoZXIgcXVlc3Rpb24uJyxcbiAgJ1RoZSBzZWNyZXQgdG8gaGFwcGluZXNzIGlzIHRvIGxvd2VyIHlvdXIgZXhwZWN0YXRpb25zIHRvIHRoZSBwb2ludCB0aGV5IGFyZSBhbHJlYWR5IG1ldC5cXG4gQXNrIG1lIGEgcXVlc3Rpb24uJyxcbiAgJ1RoYW5rcyBmb3IgaGF2aW5nIHRoaXMgbGVjdHVyZSBzZXNzaW9uLCBub3cgaSBhbSBiYWNrIHRvIG91ciB1c3VhbCBzZWxmLlxcbiBBc2sgbWUgYSBxdWVzdGlvbi4nXG5dO1xuXG5cbmNvbnN0IGFUcmFpbk5vS2xpbmdvbiA9IFtcbiAgXCJIZSB3aG8gbWFzdGVyIHRoZSBkYXJrIGFydHMgb2YgU0FQIG11c3Qgbm90IGR3ZWxsIGluIHRoZSBlYXJ0aGx5IHJlYWxtcyBvZiBTdGFydCBUcmVrLlwiLFxuICBcIlNBUCBpcyBhIGNsb3VkIGNvbXBhbnksIG5vdCBhIHNwYWNlIGNvbXBhbnkuXCIsXG4gIFwiVGhlIGRlcHRoIG9mIFIvMyBhcmUgZGVlcGVyIHRoYW4gRGVlcCBTcGFjZSA0Mi5cIixcbiAgXCJNeSBicmFpbnBvd2VyIGlzIGZ1bGx5IGFic29yYmVkIHdpdGggbWFzdGVyaW5nIG90aGVyIHJlYWxtcy5cIixcbiAgXCJGb3IgdGhlIHdvc2FwLCB0aGUgc2t5IGlzIHRoZSBsaW1pdC4gRmVlbCBmcmVlIHRvIGNoZWNrIG91dCBuYXNhLmdvdiAuXCIsXG4gIFwiVGhlIGZ1dHVyZSBpcyBTQVAgb3IgSUJNIGJsdWUsIG5vdCBzcGFjZSBibGFjay5cIixcbiAgXCJUaGF0J3MgbGVmdCB0byBzb21lIG11c2t5IGZ1dHVyZS5cIlxuXVxuXG5leHBvcnQgY29uc3QgYVJlc3BvbnNlc09uVG9vTG9uZyA9IFtcbiAgXCJZb3VyIGlucHV0IHNob3VsZCBiZSBlbG9xdWVudCBpbiBpdCdzIGJyZXZpdHkuIFRoaXMgb25lIHdhcyB0b28gbG9uZy5cIixcbiAgXCJteSB3aXNkb20gaXMgc2V2ZXJseSBib3VuZCBieSBteSBsaW1pdGVkIGlucHV0IHByb2Nlc3NpbmcgY2FwYWJpbGl0aWVzLiBDb3VsZCB5b3UgZm9ybXVsYXRlIGEgc2hvcnRlciBpbnB1dD8gVGhhbmsgeW91LlwiLFxuICBcIlRoZSBsZW5ndGggb2YgeW91IGlucHV0IGluZGljYXRlcyB5b3UgcHJvYmFibHkga25vdyBtb3JlIGFib3V0IHRoZSB0b3BpYyB0aGFuIG1lPyBDYW4gaSBodW1ibHkgYXNrIHlvdSB0byBmb3JtdWxhdGUgYSBzaG9ydGVyIHF1ZXN0aW9uP1wiLFxuICAnXFxcIldoYXQgZXZlciB5b3Ugd2FudCB0byB0ZWFjaCwgYmUgYnJpZWZcXFwiIChIb3JhY2UpLiBXaGlsZSB0aGlzIGRvZXMgbm90IGFsd2F5cyBhcHBsaWVzIHRvIG15IGFuc3dlcnMsIGl0IGlzIHJlcXVpcmUgZm9yIHlvdXIgcXVlc3Rpb25zLiBQbGVhc2UgdHJ5IGFnYWluIHdpdGggYSByZWZpbmVkIHF1ZXN0aW9ucy4nLFxuICAnSSB1bmRlcnN0YW5kIG1vcmUgdGhhbiA0LWxldHRlciB3b3JkcywgYnV0IG5vdCBtb3JlIHRoYW4gMjAgd29yZCBzZW50ZW5jZXMuIFBsZWFzZSB0cnkgdG8gc2hvcnRlbiB5b3VyIGlucHV0LicsXG4gICd0aGUgc2t5IGlzIHRoZSBsaW1pdD8gQWlyIGZvcmNlIG1lbWJlciBvciBub3QsIHlvdSBjYW4gYXNrIGxvbmdlciBxdWVzdGlvbnMgdGhhbiBcXFwidGhlIHNreVxcXCIsIGJ1dCBub3QgdGhpcyBsb25nJyxcbiAgJ015IGFuc3dlcnMgbWF5IGJlIGV4aGF1c3RpdmUsIGJ1dCBJIHVuZGVyc3RhbmQgbW9yZSB0aGFuIDQtbGV0dGVyIHdvcmRzLCBidXQgbm90IG1vcmUgdGhhbiAyMCB3b3JkIHNlbnRlbmNlcy4gU29ycnkuJyxcbiAgJ091ciBjb252ZXJzYXRpb24gbXVzdCBiZSBoaWdobHkgYXNzeW1tZXRyaWM6IG15IGFuc3dlcnMgbWF5IGJlIHZlcmJvc2UgYW5kIGV4aGF1c3RpdmUgYW5kIGZ1enp5LCBxdWVzdGlvbnMgYW5kIGlucHV0IG11c3QgYmUgYnJpZWYuIFRyeSB0byByZWZvcm11bGF0ZSBpdCcsXG5dO1xuXG5cbmV4cG9ydCBjb25zdCBtZXRhd29yZHNEZXNjcmlwdGlvbnMgPSB7XG4gICAgICAgIFwiY2F0ZWdvcnlcIjogXCJhbiBhdHRyaWJ1dGUgb2YgYSByZWNvcmQgaW4gYSBtb2RlbCwgZXhhbXBsZTogYSBQbGFuZXQgaGFzIGEgXFxcIm5hbWVcXFwiIGF0dHJpYnV0ZVwiLFxuICAgICAgICBcImRvbWFpblwiOiBcImEgZ3JvdXAgb2YgZmFjdHMgd2hpY2ggYXJlIHR5cGljYWxseSB1bnJlbGF0ZWRcIixcbiAgICAgICAgXCJrZXlcIjogXCJhbiBhdHRyaWJ1dGUgdmFsdWUgKG9mIGEgY2F0ZWdvcnkpIHdoaWNoICBpcyB1bmlxdWUgZm9yIHRoZSByZWNvcmRcIixcbiAgICAgICAgXCJ0b29sXCI6IFwiaXMgcG90ZW50aWFseSBjb21tYW5kIHRvIGV4ZWN1dGVcIixcbiAgICAgICAgXCJyZWNvcmRcIjogXCJhIHNwZWNpZmljIHNldCBvZiBcXFwiZmFjdFxcXCJzIG9mIGEgZG9tYWluLCBhIFxcXCJyZWNvcmRcXFwiIGhhcyBhIHNldCBvZiBhdHRyaWJ1dGVzIHZhbHVlcyAoXFxcImZhY3RcXFwicykgb2YgdGhlIGNhdGVnb3JpZXMsIG9mdGVuIGEgcmVjb3JkIGhhcyBhIFxcXCJrZXlcXFwiXCIsXG4gICAgICAgIFwiZmFjdFwiOiBcImEgc3BlY2lmaWMgY2F0ZWdvcnkgdmFsdWUgb2YgYSByZWNvcmQgaW4gYSBkb21haW4sIG1heSBiZSBhIFxcXCJrZXlcXFwiIHZhbHVlXCIsXG4gICAgICB9O1xuXG5mdW5jdGlvbiBnZXRSYW5kb21SZXN1bHQoYXJyOiBzdHJpbmdbXSk6IHN0cmluZyB7XG4gIHJldHVybiBhcnJbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogYXJyLmxlbmd0aCkgJSBhcnIubGVuZ3RoXTtcbn1cblxuZXhwb3J0IGNsYXNzIFNpbXBsZVVwRG93blJlY29nbml6ZXIgaW1wbGVtZW50cyBidWlsZGVyLklJbnRlbnRSZWNvZ25pemVyIHtcbiAgY29uc3RydWN0b3IoKSB7XG5cbiAgfVxuXG4gIHJlY29nbml6ZShjb250ZXh0OiBidWlsZGVyLklSZWNvZ25pemVDb250ZXh0LCBjYWxsYmFjazogKGVycjogRXJyb3IsIHJlc3VsdDogYnVpbGRlci5JSW50ZW50UmVjb2duaXplclJlc3VsdCkgPT4gdm9pZCk6IHZvaWQge1xuICAgIHZhciB1ID0ge30gYXMgYnVpbGRlci5JSW50ZW50UmVjb2duaXplclJlc3VsdDtcblxuICAgIGRlYnVnbG9nKFwicmVjb2duaXppbmcgXCIgKyBjb250ZXh0Lm1lc3NhZ2UudGV4dCk7XG4gICAgaWYgKGNvbnRleHQubWVzc2FnZS50ZXh0LmluZGV4T2YoXCJkb3duXCIpID49IDApIHtcbiAgICAgIHUuaW50ZW50ID0gXCJpbnRlbnQuZG93blwiO1xuICAgICAgdS5zY29yZSA9IDAuOTtcbiAgICAgIHZhciBlMSA9IHt9IGFzIGJ1aWxkZXIuSUVudGl0eTtcbiAgICAgIGUxLnN0YXJ0SW5kZXggPSBcInN0YXJ0IFwiLmxlbmd0aDtcbiAgICAgIGUxLmVuZEluZGV4ID0gY29udGV4dC5tZXNzYWdlLnRleHQubGVuZ3RoO1xuICAgICAgZTEuc2NvcmUgPSAwLjM7XG4gICAgICB1LmVudGl0aWVzID0gW2UxXTtcbiAgICAgIGNhbGxiYWNrKHVuZGVmaW5lZCwgdSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChjb250ZXh0Lm1lc3NhZ2UudGV4dC5pbmRleE9mKFwidXBcIikgPj0gMCkge1xuICAgICAgdS5pbnRlbnQgPSBcImludGVudC51cFwiO1xuICAgICAgdS5zY29yZSA9IDAuOTtcbiAgICAgIHZhciBlMSA9IHt9IGFzIGJ1aWxkZXIuSUVudGl0eTtcbiAgICAgIGUxLnN0YXJ0SW5kZXggPSBcInVwXCIubGVuZ3RoO1xuICAgICAgZTEuZW5kSW5kZXggPSBjb250ZXh0Lm1lc3NhZ2UudGV4dC5sZW5ndGg7XG4gICAgICBlMS5zY29yZSA9IDAuMztcbiAgICAgIHUuZW50aXRpZXMgPSBbZTFdO1xuICAgICAgY2FsbGJhY2sodW5kZWZpbmVkLCB1KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGNvbnRleHQubWVzc2FnZS50ZXh0LmluZGV4T2YoXCJkb25lXCIpID49IDApIHtcbiAgICAgIHUuaW50ZW50ID0gXCJpbnRlbnQudXBcIjtcbiAgICAgIHUuc2NvcmUgPSAwLjk7XG4gICAgICB2YXIgZTEgPSB7fSBhcyBidWlsZGVyLklFbnRpdHk7XG4gICAgICBlMS5zdGFydEluZGV4ID0gXCJ1cFwiLmxlbmd0aDtcbiAgICAgIGUxLmVuZEluZGV4ID0gY29udGV4dC5tZXNzYWdlLnRleHQubGVuZ3RoO1xuICAgICAgZTEuc2NvcmUgPSAwLjM7XG4gICAgICB1LmVudGl0aWVzID0gW2UxXTtcbiAgICAgIGNhbGxiYWNrKHVuZGVmaW5lZCwgdSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChjb250ZXh0Lm1lc3NhZ2UudGV4dC5pbmRleE9mKFwiZXhpdFwiKSA+PSAwKSB7XG4gICAgICB1LmludGVudCA9IFwiaW50ZW50LnVwXCI7XG4gICAgICB1LnNjb3JlID0gMC45O1xuICAgICAgdmFyIGUxID0ge30gYXMgYnVpbGRlci5JRW50aXR5O1xuICAgICAgZTEuc3RhcnRJbmRleCA9IFwidXBcIi5sZW5ndGg7XG4gICAgICBlMS5lbmRJbmRleCA9IGNvbnRleHQubWVzc2FnZS50ZXh0Lmxlbmd0aDtcbiAgICAgIGUxLnNjb3JlID0gMC4zO1xuICAgICAgdS5lbnRpdGllcyA9IFtlMV07XG4gICAgICBjYWxsYmFjayh1bmRlZmluZWQsIHUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoY29udGV4dC5tZXNzYWdlLnRleHQuaW5kZXhPZihcInF1aXRcIikgPj0gMCkge1xuICAgICAgdS5pbnRlbnQgPSBcImludGVudC51cFwiO1xuICAgICAgdS5zY29yZSA9IDAuOTtcbiAgICAgIHZhciBlMSA9IHt9IGFzIGJ1aWxkZXIuSUVudGl0eTtcbiAgICAgIGUxLnN0YXJ0SW5kZXggPSBcInVwXCIubGVuZ3RoO1xuICAgICAgZTEuZW5kSW5kZXggPSBjb250ZXh0Lm1lc3NhZ2UudGV4dC5sZW5ndGg7XG4gICAgICBlMS5zY29yZSA9IDAuMztcbiAgICAgIHUuZW50aXRpZXMgPSBbZTFdO1xuICAgICAgY2FsbGJhY2sodW5kZWZpbmVkLCB1KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZGVidWdsb2coJ3JlY29nbml6aW5nIG5vdGhpbmcnKTtcbiAgICB1LmludGVudCA9IFwiTm9uZVwiO1xuICAgIHUuc2NvcmUgPSAwLjE7XG4gICAgdmFyIGUxID0ge30gYXMgYnVpbGRlci5JRW50aXR5O1xuICAgIGUxLnN0YXJ0SW5kZXggPSBcImV4aXQgXCIubGVuZ3RoO1xuICAgIGUxLmVuZEluZGV4ID0gY29udGV4dC5tZXNzYWdlLnRleHQubGVuZ3RoO1xuICAgIGUxLnNjb3JlID0gMC4xO1xuICAgIHUuZW50aXRpZXMgPSBbXTtcbiAgICBjYWxsYmFjayh1bmRlZmluZWQsIHUpO1xuICB9XG59XG5cbmNvbnN0IEFueU9iamVjdCA9IE9iamVjdCBhcyBhbnk7XG4vLyBnbG9iYWxUdW5uZWwuaW5pdGlhbGl6ZSh7XG4vLyAgaG9zdDogJ3Byb3h5LmV4eHhhbXBsZS5jb20nLFxuLy8gIHBvcnQ6IDgwODBcbi8vIH0pXG5cbi8vIENyZWF0ZSBib3QgYW5kIGJpbmQgdG8gY29uc29sZVxuLy8gdmFyIGNvbm5lY3RvciA9IG5ldyBodG1sY29ubmVjdG9yLkhUTUxDb25uZWN0b3IoKVxuXG4vLyBjb25uZWN0b3Iuc2V0QW5zd2VySG9vayhmdW5jdGlvbiAoc0Fuc3dlcikge1xuLy8gIGNvbnNvbGUubG9nKCdHb3QgYW5zd2VyIDogJyArIHNBbnN3ZXIgKyAnXFxuJylcbi8vIH0pXG5cbnZhciBib3Q7XG4vLyBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbi8vICAgY29ubmVjdG9yLnByb2Nlc3NNZXNzYWdlKCdzdGFydCB1bml0IHRlc3QgQUJDICcpXG4vLyB9LCA1MDAwKVxuXG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7XG5cbnZhciBvSlNPTiA9IEpTT04ucGFyc2UoJycgKyBmcy5yZWFkRmlsZVN5bmMoJy4vcmVzb3VyY2VzL21vZGVsL2ludGVudHMuanNvbicpKTtcbnZhciBvUnVsZXMgPSBQbGFpblJlY29nbml6ZXIucGFyc2VSdWxlcyhvSlNPTik7XG4vLyB2YXIgUmVjb2duaXplciA9IG5ldyAocmVjb2duaXplci5SZWdFeHBSZWNvZ25pemVyKShvUnVsZXMpO1xuXG5cbmZ1bmN0aW9uIGxvZ1F1ZXJ5KHNlc3Npb246IGJ1aWxkZXIuU2Vzc2lvbiwgaW50ZW50OiBzdHJpbmcsIHJlc3VsdD86IEFycmF5PElNYXRjaC5JVG9vbE1hdGNoPikge1xuXG4gIGZzLmFwcGVuZEZpbGUoJy4vbG9ncy9zaG93bWVxdWVyaWVzLnR4dCcsIFwiXFxuXCIgKyBKU09OLnN0cmluZ2lmeSh7XG4gICAgdGV4dDogc2Vzc2lvbi5tZXNzYWdlLnRleHQsXG4gICAgdGltZXN0YW1wOiBzZXNzaW9uLm1lc3NhZ2UudGltZXN0YW1wLFxuICAgIGludGVudDogaW50ZW50LFxuICAgIHJlczogcmVzdWx0ICYmIHJlc3VsdC5sZW5ndGggJiYgTWF0Y2guVG9vbE1hdGNoLmR1bXBOaWNlKHJlc3VsdFswXSkgfHwgXCIwXCIsXG4gICAgY29udmVyc2F0aW9uSWQ6IHNlc3Npb24ubWVzc2FnZS5hZGRyZXNzXG4gICAgJiYgc2Vzc2lvbi5tZXNzYWdlLmFkZHJlc3MuY29udmVyc2F0aW9uXG4gICAgJiYgc2Vzc2lvbi5tZXNzYWdlLmFkZHJlc3MuY29udmVyc2F0aW9uLmlkIHx8IFwiXCIsXG4gICAgdXNlcmlkOiBzZXNzaW9uLm1lc3NhZ2UuYWRkcmVzc1xuICAgICYmIHNlc3Npb24ubWVzc2FnZS5hZGRyZXNzLnVzZXJcbiAgICAmJiBzZXNzaW9uLm1lc3NhZ2UuYWRkcmVzcy51c2VyLmlkIHx8IFwiXCJcbiAgfSksIGZ1bmN0aW9uIChlcnIsIHJlcykge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIGRlYnVnbG9nKFwibG9nZ2luZyBmYWlsZWQgXCIgKyBlcnIpO1xuICAgIH1cbiAgfSk7XG59XG5cblxuXG5mdW5jdGlvbiBsb2dRdWVyeVdoYXRJcyhzZXNzaW9uOiBidWlsZGVyLlNlc3Npb24sIGludGVudDogc3RyaW5nLCByZXN1bHQ/OiBBcnJheTxJTWF0Y2guSVdoYXRJc0Fuc3dlcj4pIHtcblxuICBmcy5hcHBlbmRGaWxlKCcuL2xvZ3Mvc2hvd21lcXVlcmllcy50eHQnLCBcIlxcblwiICsgSlNPTi5zdHJpbmdpZnkoe1xuICAgIHRleHQ6IHNlc3Npb24ubWVzc2FnZS50ZXh0LFxuICAgIHRpbWVzdGFtcDogc2Vzc2lvbi5tZXNzYWdlLnRpbWVzdGFtcCxcbiAgICBpbnRlbnQ6IGludGVudCxcbiAgICByZXM6IHJlc3VsdCAmJiByZXN1bHQubGVuZ3RoICYmIFdoYXRJcy5kdW1wTmljZShyZXN1bHRbMF0pIHx8IFwiMFwiLFxuICAgIGNvbnZlcnNhdGlvbklkOiBzZXNzaW9uLm1lc3NhZ2UuYWRkcmVzc1xuICAgICYmIHNlc3Npb24ubWVzc2FnZS5hZGRyZXNzLmNvbnZlcnNhdGlvblxuICAgICYmIHNlc3Npb24ubWVzc2FnZS5hZGRyZXNzLmNvbnZlcnNhdGlvbi5pZCB8fCBcIlwiLFxuICAgIHVzZXJpZDogc2Vzc2lvbi5tZXNzYWdlLmFkZHJlc3NcbiAgICAmJiBzZXNzaW9uLm1lc3NhZ2UuYWRkcmVzcy51c2VyXG4gICAgJiYgc2Vzc2lvbi5tZXNzYWdlLmFkZHJlc3MudXNlci5pZCB8fCBcIlwiXG4gIH0pLCBmdW5jdGlvbiAoZXJyLCByZXMpIHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICBkZWJ1Z2xvZyhcImxvZ2dpbmcgZmFpbGVkIFwiICsgZXJyKTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBsb2dRdWVyeVdoYXRJc1R1cGVsKHNlc3Npb246IGJ1aWxkZXIuU2Vzc2lvbiwgaW50ZW50OiBzdHJpbmcsIHJlc3VsdD86IEFycmF5PElNYXRjaC5JV2hhdElzVHVwZWxBbnN3ZXI+KSB7XG5cbiAgZnMuYXBwZW5kRmlsZSgnLi9sb2dzL3Nob3dtZXF1ZXJpZXMudHh0JywgXCJcXG5cIiArIEpTT04uc3RyaW5naWZ5KHtcbiAgICB0ZXh0OiBzZXNzaW9uLm1lc3NhZ2UudGV4dCxcbiAgICB0aW1lc3RhbXA6IHNlc3Npb24ubWVzc2FnZS50aW1lc3RhbXAsXG4gICAgaW50ZW50OiBpbnRlbnQsXG4gICAgcmVzOiByZXN1bHQgJiYgcmVzdWx0Lmxlbmd0aCAmJiBXaGF0SXMuZHVtcE5pY2VUdXBlbChyZXN1bHRbMF0pIHx8IFwiMFwiLFxuICAgIGNvbnZlcnNhdGlvbklkOiBzZXNzaW9uLm1lc3NhZ2UuYWRkcmVzc1xuICAgICYmIHNlc3Npb24ubWVzc2FnZS5hZGRyZXNzLmNvbnZlcnNhdGlvblxuICAgICYmIHNlc3Npb24ubWVzc2FnZS5hZGRyZXNzLmNvbnZlcnNhdGlvbi5pZCB8fCBcIlwiLFxuICAgIHVzZXJpZDogc2Vzc2lvbi5tZXNzYWdlLmFkZHJlc3NcbiAgICAmJiBzZXNzaW9uLm1lc3NhZ2UuYWRkcmVzcy51c2VyXG4gICAgJiYgc2Vzc2lvbi5tZXNzYWdlLmFkZHJlc3MudXNlci5pZCB8fCBcIlwiXG4gIH0pLCBmdW5jdGlvbiAoZXJyLCByZXMpIHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICBkZWJ1Z2xvZyhcImxvZ2dpbmcgZmFpbGVkIFwiICsgZXJyKTtcbiAgICB9XG4gIH0pO1xufVxuXG52YXIgZ3dvcmRzID0ge307XG4vKipcbiAqIENvbnN0cnVjdCBhIGJvdFxuICogQHBhcmFtIGNvbm5lY3RvciB7Q29ubmVjdG9yfSB0aGUgY29ubmVjdG9yIHRvIHVzZVxuICogSFRNTENvbm5lY3RvclxuICogb3IgY29ubmVjdG9yID0gbmV3IGJ1aWxkZXIuQ29uc29sZUNvbm5lY3RvcigpLmxpc3RlbigpXG4gKi9cbmZ1bmN0aW9uIG1ha2VCb3QoY29ubmVjdG9yLCBtb2RlbFBhdGg/OiBzdHJpbmcpIHtcblxuICB2YXIgdGhlTW9kZWwgPSBsb2FkTW9kZWwobW9kZWxQYXRoKTtcbiAgYm90ID0gbmV3IGJ1aWxkZXIuVW5pdmVyc2FsQm90KGNvbm5lY3Rvcik7XG5cblxuXG4gIC8vIENyZWF0ZSBMVUlTIHJlY29nbml6ZXIgdGhhdCBwb2ludHMgYXQgb3VyIG1vZGVsIGFuZCBhZGQgaXQgYXMgdGhlIHJvb3QgJy8nIGRpYWxvZyBmb3Igb3VyIENvcnRhbmEgQm90LlxuICAvLyB2YXIgbW9kZWwgPSBzZW5zaXRpdmUubW9kZWx1cmw7XG4gIC8vIHZhciBtb2RlbCA9ICdodHRwczovL2FwaS5wcm9qZWN0b3hmb3JkLmFpL2x1aXMvdjIuMC9hcHBzL2M0MTNiMmVmLTM4MmMtNDViZC04ZmYwLWY3NmQ2MGUyYTgyMT9zdWJzY3JpcHRpb24ta2V5PWMyMTM5OGI1OTgwYTRjZTA5ZjQ3NGJiZmVlOTNiODkyJnE9J1xuICB2YXIgcmVjb2duaXplciA9IG5ldyBQbGFpblJlY29nbml6ZXIuUmVnRXhwUmVjb2duaXplcihvUnVsZXMpO1xuXG4gIHZhciBkaWFsb2cgPSBuZXcgYnVpbGRlci5JbnRlbnREaWFsb2coeyByZWNvZ25pemVyczogW3JlY29nbml6ZXJdIH0pO1xuICAvLyBkaWFsb2cub25CZWdpbihmdW5jdGlvbihzZXNzaW9uLGFyZ3MpIHtcbiAgLy8gY29uc29sZS5sb2coXCJiZWdpbm5pbmcgLi4uXCIpXG4gIC8vIHNlc3Npb24uZGlhbG9nRGF0YS5yZXRyeVByb21wdCA9IGFyZ3MgJiYgYXJncy5yZXRyeVByb21wdCB8fCBcIkkgYW0gc29ycnlcIlxuICAvLyBzZXNzaW9uLnNlbmQoXCJXaGF0IGRvIHlvdSB3YW50P1wiKVxuICAvL1xuICAvLyB9KVxuXG4gIHZhciBkaWFsb2dVcERvd24gPSBuZXcgYnVpbGRlci5JbnRlbnREaWFsb2coeyByZWNvZ25pemVyczogW25ldyBTaW1wbGVVcERvd25SZWNvZ25pemVyKCldIH0pO1xuXG4gIGJvdC5kaWFsb2coJy91cGRvd24nLCBkaWFsb2dVcERvd24pO1xuICBkaWFsb2dVcERvd24ub25CZWdpbihmdW5jdGlvbiAoc2Vzc2lvbikge1xuICAgIGRpYWxvZ2xvZyhcIlRyYWluTWVcIiwgc2Vzc2lvbiwgc2VuZChnZXRSYW5kb21SZXN1bHQoYUVudGVyVHJhaW4pKSk7XG4gICAgLy9zZXNzaW9uLnNlbmQoXCJIaSB0aGVyZSwgdXBkb3duIGlzIHdhaXRpbmcgZm9yIHlvdVwiKTtcbiAgfSlcblxuICBkaWFsb2dVcERvd24ubWF0Y2hlcygnaW50ZW50LnVwJywgW1xuICAgIGZ1bmN0aW9uIChzZXNzaW9uLCBhcmdzLCBuZXh0KSB7XG4gICAgICBzZXNzaW9uLmRpYWxvZ0RhdGEuYWJjID0gYXJncyB8fCB7fTtcbiAgICAgIGJ1aWxkZXIuUHJvbXB0cy50ZXh0KHNlc3Npb24sICd5b3Ugd2FudCB0byBleGl0IHRyYWluaW5nPyB0eXBlIFxcXCJkb25lXFxcIiBhZ2Fpbi4nKTtcbiAgICB9LFxuICAgIGZ1bmN0aW9uIChzZXNzaW9uLCByZXN1bHRzLCBuZXh0KSB7XG4gICAgICBzZXNzaW9uLmRpYWxvZ0RhdGEuYWJjID0gcmVzdWx0cy5yZXBvbnNlO1xuICAgICAgbmV4dCgpO1xuICAgIH0sXG4gICAgZnVuY3Rpb24gKHNlc3Npb24sIHJlc3VsdHMpIHtcbiAgICAgIHNlc3Npb24uZW5kRGlhbG9nV2l0aFJlc3VsdCh7IHJlc3BvbnNlOiBzZXNzaW9uLmRpYWxvZ0RhdGEuYWJjIH0pO1xuICAgIH1cbiAgXVxuICApO1xuXG4gIGRpYWxvZ1VwRG93bi5tYXRjaGVzKCdpbnRlbnQuZG93bicsIFtcbiAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgYXJncywgbmV4dCkge1xuICAgICAgc2Vzc2lvbi5kaWFsb2dEYXRhLmFiYyA9IGFyZ3MgfHwge307XG4gICAgICBidWlsZGVyLlByb21wdHMudGV4dChzZXNzaW9uLCAneW91IHdhbnQgdG8gZ28gZG93biEnKTtcbiAgICB9LFxuICAgIGZ1bmN0aW9uIChzZXNzaW9uLCByZXN1bHRzLCBuZXh0KSB7XG4gICAgICBzZXNzaW9uLmRpYWxvZ0RhdGEuYWJjID0gLTE7IC8vIHJlc3VsdHMucmVwb25zZTtcbiAgICAgIG5leHQoKTtcbiAgICB9LFxuICAgIGZ1bmN0aW9uIChzZXNzaW9uLCByZXN1bHRzKSB7XG4gICAgICBzZXNzaW9uLnNlbmQoXCJzdGlsbCBnb2luZyBkb3duP1wiKTtcbiAgICB9XG4gIF1cbiAgKTtcbiAgZGlhbG9nVXBEb3duLm9uRGVmYXVsdChmdW5jdGlvbiAoc2Vzc2lvbikge1xuICAgIGxvZ1F1ZXJ5KHNlc3Npb24sIFwib25EZWZhdWx0XCIpO1xuICAgIHZhciByZXMgPSBnZXRSYW5kb21SZXN1bHQoYVRyYWluRGlhbG9nKSArIGdldFJhbmRvbVJlc3VsdChhVHJhaW5FeGl0SGludCk7XG4gICAgZGlhbG9nbG9nKFwiVHJhaW5NZVwiLCBzZXNzaW9uLCBzZW5kKHJlcykpO1xuICB9KTtcblxuXG4gIGJvdC5kaWFsb2coJy90cmFpbicsIFtcbiAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgYXJncywgbmV4dCkge1xuICAgICAgc2Vzc2lvbi5kaWFsZ29EYXRhLmFiYyA9IGFyZ3MgfHwge307XG4gICAgICBidWlsZGVyLlByb21wdHMudGV4dChzZXNzaW9uLCAnRG8geW91IHdhbnQgdG8gdHJhaW4gbWUnKTtcbiAgICB9LFxuICAgIGZ1bmN0aW9uIChzZXNzaW9uLCByZXN1bHRzLCBuZXh0KSB7XG4gICAgICBzZXNzaW9uLmRpYWxvZ0RhdGEuYWJjID0gcmVzdWx0cy5yZXBvbnNlO1xuICAgIH0sXG4gICAgZnVuY3Rpb24gKHNlc3Npb24sIHJlc3VsdHMpIHtcbiAgICAgIHNlc3Npb24uZW5kRGlhbG9nV2l0aFJlc3VsdCh7IHJlc3BvbnNlOiBzZXNzaW9uLkRpYWxvZ0RhdGEuYWJjIH0pO1xuICAgIH1cbiAgXSk7XG5cblxuICBib3QuZGlhbG9nKCcvJywgZGlhbG9nKTtcblxuICBkaWFsb2cubWF0Y2hlcygnU2hvd01lJywgW1xuICAgIGZ1bmN0aW9uIChzZXNzaW9uLCBhcmdzLCBuZXh0KSB7XG4gICAgICB2YXIgaXNDb21iaW5lZEluZGV4ID0ge307XG4gICAgICB2YXIgb05ld0VudGl0eTtcbiAgICAgIC8vIGV4cGVjdGluZyBlbnRpdHkgQTFcbiAgICAgIGRlYnVnbG9nKFwiU2hvdyBFbnRpdHlcIik7XG4gICAgICBkZWJ1Z2xvZygncmF3OiAnICsgSlNPTi5zdHJpbmdpZnkoYXJncy5lbnRpdGllcyksIHVuZGVmaW5lZCwgMik7XG4gICAgICB2YXIgYTEgPSBidWlsZGVyLkVudGl0eVJlY29nbml6ZXIuZmluZEVudGl0eShhcmdzLmVudGl0aWVzLCAnQTEnKTtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IEFuYWx5emUuYW5hbHl6ZUFsbChhMS5lbnRpdHksXG4gICAgICAgIHRoZU1vZGVsLnJ1bGVzLCB0aGVNb2RlbC50b29scywgZ3dvcmRzKTtcbiAgICAgIGxvZ1F1ZXJ5KHNlc3Npb24sICdTaG93TWUnLCByZXN1bHQpO1xuICAgICAgLy8gdGVzdC5leHBlY3QoMylcbiAgICAgIC8vICB0ZXN0LmRlZXBFcXVhbChyZXN1bHQud2VpZ2h0LCAxMjAsICdjb3JyZWN0IHdlaWdodCcpO1xuICAgICAgaWYgKCFyZXN1bHQgfHwgcmVzdWx0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBuZXh0KCk7XG4gICAgICB9XG4gICAgICAvLyBkZWJ1Z2xvZygncmVzdWx0IDogJyArIEpTT04uc3RyaW5naWZ5KHJlc3VsdCwgdW5kZWZpbmVkLCAyKSk7XG4gICAgICBkZWJ1Z2xvZygnYmVzdCByZXN1bHQgOiAnICsgSlNPTi5zdHJpbmdpZnkocmVzdWx0WzBdIHx8IHt9LCB1bmRlZmluZWQsIDIpKTtcbiAgICAgIGRlYnVnbG9nKCd0b3AgOiAnICsgTWF0Y2guVG9vbE1hdGNoLmR1bXBXZWlnaHRzVG9wKHJlc3VsdCwgeyB0b3A6IDMgfSkpO1xuXG5cbiAgICAgIGlmIChBbmFseXplLmlzQ29tcGxldGUocmVzdWx0WzBdKSkge1xuICAgICAgICBzZXNzaW9uLmRpYWxvZ0RhdGEucmVzdWx0ID0gcmVzdWx0WzBdO1xuICAgICAgICAvLyAgICBzZXNzaW9uLnNlbmQoJ1Nob3dpbmcgZW50aXR5IC4uLicpO1xuICAgICAgICBuZXh0KCk7XG4gICAgICB9IGVsc2UgaWYgKEFuYWx5emUuZ2V0UHJvbXB0KHJlc3VsdFswXSkpIHtcbiAgICAgICAgdmFyIHByb21wdCA9IEFuYWx5emUuZ2V0UHJvbXB0KHJlc3VsdFswXSk7XG4gICAgICAgIHNlc3Npb24uZGlhbG9nRGF0YS5yZXN1bHQgPSByZXN1bHRbMF07XG4gICAgICAgIHNlc3Npb24uZGlhbG9nRGF0YS5wcm9tcHQgPSBwcm9tcHQ7XG4gICAgICAgIGRpYWxvZ2xvZyhcIlNob3dNZVwiLCBzZXNzaW9uLCBzZW5kKFwiTm90IGVub3VnaCBpbmZvcm1hdGlvbiBzdXBwbGllZDogXCIgKyBNYXRjaC5Ub29sTWF0Y2guZHVtcE5pY2UoXG4gICAgICAgICAgc2Vzc2lvbi5kaWFsb2dEYXRhLnJlc3VsdFxuICAgICAgICApKSk7XG4gICAgICAgIGJ1aWxkZXIuUHJvbXB0cy50ZXh0KHNlc3Npb24sIHByb21wdC50ZXh0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBiZXN0ID0gcmVzdWx0Lmxlbmd0aCA/IE1hdGNoLlRvb2xNYXRjaC5kdW1wTmljZShyZXN1bHRbMF0pIDogXCI8bm90aGluZz5cIjtcbiAgICAgICAgZGlhbG9nbG9nKFwiU2hvd01lXCIsIHNlc3Npb24sIHNlbmQoJ0kgZGlkIG5vdCB1bmRlcnN0YW5kIHRoaXMnICsgYmVzdCkpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZnVuY3Rpb24gKHNlc3Npb24sIHJlc3VsdHMsIG5leHQpIHtcbiAgICAgIHZhciByZXN1bHQgPSBzZXNzaW9uLmRpYWxvZ0RhdGEucmVzdWx0O1xuICAgICAgaWYgKCFyZXN1bHQgfHwgcmVzdWx0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBuZXh0KCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZXN1bHRzLnJlc3BvbnNlKSB7XG4gICAgICAgIC8vIHNvbWUgcHJvbXB0aW5nXG4gICAgICAgIEFuYWx5emUuc2V0UHJvbXB0KHNlc3Npb24uZGlhbG9nRGF0YS5yZXN1bHQsIHNlc3Npb24uZGlhbG9nRGF0YS5wcm9tcHQsIHJlc3VsdHMucmVzcG9uc2UpO1xuICAgICAgfVxuICAgICAgaWYgKEFuYWx5emUuaXNDb21wbGV0ZShzZXNzaW9uLmRpYWxvZ0RhdGEucmVzdWx0KSkge1xuICAgICAgICBuZXh0KCk7XG4gICAgICB9IGVsc2UgaWYgKEFuYWx5emUuZ2V0UHJvbXB0KHNlc3Npb24uZGlhbG9nRGF0YS5yZXN1bHQpKSB7XG4gICAgICAgIHZhciBwcm9tcHQgPSBBbmFseXplLmdldFByb21wdChzZXNzaW9uLmRpYWxvZ0RhdGEucmVzdWx0KTtcbiAgICAgICAgc2Vzc2lvbi5kaWFsb2dEYXRhLnByb21wdCA9IHByb21wdDtcbiAgICAgICAgYnVpbGRlci5Qcm9tcHRzLnRleHQoc2Vzc2lvbiwgcHJvbXB0LnRleHQpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZnVuY3Rpb24gKHNlc3Npb24sIHJlc3VsdHMsIG5leHQpIHtcbiAgICAgIHZhciByZXN1bHQgPSBzZXNzaW9uLmRpYWxvZ0RhdGEucmVzdWx0O1xuICAgICAgaWYgKHJlc3VsdHMucmVzcG9uc2UpIHtcbiAgICAgICAgLy8gc29tZSBwcm9tcHRpbmdcbiAgICAgICAgQW5hbHl6ZS5zZXRQcm9tcHQoc2Vzc2lvbi5kaWFsb2dEYXRhLnJlc3VsdCxcbiAgICAgICAgICBzZXNzaW9uLmRpYWxvZ0RhdGEucHJvbXB0LCByZXN1bHRzLnJlc3BvbnNlKTtcbiAgICAgIH1cbiAgICAgIGlmIChBbmFseXplLmlzQ29tcGxldGUoc2Vzc2lvbi5kaWFsb2dEYXRhLnJlc3VsdCkpIHtcbiAgICAgICAgY29uc3QgZXhlYyA9IEV4ZWNTZXJ2ZXIuZXhlY1Rvb2woc2Vzc2lvbi5kaWFsb2dEYXRhLnJlc3VsdCBhcyBJTWF0Y2guSVRvb2xNYXRjaCwgdGhlTW9kZWwucmVjb3Jkcyk7XG5cbiAgICAgICAgdmFyIHJlcGx5ID0gbmV3IGJ1aWxkZXIuTWVzc2FnZShzZXNzaW9uKVxuICAgICAgICAgIC50ZXh0KGV4ZWMudGV4dClcbiAgICAgICAgICAuYWRkRW50aXR5KGV4ZWMuYWN0aW9uKTtcbiAgICAgICAgLy8gLmFkZEF0dGFjaG1lbnQoeyBmYWxsYmFja1RleHQ6IFwiSSBkb24ndCBrbm93XCIsIGNvbnRlbnRUeXBlOiAnaW1hZ2UvanBlZycsIGNvbnRlbnRVcmw6IFwid3d3LndvbWJhdC5vcmdcIiB9KTtcbiAgICAgICAgZGlhbG9nbG9nKFwiU2hvd01lXCIsIHNlc3Npb24sIHNlbmQocmVwbHkpKTtcblxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHNlc3Npb24uZGlhbG9nRGF0YS5yZXN1bHQpIHtcbiAgICAgICAgICBkaWFsb2dsb2coXCJTaG93TWVcIixcbiAgICAgICAgICAgIHNlc3Npb24sIHNlbmQoXCJOb3QgZW5vdWdoIGluZm9ybWF0aW9uIHN1cHBsaWVkOiBcIiArIE1hdGNoLlRvb2xNYXRjaC5kdW1wTmljZShcbiAgICAgICAgICAgICAgc2Vzc2lvbi5kaWFsb2dEYXRhLnJlc3VsdFxuICAgICAgICAgICAgKSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRpYWxvZ2xvZyhcIlNob3dNZVwiLCBzZXNzaW9uLCBzZW5kKFwiSSBkaWQgbm90IGdldCB3aGF0IHlvdSB3YW50XCIpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gIF0pO1xuXG4gIGRpYWxvZy5tYXRjaGVzKCdXaGF0SXMnLCBbXG4gICAgZnVuY3Rpb24gKHNlc3Npb24sIGFyZ3MsIG5leHQpIHtcbiAgICAgIHZhciBpc0NvbWJpbmVkSW5kZXggPSB7fTtcbiAgICAgIHZhciBvTmV3RW50aXR5O1xuICAgICAgLy8gZXhwZWN0aW5nIGVudGl0eSBBMVxuICAgICAgdmFyIG1lc3NhZ2UgPSBzZXNzaW9uLm1lc3NhZ2UudGV4dDtcbiAgICAgIGRlYnVnbG9nKFwiV2hhdElzIEVudGl0aWVzXCIpO1xuICAgICAgZGVidWdsb2coJ3JhdzogJyArIEpTT04uc3RyaW5naWZ5KGFyZ3MuZW50aXRpZXMpLCB1bmRlZmluZWQsIDIpO1xuICAgICAgdmFyIGNhdGVnb3J5RW50aXR5ID0gYnVpbGRlci5FbnRpdHlSZWNvZ25pemVyLmZpbmRFbnRpdHkoYXJncy5lbnRpdGllcywgJ2NhdGVnb3J5Jyk7XG4gICAgICB2YXIgY2F0ZWdvcnkgPSBjYXRlZ29yeUVudGl0eS5lbnRpdHk7XG4gICAgICB2YXIgYTEgPSBidWlsZGVyLkVudGl0eVJlY29nbml6ZXIuZmluZEVudGl0eShhcmdzLmVudGl0aWVzLCAnQTEnKTtcbiAgICAgIHZhciBjYXRzID0gW107XG4gICAgICB0cnkge1xuICAgICAgICBjYXRzID0gV2hhdElzLmFuYWx5emVDYXRlZ29yeU11bHQyKGNhdGVnb3J5LCB0aGVNb2RlbC5ydWxlcywgbWVzc2FnZSk7XG4gICAgICAgIGRlYnVnbG9nKFwiaGVyZSBjYXRzXCIgKyBjYXRzLmpvaW4oXCIsXCIpKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKGUpIHtcbiAgICAgICAgICBkZWJ1Z2xvZyhcImhlcmUgZXhjZXB0aW9uXCIgKyBlKTtcbiAgICAgICAgICBkaWFsb2dsb2coXCJXaGF0SXNcIiwgc2Vzc2lvbiwgc2VuZCgnSSBkb25cXCd0IGtub3cgYW55dGhpbmcgYWJvdXQgXCInICsgY2F0ZWdvcnkgK1xuICAgICAgICAgICAgKGUgPyAnKCcgKyBlLnRvU3RyaW5nKCkgKyAnKScgOiBcIlwiKSkpO1xuICAgICAgICAgIC8vIG5leHQoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIGNhdCA9IHVuZGVmaW5lZDtcbiAgICAgIC8vIHdlIGhhdmUgc29tZSBjYXRzLCAob3IgYXQgbGVhc3Qgb25lKVxuICAgICAgaWYgKGNhdHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIGNhdCA9IGNhdHNbMF07XG4gICAgICAgIGlmICghY2F0KSB7XG4gICAgICAgICAgc2Vzc2lvbi5zZW5kKCdJIGRvblxcJ3Qga25vdyBhbnl0aGluZyBhYm91dCBcIicgKyBjYXRlZ29yeSArICdcIicpO1xuICAgICAgICAgIC8vIG5leHQoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChjYXRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBkZWJ1Z2xvZygnY2F0ZWdvcnkgaWRlbnRpZmllZDonICsgY2F0KTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gV2hhdElzLnJlc29sdmVDYXRlZ29yeShjYXQsIGExLmVudGl0eSxcbiAgICAgICAgICB0aGVNb2RlbC5ydWxlcywgdGhlTW9kZWwucmVjb3Jkcyk7XG4gICAgICAgIGRlYnVnbG9nKCd3aGF0aXMgcmVzdWx0OicgKyBKU09OLnN0cmluZ2lmeShyZXN1bHQpKTtcbiAgICAgICAgbG9nUXVlcnlXaGF0SXMoc2Vzc2lvbiwgJ1doYXRJcycsIHJlc3VsdCk7XG4gICAgICAgIHZhciBpbmRpcyA9IFdoYXRJcy5pc0luZGlzY3JpbWluYXRlUmVzdWx0KHJlc3VsdCk7XG4gICAgICAgIGlmIChpbmRpcykge1xuICAgICAgICAgIHNlc3Npb24uc2VuZChpbmRpcyk7XG4gICAgICAgICAgLy8gbmV4dCgpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXJlc3VsdCB8fCByZXN1bHQubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgZGlhbG9nbG9nKFwiV2hhdElzXCIsIHNlc3Npb24sIHNlbmQoJ0kgZG9uXFwndCBrbm93IGFueXRoaW5nIGFib3V0IFwiJyArIGNhdCArIFwiIChcIiArIGNhdGVnb3J5ICsgJylcXFwiIGluIHJlbGF0aW9uIHRvIFwiJyArIGExLmVudGl0eSArICdcIicpKTtcbiAgICAgICAgICAvLyBuZXh0KCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGRlYnVnbG9nKCdyZXN1bHQgOiAnICsgSlNPTi5zdHJpbmdpZnkocmVzdWx0LCB1bmRlZmluZWQsIDIpKTtcbiAgICAgICAgICBkZWJ1Z2xvZygnYmVzdCByZXN1bHQgOiAnICsgSlNPTi5zdHJpbmdpZnkocmVzdWx0WzBdIHx8IHt9LCB1bmRlZmluZWQsIDIpKTtcbiAgICAgICAgICBkZWJ1Z2xvZygndG9wIDogJyArIFdoYXRJcy5kdW1wV2VpZ2h0c1RvcChyZXN1bHQsIHsgdG9wOiAzIH0pKTtcbiAgICAgICAgICAvLyBUT0RPIGNsZWFuc2VkIHNlbnRlbmNlXG4gICAgICAgICAgZGlhbG9nbG9nKFwiV2hhdElzXCIsIHNlc3Npb24sIHNlbmQoJ1RoZSAnICsgY2F0ZWdvcnkgKyAnIG9mICcgKyBhMS5lbnRpdHkgKyAnIGlzICcgKyByZXN1bHRbMF0ucmVzdWx0ICsgXCJcXG5cIikpOyAvLyAgKyBKU09OLnN0cmluZ2lmeShyZXN1bHRbMF0pKTtcbiAgICAgICAgfVxuICAgICAgfSAvLyBzaW5nbGUgY2F0ZWdvcnlcbiAgICAgIGVsc2Uge1xuICAgICAgICBkZWJ1Z2xvZygnY2F0ZWdvcmllcyBpZGVudGlmaWVkOicgKyBjYXRzLmpvaW4oXCIsXCIpKTtcbiAgICAgICAgY29uc3QgcmVzdWx0QXJyID0gV2hhdElzLnJlc29sdmVDYXRlZ29yaWVzKGNhdHMsIGExLmVudGl0eSxcbiAgICAgICAgICB0aGVNb2RlbCk7XG4gICAgICAgIGRlYnVnbG9nKCd3aGF0aXMgcmVzdWx0OicgKyBKU09OLnN0cmluZ2lmeShyZXN1bHRBcnIpKTtcbiAgICAgICAgbG9nUXVlcnlXaGF0SXNUdXBlbChzZXNzaW9uLCAnV2hhdElzJywgcmVzdWx0QXJyKTtcbiAgICAgICAgdmFyIGluZGlzID0gV2hhdElzLmlzSW5kaXNjcmltaW5hdGVSZXN1bHRUdXBlbChyZXN1bHRBcnIpO1xuICAgICAgICBpZiAoaW5kaXMpIHtcbiAgICAgICAgICBzZXNzaW9uLnNlbmQoaW5kaXMpO1xuICAgICAgICAgIC8vIG5leHQoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFyZXN1bHRBcnIgfHwgcmVzdWx0QXJyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIGRpYWxvZ2xvZyhcIldoYXRJc1wiLCBzZXNzaW9uLCBzZW5kKCdJIGRvblxcJ3Qga25vdyBhbnl0aGluZyBhYm91dCBcIicgKyBjYXRlZ29yeSArIFwiXFxcIiAoXCIgKyBVdGlscy5saXN0VG9RdW90ZWRDb21tYUFuZChjYXRzKSArICcpXFxcIiBpbiByZWxhdGlvbiB0byBcIicgKyBhMS5lbnRpdHkgKyAnXCInKSk7XG4gICAgICAgICAgLy8gbmV4dCgpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBkZWJ1Z2xvZygncmVzdWx0IDogJyArIEpTT04uc3RyaW5naWZ5KHJlc3VsdCwgdW5kZWZpbmVkLCAyKSk7XG4gICAgICAgICAgZGVidWdsb2coJ2Jlc3QgcmVzdWx0IDogJyArIEpTT04uc3RyaW5naWZ5KHJlc3VsdEFyclswXSB8fCB7fSwgdW5kZWZpbmVkLCAyKSk7XG4gICAgICAgICAgLy9kZWJ1Z2xvZygndG9wIDogJyArIFdoYXRJcy5kdW1wV2VpZ2h0c1RvcChyZXN1bHRBcnIsIHsgdG9wOiAzIH0pKTtcbiAgICAgICAgICAvLyBUT0RPIGNsZWFuc2VkIHNlbnRlbmNlXG4gICAgICAgICAgZGlhbG9nbG9nKFwiV2hhdElzXCIsIHNlc3Npb24sIHNlbmQoJ1RoZSAnICsgVXRpbHMubGlzdFRvUXVvdGVkQ29tbWFBbmQoY2F0cykgKyAnIG9mICcgKyBhMS5lbnRpdHkgKyAnIGFyZSAnICsgVXRpbHMubGlzdFRvUXVvdGVkQ29tbWFBbmQocmVzdWx0QXJyWzBdLnJlc3VsdCkgKyAnXFxuJykpOyAvLyAgKyBKU09OLnN0cmluZ2lmeShyZXN1bHRbMF0pKTtcbiAgICAgICAgfVxuICAgICAgfSAvL2VuZGlmIG11bHRpcGxlIGNhdGVnb3JpZXNcbiAgICB9XG4gIF0pO1xuXG5cbiAgZGlhbG9nLm1hdGNoZXMoJ0xpc3RBbGwnLCBbXG4gICAgZnVuY3Rpb24gKHNlc3Npb24sIGFyZ3MsIG5leHQpIHtcbiAgICAgIHZhciBpc0NvbWJpbmVkSW5kZXggPSB7fTtcbiAgICAgIHZhciBvTmV3RW50aXR5O1xuICAgICAgLy8gZXhwZWN0aW5nIGVudGl0eSBBMVxuICAgICAgdmFyIG1lc3NhZ2UgPSBzZXNzaW9uLm1lc3NhZ2UudGV4dDtcbiAgICAgIGRlYnVnbG9nKFwiSW50ZW50IDogTGlzdEFsbFwiKTtcbiAgICAgIGRlYnVnbG9nKCdyYXc6ICcgKyBKU09OLnN0cmluZ2lmeShhcmdzLmVudGl0aWVzKSwgdW5kZWZpbmVkLCAyKTtcbiAgICAgIHZhciBjYXRlZ29yeUVudGl0eSA9IGJ1aWxkZXIuRW50aXR5UmVjb2duaXplci5maW5kRW50aXR5KGFyZ3MuZW50aXRpZXMsICdjYXRlZ29yaWVzJyk7XG4gICAgICB2YXIgY2F0ZWdvcnkgPSBjYXRlZ29yeUVudGl0eS5lbnRpdHk7XG4gICAgICB2YXIgYTEgPSBidWlsZGVyLkVudGl0eVJlY29nbml6ZXIuZmluZEVudGl0eShhcmdzLmVudGl0aWVzLCAnaW5zdGgnKTtcbiAgICAgIGlmIChjYXRlZ29yeSA9PT0gXCJjYXRlZ29yaWVzXCIpIHtcbiAgICAgICAgLy8gZG8gd2UgaGF2ZSBhIGZpbHRlciA/XG4gICAgICAgIHZhciBkb21haW4gPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChhMSAmJiBhMS5lbnRpdHkpIHtcbiAgICAgICAgICBkb21haW4gPSBMaXN0QWxsLmluZmVyRG9tYWluKHRoZU1vZGVsLCBhMS5lbnRpdHkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZG9tYWluKSB7XG4gICAgICAgICAgdmFyIHJlcyA9IHJlc3RyaWN0TG9nZ2VkT24oc2Vzc2lvbiwgdGhlTW9kZWwuY2F0ZWdvcnkpLmpvaW4oXCI7XFxuXCIpO1xuICAgICAgICAgIGlmIChhMSAmJiBhMS5lbnRpdHkpIHtcbiAgICAgICAgICAgIGRpYWxvZ2xvZyhcIkxpc3RBbGxcIiwgc2Vzc2lvbiwgc2VuZChcIkkgZGlkIG5vdCBpbmZlciBhIGRvbWFpbiByZXN0cmljdGlvbiBmcm9tIFxcXCJcIiArIGExLmVudGl0eSArIFwiXFxcIiwgYWxsIG15IGNhdGVnb3JpZXMgYXJlIC4uLlxcblwiICsgcmVzKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRpYWxvZ2xvZyhcIkxpc3RBbGxcIiwgc2Vzc2lvbiwgc2VuZChcIm15IGNhdGVnb3JpZXMgYXJlIC4uLlxcblwiICsgcmVzKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgYVJlcyA9IE1vZGVsLmdldENhdGVnb3JpZXNGb3JEb21haW4odGhlTW9kZWwsIGRvbWFpbik7XG4gICAgICAgICAgdmFyIHJlcyA9IHJlc3RyaWN0TG9nZ2VkT24oc2Vzc2lvbiwgYVJlcykuam9pbihcIjtcXG5cIik7XG4gICAgICAgICAgZGlhbG9nbG9nKFwiTGlzdEFsbFwiLCBzZXNzaW9uLCBzZW5kKFwibXkgY2F0ZWdvcmllcyBpbiBkb21haW4gXFxcIlwiICsgZG9tYWluICsgXCJcXFwiIGFyZSAuLi5cXG5cIiArIHJlcykpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGNhdGVnb3J5ID09PSBcImRvbWFpbnNcIikge1xuICAgICAgICB2YXIgcmVzID0gcmVzdHJpY3RMb2dnZWRPbihzZXNzaW9uLCB0aGVNb2RlbC5kb21haW5zKS5qb2luKFwiO1xcblwiKTtcbiAgICAgICAgZGlhbG9nbG9nKFwiTGlzdEFsbFwiLCBzZXNzaW9uLCBzZW5kKFwibXkgZG9tYWlucyBhcmUgLi4uXFxuXCIgKyByZXMpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGNhdGVnb3J5ID09PSBcInRvb2xzXCIpIHtcbiAgICAgICAgdmFyIHJlcyA9IHJlc3RyaWN0TG9nZ2VkT24oc2Vzc2lvbiwgdGhlTW9kZWwudG9vbHMpLm1hcChmdW5jdGlvbiAob1Rvb2wpIHtcbiAgICAgICAgICByZXR1cm4gb1Rvb2wubmFtZTtcbiAgICAgICAgfSkuam9pbihcIjtcXG5cIik7XG4gICAgICAgIGRpYWxvZ2xvZyhcIkxpc3RBbGxcIiwgc2Vzc2lvbiwgc2VuZChcIm15IHRvb2xzIGFyZSAuLi5cXG5cIiArIHJlcykpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgY2F0cyA9IFtdO1xuICAgICAgdHJ5IHtcbiAgICAgICAgY2F0cyA9IFdoYXRJcy5hbmFseXplQ2F0ZWdvcnlNdWx0MihjYXRlZ29yeSwgdGhlTW9kZWwucnVsZXMsIG1lc3NhZ2UpO1xuICAgICAgICBkZWJ1Z2xvZyhcImhlcmUgY2F0c1wiICsgY2F0cy5qb2luKFwiLFwiKSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChlKSB7XG4gICAgICAgICAgZGVidWdsb2coXCJoZXJlIGV4Y2VwdGlvblwiICsgZSk7XG4gICAgICAgICAgZGlhbG9nbG9nKFwiV2hhdElzXCIsIHNlc3Npb24sIHNlbmQoJ0kgZG9uXFwndCBrbm93IGFueXRoaW5nIGFib3V0IFwiJyArIGNhdGVnb3J5ICsgJ1wiKCcgKyBlLnRvU3RyaW5nKCkgKyAnKScpKTtcbiAgICAgICAgICAvLyBuZXh0KCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIWNhdHMgfHwgKGNhdHMubGVuZ3RoID09PSAwKSkge1xuICAgICAgICBkaWFsb2dsb2coXCJMaXN0QWxsXCIsIHNlc3Npb24sIHNlbmQoJ0kgZG9uXFwndCBrbm93IGFueXRoaW5nIGFib3V0IFwiJyArIGNhdGVnb3J5ICsgJ1wiJykpO1xuICAgICAgICAvLyBuZXh0KCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBjYXQgPSBcIlwiO1xuICAgICAgaWYgKGNhdHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIGNhdCA9IGNhdHNbMF07XG4gICAgICB9XG4gICAgICBpZiAoY2F0cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgZGVidWdsb2coJ2NhdGVnb3J5IGlkZW50aWZpZWQ6JyArIGNhdCk7XG4gICAgICAgIGlmIChhMSAmJiBhMS5lbnRpdHkpIHtcbiAgICAgICAgICBkZWJ1Z2xvZygnZ290IGZpbHRlcjonICsgYTEuZW50aXR5KTtcbiAgICAgICAgICB2YXIgY2F0ZWdvcnlTZXQgPSBNb2RlbC5nZXRBbGxSZWNvcmRDYXRlZ29yaWVzRm9yVGFyZ2V0Q2F0ZWdvcnkodGhlTW9kZWwsIGNhdCwgdHJ1ZSk7XG4gICAgICAgICAgdmFyIHJlc3VsdDEgPSBMaXN0QWxsLmxpc3RBbGxXaXRoQ29udGV4dChjYXQsIGExLmVudGl0eSxcbiAgICAgICAgICAgIHRoZU1vZGVsLnJ1bGVzLCB0aGVNb2RlbC5yZWNvcmRzLCBjYXRlZ29yeVNldCk7XG4gICAgICAgICAgLy8gVE9ETyBjbGFzc2lmeWluZyB0aGUgc3RyaW5nIHR3aWNlIGlzIGEgdGVycmlibGUgd2FzdGVcbiAgICAgICAgICBpZiAoIXJlc3VsdDEubGVuZ3RoKSB7XG4gICAgICAgICAgICBkZWJ1Z2xvZygnZ29pbmcgZm9yIGhhdmluZycpO1xuICAgICAgICAgICAgdmFyIGNhdGVnb3J5U2V0RnVsbCA9IE1vZGVsLmdldEFsbFJlY29yZENhdGVnb3JpZXNGb3JUYXJnZXRDYXRlZ29yeSh0aGVNb2RlbCwgY2F0LCBmYWxzZSk7XG4gICAgICAgICAgICByZXN1bHQxID0gTGlzdEFsbC5saXN0QWxsSGF2aW5nQ29udGV4dChjYXQsIGExLmVudGl0eSwgdGhlTW9kZWwucnVsZXMsXG4gICAgICAgICAgICAgIHRoZU1vZGVsLnJlY29yZHMsIGNhdGVnb3J5U2V0RnVsbCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGRlYnVnbG9nKCdsaXN0YWxsIHJlc3VsdDonICsgSlNPTi5zdHJpbmdpZnkocmVzdWx0MSkpO1xuICAgICAgICAgIHZhciBqb2lucmVzdWx0cyA9IHJlc3RyaWN0TG9nZ2VkT24oc2Vzc2lvbiwgTGlzdEFsbC5qb2luUmVzdWx0cyhyZXN1bHQxKSk7XG4gICAgICAgICAgbG9nUXVlcnlXaGF0SXMoc2Vzc2lvbiwgJ0xpc3RBbGwnLCByZXN1bHQxKTtcbiAgICAgICAgICBpZiAoam9pbnJlc3VsdHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBkaWFsb2dsb2coXCJMaXN0QWxsXCIsIHNlc3Npb24sIHNlbmQoXCJ0aGUgXCIgKyBjYXRlZ29yeSArIFwiIGZvciBcIiArIGExLmVudGl0eSArIFwiIGFyZSAuLi5cXG5cIiArIGpvaW5yZXN1bHRzLmpvaW4oXCI7XFxuXCIpKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRpYWxvZ2xvZyhcIkxpc3RBbGxcIiwgc2Vzc2lvbiwgc2VuZChcImkgZGlkIG5vdCBmaW5kIGFueSBcIiArIGNhdGVnb3J5ICsgXCIgZm9yIFwiICsgYTEuZW50aXR5ICsgXCIuXFxuXCIgKyBqb2lucmVzdWx0cy5qb2luKFwiO1xcblwiKSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gbm8gZW50aXR5LCBlLmcuIGxpc3QgYWxsIGNvdW50cmllc1xuICAgICAgICAgIC8vXG4gICAgICAgICAgdmFyIGNhdGVnb3J5U2V0RnVsbCA9IE1vZGVsLmdldEFsbFJlY29yZENhdGVnb3JpZXNGb3JUYXJnZXRDYXRlZ29yeSh0aGVNb2RlbCwgY2F0LCBmYWxzZSk7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IExpc3RBbGwubGlzdEFsbEhhdmluZ0NvbnRleHQoY2F0LCBjYXQsIHRoZU1vZGVsLnJ1bGVzLCB0aGVNb2RlbC5yZWNvcmRzLCBjYXRlZ29yeVNldEZ1bGwpO1xuICAgICAgICAgIGxvZ1F1ZXJ5V2hhdElzKHNlc3Npb24sICdMaXN0QWxsJywgcmVzdWx0KTtcbiAgICAgICAgICBpZiAocmVzdWx0Lmxlbmd0aCkge1xuICAgICAgICAgICAgZGVidWdsb2coJ2xpc3RhbGwgcmVzdWx0OicgKyBKU09OLnN0cmluZ2lmeShyZXN1bHQpKTtcbiAgICAgICAgICAgIHZhciBqb2lucmVzdWx0cyA9IFtdO1xuICAgICAgICAgICAgZGVidWdsb2coXCJoZXJlIGlzIGNhdD5cIiArIGNhdCk7XG4gICAgICAgICAgICBpZiAoY2F0ICE9PSBcImV4YW1wbGUgcXVlc3Rpb25cIikge1xuICAgICAgICAgICAgICBqb2lucmVzdWx0cyA9IHJlc3RyaWN0TG9nZ2VkT24oc2Vzc2lvbiwgTGlzdEFsbC5qb2luUmVzdWx0cyhyZXN1bHQpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGpvaW5yZXN1bHRzID0gTGlzdEFsbC5qb2luUmVzdWx0cyhyZXN1bHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHJlc3BvbnNlID0gXCJ0aGUgXCIgKyBjYXRlZ29yeSArIFwiIGFyZSAuLi5cXG5cIiArIGpvaW5yZXN1bHRzLmpvaW4oXCI7XFxuXCIpO1xuICAgICAgICAgICAgZGlhbG9nbG9nKFwiTGlzdEFsbFwiLCBzZXNzaW9uLCBzZW5kKHJlc3BvbnNlKSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciByZXNwb25zZSA9IFwiRm91bmQgbm8gZGF0YSBoYXZpbmcgXFxcIlwiICsgY2F0ICsgXCJcXFwiXCJcbiAgICAgICAgICAgIGRpYWxvZ2xvZyhcIkxpc3RBbGxcIiwgc2Vzc2lvbiwgc2VuZChyZXNwb25zZSkpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gbXVsdGlwbGUgY2F0ZWdvcmllc1xuICAgICAgICBkZWJ1Z2xvZygnY2F0ZWdvcmllcyBpZGVudGlmaWVkOicgKyBjYXRzLmpvaW4oXCIsXCIpKTtcbiAgICAgICAgaWYgKGExICYmIGExLmVudGl0eSkge1xuICAgICAgICAgIGRlYnVnbG9nKCdnb3QgZmlsdGVyOicgKyBhMS5lbnRpdHkpO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgY2F0ZWdvcnlTZXQgPSBNb2RlbC5nZXRBbGxSZWNvcmRDYXRlZ29yaWVzRm9yVGFyZ2V0Q2F0ZWdvcmllcyh0aGVNb2RlbCwgY2F0cywgdHJ1ZSk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgZGVidWdsb2coXCJoZXJlIGV4Y2VwdGlvblwiICsgZSk7XG4gICAgICAgICAgICBkaWFsb2dsb2coXCJXaGF0SXNcIiwgc2Vzc2lvbiwgc2VuZCgnSSBjYW5ub3QgY29tYmluZSBcIicgKyBjYXRlZ29yeSArICcoJyArIGUudG9TdHJpbmcoKSArICcpJykpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgcmVzdWx0MVQgPSBMaXN0QWxsLmxpc3RBbGxUdXBlbFdpdGhDb250ZXh0KGNhdHMsIGExLmVudGl0eSxcbiAgICAgICAgICAgIHRoZU1vZGVsLnJ1bGVzLCB0aGVNb2RlbC5yZWNvcmRzLCBjYXRlZ29yeVNldCk7XG4gICAgICAgICAgLy8gVE9ETyBjbGFzc2lmeWluZyB0aGUgc3RyaW5nIHR3aWNlIGlzIGEgdGVycmlibGUgd2FzdGVcbiAgICAgICAgICBpZiAoIXJlc3VsdDFULmxlbmd0aCkge1xuICAgICAgICAgICAgZGVidWdsb2coJ2dvaW5nIGZvciBoYXZpbmcnKTtcbiAgICAgICAgICAgIHZhciBjYXRlZ29yeVNldEZ1bGwgPSBNb2RlbC5nZXRBbGxSZWNvcmRDYXRlZ29yaWVzRm9yVGFyZ2V0Q2F0ZWdvcmllcyh0aGVNb2RlbCwgY2F0cywgZmFsc2UpO1xuICAgICAgICAgICAgcmVzdWx0MVQgPSBMaXN0QWxsLmxpc3RBbGxUdXBlbEhhdmluZ0NvbnRleHQoY2F0cywgYTEuZW50aXR5LCB0aGVNb2RlbC5ydWxlcyxcbiAgICAgICAgICAgICAgdGhlTW9kZWwucmVjb3JkcywgY2F0ZWdvcnlTZXRGdWxsKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZGVidWdsb2coJ2xpc3RhbGwgcmVzdWx0OicgKyBKU09OLnN0cmluZ2lmeShyZXN1bHQxVCkpO1xuICAgICAgICAgIHZhciBqb2lucmVzdWx0cyA9IHJlc3RyaWN0TG9nZ2VkT24oc2Vzc2lvbiwgTGlzdEFsbC5qb2luUmVzdWx0c1R1cGVsKHJlc3VsdDFUKSk7XG4gICAgICAgICAgbG9nUXVlcnlXaGF0SXNUdXBlbChzZXNzaW9uLCAnTGlzdEFsbCcsIHJlc3VsdDFUKTtcbiAgICAgICAgICBpZiAoam9pbnJlc3VsdHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBkaWFsb2dsb2coXCJMaXN0QWxsXCIsIHNlc3Npb24sIHNlbmQoXCJ0aGUgXCIgKyBjYXRlZ29yeSArIFwiIGZvciBcIiArIGExLmVudGl0eSArIFwiIGFyZSAuLi5cXG5cIiArIGpvaW5yZXN1bHRzLmpvaW4oXCI7XFxuXCIpKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRpYWxvZ2xvZyhcIkxpc3RBbGxcIiwgc2Vzc2lvbiwgc2VuZChcImkgZGlkIG5vdCBmaW5kIGFueSBcIiArIGNhdGVnb3J5ICsgXCIgZm9yIFwiICsgYTEuZW50aXR5ICsgXCIuXFxuXCIgKyBqb2lucmVzdWx0cy5qb2luKFwiO1xcblwiKSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gbm8gZW50aXR5LCBlLmcuIGxpc3QgYWxsIGNvdW50cmllc1xuICAgICAgICAgIC8vXG4gICAgICAgICAgdmFyIGNhdGVnb3J5U2V0RnVsbCA9IHt9IGFzIHsgW2tleTogc3RyaW5nXTogYm9vbGVhbiB9O1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjYXRlZ29yeVNldEZ1bGwgPSBNb2RlbC5nZXRBbGxSZWNvcmRDYXRlZ29yaWVzRm9yVGFyZ2V0Q2F0ZWdvcmllcyh0aGVNb2RlbCwgY2F0cywgZmFsc2UpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGRlYnVnbG9nKFwiaGVyZSBleGNlcHRpb25cIiArIGUpO1xuICAgICAgICAgICAgZGlhbG9nbG9nKFwiV2hhdElzXCIsIHNlc3Npb24sIHNlbmQoJ0kgY2Fubm90IGNvbWJpbmUgXCInICsgY2F0ZWdvcnkgKyAnKCcgKyBlLnRvU3RyaW5nKCkgKyAnKScpKTtcbiAgICAgICAgICAgIC8vIG5leHQoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIHJlc3VsdFQgPSBMaXN0QWxsLmxpc3RBbGxUdXBlbEhhdmluZ0NvbnRleHQoY2F0cywgXCJcXFwiXCIgKyBjYXRzLmpvaW4oXCJcXFwiIFxcXCJcIikgKyBcIlxcXCJcIiwgdGhlTW9kZWwucnVsZXMsIHRoZU1vZGVsLnJlY29yZHMsIGNhdGVnb3J5U2V0RnVsbCk7XG4gICAgICAgICAgbG9nUXVlcnlXaGF0SXNUdXBlbChzZXNzaW9uLCAnTGlzdEFsbCcsIHJlc3VsdFQpO1xuICAgICAgICAgIGlmIChyZXN1bHRULmxlbmd0aCkge1xuICAgICAgICAgICAgZGVidWdsb2coJ2xpc3RhbGwgcmVzdWx0OicgKyBKU09OLnN0cmluZ2lmeShyZXN1bHRUKSk7XG4gICAgICAgICAgICB2YXIgam9pbnJlc3VsdHMgPSBbXTtcbiAgICAgICAgICAgIGRlYnVnbG9nKFwiaGVyZSBpcyBjYXQ+XCIgKyBjYXRzLmpvaW4oXCIsIFwiKSk7XG4gICAgICAgICAgICBpZiAoY2F0ICE9PSBcImV4YW1wbGUgcXVlc3Rpb25cIikge1xuICAgICAgICAgICAgICBqb2lucmVzdWx0cyA9IHJlc3RyaWN0TG9nZ2VkT24oc2Vzc2lvbiwgTGlzdEFsbC5qb2luUmVzdWx0c1R1cGVsKHJlc3VsdFQpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGpvaW5yZXN1bHRzID0gTGlzdEFsbC5qb2luUmVzdWx0c1R1cGVsKHJlc3VsdFQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHJlc3BvbnNlID0gXCJ0aGUgXCIgKyBjYXRlZ29yeSArIFwiIGFyZSAuLi5cXG5cIiArIGpvaW5yZXN1bHRzLmpvaW4oXCI7XFxuXCIpO1xuICAgICAgICAgICAgZGlhbG9nbG9nKFwiTGlzdEFsbFwiLCBzZXNzaW9uLCBzZW5kKHJlc3BvbnNlKSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciByZXNwb25zZSA9IFwiRm91bmQgbm8gZGF0YSBoYXZpbmcgXFxcIlwiICsgY2F0ICsgXCJcXFwiXCJcbiAgICAgICAgICAgIGRpYWxvZ2xvZyhcIkxpc3RBbGxcIiwgc2Vzc2lvbiwgc2VuZChyZXNwb25zZSkpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgXSk7XG5cbiAgZGlhbG9nLm1hdGNoZXMoJ0Rlc2NyaWJlJywgW1xuICAgIGZ1bmN0aW9uIChzZXNzaW9uLCBhcmdzLCBuZXh0KSB7XG4gICAgICB2YXIgaXNDb21iaW5lZEluZGV4ID0ge307XG4gICAgICB2YXIgb05ld0VudGl0eTtcbiAgICAgIC8vIGV4cGVjdGluZyBlbnRpdHkgQTFcbiAgICAgIHZhciBtZXNzYWdlID0gc2Vzc2lvbi5tZXNzYWdlLnRleHQ7XG4gICAgICBkZWJ1Z2xvZyhcIkludGVudCA6IERlc2NyaWJlXCIpO1xuICAgICAgZGVidWdsb2coJ3JhdzogJyArIEpTT04uc3RyaW5naWZ5KGFyZ3MuZW50aXRpZXMpLCB1bmRlZmluZWQsIDIpO1xuICAgICAgdmFyIGZhY3RFbnRpdHkgPSBidWlsZGVyLkVudGl0eVJlY29nbml6ZXIuZmluZEVudGl0eShhcmdzLmVudGl0aWVzLCAnQTEnKTtcbiAgICAgIHZhciBmYWN0T3JDYXQgPSBmYWN0RW50aXR5ICYmIGZhY3RFbnRpdHkuZW50aXR5O1xuICAgICAgdmFyIGRvbWFpbkVudGl0eSA9IGJ1aWxkZXIuRW50aXR5UmVjb2duaXplci5maW5kRW50aXR5KGFyZ3MuZW50aXRpZXMsICdEJyk7XG4gICAgICB2YXIgZG9tYWluUyA9IGRvbWFpbkVudGl0eSAmJiBkb21haW5FbnRpdHkuZW50aXR5O1xuICAgICAgdmFyIGZpbHRlckRvbWFpbiA9IHVuZGVmaW5lZDtcbiAgICAgIGlmIChkb21haW5TKSB7XG4gICAgICAgIGZpbHRlckRvbWFpbiA9IExpc3RBbGwuaW5mZXJEb21haW4odGhlTW9kZWwsIGRvbWFpblMpO1xuICAgICAgICBkZWJ1Z2xvZyhcImdvdCBkb21haW5cIiArIGZpbHRlckRvbWFpbik7XG4gICAgICAgIGlmICghZmlsdGVyRG9tYWluKSB7XG4gICAgICAgICAgZGlhbG9nbG9nKFwiRGVzY3JpYmVcIiwgc2Vzc2lvbiwgc2VuZChcIkkgZGlkIG5vdCBpbmZlciBhIGRvbWFpbiByZXN0cmljdGlvbiBmcm9tIFxcXCJcIiArIGRvbWFpblMgKyBcIlxcXCIuIFNwZWNpZnkgYW4gZXhpc3RpbmcgZG9tYWluLiAoTGlzdCBhbGwgZG9tYWlucykgdG8gZ2V0IGV4YWN0IG5hbWVzLlxcblwiKSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGRlYnVnbG9nKFwiZmFjdE9yQ2F0IGlzXCIgKyBmYWN0T3JDYXQpO1xuICAgICAgaWYgKG1ldGF3b3Jkc0Rlc2NyaXB0aW9uc1tmYWN0T3JDYXQudG9Mb3dlckNhc2UoKV0pIHtcbiAgICAgICAgLy8gZG8gd2UgaGF2ZSBhIGZpbHRlciA/XG4gICAgICAgIHZhciBwcmVmaXggPSBcIlwiO1xuICAgICAgICBpZiAoZmlsdGVyRG9tYWluKSB7XG4gICAgICAgICAgcHJlZml4ID0gJ1wiaW4gZG9tYWluIFwiJyArIGZpbHRlckRvbWFpbiArICdcIiBtYWtlIG5vIHNlbnNlIHdoZW4gbWF0Y2hpbmcgYSBtZXRhd29yZC5cXG4nO1xuICAgICAgICB9XG4gICAgICAgIGRlYnVnbG9nKFwic2hvd2luZyBtZXRhIHJlc3VsdFwiKTtcbiAgICAgICAgZGlhbG9nbG9nKFwiRGVzY3JpYmVcIiwgc2Vzc2lvbiwgc2VuZChwcmVmaXggKyAnXCInICsgZmFjdE9yQ2F0ICsgJ1wiIGlzICcgKyBtZXRhd29yZHNEZXNjcmlwdGlvbnNbZmFjdE9yQ2F0LnRvTG93ZXJDYXNlKCldICsgXCJcIikpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgY2F0ZWdvcmllcyA9IFtdO1xuICAgICAgaWYgKFdoYXRJcy5zcGxpdEF0Q29tbWFBbmQoZmFjdE9yQ2F0KS5sZW5ndGggPiAxKSB7XG4gICAgICAgIGRpYWxvZ2xvZyhcIkRlc2NyaWJlXCIsIHNlc3Npb24sIHNlbmQoXCJXaG9hLCBpIGNhbiBvbmx5IGV4cGxhaW4gb25lIHRoaW5nIGF0IGEgdGltZSwgbm90IFxcXCJcIiArIGZhY3RPckNhdCArIFwiXFxcIi4gUGxlYXNlIGFzayBvbmUgYXQgYSB0aW1lLlwiKSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgICAgLy8gZ2V0RG9tYWluc0ZvckNhdGVnb3J5XG4gICAgICB9XG5cblxuXG4gICAgICB2YXIgY2F0ZWdvcnkgPSBXaGF0SXMuYW5hbHl6ZUNhdGVnb3J5KGZhY3RPckNhdCwgdGhlTW9kZWwucnVsZXMsIG1lc3NhZ2UpO1xuICAgICAgdmFyIGNhdFJlc3VsdHMgPSBbXTtcbiAgICAgIGlmIChjYXRlZ29yeSkge1xuICAgICAgICAvL1RPRE9cbiAgICAgICAgY2F0UmVzdWx0cyA9IERlc2NyaWJlLmRlc2NyaWJlQ2F0ZWdvcnkoY2F0ZWdvcnksZmlsdGVyRG9tYWluLCB0aGVNb2RlbCxtZXNzYWdlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlc0ZhY3QgPSBEZXNjcmliZS5kZXNjcmliZUZhY3RJbkRvbWFpbihmYWN0T3JDYXQsIGZpbHRlckRvbWFpbix0aGVNb2RlbCk7XG4gICAgICBpZihjYXRSZXN1bHRzKSB7XG4gICAgICB2YXIgcHJlZml4ZWQgPSBjYXRSZXN1bHRzLm1hcChyZXMgPT5cbiAgICAgICAgYCR7RGVzY3JpYmUuc2xvcHB5T3JFeGFjdChjYXRlZ29yeSwgZmFjdE9yQ2F0LCB0aGVNb2RlbCl9ICAke3Jlc31gICk7XG4gICAgICB9XG4gICAgICBpZihjYXRSZXN1bHRzLmxlbmd0aCkge1xuICAgICAgICByZXNGYWN0ID0gcHJlZml4ZWQuam9pbihcIlxcblwiKTsgKyBcIlxcblwiICsgcmVzRmFjdDtcbiAgICAgIH1cbiAgICAgIGRpYWxvZ2xvZyhcIkRlc2NyaWJlXCIsIHNlc3Npb24sIHNlbmQocmVzRmFjdCkpO1xuICAgICAgLypcbiAgICAgICAgICB2YXIgYVJlcyA9IE1vZGVsLmdldENhdGVnb3JpZXNGb3JEb21haW4odGhlTW9kZWwsIGRvbWFpbik7XG4gICAgICAgICAgIHZhciByZXMgPSByZXN0cmljdExvZ2dlZE9uKHNlc3Npb24sIGFSZXMpLmpvaW4oXCI7XFxuXCIpO1xuICAgICAgICAgIGRpYWxvZ2xvZyhcIkxpc3RBbGxcIixzZXNzaW9uLHNlbmQoXCJteSBjYXRlZ29yaWVzIGluIGRvbWFpbiBcXFwiXCIgKyBkb21haW4gKyBcIlxcXCIgYXJlIC4uLlxcblwiICsgcmVzKSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoY2F0ZWdvcnkgPT09IFwiZG9tYWluc1wiKSB7XG4gICAgICAgIHZhciByZXMgPSByZXN0cmljdExvZ2dlZE9uKHNlc3Npb24sIHRoZU1vZGVsLmRvbWFpbnMpLmpvaW4oXCI7XFxuXCIpO1xuICAgICAgICBkaWFsb2dsb2coXCJMaXN0QWxsXCIsc2Vzc2lvbiwgc2VuZChcIm15IGRvbWFpbnMgYXJlIC4uLlxcblwiICsgcmVzKSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChjYXRlZ29yeSA9PT0gXCJ0b29sc1wiKSB7XG4gICAgICAgIHZhciByZXMgPSByZXN0cmljdExvZ2dlZE9uKHNlc3Npb24sIHRoZU1vZGVsLnRvb2xzKS5tYXAoZnVuY3Rpb24gKG9Ub29sKSB7XG4gICAgICAgICAgcmV0dXJuIG9Ub29sLm5hbWU7XG4gICAgICAgIH0pLmpvaW4oXCI7XFxuXCIpO1xuICAgICAgICBkaWFsb2dsb2coXCJMaXN0QWxsXCIsIHNlc3Npb24sc2VuZChcIm15IHRvb2xzIGFyZSAuLi5cXG5cIiArIHJlcykpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAqL1xuXG4gICAgICAvKlxuICAgICAgdmFyIGNhdHMgPSBbXTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgY2F0cyA9IFdoYXRJcy5hbmFseXplQ2F0ZWdvcnlNdWx0MihjYXRlZ29yeSwgdGhlTW9kZWwucnVsZXMsIG1lc3NhZ2UpO1xuICAgICAgICBkZWJ1Z2xvZyhcImhlcmUgY2F0c1wiICsgY2F0cy5qb2luKFwiLFwiKSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgaWYoZSkge1xuICAgICAgICAgICAgZGVidWdsb2coXCJoZXJlIGV4Y2VwdGlvblwiICsgZSk7XG4gICAgICAgICAgICBkaWFsb2dsb2coXCJXaGF0SXNcIixzZXNzaW9uLHNlbmQoJ0kgZG9uXFwndCBrbm93IGFueXRoaW5nIGFib3V0IFwiJyArIGNhdGVnb3J5ICsgJ1wiKCcgKyBlLnRvU3RyaW5nKCkgKyAnKScpKTtcbiAgICAgICAgICAgIC8vIG5leHQoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIWNhdHMgfHwgKGNhdHMubGVuZ3RoID09PSAwKSkge1xuICAgICAgICBkaWFsb2dsb2coXCJMaXN0QWxsXCIsc2Vzc2lvbixzZW5kKCdJIGRvblxcJ3Qga25vdyBhbnl0aGluZyBhYm91dCBcIicgKyBjYXRlZ29yeSArICdcIicpKTtcbiAgICAgICAgLy8gbmV4dCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgY2F0ID0gXCJcIjtcbiAgICAgIGlmKCBjYXRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBjYXQgPSBjYXRzWzBdO1xuICAgICAgfVxuICAgICAgaWYoIGNhdHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIGRlYnVnbG9nKCdjYXRlZ29yeSBpZGVudGlmaWVkOicgKyBjYXQpO1xuICAgICAgICBpZiAoYTEgJiYgYTEuZW50aXR5KSB7XG4gICAgICAgICAgZGVidWdsb2coJ2dvdCBmaWx0ZXI6JyArIGExLmVudGl0eSk7XG4gICAgICAgICAgdmFyIGNhdGVnb3J5U2V0ID0gTW9kZWwuZ2V0QWxsUmVjb3JkQ2F0ZWdvcmllc0ZvclRhcmdldENhdGVnb3J5KHRoZU1vZGVsLCBjYXQsIHRydWUpO1xuICAgICAgICAgIHZhciByZXN1bHQxID0gTGlzdEFsbC5saXN0QWxsV2l0aENvbnRleHQoY2F0LCBhMS5lbnRpdHksXG4gICAgICAgICAgICB0aGVNb2RlbC5ydWxlcywgdGhlTW9kZWwucmVjb3JkcywgY2F0ZWdvcnlTZXQpO1xuICAgICAgICAgIC8vIFRPRE8gY2xhc3NpZnlpbmcgdGhlIHN0cmluZyB0d2ljZSBpcyBhIHRlcnJpYmxlIHdhc3RlXG4gICAgICAgICAgaWYgKCFyZXN1bHQxLmxlbmd0aCkge1xuICAgICAgICAgICAgZGVidWdsb2coJ2dvaW5nIGZvciBoYXZpbmcnKTtcbiAgICAgICAgICAgIHZhciBjYXRlZ29yeVNldEZ1bGwgPSBNb2RlbC5nZXRBbGxSZWNvcmRDYXRlZ29yaWVzRm9yVGFyZ2V0Q2F0ZWdvcnkodGhlTW9kZWwsIGNhdCwgZmFsc2UpO1xuICAgICAgICAgICAgcmVzdWx0MSA9IExpc3RBbGwubGlzdEFsbEhhdmluZ0NvbnRleHQoY2F0LCBhMS5lbnRpdHksIHRoZU1vZGVsLnJ1bGVzLFxuICAgICAgICAgICAgICB0aGVNb2RlbC5yZWNvcmRzLCBjYXRlZ29yeVNldEZ1bGwpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBkZWJ1Z2xvZygnbGlzdGFsbCByZXN1bHQ6JyArIEpTT04uc3RyaW5naWZ5KHJlc3VsdDEpKTtcbiAgICAgICAgICB2YXIgam9pbnJlc3VsdHMgPSByZXN0cmljdExvZ2dlZE9uKHNlc3Npb24sIExpc3RBbGwuam9pblJlc3VsdHMocmVzdWx0MSkpO1xuICAgICAgICAgIGxvZ1F1ZXJ5V2hhdElzKHNlc3Npb24sICdMaXN0QWxsJywgcmVzdWx0MSk7XG4gICAgICAgICAgaWYoam9pbnJlc3VsdHMubGVuZ3RoICl7XG4gICAgICAgICAgICBkaWFsb2dsb2coXCJMaXN0QWxsXCIsc2Vzc2lvbixzZW5kKFwidGhlIFwiICsgY2F0ZWdvcnkgKyBcIiBmb3IgXCIgKyBhMS5lbnRpdHkgKyBcIiBhcmUgLi4uXFxuXCIgKyBqb2lucmVzdWx0cy5qb2luKFwiO1xcblwiKSkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkaWFsb2dsb2coXCJMaXN0QWxsXCIsc2Vzc2lvbixzZW5kKFwiaSBkaWQgbm90IGZpbmQgYW55IFwiICsgY2F0ZWdvcnkgKyBcIiBmb3IgXCIgKyBhMS5lbnRpdHkgKyBcIi5cXG5cIiArIGpvaW5yZXN1bHRzLmpvaW4oXCI7XFxuXCIpKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBubyBlbnRpdHksIGUuZy4gbGlzdCBhbGwgY291bnRyaWVzXG4gICAgICAgICAgLy9cbiAgICAgICAgICB2YXIgY2F0ZWdvcnlTZXRGdWxsID0gTW9kZWwuZ2V0QWxsUmVjb3JkQ2F0ZWdvcmllc0ZvclRhcmdldENhdGVnb3J5KHRoZU1vZGVsLCBjYXQsIGZhbHNlKTtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gTGlzdEFsbC5saXN0QWxsSGF2aW5nQ29udGV4dChjYXQsIGNhdCwgdGhlTW9kZWwucnVsZXMsIHRoZU1vZGVsLnJlY29yZHMsIGNhdGVnb3J5U2V0RnVsbCk7XG4gICAgICAgICAgbG9nUXVlcnlXaGF0SXMoc2Vzc2lvbiwgJ0xpc3RBbGwnLCByZXN1bHQpO1xuICAgICAgICAgIGlmIChyZXN1bHQubGVuZ3RoKSB7XG4gICAgICAgICAgICBkZWJ1Z2xvZygnbGlzdGFsbCByZXN1bHQ6JyArIEpTT04uc3RyaW5naWZ5KHJlc3VsdCkpO1xuICAgICAgICAgICAgdmFyIGpvaW5yZXN1bHRzID0gW107XG4gICAgICAgICAgICBkZWJ1Z2xvZyhcImhlcmUgaXMgY2F0PlwiICsgY2F0KTtcbiAgICAgICAgICAgIGlmKGNhdCAhPT0gXCJleGFtcGxlIHF1ZXN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgam9pbnJlc3VsdHMgPSByZXN0cmljdExvZ2dlZE9uKHNlc3Npb24sIExpc3RBbGwuam9pblJlc3VsdHMocmVzdWx0KSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBqb2lucmVzdWx0cyA9IExpc3RBbGwuam9pblJlc3VsdHMocmVzdWx0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciByZXNwb25zZSA9IFwidGhlIFwiICsgY2F0ZWdvcnkgKyBcIiBhcmUgLi4uXFxuXCIgKyBqb2lucmVzdWx0cy5qb2luKFwiO1xcblwiKTtcbiAgICAgICAgICAgIGRpYWxvZ2xvZyhcIkxpc3RBbGxcIixzZXNzaW9uLHNlbmQocmVzcG9uc2UpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHJlc3BvbnNlID0gXCJGb3VuZCBubyBkYXRhIGhhdmluZyBcXFwiXCIgKyBjYXQgKyBcIlxcXCJcIlxuICAgICAgICAgICAgZGlhbG9nbG9nKFwiTGlzdEFsbFwiLHNlc3Npb24sc2VuZChyZXNwb25zZSkpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gbXVsdGlwbGUgY2F0ZWdvcmllc1xuICAgICAgICBkZWJ1Z2xvZygnY2F0ZWdvcmllcyBpZGVudGlmaWVkOicgKyBjYXRzLmpvaW4oXCIsXCIpKTtcbiAgICAgICAgaWYgKGExICYmIGExLmVudGl0eSkge1xuICAgICAgICAgIGRlYnVnbG9nKCdnb3QgZmlsdGVyOicgKyBhMS5lbnRpdHkpO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgdmFyIGNhdGVnb3J5U2V0ID0gTW9kZWwuZ2V0QWxsUmVjb3JkQ2F0ZWdvcmllc0ZvclRhcmdldENhdGVnb3JpZXModGhlTW9kZWwsIGNhdHMsIHRydWUpO1xuICAgICAgICAgIH0gY2F0Y2goZSkge1xuICAgICAgICAgICAgICBkZWJ1Z2xvZyhcImhlcmUgZXhjZXB0aW9uXCIgKyBlKTtcbiAgICAgICAgICAgICAgZGlhbG9nbG9nKFwiV2hhdElzXCIsc2Vzc2lvbixzZW5kKCdJIGNhbm5vdCBjb21iaW5lIFwiJyArIGNhdGVnb3J5ICsgJygnICsgZS50b1N0cmluZygpICsgJyknKSk7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIHJlc3VsdDFUID0gTGlzdEFsbC5saXN0QWxsVHVwZWxXaXRoQ29udGV4dChjYXRzLCBhMS5lbnRpdHksXG4gICAgICAgICAgICB0aGVNb2RlbC5ydWxlcywgdGhlTW9kZWwucmVjb3JkcywgY2F0ZWdvcnlTZXQpO1xuICAgICAgICAgIC8vIFRPRE8gY2xhc3NpZnlpbmcgdGhlIHN0cmluZyB0d2ljZSBpcyBhIHRlcnJpYmxlIHdhc3RlXG4gICAgICAgICAgaWYgKCFyZXN1bHQxVC5sZW5ndGgpIHtcbiAgICAgICAgICAgIGRlYnVnbG9nKCdnb2luZyBmb3IgaGF2aW5nJyk7XG4gICAgICAgICAgICB2YXIgY2F0ZWdvcnlTZXRGdWxsID0gTW9kZWwuZ2V0QWxsUmVjb3JkQ2F0ZWdvcmllc0ZvclRhcmdldENhdGVnb3JpZXModGhlTW9kZWwsIGNhdHMsIGZhbHNlKTtcbiAgICAgICAgICAgIHJlc3VsdDFUID0gTGlzdEFsbC5saXN0QWxsVHVwZWxIYXZpbmdDb250ZXh0KGNhdHMsIGExLmVudGl0eSwgdGhlTW9kZWwucnVsZXMsXG4gICAgICAgICAgICAgIHRoZU1vZGVsLnJlY29yZHMsIGNhdGVnb3J5U2V0RnVsbCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGRlYnVnbG9nKCdsaXN0YWxsIHJlc3VsdDonICsgSlNPTi5zdHJpbmdpZnkocmVzdWx0MVQpKTtcbiAgICAgICAgICB2YXIgam9pbnJlc3VsdHMgPSByZXN0cmljdExvZ2dlZE9uKHNlc3Npb24sIExpc3RBbGwuam9pblJlc3VsdHNUdXBlbChyZXN1bHQxVCkpO1xuICAgICAgICAgIGxvZ1F1ZXJ5V2hhdElzVHVwZWwoc2Vzc2lvbiwgJ0xpc3RBbGwnLCByZXN1bHQxVCk7XG4gICAgICAgICAgaWYoam9pbnJlc3VsdHMubGVuZ3RoICl7XG4gICAgICAgICAgICBkaWFsb2dsb2coXCJMaXN0QWxsXCIsc2Vzc2lvbixzZW5kKFwidGhlIFwiICsgY2F0ZWdvcnkgKyBcIiBmb3IgXCIgKyBhMS5lbnRpdHkgKyBcIiBhcmUgLi4uXFxuXCIgKyBqb2lucmVzdWx0cy5qb2luKFwiO1xcblwiKSkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkaWFsb2dsb2coXCJMaXN0QWxsXCIsc2Vzc2lvbixzZW5kKFwiaSBkaWQgbm90IGZpbmQgYW55IFwiICsgY2F0ZWdvcnkgKyBcIiBmb3IgXCIgKyBhMS5lbnRpdHkgKyBcIi5cXG5cIiArIGpvaW5yZXN1bHRzLmpvaW4oXCI7XFxuXCIpKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBubyBlbnRpdHksIGUuZy4gbGlzdCBhbGwgY291bnRyaWVzXG4gICAgICAgICAgLy9cbiAgICAgICAgICB2YXIgY2F0ZWdvcnlTZXRGdWxsID0ge30gYXMgeyBba2V5IDogc3RyaW5nXSA6IGJvb2xlYW59O1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjYXRlZ29yeVNldEZ1bGwgPSBNb2RlbC5nZXRBbGxSZWNvcmRDYXRlZ29yaWVzRm9yVGFyZ2V0Q2F0ZWdvcmllcyh0aGVNb2RlbCwgY2F0cywgZmFsc2UpO1xuICAgICAgICAgIH0gY2F0Y2goZSkge1xuICAgICAgICAgICAgICBkZWJ1Z2xvZyhcImhlcmUgZXhjZXB0aW9uXCIgKyBlKTtcbiAgICAgICAgICAgICAgZGlhbG9nbG9nKFwiV2hhdElzXCIsc2Vzc2lvbixzZW5kKCdJIGNhbm5vdCBjb21iaW5lIFwiJyArIGNhdGVnb3J5ICsgJygnICsgZS50b1N0cmluZygpICsgJyknKSk7XG4gICAgICAgICAgLy8gbmV4dCgpO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciByZXN1bHRUID0gTGlzdEFsbC5saXN0QWxsVHVwZWxIYXZpbmdDb250ZXh0KGNhdHMsIFwiXFxcIlwiICsgY2F0cy5qb2luKFwiXFxcIiBcXFwiXCIpICsgXCJcXFwiXCIsIHRoZU1vZGVsLnJ1bGVzLCB0aGVNb2RlbC5yZWNvcmRzLCBjYXRlZ29yeVNldEZ1bGwpO1xuICAgICAgICAgIGxvZ1F1ZXJ5V2hhdElzVHVwZWwoc2Vzc2lvbiwgJ0xpc3RBbGwnLCByZXN1bHRUKTtcbiAgICAgICAgICBpZiAocmVzdWx0VC5sZW5ndGgpIHtcbiAgICAgICAgICAgIGRlYnVnbG9nKCdsaXN0YWxsIHJlc3VsdDonICsgSlNPTi5zdHJpbmdpZnkocmVzdWx0VCkpO1xuICAgICAgICAgICAgdmFyIGpvaW5yZXN1bHRzID0gW107XG4gICAgICAgICAgICBkZWJ1Z2xvZyhcImhlcmUgaXMgY2F0PlwiICsgY2F0cy5qb2luKFwiLCBcIikpO1xuICAgICAgICAgICAgaWYoY2F0ICE9PSBcImV4YW1wbGUgcXVlc3Rpb25cIikge1xuICAgICAgICAgICAgICBqb2lucmVzdWx0cyA9IHJlc3RyaWN0TG9nZ2VkT24oc2Vzc2lvbiwgTGlzdEFsbC5qb2luUmVzdWx0c1R1cGVsKHJlc3VsdFQpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGpvaW5yZXN1bHRzID0gTGlzdEFsbC5qb2luUmVzdWx0c1R1cGVsKHJlc3VsdFQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHJlc3BvbnNlID0gXCJ0aGUgXCIgKyBjYXRlZ29yeSArIFwiIGFyZSAuLi5cXG5cIiArIGpvaW5yZXN1bHRzLmpvaW4oXCI7XFxuXCIpO1xuICAgICAgICAgICAgZGlhbG9nbG9nKFwiTGlzdEFsbFwiLHNlc3Npb24sc2VuZChyZXNwb25zZSkpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgcmVzcG9uc2UgPSBcIkZvdW5kIG5vIGRhdGEgaGF2aW5nIFxcXCJcIiArIGNhdCArIFwiXFxcIlwiXG4gICAgICAgICAgICBkaWFsb2dsb2coXCJMaXN0QWxsXCIsc2Vzc2lvbixzZW5kKHJlc3BvbnNlKSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICAgICovXG4gICAgfVxuICBdKTtcblxuXG4gIGRpYWxvZy5tYXRjaGVzKCdMaXN0QWxsQmluT3AnLCBbXG4gICAgZnVuY3Rpb24gKHNlc3Npb24sIGFyZ3MsIG5leHQpIHtcbiAgICAgIHZhciBpc0NvbWJpbmVkSW5kZXggPSB7fTtcbiAgICAgIHZhciBvTmV3RW50aXR5O1xuICAgICAgLy8gZXhwZWN0aW5nIGVudGl0eSBBMVxuICAgICAgdmFyIG1lc3NhZ2UgPSBzZXNzaW9uLm1lc3NhZ2UudGV4dDtcbiAgICAgIGRlYnVnbG9nKFwiSW50ZW50IDogTGlzdEFsbEJpbk9wXCIpO1xuICAgICAgZGVidWdsb2coJ3JhdzogJyArIEpTT04uc3RyaW5naWZ5KGFyZ3MuZW50aXRpZXMpLCB1bmRlZmluZWQsIDIpO1xuICAgICAgdmFyIGNhdGVnb3J5RW50aXR5ID0gYnVpbGRlci5FbnRpdHlSZWNvZ25pemVyLmZpbmRFbnRpdHkoYXJncy5lbnRpdGllcywgJ2NhdGVnb3J5Jyk7XG4gICAgICB2YXIgY2F0ZWdvcnlXb3JkID0gY2F0ZWdvcnlFbnRpdHkuZW50aXR5O1xuICAgICAgdmFyIG9wRW50aXR5ID0gYnVpbGRlci5FbnRpdHlSZWNvZ25pemVyLmZpbmRFbnRpdHkoYXJncy5lbnRpdGllcywgJ29wZXJhdG9yJyk7XG4gICAgICB2YXIgb3BlcmF0b3JXb3JkID0gb3BFbnRpdHkgJiYgIG9wRW50aXR5LmVudGl0eTtcbiAgICAgIC8vIGNhdGVnb3JpemUgYXMgb3BlcmF0b3IgP1xuICAgICAgdmFyIGZpbHRlckRvbWFpbkVudGl0eSA9ICBidWlsZGVyLkVudGl0eVJlY29nbml6ZXIuZmluZEVudGl0eShhcmdzLmVudGl0aWVzLCAnZG9tYWluJyk7XG4gICAgICB2YXIgZmlsdGVyRG9tYWluUyA9IGZpbHRlckRvbWFpbkVudGl0eSAmJiBmaWx0ZXJEb21haW5FbnRpdHkuZW50aXR5O1xuICAgICAgdmFyIG9wZXJhdG9yID0gV2hhdElzLmFuYWx5emVPcGVyYXRvcihvcGVyYXRvcldvcmQsIHRoZU1vZGVsLnJ1bGVzLCBtZXNzYWdlKTtcbiAgICAgIHZhciBjYXRlZ29yeSA9IFdoYXRJcy5hbmFseXplQ2F0ZWdvcnkoY2F0ZWdvcnlXb3JkLCB0aGVNb2RlbC5ydWxlcywgbWVzc2FnZSk7XG4gICAgICB2YXIgb3BlcmF0b3JBcmdzID0gTW9kZWwuZ2V0T3BlcmF0b3IodGhlTW9kZWwsIG9wZXJhdG9yKTtcbiAgICAgIHZhciBhMiA9IGJ1aWxkZXIuRW50aXR5UmVjb2duaXplci5maW5kRW50aXR5KGFyZ3MuZW50aXRpZXMsICdBMicpO1xuICAgICAgaWYgKCFvcGVyYXRvcikge1xuICAgICAgICB2YXIgcyA9IFwiVW5rbm93biBvcGVyYXRvciBcIiArIG9wZXJhdG9yV29yZCArIFwiLCB0aGlzIGlzIGEgbW9kZWwgYnVnLCBjaGVjayBvcGVyYXRvcnMuanNvbiBhbmQgaW50ZW50cy5qc29uXCI7XG4gICAgICAgIGRpYWxvZ2xvZyhcIkxpc3RBbGxCaW5PcFwiLCBzZXNzaW9uLCBzZW5kKFwib3VjaCwgdGhpcyB3YXMgaW4gaW50ZXJuYWwgZXJyb3IuIFJlY292ZXJpbmcgZnJvbSBhIHdlaXJkIG9wZXJhdG9yIFxcXCJcIlxuICAgICAgICAgICsgb3BlcmF0b3JXb3JkICsgXCJcXFwiXFxuXCIpKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHMpO1xuICAgICAgfVxuICAgICAgdmFyIGZpbHRlckRvbWFpbiA9IHVuZGVmaW5lZDtcbiAgICAgIGlmIChmaWx0ZXJEb21haW5TKSB7XG4gICAgICAgIGRlYnVnbG9nKFwiZm91bmQgYSBkb21haW5TdHJpbmdcIiArIGZpbHRlckRvbWFpblMpO1xuICAgICAgICBmaWx0ZXJEb21haW4gPSBMaXN0QWxsLmluZmVyRG9tYWluKHRoZU1vZGVsLCBmaWx0ZXJEb21haW5TKTtcbiAgICAgICAgZGVidWdsb2coXCJnb3QgZG9tYWluXCIgKyBmaWx0ZXJEb21haW4pO1xuICAgICAgICBpZiAoIWZpbHRlckRvbWFpbikge1xuICAgICAgICAgIGRpYWxvZ2xvZyhcIkRlc2NyaWJlXCIsIHNlc3Npb24sIHNlbmQoXCJJIGRpZCBub3QgaW5mZXIgYSBkb21haW4gcmVzdHJpY3Rpb24gZnJvbSBcXFwiXCIgKyBmaWx0ZXJEb21haW5TICsgXCJcXFwiLiBTcGVjaWZ5IGFuIGV4aXN0aW5nIGRvbWFpbi4gKExpc3QgYWxsIGRvbWFpbnMpIHRvIGdldCBleGFjdCBuYW1lcy5cXG5cIikpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgZnJhZ21lbnQgPSBhMiAmJiBhMi5lbnRpdHk7XG4gICAgICBmcmFnbWVudCA9IEJyZWFrRG93bi50cmltUXVvdGVkKEJyZWFrRG93bi50cmltUXVvdGVkU3BhY2VkKGZyYWdtZW50KSk7XG4gICAgICBkZWJ1Z2xvZyhcImZyYWdtZW50IGFmdGVyIHRyaW1taW5nIFxcXCJcIiArIGZyYWdtZW50ICsgXCJcXFwiXCIpO1xuICAgICAgaWYgKGNhdGVnb3J5V29yZCA9PT0gXCJjYXRlZ29yaWVzXCIpIHtcbiAgICAgICAgLy8gZG8gd2UgaGF2ZSBhIGZpbHRlcj9cbiAgICAgICAgdmFyIGFGaWx0ZXJlZENhdGVnb3JpZXMgPSBMaXN0QWxsLmZpbHRlclN0cmluZ0xpc3RCeU9wKG9wZXJhdG9yQXJncywgZnJhZ21lbnQsIHRoZU1vZGVsLmNhdGVnb3J5KTtcbiAgICAgICAgaWYoZmlsdGVyRG9tYWluKSB7XG4gICAgICAgICAgdmFyIGNhdHNGb3JEb21haW4gPSBNb2RlbC5nZXRDYXRlZ29yaWVzRm9yRG9tYWluKHRoZU1vZGVsLGZpbHRlckRvbWFpbik7XG4gICAgICAgICAgYUZpbHRlcmVkQ2F0ZWdvcmllcyA9IF8uaW50ZXJzZWN0aW9uKGFGaWx0ZXJlZENhdGVnb3JpZXMsY2F0c0ZvckRvbWFpbik7XG4gICAgICAgIH1cbiAgICAgICAgcmVzID0gcmVzdHJpY3RMb2dnZWRPbihzZXNzaW9uLCBhRmlsdGVyZWRDYXRlZ29yaWVzKS5qb2luKFwiO1xcblwiKTtcbiAgICAgICAgaWYgKHJlcy5sZW5ndGgpIHtcbiAgICAgICAgICBpZihmaWx0ZXJEb21haW4pIHtcbiAgICAgICAgICAgIGRpYWxvZ2xvZyhcIkxpc3RBbGxCaW5PcFwiLCBzZXNzaW9uLCBzZW5kKGBteSBjYXRlZ29yaWVzICR7b3BlcmF0b3J9IFwiJHtmcmFnbWVudH1cIiBpbiBkb21haW4gXCIke2ZpbHRlckRvbWFpbn1cIiBhcmUgLi4uXFxuYCArIHJlcykpO1xuICAgICAgICAgIH1lbHNlIHtcbiAgICAgICAgICAgIGRpYWxvZ2xvZyhcIkxpc3RBbGxCaW5PcFwiLCBzZXNzaW9uLCBzZW5kKGBteSBjYXRlZ29yaWVzICR7b3BlcmF0b3J9IFwiJHtmcmFnbWVudH1cIiBhcmUgLi4uXFxuYCArIHJlcykpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkaWFsb2dsb2coXCJMaXN0QWxsQmluT3BcIiwgc2Vzc2lvbiwgc2VuZCgnSSBoYXZlIG5vIGNhdGVnb3JpZXMgJyArIG9wZXJhdG9yICsgJyBcIicgKyBmcmFnbWVudCArICdcIicpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChjYXRlZ29yeVdvcmQgPT09IFwiZG9tYWluc1wiKSB7XG4gICAgICAgIHZhciBhUmVzID0gTGlzdEFsbC5maWx0ZXJTdHJpbmdMaXN0QnlPcChvcGVyYXRvckFyZ3MsIGZyYWdtZW50LCB0aGVNb2RlbC5kb21haW5zKTtcbiAgICAgICAgcmVzID0gcmVzdHJpY3RMb2dnZWRPbihzZXNzaW9uLCBhUmVzKS5qb2luKFwiO1xcblwiKTtcbiAgICAgICAgaWYgKHJlcy5sZW5ndGgpIHtcbiAgICAgICAgICBkaWFsb2dsb2coXCJMaXN0QWxsQmluT3BcIiwgc2Vzc2lvbiwgc2VuZChcIm15IGRvbWFpbnMgXCIgKyBvcGVyYXRvciArICcgXCInICsgZnJhZ21lbnQgKyAnXCIgYXJlIC4uLlxcbicgKyByZXMpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkaWFsb2dsb2coXCJMaXN0QWxsQmluT3BcIiwgc2Vzc2lvbiwgc2VuZCgnSSBoYXZlIG5vIGRvbWFpbnMgJyArIG9wZXJhdG9yICsgJyBcIicgKyBmcmFnbWVudCArICdcIicpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChjYXRlZ29yeVdvcmQgPT09IFwidG9vbHNcIikge1xuICAgICAgICB2YXIgYVJlcyA9IExpc3RBbGwuZmlsdGVyU3RyaW5nTGlzdEJ5T3Aob3BlcmF0b3JBcmdzLCBmcmFnbWVudCwgdGhlTW9kZWwudG9vbHMubWFwKFxuICAgICAgICAgIGZ1bmN0aW9uIChvVG9vbCkgeyByZXR1cm4gb1Rvb2wubmFtZTsgfSkpO1xuICAgICAgICB2YXIgcmVzID0gcmVzdHJpY3RMb2dnZWRPbihzZXNzaW9uLCBhUmVzKS5qb2luKFwiO1xcblwiKTtcbiAgICAgICAgaWYgKHJlcy5sZW5ndGgpIHtcbiAgICAgICAgICBkaWFsb2dsb2coXCJMaXN0QWxsQmluT3BcIiwgc2Vzc2lvbiwgc2VuZChcIm15IHRvb2xzIFwiICsgb3BlcmF0b3IgKyAnIFwiJyArIGZyYWdtZW50ICsgJ1wiIGFyZSAuLi5cXG4nICsgcmVzKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGlhbG9nbG9nKFwiTGlzdEFsbEJpbk9wXCIsIHNlc3Npb24sIHNlbmQoXCJJIGhhdmUgbm8gdG9vbHMgXCIgKyBvcGVyYXRvciArICcgXCInICsgZnJhZ21lbnQgKyAnXCInKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZWxzZSB7IC8vIGNhdGVnb3J5IGlzIGNhdGVnb3J5XG4gICAgICAgIHZhciBjYXQgPSBXaGF0SXMuYW5hbHl6ZUNhdGVnb3J5KGNhdGVnb3J5V29yZCwgdGhlTW9kZWwucnVsZXMsIG1lc3NhZ2UpO1xuICAgICAgICBpZiAoIWNhdCkge1xuICAgICAgICAgIGRpYWxvZ2xvZyhcIkxpc3RBbGxCaW5PcFwiLCBzZXNzaW9uLCBzZW5kKCdJIGRvblxcJ3Qga25vdyBhbnl0aGluZyBhYm91dCBcIicgKyBjYXRlZ29yeVdvcmQgKyAnXCInKSk7XG4gICAgICAgICAgLy8gbmV4dCgpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBkZWJ1Z2xvZygnY2F0ZWdvcnkgaWRlbnRpZmllZDonICsgY2F0KTtcbiAgICAgICAgdmFyIGFSZXMgPSBMaXN0QWxsLmdldENhdGVnb3J5T3BGaWx0ZXJBc0Rpc3RpbmN0U3RyaW5ncyhvcGVyYXRvckFyZ3MsIGZyYWdtZW50LCBjYXRlZ29yeSwgdGhlTW9kZWwucmVjb3JkcywgZmlsdGVyRG9tYWluKTtcbiAgICAgICAgdmFyIHJlcyA9IHJlc3RyaWN0TG9nZ2VkT24oc2Vzc2lvbiwgYVJlcykuam9pbihcIjtcXG5cIik7XG4gICAgICAgIHZhciBpbmZpeEV4cGxhaW4gPSAnJ1xuICAgICAgICBpZiAoIUxpc3RBbGwubGlrZWx5UGx1cmFsRGlmZihjYXRlZ29yeSwgY2F0ZWdvcnlXb3JkKSkge1xuICAgICAgICAgIGluZml4RXhwbGFpbiA9ICcoXCInICsgY2F0ZWdvcnkgKyAnXCIpJztcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzLmxlbmd0aCkge1xuICAgICAgICAgIGlmIChmaWx0ZXJEb21haW4pIHtcbiAgICAgICAgICAgIGRpYWxvZ2xvZyhcIkxpc3RBbGxCaW5PcFwiLCBzZXNzaW9uLCBzZW5kKGBteSAke2NhdGVnb3J5V29yZH0ke2luZml4RXhwbGFpbn0gJHtvcGVyYXRvcn0gXCIke2ZyYWdtZW50fVwiIGluIGRvbWFpbiBcIiR7ZmlsdGVyRG9tYWlufVwiIGFyZSAuLi5cXG5gICsgcmVzKSk7XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGlhbG9nbG9nKFwiTGlzdEFsbEJpbk9wXCIsIHNlc3Npb24sIHNlbmQoYG15ICR7Y2F0ZWdvcnlXb3JkfSR7aW5maXhFeHBsYWlufSAke29wZXJhdG9yfSBcIiR7ZnJhZ21lbnR9XCIgYXJlIC4uLlxcbmAgKyByZXMpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGlhbG9nbG9nKFwiTGlzdEFsbEJpbk9wXCIsIHNlc3Npb24sIHNlbmQoJ0kgaGF2ZSBubyAnICsgY2F0ZWdvcnlXb3JkICsgaW5maXhFeHBsYWluICsgJyAnICsgb3BlcmF0b3IgKyAnIFwiJyArIGZyYWdtZW50ICsgJ1wiJykpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gIF0pO1xuXG4gIGRpYWxvZy5tYXRjaGVzKCdUcmFpbk1lJywgW1xuICAgIGZ1bmN0aW9uIChzZXNzaW9uLCBhcmdzLCBuZXh0KSB7XG4gICAgICB2YXIgaXNDb21iaW5lZEluZGV4ID0ge307XG4gICAgICB2YXIgb05ld0VudGl0eTtcbiAgICAgIC8vIGV4cGVjdGluZyBlbnRpdHkgQTFcbiAgICAgIHZhciBtZXNzYWdlID0gc2Vzc2lvbi5tZXNzYWdlLnRleHQ7XG4gICAgICBkZWJ1Z2xvZyhcIkludGVudCA6IFRyYWluXCIpO1xuICAgICAgZGVidWdsb2coJ3JhdzogJyArIEpTT04uc3RyaW5naWZ5KGFyZ3MuZW50aXRpZXMpLCB1bmRlZmluZWQsIDIpO1xuICAgICAgdmFyIGNhdGVnb3J5RW50aXR5ID0gYnVpbGRlci5FbnRpdHlSZWNvZ25pemVyLmZpbmRFbnRpdHkoYXJncy5lbnRpdGllcywgJ2NhdGVnb3JpZXMnKTtcbiAgICAgIGlmIChtZXNzYWdlLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihcImtyb25vc1wiKSA+PSAwIHx8IG1lc3NhZ2UudG9Mb3dlckNhc2UoKS5pbmRleE9mKFwia2xpbmdvblwiKSA+PSAwKSB7XG4gICAgICAgIGRpYWxvZ2xvZyhcIlRyYWluTWVcIiwgc2Vzc2lvbiwgc2VuZChnZXRSYW5kb21SZXN1bHQoYVRyYWluTm9LbGluZ29uKSkpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgcmVzID0gZ2V0UmFuZG9tUmVzdWx0KGFUcmFpblJlcGxpZXMpO1xuICAgICAgZGlhbG9nbG9nKFwiVHJhaW5NZVwiLCBzZXNzaW9uLCBzZW5kKHJlcykpO1xuICAgIH1cbiAgXSk7XG5cbiAgZGlhbG9nLm1hdGNoZXMoJ1Rvb0xvbmcnLCBbXG4gICAgZnVuY3Rpb24gKHNlc3Npb24sIGFyZ3MsIG5leHQpIHtcbiAgICAgIHZhciBpc0NvbWJpbmVkSW5kZXggPSB7fTtcbiAgICAgIHZhciBvTmV3RW50aXR5O1xuICAgICAgLy8gZXhwZWN0aW5nIGVudGl0eSBBMVxuICAgICAgdmFyIG1lc3NhZ2UgPSBzZXNzaW9uLm1lc3NhZ2UudGV4dDtcbiAgICAgIGRlYnVnbG9nKFwiSW50ZW50IDogVG9vTG9uZ1wiKTtcbiAgICAgIGRlYnVnbG9nKCdyYXc6ICcgKyBKU09OLnN0cmluZ2lmeShhcmdzLmVudGl0aWVzKSwgdW5kZWZpbmVkLCAyKTtcbiAgICAgIHZhciBjYXRlZ29yeUVudGl0eSA9IGJ1aWxkZXIuRW50aXR5UmVjb2duaXplci5maW5kRW50aXR5KGFyZ3MuZW50aXRpZXMsICdjYXRlZ29yaWVzJyk7XG4gICAgICBkaWFsb2dsb2coXCJUb29Mb25nXCIsIHNlc3Npb24sIHNlbmQoZ2V0UmFuZG9tUmVzdWx0KGFSZXNwb25zZXNPblRvb0xvbmcpKSk7XG4gICAgfVxuICBdKTtcblxuXG4gIGRpYWxvZy5tYXRjaGVzKCdXcm9uZycsIFtcbiAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgYXJncywgbmV4dCkge1xuICAgICAgZGlhbG9nTG9nZ2VyKHtcbiAgICAgICAgc2Vzc2lvbjogc2Vzc2lvbixcbiAgICAgICAgaW50ZW50OiBcIldyb25nXCIsXG4gICAgICAgIHJlc3BvbnNlOiAnPGJlZ2luIHVwZG93bj4nXG4gICAgICB9KTtcbiAgICAgIHNlc3Npb24uYmVnaW5EaWFsb2coJy91cGRvd24nLCBzZXNzaW9uLnVzZXJEYXRhLmNvdW50KTtcbiAgICB9LFxuICAgIGZ1bmN0aW9uIChzZXNzaW9uLCByZXN1bHRzLCBuZXh0KSB7XG4gICAgICB2YXIgYWxhcm0gPSBzZXNzaW9uLmRpYWxvZ0RhdGEuYWxhcm07XG4gICAgICBuZXh0KCk7XG4gICAgfSxcbiAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgcmVzdWx0cykge1xuICAgICAgc2Vzc2lvbi5zZW5kKGdldFJhbmRvbVJlc3VsdChhQmFja0Zyb21UcmFpbmluZykpOyAvLyAgKyBKU09OLnN0cmluZ2lmeShyZXN1bHRzKSk7XG4gICAgICAvL3Nlc3Npb24uc2VuZCgnZW5kIG9mIHdyb25nJyk7XG4gICAgfVxuICBdKTtcblxuICBkaWFsb2cubWF0Y2hlcygnRXhpdCcsIFtcbiAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgYXJncywgbmV4dCkge1xuICAgICAgZGVidWdsb2coJ2V4aXQgOicpO1xuICAgICAgZGVidWdsb2coJ2V4aXQnICsgSlNPTi5zdHJpbmdpZnkoYXJncy5lbnRpdGllcykpO1xuICAgICAgZGlhbG9nTG9nZ2VyKHtcbiAgICAgICAgc2Vzc2lvbjogc2Vzc2lvbixcbiAgICAgICAgaW50ZW50OiBcIkV4aXRcIixcbiAgICAgICAgcmVzcG9uc2U6ICd5b3UgYXJlIGluIGEgbG9naWMgbG9vcCdcbiAgICAgIH0pO1xuICAgICAgc2Vzc2lvbi5zZW5kKFwieW91IGFyZSBpbiBhIGxvZ2ljIGxvb3AgXCIpO1xuICAgIH1cbiAgXSk7XG4gIGRpYWxvZy5tYXRjaGVzKCdIZWxwJywgW1xuICAgIGZ1bmN0aW9uIChzZXNzaW9uLCBhcmdzLCBuZXh0KSB7XG4gICAgICBkZWJ1Z2xvZygnaGVscCA6Jyk7XG4gICAgICBkZWJ1Z2xvZygnaGVscCcpO1xuICAgICAgc2Vzc2lvbi5zZW5kKFwiSSBrbm93IGFib3V0IC4uLi4gPGNhdGVnb3JpZXM+PlwiKTtcbiAgICB9XG4gIF0pO1xuXG4gIC8vIEFkZCBpbnRlbnQgaGFuZGxlcnNcbiAgZGlhbG9nLm1hdGNoZXMoJ3RyYWluJywgW1xuICAgIGZ1bmN0aW9uIChzZXNzaW9uLCBhcmdzLCBuZXh0KSB7XG4gICAgICBkZWJ1Z2xvZygndHJhaW4nKTtcbiAgICAgIC8vIFJlc29sdmUgYW5kIHN0b3JlIGFueSBlbnRpdGllcyBwYXNzZWQgZnJvbSBMVUlTLlxuICAgICAgdmFyIHRpdGxlID0gYnVpbGRlci5FbnRpdHlSZWNvZ25pemVyLmZpbmRFbnRpdHkoYXJncy5lbnRpdGllcywgJ2J1aWx0aW4uYWxhcm0udGl0bGUnKTtcbiAgICAgIHZhciB0aW1lID0gYnVpbGRlci5FbnRpdHlSZWNvZ25pemVyLnJlc29sdmVUaW1lKGFyZ3MuZW50aXRpZXMpO1xuICAgICAgdmFyIGFsYXJtID0gc2Vzc2lvbi5kaWFsb2dEYXRhLmFsYXJtID0ge1xuICAgICAgICB0aXRsZTogdGl0bGUgPyB0aXRsZS5lbnRpdHkgOiBudWxsLFxuICAgICAgICB0aW1lc3RhbXA6IHRpbWUgPyB0aW1lLmdldFRpbWUoKSA6IG51bGxcbiAgICAgIH07XG4gICAgICAvLyBQcm9tcHQgZm9yIHRpdGxlXG4gICAgICBpZiAoIWFsYXJtLnRpdGxlKSB7XG4gICAgICAgIGRpYWxvZ0xvZ2dlcih7XG4gICAgICAgICAgc2Vzc2lvbjogc2Vzc2lvbixcbiAgICAgICAgICBpbnRlbnQ6IFwidHJhaW5cIixcbiAgICAgICAgICByZXNwb25zZTogJ1doYXQgZmFjdCB3b3VsZCB5b3UgbGlrZSB0byB0cmFpbj8nXG4gICAgICAgIH0pO1xuICAgICAgICBidWlsZGVyLlByb21wdHMudGV4dChzZXNzaW9uLCAnV2hhdCBmYWN0IHdvdWxkIHlvdSBsaWtlIHRvIHRyYWluPycpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV4dCgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZnVuY3Rpb24gKHNlc3Npb24sIHJlc3VsdHMsIG5leHQpIHtcbiAgICAgIHZhciBhbGFybSA9IHNlc3Npb24uZGlhbG9nRGF0YS5hbGFybTtcbiAgICAgIGlmIChyZXN1bHRzLnJlc3BvbnNlKSB7XG4gICAgICAgIGFsYXJtLnRpdGxlID0gcmVzdWx0cy5yZXNwb25zZTtcbiAgICAgIH1cblxuICAgICAgLy8gUHJvbXB0IGZvciB0aW1lICh0aXRsZSB3aWxsIGJlIGJsYW5rIGlmIHRoZSB1c2VyIHNhaWQgY2FuY2VsKVxuICAgICAgaWYgKGFsYXJtLnRpdGxlICYmICFhbGFybS50aW1lc3RhbXApIHtcblxuXG4gICAgICAgIGJ1aWxkZXIuUHJvbXB0cy50aW1lKHNlc3Npb24sICdXaGF0IHRpbWUgd291bGQgeW91IGxpa2UgdG8gc2V0IHRoZSBhbGFybSBmb3I/Jyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXh0KCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgcmVzdWx0cykge1xuICAgICAgdmFyIGFsYXJtID0gc2Vzc2lvbi5kaWFsb2dEYXRhLmFsYXJtO1xuICAgICAgaWYgKHJlc3VsdHMucmVzcG9uc2UpIHtcbiAgICAgICAgdmFyIHRpbWUgPSBidWlsZGVyLkVudGl0eVJlY29nbml6ZXIucmVzb2x2ZVRpbWUoW3Jlc3VsdHMucmVzcG9uc2VdKTtcbiAgICAgICAgYWxhcm0udGltZXN0YW1wID0gdGltZSA/IHRpbWUuZ2V0VGltZSgpIDogbnVsbDtcbiAgICAgIH1cbiAgICAgIC8vIFNldCB0aGUgYWxhcm0gKGlmIHRpdGxlIG9yIHRpbWVzdGFtcCBpcyBibGFuayB0aGUgdXNlciBzYWlkIGNhbmNlbClcbiAgICAgIGlmIChhbGFybS50aXRsZSAmJiBhbGFybS50aW1lc3RhbXApIHtcbiAgICAgICAgLy8gU2F2ZSBhZGRyZXNzIG9mIHdobyB0byBub3RpZnkgYW5kIHdyaXRlIHRvIHNjaGVkdWxlci5cbiAgICAgICAgYWxhcm0uYWRkcmVzcyA9IHNlc3Npb24ubWVzc2FnZS5hZGRyZXNzO1xuICAgICAgICAvL2FsYXJtc1thbGFybS50aXRsZV0gPSBhbGFybTtcblxuICAgICAgICAvLyBTZW5kIGNvbmZpcm1hdGlvbiB0byB1c2VyXG4gICAgICAgIHZhciBkYXRlID0gbmV3IERhdGUoYWxhcm0udGltZXN0YW1wKTtcbiAgICAgICAgdmFyIGlzQU0gPSBkYXRlLmdldEhvdXJzKCkgPCAxMjtcbiAgICAgICAgc2Vzc2lvbi5zZW5kKCdDcmVhdGluZyBhbGFybSBuYW1lZCBcIiVzXCIgZm9yICVkLyVkLyVkICVkOiUwMmQlcycsXG4gICAgICAgICAgYWxhcm0udGl0bGUsXG4gICAgICAgICAgZGF0ZS5nZXRNb250aCgpICsgMSwgZGF0ZS5nZXREYXRlKCksIGRhdGUuZ2V0RnVsbFllYXIoKSxcbiAgICAgICAgICBpc0FNID8gZGF0ZS5nZXRIb3VycygpIDogZGF0ZS5nZXRIb3VycygpIC0gMTIsIGRhdGUuZ2V0TWludXRlcygpLCBpc0FNID8gJ2FtJyA6ICdwbScpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2Vzc2lvbi5zZW5kKCdPay4uLiBubyBwcm9ibGVtLicpO1xuICAgICAgfVxuICAgIH1cbiAgXSk7XG5cbiAgZGlhbG9nLm9uRGVmYXVsdChmdW5jdGlvbiAoc2Vzc2lvbikge1xuICAgIGxvZ1F1ZXJ5KHNlc3Npb24sIFwib25EZWZhdWx0XCIpO1xuICAgIHZhciBlbGl6YSA9IGdldEVsaXphQm90KGdldENvbnZlcnNhdGlvbklkKHNlc3Npb24pKTtcbiAgICB2YXIgcmVwbHkgPSBlbGl6YS50cmFuc2Zvcm0oc2Vzc2lvbi5tZXNzYWdlLnRleHQpO1xuICAgIGRpYWxvZ2xvZyhcImVsaXphXCIsIHNlc3Npb24sIHNlbmQocmVwbHkpKTtcbiAgICAvL25ldyBFaWx6YWJvdFxuICAgIC8vc2Vzc2lvbi5zZW5kKFwiSSBkbyBub3QgdW5kZXJzdGFuZCB0aGlzIGF0IGFsbFwiKTtcbiAgICAvL2J1aWxkZXIuRGlhbG9nQWN0aW9uLnNlbmQoJ0lcXCdtIHNvcnJ5IEkgZGlkblxcJ3QgdW5kZXJzdGFuZC4gSSBjYW4gb25seSBzaG93IHN0YXJ0IGFuZCByaW5nJyk7XG4gIH0pO1xuXG4gIC8qXG4gIC8vIFZlcnkgc2ltcGxlIGFsYXJtIHNjaGVkdWxlclxuICB2YXIgYWxhcm1zID0ge307XG4gIHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbm93ID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgZm9yICh2YXIga2V5IGluIGFsYXJtcykge1xuICAgICAgdmFyIGFsYXJtID0gYWxhcm1zW2tleV07XG4gICAgICBpZiAobm93ID49IGFsYXJtLnRpbWVzdGFtcCkge1xuICAgICAgICB2YXIgbXNnID0gbmV3IGJ1aWxkZXIuTWVzc2FnZSgpXG4gICAgICAgICAgLmFkZHJlc3MoYWxhcm0uYWRkcmVzcylcbiAgICAgICAgICAudGV4dCgnSGVyZVxcJ3MgeW91ciBcXCclc1xcJyBhbGFybS4nLCBhbGFybS50aXRsZSk7XG4gICAgICAgIGJvdC5zZW5kKG1zZyk7XG4gICAgICAgIGRlbGV0ZSBhbGFybXNba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIDE1MDAwKTtcbiAgKi9cbn1cblxuaWYgKG1vZHVsZSkge1xuICBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBTaW1wbGVVcERvd25SZWNvZ25pemVyOiBTaW1wbGVVcERvd25SZWNvZ25pemVyLFxuICAgIGFSZXNwb25zZXNPblRvb0xvbmc6IGFSZXNwb25zZXNPblRvb0xvbmcsXG4gICAgbWV0YXdvcmRzRGVzY3JpcHRpb25zIDogbWV0YXdvcmRzRGVzY3JpcHRpb25zLFxuICAgIG1ha2VCb3Q6IG1ha2VCb3RcbiAgfTtcbn1cbiIsIi8qKlxuICogVGhlIGJvdCBpbXBsZW1lbnRhdGlvblxuICpcbiAqIEluc3RhbnRpYXRlIGFwc3NpbmcgYSBjb25uZWN0b3IgdmlhXG4gKiBtYWtlQm90XG4gKlxuICovXG4vKipcbiAqIEBmaWxlXG4gKiBAbW9kdWxlIGpmc2ViLmZkZXZzdGFydC5zbWFydGRpYWxvZ1xuICogQGNvcHlyaWdodCAoYykgMjAxNiBHZXJkIEZvcnN0bWFublxuICovXG4vL2RlY2xhcmUgbW9kdWxlICdlbGl6YWJvdCcgeyB9O1xuLy9kZWNsYXJlIG1vZHVsZSAnd2luc3Rvbi1wZycgeyB9O1xuLy9kZWxjYXJlIG1vZHVsZSAnd2luc3Rvbicge307XG5cInVzZSBzdHJpY3RcIjtcbnZhciBidWlsZGVyID0gcmVxdWlyZSgnYm90YnVpbGRlcicpO1xudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKTtcbnZhciBNYXRjaCA9IHJlcXVpcmUoJy4uL21hdGNoL21hdGNoJyk7XG52YXIgQW5hbHl6ZSA9IHJlcXVpcmUoJy4uL21hdGNoL2FuYWx5emUnKTtcbnZhciBCcmVha0Rvd24gPSByZXF1aXJlKCcuLi9tYXRjaC9icmVha2Rvd24nKTtcbnZhciBXaGF0SXMgPSByZXF1aXJlKCcuLi9tYXRjaC93aGF0aXMnKTtcbnZhciBMaXN0QWxsID0gcmVxdWlyZSgnLi4vbWF0Y2gvbGlzdGFsbCcpO1xudmFyIERlc2NyaWJlID0gcmVxdWlyZSgnLi4vbWF0Y2gvZGVzY3JpYmUnKTtcbnZhciBVdGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzL3V0aWxzJyk7XG52YXIgXyA9IHJlcXVpcmUoJ2xvZGFzaCcpO1xudmFyIERpYWxvZ0xvZ2dlciA9IHJlcXVpcmUoJy4uL3V0aWxzL2RpYWxvZ2xvZ2dlcicpO1xudmFyIHByb2Nlc3MgPSByZXF1aXJlKCdwcm9jZXNzJyk7XG52YXIgZGJ1cmwgPSBwcm9jZXNzLmVudi5EQVRBQkFTRV9VUkwgfHwgXCJcIjtcbnZhciBwZ2xvY2FsdXJsID0gXCJwb3N0Z3JlczovL2pvZTphYmNkZWZAbG9jYWxob3N0OjU0MzIvYWJvdFwiO1xudmFyIGRidXJsID0gcHJvY2Vzcy5lbnYuREFUQUJBU0VfVVJMIHx8IHBnbG9jYWx1cmw7XG52YXIgcGcgPSByZXF1aXJlKCdwZycpO1xudmFyIG8gPSBwZztcbmlmICghKHByb2Nlc3MuZW52LkFCT1RfREJOT1NTTCkpIHtcbiAgICBvLmRlZmF1bHRzLnNzbCA9IHRydWU7IC8vIE9ubHkgdXNlZCBpbnRlcm5hbGx5ICFcbn1cbnZhciBkaWFsb2dMb2dnZXIgPSBEaWFsb2dMb2dnZXIubG9nZ2VyKFwic21hcnRib3RcIiwgZGJ1cmwsIHBnKTtcbmZ1bmN0aW9uIHNlbmQobykgeyByZXR1cm4gbzsgfVxuO1xuZnVuY3Rpb24gZGlhbG9nbG9nKGludGVudCwgc2Vzc2lvbiwgcmVzcG9uc2UpIHtcbiAgICB2YXIgc1Jlc3BvbnNlO1xuICAgIHZhciBzQWN0aW9uO1xuICAgIGlmICh0eXBlb2YgcmVzcG9uc2UgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgc0FjdGlvbiA9IFwiXCI7XG4gICAgICAgIHNSZXNwb25zZSA9IHJlc3BvbnNlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdmFyIGFNZXNzYWdlID0gcmVzcG9uc2U7XG4gICAgICAgIHZhciBpTWVzc2FnZSA9IGFNZXNzYWdlLnRvTWVzc2FnZSgpO1xuICAgICAgICBzUmVzcG9uc2UgPSBpTWVzc2FnZS50ZXh0O1xuICAgICAgICBzQWN0aW9uID0gKGlNZXNzYWdlLmVudGl0aWVzICYmIGlNZXNzYWdlLmVudGl0aWVzWzBdKSA/IChKU09OLnN0cmluZ2lmeShpTWVzc2FnZS5lbnRpdGllcyAmJiBpTWVzc2FnZS5lbnRpdGllc1swXSkpIDogXCJcIjtcbiAgICB9XG4gICAgZGlhbG9nTG9nZ2VyKHtcbiAgICAgICAgaW50ZW50OiBpbnRlbnQsXG4gICAgICAgIHNlc3Npb246IHNlc3Npb24sXG4gICAgICAgIHJlc3BvbnNlOiBzUmVzcG9uc2UsXG4gICAgICAgIGFjdGlvbjogc0FjdGlvblxuICAgIH0pO1xuICAgIHNlc3Npb24uc2VuZChyZXNwb25zZSk7XG59XG4vL2NvbnN0IHBnTG9nZ2VyID0gbmV3IFBnTG9nZ2VyKHtcbi8vICBuYW1lOiAndGVzdC1sb2dnZXInLFxuLy8gIGxldmVsOiAnZGVidWcnLFxuLy8gIGNvbm5TdHJpbmc6ICdwb3N0Z3JlczovL3VidW50dUBsb2NhbGhvc3Q6NTQzMi9jaXJjbGVfdGVzdCcsXG4vLyAgdGFibGVOYW1lOiAnd2luc3Rvbl9sb2dzJyxcbi8vfSk7XG4vL3dpbnN0b24uYWRkKHdpbnN0b24udHJhbnNwb3J0cy5GaWxlLCB7IGZpbGVuYW1lOiAnd2luc3Rvbl9vdXQubG9nJywgdGltZXN0YW1wIDogdHJ1ZSB9KTtcbi8vICB3aW5zdG9uLnJlbW92ZSh3aW5zdG9uLnRyYW5zcG9ydHMuQ29uc29sZSk7XG4vL3dpbnN0b24uYWRkKHBnTG9nZ2VyKTtcbi8qXG5jb25zdCBsb2dnZXIgPSBuZXcgd2luc3Rvbi5Mb2dnZXIoe1xuICB0cmFuc3BvcnRzOiBbXG4gICAgbmV3IHdpbnN0b24udHJhbnNwb3J0cy5Db25zb2xlKHtcbiAgICAgIGNvbG9yOiB0cnVlLFxuICAgICAgdGltZXN0YW1wOiB0cnVlLFxuICAgIH0pLFxuICAgIHBnTG9nZ2VyLFxuICBdXG59KTtcbiovXG4vL3BnTG9nZ2VyLmluaXRUYWJsZShkb25lKTtcbnZhciBlbGl6YWJvdCA9IHJlcXVpcmUoJy4uL2V4dGVybi9lbGl6YWJvdC9lbGl6YWJvdC5qcycpO1xuLy9pbXBvcnQgKiBhcyBlbGl6YWJvdCBmcm9tICdlbGl6YWJvdCc7XG52YXIgZGVidWdsb2cgPSBkZWJ1Zygnc21hcnRkaWFsb2cnKTtcbnZhciBQbGFpblJlY29nbml6ZXIgPSByZXF1aXJlKCcuL3BsYWlucmVjb2duaXplcicpO1xuLy92YXIgYnVpbGRlciA9IHJlcXVpcmUoJ2JvdGJ1aWxkZXInKTtcbnZhciBkaXNwYXRjaGVyID0gcmVxdWlyZSgnLi4vbWF0Y2gvZGlzcGF0Y2hlci5qcycpLmRpc3BhdGNoZXI7XG5mdW5jdGlvbiBnZXRDb252ZXJzYXRpb25JZChzZXNzaW9uKSB7XG4gICAgcmV0dXJuIHNlc3Npb24ubWVzc2FnZSAmJlxuICAgICAgICBzZXNzaW9uLm1lc3NhZ2UuYWRkcmVzcyAmJlxuICAgICAgICBzZXNzaW9uLm1lc3NhZ2UuYWRkcmVzcy5jb252ZXJzYXRpb24uaWQ7XG59XG52YXIgZWxpemFib3RzID0ge307XG5mdW5jdGlvbiBnZXRFbGl6YUJvdChpZCkge1xuICAgIGlmICghZWxpemFib3RzW2lkXSkge1xuICAgICAgICBlbGl6YWJvdHNbaWRdID0ge1xuICAgICAgICAgICAgYWNjZXNzOiBuZXcgRGF0ZSgpLFxuICAgICAgICAgICAgZWxpemFib3Q6IG5ldyBlbGl6YWJvdCgpXG4gICAgICAgIH07XG4gICAgfVxuICAgIGVsaXphYm90c1tpZF0uYWNjZXNzID0gbmV3IERhdGUoKTtcbiAgICByZXR1cm4gZWxpemFib3RzW2lkXS5lbGl6YWJvdDtcbn1cbnZhciBuZXdGbG93ID0gdHJ1ZTtcbnZhciBNb2RlbCA9IHJlcXVpcmUoJy4uL21vZGVsL21vZGVsJyk7XG52YXIgRXhlY1NlcnZlciA9IHJlcXVpcmUoJy4uL2V4ZWMvZXhlY3NlcnZlcicpO1xudmFyIHRoZURlZmF1bHRNb2RlbCA9IE1vZGVsLmxvYWRNb2RlbHMoKTtcbnZhciBtb2RlbHMgPSB7fTtcbmZ1bmN0aW9uIGxvYWRNb2RlbChtb2RlbFBhdGgpIHtcbiAgICBtb2RlbFBhdGggPSBtb2RlbFBhdGggfHwgXCJcIjtcbiAgICBpZiAoIW1vZGVsc1ttb2RlbFBhdGhdKSB7XG4gICAgICAgIG1vZGVsc1ttb2RlbFBhdGhdID0gTW9kZWwubG9hZE1vZGVscyhtb2RlbFBhdGgpO1xuICAgIH1cbiAgICByZXR1cm4gbW9kZWxzW21vZGVsUGF0aF07XG59XG5pZiAobmV3Rmxvdykge1xufVxuZWxzZSB7XG59XG5mdW5jdGlvbiBpc0Fub255bW91cyh1c2VyaWQpIHtcbiAgICByZXR1cm4gdXNlcmlkLmluZGV4T2YoXCJhbm86XCIpID09PSAwO1xufVxuZnVuY3Rpb24gcmVzdHJpY3RMb2dnZWRPbihzZXNzaW9uLCBhcnIpIHtcbiAgICB2YXIgdXNlcmlkID0gc2Vzc2lvbi5tZXNzYWdlLmFkZHJlc3NcbiAgICAgICAgJiYgc2Vzc2lvbi5tZXNzYWdlLmFkZHJlc3MudXNlclxuICAgICAgICAmJiBzZXNzaW9uLm1lc3NhZ2UuYWRkcmVzcy51c2VyLmlkIHx8IFwiXCI7XG4gICAgaWYgKHByb2Nlc3MuZW52LkFCT1RfRU1BSUxfVVNFUiAmJiBpc0Fub255bW91cyh1c2VyaWQpKSB7XG4gICAgICAgIGlmIChhcnIubGVuZ3RoIDwgNikge1xuICAgICAgICAgICAgcmV0dXJuIGFycjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbGVuID0gYXJyLmxlbmd0aDtcbiAgICAgICAgdmFyIHJlcyA9IGFyci5zbGljZSgwLCBNYXRoLm1pbihNYXRoLm1heChNYXRoLmZsb29yKGFyci5sZW5ndGggLyAzKSwgNyksIGFyci5sZW5ndGgpKTtcbiAgICAgICAgaWYgKHR5cGVvZiBhcnJbMF0gPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHZhciBkZWx0YSA9IGxlbiAtIHJlcy5sZW5ndGg7XG4gICAgICAgICAgICByZXMucHVzaChcIi4uLiBhbmQgXCIgKyBkZWx0YSArIFwiIG1vcmUgZW50cmllcyBmb3IgcmVnaXN0ZXJlZCB1c2Vyc1wiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cbiAgICByZXR1cm4gYXJyO1xufVxuLypcbmV4cG9ydCBjbGFzcyBTaW1wbGVSZWNvZ25pemVyIGltcGxlbWVudHMgYnVpbGRlci5JSW50ZW50UmVjb2duaXplciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuXG4gIH1cblxuICByZWNvZ25pemUoY29udGV4dDogYnVpbGRlci5JUmVjb2duaXplQ29udGV4dCwgY2FsbGJhY2s6IChlcnI6IEVycm9yLCByZXN1bHQ6IGJ1aWxkZXIuSUludGVudFJlY29nbml6ZXJSZXN1bHQpID0+IHZvaWQpOiB2b2lkIHtcbiAgICB2YXIgdSA9IHt9IGFzIGJ1aWxkZXIuSUludGVudFJlY29nbml6ZXJSZXN1bHQ7XG5cbiAgICBkZWJ1Z2xvZyhcInJlY29nbml6aW5nIFwiICsgY29udGV4dC5tZXNzYWdlLnRleHQpO1xuICAgIGlmIChjb250ZXh0Lm1lc3NhZ2UudGV4dC5pbmRleE9mKFwic3RhcnRcIikgPj0gMCkge1xuICAgICAgdS5pbnRlbnQgPSBcIlNob3dFbnRpdHlcIjtcbiAgICAgIHUuc2NvcmUgPSAwLjk7XG4gICAgICB2YXIgZTEgPSB7fSBhcyBidWlsZGVyLklFbnRpdHk7XG4gICAgICBlMS5zdGFydEluZGV4ID0gXCJzdGFydCBcIi5sZW5ndGg7XG4gICAgICBlMS5lbmRJbmRleCA9IGNvbnRleHQubWVzc2FnZS50ZXh0Lmxlbmd0aDtcbiAgICAgIGUxLnNjb3JlID0gMC4zO1xuICAgICAgdS5lbnRpdGllcyA9IFtlMV07XG4gICAgICBjYWxsYmFjayh1bmRlZmluZWQsIHUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChjb250ZXh0Lm1lc3NhZ2UudGV4dC5pbmRleE9mKFwidHJhaW5cIikgPj0gMCkge1xuICAgICAgdS5pbnRlbnQgPSBcInRyYWluXCI7XG4gICAgICB1LnNjb3JlID0gMC45O1xuICAgICAgdmFyIGUxID0ge30gYXMgYnVpbGRlci5JRW50aXR5O1xuICAgICAgZTEuc3RhcnRJbmRleCA9IFwidHJhaW4gXCIubGVuZ3RoO1xuICAgICAgZTEuZW5kSW5kZXggPSBjb250ZXh0Lm1lc3NhZ2UudGV4dC5sZW5ndGg7XG4gICAgICBlMS5zY29yZSA9IDAuMztcbiAgICAgIHUuZW50aXRpZXMgPSBbZTFdO1xuICAgICAgY2FsbGJhY2sodW5kZWZpbmVkLCB1KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGNvbnRleHQubWVzc2FnZS50ZXh0LmluZGV4T2YoXCJsZWFyblwiKSA+PSAwKSB7XG4gICAgICB1LmludGVudCA9IFwibGVhcm5cIjtcbiAgICAgIHUuc2NvcmUgPSAwLjk7XG4gICAgICB2YXIgZTEgPSB7fSBhcyBidWlsZGVyLklFbnRpdHk7XG4gICAgICBlMS50eXBlID0gXCJ0cmFpbkZhY3RcIjtcbiAgICAgIGUxLnN0YXJ0SW5kZXggPSBcInRyYWluIFwiLmxlbmd0aDtcbiAgICAgIGUxLmVuZEluZGV4ID0gY29udGV4dC5tZXNzYWdlLnRleHQubGVuZ3RoO1xuICAgICAgZTEuc2NvcmUgPSAwLjM7XG4gICAgICB1LmVudGl0aWVzID0gW2UxXTtcbiAgICAgIGNhbGxiYWNrKHVuZGVmaW5lZCwgdSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChjb250ZXh0Lm1lc3NhZ2UudGV4dC5pbmRleE9mKFwiaGVscFwiKSA+PSAwKSB7XG4gICAgICB1LmludGVudCA9IFwiaGVscFwiO1xuICAgICAgdS5zY29yZSA9IDAuOTtcbiAgICAgIHZhciBlMSA9IHt9IGFzIGJ1aWxkZXIuSUVudGl0eTtcbiAgICAgIGUxLnN0YXJ0SW5kZXggPSBcInRyYWluIFwiLmxlbmd0aDtcbiAgICAgIGUxLmVuZEluZGV4ID0gY29udGV4dC5tZXNzYWdlLnRleHQubGVuZ3RoO1xuICAgICAgZTEuc2NvcmUgPSAwLjM7XG4gICAgICB1LmVudGl0aWVzID0gW2UxXTtcbiAgICAgIGNhbGxiYWNrKHVuZGVmaW5lZCwgdSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChjb250ZXh0Lm1lc3NhZ2UudGV4dC5pbmRleE9mKFwiZXhpdFwiKSA+PSAwKSB7XG4gICAgICB1LmludGVudCA9IFwiZXhpdFwiO1xuICAgICAgdS5zY29yZSA9IDAuOTtcbiAgICAgIHZhciBlMSA9IHt9IGFzIGJ1aWxkZXIuSUVudGl0eTtcbiAgICAgIGUxLnN0YXJ0SW5kZXggPSBcImV4aXQgXCIubGVuZ3RoO1xuICAgICAgZTEuZW5kSW5kZXggPSBjb250ZXh0Lm1lc3NhZ2UudGV4dC5sZW5ndGg7XG4gICAgICBlMS5zY29yZSA9IDAuMztcbiAgICAgIHUuZW50aXRpZXMgPSBbZTFdO1xuICAgICAgY2FsbGJhY2sodW5kZWZpbmVkLCB1KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGNvbnRleHQubWVzc2FnZS50ZXh0LmluZGV4T2YoXCJ3cm9uZ1wiKSA+PSAwKSB7XG4gICAgICB1LmludGVudCA9IFwid3JvbmdcIjtcbiAgICAgIHUuc2NvcmUgPSAwLjk7XG4gICAgICB2YXIgZTEgPSB7fSBhcyBidWlsZGVyLklFbnRpdHk7XG4gICAgICBlMS5zdGFydEluZGV4ID0gXCJleGl0IFwiLmxlbmd0aDtcbiAgICAgIGUxLmVuZEluZGV4ID0gY29udGV4dC5tZXNzYWdlLnRleHQubGVuZ3RoO1xuICAgICAgZTEuc2NvcmUgPSAwLjM7XG4gICAgICB1LmVudGl0aWVzID0gW2UxXTtcbiAgICAgIGNhbGxiYWNrKHVuZGVmaW5lZCwgdSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGRlYnVnbG9nKCdyZWNvZ25pemluZyBub3RoaW5nJyk7XG4gICAgdS5pbnRlbnQgPSBcIk5vbmVcIjtcbiAgICB1LnNjb3JlID0gMC4xO1xuICAgIHZhciBlMSA9IHt9IGFzIGJ1aWxkZXIuSUVudGl0eTtcbiAgICBlMS5zdGFydEluZGV4ID0gXCJleGl0IFwiLmxlbmd0aDtcbiAgICBlMS5lbmRJbmRleCA9IGNvbnRleHQubWVzc2FnZS50ZXh0Lmxlbmd0aDtcbiAgICBlMS5zY29yZSA9IDAuMTtcbiAgICB1LmVudGl0aWVzID0gW107XG4gICAgY2FsbGJhY2sodW5kZWZpbmVkLCB1KTtcbiAgfVxufVxuKi9cbnZhciBhVHJhaW5SZXBsaWVzID0gW1wiVGhhbmsgeW91IGZvciBzaGFyaW5nIHRoaXMgc3VnZ2VzdGlvbiB3aXRoIHVzXCIsXG4gICAgXCJUaGFuayBmb3IgZm9yIHRoaXMgdmFsdWFibGUgaW5mb3JtYXRpb24uXCIsXG4gICAgXCJUaGFuayBmb3IgZm9yIHRoaXMgaW50ZXJlc3RpbmcgZmFjdCFcIixcbiAgICBcIlRoYXRzIGEgcGxldGhvcmlhIG9mIGluZm9ybWF0aW9uLlwiLFxuICAgIFwiVGhhdCdzIGEgbnVnZ2V0IG9mIGluZm9ybWF0aW9uLlwiLFxuICAgIFwiTG92ZWx5LCBJIG1heSBjb25zaWRlciB5b3UgaW5wdXQuXCIsXG4gICAgXCJXZWxsIGRvbmUsIGFueXRoaW5nIG1vcmUgdG8gbGV0IG1lIGtub3c/XCIsXG4gICAgXCJJIGRvIGFwcHJlY2lhdGUgeW91ciB0ZWFjaGluZyBhbmQgbXkgbGVhcm5pbmcgZXhwZXJpZW5jZSwgb3Igd2FzIGl0IHRoZSBvdGhlciB3YXkgcm91bmQ/XCIsXG4gICAgXCJZb3VyIGhlbHBmdWwgaW5wdXQgaGFzIGJlZW4gc3RvcmVkIGluIHNvbWUgZHVzdHkgY29ybmVyIG9mIHRoZSBXb3JsZCB3aWRlIHdlYiFcIixcbiAgICBcIlRoYW5rIHlvdSBmb3IgbXkgbGVhcm5pbmcgZXhwZXJpZW5jZSFcIixcbiAgICBcIkkgaGF2ZSBpbmNvcnBvcmF0ZWQgeW91ciB2YWx1YWJsZSBzdWdnZXN0aW9uIGluIHRoZSB3aXNkb20gb2YgdGhlIGludGVybmV0XCJcbl07XG52YXIgYVRyYWluRGlhbG9nID0gYVRyYWluUmVwbGllcztcbnZhciBhVHJhaW5FeGl0SGludCA9IFtcbiAgICBcIlxcbnR5cGUgXFxcImRvbmVcXFwiIHdoZW4geW91IGFyZSBkb25lIHRyYWluaW5nIG1lLlwiLFxuICAgIFwiXCIsXG4gICAgXCJcIixcbiAgICBcIlwiLFxuICAgIFwiXFxucmVtZW1iZXIsIHlvdSBhcmUgc3R1Y2sgaGVyZSBpbnN0cnVjdGluZyBtZSwgdHlwZSBcXFwiZG9uZVxcXCIgdG8gcmV0dXJuLlwiLFxuICAgIFwiXCJdO1xudmFyIGFFbnRlclRyYWluID0gWydTbyB5b3UgdGhpbmsgdGhpcyBpcyB3cm9uZz8gWW91IGNhbiBvZmZlciB5b3VyIGFkdmlzZSBoZXJlLlxcbiBUeXBlIFwiZG9uZVwiIGlmIHlvdSBhcmUgZG9uZSB3aXRoIGluc3RydWN0aW5nIG1lJyxcbiAgICAnRmVlbCBmcmVlIHRvIG9mZmVyIG1lIHlvdXIgYmV0dGVyIHNvbHV0aW9uIGhlcmUuXFxuVHlwZSBcImRvbmVcIiBpZiB5b3UgYXJlIGRvbmUgd2l0aCBpbnN0cnVjdGluZyBtZScsXG4gICAgJ1NvbWUgc2F5IFwiVGhlIHNlY3JldCB0byBoYXBwaW5lc3MgaXMgdG8gbG93ZXIgeW91ciBleHBlY3RhdGlvbnMgdG8gdGhlIHBvaW50IHRoZXkgYXJlIGFscmVhZHkgbWV0LlwiLCBcXG50IGlmIHlvdSBjb3VsZCBoZWxwIG1lIHRvIGJlY29tZSBiZXR0ZXIsIGluc3RydWN0IG1lLlxcbiBUeXBlIFwiZG9uZVwiIGlmIHlvdSBhcmUgZG9uZSB3aXRoIHRlYWNoaW5nIG1lJyxcbiAgICAnRmVlbCBmcmVlIHRvIG9mZmVyIG1lIHlvdXIgYmV0dGVyIHNvbHV0aW9uIGhlcmUuXFxuIFR5cGUgXCJkb25lXCIgaWYgeW91IGFyZSBkb25lIHdpdGggaW5zdHJ1Y3RpbmcgbWUnLFxuICAgICdGZWVsIGZyZWUgdG8gb2ZmZXIgbWUgeW91ciBiZXR0ZXIgc29sdXRpb24gaGVyZS5cXG4gVHlwZSBcImRvbmVcIiBpZiB5b3UgYXJlIGRvbmUgd2l0aCBpbnN0cnVjdGluZyBtZScsXG5dO1xudmFyIGFCYWNrRnJvbVRyYWluaW5nID0gW1xuICAgICdQdXVoLCBiYWNrIGZyb20gdHJhaW5pbmchIE5vdyBmb3IgdGhlIGVhc3kgcGFydCAuLi5cXG4gYXNrIG1lIGEgbmV3IHF1ZXN0aW9uLicsXG4gICAgJ0xpdmUgYW5kIGRvblxcJ3QgbGVhcm4sIHRoYXRcXCdzIHVzLiBOYWFoLCB3ZVxcJ2xsIHNlZS5cXG5Bc2sgbWUgYW5vdGhlciBxdWVzdGlvbi4nLFxuICAgICdUaGUgc2VjcmV0IHRvIGhhcHBpbmVzcyBpcyB0byBsb3dlciB5b3VyIGV4cGVjdGF0aW9ucyB0byB0aGUgcG9pbnQgdGhleSBhcmUgYWxyZWFkeSBtZXQuXFxuIEFzayBtZSBhIHF1ZXN0aW9uLicsXG4gICAgJ1RoYW5rcyBmb3IgaGF2aW5nIHRoaXMgbGVjdHVyZSBzZXNzaW9uLCBub3cgaSBhbSBiYWNrIHRvIG91ciB1c3VhbCBzZWxmLlxcbiBBc2sgbWUgYSBxdWVzdGlvbi4nXG5dO1xudmFyIGFUcmFpbk5vS2xpbmdvbiA9IFtcbiAgICBcIkhlIHdobyBtYXN0ZXIgdGhlIGRhcmsgYXJ0cyBvZiBTQVAgbXVzdCBub3QgZHdlbGwgaW4gdGhlIGVhcnRobHkgcmVhbG1zIG9mIFN0YXJ0IFRyZWsuXCIsXG4gICAgXCJTQVAgaXMgYSBjbG91ZCBjb21wYW55LCBub3QgYSBzcGFjZSBjb21wYW55LlwiLFxuICAgIFwiVGhlIGRlcHRoIG9mIFIvMyBhcmUgZGVlcGVyIHRoYW4gRGVlcCBTcGFjZSA0Mi5cIixcbiAgICBcIk15IGJyYWlucG93ZXIgaXMgZnVsbHkgYWJzb3JiZWQgd2l0aCBtYXN0ZXJpbmcgb3RoZXIgcmVhbG1zLlwiLFxuICAgIFwiRm9yIHRoZSB3b3NhcCwgdGhlIHNreSBpcyB0aGUgbGltaXQuIEZlZWwgZnJlZSB0byBjaGVjayBvdXQgbmFzYS5nb3YgLlwiLFxuICAgIFwiVGhlIGZ1dHVyZSBpcyBTQVAgb3IgSUJNIGJsdWUsIG5vdCBzcGFjZSBibGFjay5cIixcbiAgICBcIlRoYXQncyBsZWZ0IHRvIHNvbWUgbXVza3kgZnV0dXJlLlwiXG5dO1xuZXhwb3J0cy5hUmVzcG9uc2VzT25Ub29Mb25nID0gW1xuICAgIFwiWW91ciBpbnB1dCBzaG91bGQgYmUgZWxvcXVlbnQgaW4gaXQncyBicmV2aXR5LiBUaGlzIG9uZSB3YXMgdG9vIGxvbmcuXCIsXG4gICAgXCJteSB3aXNkb20gaXMgc2V2ZXJseSBib3VuZCBieSBteSBsaW1pdGVkIGlucHV0IHByb2Nlc3NpbmcgY2FwYWJpbGl0aWVzLiBDb3VsZCB5b3UgZm9ybXVsYXRlIGEgc2hvcnRlciBpbnB1dD8gVGhhbmsgeW91LlwiLFxuICAgIFwiVGhlIGxlbmd0aCBvZiB5b3UgaW5wdXQgaW5kaWNhdGVzIHlvdSBwcm9iYWJseSBrbm93IG1vcmUgYWJvdXQgdGhlIHRvcGljIHRoYW4gbWU/IENhbiBpIGh1bWJseSBhc2sgeW91IHRvIGZvcm11bGF0ZSBhIHNob3J0ZXIgcXVlc3Rpb24/XCIsXG4gICAgJ1xcXCJXaGF0IGV2ZXIgeW91IHdhbnQgdG8gdGVhY2gsIGJlIGJyaWVmXFxcIiAoSG9yYWNlKS4gV2hpbGUgdGhpcyBkb2VzIG5vdCBhbHdheXMgYXBwbGllcyB0byBteSBhbnN3ZXJzLCBpdCBpcyByZXF1aXJlIGZvciB5b3VyIHF1ZXN0aW9ucy4gUGxlYXNlIHRyeSBhZ2FpbiB3aXRoIGEgcmVmaW5lZCBxdWVzdGlvbnMuJyxcbiAgICAnSSB1bmRlcnN0YW5kIG1vcmUgdGhhbiA0LWxldHRlciB3b3JkcywgYnV0IG5vdCBtb3JlIHRoYW4gMjAgd29yZCBzZW50ZW5jZXMuIFBsZWFzZSB0cnkgdG8gc2hvcnRlbiB5b3VyIGlucHV0LicsXG4gICAgJ3RoZSBza3kgaXMgdGhlIGxpbWl0PyBBaXIgZm9yY2UgbWVtYmVyIG9yIG5vdCwgeW91IGNhbiBhc2sgbG9uZ2VyIHF1ZXN0aW9ucyB0aGFuIFxcXCJ0aGUgc2t5XFxcIiwgYnV0IG5vdCB0aGlzIGxvbmcnLFxuICAgICdNeSBhbnN3ZXJzIG1heSBiZSBleGhhdXN0aXZlLCBidXQgSSB1bmRlcnN0YW5kIG1vcmUgdGhhbiA0LWxldHRlciB3b3JkcywgYnV0IG5vdCBtb3JlIHRoYW4gMjAgd29yZCBzZW50ZW5jZXMuIFNvcnJ5LicsXG4gICAgJ091ciBjb252ZXJzYXRpb24gbXVzdCBiZSBoaWdobHkgYXNzeW1tZXRyaWM6IG15IGFuc3dlcnMgbWF5IGJlIHZlcmJvc2UgYW5kIGV4aGF1c3RpdmUgYW5kIGZ1enp5LCBxdWVzdGlvbnMgYW5kIGlucHV0IG11c3QgYmUgYnJpZWYuIFRyeSB0byByZWZvcm11bGF0ZSBpdCcsXG5dO1xuZXhwb3J0cy5tZXRhd29yZHNEZXNjcmlwdGlvbnMgPSB7XG4gICAgXCJjYXRlZ29yeVwiOiBcImFuIGF0dHJpYnV0ZSBvZiBhIHJlY29yZCBpbiBhIG1vZGVsLCBleGFtcGxlOiBhIFBsYW5ldCBoYXMgYSBcXFwibmFtZVxcXCIgYXR0cmlidXRlXCIsXG4gICAgXCJkb21haW5cIjogXCJhIGdyb3VwIG9mIGZhY3RzIHdoaWNoIGFyZSB0eXBpY2FsbHkgdW5yZWxhdGVkXCIsXG4gICAgXCJrZXlcIjogXCJhbiBhdHRyaWJ1dGUgdmFsdWUgKG9mIGEgY2F0ZWdvcnkpIHdoaWNoICBpcyB1bmlxdWUgZm9yIHRoZSByZWNvcmRcIixcbiAgICBcInRvb2xcIjogXCJpcyBwb3RlbnRpYWx5IGNvbW1hbmQgdG8gZXhlY3V0ZVwiLFxuICAgIFwicmVjb3JkXCI6IFwiYSBzcGVjaWZpYyBzZXQgb2YgXFxcImZhY3RcXFwicyBvZiBhIGRvbWFpbiwgYSBcXFwicmVjb3JkXFxcIiBoYXMgYSBzZXQgb2YgYXR0cmlidXRlcyB2YWx1ZXMgKFxcXCJmYWN0XFxcInMpIG9mIHRoZSBjYXRlZ29yaWVzLCBvZnRlbiBhIHJlY29yZCBoYXMgYSBcXFwia2V5XFxcIlwiLFxuICAgIFwiZmFjdFwiOiBcImEgc3BlY2lmaWMgY2F0ZWdvcnkgdmFsdWUgb2YgYSByZWNvcmQgaW4gYSBkb21haW4sIG1heSBiZSBhIFxcXCJrZXlcXFwiIHZhbHVlXCIsXG59O1xuZnVuY3Rpb24gZ2V0UmFuZG9tUmVzdWx0KGFycikge1xuICAgIHJldHVybiBhcnJbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogYXJyLmxlbmd0aCkgJSBhcnIubGVuZ3RoXTtcbn1cbnZhciBTaW1wbGVVcERvd25SZWNvZ25pemVyID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTaW1wbGVVcERvd25SZWNvZ25pemVyKCkge1xuICAgIH1cbiAgICBTaW1wbGVVcERvd25SZWNvZ25pemVyLnByb3RvdHlwZS5yZWNvZ25pemUgPSBmdW5jdGlvbiAoY29udGV4dCwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIHUgPSB7fTtcbiAgICAgICAgZGVidWdsb2coXCJyZWNvZ25pemluZyBcIiArIGNvbnRleHQubWVzc2FnZS50ZXh0KTtcbiAgICAgICAgaWYgKGNvbnRleHQubWVzc2FnZS50ZXh0LmluZGV4T2YoXCJkb3duXCIpID49IDApIHtcbiAgICAgICAgICAgIHUuaW50ZW50ID0gXCJpbnRlbnQuZG93blwiO1xuICAgICAgICAgICAgdS5zY29yZSA9IDAuOTtcbiAgICAgICAgICAgIHZhciBlMSA9IHt9O1xuICAgICAgICAgICAgZTEuc3RhcnRJbmRleCA9IFwic3RhcnQgXCIubGVuZ3RoO1xuICAgICAgICAgICAgZTEuZW5kSW5kZXggPSBjb250ZXh0Lm1lc3NhZ2UudGV4dC5sZW5ndGg7XG4gICAgICAgICAgICBlMS5zY29yZSA9IDAuMztcbiAgICAgICAgICAgIHUuZW50aXRpZXMgPSBbZTFdO1xuICAgICAgICAgICAgY2FsbGJhY2sodW5kZWZpbmVkLCB1KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29udGV4dC5tZXNzYWdlLnRleHQuaW5kZXhPZihcInVwXCIpID49IDApIHtcbiAgICAgICAgICAgIHUuaW50ZW50ID0gXCJpbnRlbnQudXBcIjtcbiAgICAgICAgICAgIHUuc2NvcmUgPSAwLjk7XG4gICAgICAgICAgICB2YXIgZTEgPSB7fTtcbiAgICAgICAgICAgIGUxLnN0YXJ0SW5kZXggPSBcInVwXCIubGVuZ3RoO1xuICAgICAgICAgICAgZTEuZW5kSW5kZXggPSBjb250ZXh0Lm1lc3NhZ2UudGV4dC5sZW5ndGg7XG4gICAgICAgICAgICBlMS5zY29yZSA9IDAuMztcbiAgICAgICAgICAgIHUuZW50aXRpZXMgPSBbZTFdO1xuICAgICAgICAgICAgY2FsbGJhY2sodW5kZWZpbmVkLCB1KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29udGV4dC5tZXNzYWdlLnRleHQuaW5kZXhPZihcImRvbmVcIikgPj0gMCkge1xuICAgICAgICAgICAgdS5pbnRlbnQgPSBcImludGVudC51cFwiO1xuICAgICAgICAgICAgdS5zY29yZSA9IDAuOTtcbiAgICAgICAgICAgIHZhciBlMSA9IHt9O1xuICAgICAgICAgICAgZTEuc3RhcnRJbmRleCA9IFwidXBcIi5sZW5ndGg7XG4gICAgICAgICAgICBlMS5lbmRJbmRleCA9IGNvbnRleHQubWVzc2FnZS50ZXh0Lmxlbmd0aDtcbiAgICAgICAgICAgIGUxLnNjb3JlID0gMC4zO1xuICAgICAgICAgICAgdS5lbnRpdGllcyA9IFtlMV07XG4gICAgICAgICAgICBjYWxsYmFjayh1bmRlZmluZWQsIHUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb250ZXh0Lm1lc3NhZ2UudGV4dC5pbmRleE9mKFwiZXhpdFwiKSA+PSAwKSB7XG4gICAgICAgICAgICB1LmludGVudCA9IFwiaW50ZW50LnVwXCI7XG4gICAgICAgICAgICB1LnNjb3JlID0gMC45O1xuICAgICAgICAgICAgdmFyIGUxID0ge307XG4gICAgICAgICAgICBlMS5zdGFydEluZGV4ID0gXCJ1cFwiLmxlbmd0aDtcbiAgICAgICAgICAgIGUxLmVuZEluZGV4ID0gY29udGV4dC5tZXNzYWdlLnRleHQubGVuZ3RoO1xuICAgICAgICAgICAgZTEuc2NvcmUgPSAwLjM7XG4gICAgICAgICAgICB1LmVudGl0aWVzID0gW2UxXTtcbiAgICAgICAgICAgIGNhbGxiYWNrKHVuZGVmaW5lZCwgdSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbnRleHQubWVzc2FnZS50ZXh0LmluZGV4T2YoXCJxdWl0XCIpID49IDApIHtcbiAgICAgICAgICAgIHUuaW50ZW50ID0gXCJpbnRlbnQudXBcIjtcbiAgICAgICAgICAgIHUuc2NvcmUgPSAwLjk7XG4gICAgICAgICAgICB2YXIgZTEgPSB7fTtcbiAgICAgICAgICAgIGUxLnN0YXJ0SW5kZXggPSBcInVwXCIubGVuZ3RoO1xuICAgICAgICAgICAgZTEuZW5kSW5kZXggPSBjb250ZXh0Lm1lc3NhZ2UudGV4dC5sZW5ndGg7XG4gICAgICAgICAgICBlMS5zY29yZSA9IDAuMztcbiAgICAgICAgICAgIHUuZW50aXRpZXMgPSBbZTFdO1xuICAgICAgICAgICAgY2FsbGJhY2sodW5kZWZpbmVkLCB1KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBkZWJ1Z2xvZygncmVjb2duaXppbmcgbm90aGluZycpO1xuICAgICAgICB1LmludGVudCA9IFwiTm9uZVwiO1xuICAgICAgICB1LnNjb3JlID0gMC4xO1xuICAgICAgICB2YXIgZTEgPSB7fTtcbiAgICAgICAgZTEuc3RhcnRJbmRleCA9IFwiZXhpdCBcIi5sZW5ndGg7XG4gICAgICAgIGUxLmVuZEluZGV4ID0gY29udGV4dC5tZXNzYWdlLnRleHQubGVuZ3RoO1xuICAgICAgICBlMS5zY29yZSA9IDAuMTtcbiAgICAgICAgdS5lbnRpdGllcyA9IFtdO1xuICAgICAgICBjYWxsYmFjayh1bmRlZmluZWQsIHUpO1xuICAgIH07XG4gICAgcmV0dXJuIFNpbXBsZVVwRG93blJlY29nbml6ZXI7XG59KCkpO1xuZXhwb3J0cy5TaW1wbGVVcERvd25SZWNvZ25pemVyID0gU2ltcGxlVXBEb3duUmVjb2duaXplcjtcbnZhciBBbnlPYmplY3QgPSBPYmplY3Q7XG4vLyBnbG9iYWxUdW5uZWwuaW5pdGlhbGl6ZSh7XG4vLyAgaG9zdDogJ3Byb3h5LmV4eHhhbXBsZS5jb20nLFxuLy8gIHBvcnQ6IDgwODBcbi8vIH0pXG4vLyBDcmVhdGUgYm90IGFuZCBiaW5kIHRvIGNvbnNvbGVcbi8vIHZhciBjb25uZWN0b3IgPSBuZXcgaHRtbGNvbm5lY3Rvci5IVE1MQ29ubmVjdG9yKClcbi8vIGNvbm5lY3Rvci5zZXRBbnN3ZXJIb29rKGZ1bmN0aW9uIChzQW5zd2VyKSB7XG4vLyAgY29uc29sZS5sb2coJ0dvdCBhbnN3ZXIgOiAnICsgc0Fuc3dlciArICdcXG4nKVxuLy8gfSlcbnZhciBib3Q7XG4vLyBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbi8vICAgY29ubmVjdG9yLnByb2Nlc3NNZXNzYWdlKCdzdGFydCB1bml0IHRlc3QgQUJDICcpXG4vLyB9LCA1MDAwKVxudmFyIGZzID0gcmVxdWlyZSgnZnMnKTtcbnZhciBvSlNPTiA9IEpTT04ucGFyc2UoJycgKyBmcy5yZWFkRmlsZVN5bmMoJy4vcmVzb3VyY2VzL21vZGVsL2ludGVudHMuanNvbicpKTtcbnZhciBvUnVsZXMgPSBQbGFpblJlY29nbml6ZXIucGFyc2VSdWxlcyhvSlNPTik7XG4vLyB2YXIgUmVjb2duaXplciA9IG5ldyAocmVjb2duaXplci5SZWdFeHBSZWNvZ25pemVyKShvUnVsZXMpO1xuZnVuY3Rpb24gbG9nUXVlcnkoc2Vzc2lvbiwgaW50ZW50LCByZXN1bHQpIHtcbiAgICBmcy5hcHBlbmRGaWxlKCcuL2xvZ3Mvc2hvd21lcXVlcmllcy50eHQnLCBcIlxcblwiICsgSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICB0ZXh0OiBzZXNzaW9uLm1lc3NhZ2UudGV4dCxcbiAgICAgICAgdGltZXN0YW1wOiBzZXNzaW9uLm1lc3NhZ2UudGltZXN0YW1wLFxuICAgICAgICBpbnRlbnQ6IGludGVudCxcbiAgICAgICAgcmVzOiByZXN1bHQgJiYgcmVzdWx0Lmxlbmd0aCAmJiBNYXRjaC5Ub29sTWF0Y2guZHVtcE5pY2UocmVzdWx0WzBdKSB8fCBcIjBcIixcbiAgICAgICAgY29udmVyc2F0aW9uSWQ6IHNlc3Npb24ubWVzc2FnZS5hZGRyZXNzXG4gICAgICAgICAgICAmJiBzZXNzaW9uLm1lc3NhZ2UuYWRkcmVzcy5jb252ZXJzYXRpb25cbiAgICAgICAgICAgICYmIHNlc3Npb24ubWVzc2FnZS5hZGRyZXNzLmNvbnZlcnNhdGlvbi5pZCB8fCBcIlwiLFxuICAgICAgICB1c2VyaWQ6IHNlc3Npb24ubWVzc2FnZS5hZGRyZXNzXG4gICAgICAgICAgICAmJiBzZXNzaW9uLm1lc3NhZ2UuYWRkcmVzcy51c2VyXG4gICAgICAgICAgICAmJiBzZXNzaW9uLm1lc3NhZ2UuYWRkcmVzcy51c2VyLmlkIHx8IFwiXCJcbiAgICB9KSwgZnVuY3Rpb24gKGVyciwgcmVzKSB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgIGRlYnVnbG9nKFwibG9nZ2luZyBmYWlsZWQgXCIgKyBlcnIpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5mdW5jdGlvbiBsb2dRdWVyeVdoYXRJcyhzZXNzaW9uLCBpbnRlbnQsIHJlc3VsdCkge1xuICAgIGZzLmFwcGVuZEZpbGUoJy4vbG9ncy9zaG93bWVxdWVyaWVzLnR4dCcsIFwiXFxuXCIgKyBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIHRleHQ6IHNlc3Npb24ubWVzc2FnZS50ZXh0LFxuICAgICAgICB0aW1lc3RhbXA6IHNlc3Npb24ubWVzc2FnZS50aW1lc3RhbXAsXG4gICAgICAgIGludGVudDogaW50ZW50LFxuICAgICAgICByZXM6IHJlc3VsdCAmJiByZXN1bHQubGVuZ3RoICYmIFdoYXRJcy5kdW1wTmljZShyZXN1bHRbMF0pIHx8IFwiMFwiLFxuICAgICAgICBjb252ZXJzYXRpb25JZDogc2Vzc2lvbi5tZXNzYWdlLmFkZHJlc3NcbiAgICAgICAgICAgICYmIHNlc3Npb24ubWVzc2FnZS5hZGRyZXNzLmNvbnZlcnNhdGlvblxuICAgICAgICAgICAgJiYgc2Vzc2lvbi5tZXNzYWdlLmFkZHJlc3MuY29udmVyc2F0aW9uLmlkIHx8IFwiXCIsXG4gICAgICAgIHVzZXJpZDogc2Vzc2lvbi5tZXNzYWdlLmFkZHJlc3NcbiAgICAgICAgICAgICYmIHNlc3Npb24ubWVzc2FnZS5hZGRyZXNzLnVzZXJcbiAgICAgICAgICAgICYmIHNlc3Npb24ubWVzc2FnZS5hZGRyZXNzLnVzZXIuaWQgfHwgXCJcIlxuICAgIH0pLCBmdW5jdGlvbiAoZXJyLCByZXMpIHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgZGVidWdsb2coXCJsb2dnaW5nIGZhaWxlZCBcIiArIGVycik7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGxvZ1F1ZXJ5V2hhdElzVHVwZWwoc2Vzc2lvbiwgaW50ZW50LCByZXN1bHQpIHtcbiAgICBmcy5hcHBlbmRGaWxlKCcuL2xvZ3Mvc2hvd21lcXVlcmllcy50eHQnLCBcIlxcblwiICsgSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICB0ZXh0OiBzZXNzaW9uLm1lc3NhZ2UudGV4dCxcbiAgICAgICAgdGltZXN0YW1wOiBzZXNzaW9uLm1lc3NhZ2UudGltZXN0YW1wLFxuICAgICAgICBpbnRlbnQ6IGludGVudCxcbiAgICAgICAgcmVzOiByZXN1bHQgJiYgcmVzdWx0Lmxlbmd0aCAmJiBXaGF0SXMuZHVtcE5pY2VUdXBlbChyZXN1bHRbMF0pIHx8IFwiMFwiLFxuICAgICAgICBjb252ZXJzYXRpb25JZDogc2Vzc2lvbi5tZXNzYWdlLmFkZHJlc3NcbiAgICAgICAgICAgICYmIHNlc3Npb24ubWVzc2FnZS5hZGRyZXNzLmNvbnZlcnNhdGlvblxuICAgICAgICAgICAgJiYgc2Vzc2lvbi5tZXNzYWdlLmFkZHJlc3MuY29udmVyc2F0aW9uLmlkIHx8IFwiXCIsXG4gICAgICAgIHVzZXJpZDogc2Vzc2lvbi5tZXNzYWdlLmFkZHJlc3NcbiAgICAgICAgICAgICYmIHNlc3Npb24ubWVzc2FnZS5hZGRyZXNzLnVzZXJcbiAgICAgICAgICAgICYmIHNlc3Npb24ubWVzc2FnZS5hZGRyZXNzLnVzZXIuaWQgfHwgXCJcIlxuICAgIH0pLCBmdW5jdGlvbiAoZXJyLCByZXMpIHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgZGVidWdsb2coXCJsb2dnaW5nIGZhaWxlZCBcIiArIGVycik7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbnZhciBnd29yZHMgPSB7fTtcbi8qKlxuICogQ29uc3RydWN0IGEgYm90XG4gKiBAcGFyYW0gY29ubmVjdG9yIHtDb25uZWN0b3J9IHRoZSBjb25uZWN0b3IgdG8gdXNlXG4gKiBIVE1MQ29ubmVjdG9yXG4gKiBvciBjb25uZWN0b3IgPSBuZXcgYnVpbGRlci5Db25zb2xlQ29ubmVjdG9yKCkubGlzdGVuKClcbiAqL1xuZnVuY3Rpb24gbWFrZUJvdChjb25uZWN0b3IsIG1vZGVsUGF0aCkge1xuICAgIHZhciB0aGVNb2RlbCA9IGxvYWRNb2RlbChtb2RlbFBhdGgpO1xuICAgIGJvdCA9IG5ldyBidWlsZGVyLlVuaXZlcnNhbEJvdChjb25uZWN0b3IpO1xuICAgIC8vIENyZWF0ZSBMVUlTIHJlY29nbml6ZXIgdGhhdCBwb2ludHMgYXQgb3VyIG1vZGVsIGFuZCBhZGQgaXQgYXMgdGhlIHJvb3QgJy8nIGRpYWxvZyBmb3Igb3VyIENvcnRhbmEgQm90LlxuICAgIC8vIHZhciBtb2RlbCA9IHNlbnNpdGl2ZS5tb2RlbHVybDtcbiAgICAvLyB2YXIgbW9kZWwgPSAnaHR0cHM6Ly9hcGkucHJvamVjdG94Zm9yZC5haS9sdWlzL3YyLjAvYXBwcy9jNDEzYjJlZi0zODJjLTQ1YmQtOGZmMC1mNzZkNjBlMmE4MjE/c3Vic2NyaXB0aW9uLWtleT1jMjEzOThiNTk4MGE0Y2UwOWY0NzRiYmZlZTkzYjg5MiZxPSdcbiAgICB2YXIgcmVjb2duaXplciA9IG5ldyBQbGFpblJlY29nbml6ZXIuUmVnRXhwUmVjb2duaXplcihvUnVsZXMpO1xuICAgIHZhciBkaWFsb2cgPSBuZXcgYnVpbGRlci5JbnRlbnREaWFsb2coeyByZWNvZ25pemVyczogW3JlY29nbml6ZXJdIH0pO1xuICAgIC8vIGRpYWxvZy5vbkJlZ2luKGZ1bmN0aW9uKHNlc3Npb24sYXJncykge1xuICAgIC8vIGNvbnNvbGUubG9nKFwiYmVnaW5uaW5nIC4uLlwiKVxuICAgIC8vIHNlc3Npb24uZGlhbG9nRGF0YS5yZXRyeVByb21wdCA9IGFyZ3MgJiYgYXJncy5yZXRyeVByb21wdCB8fCBcIkkgYW0gc29ycnlcIlxuICAgIC8vIHNlc3Npb24uc2VuZChcIldoYXQgZG8geW91IHdhbnQ/XCIpXG4gICAgLy9cbiAgICAvLyB9KVxuICAgIHZhciBkaWFsb2dVcERvd24gPSBuZXcgYnVpbGRlci5JbnRlbnREaWFsb2coeyByZWNvZ25pemVyczogW25ldyBTaW1wbGVVcERvd25SZWNvZ25pemVyKCldIH0pO1xuICAgIGJvdC5kaWFsb2coJy91cGRvd24nLCBkaWFsb2dVcERvd24pO1xuICAgIGRpYWxvZ1VwRG93bi5vbkJlZ2luKGZ1bmN0aW9uIChzZXNzaW9uKSB7XG4gICAgICAgIGRpYWxvZ2xvZyhcIlRyYWluTWVcIiwgc2Vzc2lvbiwgc2VuZChnZXRSYW5kb21SZXN1bHQoYUVudGVyVHJhaW4pKSk7XG4gICAgICAgIC8vc2Vzc2lvbi5zZW5kKFwiSGkgdGhlcmUsIHVwZG93biBpcyB3YWl0aW5nIGZvciB5b3VcIik7XG4gICAgfSk7XG4gICAgZGlhbG9nVXBEb3duLm1hdGNoZXMoJ2ludGVudC51cCcsIFtcbiAgICAgICAgZnVuY3Rpb24gKHNlc3Npb24sIGFyZ3MsIG5leHQpIHtcbiAgICAgICAgICAgIHNlc3Npb24uZGlhbG9nRGF0YS5hYmMgPSBhcmdzIHx8IHt9O1xuICAgICAgICAgICAgYnVpbGRlci5Qcm9tcHRzLnRleHQoc2Vzc2lvbiwgJ3lvdSB3YW50IHRvIGV4aXQgdHJhaW5pbmc/IHR5cGUgXFxcImRvbmVcXFwiIGFnYWluLicpO1xuICAgICAgICB9LFxuICAgICAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgcmVzdWx0cywgbmV4dCkge1xuICAgICAgICAgICAgc2Vzc2lvbi5kaWFsb2dEYXRhLmFiYyA9IHJlc3VsdHMucmVwb25zZTtcbiAgICAgICAgICAgIG5leHQoKTtcbiAgICAgICAgfSxcbiAgICAgICAgZnVuY3Rpb24gKHNlc3Npb24sIHJlc3VsdHMpIHtcbiAgICAgICAgICAgIHNlc3Npb24uZW5kRGlhbG9nV2l0aFJlc3VsdCh7IHJlc3BvbnNlOiBzZXNzaW9uLmRpYWxvZ0RhdGEuYWJjIH0pO1xuICAgICAgICB9XG4gICAgXSk7XG4gICAgZGlhbG9nVXBEb3duLm1hdGNoZXMoJ2ludGVudC5kb3duJywgW1xuICAgICAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgYXJncywgbmV4dCkge1xuICAgICAgICAgICAgc2Vzc2lvbi5kaWFsb2dEYXRhLmFiYyA9IGFyZ3MgfHwge307XG4gICAgICAgICAgICBidWlsZGVyLlByb21wdHMudGV4dChzZXNzaW9uLCAneW91IHdhbnQgdG8gZ28gZG93biEnKTtcbiAgICAgICAgfSxcbiAgICAgICAgZnVuY3Rpb24gKHNlc3Npb24sIHJlc3VsdHMsIG5leHQpIHtcbiAgICAgICAgICAgIHNlc3Npb24uZGlhbG9nRGF0YS5hYmMgPSAtMTsgLy8gcmVzdWx0cy5yZXBvbnNlO1xuICAgICAgICAgICAgbmV4dCgpO1xuICAgICAgICB9LFxuICAgICAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgcmVzdWx0cykge1xuICAgICAgICAgICAgc2Vzc2lvbi5zZW5kKFwic3RpbGwgZ29pbmcgZG93bj9cIik7XG4gICAgICAgIH1cbiAgICBdKTtcbiAgICBkaWFsb2dVcERvd24ub25EZWZhdWx0KGZ1bmN0aW9uIChzZXNzaW9uKSB7XG4gICAgICAgIGxvZ1F1ZXJ5KHNlc3Npb24sIFwib25EZWZhdWx0XCIpO1xuICAgICAgICB2YXIgcmVzID0gZ2V0UmFuZG9tUmVzdWx0KGFUcmFpbkRpYWxvZykgKyBnZXRSYW5kb21SZXN1bHQoYVRyYWluRXhpdEhpbnQpO1xuICAgICAgICBkaWFsb2dsb2coXCJUcmFpbk1lXCIsIHNlc3Npb24sIHNlbmQocmVzKSk7XG4gICAgfSk7XG4gICAgYm90LmRpYWxvZygnL3RyYWluJywgW1xuICAgICAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgYXJncywgbmV4dCkge1xuICAgICAgICAgICAgc2Vzc2lvbi5kaWFsZ29EYXRhLmFiYyA9IGFyZ3MgfHwge307XG4gICAgICAgICAgICBidWlsZGVyLlByb21wdHMudGV4dChzZXNzaW9uLCAnRG8geW91IHdhbnQgdG8gdHJhaW4gbWUnKTtcbiAgICAgICAgfSxcbiAgICAgICAgZnVuY3Rpb24gKHNlc3Npb24sIHJlc3VsdHMsIG5leHQpIHtcbiAgICAgICAgICAgIHNlc3Npb24uZGlhbG9nRGF0YS5hYmMgPSByZXN1bHRzLnJlcG9uc2U7XG4gICAgICAgIH0sXG4gICAgICAgIGZ1bmN0aW9uIChzZXNzaW9uLCByZXN1bHRzKSB7XG4gICAgICAgICAgICBzZXNzaW9uLmVuZERpYWxvZ1dpdGhSZXN1bHQoeyByZXNwb25zZTogc2Vzc2lvbi5EaWFsb2dEYXRhLmFiYyB9KTtcbiAgICAgICAgfVxuICAgIF0pO1xuICAgIGJvdC5kaWFsb2coJy8nLCBkaWFsb2cpO1xuICAgIGRpYWxvZy5tYXRjaGVzKCdTaG93TWUnLCBbXG4gICAgICAgIGZ1bmN0aW9uIChzZXNzaW9uLCBhcmdzLCBuZXh0KSB7XG4gICAgICAgICAgICB2YXIgaXNDb21iaW5lZEluZGV4ID0ge307XG4gICAgICAgICAgICB2YXIgb05ld0VudGl0eTtcbiAgICAgICAgICAgIC8vIGV4cGVjdGluZyBlbnRpdHkgQTFcbiAgICAgICAgICAgIGRlYnVnbG9nKFwiU2hvdyBFbnRpdHlcIik7XG4gICAgICAgICAgICBkZWJ1Z2xvZygncmF3OiAnICsgSlNPTi5zdHJpbmdpZnkoYXJncy5lbnRpdGllcyksIHVuZGVmaW5lZCwgMik7XG4gICAgICAgICAgICB2YXIgYTEgPSBidWlsZGVyLkVudGl0eVJlY29nbml6ZXIuZmluZEVudGl0eShhcmdzLmVudGl0aWVzLCAnQTEnKTtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBBbmFseXplLmFuYWx5emVBbGwoYTEuZW50aXR5LCB0aGVNb2RlbC5ydWxlcywgdGhlTW9kZWwudG9vbHMsIGd3b3Jkcyk7XG4gICAgICAgICAgICBsb2dRdWVyeShzZXNzaW9uLCAnU2hvd01lJywgcmVzdWx0KTtcbiAgICAgICAgICAgIC8vIHRlc3QuZXhwZWN0KDMpXG4gICAgICAgICAgICAvLyAgdGVzdC5kZWVwRXF1YWwocmVzdWx0LndlaWdodCwgMTIwLCAnY29ycmVjdCB3ZWlnaHQnKTtcbiAgICAgICAgICAgIGlmICghcmVzdWx0IHx8IHJlc3VsdC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICBuZXh0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBkZWJ1Z2xvZygncmVzdWx0IDogJyArIEpTT04uc3RyaW5naWZ5KHJlc3VsdCwgdW5kZWZpbmVkLCAyKSk7XG4gICAgICAgICAgICBkZWJ1Z2xvZygnYmVzdCByZXN1bHQgOiAnICsgSlNPTi5zdHJpbmdpZnkocmVzdWx0WzBdIHx8IHt9LCB1bmRlZmluZWQsIDIpKTtcbiAgICAgICAgICAgIGRlYnVnbG9nKCd0b3AgOiAnICsgTWF0Y2guVG9vbE1hdGNoLmR1bXBXZWlnaHRzVG9wKHJlc3VsdCwgeyB0b3A6IDMgfSkpO1xuICAgICAgICAgICAgaWYgKEFuYWx5emUuaXNDb21wbGV0ZShyZXN1bHRbMF0pKSB7XG4gICAgICAgICAgICAgICAgc2Vzc2lvbi5kaWFsb2dEYXRhLnJlc3VsdCA9IHJlc3VsdFswXTtcbiAgICAgICAgICAgICAgICAvLyAgICBzZXNzaW9uLnNlbmQoJ1Nob3dpbmcgZW50aXR5IC4uLicpO1xuICAgICAgICAgICAgICAgIG5leHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKEFuYWx5emUuZ2V0UHJvbXB0KHJlc3VsdFswXSkpIHtcbiAgICAgICAgICAgICAgICB2YXIgcHJvbXB0ID0gQW5hbHl6ZS5nZXRQcm9tcHQocmVzdWx0WzBdKTtcbiAgICAgICAgICAgICAgICBzZXNzaW9uLmRpYWxvZ0RhdGEucmVzdWx0ID0gcmVzdWx0WzBdO1xuICAgICAgICAgICAgICAgIHNlc3Npb24uZGlhbG9nRGF0YS5wcm9tcHQgPSBwcm9tcHQ7XG4gICAgICAgICAgICAgICAgZGlhbG9nbG9nKFwiU2hvd01lXCIsIHNlc3Npb24sIHNlbmQoXCJOb3QgZW5vdWdoIGluZm9ybWF0aW9uIHN1cHBsaWVkOiBcIiArIE1hdGNoLlRvb2xNYXRjaC5kdW1wTmljZShzZXNzaW9uLmRpYWxvZ0RhdGEucmVzdWx0KSkpO1xuICAgICAgICAgICAgICAgIGJ1aWxkZXIuUHJvbXB0cy50ZXh0KHNlc3Npb24sIHByb21wdC50ZXh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBiZXN0ID0gcmVzdWx0Lmxlbmd0aCA/IE1hdGNoLlRvb2xNYXRjaC5kdW1wTmljZShyZXN1bHRbMF0pIDogXCI8bm90aGluZz5cIjtcbiAgICAgICAgICAgICAgICBkaWFsb2dsb2coXCJTaG93TWVcIiwgc2Vzc2lvbiwgc2VuZCgnSSBkaWQgbm90IHVuZGVyc3RhbmQgdGhpcycgKyBiZXN0KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGZ1bmN0aW9uIChzZXNzaW9uLCByZXN1bHRzLCBuZXh0KSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gc2Vzc2lvbi5kaWFsb2dEYXRhLnJlc3VsdDtcbiAgICAgICAgICAgIGlmICghcmVzdWx0IHx8IHJlc3VsdC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICBuZXh0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocmVzdWx0cy5yZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIC8vIHNvbWUgcHJvbXB0aW5nXG4gICAgICAgICAgICAgICAgQW5hbHl6ZS5zZXRQcm9tcHQoc2Vzc2lvbi5kaWFsb2dEYXRhLnJlc3VsdCwgc2Vzc2lvbi5kaWFsb2dEYXRhLnByb21wdCwgcmVzdWx0cy5yZXNwb25zZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoQW5hbHl6ZS5pc0NvbXBsZXRlKHNlc3Npb24uZGlhbG9nRGF0YS5yZXN1bHQpKSB7XG4gICAgICAgICAgICAgICAgbmV4dCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoQW5hbHl6ZS5nZXRQcm9tcHQoc2Vzc2lvbi5kaWFsb2dEYXRhLnJlc3VsdCkpIHtcbiAgICAgICAgICAgICAgICB2YXIgcHJvbXB0ID0gQW5hbHl6ZS5nZXRQcm9tcHQoc2Vzc2lvbi5kaWFsb2dEYXRhLnJlc3VsdCk7XG4gICAgICAgICAgICAgICAgc2Vzc2lvbi5kaWFsb2dEYXRhLnByb21wdCA9IHByb21wdDtcbiAgICAgICAgICAgICAgICBidWlsZGVyLlByb21wdHMudGV4dChzZXNzaW9uLCBwcm9tcHQudGV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGZ1bmN0aW9uIChzZXNzaW9uLCByZXN1bHRzLCBuZXh0KSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gc2Vzc2lvbi5kaWFsb2dEYXRhLnJlc3VsdDtcbiAgICAgICAgICAgIGlmIChyZXN1bHRzLnJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgLy8gc29tZSBwcm9tcHRpbmdcbiAgICAgICAgICAgICAgICBBbmFseXplLnNldFByb21wdChzZXNzaW9uLmRpYWxvZ0RhdGEucmVzdWx0LCBzZXNzaW9uLmRpYWxvZ0RhdGEucHJvbXB0LCByZXN1bHRzLnJlc3BvbnNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChBbmFseXplLmlzQ29tcGxldGUoc2Vzc2lvbi5kaWFsb2dEYXRhLnJlc3VsdCkpIHtcbiAgICAgICAgICAgICAgICB2YXIgZXhlYyA9IEV4ZWNTZXJ2ZXIuZXhlY1Rvb2woc2Vzc2lvbi5kaWFsb2dEYXRhLnJlc3VsdCwgdGhlTW9kZWwucmVjb3Jkcyk7XG4gICAgICAgICAgICAgICAgdmFyIHJlcGx5ID0gbmV3IGJ1aWxkZXIuTWVzc2FnZShzZXNzaW9uKVxuICAgICAgICAgICAgICAgICAgICAudGV4dChleGVjLnRleHQpXG4gICAgICAgICAgICAgICAgICAgIC5hZGRFbnRpdHkoZXhlYy5hY3Rpb24pO1xuICAgICAgICAgICAgICAgIC8vIC5hZGRBdHRhY2htZW50KHsgZmFsbGJhY2tUZXh0OiBcIkkgZG9uJ3Qga25vd1wiLCBjb250ZW50VHlwZTogJ2ltYWdlL2pwZWcnLCBjb250ZW50VXJsOiBcInd3dy53b21iYXQub3JnXCIgfSk7XG4gICAgICAgICAgICAgICAgZGlhbG9nbG9nKFwiU2hvd01lXCIsIHNlc3Npb24sIHNlbmQocmVwbHkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChzZXNzaW9uLmRpYWxvZ0RhdGEucmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIGRpYWxvZ2xvZyhcIlNob3dNZVwiLCBzZXNzaW9uLCBzZW5kKFwiTm90IGVub3VnaCBpbmZvcm1hdGlvbiBzdXBwbGllZDogXCIgKyBNYXRjaC5Ub29sTWF0Y2guZHVtcE5pY2Uoc2Vzc2lvbi5kaWFsb2dEYXRhLnJlc3VsdCkpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGRpYWxvZ2xvZyhcIlNob3dNZVwiLCBzZXNzaW9uLCBzZW5kKFwiSSBkaWQgbm90IGdldCB3aGF0IHlvdSB3YW50XCIpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgXSk7XG4gICAgZGlhbG9nLm1hdGNoZXMoJ1doYXRJcycsIFtcbiAgICAgICAgZnVuY3Rpb24gKHNlc3Npb24sIGFyZ3MsIG5leHQpIHtcbiAgICAgICAgICAgIHZhciBpc0NvbWJpbmVkSW5kZXggPSB7fTtcbiAgICAgICAgICAgIHZhciBvTmV3RW50aXR5O1xuICAgICAgICAgICAgLy8gZXhwZWN0aW5nIGVudGl0eSBBMVxuICAgICAgICAgICAgdmFyIG1lc3NhZ2UgPSBzZXNzaW9uLm1lc3NhZ2UudGV4dDtcbiAgICAgICAgICAgIGRlYnVnbG9nKFwiV2hhdElzIEVudGl0aWVzXCIpO1xuICAgICAgICAgICAgZGVidWdsb2coJ3JhdzogJyArIEpTT04uc3RyaW5naWZ5KGFyZ3MuZW50aXRpZXMpLCB1bmRlZmluZWQsIDIpO1xuICAgICAgICAgICAgdmFyIGNhdGVnb3J5RW50aXR5ID0gYnVpbGRlci5FbnRpdHlSZWNvZ25pemVyLmZpbmRFbnRpdHkoYXJncy5lbnRpdGllcywgJ2NhdGVnb3J5Jyk7XG4gICAgICAgICAgICB2YXIgY2F0ZWdvcnkgPSBjYXRlZ29yeUVudGl0eS5lbnRpdHk7XG4gICAgICAgICAgICB2YXIgYTEgPSBidWlsZGVyLkVudGl0eVJlY29nbml6ZXIuZmluZEVudGl0eShhcmdzLmVudGl0aWVzLCAnQTEnKTtcbiAgICAgICAgICAgIHZhciBjYXRzID0gW107XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNhdHMgPSBXaGF0SXMuYW5hbHl6ZUNhdGVnb3J5TXVsdDIoY2F0ZWdvcnksIHRoZU1vZGVsLnJ1bGVzLCBtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICBkZWJ1Z2xvZyhcImhlcmUgY2F0c1wiICsgY2F0cy5qb2luKFwiLFwiKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGlmIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlYnVnbG9nKFwiaGVyZSBleGNlcHRpb25cIiArIGUpO1xuICAgICAgICAgICAgICAgICAgICBkaWFsb2dsb2coXCJXaGF0SXNcIiwgc2Vzc2lvbiwgc2VuZCgnSSBkb25cXCd0IGtub3cgYW55dGhpbmcgYWJvdXQgXCInICsgY2F0ZWdvcnkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgKGUgPyAnKCcgKyBlLnRvU3RyaW5nKCkgKyAnKScgOiBcIlwiKSkpO1xuICAgICAgICAgICAgICAgICAgICAvLyBuZXh0KCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgY2F0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgLy8gd2UgaGF2ZSBzb21lIGNhdHMsIChvciBhdCBsZWFzdCBvbmUpXG4gICAgICAgICAgICBpZiAoY2F0cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICBjYXQgPSBjYXRzWzBdO1xuICAgICAgICAgICAgICAgIGlmICghY2F0KSB7XG4gICAgICAgICAgICAgICAgICAgIHNlc3Npb24uc2VuZCgnSSBkb25cXCd0IGtub3cgYW55dGhpbmcgYWJvdXQgXCInICsgY2F0ZWdvcnkgKyAnXCInKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gbmV4dCgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNhdHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgZGVidWdsb2coJ2NhdGVnb3J5IGlkZW50aWZpZWQ6JyArIGNhdCk7XG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFdoYXRJcy5yZXNvbHZlQ2F0ZWdvcnkoY2F0LCBhMS5lbnRpdHksIHRoZU1vZGVsLnJ1bGVzLCB0aGVNb2RlbC5yZWNvcmRzKTtcbiAgICAgICAgICAgICAgICBkZWJ1Z2xvZygnd2hhdGlzIHJlc3VsdDonICsgSlNPTi5zdHJpbmdpZnkocmVzdWx0KSk7XG4gICAgICAgICAgICAgICAgbG9nUXVlcnlXaGF0SXMoc2Vzc2lvbiwgJ1doYXRJcycsIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgdmFyIGluZGlzID0gV2hhdElzLmlzSW5kaXNjcmltaW5hdGVSZXN1bHQocmVzdWx0KTtcbiAgICAgICAgICAgICAgICBpZiAoaW5kaXMpIHtcbiAgICAgICAgICAgICAgICAgICAgc2Vzc2lvbi5zZW5kKGluZGlzKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gbmV4dCgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghcmVzdWx0IHx8IHJlc3VsdC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZGlhbG9nbG9nKFwiV2hhdElzXCIsIHNlc3Npb24sIHNlbmQoJ0kgZG9uXFwndCBrbm93IGFueXRoaW5nIGFib3V0IFwiJyArIGNhdCArIFwiIChcIiArIGNhdGVnb3J5ICsgJylcXFwiIGluIHJlbGF0aW9uIHRvIFwiJyArIGExLmVudGl0eSArICdcIicpKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gbmV4dCgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBkZWJ1Z2xvZygncmVzdWx0IDogJyArIEpTT04uc3RyaW5naWZ5KHJlc3VsdCwgdW5kZWZpbmVkLCAyKSk7XG4gICAgICAgICAgICAgICAgICAgIGRlYnVnbG9nKCdiZXN0IHJlc3VsdCA6ICcgKyBKU09OLnN0cmluZ2lmeShyZXN1bHRbMF0gfHwge30sIHVuZGVmaW5lZCwgMikpO1xuICAgICAgICAgICAgICAgICAgICBkZWJ1Z2xvZygndG9wIDogJyArIFdoYXRJcy5kdW1wV2VpZ2h0c1RvcChyZXN1bHQsIHsgdG9wOiAzIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gVE9ETyBjbGVhbnNlZCBzZW50ZW5jZVxuICAgICAgICAgICAgICAgICAgICBkaWFsb2dsb2coXCJXaGF0SXNcIiwgc2Vzc2lvbiwgc2VuZCgnVGhlICcgKyBjYXRlZ29yeSArICcgb2YgJyArIGExLmVudGl0eSArICcgaXMgJyArIHJlc3VsdFswXS5yZXN1bHQgKyBcIlxcblwiKSk7IC8vICArIEpTT04uc3RyaW5naWZ5KHJlc3VsdFswXSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gLy8gc2luZ2xlIGNhdGVnb3J5XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBkZWJ1Z2xvZygnY2F0ZWdvcmllcyBpZGVudGlmaWVkOicgKyBjYXRzLmpvaW4oXCIsXCIpKTtcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0QXJyID0gV2hhdElzLnJlc29sdmVDYXRlZ29yaWVzKGNhdHMsIGExLmVudGl0eSwgdGhlTW9kZWwpO1xuICAgICAgICAgICAgICAgIGRlYnVnbG9nKCd3aGF0aXMgcmVzdWx0OicgKyBKU09OLnN0cmluZ2lmeShyZXN1bHRBcnIpKTtcbiAgICAgICAgICAgICAgICBsb2dRdWVyeVdoYXRJc1R1cGVsKHNlc3Npb24sICdXaGF0SXMnLCByZXN1bHRBcnIpO1xuICAgICAgICAgICAgICAgIHZhciBpbmRpcyA9IFdoYXRJcy5pc0luZGlzY3JpbWluYXRlUmVzdWx0VHVwZWwocmVzdWx0QXJyKTtcbiAgICAgICAgICAgICAgICBpZiAoaW5kaXMpIHtcbiAgICAgICAgICAgICAgICAgICAgc2Vzc2lvbi5zZW5kKGluZGlzKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gbmV4dCgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghcmVzdWx0QXJyIHx8IHJlc3VsdEFyci5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZGlhbG9nbG9nKFwiV2hhdElzXCIsIHNlc3Npb24sIHNlbmQoJ0kgZG9uXFwndCBrbm93IGFueXRoaW5nIGFib3V0IFwiJyArIGNhdGVnb3J5ICsgXCJcXFwiIChcIiArIFV0aWxzLmxpc3RUb1F1b3RlZENvbW1hQW5kKGNhdHMpICsgJylcXFwiIGluIHJlbGF0aW9uIHRvIFwiJyArIGExLmVudGl0eSArICdcIicpKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gbmV4dCgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBkZWJ1Z2xvZygncmVzdWx0IDogJyArIEpTT04uc3RyaW5naWZ5KHJlc3VsdCwgdW5kZWZpbmVkLCAyKSk7XG4gICAgICAgICAgICAgICAgICAgIGRlYnVnbG9nKCdiZXN0IHJlc3VsdCA6ICcgKyBKU09OLnN0cmluZ2lmeShyZXN1bHRBcnJbMF0gfHwge30sIHVuZGVmaW5lZCwgMikpO1xuICAgICAgICAgICAgICAgICAgICAvL2RlYnVnbG9nKCd0b3AgOiAnICsgV2hhdElzLmR1bXBXZWlnaHRzVG9wKHJlc3VsdEFyciwgeyB0b3A6IDMgfSkpO1xuICAgICAgICAgICAgICAgICAgICAvLyBUT0RPIGNsZWFuc2VkIHNlbnRlbmNlXG4gICAgICAgICAgICAgICAgICAgIGRpYWxvZ2xvZyhcIldoYXRJc1wiLCBzZXNzaW9uLCBzZW5kKCdUaGUgJyArIFV0aWxzLmxpc3RUb1F1b3RlZENvbW1hQW5kKGNhdHMpICsgJyBvZiAnICsgYTEuZW50aXR5ICsgJyBhcmUgJyArIFV0aWxzLmxpc3RUb1F1b3RlZENvbW1hQW5kKHJlc3VsdEFyclswXS5yZXN1bHQpICsgJ1xcbicpKTsgLy8gICsgSlNPTi5zdHJpbmdpZnkocmVzdWx0WzBdKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSAvL2VuZGlmIG11bHRpcGxlIGNhdGVnb3JpZXNcbiAgICAgICAgfVxuICAgIF0pO1xuICAgIGRpYWxvZy5tYXRjaGVzKCdMaXN0QWxsJywgW1xuICAgICAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgYXJncywgbmV4dCkge1xuICAgICAgICAgICAgdmFyIGlzQ29tYmluZWRJbmRleCA9IHt9O1xuICAgICAgICAgICAgdmFyIG9OZXdFbnRpdHk7XG4gICAgICAgICAgICAvLyBleHBlY3RpbmcgZW50aXR5IEExXG4gICAgICAgICAgICB2YXIgbWVzc2FnZSA9IHNlc3Npb24ubWVzc2FnZS50ZXh0O1xuICAgICAgICAgICAgZGVidWdsb2coXCJJbnRlbnQgOiBMaXN0QWxsXCIpO1xuICAgICAgICAgICAgZGVidWdsb2coJ3JhdzogJyArIEpTT04uc3RyaW5naWZ5KGFyZ3MuZW50aXRpZXMpLCB1bmRlZmluZWQsIDIpO1xuICAgICAgICAgICAgdmFyIGNhdGVnb3J5RW50aXR5ID0gYnVpbGRlci5FbnRpdHlSZWNvZ25pemVyLmZpbmRFbnRpdHkoYXJncy5lbnRpdGllcywgJ2NhdGVnb3JpZXMnKTtcbiAgICAgICAgICAgIHZhciBjYXRlZ29yeSA9IGNhdGVnb3J5RW50aXR5LmVudGl0eTtcbiAgICAgICAgICAgIHZhciBhMSA9IGJ1aWxkZXIuRW50aXR5UmVjb2duaXplci5maW5kRW50aXR5KGFyZ3MuZW50aXRpZXMsICdpbnN0aCcpO1xuICAgICAgICAgICAgaWYgKGNhdGVnb3J5ID09PSBcImNhdGVnb3JpZXNcIikge1xuICAgICAgICAgICAgICAgIC8vIGRvIHdlIGhhdmUgYSBmaWx0ZXIgP1xuICAgICAgICAgICAgICAgIHZhciBkb21haW4gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgaWYgKGExICYmIGExLmVudGl0eSkge1xuICAgICAgICAgICAgICAgICAgICBkb21haW4gPSBMaXN0QWxsLmluZmVyRG9tYWluKHRoZU1vZGVsLCBhMS5lbnRpdHkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIWRvbWFpbikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzID0gcmVzdHJpY3RMb2dnZWRPbihzZXNzaW9uLCB0aGVNb2RlbC5jYXRlZ29yeSkuam9pbihcIjtcXG5cIik7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhMSAmJiBhMS5lbnRpdHkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpYWxvZ2xvZyhcIkxpc3RBbGxcIiwgc2Vzc2lvbiwgc2VuZChcIkkgZGlkIG5vdCBpbmZlciBhIGRvbWFpbiByZXN0cmljdGlvbiBmcm9tIFxcXCJcIiArIGExLmVudGl0eSArIFwiXFxcIiwgYWxsIG15IGNhdGVnb3JpZXMgYXJlIC4uLlxcblwiICsgcmVzKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaWFsb2dsb2coXCJMaXN0QWxsXCIsIHNlc3Npb24sIHNlbmQoXCJteSBjYXRlZ29yaWVzIGFyZSAuLi5cXG5cIiArIHJlcykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhUmVzID0gTW9kZWwuZ2V0Q2F0ZWdvcmllc0ZvckRvbWFpbih0aGVNb2RlbCwgZG9tYWluKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlcyA9IHJlc3RyaWN0TG9nZ2VkT24oc2Vzc2lvbiwgYVJlcykuam9pbihcIjtcXG5cIik7XG4gICAgICAgICAgICAgICAgICAgIGRpYWxvZ2xvZyhcIkxpc3RBbGxcIiwgc2Vzc2lvbiwgc2VuZChcIm15IGNhdGVnb3JpZXMgaW4gZG9tYWluIFxcXCJcIiArIGRvbWFpbiArIFwiXFxcIiBhcmUgLi4uXFxuXCIgKyByZXMpKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjYXRlZ29yeSA9PT0gXCJkb21haW5zXCIpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVzID0gcmVzdHJpY3RMb2dnZWRPbihzZXNzaW9uLCB0aGVNb2RlbC5kb21haW5zKS5qb2luKFwiO1xcblwiKTtcbiAgICAgICAgICAgICAgICBkaWFsb2dsb2coXCJMaXN0QWxsXCIsIHNlc3Npb24sIHNlbmQoXCJteSBkb21haW5zIGFyZSAuLi5cXG5cIiArIHJlcykpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjYXRlZ29yeSA9PT0gXCJ0b29sc1wiKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlcyA9IHJlc3RyaWN0TG9nZ2VkT24oc2Vzc2lvbiwgdGhlTW9kZWwudG9vbHMpLm1hcChmdW5jdGlvbiAob1Rvb2wpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9Ub29sLm5hbWU7XG4gICAgICAgICAgICAgICAgfSkuam9pbihcIjtcXG5cIik7XG4gICAgICAgICAgICAgICAgZGlhbG9nbG9nKFwiTGlzdEFsbFwiLCBzZXNzaW9uLCBzZW5kKFwibXkgdG9vbHMgYXJlIC4uLlxcblwiICsgcmVzKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGNhdHMgPSBbXTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY2F0cyA9IFdoYXRJcy5hbmFseXplQ2F0ZWdvcnlNdWx0MihjYXRlZ29yeSwgdGhlTW9kZWwucnVsZXMsIG1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIGRlYnVnbG9nKFwiaGVyZSBjYXRzXCIgKyBjYXRzLmpvaW4oXCIsXCIpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVidWdsb2coXCJoZXJlIGV4Y2VwdGlvblwiICsgZSk7XG4gICAgICAgICAgICAgICAgICAgIGRpYWxvZ2xvZyhcIldoYXRJc1wiLCBzZXNzaW9uLCBzZW5kKCdJIGRvblxcJ3Qga25vdyBhbnl0aGluZyBhYm91dCBcIicgKyBjYXRlZ29yeSArICdcIignICsgZS50b1N0cmluZygpICsgJyknKSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIG5leHQoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghY2F0cyB8fCAoY2F0cy5sZW5ndGggPT09IDApKSB7XG4gICAgICAgICAgICAgICAgZGlhbG9nbG9nKFwiTGlzdEFsbFwiLCBzZXNzaW9uLCBzZW5kKCdJIGRvblxcJ3Qga25vdyBhbnl0aGluZyBhYm91dCBcIicgKyBjYXRlZ29yeSArICdcIicpKTtcbiAgICAgICAgICAgICAgICAvLyBuZXh0KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGNhdCA9IFwiXCI7XG4gICAgICAgICAgICBpZiAoY2F0cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICBjYXQgPSBjYXRzWzBdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNhdHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgZGVidWdsb2coJ2NhdGVnb3J5IGlkZW50aWZpZWQ6JyArIGNhdCk7XG4gICAgICAgICAgICAgICAgaWYgKGExICYmIGExLmVudGl0eSkge1xuICAgICAgICAgICAgICAgICAgICBkZWJ1Z2xvZygnZ290IGZpbHRlcjonICsgYTEuZW50aXR5KTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNhdGVnb3J5U2V0ID0gTW9kZWwuZ2V0QWxsUmVjb3JkQ2F0ZWdvcmllc0ZvclRhcmdldENhdGVnb3J5KHRoZU1vZGVsLCBjYXQsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0MSA9IExpc3RBbGwubGlzdEFsbFdpdGhDb250ZXh0KGNhdCwgYTEuZW50aXR5LCB0aGVNb2RlbC5ydWxlcywgdGhlTW9kZWwucmVjb3JkcywgY2F0ZWdvcnlTZXQpO1xuICAgICAgICAgICAgICAgICAgICAvLyBUT0RPIGNsYXNzaWZ5aW5nIHRoZSBzdHJpbmcgdHdpY2UgaXMgYSB0ZXJyaWJsZSB3YXN0ZVxuICAgICAgICAgICAgICAgICAgICBpZiAoIXJlc3VsdDEubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWJ1Z2xvZygnZ29pbmcgZm9yIGhhdmluZycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNhdGVnb3J5U2V0RnVsbCA9IE1vZGVsLmdldEFsbFJlY29yZENhdGVnb3JpZXNGb3JUYXJnZXRDYXRlZ29yeSh0aGVNb2RlbCwgY2F0LCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQxID0gTGlzdEFsbC5saXN0QWxsSGF2aW5nQ29udGV4dChjYXQsIGExLmVudGl0eSwgdGhlTW9kZWwucnVsZXMsIHRoZU1vZGVsLnJlY29yZHMsIGNhdGVnb3J5U2V0RnVsbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZGVidWdsb2coJ2xpc3RhbGwgcmVzdWx0OicgKyBKU09OLnN0cmluZ2lmeShyZXN1bHQxKSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBqb2lucmVzdWx0cyA9IHJlc3RyaWN0TG9nZ2VkT24oc2Vzc2lvbiwgTGlzdEFsbC5qb2luUmVzdWx0cyhyZXN1bHQxKSk7XG4gICAgICAgICAgICAgICAgICAgIGxvZ1F1ZXJ5V2hhdElzKHNlc3Npb24sICdMaXN0QWxsJywgcmVzdWx0MSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChqb2lucmVzdWx0cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpYWxvZ2xvZyhcIkxpc3RBbGxcIiwgc2Vzc2lvbiwgc2VuZChcInRoZSBcIiArIGNhdGVnb3J5ICsgXCIgZm9yIFwiICsgYTEuZW50aXR5ICsgXCIgYXJlIC4uLlxcblwiICsgam9pbnJlc3VsdHMuam9pbihcIjtcXG5cIikpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpYWxvZ2xvZyhcIkxpc3RBbGxcIiwgc2Vzc2lvbiwgc2VuZChcImkgZGlkIG5vdCBmaW5kIGFueSBcIiArIGNhdGVnb3J5ICsgXCIgZm9yIFwiICsgYTEuZW50aXR5ICsgXCIuXFxuXCIgKyBqb2lucmVzdWx0cy5qb2luKFwiO1xcblwiKSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIG5vIGVudGl0eSwgZS5nLiBsaXN0IGFsbCBjb3VudHJpZXNcbiAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgdmFyIGNhdGVnb3J5U2V0RnVsbCA9IE1vZGVsLmdldEFsbFJlY29yZENhdGVnb3JpZXNGb3JUYXJnZXRDYXRlZ29yeSh0aGVNb2RlbCwgY2F0LCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBMaXN0QWxsLmxpc3RBbGxIYXZpbmdDb250ZXh0KGNhdCwgY2F0LCB0aGVNb2RlbC5ydWxlcywgdGhlTW9kZWwucmVjb3JkcywgY2F0ZWdvcnlTZXRGdWxsKTtcbiAgICAgICAgICAgICAgICAgICAgbG9nUXVlcnlXaGF0SXMoc2Vzc2lvbiwgJ0xpc3RBbGwnLCByZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVidWdsb2coJ2xpc3RhbGwgcmVzdWx0OicgKyBKU09OLnN0cmluZ2lmeShyZXN1bHQpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBqb2lucmVzdWx0cyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVidWdsb2coXCJoZXJlIGlzIGNhdD5cIiArIGNhdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2F0ICE9PSBcImV4YW1wbGUgcXVlc3Rpb25cIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpvaW5yZXN1bHRzID0gcmVzdHJpY3RMb2dnZWRPbihzZXNzaW9uLCBMaXN0QWxsLmpvaW5SZXN1bHRzKHJlc3VsdCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgam9pbnJlc3VsdHMgPSBMaXN0QWxsLmpvaW5SZXN1bHRzKHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVzcG9uc2UgPSBcInRoZSBcIiArIGNhdGVnb3J5ICsgXCIgYXJlIC4uLlxcblwiICsgam9pbnJlc3VsdHMuam9pbihcIjtcXG5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaWFsb2dsb2coXCJMaXN0QWxsXCIsIHNlc3Npb24sIHNlbmQocmVzcG9uc2UpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXNwb25zZSA9IFwiRm91bmQgbm8gZGF0YSBoYXZpbmcgXFxcIlwiICsgY2F0ICsgXCJcXFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaWFsb2dsb2coXCJMaXN0QWxsXCIsIHNlc3Npb24sIHNlbmQocmVzcG9uc2UpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIG11bHRpcGxlIGNhdGVnb3JpZXNcbiAgICAgICAgICAgICAgICBkZWJ1Z2xvZygnY2F0ZWdvcmllcyBpZGVudGlmaWVkOicgKyBjYXRzLmpvaW4oXCIsXCIpKTtcbiAgICAgICAgICAgICAgICBpZiAoYTEgJiYgYTEuZW50aXR5KSB7XG4gICAgICAgICAgICAgICAgICAgIGRlYnVnbG9nKCdnb3QgZmlsdGVyOicgKyBhMS5lbnRpdHkpO1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNhdGVnb3J5U2V0ID0gTW9kZWwuZ2V0QWxsUmVjb3JkQ2F0ZWdvcmllc0ZvclRhcmdldENhdGVnb3JpZXModGhlTW9kZWwsIGNhdHMsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWJ1Z2xvZyhcImhlcmUgZXhjZXB0aW9uXCIgKyBlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpYWxvZ2xvZyhcIldoYXRJc1wiLCBzZXNzaW9uLCBzZW5kKCdJIGNhbm5vdCBjb21iaW5lIFwiJyArIGNhdGVnb3J5ICsgJygnICsgZS50b1N0cmluZygpICsgJyknKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdDFUID0gTGlzdEFsbC5saXN0QWxsVHVwZWxXaXRoQ29udGV4dChjYXRzLCBhMS5lbnRpdHksIHRoZU1vZGVsLnJ1bGVzLCB0aGVNb2RlbC5yZWNvcmRzLCBjYXRlZ29yeVNldCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRPRE8gY2xhc3NpZnlpbmcgdGhlIHN0cmluZyB0d2ljZSBpcyBhIHRlcnJpYmxlIHdhc3RlXG4gICAgICAgICAgICAgICAgICAgIGlmICghcmVzdWx0MVQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWJ1Z2xvZygnZ29pbmcgZm9yIGhhdmluZycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNhdGVnb3J5U2V0RnVsbCA9IE1vZGVsLmdldEFsbFJlY29yZENhdGVnb3JpZXNGb3JUYXJnZXRDYXRlZ29yaWVzKHRoZU1vZGVsLCBjYXRzLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQxVCA9IExpc3RBbGwubGlzdEFsbFR1cGVsSGF2aW5nQ29udGV4dChjYXRzLCBhMS5lbnRpdHksIHRoZU1vZGVsLnJ1bGVzLCB0aGVNb2RlbC5yZWNvcmRzLCBjYXRlZ29yeVNldEZ1bGwpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGRlYnVnbG9nKCdsaXN0YWxsIHJlc3VsdDonICsgSlNPTi5zdHJpbmdpZnkocmVzdWx0MVQpKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGpvaW5yZXN1bHRzID0gcmVzdHJpY3RMb2dnZWRPbihzZXNzaW9uLCBMaXN0QWxsLmpvaW5SZXN1bHRzVHVwZWwocmVzdWx0MVQpKTtcbiAgICAgICAgICAgICAgICAgICAgbG9nUXVlcnlXaGF0SXNUdXBlbChzZXNzaW9uLCAnTGlzdEFsbCcsIHJlc3VsdDFUKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGpvaW5yZXN1bHRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGlhbG9nbG9nKFwiTGlzdEFsbFwiLCBzZXNzaW9uLCBzZW5kKFwidGhlIFwiICsgY2F0ZWdvcnkgKyBcIiBmb3IgXCIgKyBhMS5lbnRpdHkgKyBcIiBhcmUgLi4uXFxuXCIgKyBqb2lucmVzdWx0cy5qb2luKFwiO1xcblwiKSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGlhbG9nbG9nKFwiTGlzdEFsbFwiLCBzZXNzaW9uLCBzZW5kKFwiaSBkaWQgbm90IGZpbmQgYW55IFwiICsgY2F0ZWdvcnkgKyBcIiBmb3IgXCIgKyBhMS5lbnRpdHkgKyBcIi5cXG5cIiArIGpvaW5yZXN1bHRzLmpvaW4oXCI7XFxuXCIpKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gbm8gZW50aXR5LCBlLmcuIGxpc3QgYWxsIGNvdW50cmllc1xuICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICB2YXIgY2F0ZWdvcnlTZXRGdWxsID0ge307XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRlZ29yeVNldEZ1bGwgPSBNb2RlbC5nZXRBbGxSZWNvcmRDYXRlZ29yaWVzRm9yVGFyZ2V0Q2F0ZWdvcmllcyh0aGVNb2RlbCwgY2F0cywgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWJ1Z2xvZyhcImhlcmUgZXhjZXB0aW9uXCIgKyBlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpYWxvZ2xvZyhcIldoYXRJc1wiLCBzZXNzaW9uLCBzZW5kKCdJIGNhbm5vdCBjb21iaW5lIFwiJyArIGNhdGVnb3J5ICsgJygnICsgZS50b1N0cmluZygpICsgJyknKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBuZXh0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdFQgPSBMaXN0QWxsLmxpc3RBbGxUdXBlbEhhdmluZ0NvbnRleHQoY2F0cywgXCJcXFwiXCIgKyBjYXRzLmpvaW4oXCJcXFwiIFxcXCJcIikgKyBcIlxcXCJcIiwgdGhlTW9kZWwucnVsZXMsIHRoZU1vZGVsLnJlY29yZHMsIGNhdGVnb3J5U2V0RnVsbCk7XG4gICAgICAgICAgICAgICAgICAgIGxvZ1F1ZXJ5V2hhdElzVHVwZWwoc2Vzc2lvbiwgJ0xpc3RBbGwnLCByZXN1bHRUKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdFQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWJ1Z2xvZygnbGlzdGFsbCByZXN1bHQ6JyArIEpTT04uc3RyaW5naWZ5KHJlc3VsdFQpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBqb2lucmVzdWx0cyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVidWdsb2coXCJoZXJlIGlzIGNhdD5cIiArIGNhdHMuam9pbihcIiwgXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjYXQgIT09IFwiZXhhbXBsZSBxdWVzdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgam9pbnJlc3VsdHMgPSByZXN0cmljdExvZ2dlZE9uKHNlc3Npb24sIExpc3RBbGwuam9pblJlc3VsdHNUdXBlbChyZXN1bHRUKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqb2lucmVzdWx0cyA9IExpc3RBbGwuam9pblJlc3VsdHNUdXBlbChyZXN1bHRUKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXNwb25zZSA9IFwidGhlIFwiICsgY2F0ZWdvcnkgKyBcIiBhcmUgLi4uXFxuXCIgKyBqb2lucmVzdWx0cy5qb2luKFwiO1xcblwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpYWxvZ2xvZyhcIkxpc3RBbGxcIiwgc2Vzc2lvbiwgc2VuZChyZXNwb25zZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3BvbnNlID0gXCJGb3VuZCBubyBkYXRhIGhhdmluZyBcXFwiXCIgKyBjYXQgKyBcIlxcXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpYWxvZ2xvZyhcIkxpc3RBbGxcIiwgc2Vzc2lvbiwgc2VuZChyZXNwb25zZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgXSk7XG4gICAgZGlhbG9nLm1hdGNoZXMoJ0Rlc2NyaWJlJywgW1xuICAgICAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgYXJncywgbmV4dCkge1xuICAgICAgICAgICAgdmFyIGlzQ29tYmluZWRJbmRleCA9IHt9O1xuICAgICAgICAgICAgdmFyIG9OZXdFbnRpdHk7XG4gICAgICAgICAgICAvLyBleHBlY3RpbmcgZW50aXR5IEExXG4gICAgICAgICAgICB2YXIgbWVzc2FnZSA9IHNlc3Npb24ubWVzc2FnZS50ZXh0O1xuICAgICAgICAgICAgZGVidWdsb2coXCJJbnRlbnQgOiBEZXNjcmliZVwiKTtcbiAgICAgICAgICAgIGRlYnVnbG9nKCdyYXc6ICcgKyBKU09OLnN0cmluZ2lmeShhcmdzLmVudGl0aWVzKSwgdW5kZWZpbmVkLCAyKTtcbiAgICAgICAgICAgIHZhciBmYWN0RW50aXR5ID0gYnVpbGRlci5FbnRpdHlSZWNvZ25pemVyLmZpbmRFbnRpdHkoYXJncy5lbnRpdGllcywgJ0ExJyk7XG4gICAgICAgICAgICB2YXIgZmFjdE9yQ2F0ID0gZmFjdEVudGl0eSAmJiBmYWN0RW50aXR5LmVudGl0eTtcbiAgICAgICAgICAgIHZhciBkb21haW5FbnRpdHkgPSBidWlsZGVyLkVudGl0eVJlY29nbml6ZXIuZmluZEVudGl0eShhcmdzLmVudGl0aWVzLCAnRCcpO1xuICAgICAgICAgICAgdmFyIGRvbWFpblMgPSBkb21haW5FbnRpdHkgJiYgZG9tYWluRW50aXR5LmVudGl0eTtcbiAgICAgICAgICAgIHZhciBmaWx0ZXJEb21haW4gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBpZiAoZG9tYWluUykge1xuICAgICAgICAgICAgICAgIGZpbHRlckRvbWFpbiA9IExpc3RBbGwuaW5mZXJEb21haW4odGhlTW9kZWwsIGRvbWFpblMpO1xuICAgICAgICAgICAgICAgIGRlYnVnbG9nKFwiZ290IGRvbWFpblwiICsgZmlsdGVyRG9tYWluKTtcbiAgICAgICAgICAgICAgICBpZiAoIWZpbHRlckRvbWFpbikge1xuICAgICAgICAgICAgICAgICAgICBkaWFsb2dsb2coXCJEZXNjcmliZVwiLCBzZXNzaW9uLCBzZW5kKFwiSSBkaWQgbm90IGluZmVyIGEgZG9tYWluIHJlc3RyaWN0aW9uIGZyb20gXFxcIlwiICsgZG9tYWluUyArIFwiXFxcIi4gU3BlY2lmeSBhbiBleGlzdGluZyBkb21haW4uIChMaXN0IGFsbCBkb21haW5zKSB0byBnZXQgZXhhY3QgbmFtZXMuXFxuXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlYnVnbG9nKFwiZmFjdE9yQ2F0IGlzXCIgKyBmYWN0T3JDYXQpO1xuICAgICAgICAgICAgaWYgKGV4cG9ydHMubWV0YXdvcmRzRGVzY3JpcHRpb25zW2ZhY3RPckNhdC50b0xvd2VyQ2FzZSgpXSkge1xuICAgICAgICAgICAgICAgIC8vIGRvIHdlIGhhdmUgYSBmaWx0ZXIgP1xuICAgICAgICAgICAgICAgIHZhciBwcmVmaXggPSBcIlwiO1xuICAgICAgICAgICAgICAgIGlmIChmaWx0ZXJEb21haW4pIHtcbiAgICAgICAgICAgICAgICAgICAgcHJlZml4ID0gJ1wiaW4gZG9tYWluIFwiJyArIGZpbHRlckRvbWFpbiArICdcIiBtYWtlIG5vIHNlbnNlIHdoZW4gbWF0Y2hpbmcgYSBtZXRhd29yZC5cXG4nO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkZWJ1Z2xvZyhcInNob3dpbmcgbWV0YSByZXN1bHRcIik7XG4gICAgICAgICAgICAgICAgZGlhbG9nbG9nKFwiRGVzY3JpYmVcIiwgc2Vzc2lvbiwgc2VuZChwcmVmaXggKyAnXCInICsgZmFjdE9yQ2F0ICsgJ1wiIGlzICcgKyBleHBvcnRzLm1ldGF3b3Jkc0Rlc2NyaXB0aW9uc1tmYWN0T3JDYXQudG9Mb3dlckNhc2UoKV0gKyBcIlwiKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGNhdGVnb3JpZXMgPSBbXTtcbiAgICAgICAgICAgIGlmIChXaGF0SXMuc3BsaXRBdENvbW1hQW5kKGZhY3RPckNhdCkubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgIGRpYWxvZ2xvZyhcIkRlc2NyaWJlXCIsIHNlc3Npb24sIHNlbmQoXCJXaG9hLCBpIGNhbiBvbmx5IGV4cGxhaW4gb25lIHRoaW5nIGF0IGEgdGltZSwgbm90IFxcXCJcIiArIGZhY3RPckNhdCArIFwiXFxcIi4gUGxlYXNlIGFzayBvbmUgYXQgYSB0aW1lLlwiKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGNhdGVnb3J5ID0gV2hhdElzLmFuYWx5emVDYXRlZ29yeShmYWN0T3JDYXQsIHRoZU1vZGVsLnJ1bGVzLCBtZXNzYWdlKTtcbiAgICAgICAgICAgIHZhciBjYXRSZXN1bHRzID0gW107XG4gICAgICAgICAgICBpZiAoY2F0ZWdvcnkpIHtcbiAgICAgICAgICAgICAgICAvL1RPRE9cbiAgICAgICAgICAgICAgICBjYXRSZXN1bHRzID0gRGVzY3JpYmUuZGVzY3JpYmVDYXRlZ29yeShjYXRlZ29yeSwgZmlsdGVyRG9tYWluLCB0aGVNb2RlbCwgbWVzc2FnZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgcmVzRmFjdCA9IERlc2NyaWJlLmRlc2NyaWJlRmFjdEluRG9tYWluKGZhY3RPckNhdCwgZmlsdGVyRG9tYWluLCB0aGVNb2RlbCk7XG4gICAgICAgICAgICBpZiAoY2F0UmVzdWx0cykge1xuICAgICAgICAgICAgICAgIHZhciBwcmVmaXhlZCA9IGNhdFJlc3VsdHMubWFwKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChEZXNjcmliZS5zbG9wcHlPckV4YWN0KGNhdGVnb3J5LCBmYWN0T3JDYXQsIHRoZU1vZGVsKSArIFwiICBcIiArIHJlcyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY2F0UmVzdWx0cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICByZXNGYWN0ID0gcHJlZml4ZWQuam9pbihcIlxcblwiKTtcbiAgICAgICAgICAgICAgICArXCJcXG5cIiArIHJlc0ZhY3Q7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkaWFsb2dsb2coXCJEZXNjcmliZVwiLCBzZXNzaW9uLCBzZW5kKHJlc0ZhY3QpKTtcbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgdmFyIGFSZXMgPSBNb2RlbC5nZXRDYXRlZ29yaWVzRm9yRG9tYWluKHRoZU1vZGVsLCBkb21haW4pO1xuICAgICAgICAgICAgICAgICB2YXIgcmVzID0gcmVzdHJpY3RMb2dnZWRPbihzZXNzaW9uLCBhUmVzKS5qb2luKFwiO1xcblwiKTtcbiAgICAgICAgICAgICAgICBkaWFsb2dsb2coXCJMaXN0QWxsXCIsc2Vzc2lvbixzZW5kKFwibXkgY2F0ZWdvcmllcyBpbiBkb21haW4gXFxcIlwiICsgZG9tYWluICsgXCJcXFwiIGFyZSAuLi5cXG5cIiArIHJlcykpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNhdGVnb3J5ID09PSBcImRvbWFpbnNcIikge1xuICAgICAgICAgICAgICB2YXIgcmVzID0gcmVzdHJpY3RMb2dnZWRPbihzZXNzaW9uLCB0aGVNb2RlbC5kb21haW5zKS5qb2luKFwiO1xcblwiKTtcbiAgICAgICAgICAgICAgZGlhbG9nbG9nKFwiTGlzdEFsbFwiLHNlc3Npb24sIHNlbmQoXCJteSBkb21haW5zIGFyZSAuLi5cXG5cIiArIHJlcykpO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY2F0ZWdvcnkgPT09IFwidG9vbHNcIikge1xuICAgICAgICAgICAgICB2YXIgcmVzID0gcmVzdHJpY3RMb2dnZWRPbihzZXNzaW9uLCB0aGVNb2RlbC50b29scykubWFwKGZ1bmN0aW9uIChvVG9vbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvVG9vbC5uYW1lO1xuICAgICAgICAgICAgICB9KS5qb2luKFwiO1xcblwiKTtcbiAgICAgICAgICAgICAgZGlhbG9nbG9nKFwiTGlzdEFsbFwiLCBzZXNzaW9uLHNlbmQoXCJteSB0b29scyBhcmUgLi4uXFxuXCIgKyByZXMpKTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICB2YXIgY2F0cyA9IFtdO1xuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBjYXRzID0gV2hhdElzLmFuYWx5emVDYXRlZ29yeU11bHQyKGNhdGVnb3J5LCB0aGVNb2RlbC5ydWxlcywgbWVzc2FnZSk7XG4gICAgICAgICAgICAgIGRlYnVnbG9nKFwiaGVyZSBjYXRzXCIgKyBjYXRzLmpvaW4oXCIsXCIpKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBpZihlKSB7XG4gICAgICAgICAgICAgICAgICBkZWJ1Z2xvZyhcImhlcmUgZXhjZXB0aW9uXCIgKyBlKTtcbiAgICAgICAgICAgICAgICAgIGRpYWxvZ2xvZyhcIldoYXRJc1wiLHNlc3Npb24sc2VuZCgnSSBkb25cXCd0IGtub3cgYW55dGhpbmcgYWJvdXQgXCInICsgY2F0ZWdvcnkgKyAnXCIoJyArIGUudG9TdHJpbmcoKSArICcpJykpO1xuICAgICAgICAgICAgICAgICAgLy8gbmV4dCgpO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghY2F0cyB8fCAoY2F0cy5sZW5ndGggPT09IDApKSB7XG4gICAgICAgICAgICAgIGRpYWxvZ2xvZyhcIkxpc3RBbGxcIixzZXNzaW9uLHNlbmQoJ0kgZG9uXFwndCBrbm93IGFueXRoaW5nIGFib3V0IFwiJyArIGNhdGVnb3J5ICsgJ1wiJykpO1xuICAgICAgICAgICAgICAvLyBuZXh0KCk7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBjYXQgPSBcIlwiO1xuICAgICAgICAgICAgaWYoIGNhdHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgIGNhdCA9IGNhdHNbMF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiggY2F0cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgZGVidWdsb2coJ2NhdGVnb3J5IGlkZW50aWZpZWQ6JyArIGNhdCk7XG4gICAgICAgICAgICAgIGlmIChhMSAmJiBhMS5lbnRpdHkpIHtcbiAgICAgICAgICAgICAgICBkZWJ1Z2xvZygnZ290IGZpbHRlcjonICsgYTEuZW50aXR5KTtcbiAgICAgICAgICAgICAgICB2YXIgY2F0ZWdvcnlTZXQgPSBNb2RlbC5nZXRBbGxSZWNvcmRDYXRlZ29yaWVzRm9yVGFyZ2V0Q2F0ZWdvcnkodGhlTW9kZWwsIGNhdCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdDEgPSBMaXN0QWxsLmxpc3RBbGxXaXRoQ29udGV4dChjYXQsIGExLmVudGl0eSxcbiAgICAgICAgICAgICAgICAgIHRoZU1vZGVsLnJ1bGVzLCB0aGVNb2RlbC5yZWNvcmRzLCBjYXRlZ29yeVNldCk7XG4gICAgICAgICAgICAgICAgLy8gVE9ETyBjbGFzc2lmeWluZyB0aGUgc3RyaW5nIHR3aWNlIGlzIGEgdGVycmlibGUgd2FzdGVcbiAgICAgICAgICAgICAgICBpZiAoIXJlc3VsdDEubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICBkZWJ1Z2xvZygnZ29pbmcgZm9yIGhhdmluZycpO1xuICAgICAgICAgICAgICAgICAgdmFyIGNhdGVnb3J5U2V0RnVsbCA9IE1vZGVsLmdldEFsbFJlY29yZENhdGVnb3JpZXNGb3JUYXJnZXRDYXRlZ29yeSh0aGVNb2RlbCwgY2F0LCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICByZXN1bHQxID0gTGlzdEFsbC5saXN0QWxsSGF2aW5nQ29udGV4dChjYXQsIGExLmVudGl0eSwgdGhlTW9kZWwucnVsZXMsXG4gICAgICAgICAgICAgICAgICAgIHRoZU1vZGVsLnJlY29yZHMsIGNhdGVnb3J5U2V0RnVsbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRlYnVnbG9nKCdsaXN0YWxsIHJlc3VsdDonICsgSlNPTi5zdHJpbmdpZnkocmVzdWx0MSkpO1xuICAgICAgICAgICAgICAgIHZhciBqb2lucmVzdWx0cyA9IHJlc3RyaWN0TG9nZ2VkT24oc2Vzc2lvbiwgTGlzdEFsbC5qb2luUmVzdWx0cyhyZXN1bHQxKSk7XG4gICAgICAgICAgICAgICAgbG9nUXVlcnlXaGF0SXMoc2Vzc2lvbiwgJ0xpc3RBbGwnLCByZXN1bHQxKTtcbiAgICAgICAgICAgICAgICBpZihqb2lucmVzdWx0cy5sZW5ndGggKXtcbiAgICAgICAgICAgICAgICAgIGRpYWxvZ2xvZyhcIkxpc3RBbGxcIixzZXNzaW9uLHNlbmQoXCJ0aGUgXCIgKyBjYXRlZ29yeSArIFwiIGZvciBcIiArIGExLmVudGl0eSArIFwiIGFyZSAuLi5cXG5cIiArIGpvaW5yZXN1bHRzLmpvaW4oXCI7XFxuXCIpKSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGRpYWxvZ2xvZyhcIkxpc3RBbGxcIixzZXNzaW9uLHNlbmQoXCJpIGRpZCBub3QgZmluZCBhbnkgXCIgKyBjYXRlZ29yeSArIFwiIGZvciBcIiArIGExLmVudGl0eSArIFwiLlxcblwiICsgam9pbnJlc3VsdHMuam9pbihcIjtcXG5cIikpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIG5vIGVudGl0eSwgZS5nLiBsaXN0IGFsbCBjb3VudHJpZXNcbiAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgIHZhciBjYXRlZ29yeVNldEZ1bGwgPSBNb2RlbC5nZXRBbGxSZWNvcmRDYXRlZ29yaWVzRm9yVGFyZ2V0Q2F0ZWdvcnkodGhlTW9kZWwsIGNhdCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBMaXN0QWxsLmxpc3RBbGxIYXZpbmdDb250ZXh0KGNhdCwgY2F0LCB0aGVNb2RlbC5ydWxlcywgdGhlTW9kZWwucmVjb3JkcywgY2F0ZWdvcnlTZXRGdWxsKTtcbiAgICAgICAgICAgICAgICBsb2dRdWVyeVdoYXRJcyhzZXNzaW9uLCAnTGlzdEFsbCcsIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgIGRlYnVnbG9nKCdsaXN0YWxsIHJlc3VsdDonICsgSlNPTi5zdHJpbmdpZnkocmVzdWx0KSk7XG4gICAgICAgICAgICAgICAgICB2YXIgam9pbnJlc3VsdHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgIGRlYnVnbG9nKFwiaGVyZSBpcyBjYXQ+XCIgKyBjYXQpO1xuICAgICAgICAgICAgICAgICAgaWYoY2F0ICE9PSBcImV4YW1wbGUgcXVlc3Rpb25cIikge1xuICAgICAgICAgICAgICAgICAgICBqb2lucmVzdWx0cyA9IHJlc3RyaWN0TG9nZ2VkT24oc2Vzc2lvbiwgTGlzdEFsbC5qb2luUmVzdWx0cyhyZXN1bHQpKTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGpvaW5yZXN1bHRzID0gTGlzdEFsbC5qb2luUmVzdWx0cyhyZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgdmFyIHJlc3BvbnNlID0gXCJ0aGUgXCIgKyBjYXRlZ29yeSArIFwiIGFyZSAuLi5cXG5cIiArIGpvaW5yZXN1bHRzLmpvaW4oXCI7XFxuXCIpO1xuICAgICAgICAgICAgICAgICAgZGlhbG9nbG9nKFwiTGlzdEFsbFwiLHNlc3Npb24sc2VuZChyZXNwb25zZSkpO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICB2YXIgcmVzcG9uc2UgPSBcIkZvdW5kIG5vIGRhdGEgaGF2aW5nIFxcXCJcIiArIGNhdCArIFwiXFxcIlwiXG4gICAgICAgICAgICAgICAgICBkaWFsb2dsb2coXCJMaXN0QWxsXCIsc2Vzc2lvbixzZW5kKHJlc3BvbnNlKSk7XG4gICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBtdWx0aXBsZSBjYXRlZ29yaWVzXG4gICAgICAgICAgICAgIGRlYnVnbG9nKCdjYXRlZ29yaWVzIGlkZW50aWZpZWQ6JyArIGNhdHMuam9pbihcIixcIikpO1xuICAgICAgICAgICAgICBpZiAoYTEgJiYgYTEuZW50aXR5KSB7XG4gICAgICAgICAgICAgICAgZGVidWdsb2coJ2dvdCBmaWx0ZXI6JyArIGExLmVudGl0eSk7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB2YXIgY2F0ZWdvcnlTZXQgPSBNb2RlbC5nZXRBbGxSZWNvcmRDYXRlZ29yaWVzRm9yVGFyZ2V0Q2F0ZWdvcmllcyh0aGVNb2RlbCwgY2F0cywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlYnVnbG9nKFwiaGVyZSBleGNlcHRpb25cIiArIGUpO1xuICAgICAgICAgICAgICAgICAgICBkaWFsb2dsb2coXCJXaGF0SXNcIixzZXNzaW9uLHNlbmQoJ0kgY2Fubm90IGNvbWJpbmUgXCInICsgY2F0ZWdvcnkgKyAnKCcgKyBlLnRvU3RyaW5nKCkgKyAnKScpKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0MVQgPSBMaXN0QWxsLmxpc3RBbGxUdXBlbFdpdGhDb250ZXh0KGNhdHMsIGExLmVudGl0eSxcbiAgICAgICAgICAgICAgICAgIHRoZU1vZGVsLnJ1bGVzLCB0aGVNb2RlbC5yZWNvcmRzLCBjYXRlZ29yeVNldCk7XG4gICAgICAgICAgICAgICAgLy8gVE9ETyBjbGFzc2lmeWluZyB0aGUgc3RyaW5nIHR3aWNlIGlzIGEgdGVycmlibGUgd2FzdGVcbiAgICAgICAgICAgICAgICBpZiAoIXJlc3VsdDFULmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgZGVidWdsb2coJ2dvaW5nIGZvciBoYXZpbmcnKTtcbiAgICAgICAgICAgICAgICAgIHZhciBjYXRlZ29yeVNldEZ1bGwgPSBNb2RlbC5nZXRBbGxSZWNvcmRDYXRlZ29yaWVzRm9yVGFyZ2V0Q2F0ZWdvcmllcyh0aGVNb2RlbCwgY2F0cywgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgcmVzdWx0MVQgPSBMaXN0QWxsLmxpc3RBbGxUdXBlbEhhdmluZ0NvbnRleHQoY2F0cywgYTEuZW50aXR5LCB0aGVNb2RlbC5ydWxlcyxcbiAgICAgICAgICAgICAgICAgICAgdGhlTW9kZWwucmVjb3JkcywgY2F0ZWdvcnlTZXRGdWxsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGVidWdsb2coJ2xpc3RhbGwgcmVzdWx0OicgKyBKU09OLnN0cmluZ2lmeShyZXN1bHQxVCkpO1xuICAgICAgICAgICAgICAgIHZhciBqb2lucmVzdWx0cyA9IHJlc3RyaWN0TG9nZ2VkT24oc2Vzc2lvbiwgTGlzdEFsbC5qb2luUmVzdWx0c1R1cGVsKHJlc3VsdDFUKSk7XG4gICAgICAgICAgICAgICAgbG9nUXVlcnlXaGF0SXNUdXBlbChzZXNzaW9uLCAnTGlzdEFsbCcsIHJlc3VsdDFUKTtcbiAgICAgICAgICAgICAgICBpZihqb2lucmVzdWx0cy5sZW5ndGggKXtcbiAgICAgICAgICAgICAgICAgIGRpYWxvZ2xvZyhcIkxpc3RBbGxcIixzZXNzaW9uLHNlbmQoXCJ0aGUgXCIgKyBjYXRlZ29yeSArIFwiIGZvciBcIiArIGExLmVudGl0eSArIFwiIGFyZSAuLi5cXG5cIiArIGpvaW5yZXN1bHRzLmpvaW4oXCI7XFxuXCIpKSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGRpYWxvZ2xvZyhcIkxpc3RBbGxcIixzZXNzaW9uLHNlbmQoXCJpIGRpZCBub3QgZmluZCBhbnkgXCIgKyBjYXRlZ29yeSArIFwiIGZvciBcIiArIGExLmVudGl0eSArIFwiLlxcblwiICsgam9pbnJlc3VsdHMuam9pbihcIjtcXG5cIikpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIG5vIGVudGl0eSwgZS5nLiBsaXN0IGFsbCBjb3VudHJpZXNcbiAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgIHZhciBjYXRlZ29yeVNldEZ1bGwgPSB7fSBhcyB7IFtrZXkgOiBzdHJpbmddIDogYm9vbGVhbn07XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgIGNhdGVnb3J5U2V0RnVsbCA9IE1vZGVsLmdldEFsbFJlY29yZENhdGVnb3JpZXNGb3JUYXJnZXRDYXRlZ29yaWVzKHRoZU1vZGVsLCBjYXRzLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlYnVnbG9nKFwiaGVyZSBleGNlcHRpb25cIiArIGUpO1xuICAgICAgICAgICAgICAgICAgICBkaWFsb2dsb2coXCJXaGF0SXNcIixzZXNzaW9uLHNlbmQoJ0kgY2Fubm90IGNvbWJpbmUgXCInICsgY2F0ZWdvcnkgKyAnKCcgKyBlLnRvU3RyaW5nKCkgKyAnKScpKTtcbiAgICAgICAgICAgICAgICAvLyBuZXh0KCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdFQgPSBMaXN0QWxsLmxpc3RBbGxUdXBlbEhhdmluZ0NvbnRleHQoY2F0cywgXCJcXFwiXCIgKyBjYXRzLmpvaW4oXCJcXFwiIFxcXCJcIikgKyBcIlxcXCJcIiwgdGhlTW9kZWwucnVsZXMsIHRoZU1vZGVsLnJlY29yZHMsIGNhdGVnb3J5U2V0RnVsbCk7XG4gICAgICAgICAgICAgICAgbG9nUXVlcnlXaGF0SXNUdXBlbChzZXNzaW9uLCAnTGlzdEFsbCcsIHJlc3VsdFQpO1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHRULmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgZGVidWdsb2coJ2xpc3RhbGwgcmVzdWx0OicgKyBKU09OLnN0cmluZ2lmeShyZXN1bHRUKSk7XG4gICAgICAgICAgICAgICAgICB2YXIgam9pbnJlc3VsdHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgIGRlYnVnbG9nKFwiaGVyZSBpcyBjYXQ+XCIgKyBjYXRzLmpvaW4oXCIsIFwiKSk7XG4gICAgICAgICAgICAgICAgICBpZihjYXQgIT09IFwiZXhhbXBsZSBxdWVzdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGpvaW5yZXN1bHRzID0gcmVzdHJpY3RMb2dnZWRPbihzZXNzaW9uLCBMaXN0QWxsLmpvaW5SZXN1bHRzVHVwZWwocmVzdWx0VCkpO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgam9pbnJlc3VsdHMgPSBMaXN0QWxsLmpvaW5SZXN1bHRzVHVwZWwocmVzdWx0VCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB2YXIgcmVzcG9uc2UgPSBcInRoZSBcIiArIGNhdGVnb3J5ICsgXCIgYXJlIC4uLlxcblwiICsgam9pbnJlc3VsdHMuam9pbihcIjtcXG5cIik7XG4gICAgICAgICAgICAgICAgICBkaWFsb2dsb2coXCJMaXN0QWxsXCIsc2Vzc2lvbixzZW5kKHJlc3BvbnNlKSk7XG4gICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHZhciByZXNwb25zZSA9IFwiRm91bmQgbm8gZGF0YSBoYXZpbmcgXFxcIlwiICsgY2F0ICsgXCJcXFwiXCJcbiAgICAgICAgICAgICAgICAgIGRpYWxvZ2xvZyhcIkxpc3RBbGxcIixzZXNzaW9uLHNlbmQocmVzcG9uc2UpKTtcbiAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgKi9cbiAgICAgICAgfVxuICAgIF0pO1xuICAgIGRpYWxvZy5tYXRjaGVzKCdMaXN0QWxsQmluT3AnLCBbXG4gICAgICAgIGZ1bmN0aW9uIChzZXNzaW9uLCBhcmdzLCBuZXh0KSB7XG4gICAgICAgICAgICB2YXIgaXNDb21iaW5lZEluZGV4ID0ge307XG4gICAgICAgICAgICB2YXIgb05ld0VudGl0eTtcbiAgICAgICAgICAgIC8vIGV4cGVjdGluZyBlbnRpdHkgQTFcbiAgICAgICAgICAgIHZhciBtZXNzYWdlID0gc2Vzc2lvbi5tZXNzYWdlLnRleHQ7XG4gICAgICAgICAgICBkZWJ1Z2xvZyhcIkludGVudCA6IExpc3RBbGxCaW5PcFwiKTtcbiAgICAgICAgICAgIGRlYnVnbG9nKCdyYXc6ICcgKyBKU09OLnN0cmluZ2lmeShhcmdzLmVudGl0aWVzKSwgdW5kZWZpbmVkLCAyKTtcbiAgICAgICAgICAgIHZhciBjYXRlZ29yeUVudGl0eSA9IGJ1aWxkZXIuRW50aXR5UmVjb2duaXplci5maW5kRW50aXR5KGFyZ3MuZW50aXRpZXMsICdjYXRlZ29yeScpO1xuICAgICAgICAgICAgdmFyIGNhdGVnb3J5V29yZCA9IGNhdGVnb3J5RW50aXR5LmVudGl0eTtcbiAgICAgICAgICAgIHZhciBvcEVudGl0eSA9IGJ1aWxkZXIuRW50aXR5UmVjb2duaXplci5maW5kRW50aXR5KGFyZ3MuZW50aXRpZXMsICdvcGVyYXRvcicpO1xuICAgICAgICAgICAgdmFyIG9wZXJhdG9yV29yZCA9IG9wRW50aXR5ICYmIG9wRW50aXR5LmVudGl0eTtcbiAgICAgICAgICAgIC8vIGNhdGVnb3JpemUgYXMgb3BlcmF0b3IgP1xuICAgICAgICAgICAgdmFyIGZpbHRlckRvbWFpbkVudGl0eSA9IGJ1aWxkZXIuRW50aXR5UmVjb2duaXplci5maW5kRW50aXR5KGFyZ3MuZW50aXRpZXMsICdkb21haW4nKTtcbiAgICAgICAgICAgIHZhciBmaWx0ZXJEb21haW5TID0gZmlsdGVyRG9tYWluRW50aXR5ICYmIGZpbHRlckRvbWFpbkVudGl0eS5lbnRpdHk7XG4gICAgICAgICAgICB2YXIgb3BlcmF0b3IgPSBXaGF0SXMuYW5hbHl6ZU9wZXJhdG9yKG9wZXJhdG9yV29yZCwgdGhlTW9kZWwucnVsZXMsIG1lc3NhZ2UpO1xuICAgICAgICAgICAgdmFyIGNhdGVnb3J5ID0gV2hhdElzLmFuYWx5emVDYXRlZ29yeShjYXRlZ29yeVdvcmQsIHRoZU1vZGVsLnJ1bGVzLCBtZXNzYWdlKTtcbiAgICAgICAgICAgIHZhciBvcGVyYXRvckFyZ3MgPSBNb2RlbC5nZXRPcGVyYXRvcih0aGVNb2RlbCwgb3BlcmF0b3IpO1xuICAgICAgICAgICAgdmFyIGEyID0gYnVpbGRlci5FbnRpdHlSZWNvZ25pemVyLmZpbmRFbnRpdHkoYXJncy5lbnRpdGllcywgJ0EyJyk7XG4gICAgICAgICAgICBpZiAoIW9wZXJhdG9yKSB7XG4gICAgICAgICAgICAgICAgdmFyIHMgPSBcIlVua25vd24gb3BlcmF0b3IgXCIgKyBvcGVyYXRvcldvcmQgKyBcIiwgdGhpcyBpcyBhIG1vZGVsIGJ1ZywgY2hlY2sgb3BlcmF0b3JzLmpzb24gYW5kIGludGVudHMuanNvblwiO1xuICAgICAgICAgICAgICAgIGRpYWxvZ2xvZyhcIkxpc3RBbGxCaW5PcFwiLCBzZXNzaW9uLCBzZW5kKFwib3VjaCwgdGhpcyB3YXMgaW4gaW50ZXJuYWwgZXJyb3IuIFJlY292ZXJpbmcgZnJvbSBhIHdlaXJkIG9wZXJhdG9yIFxcXCJcIlxuICAgICAgICAgICAgICAgICAgICArIG9wZXJhdG9yV29yZCArIFwiXFxcIlxcblwiKSk7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGZpbHRlckRvbWFpbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGlmIChmaWx0ZXJEb21haW5TKSB7XG4gICAgICAgICAgICAgICAgZGVidWdsb2coXCJmb3VuZCBhIGRvbWFpblN0cmluZ1wiICsgZmlsdGVyRG9tYWluUyk7XG4gICAgICAgICAgICAgICAgZmlsdGVyRG9tYWluID0gTGlzdEFsbC5pbmZlckRvbWFpbih0aGVNb2RlbCwgZmlsdGVyRG9tYWluUyk7XG4gICAgICAgICAgICAgICAgZGVidWdsb2coXCJnb3QgZG9tYWluXCIgKyBmaWx0ZXJEb21haW4pO1xuICAgICAgICAgICAgICAgIGlmICghZmlsdGVyRG9tYWluKSB7XG4gICAgICAgICAgICAgICAgICAgIGRpYWxvZ2xvZyhcIkRlc2NyaWJlXCIsIHNlc3Npb24sIHNlbmQoXCJJIGRpZCBub3QgaW5mZXIgYSBkb21haW4gcmVzdHJpY3Rpb24gZnJvbSBcXFwiXCIgKyBmaWx0ZXJEb21haW5TICsgXCJcXFwiLiBTcGVjaWZ5IGFuIGV4aXN0aW5nIGRvbWFpbi4gKExpc3QgYWxsIGRvbWFpbnMpIHRvIGdldCBleGFjdCBuYW1lcy5cXG5cIikpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGZyYWdtZW50ID0gYTIgJiYgYTIuZW50aXR5O1xuICAgICAgICAgICAgZnJhZ21lbnQgPSBCcmVha0Rvd24udHJpbVF1b3RlZChCcmVha0Rvd24udHJpbVF1b3RlZFNwYWNlZChmcmFnbWVudCkpO1xuICAgICAgICAgICAgZGVidWdsb2coXCJmcmFnbWVudCBhZnRlciB0cmltbWluZyBcXFwiXCIgKyBmcmFnbWVudCArIFwiXFxcIlwiKTtcbiAgICAgICAgICAgIGlmIChjYXRlZ29yeVdvcmQgPT09IFwiY2F0ZWdvcmllc1wiKSB7XG4gICAgICAgICAgICAgICAgLy8gZG8gd2UgaGF2ZSBhIGZpbHRlcj9cbiAgICAgICAgICAgICAgICB2YXIgYUZpbHRlcmVkQ2F0ZWdvcmllcyA9IExpc3RBbGwuZmlsdGVyU3RyaW5nTGlzdEJ5T3Aob3BlcmF0b3JBcmdzLCBmcmFnbWVudCwgdGhlTW9kZWwuY2F0ZWdvcnkpO1xuICAgICAgICAgICAgICAgIGlmIChmaWx0ZXJEb21haW4pIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNhdHNGb3JEb21haW4gPSBNb2RlbC5nZXRDYXRlZ29yaWVzRm9yRG9tYWluKHRoZU1vZGVsLCBmaWx0ZXJEb21haW4pO1xuICAgICAgICAgICAgICAgICAgICBhRmlsdGVyZWRDYXRlZ29yaWVzID0gXy5pbnRlcnNlY3Rpb24oYUZpbHRlcmVkQ2F0ZWdvcmllcywgY2F0c0ZvckRvbWFpbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlcyA9IHJlc3RyaWN0TG9nZ2VkT24oc2Vzc2lvbiwgYUZpbHRlcmVkQ2F0ZWdvcmllcykuam9pbihcIjtcXG5cIik7XG4gICAgICAgICAgICAgICAgaWYgKHJlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpbHRlckRvbWFpbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGlhbG9nbG9nKFwiTGlzdEFsbEJpbk9wXCIsIHNlc3Npb24sIHNlbmQoKFwibXkgY2F0ZWdvcmllcyBcIiArIG9wZXJhdG9yICsgXCIgXFxcIlwiICsgZnJhZ21lbnQgKyBcIlxcXCIgaW4gZG9tYWluIFxcXCJcIiArIGZpbHRlckRvbWFpbiArIFwiXFxcIiBhcmUgLi4uXFxuXCIpICsgcmVzKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaWFsb2dsb2coXCJMaXN0QWxsQmluT3BcIiwgc2Vzc2lvbiwgc2VuZCgoXCJteSBjYXRlZ29yaWVzIFwiICsgb3BlcmF0b3IgKyBcIiBcXFwiXCIgKyBmcmFnbWVudCArIFwiXFxcIiBhcmUgLi4uXFxuXCIpICsgcmVzKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGRpYWxvZ2xvZyhcIkxpc3RBbGxCaW5PcFwiLCBzZXNzaW9uLCBzZW5kKCdJIGhhdmUgbm8gY2F0ZWdvcmllcyAnICsgb3BlcmF0b3IgKyAnIFwiJyArIGZyYWdtZW50ICsgJ1wiJykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjYXRlZ29yeVdvcmQgPT09IFwiZG9tYWluc1wiKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFSZXMgPSBMaXN0QWxsLmZpbHRlclN0cmluZ0xpc3RCeU9wKG9wZXJhdG9yQXJncywgZnJhZ21lbnQsIHRoZU1vZGVsLmRvbWFpbnMpO1xuICAgICAgICAgICAgICAgIHJlcyA9IHJlc3RyaWN0TG9nZ2VkT24oc2Vzc2lvbiwgYVJlcykuam9pbihcIjtcXG5cIik7XG4gICAgICAgICAgICAgICAgaWYgKHJlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgZGlhbG9nbG9nKFwiTGlzdEFsbEJpbk9wXCIsIHNlc3Npb24sIHNlbmQoXCJteSBkb21haW5zIFwiICsgb3BlcmF0b3IgKyAnIFwiJyArIGZyYWdtZW50ICsgJ1wiIGFyZSAuLi5cXG4nICsgcmVzKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBkaWFsb2dsb2coXCJMaXN0QWxsQmluT3BcIiwgc2Vzc2lvbiwgc2VuZCgnSSBoYXZlIG5vIGRvbWFpbnMgJyArIG9wZXJhdG9yICsgJyBcIicgKyBmcmFnbWVudCArICdcIicpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2F0ZWdvcnlXb3JkID09PSBcInRvb2xzXCIpIHtcbiAgICAgICAgICAgICAgICB2YXIgYVJlcyA9IExpc3RBbGwuZmlsdGVyU3RyaW5nTGlzdEJ5T3Aob3BlcmF0b3JBcmdzLCBmcmFnbWVudCwgdGhlTW9kZWwudG9vbHMubWFwKGZ1bmN0aW9uIChvVG9vbCkgeyByZXR1cm4gb1Rvb2wubmFtZTsgfSkpO1xuICAgICAgICAgICAgICAgIHZhciByZXMgPSByZXN0cmljdExvZ2dlZE9uKHNlc3Npb24sIGFSZXMpLmpvaW4oXCI7XFxuXCIpO1xuICAgICAgICAgICAgICAgIGlmIChyZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIGRpYWxvZ2xvZyhcIkxpc3RBbGxCaW5PcFwiLCBzZXNzaW9uLCBzZW5kKFwibXkgdG9vbHMgXCIgKyBvcGVyYXRvciArICcgXCInICsgZnJhZ21lbnQgKyAnXCIgYXJlIC4uLlxcbicgKyByZXMpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGRpYWxvZ2xvZyhcIkxpc3RBbGxCaW5PcFwiLCBzZXNzaW9uLCBzZW5kKFwiSSBoYXZlIG5vIHRvb2xzIFwiICsgb3BlcmF0b3IgKyAnIFwiJyArIGZyYWdtZW50ICsgJ1wiJykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgY2F0ID0gV2hhdElzLmFuYWx5emVDYXRlZ29yeShjYXRlZ29yeVdvcmQsIHRoZU1vZGVsLnJ1bGVzLCBtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICBpZiAoIWNhdCkge1xuICAgICAgICAgICAgICAgICAgICBkaWFsb2dsb2coXCJMaXN0QWxsQmluT3BcIiwgc2Vzc2lvbiwgc2VuZCgnSSBkb25cXCd0IGtub3cgYW55dGhpbmcgYWJvdXQgXCInICsgY2F0ZWdvcnlXb3JkICsgJ1wiJykpO1xuICAgICAgICAgICAgICAgICAgICAvLyBuZXh0KCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGVidWdsb2coJ2NhdGVnb3J5IGlkZW50aWZpZWQ6JyArIGNhdCk7XG4gICAgICAgICAgICAgICAgdmFyIGFSZXMgPSBMaXN0QWxsLmdldENhdGVnb3J5T3BGaWx0ZXJBc0Rpc3RpbmN0U3RyaW5ncyhvcGVyYXRvckFyZ3MsIGZyYWdtZW50LCBjYXRlZ29yeSwgdGhlTW9kZWwucmVjb3JkcywgZmlsdGVyRG9tYWluKTtcbiAgICAgICAgICAgICAgICB2YXIgcmVzID0gcmVzdHJpY3RMb2dnZWRPbihzZXNzaW9uLCBhUmVzKS5qb2luKFwiO1xcblwiKTtcbiAgICAgICAgICAgICAgICB2YXIgaW5maXhFeHBsYWluID0gJyc7XG4gICAgICAgICAgICAgICAgaWYgKCFMaXN0QWxsLmxpa2VseVBsdXJhbERpZmYoY2F0ZWdvcnksIGNhdGVnb3J5V29yZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5maXhFeHBsYWluID0gJyhcIicgKyBjYXRlZ29yeSArICdcIiknO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocmVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZmlsdGVyRG9tYWluKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaWFsb2dsb2coXCJMaXN0QWxsQmluT3BcIiwgc2Vzc2lvbiwgc2VuZCgoXCJteSBcIiArIGNhdGVnb3J5V29yZCArIGluZml4RXhwbGFpbiArIFwiIFwiICsgb3BlcmF0b3IgKyBcIiBcXFwiXCIgKyBmcmFnbWVudCArIFwiXFxcIiBpbiBkb21haW4gXFxcIlwiICsgZmlsdGVyRG9tYWluICsgXCJcXFwiIGFyZSAuLi5cXG5cIikgKyByZXMpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpYWxvZ2xvZyhcIkxpc3RBbGxCaW5PcFwiLCBzZXNzaW9uLCBzZW5kKChcIm15IFwiICsgY2F0ZWdvcnlXb3JkICsgaW5maXhFeHBsYWluICsgXCIgXCIgKyBvcGVyYXRvciArIFwiIFxcXCJcIiArIGZyYWdtZW50ICsgXCJcXFwiIGFyZSAuLi5cXG5cIikgKyByZXMpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZGlhbG9nbG9nKFwiTGlzdEFsbEJpbk9wXCIsIHNlc3Npb24sIHNlbmQoJ0kgaGF2ZSBubyAnICsgY2F0ZWdvcnlXb3JkICsgaW5maXhFeHBsYWluICsgJyAnICsgb3BlcmF0b3IgKyAnIFwiJyArIGZyYWdtZW50ICsgJ1wiJykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBdKTtcbiAgICBkaWFsb2cubWF0Y2hlcygnVHJhaW5NZScsIFtcbiAgICAgICAgZnVuY3Rpb24gKHNlc3Npb24sIGFyZ3MsIG5leHQpIHtcbiAgICAgICAgICAgIHZhciBpc0NvbWJpbmVkSW5kZXggPSB7fTtcbiAgICAgICAgICAgIHZhciBvTmV3RW50aXR5O1xuICAgICAgICAgICAgLy8gZXhwZWN0aW5nIGVudGl0eSBBMVxuICAgICAgICAgICAgdmFyIG1lc3NhZ2UgPSBzZXNzaW9uLm1lc3NhZ2UudGV4dDtcbiAgICAgICAgICAgIGRlYnVnbG9nKFwiSW50ZW50IDogVHJhaW5cIik7XG4gICAgICAgICAgICBkZWJ1Z2xvZygncmF3OiAnICsgSlNPTi5zdHJpbmdpZnkoYXJncy5lbnRpdGllcyksIHVuZGVmaW5lZCwgMik7XG4gICAgICAgICAgICB2YXIgY2F0ZWdvcnlFbnRpdHkgPSBidWlsZGVyLkVudGl0eVJlY29nbml6ZXIuZmluZEVudGl0eShhcmdzLmVudGl0aWVzLCAnY2F0ZWdvcmllcycpO1xuICAgICAgICAgICAgaWYgKG1lc3NhZ2UudG9Mb3dlckNhc2UoKS5pbmRleE9mKFwia3Jvbm9zXCIpID49IDAgfHwgbWVzc2FnZS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoXCJrbGluZ29uXCIpID49IDApIHtcbiAgICAgICAgICAgICAgICBkaWFsb2dsb2coXCJUcmFpbk1lXCIsIHNlc3Npb24sIHNlbmQoZ2V0UmFuZG9tUmVzdWx0KGFUcmFpbk5vS2xpbmdvbikpKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgcmVzID0gZ2V0UmFuZG9tUmVzdWx0KGFUcmFpblJlcGxpZXMpO1xuICAgICAgICAgICAgZGlhbG9nbG9nKFwiVHJhaW5NZVwiLCBzZXNzaW9uLCBzZW5kKHJlcykpO1xuICAgICAgICB9XG4gICAgXSk7XG4gICAgZGlhbG9nLm1hdGNoZXMoJ1Rvb0xvbmcnLCBbXG4gICAgICAgIGZ1bmN0aW9uIChzZXNzaW9uLCBhcmdzLCBuZXh0KSB7XG4gICAgICAgICAgICB2YXIgaXNDb21iaW5lZEluZGV4ID0ge307XG4gICAgICAgICAgICB2YXIgb05ld0VudGl0eTtcbiAgICAgICAgICAgIC8vIGV4cGVjdGluZyBlbnRpdHkgQTFcbiAgICAgICAgICAgIHZhciBtZXNzYWdlID0gc2Vzc2lvbi5tZXNzYWdlLnRleHQ7XG4gICAgICAgICAgICBkZWJ1Z2xvZyhcIkludGVudCA6IFRvb0xvbmdcIik7XG4gICAgICAgICAgICBkZWJ1Z2xvZygncmF3OiAnICsgSlNPTi5zdHJpbmdpZnkoYXJncy5lbnRpdGllcyksIHVuZGVmaW5lZCwgMik7XG4gICAgICAgICAgICB2YXIgY2F0ZWdvcnlFbnRpdHkgPSBidWlsZGVyLkVudGl0eVJlY29nbml6ZXIuZmluZEVudGl0eShhcmdzLmVudGl0aWVzLCAnY2F0ZWdvcmllcycpO1xuICAgICAgICAgICAgZGlhbG9nbG9nKFwiVG9vTG9uZ1wiLCBzZXNzaW9uLCBzZW5kKGdldFJhbmRvbVJlc3VsdChleHBvcnRzLmFSZXNwb25zZXNPblRvb0xvbmcpKSk7XG4gICAgICAgIH1cbiAgICBdKTtcbiAgICBkaWFsb2cubWF0Y2hlcygnV3JvbmcnLCBbXG4gICAgICAgIGZ1bmN0aW9uIChzZXNzaW9uLCBhcmdzLCBuZXh0KSB7XG4gICAgICAgICAgICBkaWFsb2dMb2dnZXIoe1xuICAgICAgICAgICAgICAgIHNlc3Npb246IHNlc3Npb24sXG4gICAgICAgICAgICAgICAgaW50ZW50OiBcIldyb25nXCIsXG4gICAgICAgICAgICAgICAgcmVzcG9uc2U6ICc8YmVnaW4gdXBkb3duPidcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgc2Vzc2lvbi5iZWdpbkRpYWxvZygnL3VwZG93bicsIHNlc3Npb24udXNlckRhdGEuY291bnQpO1xuICAgICAgICB9LFxuICAgICAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgcmVzdWx0cywgbmV4dCkge1xuICAgICAgICAgICAgdmFyIGFsYXJtID0gc2Vzc2lvbi5kaWFsb2dEYXRhLmFsYXJtO1xuICAgICAgICAgICAgbmV4dCgpO1xuICAgICAgICB9LFxuICAgICAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgcmVzdWx0cykge1xuICAgICAgICAgICAgc2Vzc2lvbi5zZW5kKGdldFJhbmRvbVJlc3VsdChhQmFja0Zyb21UcmFpbmluZykpOyAvLyAgKyBKU09OLnN0cmluZ2lmeShyZXN1bHRzKSk7XG4gICAgICAgICAgICAvL3Nlc3Npb24uc2VuZCgnZW5kIG9mIHdyb25nJyk7XG4gICAgICAgIH1cbiAgICBdKTtcbiAgICBkaWFsb2cubWF0Y2hlcygnRXhpdCcsIFtcbiAgICAgICAgZnVuY3Rpb24gKHNlc3Npb24sIGFyZ3MsIG5leHQpIHtcbiAgICAgICAgICAgIGRlYnVnbG9nKCdleGl0IDonKTtcbiAgICAgICAgICAgIGRlYnVnbG9nKCdleGl0JyArIEpTT04uc3RyaW5naWZ5KGFyZ3MuZW50aXRpZXMpKTtcbiAgICAgICAgICAgIGRpYWxvZ0xvZ2dlcih7XG4gICAgICAgICAgICAgICAgc2Vzc2lvbjogc2Vzc2lvbixcbiAgICAgICAgICAgICAgICBpbnRlbnQ6IFwiRXhpdFwiLFxuICAgICAgICAgICAgICAgIHJlc3BvbnNlOiAneW91IGFyZSBpbiBhIGxvZ2ljIGxvb3AnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHNlc3Npb24uc2VuZChcInlvdSBhcmUgaW4gYSBsb2dpYyBsb29wIFwiKTtcbiAgICAgICAgfVxuICAgIF0pO1xuICAgIGRpYWxvZy5tYXRjaGVzKCdIZWxwJywgW1xuICAgICAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgYXJncywgbmV4dCkge1xuICAgICAgICAgICAgZGVidWdsb2coJ2hlbHAgOicpO1xuICAgICAgICAgICAgZGVidWdsb2coJ2hlbHAnKTtcbiAgICAgICAgICAgIHNlc3Npb24uc2VuZChcIkkga25vdyBhYm91dCAuLi4uIDxjYXRlZ29yaWVzPj5cIik7XG4gICAgICAgIH1cbiAgICBdKTtcbiAgICAvLyBBZGQgaW50ZW50IGhhbmRsZXJzXG4gICAgZGlhbG9nLm1hdGNoZXMoJ3RyYWluJywgW1xuICAgICAgICBmdW5jdGlvbiAoc2Vzc2lvbiwgYXJncywgbmV4dCkge1xuICAgICAgICAgICAgZGVidWdsb2coJ3RyYWluJyk7XG4gICAgICAgICAgICAvLyBSZXNvbHZlIGFuZCBzdG9yZSBhbnkgZW50aXRpZXMgcGFzc2VkIGZyb20gTFVJUy5cbiAgICAgICAgICAgIHZhciB0aXRsZSA9IGJ1aWxkZXIuRW50aXR5UmVjb2duaXplci5maW5kRW50aXR5KGFyZ3MuZW50aXRpZXMsICdidWlsdGluLmFsYXJtLnRpdGxlJyk7XG4gICAgICAgICAgICB2YXIgdGltZSA9IGJ1aWxkZXIuRW50aXR5UmVjb2duaXplci5yZXNvbHZlVGltZShhcmdzLmVudGl0aWVzKTtcbiAgICAgICAgICAgIHZhciBhbGFybSA9IHNlc3Npb24uZGlhbG9nRGF0YS5hbGFybSA9IHtcbiAgICAgICAgICAgICAgICB0aXRsZTogdGl0bGUgPyB0aXRsZS5lbnRpdHkgOiBudWxsLFxuICAgICAgICAgICAgICAgIHRpbWVzdGFtcDogdGltZSA/IHRpbWUuZ2V0VGltZSgpIDogbnVsbFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8vIFByb21wdCBmb3IgdGl0bGVcbiAgICAgICAgICAgIGlmICghYWxhcm0udGl0bGUpIHtcbiAgICAgICAgICAgICAgICBkaWFsb2dMb2dnZXIoe1xuICAgICAgICAgICAgICAgICAgICBzZXNzaW9uOiBzZXNzaW9uLFxuICAgICAgICAgICAgICAgICAgICBpbnRlbnQ6IFwidHJhaW5cIixcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2U6ICdXaGF0IGZhY3Qgd291bGQgeW91IGxpa2UgdG8gdHJhaW4/J1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGJ1aWxkZXIuUHJvbXB0cy50ZXh0KHNlc3Npb24sICdXaGF0IGZhY3Qgd291bGQgeW91IGxpa2UgdG8gdHJhaW4/Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBuZXh0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGZ1bmN0aW9uIChzZXNzaW9uLCByZXN1bHRzLCBuZXh0KSB7XG4gICAgICAgICAgICB2YXIgYWxhcm0gPSBzZXNzaW9uLmRpYWxvZ0RhdGEuYWxhcm07XG4gICAgICAgICAgICBpZiAocmVzdWx0cy5yZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIGFsYXJtLnRpdGxlID0gcmVzdWx0cy5yZXNwb25zZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFByb21wdCBmb3IgdGltZSAodGl0bGUgd2lsbCBiZSBibGFuayBpZiB0aGUgdXNlciBzYWlkIGNhbmNlbClcbiAgICAgICAgICAgIGlmIChhbGFybS50aXRsZSAmJiAhYWxhcm0udGltZXN0YW1wKSB7XG4gICAgICAgICAgICAgICAgYnVpbGRlci5Qcm9tcHRzLnRpbWUoc2Vzc2lvbiwgJ1doYXQgdGltZSB3b3VsZCB5b3UgbGlrZSB0byBzZXQgdGhlIGFsYXJtIGZvcj8nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG5leHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZnVuY3Rpb24gKHNlc3Npb24sIHJlc3VsdHMpIHtcbiAgICAgICAgICAgIHZhciBhbGFybSA9IHNlc3Npb24uZGlhbG9nRGF0YS5hbGFybTtcbiAgICAgICAgICAgIGlmIChyZXN1bHRzLnJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRpbWUgPSBidWlsZGVyLkVudGl0eVJlY29nbml6ZXIucmVzb2x2ZVRpbWUoW3Jlc3VsdHMucmVzcG9uc2VdKTtcbiAgICAgICAgICAgICAgICBhbGFybS50aW1lc3RhbXAgPSB0aW1lID8gdGltZS5nZXRUaW1lKCkgOiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gU2V0IHRoZSBhbGFybSAoaWYgdGl0bGUgb3IgdGltZXN0YW1wIGlzIGJsYW5rIHRoZSB1c2VyIHNhaWQgY2FuY2VsKVxuICAgICAgICAgICAgaWYgKGFsYXJtLnRpdGxlICYmIGFsYXJtLnRpbWVzdGFtcCkge1xuICAgICAgICAgICAgICAgIC8vIFNhdmUgYWRkcmVzcyBvZiB3aG8gdG8gbm90aWZ5IGFuZCB3cml0ZSB0byBzY2hlZHVsZXIuXG4gICAgICAgICAgICAgICAgYWxhcm0uYWRkcmVzcyA9IHNlc3Npb24ubWVzc2FnZS5hZGRyZXNzO1xuICAgICAgICAgICAgICAgIC8vYWxhcm1zW2FsYXJtLnRpdGxlXSA9IGFsYXJtO1xuICAgICAgICAgICAgICAgIC8vIFNlbmQgY29uZmlybWF0aW9uIHRvIHVzZXJcbiAgICAgICAgICAgICAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKGFsYXJtLnRpbWVzdGFtcCk7XG4gICAgICAgICAgICAgICAgdmFyIGlzQU0gPSBkYXRlLmdldEhvdXJzKCkgPCAxMjtcbiAgICAgICAgICAgICAgICBzZXNzaW9uLnNlbmQoJ0NyZWF0aW5nIGFsYXJtIG5hbWVkIFwiJXNcIiBmb3IgJWQvJWQvJWQgJWQ6JTAyZCVzJywgYWxhcm0udGl0bGUsIGRhdGUuZ2V0TW9udGgoKSArIDEsIGRhdGUuZ2V0RGF0ZSgpLCBkYXRlLmdldEZ1bGxZZWFyKCksIGlzQU0gPyBkYXRlLmdldEhvdXJzKCkgOiBkYXRlLmdldEhvdXJzKCkgLSAxMiwgZGF0ZS5nZXRNaW51dGVzKCksIGlzQU0gPyAnYW0nIDogJ3BtJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzZXNzaW9uLnNlbmQoJ09rLi4uIG5vIHByb2JsZW0uJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBdKTtcbiAgICBkaWFsb2cub25EZWZhdWx0KGZ1bmN0aW9uIChzZXNzaW9uKSB7XG4gICAgICAgIGxvZ1F1ZXJ5KHNlc3Npb24sIFwib25EZWZhdWx0XCIpO1xuICAgICAgICB2YXIgZWxpemEgPSBnZXRFbGl6YUJvdChnZXRDb252ZXJzYXRpb25JZChzZXNzaW9uKSk7XG4gICAgICAgIHZhciByZXBseSA9IGVsaXphLnRyYW5zZm9ybShzZXNzaW9uLm1lc3NhZ2UudGV4dCk7XG4gICAgICAgIGRpYWxvZ2xvZyhcImVsaXphXCIsIHNlc3Npb24sIHNlbmQocmVwbHkpKTtcbiAgICAgICAgLy9uZXcgRWlsemFib3RcbiAgICAgICAgLy9zZXNzaW9uLnNlbmQoXCJJIGRvIG5vdCB1bmRlcnN0YW5kIHRoaXMgYXQgYWxsXCIpO1xuICAgICAgICAvL2J1aWxkZXIuRGlhbG9nQWN0aW9uLnNlbmQoJ0lcXCdtIHNvcnJ5IEkgZGlkblxcJ3QgdW5kZXJzdGFuZC4gSSBjYW4gb25seSBzaG93IHN0YXJ0IGFuZCByaW5nJyk7XG4gICAgfSk7XG4gICAgLypcbiAgICAvLyBWZXJ5IHNpbXBsZSBhbGFybSBzY2hlZHVsZXJcbiAgICB2YXIgYWxhcm1zID0ge307XG4gICAgc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIG5vdyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgZm9yICh2YXIga2V5IGluIGFsYXJtcykge1xuICAgICAgICB2YXIgYWxhcm0gPSBhbGFybXNba2V5XTtcbiAgICAgICAgaWYgKG5vdyA+PSBhbGFybS50aW1lc3RhbXApIHtcbiAgICAgICAgICB2YXIgbXNnID0gbmV3IGJ1aWxkZXIuTWVzc2FnZSgpXG4gICAgICAgICAgICAuYWRkcmVzcyhhbGFybS5hZGRyZXNzKVxuICAgICAgICAgICAgLnRleHQoJ0hlcmVcXCdzIHlvdXIgXFwnJXNcXCcgYWxhcm0uJywgYWxhcm0udGl0bGUpO1xuICAgICAgICAgIGJvdC5zZW5kKG1zZyk7XG4gICAgICAgICAgZGVsZXRlIGFsYXJtc1trZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwgMTUwMDApO1xuICAgICovXG59XG5pZiAobW9kdWxlKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgICAgIFNpbXBsZVVwRG93blJlY29nbml6ZXI6IFNpbXBsZVVwRG93blJlY29nbml6ZXIsXG4gICAgICAgIGFSZXNwb25zZXNPblRvb0xvbmc6IGV4cG9ydHMuYVJlc3BvbnNlc09uVG9vTG9uZyxcbiAgICAgICAgbWV0YXdvcmRzRGVzY3JpcHRpb25zOiBleHBvcnRzLm1ldGF3b3Jkc0Rlc2NyaXB0aW9ucyxcbiAgICAgICAgbWFrZUJvdDogbWFrZUJvdFxuICAgIH07XG59XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
